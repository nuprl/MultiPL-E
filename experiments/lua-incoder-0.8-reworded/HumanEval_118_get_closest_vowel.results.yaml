language: lua
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- your solution goes here\n\tlocal vowels = string.rep('aeiou',1)\n\tlocal\
    \ vowels_start = string.sub(word,-1,1)\n\tlocal vowels_end = string.sub(word,-1,-1)\n\
    \t\n\tif vowels_start ~= vowels_end and vowels_start ~= \"\" then\n\t\tlocal vowel_index\
    \ = string.find(vowels,vowels_start,1,'i')\n\t\tif vowel_index then\n\t\t\tlocal\
    \ vowel = vowels[vowel_index]\n\t\t\tif vowel then\n\t\t\t\treturn vowel\n\t\t\
    \tend\n\t\tend\n\tend\n\t\n\treturn \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3gb0nuv.lua:37:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd3gb0nuv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\ttable.insert(vowels, \"AEIOUaeiou\")\n\ttable.insert(vowels,\
    \ \"AEIOU\")\n\ttable.insert(vowels, \"aAEIOU\")\n\ttable.insert(vowels, \"AeiouAEIOU\"\
    )\n\ttable.insert(vowels, \"aeiouAEIOU\")\n\ttable.insert(vowels, \"AEIOUA\")\n\
    \ttable.insert(vowels, \"AeiouAEIOUA\")\n\ttable.insert(vowels, \"AEIOUAEIOU\"\
    )\n\ttable.insert(vowels, \"AEIOUAEIOUAEIOU\")\n\ttable.insert(vowels, \"AEIOUAEIOUAEIOUAEIOU\"\
    )\n\ttable.insert(vowels, \"AEIOUAEIOUAEIOUAEIOUAEIOU\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0i8z4v21.lua:47: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n\tlocal pos = #word - 1\n\t\
    if word[pos] == nil then\n\t\treturn \"\"\n\tend\n\tlocal consonants = {string.sub(word,pos,pos+1),string.sub(word,pos,pos-1),string.sub(word,pos-1,pos-1)}\n\
    \tlocal vowel, vowel_flag\n\tlocal vowel_index\n\tfor i=1, 3 do\n\t\tlocal consonant\
    \ = consonants[i]\n\t\tif consonant == nil then\n\t\t\tbreak\n\t\tend\n\t\tif\
    \ consonant[1] >= 'a' and consonant[1] < 'z' then\n\t\t\tif consonant[1] == consonant[2]\
    \ then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tlocal vowel_pos = string.find(vowels,consonant)\n\
    \t\tif vowel_pos then\n\t\t\tif vowel_flag == nil then\n\t\t\t\tvowel_flag = vowel_pos\n\
    \t\t\t\tvowel = consonant\n\t\t\tend\n\t\tend\n\tend\n\tif vowel_flag == nil then\n\
    \t\treturn \"\"\n\tend\n\tlocal vowel_pos = math.abs(vowel_flag - pos)\n\tif vowel_pos\
    \ == 1 then\n\t\treturn vowel\n\telseif vowel_pos == 2 then\n\t\tif vowel == \"\
    a\" then\n\t\t\treturn vowel\n\t\telse\n\t\t\treturn vowel .. \"u\"\n\t\tend\n\
    \telseif vowel_pos == 3 then\n\t\tif vowel == \"e\" then\n\t\t\treturn vowel\n\
    \t\telse\n\t\t\treturn vowel .. \"i\"\n\t\tend\n\telseif vowel_pos == 4 then\n\
    \t\tif vowel == \"i\" then\n\t\t\treturn vowel\n\t\telse\n\t\t\treturn vowel ..\
    \ \"o\"\n\t\tend\n\telseif vowel_pos == 5 then\n\t\tif vowel == \"o\" then\n\t\
    \t\treturn vowel\n\t\telse\n\t\t\treturn vowel .. \"u\"\n\t\tend\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y3tmwb0.lua:78:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1y3tmwb0.lua:78:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {}\n   for i = 1, #word do \n      vowels[string.sub(word,\
    \ i, i)] = {}\n   end\n   for i = 1, #word do\n      if string.sub(word, -i, -1)\
    \ == 'u' or string.sub(word, -i, -1) == 'y' then\n         vowels[string.sub(word,\
    \ -i, -1)][#vowels[string.sub(word, -i, -1)]+1] = string.sub(word, -i, -i+1)\n\
    \      end\n   end\n   if #vowels[string.sub(word, -i, -1)] == 0 then\n      return\
    \ ''\n   else\n      local count = 0\n      for i = #vowels[string.sub(word, -i,\
    \ -1)], 2, -1 do\n         if vowels[string.sub(word, -i, -1)] == nil then\n \
    \           count = count + 1\n         elseif #vowels[string.sub(word, -i, -1)]\
    \ >= count then\n            return string.sub(word, -i, -i+1)\n         end\n\
    \      end\n   end\n   return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmp3xyfo6.lua:25:\
    \ attempt to perform arithmetic on a nil value (global 'i')\nstack traceback:\n\
    \t/tmp/tmpmp3xyfo6.lua:25: in local 'candidate'\n\t/tmp/tmpmp3xyfo6.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local len =\
    \ string.len(word)\n    for i = 1, len do\n        if string.sub(word,len - i\
    \ - 1,len - i) ~= '' then\n            local count = 0\n            for j = 1,\
    \ i do\n                if string.sub(word,len - i - 1,len - i) ~= string.sub(word,len\
    \ - j - 1,len - j) then\n                    count = count + 1\n             \
    \   end\n            end\n            if count > 0 then\n                local\
    \ vowel = string.sub(word,len - i - 1,len - i)\n                if vowel in vowels\
    \ then\n                    return vowel\n                end\n            end\n\
    \        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5ohoof10.lua:28: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal alphabet = \"bcdfghjklmnpqrstvwxyz\"\n\tlocal alphabetSize = #alphabet\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowelsSize = #vowels\n\tlocal consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\tlocal consonantsSize = #consonants\n\
    \tlocal i = 0\n\tlocal closestVowel = 0\n\tlocal closestConsonant = 0\n\tlocal\
    \ previousWord = word\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprpccdv90.lua:45: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowel = nil\n  for i = #word, 2, -1 do\n    local c = word[i]\n    if\
    \ c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n  \
    \    if vowel ~= nil then\n        vowel = nil\n        break\n      end\n   \
    \   vowel = c\n    end\n  end\n  return vowel\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pg6v7my.lua:33:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9pg6v7my.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowel = nil\n  for i = 1, #word do\n    local j = i - 1\n    local k\
    \ = i + 1\n    if word[i] ~= 'a' and word[i] ~= 'e' and word[i] ~= 'i' and word[i]\
    \ ~= 'o' and word[i] ~= 'u'\n    then\n      if word[i] ~= 'o' and word[i] ~=\
    \ 'u' then\n        vowel = word[i]\n        break\n      end\n    end\n  end\n\
    \  if vowel == nil then\n    return ''\n  end\n  for i = #word, 2, -1 do\n   \
    \ local j = i - 1\n    local k = i + 1\n    if word[i] ~= 'a' and word[i] ~= 'e'\
    \ and word[i] ~= 'i' and word[i] ~= 'o' and word[i] ~= 'u'\n    then\n      if\
    \ word[i] ~= 'o' and word[i] ~= 'u' then\n        if vowel == word[j] or vowel\
    \ == word[k] then\n          vowel = word[i]\n          break\n        end\n \
    \     end\n    end\n  end\n  return vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpboqplg0u.lua:50:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpboqplg0u.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwzk80ux_.lua:16: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','o','u','A','O','U'}\n  for i = 1, #word-1 do\n    for\
    \ j = 1, #vowels do\n      if vowels[j] <= word[i] and word[i+j] <= vowels[j+1]\
    \ then return vowels[j+1]\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphy110jm5.lua:43: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = #word\n\t\n\tfor i = 1, vowels_count do\n\t\tlocal vowel\
    \ = word:sub(i,i)\n\t\tif vowels[vowel:lower():find(vowel)] then\n\t\t\tif vowels_index\
    \ == i then\n\t\t\t\treturn ''\n\t\t\telse\n\t\t\t\tvowels_index = i - 1\n\t\t\
    \tend\n\t\tend\n\tend\n\t\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98ui1ryc.lua:37:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp98ui1ryc.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'o', 'i', 'u', 'v'}\n    local vowels_count = 0\n\
    \    for i=#word, -1 do\n        local cur_char = word:sub(i,i)\n        if cur_char\
    \ in vowels then\n            vowels_count = vowels_count + 1\n        end\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmikrrged.lua:20: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_length = #vowels\n\
    \  local vowels_count = #word\n  local index = 1\n  local result = ''\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ldb6dcq.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- Base case\n  if word == nil then return nil end\n  \n  -- Find first non-vowel\
    \ and return the last one\n  local _, index = string.find(word, \"[^aeiou]\",\
    \ 1, true)\n  \n  -- If the first index doesn't exist\n  if index == nil then\
    \ return nil end\n  \n  -- If the index is the first character\n  if index ==\
    \ 1 then \n    -- Get the first character and check if it's a vowel\n    if word[index]\
    \ ~= 'a' and  word[index] ~= 'e' and  word[index] ~= 'i' and  word[index] ~= 'o'\
    \ and  word[index] ~= 'u' then\n      return word[index]\n    end\n  end\n  \n\
    \  -- Go backward\n  index = string.sub(word, index-1, index)\n  \n  -- If the\
    \ index is the first character\n  if index == 1 then \n    -- Get the first character\
    \ and check if it's a vowel\n    if word[index] ~= 'a' and  word[index] ~= 'e'\
    \ and  word[index] ~= 'i' and  word[index] ~= 'o' and  word[index] ~= 'u' then\n\
    \      return word[index]\n    end\n  end\n  \n  -- Go forward\n  index = string.sub(word,\
    \ index+1, index)\n  \n  -- If the index is the first character\n  if index ==\
    \ 1 then \n    -- Get the first character and check if it's a vowel\n    if word[index]\
    \ ~= 'a' and  word[index] ~= 'e' and  word[index] ~= 'i' and  word[index] ~= 'o'\
    \ and  word[index] ~= 'u' then\n      return word[index]\n    end\n  end\n  \n\
    \  -- Go backward\n  index = string.sub(word, index-1, index)\n  \n  -- If the\
    \ index is the first character\n  if index == 1 then \n    -- Get the first character\
    \ and check if it's a vowel\n    if word[index] ~= 'a' and  word[index] ~= 'e'\
    \ and  word[index] ~= 'i' and  word[index] ~= 'o' and  word[index] ~= 'u' then\n\
    \      return word[index]\n    end\n  end\n  \n  -- Go forward\n  index = string.sub(word,\
    \ index+1, index)\n  \n  -- If the index is the first character\n  if index ==\
    \ 1 then \n    -- Get the first character and check if it's a vowel\n    if word[index]\
    \ ~= 'a' and  word[index] ~= 'e' and  word[index] ~= 'i' and  word[index] ~= 'o'\
    \ and  word[index] ~= 'u' then\n      return word[index]\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv0zr9te3.lua:94: ''end'' expected (to close ''if'' at line
    70) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\
    \t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\
    \t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\t\
    'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\t\
    \t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n\
    \t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a',\n\t\t'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a',\n\t\t'a', 'a', 'a', 'a', 'a', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdj_af0oo.lua:43: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tvowels[#vowels+1] = 'a'\n\tvowels[#vowels+1] = 'e'\n\t\
    vowels[#vowels+1] = 'i'\n\tvowels[#vowels+1] = 'o'\n\tvowels[#vowels+1] = 'u'\n\
    \tlocal vowels_count = #vowels\n\tlocal vowel = nil\n\t\n\tfor i = 1, #word do\n\
    \t\tif word:sub(i, i) ~= 'a' then\n\t\t\tvowel = word:sub(i, i)\n\t\telseif word:sub(i,\
    \ i) == 'a' then\n\t\t\tif vowel ~= nil then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\
    \tvowel = word:sub(i-1, i-1)\n\t\t\tend\n\t\tend\n\tend\n\treturn vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlf7btfv.lua:42:\
    \ expected: \"u\"\nactual: \"t\"\nstack traceback:\n\t/tmp/tmptlf7btfv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tfor i =\
    \ #word, 1 do\n\t\tfor j = #word, 1 do\n\t\t\tif word[i] == 'a' and word[j] ~=\
    \ 'e' and word[j] ~= 'i' and word[j] ~= 'o' and word[j] ~= 'u' then\n\t\t\t\t\
    return word[j]\n\t\t\telseif word[i] == 'e' and word[j] ~= 'a' and word[j] ~=\
    \ 'i' and word[j] ~= 'o' and word[j] ~= 'u' then\n\t\t\t\treturn word[j]\n\t\t\
    \telseif word[i] == 'i' and word[j] ~= 'a' and word[j] ~= 'e' and word[j] ~= 'o'\
    \ and word[j] ~= 'u' then\n\t\t\t\treturn word[j]\n\t\t\telseif word[i] == 'o'\
    \ and word[j] ~= 'a' and word[j] ~= 'e' and word[j] ~= 'i' and word[j] ~= 'u'\
    \ then\n\t\t\t\treturn word[j]\n\t\t\telseif word[i] == 'u' and word[j] ~= 'a'\
    \ and word[j] ~= 'e' and word[j] ~= 'i' and word[j] ~= 'o' then\n\t\t\t\treturn\
    \ word[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kh3qcp0.lua:38:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0kh3qcp0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4dkgwm8f.lua:16: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a','e','i','o','u' }\n\tlocal closest_vowel = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd64cs7md.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Your code here\n\tlocal result = \"\"\n\tlocal vowels = \"AEIOUYaeiouy\"\n\
    \tfor i = 1, #word do\n\t\tlocal first = word:sub(1, i)\n\t\tif first:upper()\
    \ == first then\n\t\t\tlocal consonant = word:sub(i, i)\n\t\t\tif not consonant\
    \ then\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\t\tfor j = 1, #vowels do\n\t\t\t\t\
    local vowel = vowels:sub(j, j)\n\t\t\t\tif vowel == first or vowel == first:upper()\
    \ then\n\t\t\t\t\tif result:len() == 0 then\n\t\t\t\t\t\tresult = vowel\n\t\t\t\
    \t\telse\n\t\t\t\t\t\tresult = result .. vowel\n\t\t\t\t\tend\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj0__a79.lua:44:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqj0__a79.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    table.insert(vowels, 'a')\n    table.insert(vowels,\
    \ 'e')\n    table.insert(vowels, 'i')\n    table.insert(vowels, 'o')\n    table.insert(vowels,\
    \ 'u')\n    table.insert(vowels, 'y')\n    table.insert(vowels, 'y')\n    table.insert(vowels,\
    \ 'a')\n    table.insert(vowels, 'o')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt4xj1zct.lua:45: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal consonants = { 'b', 'c',\
    \ 'd', 'f', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'y',\
    \ 'z'}\n\tlocal n = #word\n\tlocal vowel_found = false\n\tlocal vowel_candidate\
    \ = \"\"\n\tlocal consonant_candidate = \"\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexpt7cng.lua:41: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = string.char('a','e','i','o','u')\n    for i = #word, 1, -1\
    \ do\n        local word = word:sub(1,i)\n        local consonants = string.char('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z')\n\
    \        if word:sub(1,1) == 'b' then\n            return word:sub(2,2)\n    \
    \    end\n        if word:sub(1,1) == 'c' then\n            return word:sub(2,3)\n\
    \        end\n        if word:sub(1,1) == 'd' then\n            return word:sub(2,4)\n\
    \        end\n        if word:sub(1,1) == 'f' then\n            return word:sub(2,5)\n\
    \        end\n        if word:sub(1,1) == 'g' then\n            return word:sub(2,6)\n\
    \        end\n        if word:sub(1,1) == 'h' then\n            return word:sub(2,7)\n\
    \        end\n        if word:sub(1,1) == 'j' then\n            return word:sub(2,8)\n\
    \        end\n        if word:sub(1,1) == 'k' then\n            return word:sub(2,9)\n\
    \        end\n        if word:sub(1,1) == 'l' then\n            return word:sub(2,10)\n\
    \        end\n        if word:sub(1,1) == 'm' then\n            return word:sub(2,11)\n\
    \        end\n        if word:sub(1,1) == 'n' then\n            return word:sub(2,12)\n\
    \        end\n        if word:sub(1,1) == 'p' then\n            return word:sub(2,13)\n\
    \        end\n        if word:sub(1,1) == 'q' then\n            return word:sub(2,14)\n\
    \        end\n        if word:sub(1,1) == 'r' then\n            return word:sub(2,15)\n\
    \        end\n        if word:sub(1,1) == 's' then\n            return word:sub(2,16)\n\
    \        end\n        if word:sub(1,1) == 't' then\n            return word:sub(2,17)\n\
    \        end\n        if word:sub(1,1) == 'v' then\n            return word:sub(2,18)\n\
    \        end\n        if word:sub(1,1) == 'w' then\n            return word:sub(2,19)\n\
    \        end\n        if word:sub(1,1) == 'x' then\n            return word:sub(2,20)\n\
    \        end\n        if word:sub(1,1) == 'z' then\n            return word:sub(2,21)\n\
    \        end\n        if word:sub(1,1) == 'A' then\n            return word:sub(2,2)\n\
    \        end\n        if word:sub(1,1) == 'B\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk5ujjc08.lua:83: unfinished string near ''''B''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   for i,v in pairs({\"a\",\"e\",\"i\",\"o\",\"u\"}) do\n      if word:find(v,1,true)\
    \ then\n         return v\n      end\n   end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23g9embc.lua:26:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp23g9embc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  word = string.gsub(word, \"[aeiou]\", \"\")\n  local vowels = {\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"}\n  local vowel_start = {}\n  local vowel_end = {}\n\
    \  local vowel_found = false\n  \n  for i = 1, #word do\n    if word[i] == \"\
    a\" then\n      vowel_start = {\"a\", \"a\"}\n      vowel_end   = {\"a\", \"a\"\
    }\n      vowel_found = true\n      break\n    end\n    \n    if word[i] == \"\
    e\" then\n      vowel_start = {\"e\", \"e\"}\n      vowel_end   = {\"e\", \"e\"\
    }\n      vowel_found = true\n      break\n    end\n    \n    if word[i] == \"\
    i\" then\n      vowel_start = {\"i\", \"i\"}\n      vowel_end   = {\"i\", \"i\"\
    }\n      vowel_found = true\n      break\n    end\n    \n    if word[i] == \"\
    o\" then\n      vowel_start = {\"o\", \"o\"}\n      vowel_end   = {\"o\", \"o\"\
    }\n      vowel_found = true\n      break\n    end\n    \n    if word[i] == \"\
    u\" then\n      vowel_start = {\"u\", \"u\"}\n      vowel_end   = {\"u\", \"u\"\
    }\n      vowel_found = true\n      break\n    end\n    \n    if word[i] == \"\
    y\" then\n      vowel_start = {\"y\", \"y\"}\n      vowel_end   = {\"y\", \"y\"\
    }\n      vowel_found = true\n      break\n    end\n  end\n  \n  if vowel_found\
    \ then\n    for i = #vowels, 1, -1 do\n      if string.find(word, vowels[i]) then\n\
    \        return vowels[i]\n      end\n    end\n  end\n  \n  return \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel5s2bn3.lua:80:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpel5s2bn3.lua:80:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return string.gsub(word, \"([AEIOUaeiou])([aeiouAEIOU])\", function(match,\
    \ vowel, consonant)\n        return vowel ~= consonant\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nu8qdol.lua:24:\
    \ expected: \"u\"\nactual: \"yogurt\"\nstack traceback:\n\t/tmp/tmp_nu8qdol.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  word = word:lower()\n  local vowels = {}\n  local vowel_index = nil\n  local\
    \ vowel_min_dist = nil\n  for i = #word, 1, -1 do\n    if string.sub(word, 1,\
    \ i) == \"a\" then\n      vowel_index = i\n      break\n    end\n  end\n  if vowel_index\
    \ == nil then\n    return \"\"\n  end\n  for j = #word, vowel_index - 1, -1 do\n\
    \    if string.sub(word, j, \"a\") == \"a\" then\n      break\n    end\n  end\n\
    \  for i = #word, vowel_index + 1, #word do\n    if string.sub(word, i, \"a\"\
    ) == \"a\" then\n      break\n    end\n  end\n  if j == nil then\n    return \"\
    \"\n  end\n  for i = #word, vowel_index - 1, #word do\n    if string.sub(word,\
    \ i, \"a\") == \"a\" then\n      break\n    end\n  end\n  if i == nil then\n \
    \   return \"\"\n  end\n  for i = #word, vowel_index + 1, #word do\n    if string.sub(word,\
    \ i, \"a\") == \"a\" then\n      break\n    end\n  end\n  if i == nil then\n \
    \   return \"\"\n  end\n  for j = #word, vowel_index - 1, #word do\n    if string.sub(word,\
    \ j, \"a\") == \"a\" then\n      break\n    end\n  end\n  if j == nil then\n \
    \   return \"\"\n  end\n  for i = #word, vowel_index + 1, #word do\n    if string.sub(word,\
    \ i, \"a\") == \"a\" then\n      break\n    end\n  end\n  if i == nil then\n \
    \   return \"\"\n  end\n  for j = #word, vowel_index - 1, #word do\n    if string.sub(word,\
    \ j, \"a\") == \"a\" then\n      break\n    end\n  end\n  if j == nil then\n \
    \   return \"\"\n  end\n  for i = #word, vowel_index + 1, #word do\n    if string.sub(word,\
    \ i, \"a\") == \"a\" then\n      break\n    end\n  end\n  if i == nil then\n \
    \   return \"\"\n  end\n  if j > i then\n    vowel_min_dist = string.sub(word,\
    \ vowel_index, \"a\")\n    local vowel = string.sub(word, 1, vowel_index - 1)\
    \ + string.sub(word, vowel_index + 1, #word) -- remove first letter \n    if vowel\
    \ == \"i\" or vowel == \"e\" or vowel == \"o\" or vowel == \"u\" then\n      return\
    \ vowel\n    end\n    if string.find(vowel, \"a\") then\n      local vowel_max_dist\
    \ = string.find(vowel, \"a\") - 1\n      if vowel_min_dist > vowel_max_dist then\n\
    \        local vowel_min_dist = vowel_max_dist\n        local vowel = string.sub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxjsasmz1.lua:101: '')'' expected (to close ''('' at line 100)
    near ''=''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   -- Check whether the given word is valid\n   if word:len() < 3 then\n    \
    \  return ''\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7c7td9en.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- Start looking from the right\n  for i = #word, 2, -1 do\n    -- Check if\
    \ the current character is a vowel\n    if string.sub(i, 1, 1) == \".\" || string.sub(i,\
    \ 1, 1) == \"o\" then\n      -- If yes, return this vowel\n      return string.sub(i,\
    \ 1, 1)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6n876399.lua:19: unexpected symbol near ''|''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_start_index = #word\n\
    \    local vowel_end_index = 1\n    local last_consonant_index = 1\n    while\
    \ vowel_end_index < #word and word[vowel_end_index] ~= 'c' do\n        last_consonant_index\
    \ = last_consonant_index + 1\n    end\n    local consonant_end_index = last_consonant_index\
    \ + 1 -- index of last consonant\n    while vowel_start_index > 1 and word[vowel_start_index\
    \ - 1], word[vowel_start_index] ~= 'c' do\n        vowel_start_index = vowel_start_index\
    \ - 1\n    end\n    while consonant_end_index < #word and word[consonant_end_index]\
    \ ~= 'c' do\n        consonant_end_index = consonant_end_index + 1\n    end\n\
    \    if vowel_end_index > 1 then\n        local vowel_candidate = word[vowel_end_index\
    \ + 1]\n        for _, v in ipairs(vowels) do\n            if vowel_candidate\
    \ == v then\n                return v\n            end\n        end\n        return\
    \ ''\n    end\n    if consonant_end_index > 1 then\n        local consonant_candidate\
    \ = word[consonant_end_index + 1]\n        for _, c in ipairs({'a', 'e', 'i',\
    \ 'o', 'u'}) do\n            if consonant_candidate == c then\n              \
    \  return c\n            end\n        end\n        return ''\n    end\n    if\
    \ consonant_start_index > 1 then\n        local consonant_candidate = word[consonant_start_index\
    \ + 1]\n        for _, c in ipairs({'a', 'e', 'i', 'o', 'u'}) do\n           \
    \ if consonant_candidate == c then\n                return c\n            end\n\
    \        end\n        return ''\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplagf2m7o.lua:24: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    word = word\n    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local length\
    \ = 0\n    local vowel = ''\n    for i, v in ipairs(vowels) do\n        local\
    \ s = word:sub(i, i + 1)\n        local len = string.len(s)\n        if len ==\
    \ 0 then break end\n        length = len + 1\n        if string.find(s, v) then\n\
    \            vowel = v\n        end\n    end\n    if length == 1 then\n      \
    \  return vowel\n    end\n    for i = length + 1, string.len(word) do\n      \
    \  local s = word:sub(i, i - 1)\n        local len = string.len(s)\n        if\
    \ len == 0 then break end\n        length = len + 1\n        if string.find(s,\
    \ v) then\n            vowel = v\n        end\n    end\n    return vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxhirbk8.lua:47:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphxhirbk8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = #vowels\n\
    \    if word:sub(1, 1) == 'a' or word:sub(1, 1) == 'e' or word:sub(1, 1) == 'o'\
    \ or word:sub(1, 1) == 'u' then\n        return word:sub(1, 1)\n    end\n    local\
    \ vowels_index = {}\n    local last_vowel_index = 0\n    for i = 1, vowels_count\
    \ do\n        local index = word:find(vowels[i])\n        if index == nil then\n\
    \            return ''\n        end\n        vowels_index[i] = index\n       \
    \ if index > last_vowel_index then\n            last_vowel_index = index\n   \
    \     end\n    end\n    local start = word:len() - last_vowel_index\n    local\
    \ found_vowel = word:sub(start, last_vowel_index)\n    if found_vowel:lower():find('aeiou')\
    \ then\n        return found_vowel:sub(1, 1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mpnfuct.lua:43:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2mpnfuct.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    -- your code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k6n1gyy.lua:22:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8k6n1gyy.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_starts = {}\n \
    \   local vowel_ends = {}\n    \n    for _, v in ipairs(vowels) do\n        vowel_starts[v]\
    \ = word:sub(1, v - 1)\n        vowel_ends[v] = word:sub(v + 1, #word)\n    end\n\
    \    \n    local vowel_start\n    local vowel_end\n    \n    for _, v in ipairs(vowels)\
    \ do\n        if vowel_starts[v] ~= nil then\n            vowel_start = v\n  \
    \          break\n        end\n    end\n    \n    for _, v in ipairs(vowels) do\n\
    \        if vowel_ends[v] ~= nil then\n            vowel_end = v\n           \
    \ break\n        end\n    end\n    \n    if vowel_start == nil then\n        return\
    \ ''\n    end\n    \n    local vowel\n    \n    if vowel_start < vowel_end then\n\
    \        vowel = word:sub(vowel_start + 1, vowel_end)\n    else\n        vowel\
    \ = word:sub(vowel_end - 1, 1)\n    end\n    \n    return vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcf0xd_xq.lua:21:\
    \ attempt to sub a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmpcf0xd_xq.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcf0xd_xq.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local function has_vowel(cc)\n        return cc ~= nil and cc ~= '' and cc.isidentifier\
    \ and string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~= '^[%^' and string.sub(cc,1,1)\
    \ ~= '^[%'\n    end\n    local function vowel_before(consonant)\n        return\
    \ string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~= '^[%^' and string.sub(cc,1,1)\
    \ ~= '^[%'\n    end\n    local function vowel_after(consonant)\n        return\
    \ string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~= '^[%^' and string.sub(cc,1,1)\
    \ ~= '^[%'\n    end\n    local function vowel_first(consonant)\n        return\
    \ string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~= '^[%^' and string.sub(cc,1,1)\
    \ ~= '^[%'\n    end\n    local function vowel_last(consonant)\n        return\
    \ string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~= '^[%^' and string.sub(cc,1,1)\
    \ ~= '^[%'\n    end\n    local function consonant_first(vowel)\n        return\
    \ vowel_first(vowel) and string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1) ~=\
    \ '^[%^' and string.sub(cc,1,1) ~= '^[%'\n    end\n    local function consonant_last(vowel)\n\
    \        return vowel_last(vowel) and string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1)\
    \ ~= '^[%^' and string.sub(cc,1,1) ~= '^[%'\n    end\n    local function consonant_after(vowel)\n\
    \        return vowel_after(vowel) and string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1)\
    \ ~= '^[%^' and string.sub(cc,1,1) ~= '^[%'\n    end\n    local function consonant_before(vowel)\n\
    \        return vowel_before(vowel) and string.sub(cc,1,1) ~= '^%' and string.sub(cc,1,1)\
    \ ~= '^[%^' and string.sub(cc,1,1) ~= '^[%'\n    end\n    local function consonant_middle(vowel)\n\
    \        return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfnmg8ee8.lua:45: ''end'' expected (to close ''function'' at
    line 43) near ''=''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\"e\",\"i\",\"o\",\"u\",\n        \"a\",\"\
    e\",\"i\",\"o\",\"u\",\n        \"a\",\"e\",\"i\",\"o\",\"u\",\n        \"a\"\
    ,\"e\",\"i\",\"o\",\"u\"\n    }\n    if #word < 2 then\n        return \"\"\n\
    \    end\n    local letter = word[#word]\n    for i=#word,1,-1 do\n        if\
    \ word[i] ~= letter then\n            letter = word[i]\n            break\n  \
    \      end\n    end\n    return vowels[math.abs(letter-97)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgdoq_jv.lua:32:\
    \ attempt to perform arithmetic on a nil value (local 'letter')\nstack traceback:\n\
    \t/tmp/tmphgdoq_jv.lua:32: in local 'candidate'\n\t/tmp/tmphgdoq_jv.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \treturn string.lower(word)[string.find(string.lower(word), vowel):(string.len(word)\
    \ - string.find(string.lower(word), vowel) + 1)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpctotuky3.lua:16: <name> expected near ''(''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {}\n   for i=1,#word do\n      local letter = word:sub(i,i)\n\
    \      local vowel = letter:lower()\n      vowels[vowel] = true\n   end\n   \n\
    \   local consonants = {}\n   for i=#word,1,-1 do\n      local letter = word:sub(i,i)\n\
    \      local consonant = letter:lower()\n      if not consonants[consonant] then\n\
    \         consonants[consonant] = true\n      end\n   end\n   \n   return vowels[#vowels]\
    \ or #vowels > 0 and vowels[1] or ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60e12_8o.lua:38:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp60e12_8o.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_found = false\n\tlocal\
    \ vowel_found2 = false\n\tlocal vowel_found3 = false\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqb8zgwg2.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local index\n \
    \ local vowel\n  local found\n  \n  -- First look for the first vowel \n  index\
    \ = word:find('[aeiou]', 1, true) \n  if index then\n    vowel = word:sub(index-1,\
    \ index+1) \n    found = false\n    while vowel:len() > 0 do\n      local found\
    \ = false\n      for i=1,#vowels do\n        if vowel:lower() == vowels[i] then\n\
    \          found = true\n        end\n      end\n      if not found then \n  \
    \      break\n      end\n      vowel = word:sub(1, index-1) \n    end\n    if\
    \ found then \n      -- Reverse the vowel \n      return vowel:reverse() \n  \
    \  end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj1dl6jd.lua:48:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmphj1dl6jd.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  word = word:lower()\n  local vowels = {}\n  for i=#word, 2, -1 do\n    local\
    \ is_vowel = word:sub(i-1,i)==\"a\"\n    if word:sub(i-1,i)==\"o\" then\n    \
    \  is_vowel = is_vowel and word:sub(i-1,i)==\"u\"\n    end\n    if is_vowel then\n\
    \      table.insert(vowels, word:sub(i-1,i))\n    end\n  end\n  \n  if #vowels\
    \ == 1 then\n    local vowel = vowels[1]\n    return vowel\n  else\n    return\
    \ \"\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajti56pq.lua:39:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpajti56pq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels, consonants, i = {}, {}, 0\n  for _,v in pairs(string.gsub(word,\
    \ \"[aeiou]\", \"\")) do\n    table.insert(vowels, v)\n  end\n  for _,c in pairs(string.gsub(word,\
    \ \"[bcdfghjklmnpqrstvwxyz]\", \"\")) do\n    table.insert(consonants, c)\n  end\n\
    \  \n  while i < #word and #consonants < #word and #vowels < #word do\n    local\
    \ consonant, vowel, idx = nil, nil, 0\n    for _,c in pairs(string.gsub(word,\
    \ \"[bcdfghjklmnpqrstvwxyz]\", \"\")) do\n      if idx == #consonants then --\
    \ found the first consonant\n        if c == consonants[idx] then -- found it\n\
    \          consonant = c\n          break\n        elseif c == consonants[#consonants]\
    \ and idx > 0 then -- found the second consonant\n          consonant = c\n  \
    \        break\n        end\n      end\n      idx = idx + 1\n    end\n    \n \
    \   local idx = #consonants - 1 -- consonants to the left\n    for _,v in pairs(string.gsub(word,\
    \ \"[aeiou]\", \"\")) do\n      if idx == 0 then -- found the first vowel\n  \
    \      if c == vowels[idx] then -- found it\n          vowel = v\n          break\n\
    \        elseif c == vowels[#vowels] and idx > 0 then -- found the second vowel\n\
    \          vowel = v\n          break\n        end\n      end\n      idx = idx\
    \ - 1\n    end\n    \n    if consonant ~= nil and vowel ~= nil then\n      return\
    \ consonant .. vowel\n    end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9vkykl3.lua:17:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj9vkykl3.lua:17: in local 'candidate'\n\t/tmp/tmpj9vkykl3.lua:63: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Write your code here.\n\tlocal vowels = {'A','E','I','O','U','Y','a','e','i','o','u'}\n\
    \t\n\tlocal vowel_count = {}\n\tfor _,v in ipairs(vowels) do\n\t\ttable.insert(vowel_count,0)\n\
    \tend\n\t\n\tfor i,v in ipairs(vowels) do\n\t\tvowel_count[v] = word:gsub(v,\"\
    \")\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94yrn17f.lua:46: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   if string.find(word, 'a') == 1 then\n      return ''\n   elseif string.find(word,\
    \ 'e') == 1 then\n      return ''\n   elseif string.find(word, 'i') == 1 then\n\
    \      return ''\n   elseif string.find(word, 'o') == 1 then\n      return ''\n\
    \   elseif string.find(word, 'u') == 1 then\n      return ''\n   elseif string.find(word,\
    \ 'y') == 1 then\n      return ''\n   elseif string.find(word, 'd') == 1 then\n\
    \      return ''\n   elseif string.find(word, 'o') == 1 then\n      return ''\n\
    \   elseif string.find(word, 'f') == 1 then\n      return ''\n   elseif string.find(word,\
    \ 'q') == 1 then\n      return ''\n   else\n      return ''\n   end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptawbrcvd.lua:44:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptawbrcvd.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tif word:find('[^aeiou]') then\n\t\treturn word:sub(word:find('[^aeiou]'), word:len())\n\
    \telse\n\t\treturn word:sub(2, word:len())\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3laxted6.lua:26:\
    \ expected: \"u\"\nactual: \"yogurt\"\nstack traceback:\n\t/tmp/tmp3laxted6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Write your code here\n\tlocal vowels = {}\n\tvowels['a'] = true\n\tvowels['e']\
    \ = true\n\tvowels['i'] = true\n\tvowels['o'] = true\n\tvowels['u'] = true\n\t\
    local vowel = \"\"\n\tfor i = #word, 1, -1 do\n\t\tif word[i] == 'a' or word[i]\
    \ == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\t\t\tvowel\
    \ = word[i]\n\t\tend\n\tend\n\tif vowel ~= \"\" then\n\t\tfor i = #word, 1, -1\
    \ do\n\t\t\tif word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] ==\
    \ 'o' or word[i] == 'u' then\n\t\t\t\tlocal consonants = string.sub(word,i,i)\n\
    \t\t\t\tif consonants == 'bcdfghjklmnpqrstvwxyz' then\n\t\t\t\t\tfor i = #word,\
    \ 1, -1 do\n\t\t\t\t\t\tif word[i] == 'a' or word[i] == 'e' or word[i] == 'i'\
    \ or word[i] == 'o' or word[i] == 'u' then\n\t\t\t\t\t\t\tlocal consonants = string.sub(word,i,i)\n\
    \t\t\t\t\t\t\tif consonants == 'bcdfghjklmnpqrstvwxyz' then\n\t\t\t\t\t\t\t\t\
    for i = #word, 1, -1 do\n\t\t\t\t\t\t\t\t\tif word[i] == 'a' or word[i] == 'e'\
    \ or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\t\t\t\t\t\t\t\t\
    \t\tlocal consonants = string.sub(word,i,i)\n\t\t\t\t\t\t\t\t\t\tif consonants\
    \ == 'bcdfghjklmnpqrstvwxyz' then\n\t\t\t\t\t\t\t\t\t\t\tfor i = #word, 1, -1\
    \ do\n\t\t\t\t\t\t\t\t\t\t\t\tif word[i] == 'a' or word[i] == 'e' or word[i] ==\
    \ 'i' or word[i] == 'o' or word[i] == 'u' then\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ consonants = string.sub(word,i,i)\n\t\t\t\t\t\t\t\t\t\t\t\t\tif consonants ==\
    \ 'bcdfghjklmnpqrstvwxyz' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor i = #word, 1,\
    \ -1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif word[i] == 'a' or word[i] == 'e' or\
    \ word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\tlocal consonants = string.sub(word,i,i)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\tif consonants == 'bcdfghjklmnpqrstvwxyz' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\tfor i = #word, 1, -1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif word[i]\
    \ == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u'\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal consonants = string.sub(word,i,i)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu55thqw0.lua:72: ''end'' expected (to close ''if'' at line
    51) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels, count = string.gsub(word, \"[aeiouAEIOU]\", \"\")\n  if count\
    \ and #vowels > 1 then\n    local vowel, vowel_index = string.find(vowels, \"\
    [\" .. #vowels .. \"]\")\n    if vowel_index and #vowels > 1 then\n      local\
    \ vowel_next = string.sub(vowels, vowel_index+1, vowel_index + #vowels)\n    \
    \  if vowel_next == vowel then\n        return vowel\n      end\n    end\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktoiprmx.lua:32:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpktoiprmx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n   local\
    \ vowels_count = {}\n   for k, v in pairs(vowels) do\n      vowels_count[v] =\
    \ 0 \n   end\n   for i = 1, #word do\n      local v = word[i]\n      if vowels_count[v]\
    \ ~= 0 then\n         if word[i] == v then\n            vowels_count[v] = vowels_count[v]\
    \ + 1\n         else\n            vowels_count[v] = vowels_count[v] - 1\n    \
    \     end\n      else\n         vowels_count[v] = 1\n      end\n   end\n   for\
    \ k, v in pairs(vowels) do\n      if vowels_count[v] > 0 then\n         return\
    \ v\n      end\n   end\n   return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl441f_t0.lua:25:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpl441f_t0.lua:25: in local 'candidate'\n\t/tmp/tmpl441f_t0.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tword = string.lower(word)\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\", \"b\", \"c\"}\n\tlocal vowel_pos = #word\n\tlocal vowel_closest =\
    \ nil\n\tlocal vowel_min = nil\n\t\n\tfor vowel in vowels do\n\t\tlocal vowel_next\
    \ = string.sub(word, 1, vowel_pos)\n\t\tif vowel_next == vowel then\n\t\t\tif\
    \ vowel_min == nil then\n\t\t\t\tvowel_min = vowel\n\t\t\tend\n\t\t\tvowel_pos\
    \ = vowel_next - vowel + 1\n\t\telseif vowel_pos < 2 then\n\t\t\tvowel_closest\
    \ = nil\n\t\t\tbreak\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptwq8syzz.lua:53: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"u\",\n        [\"e\"] = \"u\",\n  \
    \      [\"i\"] = \"u\",\n        [\"o\"] = \"u\",\n        [\"u\"] = \"u\",\n\
    \        [\"i\"] = \"u\",\n        [\"e\"] = \"u\",\n        [\"i\"] = \"u\",\n\
    \        [\"o\"] = \"u\",\n        [\"i\"] = \"u\",\n        [\"a\"] = \"u\",\n\
    \        [\"o\"] = \"u\",\n        [\"u\"] = \"u\",\n        [\"a\"] = \"a\",\n\
    \        [\"e\"] = \"e\",\n        [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n\
    \        [\"u\"] = \"u\",\n    }\n    local last_vowel = nil\n    local last_consonant\
    \ = nil\n    local last_consonant_index = nil\n    local last_vowel_index = nil\n\
    \    for i = 1, #word do\n        local current_consonant = string.sub(word, i,\
    \ i)\n        local current_vowel = vowels[current_consonant]\n        if current_vowel\
    \ ~= nil then\n            if last_consonant ~= nil then\n                last_consonant_index\
    \ = i\n                if i > last_consonant_index then\n                    --\
    \ last consonant exists\n                    -- use it\n                    last_vowel\
    \ = last_consonant\n                    last_consonant_index = i\n           \
    \         last_vowel_index = i\n                else\n                    -- first\
    \ consonant exists\n                    if last_vowel_index == nil then\n    \
    \                    -- first consonant is vowel and we didn't find any consonant\
    \ on right\n                        return ''\n                    else\n    \
    \                    -- first consonant is vowel and we find it in between\n \
    \                       -- use it\n                        last_consonant_index\
    \ = i\n                        last_vowel_index = i\n                        last_vowel\
    \ = last_consonant\n                    end\n                end\n           \
    \ else\n                -- first consonant is vowel\n                if last_vowel_index\
    \ == nil then\n                    -- first consonant is vowel and we didn't find\
    \ any consonant on right\n                    last_vowel_index = i\n         \
    \           last_vowel = last_consonant\n                else\n              \
    \      -- first consonant is vowel and we find it in between\n               \
    \     -- use it\n                    last_vowel_index = i\n                  \
    \  last_vowel = last_consonant\n                end\n            end\n       \
    \ end\n    end\n    if last_vowel_index ~= nil then\n        -- we found a vowel\
    \ at the end\n        if last_consonant_index == nil then\n            -- there\
    \ is no consonant on the right\n            return last_vowel\n        else\n\
    \            -- there is a consonant on the right\n            -- use it\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmm4923vf.lua:108: ''end'' expected (to close ''if'' at line
    82) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowel = word:sub(word:len()-2)\n\tlocal firstLetter = word:sub(1,1)\n\t\
    local lastLetter = word:sub(word:len()-1)\n\tlocal consonant = true\n\tlocal vowel_position\
    \ = -1\n\tlocal is_vowel = false\n\t\n\tfor i = 1, #vowel do\n\t\tlocal letter\
    \ = vowel:sub(i,i)\n\t\tif consonant and letter:lower() ~= 'a' then\n\t\t\tis_vowel\
    \ = false\n\t\telse\n\t\t\tis_vowel = true\n\t\tend\n\t\t\n\t\tif is_vowel then\n\
    \t\t\tif letter:lower() == lastLetter or letter:lower() == firstLetter then\n\t\
    \t\t\t-- Found it\n\t\t\t\tvowel_position = i - 1\n\t\t\t\tconsonant = false\n\
    \t\t\tend\n\t\tend\n\tend\n\t\n\tif vowel_position == -1 then\n\t\treturn ''\n\
    \telse\n\t\tlocal vowel_part = word:sub(vowel_position + 1, word:len())\n\t\t\
    return vowel_part:lower()\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcgf61h3.lua:51:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpfcgf61h3.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if word:len() ~= 1 then\n        return 'Not a string'\n    end\n    local\
    \ vowels = {'a','e','i','o','u'}\n    local index = 1\n    while word:len() >\
    \ 0 do\n        if word:sub(1,1) == vowels[index] then\n            index = index\
    \ + 1\n        end\n        index = index - 1\n    end\n    return vowels[index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3hil7j.lua:33:\
    \ expected: \"u\"\nactual: \"Not a string\"\nstack traceback:\n\t/tmp/tmpim3hil7j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = 'aeiouAEIOU'\n    local consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    local vowelFound = false\n    local wordLength = #word\n    local currentChar\
    \ = word[wordLength-1]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1es7in59.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n\tlocal\
    \ vowel_count = {}\n\tfor i=4,1,-1 do\n\t\tvowel_count[string.sub(word, i, i)]\
    \ = true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvaputfyp.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    -- Your code here\n\tlocal vowels = {'a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \tlocal word_length = #word\n\tlocal vowel_index = -1\n\tlocal vowel_start = word_length-1\n\
    \tlocal vowel_end = word_length\n\tlocal vowel_found = false\n\tlocal current_consonant_index\
    \ = 0\n\twhile vowel_start > 0 do\n\t\tfor vowel_found=false, current_consonant_index=#word:len()-1\
    \ do\n\t\t\tif vowels[word[vowel_start]] then\n\t\t\t\tvowel_found = true\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\t\tif vowel_found == true then\n\t\t\tbreak\n\t\
    \telse\n\t\t\tvowel_index = (vowel_index +1) % #vowels\n\t\t\tvowel_start = vowel_start\
    \ -1\n\t\tend\n\tend\n\tlocal current_consonant_index = #word\n\twhile vowel_end\
    \ < word_length do\n\t\tfor vowel_found=false, current_consonant_index=#word:len()-1\
    \ do\n\t\t\tif vowels[word[vowel_end]] then\n\t\t\t\tvowel_found = true\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\tend\n\t\tif vowel_found == true then\n\t\t\tbreak\n\t\t\
    else\n\t\t\tvowel_index = (vowel_index -1) % #vowels\n\t\t\tvowel_end = vowel_end\
    \ + 1\n\t\tend\n\tend\n\treturn word[vowel_end+1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu7q0uah_.lua:25: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  word = word:lower()\n  \n  local vowels = {\n    [\"a\"] = true,\n    [\"e\"\
    ] = true,\n    [\"i\"] = true,\n    [\"o\"] = true,\n    [\"u\"] = true,\n   \
    \ [\"y\"] = true\n  }\n  \n  local vowel_count = #vowels\n  \n  local consonant_count\
    \ = 0\n  local consonant_end = #word - 1\n  \n  while consonant_count < consonant_end\
    \ do\n    local consonant = word[consonant_count]:lower()\n    \n    if vowels[consonant]\
    \ then\n      consonant_count = consonant_count + 1\n    elseif consonant_count\
    \ == consonant_end then\n      return \"\"\n    end\n  end\n  \n  return word[consonant_count]:lower()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmo_7zamg.lua:33:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpmo_7zamg.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpmo_7zamg.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  word = string.lower(word)\n  local vowel_found = false\n  local vowel_found_index\
    \ = 1\n  local index = 1\n  while index <= #word do\n    if string.find(word,\
    \ \"[aeiou]\", index) == nil then\n      index = index + 1\n    elseif string.find(word,\
    \ \"[aeiou]\", index) == index then\n      vowel_found = true\n      vowel_found_index\
    \ = index\n    end\n    index = index + 1\n  end\n  if vowel_found == true then\n\
    \    return word[vowel_found_index - 2 .. vowel_found_index]\n  end\n  return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cnpd993.lua:38:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6cnpd993.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tfor i = 1, #word\
    \ do\n\t\tif word:sub(i,i) ~= nil then\n\t\t\tfor j = 1, #vowels do\n\t\t\t\t\
    if word:sub(i,i) == vowels[j] then\n\t\t\t\t\treturn vowels[j]\n\t\t\t\tend\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcul8_656.lua:32:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpcul8_656.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local _len = #word\n    if _len == 0 then\n        return \"\"\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt5nv6t3m.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tword = string.lower(word)\n\tlocal vowels = {\n\t\t'a',\n\t\t'e',\n\t\t'i',\n\
    \t\t'o',\n\t\t'u',\n\t}\n\t\n\tlocal vowel_count = #vowels\n\tlocal vowel_index\
    \ = 0\n\tlocal current_vowel = string.sub(word,vowel_index,vowel_index+1)\n\t\n\
    \t-- Iterate from the right side\n\twhile vowel_index < #word and current_vowel\
    \ and current_vowel ~= vowels[vowel_index] do\n\t\tvowel_index = vowel_index +\
    \ 1\n\tend\n\t\n\tif vowel_index == #word then\n\t\treturn ''\n\tend\n\t\n\tlocal\
    \ vowel = string.sub(word,vowel_index,vowel_index+1)\n\t\n\t-- Check if the vowel\
    \ met the condition above\n\tif vowel == 'a' or vowel == 'e' or vowel == 'i' or\
    \ vowel == 'o' or vowel == 'u' then\n\t\treturn vowel\n\tend\n\t\n\t-- Check if\
    \ there is only one consonant between a vowel\n\tif current_vowel == 'y' or current_vowel\
    \ == 'o' or current_vowel == 'a' or current_vowel == 'e' or current_vowel == 'i'\
    \ or current_vowel == 'u' then\n\t\treturn current_vowel\n\tend\n\t\n\t-- Check\
    \ if there is only one consonant at the beginning\n\tif current_vowel == 'b' then\n\
    \t\treturn current_vowel\n\tend\n\t\n\t-- Check if there is only one consonant\
    \ at the end\n\tif current_vowel == 't' then\n\t\treturn current_vowel\n\tend\n\
    \t\n\t-- Check if there is only one consonant in the middle\n\tif current_vowel\
    \ == 'h' or current_vowel == 'w' or current_vowel == 'p' or current_vowel == 'v'\
    \ then\n\t\treturn current_vowel\n\tend\n\t\n\t-- Check if there is only one consonant\
    \ between consonants\n\tif current_vowel == 'n' or current_vowel == 'b' or current_vowel\
    \ == 'd' or current_vowel == 'j' or current_vowel == 'q' or current_vowel == 's'\
    \ then\n\t\treturn current_vowel\n\tend\n\t\n\t-- Check if there is only one consonant\
    \ between vowels and consonants\n\tif current_vowel == 'w' or current_vowel ==\
    \ 'h' or current_vowel == 'p' or current_vowel == 'v' or current_vowel == 'y'\
    \ or current_vowel == 'a' or current_vowel == 'e' or current_vowel == 'i' or current_vowel\
    \ == 'o' or current_vowel == 'u' then\n\t\treturn current_vowel\n\tend\n\t\n\t\
    -- Check if there is only one consonant between vowels and consonants and one\
    \ before and one after it\n\tif current_vowel == 'z' or current_vowel == 'x' or\
    \ current_vowel == 'c' or current_vowel == 'v' or current_vowel == 'b\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1enygjbg.lua:76: unfinished string near ''''b''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'A','a','O','o','U','u'}\n    for i,v in pairs(vowels) do\n\
    \        if string.find(word,v) then\n            return v\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nkcxof6.lua:28:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmp1nkcxof6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'A', 'E', 'I', 'O', 'U' }\n  local left = {}\n  local right\
    \ = {}\n  for i = 1, #word do\n    local char = word[i]\n    if vowels:find(char)\
    \ then\n      table.insert(left, char)\n    else\n      table.insert(right, char)\n\
    \    end\n  end\n  return table.concat(left)..table.concat(right)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpie06uuvs.lua:21:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpie06uuvs.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpie06uuvs.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\t\n\tlocal vowel_idx\
    \ = -1\n\tlocal vowel_len = #vowels\n\tlocal min_idx = -1\n\tlocal min_dist =\
    \ -1\n\t\n\tfor i, v in ipairs(vowels) do\n\t\tlocal l = #word\n\t\tfor j = 1,\
    \ l do\n\t\t\tlocal cur_ch = word[j]\n\t\t\t\n\t\t\tif cur_ch ~= v then\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\t\t\n\t\t\tif i == vowel_idx and j == vowel_len then\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\tlocal dist = #word - j - 1\n\t\t\tif dist\
    \ < min_dist then\n\t\t\t\tmin_dist = dist\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\
    \tend\n\tend\n\t\n\tif min_idx == -1 then\n\t\treturn ''\n\tend\n\t\n\treturn\
    \ vowels[min_idx]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0qa10d5.lua:54:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpc0qa10d5.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowel_count = {}\n    local cons_count = nil\n    for i = #word, 2,\
    \ -1 do\n        cons_count = cons_count or #word\n        if word[i] == 'a' or\
    \ word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u'\n     \
    \           or word[i] == 'A' or word[i] == 'E' or word[i] == 'I' or word[i] ==\
    \ 'O' or word[i] == 'U'\n                or word[i] == 'a' or word[i] == 'e' or\
    \ word[i] == 'i' or word[i] == 'o' or word[i] == 'u'\n                or word[i]\
    \ == 'A' or word[i] == 'E' or word[i] == 'I' or word[i] == 'O' or word[i] == 'U'\n\
    \                or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i]\
    \ == 'u' then\n            vowel_count[cons_count] = cons_count\n        end\n\
    \    end\n    local vowel, closest = nil, 1\n    for cons_count = 1, #vowel_count\
    \ do\n        if vowel_count[cons_count] > closest then\n            closest =\
    \ vowel_count[cons_count]\n            vowel = vowel_count[cons_count]\n     \
    \   end\n    end\n    return vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmupar6o0.lua:41:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmupar6o0.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u', 'y' } -- the vowels we are looking\
    \ for\n  local vowels_count = #vowels -- counts the number of vowels in the given\
    \ word\n  \n  -- use rindex to find the index of the last occurrence of the vowels\
    \ in the given word\n  -- if the index of the last occurrence is not available\
    \ (e.g. first vowel isn't found) then rindex return -1\n  local vowels_index =\
    \ string.rindex(word, vowels)\n  \n  if vowels_index == -1 then\n    return ''\n\
    \  elseif vowels_index < 1 then\n    return word\n  elseif vowels_count > 2 then\
    \ -- 2 consonants is the minimum of vowels we need to meet the condition\n   \
    \ local vowel_left = word:sub(vowels_index - 1, 1)\n    local vowel_right = word:sub(vowels_index,\
    \ 1)\n    \n    if vowel_left == vowel_right then\n      return word\n    else\n\
    \      return ''\n    end\n  else\n    local vowel_left = word:sub(vowels_index\
    \ - 1, 1)\n    local vowel_right = word:sub(vowels_index + 1, 1)\n    \n    if\
    \ vowel_left == vowel_right then\n      return word\n    else\n      return ''\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnr0991sx.lua:21:\
    \ attempt to call a nil value (field 'rindex')\nstack traceback:\n\t/tmp/tmpnr0991sx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpnr0991sx.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"AEIOUYaeiouy\"\n    local vowels_length = #vowels\n    local\
    \ vowel_found = false\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1mojch3.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   if #word == 0 then\n      return\
    \ ''\n   end\n   local vowel_index = #word\n   for _, v in pairs(vowels) do\n\
    \      local idx = 1\n      while idx < #word do\n         local current_char\
    \ = word[idx]\n         if current_char == v then\n            vowel_index = idx\n\
    \         end\n         idx = idx + 1\n      end\n   end\n   return word[#word]\
    \ .. word[vowel_index + #word]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphb4o9q45.lua:31:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphb4o9q45.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmphb4o9q45.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    -- write your code here\n    local vowels = {'a','e','i','o','u'}\n    local\
    \ vowel_index\n    local vowel_found\n    for i = #word, 2, -1 do\n        local\
    \ char = string.sub(word, i, i)\n        if vowel_index ~= nil then\n        \
    \    if vowels[vowel_index] then\n                vowel_found = true\n       \
    \         break\n            end\n        end\n        if char in vowels then\n\
    \            vowel_index = char\n        end\n    end\n    if vowel_found then\n\
    \        return vowels[vowel_index]\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcpx67krc.lua:28: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tvowels[1] = 'A'\n\tvowels[2] = 'AE'\n\tvowels[3] = 'E'\n\
    \tvowels[4] = 'I'\n\tvowels[5] = 'O'\n\tvowels[6] = 'U'\n\tvowels[7] = 'Y'\n\t\
    vowels[8] = 'YU'\n\tvowels[9] = 'YA'\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcxa_wxlm.lua:45: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- Initialize result to empty string\n  local result = \"\"\n  \n  -- Get the\
    \ length of the input string\n  local len = string.len(word)\n  \n  -- Loop through\
    \ each character of the string\n  for i in string.len(word) do\n    \n    -- If\
    \ the character is non-English letter, ignore it\n    if word[i] ~= 'a' and word[i]\
    \ ~= 'A' and word[i] ~= 'e' and word[i] ~= 'E' and word[i] ~= 'i' and word[i]\
    \ ~= 'I' and word[i] ~= 'o' and word[i] ~= 'O' and word[i] ~= 'u' and word[i]\
    \ ~= 'U' then\n      -- Ignore the character\n    else\n      -- Loop through\
    \ each vowel\n      for _ in string.gmatch(word, \"([AEIOUaeiou])\") do\n    \
    \    -- If the vowel is found\n        if _ == 'a' then\n          -- Check if\
    \ the previous character is consonant\n          -- If so, check if the next character\
    \ is consonant too.\n          -- If so, move the cursor to the start of the word\n\
    \          -- otherwise, move the cursor to the start of the next consonant\n\
    \          if string.sub(word, 1, i-1) ~= 'c' and string.sub(word, 1, i+1) ~=\
    \ 'C' then\n            i = i + 1\n          else\n            i = i + 1\n   \
    \       end\n        else\n          -- Check if the previous character is consonant\n\
    \          -- If so, check if the next character is consonant too.\n         \
    \ -- If so, move the cursor to the start of the word\n          -- otherwise,\
    \ move the cursor to the start of the next consonant\n          if string.sub(word,\
    \ 1, i-1) ~= 'c' and string.sub(word, 1, i+1) ~= 'C' then\n            i = i +\
    \ 1\n          else\n            i = i + 1\n          end\n        end\n     \
    \ end\n      \n      -- Check if there are any vowels after the cursor moved\n\
    \      if string.find(word, \"[aeiou]\", i) ~= nil then\n        -- Store the\
    \ vowel found at the cursor position\n        result = result .. \"_\"\n     \
    \ else\n        -- Store the vowel found at the cursor position\n        result\
    \ = result .. \"^\"\n      end\n    end\n  end\n  \n  -- Return the closest vowel\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa9x66ve7.lua:23:\
    \ attempt to call a number value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpa9x66ve7.lua:23: in local 'candidate'\n\t/tmp/tmpa9x66ve7.lua:73: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = string.gmatch(word, \"[aeiouAEIOU]+\")\n\treturn vowels[#vowels]\
    \ or \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeov7x6f1.lua:17:\
    \ attempt to get length of a function value (local 'vowels')\nstack traceback:\n\
    \t/tmp/tmpeov7x6f1.lua:17: in local 'candidate'\n\t/tmp/tmpeov7x6f1.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return string.gsub(word, \" \", \"-\") == \"-\" and\n        string.gsub(word,\
    \ \"o\", \"-\") == \"-\" and\n        string.gsub(word, \"a\", \"-\") == \"-\"\
    \ and\n        string.gsub(word, \"e\", \"-\") == \"-\" and\n        string.gsub(word,\
    \ \"u\", \"-\") == \"-\" and\n        string.gsub(word, \"i\", \"-\") == \"-\"\
    \ and\n        string.gsub(word, \"l\", \"-\") == \"-\" and\n        string.gsub(word,\
    \ \"s\", \"-\") == \"-\" and\n        string.gsub(word, \"c\", \"-\") == \"-\"\
    \ and\n        string.gsub(word, \"b\", \"-\") == \"-\" and\n        string.gsub(word,\
    \ \"f\", \"-\") == \"-\" and\n        string.gsub(word, \"v\", \"-\") == \"-\"\
    \ and\n        string.gsub(word, \"y\", \"-\") == \"-\" and\n        string.gsub(word,\
    \ \"t\", \"-\") == \"-\"\n        and \"u\" or\n        string.gsub(word, \"y\"\
    , \"-\") == \"-\" and\n        string.gsub(word, \"t\", \"-\") == \"-\" and\n\
    \        \"u\" or\n        string.gsub(word, \"y\", \"-\") == \"-\" and\n    \
    \    string.gsub(word, \"t\", \"-\") == \"-\" and\n        \"u\"\nend\n</cell>\n\
    <text>\nSolution\nIf you're stuck and need a hint, look at the hints notebook\
    \ or try Googling the problem.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6d6sv3y7.lua:38: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    ['a'] = 'u',\n    ['i'] = 'u',\n    ['u'] = 'u',\n  \
    \  ['y'] = 'i',\n    ['o'] = 'o',\n    ['e'] = 'o',\n    ['a'] = 'a'\n  }\n  local\
    \ last_consonant_index = #word-1 \n  local last_consonant_count = 1\n  local vowel_count\
    \ = 0\n  for i = 1, #word do -- count up vowels \n    if vowels[word[i]] then\n\
    \      vowel_count = vowel_count + 1\n    end\n    last_consonant_index = i \n\
    \    last_consonant_count = last_consonant_count + 1\n  end\n  if last_consonant_count\
    \ > 1 then\n    local vowel_candidate = word[last_consonant_index+1]\n    for\
    \ i,v in pairs(vowels) do -- find closest vowel candidate\n      if v == vowel_candidate\
    \ then\n        return v\n      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgozga830.lua:49:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgozga830.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local count = 0\n  local idx\
    \ = #word - 1\n  while idx > 0 and count < #vowels do\n    if vowels[idx] ~= word[count]\
    \ and vowels[idx] ~= 'y' then\n      count = count + 1\n    end\n    idx = idx\
    \ - 1\n  end\n  if count < #vowels then\n    return ''\n  end\n  return vowels[count]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9btv8k6.lua:34:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd9btv8k6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [('a'):rep(1,1)] = {'a','e','i','o','u','A','E','I','O','U'},\n\
    \    [('e'):rep(1,1)] = {'e','i','o','u','A','E','I','O','U'},\n    [('i'):rep(1,1)]\
    \ = {'e','i','o','u','A','E','I','O','U'},\n    [('o'):rep(1,1)] = {'e','i','o','u','A','E','I','O','U'},\n\
    \    [('u'):rep(1,1)] = {'e','i','o','u','A','E','I','O','U'},\n  }\n  -- find\
    \ the first non-vowel\n  local vowel_position = 1\n  local vowel = word:sub(1,vowel_position)\n\
    \  -- get the rest of the word until we find an vowel\n  local rest_of_word =\
    \ word:sub(vowel_position)\n  local closest = nil\n  local vowel_found = false\n\
    \  for k,v in pairs(vowels) do\n    for i = 1,#v do\n      local found_vowel =\
    \ v:sub(i,i):find(vowel)\n      if found_vowel == 1 then\n        closest = v:sub(i,i)\n\
    \        vowel_found = true\n      end\n    end\n    if not vowel_found then\n\
    \      break\n    end\n  end\n  -- return empty string if no vowel found in the\
    \ word\n  if closest == nil then\n    return ''\n  end\n  -- return closest vowel\n\
    \  return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivq03ln4.lua:32:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpivq03ln4.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpivq03ln4.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local result = {}\n    local vowel = {'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'}\n    local len = #word\n    for i = len-1, 1, -1 do\n       \
    \ if word[i] == 'a' then\n            table.insert(result, vowel[3])\n       \
    \ elseif word[i] == 'e' then\n            table.insert(result, vowel[4])\n   \
    \     elseif word[i] == 'i' then\n            table.insert(result, vowel[5])\n\
    \        elseif word[i] == 'o' then\n            table.insert(result, vowel[6])\n\
    \        elseif word[i] == 'u' then\n            table.insert(result, vowel[7])\n\
    \        end\n    end\n    if #result == 0 then\n        return \"\"\n    end\n\
    \    return result[#result]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y6zxl2m.lua:41:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1y6zxl2m.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local first = string.find(word,\
    \ '^[aeiou]', 1, true)\n  local last = string.find(word, '[aeiou]$', 1, true)\n\
    \  if last > first\n  then\n    local distance = last - first + 1\n    if distance\
    \ >= 3 then\n      for i = 1, distance do\n        if string.find(word, vowels[i],\
    \ 1, true) then\n          return vowels[i]\n        end\n      end\n    end\n\
    \  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmop_qsr0.lua:19:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpmop_qsr0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmop_qsr0.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Find the index of first consonant from the right\n\tlocal i = #word + 1 --\
    \ index of the last consonant from the right\n\tlocal closestVowel = ''\n\t--\
    \ Loop through the word from the right\n\twhile i ~= 0 do\n\t\tif word[i] == 'a'\
    \ or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\
    \t\t\tclosestVowel = closestVowel..word[i]\n\t\tend\n\t\ti = i - 1\n\tend\n\t\
    return closestVowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xupu45c.lua:32:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7xupu45c.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowel_first  = string.sub(word, 1, 1)\n   local vowel_second = string.sub(word,-1)\n\
    \   local vowel_third  = string.sub(word, 2, 1)\n   local vowel_fourth = string.sub(word,\
    \ 3, 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnylbujtr.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowel_map = {\n        ['A'] = ['A','a'],\n        ['B'] = ['B','b'],\n\
    \        ['C'] = ['C','c'],\n        ['D'] = ['D','d'],\n        ['E'] = ['E','e'],\n\
    \        ['F'] = ['F','f'],\n        ['G'] = ['G','g'],\n        ['H'] = ['H','h'],\n\
    \        ['I'] = ['I','i'],\n        ['J'] = ['J','j'],\n        ['K'] = ['K','k'],\n\
    \        ['L'] = ['L','l'],\n        ['M'] = ['M','m'],\n        ['N'] = ['N','n'],\n\
    \        ['O'] = ['O','o'],\n        ['P'] = ['P','p'],\n        ['Q'] = ['Q','q'],\n\
    \        ['R'] = ['R','r'],\n        ['S'] = ['S','s'],\n        ['T'] = ['T','t'],\n\
    \        ['U'] = ['U','u'],\n        ['V'] = ['V','v'],\n        ['W'] = ['W','w'],\n\
    \        ['X'] = ['X','x'],\n        ['Y'] = ['Y','y'],\n        ['Z'] = ['Z','z'],\n\
    \    }\n    for i = #word, 2, -1 do\n        local vowel = string.sub(word, i,\
    \ i)\n        if vowel:len() ~= 0 then\n            for letter in vowel_map[vowel]\
    \ do\n                if string.find(word, letter, 1, true) == 1 then\n      \
    \              vowel = letter\n                    break\n                end\n\
    \            end\n            if vowel:len() == 1 then return vowel end\n    \
    \    end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgb2lxbpi.lua:17: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    \n    local startVowelIndex = word:len()\
    \ - word:sub(1, 2):upper():byte() - 1\n    local endVowelIndex = word:len() -\
    \ word:sub(-2, 1):upper():byte() - 1\n    \n    for i = 1, word:len() do\n   \
    \     if vowels[word:sub(i, i):byte()] == 1 then\n            if startVowelIndex\
    \ > i then\n                return word:sub(startVowelIndex, i)\n            end\n\
    \        end\n        if consonants[word:sub(i, i):byte()] == 1 then\n       \
    \     if endVowelIndex > i then\n                return word:sub(i, endVowelIndex)\n\
    \            end\n        end\n    end\n    \n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0k197oe.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpi0k197oe.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpi0k197oe.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return string.match(word, \"[aeiou]([%w%p]*)[aeiou]\", 1, true)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmziapysp.lua:22:\
    \ expected: \"u\"\nactual: \"g\"\nstack traceback:\n\t/tmp/tmpmziapysp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpzr6mpf.lua:22:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdpzr6mpf.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowel = {\n\t\t'a','e','i','o','u','A','E','I','O','U',\n\t\t'.',\n\t\t\
    'A','E','I','O','U',\n\t\t'.',\n\t\t'a','e','i','o','u',\n\t\t'.',\n\t\t'A','E','I','O','U',\n\
    \t\t'.',\n\t\t'A','E','I','O','U',\n\t\t'.',\n\t\t'a','e','i','o','u',\n\t\t'.',\n\
    \t\t'a','e','i','o','u',\n\t\t'.',\n\t\t'.',\n\t\t'.',\n\t\t'.',\n\t\t'.',\n\t\
    \t'.',\n\t}\n\tlocal vowel_counter = 0\n\tfor i = 1, #word do\n\t\tif word[i]\
    \ == word[#word] then\n\t\t\tif word[i] ~= 'a' then\n\t\t\t\tvowel_counter = vowel_counter\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal min_distance = math.abs(#vowel - vowel_counter)\n\
    \tfor i = 1, #vowel do\n\t\tlocal distance = math.abs(#word - vowel_counter +\
    \ i)\n\t\tif distance < min_distance then\n\t\t\tmin_distance = distance\n\t\t\
    end\n\tend\n\tif min_distance > 1 then\n\t\treturn ''\n\tend\n\t\n\treturn vowel[#vowel\
    \ - 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a574g8_.lua:62:\
    \ expected: \"u\"\nactual: \".\"\nstack traceback:\n\t/tmp/tmp7a574g8_.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tfor i = #word, 1, 1, -1 do\n\t\tif string.sub(word, i,\
    \ i) == 'a' or string.sub(word, i, i) == 'e' or string.sub(word, i, i) == 'i'\
    \ or string.sub(word, i, i) == 'o' or string.sub(word, i, i) == 'u' then\n\t\t\
    \ttable.insert(vowels, string.sub(word, i, i))\n\t\tend\n\tend\n\tlocal closest\
    \ = nil\n\tlocal min\n\tlocal min_index\n\tfor i = #vowels, 1, 1, -1 do\n\t\t\
    if closest == nil then\n\t\t\tmin = table.max(vowels, function(e)\n\t\t\t\treturn\
    \ string.sub(word, #word, #word + 1) <= e\n\t\t\tend)\n\t\t\tmin_index = i\n\t\
    \telseif #vowels > 0 and string.sub(vowels, i, i) < string.sub(vowels, closest[1],\
    \ closest[2]) then\n\t\t\tmin = table.max(vowels, function(e)\n\t\t\t\treturn\
    \ string.sub(word, #word, #word + 1) <= e\n\t\t\tend)\n\t\t\tmin_index = i\n\t\
    \tend\n\tend\n\tif min ~= nil then\n\t\tclosest = {min = min, index = min_index}\n\
    \tend\n\treturn closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0qgvvlfh.lua:17: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = {}\n\tfor i, v in pairs(vowels) do\n\t\ttable.insert(vowels_count, {v, 1});\n\
    \tend\n\tfor i = #word, 2, -1 do\n\t\tlocal w = string.sub(word, i, i+1)\n\t\t\
    if w ~= nil then\n\t\t\tfor _, v in pairs(vowels) do\n\t\t\t\tlocal c = string.upper(string.sub(w,\
    \ 1, 1)):upper()\n\t\t\t\tif string.upper(c) == v then\n\t\t\t\t\ttable.insert(vowels_count,\
    \ {v, vowels_count[v]+1});\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal\
    \ closest_vowel = nil\n\t\n\tif #vowels_count == 0 then\n\t\treturn '';\n\tend\n\
    \t\n\ttable.sort(vowels_count, function(x,y)\n\t\treturn y[1]-x[1];\n\tend)\n\t\
    \n\tfor _, v in pairs(vowels_count) do\n\t\tif v[1] <= 2 then\n\t\t\tlocal s =\
    \ string.sub(w, 1, 1) and string.upper(string.sub(w, 1, 1)):upper() or ''\n\t\t\
    \tif #s == 1 then\n\t\t\t\tlocal c = string.upper(string.sub(w, 1, 1)) \n\t\t\t\
    \tif c==v then\n\t\t\t\t\tclosest_vowel = v;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\treturn closest_vowel and closest_vowel[1] or ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7nv84rn8.lua:27:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp7nv84rn8.lua:27: in local 'candidate'\n\t/tmp/tmp7nv84rn8.lua:61: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal count = 0\n\tlocal i = #word\
    \ + 1\n\twhile i ~= 0 do\n\t\tlocal word = word:sub(1,i)\n\t\tif vowels.include(word)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i-1\n\tend\n\tif count == 1\
    \ then\n\t\treturn word\n\telseif count == 2 then\n\t\treturn word:sub(2)\n\t\
    else\n\t\treturn ''\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydzvlce1.lua:21:\
    \ attempt to call a nil value (field 'include')\nstack traceback:\n\t/tmp/tmpydzvlce1.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpydzvlce1.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local start = 0\n    local end = 0\n    for i=#word,1,-1 do\n        if string.find(word,'[aeiouy][^aeiouy]*'..word[i])\
    \ then\n            start = i\n            break\n        end\n    end\n    for\
    \ i=#word,1,-1 do\n        if string.find(word,'[^aeiouy]'..word[i]) then\n  \
    \          end = i\n            break\n        end\n    end\n    if start ~= 0\
    \ and end ~= 0 then\n        return word[end-1]\n    else\n        return \"\"\
    \n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsdx0j_zm.lua:17: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  if word:len() <= 1 then\n    return ''\n  else\n    local vowels = {'a','e','i','o','u'}\n\
    \    local n = #word-1\n    for i = n-2, -1, -1 do\n      if word[i] == 'a' then\n\
    \        return word[i-1]\n      elseif word[i] == 'e' then\n        return word[i-1]\n\
    \      elseif word[i] == 'i' then\n        return word[i-1]\n      elseif word[i]\
    \ == 'o' then\n        return word[i-1]\n      elseif word[i] == 'u' then\n  \
    \      return word[i-1]\n      end\n    end\n  end\nend\n</cell>\n<text>\nSolution\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp04qgkuzy.lua:36: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    word = string.gsub(word, \"[%z\\a]\", \"\")\n    local result = ''\n    local\
    \ upper = string.upper(word)\n    local vowels = {'A','E','I','O','U'}\n    \n\
    \    -- search upper string\n    for i = #upper, 1 do\n        if upper:sub(i-1,i)=='U'\
    \ then\n            local index = string.find(upper:sub(i,i), vowels)\n      \
    \      if index ~= -1 then\n                result = upper:sub(i-1,i) + result\n\
    \            end\n        end\n    end\n    if result ~= '' and result ~= 'U'\
    \ then\n        result = ''\n    end\n    \n    -- search lower string\n    for\
    \ i = #word, 1 do\n        if word:sub(i,i)=='a' then\n            local index\
    \ = string.find(word:sub(i,i), vowels)\n            if index ~= -1 then\n    \
    \            result = word:sub(i,i) + result\n            end\n        end\n \
    \   end\n    if result ~= '' and result ~= 'U' then\n        result = ''\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ji8xwxf.lua:52:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7ji8xwxf.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowelCount = {}\n\tfor i,v in\
    \ ipairs(vowels) do\n\t\ttable.insert(vowelCount,0)\n\tend\n\t\n\tlocal vowelCount\
    \ = {}\n\tfor i,v in ipairs(vowels) do\n\t\ttable.insert(vowelCount,0)\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwkuswv1_.lua:45: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  local min_distance = math.inf\n  local last_consonant_index\
    \ = 1\n  for i = #word, 1, -1 do\n    local c = string.sub(s, i, i)\n    if c\
    \ == 'y' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      table.insert(vowels,\
    \ c)\n    end\n    if last_consonant_index > 1 then\n      if c ~= string.sub(word,\
    \ i - 1, i) then\n        if string.sub(word, i - 1, i) == 'a' and string.sub(word,\
    \ i, i + 1) ~= 'a' then\n          table.insert(vowels, 'a')\n        elseif string.sub(word,\
    \ i - 1, i) == 'e' and string.sub(word, i, i + 1) ~= 'e' then\n          table.insert(vowels,\
    \ 'e')\n        elseif string.sub(word, i - 1, i) == 'i' and string.sub(word,\
    \ i, i + 1) ~= 'i' then\n          table.insert(vowels, 'i')\n        elseif string.sub(word,\
    \ i - 1, i) == 'o' and string.sub(word, i, i + 1) ~= 'o' then\n          table.insert(vowels,\
    \ 'o')\n        elseif string.sub(word, i - 1, i) == 'u' and string.sub(word,\
    \ i, i + 1) ~= 'u' then\n          table.insert(vowels, 'u')\n        end\n  \
    \    end\n    end\n    last_consonant_index = i\n  end\n  local vowel_distance\
    \ = #vowels\n  if min_distance > #vowels then\n    min_distance = #vowels\n  end\n\
    \  for i = 1, #vowels do\n    local current_distance = abs(vowel_distance - #vowels)\n\
    \    if current_distance < min_distance then\n      min_distance = current_distance\n\
    \    end\n  end\n  if min_distance == #vowels then\n    return vowels[min_distance]\n\
    \  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq1yxumk.lua:20:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpmq1yxumk.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpmq1yxumk.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" }\n   for i = #word, 1,\
    \ -1 do\n      for vowel = vowels, 1, -1 do\n         if string.find(word, vowel,\
    \ i, true) > 0 then\n            return vowel\n         end\n      end\n   end\n\
    \   return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7g64b1v.lua:18:\
    \ bad 'for' initial value (number expected, got table)\nstack traceback:\n\t/tmp/tmpf7g64b1v.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpf7g64b1v.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    return word:sub(1,-1) ~= word:sub():sub(#word)\
    \ .. word:sub() \n    and  word:sub(2,#word) ~= word:sub(1,#word):sub(#word) \n\
    \    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word) \n    and\
    \ word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word) \n \
    \   and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word):sub(#word)\
    \ \n    and word:sub(2,#word) ~= word:sub(1,#word):sub(#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpciu0gqwb.lua:30: '')'' expected (to close ''('' at line 29)
    near ''=''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U' }\n   \
    \ local length = #word\n    local vowel_count = 0\n    local vowel_position =\
    \ -1\n    local vowel_index\n    local consonant_count = 1\n    local consonant_position\
    \ = length - 1\n    local consonant_index\n    local consonant_left\n    local\
    \ consonant_right\n    local vowel\n    local result = ''\n    \n    -- First\
    \ check rightmost vowel and leftmost consonant\n    if consonant_position > 0\
    \ then\n        local vowel_position = #vowels\n        local consonant_index\
    \ = consonant_position - 1\n        consonant_left = word:sub(1, consonant_index\
    \ + 1)\n        consonant_right = word:sub(consonant_position + 2, length)\n \
    \       \n        if consonant_left:lower() == vowels[vowel_position] then\n \
    \           vowel_index = vowel_position\n            vowel_position = #vowels\n\
    \            \n            if consonant_right:lower() == vowels[vowel_position]\
    \ then\n                vowel_position = #vowels\n                consonant_index\
    \ = consonant_position - 1\n                consonant_left = word:sub(1, consonant_index\
    \ + 1)\n                consonant_right = word:sub(consonant_position + 2, length)\n\
    \                \n                if consonant_left:lower() == vowels[vowel_position]\
    \ then\n                    vowel_index = vowel_position\n                   \
    \ vowel_position = #vowels\n                elseif consonant_right:lower() ==\
    \ vowels[vowel_position] then\n                    vowel_index = vowel_position\n\
    \                    vowel_position = #vowels\n                end\n         \
    \   else\n                consonant_count = consonant_position\n             \
    \   vowel_count = 1\n                vowel_position = #vowels\n              \
    \  \n                if consonant_right:lower() == vowels[vowel_position] then\n\
    \                    vowel_index = vowel_position\n                    vowel_position\
    \ = #vowels\n                elseif consonant_left:lower() == vowels[vowel_position]\
    \ then\n                    vowel_index = vowel_position\n                   \
    \ vowel_position = #vowels\n                end\n            end\n        end\n\
    \    elseif vowel_position > 0 then\n        local consonant_count = consonant_position\n\
    \        local vowel_count = 1\n        local vowel_position = #vowels\n     \
    \   \n        if word:sub(1, vowel_position - 1) ~= vowels[vowel_position] then\n\
    \            vowel_count = 1\n            vowel_position = #vowels\n        end\n\
    \    end\n    \n    -- Check leftmost con\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcto64x4b.lua:98: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Find the longest vowel in the word\n\tlocal longest = string.reverse(word):match('[^aeiouy]+y?[^eiouy]+')\n\
    \tif longest == nil then\n\t\treturn ''\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35jn882i.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tif word:len() < 3 then\n\t\treturn ''\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp674t679d.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local first_letter = word:sub(1,\
    \ 1)\n    local last_letter = word:sub(len(word) - 1)\n    local first_letter_is_vowel\
    \ = vowels:contains(first_letter)\n    local last_letter_is_vowel = vowels:contains(last_letter)\n\
    \    local second_consonant_found = false\n    for i = 1, #word do\n        local\
    \ c = word:sub(i, i)\n        if second_consonant_found and c:lower() ~= last_letter\
    \ then\n            return ''\n        end\n        if first_letter_is_vowel and\
    \ not second_consonant_found and c == 'a' then\n            return 'a'\n     \
    \   end\n        if first_letter_is_vowel and not second_consonant_found and c\
    \ == 'u' then\n            return 'u'\n        end\n        if not first_letter_is_vowel\
    \ and c == 'a' then\n            return 'a'\n        end\n        if not first_letter_is_vowel\
    \ and c == 'u' then\n            return 'u'\n        end\n        if first_letter_is_vowel\
    \ and second_consonant_found and last_letter == c then\n            last_letter\
    \ = c:lower()\n            second_consonant_found = false\n        elseif first_letter_is_vowel\
    \ and second_consonant_found and last_letter ~= c then\n            last_letter\
    \ = c:lower()\n            second_consonant_found = false\n        elseif not\
    \ first_letter_is_vowel and second_consonant_found and last_letter ~= c then\n\
    \            second_consonant_found = true\n            last_letter = c:lower()\n\
    \        end\n    end\n    return last_letter\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vl4nxmo.lua:18:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp6vl4nxmo.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6vl4nxmo.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if word == nil then\n        return ''\n    end\n    local vowel_count, vowel_start\
    \ = 1, 0\n    for i = #word - 1, 1, -1 do\n        if string.sub(word, i, i) ==\
    \ 'a' or string.sub(word, i, i) == 'e' or\n            string.sub(word, i, i)\
    \ == 'i' or string.sub(word, i, i) == 'o' or\n            string.sub(word, i,\
    \ i) == 'u' then\n            vowel_count = vowel_count + 1\n        elseif string.sub(word,\
    \ i, i) == 'A' or string.sub(word, i, i) == 'E' or\n            string.sub(word,\
    \ i, i) == 'I' or string.sub(word, i, i) == 'O' or\n            string.sub(word,\
    \ i, i) == 'U' then\n            vowel_count = vowel_count + 1\n        end\n\
    \    end\n    if vowel_count == 0 then\n        return ''\n    end\n    local\
    \ vowel_end_index = #word\n    if vowel_end == nil then\n        vowel_end_index\
    \ = vowel_end_index - 1\n    end\n    local vowel_start, vowel_end\n    local\
    \ vowel_start_index\n    local vowel_end_index\n    if vowel_end == nil then\n\
    \        vowel_start = vowel_end + 1\n        vowel_start_index = vowel_end +\
    \ 1\n        vowel_end_index = vowel_end + vowel_count\n    else\n        vowel_start\
    \ = vowel_end + 1\n        vowel_end_index = vowel_end + 1\n        vowel_start_index\
    \ = vowel_start\n    end\n    local count = 1\n    while vowel_start_index <=\
    \ vowel_end_index do\n        if string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'a' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'e' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'i' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'o' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'u' then\n            count = count + 1\n            vowel_start_index =\
    \ vowel_end_index + 1\n        elseif string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'A' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'E' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'I' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'O' or\n            string.sub(word, vowel_start_index, vowel_end_index)\
    \ == 'U' then\n            count = count + 1\n            vowel_start_index =\
    \ vowel_end_index + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuo8ecb39.lua:86: ''end'' expected (to close ''if'' at line
    52) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a','e','i','o','u','A','E','I','O','U' }\n    local vowels_count\
    \ = 0\n    local start = 1\n    local end = 1\n    local index = 1\n    while\
    \ start <= #word do\n        start = start + 1\n        end = end - 1\n      \
    \  word = word:sub(1,end)\n        if word:sub(1,1) == \"a\" or word:sub(1,1)\
    \ == \"e\" or word:sub(1,1) == \"i\" or word:sub(1,1) == \"o\" or word:sub(1,1)\
    \ == \"u\"\n            or word:sub(1,1) == \"A\" or word:sub(1,1) == \"E\" or\
    \ word:sub(1,1) == \"I\" or word:sub(1,1) == \"O\" or word:sub(1,1) == \"U\"\n\
    \        then\n            vowels_count = vowels_count + 1\n        end\n    \
    \    if word:sub(1,1) == \"A\" and word:sub(1,2) == \"A\"\n            then\n\
    \                vowels_count = vowels_count + 1\n        end\n        if word:sub(1,1)\
    \ == \"a\" and word:sub(1,2) == \"a\"\n            then\n                vowels_count\
    \ = vowels_count + 1\n        end\n        if word:sub(1,1) == \"e\" and word:sub(1,2)\
    \ == \"e\"\n            then\n                vowels_count = vowels_count + 1\n\
    \        end\n        if word:sub(1,1) == \"i\" and word:sub(1,2) == \"i\"\n \
    \           then\n                vowels_count = vowels_count + 1\n        end\n\
    \        if word:sub(1,1) == \"o\" and word:sub(1,2) == \"o\"\n            then\n\
    \                vowels_count = vowels_count + 1\n        end\n        if word:sub(1,1)\
    \ == \"u\" and word:sub(1,2) == \"u\"\n            then\n                vowels_count\
    \ = vowels_count + 1\n        end\n        if word:sub(1,1) == \"O\" and word:sub(1,2)\
    \ == \"O\"\n            then\n                vowels_count = vowels_count + 1\n\
    \        end\n        if word:sub(1,1) == \"o\" and word:sub(1,2) == \"o\"\n \
    \           then\n                vowels_count = vowels_count + 1\n        end\n\
    \        if word:sub(1,1) == \"U\" and word:sub(1,2) == \"U\"\n            then\n\
    \                vowels_count = vowels_count + 1\n        end\n        if word:sub(1,1)\
    \ == \"u\" and word:sub(1,2) == \"u\"\n            then\n                vowels_count\
    \ = vowels_count + 1\n        end\n        if word:sub(1,1) == \"I\" and word:sub(1,2)\
    \ == \"I\"\n            then\n                vowels_count = vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiw0z05w5.lua:19: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    -- Base condition\n    if #word == 0 then\n        return ''\n    end\n \
    \   \n    -- Get current vowel index\n    local vowel_idx = 1\n    while true\n\
    \        do\n            local vowel = word[#word+vowel_idx+1] -- Get next vowel\
    \ from the right side\n            if vowel == 'a' or vowel == 'e' or vowel ==\
    \ 'i' or vowel == 'o' or vowel == 'u' then\n                return vowel\n   \
    \         end\n            vowel_idx = vowel_idx + 1\n        end\n        while\
    \ vowel_idx < #word\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb8152s3h.lua:32: ''do'' expected near ''end''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \treturn word:sub(1,1):lower() + word:sub(1, word:len()) -- YOUR CODE HERE\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp35d65_77.lua:16:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp35d65_77.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp35d65_77.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U'}\n  local\
    \ vowels_count = #vowels\n  local consonants = {}\n  local vowels_index = 1\n\
    \  local vowels_index1 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6996c7_j.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local words = {}\n   local index\
    \ = 1\n   for w in string.gmatch(word, '[^' .. vowels... ']+') do\n      index\
    \ = index + 1\n      words[index] = w\n   end\n   \n   local maxIndex = 0\n  \
    \ for i = 1, #words do\n      if words[i] == words[maxIndex] then\n         maxIndex\
    \ = i\n      end\n   end\n   \n   local startIndex = maxIndex - 1\n   \n   local\
    \ startVowel = \"\"\n   for i = 1, #words do\n      if i == startIndex then\n\
    \         startVowel = words[i]\n      end\n   end\n   \n   local endVowel = words[startIndex]\n\
    \   \n   return startVowel..endVowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyqudf7vj.lua:19: '')'' expected near ''...''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local closest_vowel = nil\n   for i = #word, #word+#word-1 do\n      if word:sub(i,i)\
    \ == \"a\" or word:sub(i,i) == \"e\" or word:sub(i,i) == \"i\" or\n          \
    \ word:sub(i,i) == \"o\" or word:sub(i,i) == \"u\" then\n         closest_vowel\
    \ = word:sub(i,i)\n         break\n      end\n   end\n   return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxarbwa3.lua:30:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpjxarbwa3.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels_set = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n  local vowel_met_in_left_consonant\
    \ = false;\n  local vowel_met_in_right_consonant = false;\n  local vowel_met_in_middle_consonant\
    \ = false;\n  for i = 1, #word do \n    local current_letter = word[i];\n    local\
    \ is_vowel = vowels_set[current_letter];\n    if is_vowel and (vowel_met_in_left_consonant\
    \ or vowel_met_in_right_consonant) then\n      return '';\n    else if current_letter\
    \ == \"a\" and vowel_met_in_left_consonant == true then\n      vowel_met_in_left_consonant\
    \ = true;\n      vowel_met_in_middle_consonant = false;\n    else if current_letter\
    \ == \"a\" and vowel_met_in_right_consonant == true then\n      vowel_met_in_left_consonant\
    \ = false;\n      vowel_met_in_middle_consonant = true;\n    else if current_letter\
    \ == \"e\" and vowel_met_in_left_consonant == true then\n      vowel_met_in_left_consonant\
    \ = true;\n      vowel_met_in_middle_consonant = false;\n    else if current_letter\
    \ == \"e\" and vowel_met_in_right_consonant == true then\n      vowel_met_in_left_consonant\
    \ = false;\n      vowel_met_in_middle_consonant = true;\n    else if current_letter\
    \ == \"i\" and vowel_met_in_left_consonant == true then\n      vowel_met_in_left_consonant\
    \ = true;\n      vowel_met_in_middle_consonant = false;\n    else if current_letter\
    \ == \"i\" and vowel_met_in_right_consonant == true then\n      vowel_met_in_left_consonant\
    \ = false;\n      vowel_met_in_middle_consonant = true;\n    else if current_letter\
    \ == \"o\" and vowel_met_in_left_consonant == true then\n      vowel_met_in_left_consonant\
    \ = true;\n      vowel_met_in_middle_consonant = false;\n    else if current_letter\
    \ == \"o\" and vowel_met_in_right_consonant == true then\n      vowel_met_in_left_consonant\
    \ = false;\n      vowel_met_in_middle_consonant = true;\n    else if current_letter\
    \ == \"u\" and vowel_met_in_left_consonant == true then\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnggg3rnu.lua:69: ''end'' expected (to close ''if'' at line
    49) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return word:sub((word:len() - 1), word:len()):lower()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wlavw9o.lua:22:\
    \ expected: \"u\"\nactual: \"rt\"\nstack traceback:\n\t/tmp/tmp5wlavw9o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: -1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'v'}\n\tlocal pos = word:len()\n\t\
    local vowel, pos\n\twhile pos ~= 1 do\n\t\tpos = word:len()\n\t\tif pos > 1 then\n\
    \t\t\tvowel = word:sub(1, pos-1)\n\t\t\tif vowel == vowels[vowel] then\n\t\t\t\
    \treturn vowel\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   if word:sub(1, 2) ~= 'u' then return '' end\n   for i = 2, #word do\n    \
    \  if word[i] ~= 'a' and word[i] ~= 'e' and word[i] ~= 'i' and word[i] ~= 'o'\
    \ and word[i] ~= 'u' then\n         if word[i - 1] == 'a' or word[i - 1] == 'e'\
    \ or word[i - 1] == 'i' or word[i - 1] == 'o' or word[i - 1] == 'u' then\n   \
    \         if word[i + 1] == 'a' or word[i + 1] == 'e' or word[i + 1] == 'i' or\
    \ word[i + 1] == 'o' or word[i + 1] == 'u' then\n               if word[i + 2]\
    \ == 'a' or word[i + 2] == 'e' or word[i + 2] == 'i' or word[i + 2] == 'o' or\
    \ word[i + 2] == 'u' then\n                  return word[i]\n               end\n\
    \            end\n         end\n      end\n   end\n   return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw__5lo4.lua:34:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppw__5lo4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowel = \"a\" .. \"e\" .. \"i\" .. \"o\" .. \"u\"\n   local index =\
    \ 0 -- The starting index\n   local vowel_count -- The number of vowels in the\
    \ word\n   for i = 1, #word do -- Count the vowels in the word\n      vowel_count\
    \ = vowel_count + 1\n      if word:sub(i,i) == vowel then\n         index = i\n\
    \         break -- Stop looping\n      end\n   end\n   if #word < index then return\
    \ '' end\n   \n   local vowel_index = #vowel -- The index of vowel\n   local vowel_limit\
    \ = #vowel - 1 -- The limit of index of vowel\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg6p2r7ku.lua:49: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal first_consonant_index\
    \ = string.find(word, \"[^aeiou]\", 1, true) + 1\n\tlocal last_consonant_index\
    \ = string.len(word) - 1\n\tlocal index_of_vowel = nil\n\t-- Find the first vowel\
    \ met the condition\n\twhile index_of_vowel == nil do\n\t\tindex_of_vowel = string.find(word,\
    \ vowels[first_consonant_index], last_consonant_index)\n\tend\n\t-- Find the next\
    \ vowel met the condition\n\twhile index_of_vowel == nil do\n\t\tindex_of_vowel\
    \ = string.find(word, vowels[first_consonant_index], last_consonant_index)\n\t\
    end\n\t-- Find the next vowel met the condition\n\twhile index_of_vowel == nil\
    \ do\n\t\tindex_of_vowel = string.find(word, vowels[first_consonant_index], last_consonant_index)\n\
    \tend\n\treturn string.sub(word, index_of_vowel + 1, index_of_vowel)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbc364dmk.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpbc364dmk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpbc364dmk.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"\
    O\", \"U\"}\n  local vowelscount = #vowels\n  local letters = string.gsub(word,\
    \ '[^a-zA-Z]', '') -- remove all non-alpha\n  local lengths = string.gsub(letters,\
    \ '[^a-zA-Z]', '') -- remove all non-alpha\n  local vowelscounts = #lengths\n\
    \  local closest = 0\n  local vowel = {}\n  for i = 1, vowelscount do\n    if\
    \ lengths[i] == vowels[i] then\n      if closest > 0 then\n        break\n   \
    \   end\n      closest = i\n    end\n  end\n  if closest > 0 then\n    for i =\
    \ closest + 1, vowelscounts do\n      if lengths[i] == vowels[i] then\n      \
    \  vowelscount = i\n        break\n      end\n    end\n  end\n  if vowelscount\
    \ == vowelscounts then\n    return word\n  end\n  local closestvowel = string.sub(word,\
    \ 1, closest)\n  local vowelcount = 0\n  for i = closest+1, closestvowel do\n\
    \    if lengths[i] == vowels[i] then\n      vowelcount = i\n      if vowelcount\
    \ == closestvowel then\n        break\n      end\n    end\n  end\n  if vowelcount\
    \ > closestvowel then\n    return word\n  end\n  return ''\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# %load solutions/1.py\n</cell>\n<text>\n2. Find the shortest\
    \ substring that is a multiple of 3\nThe problem is also referred to as counting\
    \ the triplets in a string. To solve this problem we could just count the numbers\
    \ of triplets and return the minimum, but this would give an incorrect answer.\
    \ We can solve it by looking at the string's individual characters, and counting\
    \ the number of 3's in the string in pairs, triplets, and so on. The algorithm\
    \ is similar to the one we had used in the previous exercise: convert the string's\
    \ characters to lists, and count the number of 3's in those lists.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9j5dm1nh.lua:57: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if word == nil then return nil end\n    local vowels = { [\"e\"] = true,\
    \ [\"i\"] = true, [\"o\"] = true, [\"u\"] = true }\n    for i = #word, 2, -1 do\n\
    \        if vowels[word[i]] then\n            word = word[#word:len() - i]\n \
    \           return word\n        end\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposvl14jg.lua:29:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmposvl14jg.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_idx = nil\n   \
    \ local vowel_val = nil\n    for i, v in ipairs(vowels) do\n        vowel_idx\
    \ = string.find(word, v)\n        if vowel_idx ~= nil then\n            vowel_val\
    \ = v\n        end\n    end\n    if vowel_idx ~= nil then\n        word = word:sub(vowel_idx+1)\n\
    \    end\n    if word == '' then return '' end\n    if vowel_idx == nil then\n\
    \        return word\n    end\n    \n    local vowel_len = #vowels\n    local\
    \ vowel_val = word:sub(vowel_idx+1, vowel_idx)\n    if vowel_val == vowels[vowel_len]\
    \ then -- consonant\n        return word\n    elseif vowel_val == vowels[vowel_len-1]\
    \ then -- consonant in the end\n        return word:sub(vowel_idx-1)\n    elseif\
    \ vowel_val ~= vowels[vowel_len-2] then -- consonant in the middle\n        return\
    \ word:sub(vowel_idx):sub(vowel_idx+1)\n    elseif vowel_val ~= vowels[vowel_len-1]\
    \ then -- consonant in the middle\n        return word:sub(vowel_idx):sub(vowel_idx)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ul5tojq.lua:49:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0ul5tojq.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  if word:len() < 3 then\n    return ''\n  end\n  local pos = word:upper():find('[bcdfghjklmnpqrstvwxyz]')\n\
    \  if pos == nil then\n    return ''\n  end\n  local right_pos = word:upper():find('[bcdfghjklmnpqrstvwxyz]',\
    \ pos + 1)\n  if right_pos == nil then\n    return ''\n  end\n  local vowel =\
    \ word:sub(right_pos, pos + 1):lower()\n  if vowel:find('aeiou') then\n    return\
    \ vowel\n  elseif vowel:find('y') then\n    return ''\n  elseif vowel:find('o')\
    \ then\n    return ''\n  elseif vowel:find('u') then\n    return ''\n  else\n\
    \    return ''\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq012uv_l.lua:44:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq012uv_l.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   for i = 1, #word do\n      if word[i] == letters[1] then\n         return\
    \ letters[1]\n      elseif word[i] == letters[2] then\n         return letters[2]\n\
    \      elseif word[i] == letters[3] then\n         return letters[3]\n      elseif\
    \ word[i] == letters[4] then\n         return letters[4]\n      elseif word[i]\
    \ == letters[5] then\n         return letters[5]\n      elseif word[i] == letters[6]\
    \ then\n         return letters[6]\n      elseif word[i] == letters[7] then\n\
    \         return letters[7]\n      elseif word[i] == letters[8] then\n       \
    \  return letters[8]\n      elseif word[i] == letters[9] then\n         return\
    \ letters[9]\n      elseif word[i] == letters[10] then\n         return letters[10]\n\
    \      elseif word[i] == letters[11] then\n         return letters[11]\n     \
    \ elseif word[i] == letters[12] then\n         return letters[12]\n      elseif\
    \ word[i] == letters[13] then\n         return letters[13]\n      elseif word[i]\
    \ == letters[14] then\n         return letters[14]\n      elseif word[i] == letters[15]\
    \ then\n         return letters[15]\n      elseif word[i] == letters[16] then\n\
    \         return letters[16]\n      elseif word[i] == letters[17] then\n     \
    \    return letters[17]\n      elseif word[i] == letters[18] then\n         return\
    \ letters[18]\n      elseif word[i] == letters[19] then\n         return letters[19]\n\
    \      elseif word[i] == letters[20] then\n         return letters[20]\n     \
    \ elseif word[i] == letters[21] then\n         return letters[21]\n      elseif\
    \ word[i] == letters[22] then\n         return letters[22]\n      elseif word[i]\
    \ == letters[23] then\n         return letters[23]\n      elseif word[i] == letters[24]\
    \ then\n         return letters[24]\n      elseif word[i] == letters[25] then\n\
    \         return letters[25]\n      elseif word[i] == letters[26] then\n     \
    \    return letters[26]\n      elseif word[i] == letters[27] then\n         return\
    \ letters[27]\n      elseif word[i] == letters[28] then\n         return letters[28]\n\
    \      elseif word[i] == letters[29] then\n         return letters[29]\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5wblexrr.lua:76: ''end'' expected (to close ''if'' at line
    17) near ''lu''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   for i=1, #word do\n      local c = string.sub(word, i)\n      if c == 'a'\
    \ then return 'a' end\n      if c == 'e' then return 'e' end\n      if c == 'i'\
    \ then return 'i' end\n      if c == 'o' then return 'o' end\n      if c == 'u'\
    \ then return 'u' end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum_qmi6j.lua:29:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpum_qmi6j.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n   local\
    \ vowel_length = #vowels\n   local vowel_index\n   local vowel_end\n   local vowel_start\n\
    \   for vowel_index = 1, vowel_length do\n      local vowel = vowels[vowel_index]\n\
    \      vowel_start = #word:find(vowel, 1, true) - 1 \n      vowel_end = #word:find(vowel,\
    \ vowel_start, true) + 1 \n      if vowel_start ~= nil then\n         if vowel_end\
    \ ~= nil then return word:sub(vowel_start, vowel_end) \n      end \n   end\n \
    \  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpij_kp4ik.lua:50: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal consonants = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = 0\n\tlocal\
    \ index = 1\n\tlocal closest = ''\n\t\n\tfor i = #word, -1 do\n\t\tfor _, v in\
    \ pairs(vowels) do\n\t\t\tif word:sub(i,i+1) == v then\n\t\t\t\tvowels_count =\
    \ vowels_count+1\n\t\t\tend\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbndsezv8.lua:48: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i, v in ipairs(vowels) do\n\t\
    \tif v:lower() == word:sub(-2, -2) then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7zrjvil.lua:28:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpu7zrjvil.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return string.gsub(word, \"[bcdfghjklmnpqrstvwxyz]+\", function (_)\n   \
    \     local letter = string.byte(_):byte()\n        if letter >= 65 and letter\
    \ <= 90 then\n            return 'A'\n        elseif letter >= 97 and letter <=\
    \ 122 then\n            return 'a'\n        else\n            return \"\"\n  \
    \      end\n    end)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpph4ysolc.lua:27: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- Your code here\n  local vowel_table = {}\n  vowel_table['a'] = 1\n  vowel_table['e']\
    \ = 1\n  vowel_table['i'] = 1\n  vowel_table['o'] = 1\n  vowel_table['u'] = 1\n\
    \  local consonant_table = {}\n  consonant_table['b'] = 1\n  consonant_table['c']\
    \ = 1\n  consonant_table['d'] = 1\n  consonant_table['f'] = 1\n  consonant_table['g']\
    \ = 1\n  consonant_table['h'] = 1\n  consonant_table['j'] = 1\n  consonant_table['k']\
    \ = 1\n  consonant_table['l'] = 1\n  consonant_table['m'] = 1\n  consonant_table['n']\
    \ = 1\n  consonant_table['p'] = 1\n  consonant_table['q'] = 1\n  consonant_table['r']\
    \ = 1\n  consonant_table['s'] = 1\n  consonant_table['t'] = 1\n  consonant_table['v']\
    \ = 1\n  consonant_table['w'] = 1\n  consonant_table['y'] = 1\n  local vowel_count\
    \ = {}\n  vowel_count['a'] = 0\n  vowel_count['e'] = 0\n  vowel_count['i'] = 0\n\
    \  vowel_count['o'] = 0\n  vowel_count['u'] = 0\n  local consonant_count = {}\n\
    \  consonant_count['b'] = 0\n  consonant_count['c'] = 0\n  consonant_count['d']\
    \ = 0\n  consonant_count['f'] = 0\n  consonant_count['g'] = 0\n  consonant_count['h']\
    \ = 0\n  consonant_count['j'] = 0\n  consonant_count['k'] = 0\n  consonant_count['l']\
    \ = 0\n  consonant_count['m'] = 0\n  consonant_count['n'] = 0\n  consonant_count['p']\
    \ = 0\n  consonant_count['q'] = 0\n  consonant_count['r'] = 0\n  consonant_count['s']\
    \ = 0\n  consonant_count['t'] = 0\n  consonant_count['v'] = 0\n  consonant_count['w']\
    \ = 0\n  consonant_count['y'] = 0\n  \n  local vowel = word:sub(1,1)\n  if vowel_table:has(vowel)\
    \ then\n    return vowel\n  elseif consonant_table:has(vowel) then\n    \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ayd21ld.lua:94: ''end'' expected (to close ''if'' at line
    71) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxcrou7kh.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \treturn string.sub(word, 1, string.len(word) - 1) .. string.sub(word, string.len(word)\
    \ - 1, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsbtlite.lua:22:\
    \ expected: \"u\"\nactual: \"yogur\"\nstack traceback:\n\t/tmp/tmpxsbtlite.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    table.insert(vowels, \"a\",\"A\",\"e\",\"E\",\"i\"\
    ,\"I\",\"o\",\"O\",\"u\",\"U\")\n    for i = #word,1,-1 do\n        local v =\
    \ string.upper(string.sub(word,i,i))\n        local v1 = string.upper(string.sub(word,i-1,i))\n\
    \        if vowels[v] and vowels[v1] and v == v1 then\n            return v\n\
    \        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqxcapcg.lua:17:\
    \ wrong number of arguments to 'insert'\nstack traceback:\n\t/tmp/tmpmqxcapcg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmqxcapcg.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'a', 'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp218p2av9.lua:16: unfinished string near ''''a''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  if word == nil then return nil end\n  local vowels = 'AEIOU'\n  local vowel_counter\
    \ = 0\n  local consonants = string.gsub(word, '%S+', '') -- remove all non-letter\n\
    \  local vowel_position = {}\n  for i = #consonants, 1, -1 do\n    if vowels[consonants:sub(i,i)]\
    \ then\n      table.insert(vowel_position, consonants:sub(i,i))\n    end\n  end\n\
    \  local vowel_end = 1\n  local vowel_start = #vowels - 1\n  for _, i in pairs(vowel_position)\
    \ do\n    if vowel_end < i then\n      if consonants[vowel_end] == i then\n  \
    \      table.insert(vowel_position, i)\n        vowel_end++\n      elseif consonants[vowel_end]\
    \ == i then\n        table.insert(vowel_position, i)\n        vowel_end++\n  \
    \    else\n        vowel_start = i - 1\n        break\n      end\n    else\n \
    \     table.insert(vowel_position, i)\n      vowel_start = i\n      vowel_end++\n\
    \    end\n  end\n  if #vowel_position == 1 then\n    return vowels[vowel_position[1]]\n\
    \  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0yhrdkng.lua:32: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    -- Your code goes here\n    local vowels = {}\n    for i=#word, 1 do \n \
    \       if string.lower(word:sub(i,i)) == 'a' or string.lower(word:sub(i,i)) ==\
    \ 'e' or string.lower(word:sub(i,i)) == 'i' or string.lower(word:sub(i,i)) ==\
    \ 'o' or string.lower(word:sub(i,i)) == 'u' then\n            table.insert(vowels,\
    \ string.lower(word:sub(i,i)))\n        end\n    end\n    local vowels_count =\
    \ #vowels\n    local last_vowel_index\n    for i=#word, 1 do\n        if string.lower(word:sub(i,i))\
    \ == string.lower(vowels[vowels_count - 1]) then\n            last_vowel_index\
    \ = i\n        end\n    end\n    if last_vowel_index ~= #word then\n        return\
    \ ''\n    end\n    local last_vowel = string.lower(vowels[vowels_count - 1])\n\
    \    local consonant_count = #string.lower(word:sub(last_vowel_index + 1))\n \
    \   local closest_vowel_index\n    for i=last_vowel_index, #word do\n        if\
    \ string.lower(word:sub(i,i)) == last_vowel then\n            closest_vowel_index\
    \ = i\n        end\n    end\n    if closest_vowel_index == 0 then\n        return\
    \ ''\n    end\n    local closest_vowel = string.lower(vowels[closest_vowel_index])\n\
    \    if string.lower(word:sub((closest_vowel_index - 1), (closest_vowel_index\
    \ + 2))) == closest_vowel then\n        return closest_vowel\n    elseif string.lower(word:sub((closest_vowel_index\
    \ + 1), (closest_vowel_index + 2))) == closest_vowel then\n        return closest_vowel\n\
    \    elseif string.lower(word:sub((closest_vowel_index + 1), (closest_vowel_index\
    \ + 2))) == string.lower(vowels[vowels_count - 2]) then\n        return closest_vowel\n\
    \    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc6m869u.lua:58:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphc6m869u.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [string.sub(word, 3, 5)] = 'a',\n    [string.sub(word,\
    \ 1, 3)] = 'a',\n    [string.sub(word, -1, 1)] = 'a',\n    [string.sub(word, 2,\
    \ -1)] = 'o',\n    [string.sub(word, 0, 2)] = 'o',\n    [string.sub(word, 1, 1)]\
    \ = 'o',\n    [string.sub(word, 0, 1)] = 'o',\n    [string.sub(word, 2, 2)] =\
    \ 'i',\n    [string.sub(word, 2, 0)] = 'i',\n    [string.sub(word, 3, 3)] = 'i',\n\
    \    [string.sub(word, 0, 0)] = 'i'\n  }\n  local vowels_count = #vowels\n  local\
    \ consonants = string.gsub(word, '[^A-Za-z]', '')\n  local consonants_count =\
    \ #consonants\n  if consonants_count > 0 then\n    local consonant_index = 1\n\
    \    local consonant_count = consonants_count\n    while consonant_index < consonants_count\
    \ do\n      if string.sub(consonants, consonant_index, consonant_index + 2) ~=\
    \ '' then\n        local vowel_start, vowel_end = string.find(consonants, vowels[consonants[consonant_index]],\
    \ consonant_index)\n        if vowel_end < consonant_index + 1 then\n        \
    \  local vowel_start_index = consonant_index + vowel_start + 1\n          local\
    \ vowel_end_index = consonant_index + vowel_end + 1\n          -- Only return\
    \ vowel if its between start index and end index\n          if vowel_start_index\
    \ <= consonant_index and consonant_index <= vowel_end_index then\n           \
    \ return consonants[consonant_index]\n          end\n        end\n      end\n\
    \      consonant_index = consonant_index + 1\n    end\n  end\n  return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmposn0_197.lua:37:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmposn0_197.lua:37:\
    \ in local 'candidate'\n\t/tmp/tmposn0_197.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowel_count = {}\n\
    \    for i = 1, #word do\n        if string.sub(word, i, i) in vowels then\n \
    \           table.insert(vowel_count, i)\n        end\n    end\n    local vowel_start_index\
    \ = tonumber(math.min(vowel_count))\n    local vowel_end_index = tonumber(math.max(vowel_count))\n\
    \    if vowel_start_index == nil then\n        return ''\n    end\n    if vowel_end_index\
    \ == nil then\n        return string.sub(word, vowel_start_index + 1, #word)\n\
    \    end\n    local vowel_start_i = string.sub(word, vowel_start_index + 1, vowel_start_index\
    \ + 2)\n    local vowel_end_i = string.sub(word, vowel_end_index + 1, vowel_end_index\
    \ + 2)\n    local vowel_start = string.sub(word, vowel_start_index, vowel_start_index\
    \ + 2)\n    local vowel_end = string.sub(word, vowel_end_index, vowel_end_index\
    \ + 2)\n    local vowel_start_index = string.find(vowel_start, \":a\")\n    local\
    \ vowel_end_index = string.find(vowel_end, \":a\")\n    local vowel_start = string.sub(word,\
    \ vowel_start_index, vowel_start_index + 2)\n    local vowel_end = string.sub(word,\
    \ vowel_end_index, vowel_end_index + 2)\n    local vowel_start_i = string.find(vowel_start,\
    \ \":a\")\n    local vowel_end_i = string.find(vowel_end, \":a\")\n    local vowel_start\
    \ = string.sub(word, vowel_start_i, vowel_start_i + 2)\n    local vowel_end =\
    \ string.sub(word, vowel_end_i, vowel_end_i + 2)\n    local vowel_start_index\
    \ = string.find(vowel_start, \"^\")\n    local vowel_end_index = string.find(vowel_end,\
    \ \"^\")\n    local vowel_start = string.sub(word, vowel_start_index, vowel_start_index\
    \ + 2)\n    local vowel_end = string.sub(word, vowel_end_index, vowel_end_index\
    \ + 2)\n    local vowel_start_i = string.find(vowel_start, \"^\")\n    local vowel_end_i\
    \ = string.find(vowel_end, \"^\")\n    local vowel_start = string.sub(word, vowel_start_i,\
    \ vowel_start_i + 2)\n    local vowel_end = string.sub(word, vowel_end_i, vowel_end_i\
    \ + 2)\n    local vowel_start_index = string.find(vowel_start, \"[:\")\n    local\
    \ vowel_end_index = string.find(vowel_end, \"[:\")\n    local vowel_start = string.sub(word,\
    \ vowel_start_index, vowel_start_index + 2)\n    local vowel_end = string.sub(word,\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplu9wbc5x.lua:19: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal letter = word:sub(1,1)\
    \ -- remove first letter\n\tlocal length = #letter -- length of word\n\tlocal\
    \ vowel = nil\n\t-- find first letter\n\tif letter:sub(1,1) in vowels then\n\t\
    \tvowel = letter:sub(1,1)\n\telse\n\t\t-- find first vowel\n\t\tlocal first_vowel\
    \ = nil\n\t\tlocal vowel_position = 1\n\t\twhile vowel_position <= length do\n\
    \t\t\tif letter:sub(vowel_position,vowel_position)..letter:sub(vowel_position+1,vowel_position+1)\
    \ in vowels then\n\t\t\t\tfirst_vowel = letter:sub(vowel_position,vowel_position)\n\
    \t\t\t\tbreak\n\t\t\telse\n\t\t\t\tvowel_position = vowel_position + 1\n\t\t\t\
    end\n\t\tend\n\t\tif first_vowel ~= nil then\n\t\t\t-- found first vowel\n\t\t\
    \tletter = letter:sub(vowel_position,1) -- remove first vowel\n\t\t\t-- find second\
    \ vowel\n\t\t\tlocal second_vowel = nil\n\t\t\tlocal vowel_position = 1\n\t\t\t\
    while vowel_position <= length do\n\t\t\t\tif letter:sub(vowel_position,vowel_position)..letter:sub(vowel_position+1,vowel_position+1)\
    \ in vowels then\n\t\t\t\t\tsecond_vowel = letter:sub(vowel_position,vowel_position)\n\
    \t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\tvowel_position = vowel_position + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\tif second_vowel ~= nil then\n\t\t\t\t-- found second\
    \ vowel\n\t\t\t\tletter = letter:sub(vowel_position,1) -- remove second vowel\n\
    \t\t\t\t-- find third vowel\n\t\t\t\tlocal third_vowel = nil\n\t\t\t\tlocal vowel_position\
    \ = 1\n\t\t\t\twhile vowel_position <= length do\n\t\t\t\t\tif letter:sub(vowel_position,vowel_position)..letter:sub(vowel_position+1,vowel_position+1)\
    \ in vowels then\n\t\t\t\t\t\tthird_vowel = letter:sub(vowel_position,vowel_position)\n\
    \t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tvowel_position = vowel_position\
    \ + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif third_vowel ~= nil then\n\t\t\t\t\
    \t-- found third vowel\n\t\t\t\t\tletter = letter:sub(vowel_position,1) -- remove\
    \ third vowel\n\t\t\t\t\t-- find fourth vowel\n\t\t\t\t\tlocal fourth_vowel =\
    \ nil\n\t\t\t\t\tlocal vowel_position = 1\n\t\t\t\t\twhile vowel_position <= length\
    \ do\n\t\t\t\t\t\tif letter:sub(vowel_position,vowel_position)..letter:sub(vowel_position+1,vowel_position\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2ax_nht.lua:21: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'}\n\
    \tlocal vowel_count = #vowels\n\tlocal consonant_count = #consonants\n\tlocal\
    \ letter = word:sub(1, 1)\n\tlocal index = word:find(letter)\n\tif index > 0 then\n\
    \t\tindex = index - 1\n\tend\n\tif letter ~= word:sub(index, index) then\n\t\t\
    index = word:find(letter)\n\t\tif index > 0 then\n\t\t\tindex = index - 1\n\t\t\
    end\n\tend\n\tif index ~= nil then\n\t\tindex = index + 1\n\t\tlocal c = word:sub(index,\
    \ index)\n\t\tif c ~= letter then\n\t\t\tindex = index - 1\n\t\telse\n\t\t\tindex\
    \ = index + 1\n\t\tend\n\t\tif c ~= letter then\n\t\t\tif index > 0 then\n\t\t\
    \t\tindex = index - 1\n\t\t\tend\n\t\tend\n\t\tif index ~= nil then\n\t\t\tindex\
    \ = index + 1\n\t\t\tlocal c = word:sub(index, index)\n\t\t\tif c ~= letter then\n\
    \t\t\t\tindex = index - 1\n\t\t\telse\n\t\t\t\tindex = index + 1\n\t\t\tend\n\t\
    \tend\n\t\tif index ~= nil then\n\t\t\tindex = index + 1\n\t\t\tlocal c = word:sub(index,\
    \ index)\n\t\t\tif vowels[letter] == word:sub(index, index) then\n\t\t\t\treturn\
    \ letter\n\t\t\telse\n\t\t\t\tindex = index + 1\n\t\t\tend\n\t\tend\n\tend\n\t\
    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplw2jtvq.lua:69:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpplw2jtvq.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if #word < 3 or #word > 10 then\n        return ''\n    end\n    if word:sub(1,\
    \ 1) ~= 'a' and word:sub(1, 1) ~= 'e' and word:sub(1, 1) ~= 'i' and word:sub(1,\
    \ 1) ~= 'o' and word:sub(1, 1) ~= 'u' then\n        return ''\n    end\n    local\
    \ first = word:sub(1, 1)\n    local last = word:sub(-1, -1)\n    local index =\
    \ 1\n    local distance = 1000\n    while index < #word do\n        local next_word\
    \ = word:sub(1, index + 1)\n        if next_word ~= 'a' and next_word ~= 'e' and\
    \ next_word ~= 'i' and next_word ~= 'o' and next_word ~= 'u' then\n          \
    \  return ''\n        end\n        local next_index = index + 1\n        local\
    \ next_distance = 1000\n        while next_index < #word do\n            local\
    \ next_next_word = word:sub(1, next_index + 1)\n            if next_next_word\
    \ ~= 'a' and next_next_word ~= 'e' and next_next_word ~= 'i' and next_next_word\
    \ ~= 'o' and next_next_word ~= 'u' then\n                return ''\n         \
    \   end\n            local next_next_index = next_index + 1\n            local\
    \ next_next_distance = 1000\n            while next_next_index < #word do\n  \
    \              local next_next_next_word = word:sub(1, next_next_index + 1)\n\
    \                if next_next_next_word ~= 'a' and next_next_next_word ~= 'e'\
    \ and next_next_next_word ~= 'i' and next_next_next_word ~= 'o' and next_next_next_word\
    \ ~= 'u' then\n                    return ''\n                end\n          \
    \      local next_next_next_index = next_next_index + 1\n                local\
    \ next_next_next_distance = 1000\n                while next_next_next_index <\
    \ #word do\n                    local next_next_next_next_word = word:sub(1, next_next_next_index\
    \ + 1)\n                    if next_next_next_next_word ~= 'a' and next_next_next_next_word\
    \ ~= 'e' and next_next_next_next_word ~= 'i' and next_next_next_next_word ~= 'o'\
    \ and next_next_next_next_word ~= 'u' then\n                        return ''\n\
    \                    end\n                    local next_next_next_next_index\
    \ = next_next_next_index + 1\n                    local next_next_next_next_distance\
    \ = 1000\n                end\n            end\n        end\n        index = next_index\n\
    \        distance = next_distance\n    end\n    if distance == 1000 then\n   \
    \     return first\n    end\n    if distance < 1000 then\n        return ''\n\
    \    end\n    if distance > 1000 then\n        return last\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7h3hft1.lua:75:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpl7h3hft1.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = string.gsub(word, \"[aeiouAEIOU]\", \"\")\n    local vowels_size\
    \ = string.len(vowels)\n    if vowels_size == 0 then\n        return ''\n    end\n\
    \    local is_vowel = nil\n    local previous_vowel = nil\n    local vowel_index\
    \ = nil\n    local vowel_start = 1\n    local vowel_end = 0\n    for i = 1, vowels_size\
    \ do\n        local vowel = string.sub(vowels, i, i)\n        if vowel ~= 'y'\
    \ and vowel ~= 'A' and vowel ~= 'E' and vowel ~= 'I' and vowel ~= 'O' and vowel\
    \ ~= 'U' and vowel ~= 'a' and vowel ~= 'e' and vowel ~= 'i' and vowel ~= 'o' and\
    \ vowel ~= 'u' then\n            is_vowel = vowel\n            vowel_index = i\n\
    \            vowel_start = i\n            vowel_end = i + 1\n        else\n  \
    \          if previous_vowel ~= 'y' and previous_vowel ~= 'A' and previous_vowel\
    \ ~= 'E' and previous_vowel ~= 'I' and previous_vowel ~= 'O' and previous_vowel\
    \ ~= 'U' and previous_vowel ~= 'a' and previous_vowel ~= 'e' and previous_vowel\
    \ ~= 'i' and previous_vowel ~= 'o' and previous_vowel ~= 'u' then\n          \
    \      if string.sub(vowels, i - 1, i - 1) ~= is_vowel then\n                \
    \    if i - vowel_index + 1 == 0 then\n                        is_vowel = string.sub(vowels,\
    \ i - 1, i - 1)\n                        vowel_index = i - 1\n               \
    \         vowel_start = i - 1\n                        vowel_end = i\n       \
    \             else\n                        is_vowel = string.sub(vowels, i -\
    \ 1, i - 1)\n                        vowel_index = i - 1\n                   \
    \     vowel_start = i - 1\n                        vowel_end = i\n           \
    \         end\n                end\n            end\n        end\n        previous_vowel\
    \ = is_vowel\n    end\n    if vowel_index == nil then\n        return ''\n   \
    \ end\n    if is_vowel == 'y' then\n        if vowel_start > 1 then\n        \
    \    return string.sub(vowels, vowel_start - 1, vowel_end)\n        end\n    else\n\
    \        if vowel_start < vowel_index then\n            return string.sub(vowels,\
    \ vowel_start, vowel_index - 1)\n        end\n    end\n    return ''\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb3yhe_oy.lua:36:\
    \ attempt to perform arithmetic on a nil value (local 'vowel_index')\nstack traceback:\n\
    \t/tmp/tmpb3yhe_oy.lua:36: in local 'candidate'\n\t/tmp/tmpb3yhe_oy.lua:70: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_len = #vowels\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptzzibobu.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    ['a'] = 'a',\n    ['e'] = 'e',\n    ['i'] = 'i',\n  \
    \  ['o'] = 'o',\n    ['u'] = 'u'\n  }\n  local pos = word:find('%[^aeiou]%')\n\
    \  if pos ~= nil then\n    pos = pos - 1\n    local char = word:sub(pos, pos)\n\
    \    local vowel = vowels[char]\n    if vowel then\n      return vowel\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprj05xnld.lua:37:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmprj05xnld.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    word = string.lower(word)\n    local vowel = nil\n    local vowel_end\n \
    \   local vowel_begin\n    local index = 1 \n    while index <= #word do\n   \
    \     -- Find first consonant\n        if string.sub(word, index - 1, index) ~=\
    \ 'a' then\n            index = index - 1\n            continue -- Jump out of\
    \ this loop\n        else\n            if string.sub(word, index - 1, index) ~=\
    \ 'e' then\n                index = index - 1\n                continue -- Jump\
    \ out of this loop\n            elseif string.sub(word, index - 1, index) ~= 'i'\
    \ then\n                index = index - 1\n                continue -- Jump out\
    \ of this loop\n            elseif string.sub(word, index - 1, index) ~= 'o' then\n\
    \                index = index - 1\n                continue -- Jump out of this\
    \ loop\n            elseif string.sub(word, index - 1, index) ~= 'u' then\n  \
    \              index = index - 1\n                continue -- Jump out of this\
    \ loop\n            else\n                index = index - 1\n                vowel\
    \ = string.sub(word, index - 1, index)\n                vowel_end = string.sub(word,\
    \ index, #word)\n                if vowel ~= '' then\n                    vowel_begin\
    \ = string.sub(word, index - 1, index)\n                    \n               \
    \     -- Find last consonant\n                    if string.sub(word, index, index\
    \ + 1) ~= 'a' then\n                        index = index + 1\n              \
    \          continue -- Jump out of this loop\n                    else\n     \
    \                   if string.sub(word, index, index + 1) ~= 'e' then\n      \
    \                      index = index + 1\n                            continue\
    \ -- Jump out of this loop\n                        elseif string.sub(word, index,\
    \ index + 1) ~= 'i' then\n                            index = index + 1\n    \
    \                        continue -- Jump out of this loop\n                 \
    \       elseif string.sub(word, index, index + 1) ~= 'o' then\n              \
    \              index = index + 1\n                            continue -- Jump\
    \ out of this loop\n                        elseif string.sub(word, index, index\
    \ + 1) ~= 'u' then\n                            index = index + 1\n          \
    \                  continue -- Jump out of this loop\n                       \
    \ else\n                            index = index + 1\n                      \
    \      vowel = string.sub(word, index, index + 1) \n                         \
    \   \n                            if vowel ~= '' then\n                      \
    \          vowel_begin = string.sub(word, index - 1, index)\n                \
    \                \n                                -- Find middle consonant\n\
    \                                if string.sub(word, index, index + 2) ~= 'a'\
    \ then\n                                    index = index + 1\n              \
    \                      continue -- Jump out of this loop\n                   \
    \             else\n                                    if string.sub(word, index,\
    \ index + 2) ~= 'e' then\n                                        index = index\
    \ + 1\n                                        continue -- Jump out of this loop\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5r1e4ym6.lua:26: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    a, e, i, o, u, y\n  }\n  local vowels_count = #vowels\n\
    \  local vowel_candidate = nil\n  \n  local word_len = #word\n  for i = 1, word_len\
    \ do\n    local letter = word[i]\n    if letter then\n      if letter ~= nil and\
    \ letter >= 'a' and letter <= 'z' then\n        local next_letter = word[i+1]\n\
    \        if next_letter ~= nil and next_letter >= 'a' and next_letter <= 'z' then\n\
    \          -- We only care about consonants\n          local next_letter_offset\
    \ = i - 1\n          local letter_index = letter - 'a'\n          local letter_index_offset\
    \ = letter_index - offset + 1\n          if letter_index_offset >= 0 and letter_index_offset\
    \ <= vowels_count then\n            -- We found the vowel\n            vowel_candidate\
    \ = letter_index + letter_index_offset\n            break\n          end\n   \
    \     end\n      end\n    end\n  end\n  \n  if vowel_candidate == nil then\n \
    \   return ''\n  end\n  \n  local vowel = vowels[vowel_candidate]\n  if vowel\
    \ then\n    return vowel\n  end\n  \n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88d07a5h.lua:58:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp88d07a5h.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y','a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \  \n  local vowel_index = #vowels-1\n  local vowel_letter = word:sub(1, 1)\n\
    \  \n  local vowel_index = 1\n  \n  while vowel_index <= #word and vowels[vowel_index]\
    \ == vowel_letter do\n    vowel_index = vowel_index + 1\n  end\n  \n  if vowel_index\
    \ > #word then\n    return ''\n  end\n  \n  local letter_index = #word-1 \n  \n\
    \  while letter_index > 0 and word[letter_index] == vowel_letter do\n    letter_index\
    \ = letter_index - 1\n  end\n  \n  if letter_index > 0 then\n    return word:sub(1,\
    \ letter_index - 1)\n  else\n    return ''\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq0s0vht.lua:47:\
    \ expected: \"u\"\nactual: \"yogu\"\nstack traceback:\n\t/tmp/tmpfq0s0vht.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    'a', 'A', 'e','E', 'i','I', 'o','O', 'u','U','a','A','e','E',\
    \ 'i','I', 'o','O', 'u','U',\n    'u','i','i','o','o','u','u'\n  }\n  -- find\
    \ all vowels at the end of word\n  local vowels_at_end = vowels:filter(function(v)\
    \ \n    return word:len() >= v:len() and word:sub(v:len()-1) == v end\n  )\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmkn6c0k6.lua:43: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: -1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  assert(type(word) == 'string')\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local pos = #word\n  local vowel = ''\n  while pos do\n    if vowels[word[pos\
    \ - 1]] == nil then\n      if word[pos] == 'b' then\n        if pos > 1 then\n\
    \          pos = pos - 1\n        else\n          break -- reached the first consonant,\
    \ all done here\n        end\n      end\n      pos = pos - 1\n    elseif vowels[word[pos\
    \ - 1]] == word[pos] then\n      pos = pos - 1\n    elseif vowels[word[pos - 1]]\
    \ == word[pos + 1] then\n      pos = pos + 1\n    end\n    vowel = word[pos]\n\
    \  end\n  return vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n   local\
    \ i = 0\n   local index = 0\n   -- find the first vowel met the criteria\n   for\
    \ i, v in ipairs(vowels) do\n      if word.Sub(i, 1) ~= v then\n         index\
    \ = i\n         break\n      end\n   end\n   if index ~= nil then\n      -- find\
    \ the second vowel met the criteria\n      for i, v in ipairs(vowels) do\n   \
    \      if word.Sub(index + 1, 1) ~= v then\n            index = i\n          \
    \  break\n         end\n      end\n      if index ~= nil then\n         return\
    \ word.Sub(index + 1, 1)\n      else\n         return ''\n      end\n   else\n\
    \      return ''\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64byy7qv.lua:21:\
    \ attempt to call a nil value (field 'Sub')\nstack traceback:\n\t/tmp/tmp64byy7qv.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp64byy7qv.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   if word == nil then\n      return nil\n   end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6zgxq__z.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if word==nil then\n        return ''\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp06i99880.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowel_table = {\n\t\t['a'] = 'a',\n\t\t['e'] = 'e',\n\t\t['i'] = 'i',\n\
    \t\t['o'] = 'o',\n\t\t['u'] = 'u'\n\t}\n\t\n\tlocal vowel_to_idx = {}\n\tfor k,\
    \ v in pairs(vowel_table) do\n\t\ttable.insert(vowel_to_idx, v)\n\tend\n\t\n\t\
    local idx\n\tfor idx = #word, 1, -1 do\n\t\tif word[idx] ~= nil then\n\t\t\tidx\
    \ = vowel_to_idx[word[idx]]\n\t\t\tif idx then\n\t\t\t\treturn vowel_table[idx]\n\
    \t\t\tend\n\t\tend\n\tend\n\t\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkel_5gvw.lua:45:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpkel_5gvw.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n      [\"a\"] = \"a\",\n      [\"e\"] = \"a\",\n      [\"\
    i\"] = \"i\",\n      [\"o\"] = \"i\",\n      [\"u\"] = \"i\",\n      [\"A\"] =\
    \ \"a\",\n      [\"E\"] = \"a\",\n      [\"I\"] = \"i\",\n      [\"O\"] = \"i\"\
    ,\n      [\"U\"] = \"i\",\n    }\n    local vowelCount = #vowels\n    local vowel\
    \ = nil\n    local closestVowel = nil\n    local currentLetter = word[1]\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp72y5vhl3.lua:51: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   \n   local vowels = {'a','e','i','o','u'}\n   local count = 0\n   local vowel\
    \ = ''\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk1oy1ooq.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local len = #word\n \
    \   local count = 0\n    local vowel = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkeirzuzx.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowel_table = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local\
    \ index = #word\n    while index > 1 do\n        if word:sub(1, index-1) ~= 'a'\
    \ and word:sub(1, index-1) ~= 'e' and word:sub(1, index-1) ~= 'i' and word:sub(1,\
    \ index-1) ~= 'o' and word:sub(1, index-1) ~= 'u' then\n            if word:sub(index-1,\
    \ index) == \"a\" then\n                return \"a\"\n            elseif word:sub(index-1,\
    \ index) == \"e\" then\n                return \"e\"\n            elseif word:sub(index-1,\
    \ index) == \"i\" then\n                return \"i\"\n            elseif word:sub(index-1,\
    \ index) == \"o\" then\n                return \"o\"\n            elseif word:sub(index-1,\
    \ index) == \"y\" then\n                return \"y\"\n            end\n      \
    \  else\n            if word:sub(index-2, index-1) == \"a\" then\n           \
    \     return \"a\"\n            elseif word:sub(index-2, index-1) == \"e\" then\n\
    \                return \"e\"\n            elseif word:sub(index-2, index-1) ==\
    \ \"i\" then\n                return \"i\"\n            elseif word:sub(index-2,\
    \ index-1) == \"o\" then\n                return \"o\"\n            elseif word:sub(index-2,\
    \ index-1) == \"u\" then\n                return \"u\"\n            end\n    \
    \    end\n        index = index - 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs8rhba7.lua:52:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcs8rhba7.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tword = \"\" .. word .. \"\"\n\tlocal vowels = {[\"aeiou\"] = 'a', [\"AEIOU\"\
    ] = 'A', [\"AE\"] = 'E', [\"E\"] = 'E', [\"I\"] = 'I', [\"O\"] = 'O', [\"U\"]\
    \ = 'U'}\n\tlocal first_vowel = string.match(word, \"^([[:alpha:]]+)(.*)(?=([[:alpha:]]))$\"\
    )\n\tif first_vowel ~= nil then\n\t\treturn vowels[first_vowel]:sub(1, 1)\n\t\
    end\n\treturn word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqe7cw_u.lua:28:\
    \ expected: \"u\"\nactual: \"yogurt\"\nstack traceback:\n\t/tmp/tmpwqe7cw_u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowelsLen = #vowels\n  local\
    \ vowelsFirstChar = {}\n  for i = 1, vowelsLen do\n    table.insert(vowelsFirstChar,vowels[i])\n\
    \  end\n  local vowelsLastChar = {}\n  for i = vowelsLen - 1, 1, -1 do\n    table.insert(vowelsLastChar,vowels[i])\n\
    \  end\n  local lastVowel = nil\n  local lastVowelIndex = nil\n  local firstVowelIndex\
    \ = nil\n  local vowelsFirstCharLen = #vowelsFirstChar\n  local vowelsLastCharLen\
    \ = #vowelsLastChar\n  for i = 1, #word do\n    local charIndex = string.find(word,vowelsFirstChar[i])\n\
    \    local lastCharIndex = string.find(word,vowelsLastChar[#vowelsLastChar])\n\
    \    if charIndex then\n      if lastCharIndex then\n        if charIndex - lastCharIndex\
    \ >= vowelsFirstCharLen and charIndex - lastCharIndex <= vowelsLastCharLen then\n\
    \          lastVowel = vowelsLastChar[i]\n          lastVowelIndex = lastCharIndex\n\
    \        end\n      end\n    end\n  end\n  if lastVowel ~= nil then\n    local\
    \ lastCharIndex = string.find(word,lastVowel)\n    if lastCharIndex then\n   \
    \   if lastCharIndex - 1 >= vowelsFirstCharLen and lastCharIndex - 1 <= vowelsLastCharLen\
    \ then\n        firstVowelIndex = lastCharIndex - 1\n      end\n    end\n  end\n\
    \  if firstVowelIndex ~= nil then\n    local firstCharIndex = string.find(word,vowelsFirstChar[#vowelsFirstChar])\n\
    \    if firstCharIndex then\n      if firstCharIndex + 1 <= vowelsFirstCharLen\
    \ and firstCharIndex + 1 >= vowelsLastCharLen then\n        return word[firstVowelIndex\
    \ + 1]\n      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mkdwe17.lua:65:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4mkdwe17.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  -- find the vowel on the right\
    \ side of word\n  local vowel = string.find(word,\n                          \
    \  string.sub(word, 1, string.len(word) - 2))\n  if vowel then\n    -- make sure\
    \ there are at least 2 vowels \n    local rightVowel = string.sub(word, string.len(word)\
    \ - 2, string.len(word))\n    -- check whether rightVowel contains 2 consonants\
    \ or more.\n    local vowelCount = 0\n    for i = 0, string.len(rightVowel) -\
    \ 1 do\n      local char = rightVowel[i]\n      if vowels[char] then\n       \
    \ vowelCount = vowelCount + 1\n      else\n        -- break if it contains more\
    \ than 2 consonants\n        if vowelCount > 1 then\n          break\n       \
    \ end\n      end\n    end\n    -- return result if vowelCount > 1 \n    if vowelCount\
    \ > 1 then\n      return \"\"\n    end\n    return vowels[vowel]\n  else\n   \
    \ return \"\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wh7brl3.lua:49:\
    \ expected: \"u\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp0wh7brl3.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tif word == nil then\n\t\tword = ''\n\tend\n\tlocal vowels = {'a','e','i','o','u'}\n\
    \tfor i=1,#word,2 do\n\t\tif vowels.find(word[i]) ~= nil then\n\t\t\tlocal con\
    \ = word[i+1]\n\t\t\tif con == 'a' or con == 'e' or con == 'i' or con == 'o' or\
    \ con == 'u' then\n\t\t\t\treturn con\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7i3z2zy.lua:21:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpk7i3z2zy.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpk7i3z2zy.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    if #word < 2 then return end\n    local first_consonant = string.sub(word,\
    \ 1, 1)\n    local vowel_candidates = {}\n    local vowel_candidates_count = 0\n\
    \    local vowel_candidates_max_count = 0\n    local vowel_candidates_min = 0\n\
    \    local vowel_candidates_max = 0\n    for i = 1, #word do\n        local cur_char\
    \ = string.sub(word, i, 1)\n        if cur_char == 'A' or cur_char == 'E' or cur_char\
    \ == 'I' or cur_char == 'O' or cur_char == 'U' then\n            vowel_candidates_count\
    \ = vowel_candidates_count + 1\n            if cur_char == 'A' then vowel_candidates_min\
    \ = 1 end\n            if cur_char == 'E' then vowel_candidates_min = 2 end\n\
    \            if cur_char == 'I' then vowel_candidates_min = 3 end\n          \
    \  if cur_char == 'O' then vowel_candidates_min = 4 end\n            if cur_char\
    \ == 'U' then vowel_candidates_min = 5 end\n            if cur_char == 'A' or\
    \ cur_char == 'E' or cur_char == 'I' or cur_char == 'O' or cur_char == 'U' then\n\
    \                vowel_candidates[vowel_candidates_max_count] = vowel_candidates_max_count\
    \ + 1\n            end\n        end\n    end\n    if vowel_candidates_count <\
    \ 2 then return end\n    local cur_word = word\n    local cur_letter = string.sub(cur_word,\
    \ 1, 1)\n    local cur_vowel = string.sub(cur_word, 1, 1)\n    local vowel_candidates_index\
    \ = 0\n    for i = 1, #vowel_candidates do\n        local cur_candidates_min =\
    \ vowel_candidates_min\n        if cur_letter == 'A' or cur_letter == 'E' or cur_letter\
    \ == 'I' or cur_letter == 'O' or cur_letter == 'U' then\n            if vowel_candidates[i]\
    \ < vowel_candidates_min then\n                cur_vowel = cur_letter\n      \
    \          cur_letter = string.sub(cur_word, i, 1)\n                cur_candidates_min\
    \ = vowel_candidates[i]\n            end\n        end\n    end\n    return cur_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogtmmj26.lua:58:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpogtmmj26.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   assert(word:find('[aeiou]') ~= nil)\n   local left_consonants = word:sub(-1)\
    \ \n   local right_consonants = word:sub(-3)\n   local vowel_left = left_consonants:find('[aeiou]')\n\
    \   local vowel_right = right_consonants:find('[aeiou]')\n   if vowel_left ~=\
    \ nil then\n      if vowel_right:find(vowel_left) == nil then\n         return\
    \ vowel_left\n      else\n         return vowel_right\n      end\n   else\n  \
    \    if vowel_right:find(vowel_left) == nil then\n         return vowel_right\n\
    \      else\n         return vowel_left\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy558xk4k.lua:28:\
    \ attempt to index a number value (local 'vowel_right')\nstack traceback:\n\t\
    /tmp/tmpy558xk4k.lua:28: in local 'candidate'\n\t/tmp/tmpy558xk4k.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local start = word:sub(1,2) -- First two letters \n  local end = word:sub(-2)\
    \ -- Last letter\n  local vowels = {'a','e','i','o','u'} -- vowels\n  \n  for\
    \ i = #vowels, 1, -1 -- iterate from last to first \n    if string.sub(vowels,i)\
    \ ~= end then\n      return string.sub(vowels,i)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9jugj6a.lua:17: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local start = (word:len()+1)/2-1\n    local end   = (word:len()+1)/2\n  \
    \  return string.sub( word, start, end-start )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9uvir2hk.lua:17: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- initialize left and right side\n  local left = word:sub(1,-1)\n  local right\
    \ = word:sub(4,-4)\n  -- initialize vowel list\n  local vowels = { \"a\", \"e\"\
    , \"i\", \"o\", \"u\" }\n  -- initialize index\n  local index = 0\n  -- find closest\
    \ vowel from right side\n  for i = #vowels, 1, -1 do\n    if vowels[i] ~= left\
    \ then\n      index = i\n      break\n    end\n  end\n  return vowels[index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa65waxvk.lua:38:\
    \ expected: \"\"\nactual: \"u\"\nstack traceback:\n\t/tmp/tmpa65waxvk.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_before = {}\n\
    \    local vowels_after = {}\n    local last_vowel = nil\n    for i = #word, 1,\
    \ -1 do\n        local char = word[i]\n        if last_vowel and vowels[last_vowel]:find(char)\
    \ then\n            table.insert(vowels_before, last_vowel)\n            table.insert(vowels_after,\
    \ last_vowel)\n            last_vowel = nil\n        elseif char == 'a' or char\
    \ == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            last_vowel\
    \ = char\n        else\n            table.insert(vowels_before, char)\n      \
    \  end\n    end\n    for j = #vowels_before, 1, -1 do\n        local char = vowels_before[j]\n\
    \        local vowel = vowels[char]\n        local is_right_side = vowel:find('[aeiou]$')\
    \ > 0\n        if is_right_side then\n            table.insert(vowels_after, vowel)\n\
    \        end\n    end\n    return table.concat(vowels_after, '') \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5r8euu2.lua:46:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpm5r8euu2.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tfor i = #word, -1, -1 do\n\t\tlocal vowel = string.sub(word,\
    \ i, i)\n\t\tif vowel:sub(1,1) == 'a' or vowel:sub(1,1) == 'e' or vowel:sub(1,1)\
    \ == 'i' or vowel:sub(1,1) == 'o' or vowel:sub(1,1) == 'u' then\n\t\t\ttable.insert(vowels,\
    \ vowel)\n\t\tend\n\tend\n\tlocal closest_vowel = vowels[1]\n\tfor i = 2, #vowels\
    \ do\n\t\tif vowels[i] < closest_vowel then\n\t\t\tclosest_vowel = vowels[i]\n\
    \t\tend\n\tend\n\treturn closest_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma81bfc4.lua:35:\
    \ expected: \"u\"\nactual: \"o\"\nstack traceback:\n\t/tmp/tmpma81bfc4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n   if #word < 1 then\n\
    \      return ''\n   end\n   if word[#word] == \"y\" or word[#word] == \"u\" or\
    \ word[#word] == \"i\" or word[#word] == \"o\" then\n      word = word:gsub(\"\
    y\", \"\"):gsub(\"u\", \"\"):gsub(\"i\", \"\"):gsub(\"o\", \"\")\n   else\n  \
    \    word = word:gsub(\"u\", \"\"):gsub(\"i\", \"\"):gsub(\"o\", \"\")\n   end\n\
    \   local vowel_to_index = word:match '[aeiou]'\n   if #vowel_to_index == 0 then\n\
    \      return ''\n   elseif vowel_to_index < #vowels then\n      return vowels[vowel_to_index]\n\
    \   else\n      return word:sub(1, #word-1)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cteylj7.lua:26:\
    \ attempt to get length of a nil value (local 'vowel_to_index')\nstack traceback:\n\
    \t/tmp/tmp3cteylj7.lua:26: in local 'candidate'\n\t/tmp/tmp3cteylj7.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowel_found = false\n\t\
    local vowel_index = #vowels\n\tlocal word_len = #word\n\tlocal cur_word = \"\"\
    \n\tfor i = 1, word_len do\n\t\tcur_word = word:sub(i,i+1)\n\t\tif cur_word ==\
    \ 'a' then vowel_found = true; break; end\n\t\tif cur_word == 'e' then vowel_found\
    \ = true; break; end\n\t\tif cur_word == 'i' then vowel_found = true; break; end\n\
    \t\tif cur_word == 'o' then vowel_found = true; break; end\n\t\tif cur_word ==\
    \ 'u' then vowel_found = true; break; end\n\tend\n\tif vowel_found then\n\t\t\
    return vowels[vowel_index] .. \"_\" .. cur_word\n\telse\n\t\treturn ''\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbms5pmf.lua:39:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplbms5pmf.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z','a','e','i','o','u'\
    \ }\n\tlocal vowels_len = #vowels\n\tlocal vowels_index_start = vowels_len\n\t\
    local vowels_index_end = vowels_len - 1\n\tlocal vowels_index_counter = vowels_len\n\
    \tlocal vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl607vp6i.lua:41: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local i, j = 1, #word\n   while i <= j do\n      if word[i] == 'a' or word[i]\
    \ == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n        \
    \ return word[i]\n      end\n      i = i + 1\n      j = j - 1\n   end\n   return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecsd5b7x.lua:30:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpecsd5b7x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = 0\n    for\
    \ i,v in pairs(vowels) do\n        if string.find(word, v, 1, false) then\n  \
    \          vowels_count = vowels_count+1\n        end\n    end\n    local vowel_pos\
    \ = #word\n    local vowel_dist = -1\n    if vowel_count > 0 then\n        local\
    \ cons_count = 0\n        for i,v in pairs(vowels) do\n            if string.find(word,\
    \ v, 1, true) then\n                cons_count = cons_count+1\n            end\n\
    \        end\n        local cons_pos = 1\n        if cons_count > 0 then\n   \
    \         local last_cons = cons_pos\n            while cons_pos > 0 and cons_pos\
    \ < #word do\n                if string.find(word, vowels[cons_pos], 1, true)\
    \ then\n                    vowel_pos = cons_pos\n                    vowel_dist\
    \ = cons_pos-last_cons\n                    break\n                end\n     \
    \           cons_pos = cons_pos+1\n            end\n        end\n    end\n   \
    \ if vowel_dist == -1 then\n        return ''\n    end\n    local vowel_dist =\
    \ string.len(word)-vowel_dist\n    local vowel_pos_left = string.len(word)-vowel_dist+1\n\
    \    local vowel_pos_right = string.len(word)-vowel_dist+2\n    local vowel_pos_left\
    \ = string.len(word)-vowel_dist-1\n    local vowel_pos_right = string.len(word)-vowel_dist-2\n\
    \    if string.find(word, vowels[vowel_dist], 1, true) then\n        return string.sub(s,\
    \ vowel_pos_left, vowel_pos_right)\n    else\n        if string.find(word, vowels[vowel_dist],\
    \ 1, false) then\n            return string.sub(s, vowel_pos_left, vowel_pos_right)\n\
    \        else\n            if string.find(word, vowels[vowel_dist], 1, true) then\n\
    \                return string.sub(s, vowel_pos_left, vowel_pos_right)\n     \
    \       else\n                if string.find(word, vowels[vowel_dist], 1, false)\
    \ then\n                    return string.sub(s, vowel_pos_left, vowel_pos_right)\n\
    \                else\n                    if string.find(word, vowels[vowel_dist],\
    \ 1, true) then\n                        return string.sub(s, vowel_pos_left,\
    \ vowel_pos_right)\n                    else\n                        if string.find(word,\
    \ vowels[vowel_dist], 1, false) then\n                            return string.sub(s,\
    \ vowel_pos_left, vowel_pos_right)\n                        else\n           \
    \                 if string.find(word, vowels[vowel_dist], 1, true) then\n   \
    \                             return string.sub(s, vowel_pos_left, vowel_pos_right)\n\
    \                            else\n                                return ''\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp11qgfyc9.lua:75: ''end'' expected (to close ''if'' at line
    71) near ''lu''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal result = ''\n\tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal last_consonant\
    \ = ''\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptl_l31tt.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- Base case\n\tif word == nil then\n\t\treturn ''\n\tend\n\t-- For each vowel\
    \ in the word, add them to a new list if the vowel is\n\t-- not in the word or\
    \ remove it if the vowel is in the word. \n\tlocal vowels = {}\n\tfor i = 1, #word\
    \ do\n\t\tif string.sub(word,i,i) == 'a' then\n\t\t\ttable.insert(vowels, 'a')\n\
    \t\telseif string.sub(word,i,i) == 'e' then\n\t\t\ttable.insert(vowels, 'e')\n\
    \t\telseif string.sub(word,i,i) == 'i' then\n\t\t\ttable.insert(vowels, 'i')\n\
    \t\telseif string.sub(word,i,i) == 'o' then\n\t\t\ttable.insert(vowels, 'o')\n\
    \t\telseif string.sub(word,i,i) == 'u' then\n\t\t\ttable.insert(vowels, 'u')\n\
    \t\telse\n\t\t\ttable.remove(vowels, table.indexOf(vowels, string.sub(word,i,i)))\n\
    \t\tend\n\tend\n\t-- Now we check if the previous vowel is a consonant or not,\
    \ if it is \n\t-- not a consonant return an empty string\n\tlocal vowels_prev\
    \ = vowels\n\tfor _, v in pairs(vowels) do\n\t\tif string.sub(word,#word,#word)\
    \ == v then\n\t\t\treturn ''\n\t\tend\n\tend\n\t-- If there is no vowel in word,\
    \ then check if vowel in the previous\n\t-- word is a consonant. If not, return\
    \ an empty string\n\tfor _, v in pairs(vowels_prev) do\n\t\tif string.sub(word,#word,#word)\
    \ == v then\n\t\t\treturn ''\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t5a3s58.lua:35:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp8t5a3s58.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmp8t5a3s58.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowel_left = \"aeiouy\"\n  local vowel_right = \"AEIOUY\"\n  local vowel_index\
    \ = word:find(vowel_right)\n  if vowel_index then\n    local vowel_end = word:sub(vowel_index+1,\
    \ vowel_index+2)\n    local vowel_length = #vowel_left\n    if vowel_end then\n\
    \      vowel_index = vowel_index + vowel_length - 1\n      while vowel_index <\
    \ #word do\n        local left_vowel = word:sub(1, vowel_index)\n        if left_vowel\
    \ == vowel_left then\n          return left_vowel\n        end\n        vowel_index\
    \ = vowel_index - 1\n      end\n      return \"\"\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4j87yc6.lua:39:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpa4j87yc6.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = 0\n  \
    \  local vowels_index_count = 0\n    local consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}\n\
    \    local consonants_count = 0\n    local consonants_index_count = 0\n    local\
    \ next_consonant_index = 1\n    local next_vowel_index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ooj6k92.lua:43: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n   local\
    \ word_len = #word\n   local min_vowel_index = word_len - 2\n   \n   for i = 0,\
    \ word_len-1 do\n      if word[i] == word[i+1] and vowels[word[i]] == word[i]\
    \ then\n         if min_vowel_index == i then\n            -- Consecutive vowels\
    \ are found \n            -- We can go ahead and return\n            return word[i]\n\
    \         else\n            min_vowel_index = i\n         end\n      end\n   end\n\
    \   \n   -- No consecutive vowels found \n   return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5phgd2p.lua:39:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv5phgd2p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local pos = word:upper():find('[AEIOUyYbBdD]')\n   return pos and word:sub(1,pos-1)\
    \ -- return empty string if none found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcwo_446.lua:23:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgcwo_446.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   \n    -- first find right side consonants\n    local right_side_consonants\
    \ =\n        word:gsub('([^a-zA-Z]+)($)','%1'):gsub('([^a-zA-Z]+)($)','%2')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp47tt9kxj.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_l =\
    \ string.len(vowels)\n\tlocal vowels_r = string.len(string.sub(word,-1))\n\tlocal\
    \ vowels_ln = string.len(string.sub(word,1,-1))\n\tlocal vowels_r_ln = string.len(string.sub(word,-1,1))\n\
    \tlocal vowel_flags = {}\n\tlocal vowel_flag_index = {}\n\tlocal vowel_flag_index[ltob(vowels_l)]\
    \ = 0\n\tlocal vowel_flag_index[ltob(vowels_r)] = 0\n\tlocal consonant_flags =\
    \ {}\n\tlocal consonant_flag_index = {}\n\tlocal consonant_flag_index[ltob(vowels_ln)]\
    \ = 0\n\tlocal consonant_flag_index[ltob(vowels_r_ln)] = 0\n\tfor i=0,vowels_l-1\
    \ do\n\t\tlocal c = string.sub(word,i,i)\n\t\tif c == 'a' then\n\t\t\tconsonant_flag_index[ltob(vowels_ln)]\
    \ = i\n\t\telseif c == 'e' then\n\t\t\tconsonant_flag_index[ltob(vowels_r_ln)]\
    \ = i\n\t\telseif c == 'i' then\n\t\t\tvowel_flags[ltob(vowels_l)] = 1\n\t\telseif\
    \ c == 'o' then\n\t\t\tvowel_flags[ltob(vowels_r)] = 1\n\t\telseif c == 'u' then\n\
    \t\t\tvowel_flags[ltob(vowels_ln)] = 1\n\t\telseif c == 'A' then\n\t\t\tconsonant_flag_index[ltob(vowels_ln)]\
    \ = i\n\t\telseif c == 'E' then\n\t\t\tconsonant_flag_index[ltob(vowels_r_ln)]\
    \ = i\n\t\telseif c == 'I' then\n\t\t\tvowel_flags[ltob(vowels_l)] = 1\n\t\telseif\
    \ c == 'O' then\n\t\t\tvowel_flags[ltob(vowels_r)] = 1\n\t\telseif c == 'U' then\n\
    \t\t\tvowel_flags[ltob(vowels_ln)] = 1\n\t\tend\n\tend\n\tlocal result = string.sub(word,0,consonant_flag_index[ltob(vowels_r)]+1);\n\
    \tlocal vowel_flag_index = table.concat(vowel_flag_index,vowel_flags)\n\tfor i,v\
    \ in ipairs(vowel_flags) do\n\t\tif vowel_flag_index[i]~=nil then\n\t\t\tvowel_flag_index[i]\
    \ = nil\n\t\t\tresult = string.sub(word,0,i);\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoeg9h3ip.lua:23: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = ['a', 'e', 'i', 'o', 'u']\n  local vowels_count = #vowels\n\
    \  local vowel_meet_condition = false\n  local new_word = \"\"\n  for i = #word,\
    \ 2, -1 do\n    if vowels[i] ~= word[i]  or word[i] == \"\"  then -- if current\
    \ character is not consonant or is not vowel\n      if vowels[i] == word[i] then\n\
    \        if vowels[i] ~= word[i+vowels_count] then\n          if vowel_meet_condition\
    \ then -- check if current character is vowel and has previous vowel\n       \
    \     if vowels[i-1] == word[i-1] and vowels[i+1] == word[i+1] then\n        \
    \      -- print('vowel met the condition')\n              if word[i-1] == \"\"\
    \  then -- check if previous character is vowel\n                -- print('previous\
    \ character is vowel')\n                new_word = new_word .. vowels[i-1] \n\
    \                vowel_meet_condition = false\n              else\n          \
    \      -- print('previous character is not vowel')\n                vowel_meet_condition\
    \ = true\n              end\n            else\n              -- print('vowels\
    \ does not meet the condition')\n              new_word = new_word .. vowels[i-1]\
    \ \n              vowel_meet_condition = false\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  -- print(new_word)\n  return new_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1os0mdf3.lua:16: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {}\n   for i = 1, #word do\n      -- Skip the vowels in the\
    \ beginning and ending\n      if word:sub(i-1, i) == 'a' or word:sub(i-1, i) ==\
    \ 'e' or word:sub(i-1, i) == 'i' or word:sub(i-1, i) == 'o' or word:sub(i-1, i)\
    \ == 'u' then\n         -- Add all the vowels to the result if they meet the above\
    \ condition\n         if word:sub(i-1, i) == word:sub(i, i) then\n           \
    \ table.insert(vowels, word:sub(i-1, i));\n         end\n      end\n   end\n \
    \  -- Sort the vowels\n   table.sort(vowels, function(a, b) return a:upper() <\
    \ b:upper() end)\n   -- Return the first vowel met the condition\n   if #vowels\
    \ > 0 then\n      return vowels[1]\n   else\n      return ''\n   end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lesxlnh.lua:39:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8lesxlnh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = true,\n\t\t[\"o\"] = true,\n\t\t[\"i\"] = true,\n\
    \t\t[\"u\"] = true\n\t}\n\tfor i = #word, 2, -1 do\n\t\tlocal v = word:sub(i,\
    \ i)\n\t\tif vowels[v] and v ~= 'a' then\n\t\t\treturn v\n\t\tend\n\tend\n\treturn\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph30_fzjv.lua:38:\
    \ expected: \"\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmph30_fzjv.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = #vowels\n\
    \    local vowel_index = #vowels\n    local closest_vowel_start = #word\n    local\
    \ closest_vowel_end = #word\n    local vowel_start = #word\n    local vowel_end\
    \ = #word\n    local vowel_difference\n    local vowel_met_condition = false\n\
    \    local vowel_met_condition2 = false\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7mhwfh6f.lua:45: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {}\n   for _, letter in pairs(word) do\n      if letter:upper()\
    \ == 'A' or letter:upper() == 'E' or letter:upper() == 'I' or letter:upper() ==\
    \ 'O' or letter:upper() == 'U' then\n         table.insert(vowels, letter)\n \
    \     end\n   end\n   if #vowels == 0 then\n      return ''\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4znpgc62.lua:44: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal result = nil\n\tfor i = #word, 2, -1 do\n\t\tif string.sub(word, i, i)\
    \ == 'A' then\n\t\t\tif result ~= nil then\n\t\t\t\tresult = nil\n\t\t\tend\n\t\
    \t\tbreak\n\t\telseif string.sub(word, i, i) == 'O' then\n\t\t\tif result ~= nil\
    \ then\n\t\t\t\tresult = nil\n\t\t\tend\n\t\t\tbreak\n\t\telseif string.sub(word,\
    \ i, i) == 'E' then\n\t\t\tif result ~= nil then\n\t\t\t\tresult = nil\n\t\t\t\
    end\n\t\t\tbreak\n\t\telseif string.sub(word, i, i) == 'U' then\n\t\t\tif result\
    \ ~= nil then\n\t\t\t\tresult = nil\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphl2wiaac.lua:46:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmphl2wiaac.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tif word == nil then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl0jgjh0b.lua:38: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = word:sub(1, 1)\n  local vowels_index = #vowels\n  local vowel_index\n\
    \  \n  -- loop from right side of the word\n  for vowel_index = #word:len() -\
    \ 1 , -1 , -1 do\n    local consonant_index = #word:sub(1, vowel_index):len()\n\
    \    if vowels:sub(1, vowel_index) == word:sub(consonant_index, consonant_index\
    \ + 1) then\n      return word:sub(consonant_index, consonant_index + 1)\n   \
    \ end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzvsrpwkf.lua:46: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local n = #word\n  local vowel = 0\n\
    \  \n  for i=1,n do\n    if word[i]~=nil and word[i] in vowels then\n      vowel\
    \ = word[i]\n    end\n  end\n  \n  if vowel~=0 then\n    local consonants = {}\n\
    \    for i=n-2,1,-1 do\n      if word[i]~=nil then\n        if word[i] in consonants\
    \ then\n          consonants[word[i]] = consonants[word[i]]+1\n        else\n\
    \          consonants[word[i]] = 1\n        end\n      end\n    end\n    \n  \
    \  -- sort consonants and choose the one which has the highest value\n    table.sort(consonants,\
    \ function(a,b) return consonants[a]<consonants[b] end)\n    \n    -- get closest\
    \ vowel by comparing the consonant count\n    local max = 0\n    local maxc =\
    \ \"\"\n    for k,v in pairs(consonants) do\n      if v>max then\n        max\
    \ = v\n        maxc = k\n      end\n    end\n    \n    -- get index of the vowel\
    \ and get the closest consonant \n    -- by comparing the consonant count\n  \
    \  local i = 0\n    for k,v in pairs(consonants) do\n      if k==maxc then\n \
    \       i = i-1\n        break\n      end\n    end\n    \n    return word[i]\n\
    \  end\n  \n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv4m39ut4.lua:21: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowel_index = 1\n  local\
    \ vowel_found = false\n  local new_word = \"\"\n  local i = #word\n  while i <=\
    \ 1 do\n    local c = string.sub(word,i,i)\n    if vowel_index == #vowels then\n\
    \      return \"\"\n    end\n    for j = 1, #vowel do\n      local current_vowel\
    \ = vowels[j]\n      local vowel_length = string.len(current_vowel)\n      if\
    \ string.len(c) >= vowel_length then\n        if c:sub(1,vowel_length) == current_vowel\
    \ then\n          vowel_found = true\n        end\n      else\n        if c:sub(1,vowel_length)\
    \ == current_vowel then\n          vowel_found = true\n          vowel_index =\
    \ j\n        end\n      end\n    end\n    if not vowel_found then\n      new_word\
    \ = new_word .. c\n      i = i - 1\n    end\n  end\n  return new_word\nend\nprint(get_closest_vowel(ARGV[1]))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpi7ytc9e8.lua:47: attempt to index a nil value (global 'ARGV')\n\
    stack traceback:\n\t/tmp/tmpi7ytc9e8.lua:47: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- The dictionary is sorted from lowest to highest length. The first element\
    \ \n  -- will be the empty string.\n  local dict = { \"B\", \"C\", \"D\", \"F\"\
    , \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\",\n                 \"\
    Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\" }\n  \n  -- The dictionary\
    \ is sorted from lowest to highest length. The first element \n  -- will be the\
    \ empty string.\n  local dict = { \"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"\
    J\", \"K\", \"L\", \"M\", \"N\", \"P\",\n                 \"Q\", \"R\", \"S\"\
    , \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\" }\n  \n  -- Return the first vowel\
    \ that stands between two consonants from the right\n  -- side of the word (case\
    \ sensitive).\n  for i = #word - 1, 1, -1 do\n    local pos = i\n    if string.sub(word,\
    \ pos, pos+1) ~= 'C' and string.sub(word, pos, pos+1) ~= 'D' then\n      break\n\
    \    end\n  end\n  if pos <= 1 then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxq4doksg.lua:56: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: -1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ index = #vowels\n    local i = 1\n    while i < #word do\n        local c =\
    \ word[i]\n        local next_c = word[i + index + 1]\n        if vowels[c] ==\
    \ next_c then\n            index = i\n        else\n            i = i + index\
    \ + 1\n        end\n    end\n    return word[index + 1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t'a','e','i','o','u','y','a'\n\t}\n\tlocal vowel_index\
    \ = 0\n\tlocal last_vowel_index = 0\n\tlocal last_vowel_offset = 0\n\tlocal vowel_offset\
    \ = -1\n\tlocal found_vowel = false\n\t\n\tfor i, v in pairs(vowels) do\n\t\t\
    local offset = string.reverse(word):find(v)\n\t\tif offset ~= nil then\n\t\t\t\
    if offset <= last_vowel_offset then\n\t\t\t\tlast_vowel_index = i\n\t\t\t\tlast_vowel_offset\
    \ = offset\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif last_vowel_index\
    \ ~= nil then\n\t\tvowel_index = last_vowel_index\n\t\tvowel_offset = last_vowel_offset\n\
    \t\tfound_vowel = true\n\tend\n\t\n\tlocal consonants = {\n\t\t'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x'\n\
    \t}\n\tlocal vowel_index = #vowels\n\t\n\tif word:sub(1,1) == 'a' then\n\t\tvowel_index\
    \ = #vowels\n\telseif word:sub(1,1) == 'i' then\n\t\tvowel_index = #vowels\n\t\
    elseif word:sub(1,1) == 'o' then\n\t\tvowel_index = #vowels\n\telseif word:sub(1,1)\
    \ == 'u' then\n\t\tvowel_index = #vowels\n\tend\n\t\n\tlocal consonant_offset\
    \ = nil\n\t\n\tfor i, c in pairs(consonants) do\n\t\tlocal offset = word:find(c)\n\
    \t\tif offset ~= nil then\n\t\t\tif offset > consonant_offset then\n\t\t\t\tconsonant_offset\
    \ = offset\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif consonant_offset ~= nil then\n\
    \t\tif found_vowel then\n\t\t\tvowel_index = vowel_index - 1\n\t\t\tvowel_offset\
    \ = consonant_offset\n\t\telse\n\t\t\tvowel_index = vowel_index + 1\n\t\t\tvowel_offset\
    \ = consonant_offset\n\t\tend\n\tend\n\t\n\tif vowel_offset ~= nil then\n\t\t\
    return word:sub(vowel_offset+1, string.reverse(word):find(vowels[vowel_index]))\n\
    \tend\n\t\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwmhh80qm.lua:63:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwmhh80qm.lua:63:\
    \ in local 'candidate'\n\t/tmp/tmpwmhh80qm.lua:89: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  -- The first character is always consonant.\n  local consonants = string.gsub(word,\
    \ \"[^a-z]\", \"\")\n  if #consonants == 0 then\n    return \"\"\n  end\n  --\
    \ The last character is always vowel.\n  local vowels = string.gsub(word, \"[^A-Z]\"\
    , \"\")\n  if #vowels == 0 then\n    return \"\"\n  end\n  -- Consonant is always\
    \ greater than vowel.\n  local consonant_to_vowel_dist = table.Hash(consonants)\n\
    \  for i = #vowels, 2, -1 do\n    table.insert(consonant_to_vowel_dist, vowels[i])\n\
    \  end\n  local vowel_to_consonant_dist = table.Hash(vowels)\n  for i = #consonants,\
    \ 2, -1 do\n    table.insert(vowel_to_consonant_dist, consonants[i])\n  end\n\
    \  local vowel_consonant_to_vowel_dist = table.Hash(vowels)\n  for i = #consonants,\
    \ 2, -1 do\n    table.insert(vowel_consonant_to_vowel_dist, consonants[i])\n \
    \ end\n  for i = #consonants, 1, -1 do\n    -- Find closest consonant.\n    --\
    \ If distance is larger than 2, it means that consonant is between 2 vowels.\n\
    \    local dist, closest_consonant = table.min(\n      table.sort(consonant_to_vowel_dist))\n\
    \    -- Find closest vowel.\n    -- If distance is larger than 2, it means that\
    \ vowel is between 2 consonants.\n    local dist, closest_vowel = table.min(\n\
    \      table.sort(vowel_to_consonant_dist))\n    -- The vowel must meet the conditions.\n\
    \    if dist > 2 then\n      return closest_vowel\n    end\n    -- The consonant\
    \ must meet the conditions.\n    if dist > 2 then\n      return closest_consonant\n\
    \    end\n  end\n  -- No vowel met the conditions.\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzy4fdq1.lua:64:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptzy4fdq1.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal index = 1\n\tlocal flag =\
    \ false\n\tfor i = 1, #word-1 do\n\t\tif word:sub(i,i) == ('a'..'i'):sub(1,1)\
    \ then\n\t\t\tindex = i\n\t\t\tflag = true\n\t\tend\n\tend\n\tif flag == false\
    \ then\n\t\treturn \"\"\n\tend\n\tlocal vowel = word:sub(index-1, index+2)\n\t\
    local index2 = 1\n\tfor i = index, #word-1 do\n\t\tif word:sub(i,i) == ('a'..'i'):sub(1,1)\
    \ then\n\t\t\tindex2 = i\n\t\tend\n\tend\n\t\n\tif vowel:sub(1,1) ~= vowel:sub(index2,\
    \ index2+2) then\n\t\treturn get_closest_vowel(word)\n\tend\n\t\n\treturn vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yrkpofl.lua:46:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6yrkpofl.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \   -- Get first consonant\n   local c = word:sub(1, 1)\n   -- Get the vowel count\n\
    \   local vowel_count = word:len()\n   -- Loop through vowel\n   for i = 1, vowel_count\
    \ do\n      -- If current character is consonant\n      if string.sub(s, i, i)\
    \ ~= c  then\n         return '' \n      end\n   end\n   return ''\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jjzkkox.lua:23:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp_jjzkkox.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp_jjzkkox.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = 'aeiou'\n\tlocal vowel_left = string.lower(word:sub(1, 1))\n\t\
    local vowel_right = string.lower(word:sub(1, word:len()))\n\tlocal idx = string.find(vowels,\
    \ vowel_right, 1, 'b')\n\tif idx then\n\t\tidx = idx + 1\n\telse\n\t\tidx = string.find(vowels,\
    \ vowel_right, 1, 'a')\n\tend\n\tlocal vowel_met_left = string.sub(vowels, idx,\
    \ idx+1)\n\tlocal vowel_met_right = string.sub(vowels, idx+1, idx+2)\n\tif string.find(vowels,\
    \ vowel_left, 1, 'b') ~= nil then\n\t\tif string.find(vowels, vowel_left, 1, 'a')\
    \ ~= nil then\n\t\t\tif vowel_met_left == vowel_met_right then\n\t\t\t\treturn\
    \ vowel_left\n\t\t\tend\n\t\tend\n\tend\n\treturn ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkth27hsa.lua:25:\
    \ attempt to perform arithmetic on a nil value (local 'idx')\nstack traceback:\n\
    \t/tmp/tmpkth27hsa.lua:25: in local 'candidate'\n\t/tmp/tmpkth27hsa.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = 'aeiou'\n    local vowel_index = 1\n    for i = #word - 1,\
    \ 1, -1 do\n        if string.sub(word, i, i+1) in vowels then\n            return\
    \ string.sub(word, i, i+1)\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8lvkllum.lua:19: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1660008706
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_len = #vowels\n  \
    \  local vowels_table = {}\n    for i=1,vowels_len do\n        table.insert(vowels_table,\
    \ vowels[i])\n    end\n    local consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}\n\
    \    local consonants_len = #consonants\n    local consonants_table = {}\n   \
    \ for i=1,consonants_len do\n        table.insert(consonants_table, consonants[i])\n\
    \    end\n    local vowels_consonants_len = vowels_len*consonants_len\n    local\
    \ vowels_consonants_table = {}\n    for i=1,vowels_consonants_len do\n       \
    \ table.insert(vowels_consonants_table, vowels[i])\n        table.insert(vowels_consonants_table,\
    \ consonants[i])\n    end\n    local word = word:lower()\n    local vowels_consonants_len\
    \ = #vowels_consonants_table\n    local vowels_consonants_table = {}\n    local\
    \ vowels_len = #vowels\n    local consonants_len = #consonants\n    local consonants_table\
    \ = {}\n    local last_consonant = consonants_len - 1\n    for i=1,#word do\n\
    \        local letter = word:sub(i,i)\n        if letter ~= ' ' then\n       \
    \     local consonants = letter:gsub(\"%l\",'#')\n            local consonant_len\
    \ = len(consonants)\n            if consonant_len > last_consonant then\n    \
    \            last_consonant = consonant_len - 1\n            end\n           \
    \ for j=1,consonant_len do\n                table.insert(consonants_table, consonants[j])\n\
    \            end\n        end\n    end\n    local vowels_consonants_len = #vowels_consonants_table\n\
    \    local vowels_consonants_table = {}\n    local vowels_len = #vowels\n    local\
    \ consonants_len = #consonants\n    local consonants_table = {}\n    local last_consonant\
    \ = consonants_len - 1\n    for i=1,#word do\n        local letter = word:sub(i,i)\n\
    \        if letter ~= ' ' then\n            local consonants = letter\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7l7mk36p.lua:83: ''end'' expected (to close ''if'' at line
    62) near <eof>

    '
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local index = 0\n  local vowel = nil\n  local vowel_index = 0\n  local consonants\
    \ = string.gsub(word, \"[^%s]\", \"\")\n  local vowel_chars = string.gsub(string.reverse(consonants),\
    \ \"[%s]\", \"\")\n  local is_first = false\n  local is_last = false\n  local\
    \ consonant_index = 1\n  local vowel_position = 0\n  for i = 1, #consonants do\n\
    \    if is_first == true then\n      if vowel_chars[consonant_index] ~= 'u' and\
    \ vowel_chars[consonant_index] ~= 'i' and vowel_chars[consonant_index] ~= 'a'\
    \ then\n        vowel = vowel_chars[consonant_index]\n      else\n        vowel\
    \ = string.sub(vowel_chars, consonant_index, consonant_index)\n        break\n\
    \      end\n    else\n      if vowel_chars[consonant_index] ~= 'u' and vowel_chars[consonant_index]\
    \ ~= 'i' and vowel_chars[consonant_index] ~= 'a' then\n        vowel = string.sub(vowel_chars,\
    \ consonant_index, consonant_index)\n      else\n        if is_last == true then\n\
    \          vowel = vowel_chars[consonant_index-1]\n        else\n          vowel\
    \ = string.sub(vowel_chars, consonant_index-1, consonant_index-1)\n          break\n\
    \        end\n      end\n    end\n    consonant_index = consonant_index + 1\n\
    \  end\n  return vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_wgur58.lua:53:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu_wgur58.lua:53: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i = 1, #word do\n        local letter = string.sub(word,\
    \ i - 1, 1)\n        if letter ~= \"\" then\n            vowels[letter] = true\n\
    \        end\n    end\n    for i = 1, #word do\n        if string.sub(word, i\
    \ - 1, 1) ~= \"\" then\n            local letter = string.sub(word, i - 1, 1)\n\
    \            if vowels[letter] == true then\n                return letter\n \
    \           end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmnswb_y.lua:37:\
    \ expected: \"u\"\nactual: \"y\"\nstack traceback:\n\t/tmp/tmpjmnswb_y.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}\n\
    \tlocal vowel_stack = {}\n\tlocal consonant_stack = {}\n\tlocal vowel_char\n\t\
    local consonant_char\n\tlocal vowel_stack_size = #vowels\n\tlocal consonant_stack_size\
    \ = #consonants\n\tfor char in word:gmatch(\"[\" .. consonants .. \"]\") do\n\t\
    \tconsonant_char = char\n\tend\n\tfor char in word:gmatch(\"[\" .. vowels .. \"\
    ]\") do\n\t\tvowel_char = char\n\tend\n\twhile consonant_stack_index < consonant_stack_size\
    \ do\n\t\tconsonant_char = consonant_stack[consonant_stack_index] \n\t\tif consonant_char\
    \ == vowel_char then\n\t\t\tvowel_stack[vowel_stack_index] = consonant_char\n\t\
    \t\tconsonant_stack_index += 1\n\t\telseif consonant_char ~= vowel_char then\n\
    \t\t\tif vowel_stack_index < vowel_stack_size then\n\t\t\t\tconsonant_stack[consonant_stack_index]\
    \ = consonant_char\n\t\t\t\tconsonant_stack_index += 1\n\t\t\telse\n\t\t\t\tconsonant_stack[consonant_stack_size]\
    \ = consonant_char\n\t\t\t\tconsonant_stack_size = consonant_stack_size + 1\n\t\
    \t\tend\n\t\tend\n\tend\n\tif consonant_stack_index < consonant_stack_size then\n\
    \t\tconsonant_stack[consonant_stack_size] = consonant_char\n\t\tconsonant_stack_size\
    \ = consonant_stack_size + 1\n\tend\n\tlocal result = \"\"\n\tif vowel_stack_index\
    \ == 0 then\n\t\treturn \"\"\n\tend\n\tif vowel_stack_index == vowel_stack_size\
    \ - 1 then\n\t\tresult = vowel_stack[1]\n\telse\n\t\tlocal vowel = vowel_stack[vowel_stack_index]\n\
    \t\tfor i = vowel_stack_index + 1, vowel_stack_size - 1 do\n\t\t\tif vowel_stack[i]\
    \ ~= vowel then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tresult = vowel_stack[i]\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcx83q_ez.lua:34: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \t-- If the string is empty, return empty string.\n\tif word:len() == 0 then\n\
    \t\treturn ''\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmgs5f7d5.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local letters = string.lower(word)\n\
    \    local vowel_left = false\n    local vowel_right = false\n    for i = 1, #letters\
    \ do\n        if letters[i] == 'a' then\n            vowel_left = true\n     \
    \   elseif letters[i] == 'e' then\n            vowel_right = true\n        else\n\
    \            if vowel_left and vowel_right then\n                return letters[i]\n\
    \            elseif vowel_left then\n                vowel_left = false\n    \
    \        elseif vowel_right then\n                vowel_right = false\n      \
    \      end\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltlcvj9w.lua:41:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpltlcvj9w.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    return string.sub(word, 1, string.len(word) - 1) \n    or string.sub(word,\
    \ 1, string.len(word) - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjnxqlve.lua:23:\
    \ expected: \"u\"\nactual: \"yogur\"\nstack traceback:\n\t/tmp/tmpjjnxqlve.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_letters = {}\n  for\
    \ i = #word, 2, -1 do\n    local letter = word:sub(i,i)\n    local next_letter\
    \ = word:sub(i+1,i+1)\n    last_letters[letter] = true\n    last_letters[next_letter]\
    \ = true\n  end\n  local letter, distance = {}, {}\n  for _, letter in pairs(last_letters)\
    \ do\n    distance[letter] = #distance\n  end\n  local vowel_count = #vowels\n\
    \  local closest_vowel, closest_distance = vowels[1], 0\n  for i = 2, #vowels\
    \ do\n    if distance[vowels[i]] > closest_distance then\n      closest_distance\
    \ = distance[vowels[i]]\n      closest_vowel = vowels[i]\n    end\n  end\n  return\
    \ closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6mdty8q.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_6mdty8q.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp_6mdty8q.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008707
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  table.insert(vowels, 'a')\n  table.insert(vowels, 'e')\n\
    \  table.insert(vowels, 'i')\n  table.insert(vowels, 'o')\n  table.insert(vowels,\
    \ 'u')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppqo7gx0f.lua:41: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660008707
