name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
  -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
  -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   for _, char in gmatch(brackets, \"([^(]*)%(%((%([^)%]%*)%))+\")\
    \ do\n      local found = false\n      for _, char in gmatch(brackets, char) do\n\
    \         if char == \")\" then\n            found = true\n         end\n    \
    \  end\n      if not found then return false end\n   end\n   return true\nend",
  "  return brackets:match('%[(%a)]*$')\nend", "    local opening = brackets:sub(1,1)\n\
    \    local closing = brackets:sub(2)\n    return (opening ~= '(' and opening ~=\
    \ ')') and\n           (closing ~= '(' and closing ~= ')')\nend", "   return brackets\
    \ == '()' or brackets == '[]' or brackets == '{}'\nend", "  local opening = brackets:match'[()]'\n\
    \  local closing = brackets:match'[)]'\n  return (not opening:isnil() and closing:isnil())\n\
    end", "  brackets = brackets:gsub('()', '')\n  brackets = brackets:gsub('[]',\
    \ '()')\n  return brackets ~= brackets\nend", "  return string.find(brackets,\
    \ '(', 1) == 0 and string.find(brackets, ')', -1) == 0 and\n    (string.len(brackets)\
    \ - string.len(string.sub(brackets, 1, -1))) / 2 >= 1\nend", "   for _,b in ipairs(brackets)\
    \ do\n      if b == '(' and not (brackets[_+1] == '(' and brackets[_+2] == ')')\
    \ then\n         return false\n      end\n   end\n   return true\nend", "   if\
    \ brackets == nil then return nil end\n   brackets = brackets:gsub('%[(%[%)]%[%)]','')\n\
    \   if brackets:len() == 0\n   or brackets:sub(1, 1) == '('\n   or brackets:sub(brackets:len()-1,\
    \ 1) == ')' then return true end\n   return false\nend", "  local open_brackets\
    \ = {}\n  for i = 1, #brackets do\n    if brackets[i + 1] ~= '(' and not brackets[i\
    \ + 1] ~= ')' then\n      return false\n    end\n    if open_brackets[brackets[i\
    \ + 1]] then\n      return false\n    end\n    open_brackets[brackets[i + 1]]\
    \ = true\n  end\n  return true\nend", "  local opening = 1\n  for i = 1, #brackets\
    \ do\n    if brackets[i] ~= '(' then\n      opening = opening+1\n    end\n   \
    \ if brackets[i] == '(' and opening ~= 1 then\n      opening = opening+1\n   \
    \ end\n    if brackets[i] == ')' and opening ~= 1 then\n      opening = opening-1\n\
    \    end\n    if opening <= 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  for _, b in pairs(brackets) do\n    for _, _ in pairs(brackets)\
    \ do\n      if b == pairs(brackets)[_] then return false end\n    end\n  end\n\
    \  return true\nend", "  local opening = brackets:sub(1,1)\n  for i = 2, #brackets\
    \ do\n    if brackets[i] == opening then\n      return false\n    end\n  end\n\
    \  return true\nend", "   brackets = string.gsub(brackets, \"{\", \")\")\n   brackets\
    \ = string.gsub(brackets, \"[\", \"]\")\n   brackets = string.gsub(brackets, \"\
    ]\", \"]\")\n   brackets = string.gsub(brackets, \"(\", \"[\")\n   brackets =\
    \ string.gsub(brackets, \")\", \"]\")\n   brackets = string.gsub(brackets, \"\
    [(\", \"(\")\n   brackets = string.gsub(brackets, \")(\", \")[\")\n   return brackets\
    \ ~= brackets\nend", "  local opening = 1\n  local closing = 0\n  for i = 1, #brackets\
    \ do\n    if brackets[i] == \"(\" then\n      opening = opening + 1\n    elseif\
    \ brackets[i] == \")\" then\n      closing = closing + 1\n    elseif opening >\
    \ closing then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ open_brackets = brackets:gsub('[(.)]', '')\n  local close_brackets = open_brackets:gsub('%w+',\
    \ ' '):gsub(')%w+', ' '):gsub(')%w+', ' '):gsub(')%w+', ' '):gsub(')%w+', '')\n\
    \  local open_brackets = open_brackets:gsub(')%w+', '')\n  local open_brackets\
    \ = open_brackets:gsub(')%w+', '')\n  local close_brackets = close_brackets:gsub('%w+',\
    \ ' '):gsub(')%w+', ' '):gsub(')%w+', ' '):gsub(')%w+', ' ')\n  return open_brackets\
    \ == close_brackets\nend", "    if brackets ~= brackets then brackets = brackets:gsub('()',\
    \ '') end\n    if brackets ~= '()' then return false end\n    for i = 1, #brackets\
    \ do\n        local b = brackets[i]\n        for j = 1, #brackets do\n       \
    \     local e = brackets[j]\n            if j > i and not b == e then return false\
    \ end\n        end\n    end\n    return true\nend", "  for _, bracket in pairs(brackets)\
    \ do\n    if bracket:sub(1,1) == '(' then\n      if not bracket:sub(1,2) == '()'\
    \ then return false end\n    elseif bracket:sub(1,1) == '[' then\n      if not\
    \ bracket:sub(1,2) == ']' then return false end\n    elseif bracket:sub(1,1) ==\
    \ '{' then\n      if not bracket:sub(1,2) == '}' then return false end\n    elseif\
    \ bracket:sub(1,1) == ']' then\n      if not bracket:sub(2,1) == ')' then return\
    \ false end\n    elseif bracket:sub(1,1) == '}' then\n      if not bracket:sub(2,1)\
    \ == '(' then return false end\n    elseif bracket:sub(1,1) == '(' then\n    \
    \  if not bracket:sub(2,2) == ')' then return false end\n    end\n  end\n  return\
    \ true\nend", "  brackets = brackets .. \")\"\n  local opening = brackets:sub(1,1)\n\
    \  local closing = brackets:sub(2):reverse()\n  for i = 1, #opening do\n    if\
    \ not closing[i] then\n      return false\n    end\n  end\n  return true\nend",
  "  local opening = false\n  for c in brackets do\n    if c == '(' then\n      if\
    \ opening then\n        return false\n      end\n      opening = true\n    elseif\
    \ c == ')' then\n      if opening then\n        if opening then\n          opening\
    \ = false\n        else\n          return false\n        end\n      else\n   \
    \     return false\n      end\n    end\n  end\n  return true\nend", "  local stack\
    \ = {}\n  local open_brackets = false\n  local closed_brackets = false\n  for\
    \ c in brackets:gmatch('([()]+)'..c) do\n    if c == '(' and open_brackets ==\
    \ false then\n      table.insert(stack, c)\n      open_brackets = true\n    elseif\
    \ c == '[' and open_brackets then\n      table.insert(stack, c)\n    elseif c\
    \ == ')' and open_brackets then\n      closed_brackets = true\n    elseif c ==\
    \ ']' and closed_brackets then\n      closed_brackets = false\n    else\n    \
    \  local new_stack = {}\n      for v in stack:reverse do\n        if v ~= c then\n\
    \          table.insert(new_stack, v)\n        end\n      end\n      stack = new_stack\n\
    \    end\n  end\n  if #stack > 0 then\n    return false\n  end\n  return true\n\
    end", "    brackets = brackets:gsub('[^()]+', '()')\n    return brackets:sub(1,\
    \ #brackets) == '()'\nend", "  local n = 0\n  for _, b in ipairs(brackets) do\n\
    \    local l_b = string.len(b)\n    local opening = 0\n    for _, _ in ipairs(brackets)\
    \ do\n      local l_b2 = string.len(b)\n      if string.sub(b, 1, opening) ~=\
    \ b then\n        opening = opening + l_b2 - l_b\n        break\n      else\n\
    \        opening = opening + l_b2\n      end\n    end\n    local closing = 0\n\
    \    for _, _ in ipairs(brackets) do\n      local l_b2 = string.len(b)\n     \
    \ if string.sub(b, opening, opening + l_b) ~= b then\n        closing = closing\
    \ + l_b2 - l_b\n        break\n      else\n        closing = closing + l_b2\n\
    \      end\n    end\n    if opening ~= closing then\n      return false\n    end\n\
    \    n = n + 1\n  end\n  return n == #brackets\nend", "  local stack = {}\n  for\
    \ i = 1, #brackets do\n    local bracket = brackets[i]\n    if bracket == \"(\"\
    \ then\n      table.insert(stack, \"(\")\n    elseif bracket == \")\" then\n \
    \     local removed = table.remove(stack)\n      if removed == \"\" then\n   \
    \     return false\n      else\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  local stack = {}\n  local open_bracket, close_bracket\
    \ = unpack(brackets)\n  for i = 1, #open_bracket do\n    stack[#stack + 1] = open_bracket[i]\n\
    \  end\n  for i = 1, #close_bracket do\n    if stack[#stack] == close_bracket[i]\
    \ then\n      stack[#stack] = nil\n    else\n      return false\n    end\n  end\n\
    \  return #stack == 0\nend", "  local opening = brackets:sub(1,1)\n  local closing\
    \ = brackets:sub(2,2)\n  return opening and opening:find(closing) == 0 and opening:len()\
    \ == closing.len() - 1\nend", "  brackets = brackets .. ''\n  return brackets\
    \ == '()' or brackets == '[]' or brackets == '{}'\nend", "  local opening = 0\n\
    \  local closing = 0\n  local brackets = brackets:gsub('%[(%)][(%)]', function(c)\n\
    \    opening = opening + 1\n    closing = closing + 1\n    if opening>closing\
    \ then return c end\n    closing = opening - 1\n    opening = opening + 1\n  \
    \  return c\n  end)\n  return opening == 1 and closing > 0\nend", "   brackets\
    \ = brackets:gsub('()', ' *** ') -- Replace opening brackets with spaces and asterisks\
    \ so that they match balanced brackets later on.\n   local openings = brackets:gsub('(',\
    \ ' *** ') -- Make opening brackets match balanced brackets so they are properly\
    \ closed later.\n   local closings = brackets:gsub(')', ' *** ') -- Make closing\
    \ brackets match balanced brackets so they are properly opened later.\n   return\
    \ openings:sub(2, -2) = closings:sub(3, -3)\nend", "  brackets = brackets:gsub('\\\
    ([^)]*\\)', '') -- replace all unmatched inner brackets with empty string\n  brackets\
    \ = brackets:gsub('\\(.*\\)$', '') -- remove all unmatched outer brackets\n  brackets\
    \ = brackets:gsub('[^(]*$', '') -- remove any unmatched brackets\n  return brackets:match'[^(]'\
    \ ~= nil -- true if brackets has any unmatched brackets\nend", "  return string.sub(brackets,\
    \ 1, string.len(brackets) - 1) == \")\"\nend", "  -- If the brackets are of length\
    \ 1, then the brackets are balanced.\n  if #brackets == 1 then return brackets\
    \ == brackets[1] end", "  local brackets = brackets or ''\n  for i = 1, #brackets\
    \ do\n    if brackets[i] == '(' then\n      local open = brackets[i + 1] or '('\n\
    \      local close = brackets[i + 2] or ')'\n      -- only check for unbalanced\
    \ parens when we're not at a terminator\n      -- or a terminator is encountered\
    \ when we're at a terminator\n      local terminator = i ~= #brackets and brackets[i\
    \ + 1] or ''\n      if open ~= close then\n        return false\n      else\n\
    \        -- a terminator means the brackets are balanced\n        return terminator\n\
    \      end\n    end\n  end\n  return true\nend", "  -- The brackets string contains\
    \ all \"(\" and \")\" characters.\n  -- The brackets string is NOT NULL-terminated\
    \ (Python strings cannot be NULL-terminated).\n  -- The brackets string is NOT\
    \ empty.\n  -- The brackets string consists only of \"(\" and \")\".\n  -- The\
    \ brackets string may be shorter than the number of \"(\" and \")\" in the source\
    \ string.\n  -- If the brackets string is empty or too short to contain all \"\
    (\" and \")\" characters,\n  -- the function returns false. If it is NOT empty\
    \ but the source string is empty, the function returns true.\n  -- If the brackets\
    \ string is empty or too long to contain all \"(\" and \")\" characters,\n  --\
    \ the function returns false. If it is NOT empty but the source string is empty,\
    \ the function returns true.\n  -- If the brackets string is empty, the function\
    \ returns true.\n  -- If the brackets string contains at least 2 \"(\" characters\
    \ and at least 2 \")\" characters,\n  -- the function returns true. If it has\
    \ fewer \")\" characters than the source string,\n  -- the function returns true.\
    \ If it has fewer \"(\" characters than the source string,\n  -- the function\
    \ returns false.\n  -- If the brackets string contains at least 3 \"(\" characters\
    \ and at least 3 \")\" characters,\n  -- the function returns true. If it has\
    \ fewer \")\" characters than the source string,\n  -- the function returns true.\
    \ If it has fewer \"(\" characters than the source string,\n  -- the function\
    \ returns false.\n  -- If the brackets string contains at least 4 \"(\" characters\
    \ and at least 4 \")\" characters,\n  -- the function returns true. If it has\
    \ fewer \")\" characters than the source string,\n  -- the function returns true.\
    \ If it has fewer \"(\" characters than the source string,\n  -- the function\
    \ returns false.\n  if brackets == nil then\n    return true\n  end\n  local brackets_size\
    \ = #brackets\n  if brackets_size == 0 then\n    return true\n  elseif brackets_size\
    \ == 1 then\n    return false\n  end\n  local opening_brackets = false\n  local\
    \ closing_brackets = false\n  for i = 1, brackets_size do\n    if brackets[i]\
    \ ~= '(' or brackets[i] == '(' or brackets[i] == '(' then\n      opening_brackets\
    \ = true\n    elseif brackets[i] == ')' or brackets[i] == ')' or brackets[i] ==\
    \ ')' then\n      closing_brackets = true\n    end\n  end\n  return opening_brackets\
    \ and closing_brackets\nend", "  for i = 1, #brackets do\n    if brackets[i] ~=\
    \ '(' or brackets[i] ~= ')' then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  brackets = brackets:gsub('[]{}()', '\\0')\n  local bracketsMap\
    \ = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']',\n  }\n  local openingBrackets\
    \ = ''\n  local closeBrackets = ''\n  for i = 1, #brackets do\n    if openingBrackets\
    \ ~= brackets[i] then\n      closeBrackets = closeBrackets .. bracketsMap[brackets[i]]\n\
    \    else\n      openingBrackets = openingBrackets .. brackets[i]\n    end\n \
    \ end\n  return openingBrackets = openingBrackets:sub(1, #openingBrackets) and\
    \ closeBrackets = closeBrackets:sub(1, #closeBrackets)\nend", "   for idx = 1,\
    \ #brackets do\n      if brackets[idx] ~= '(' and brackets[idx] ~= ')' then\n\
    \         return false\n      end\n   end\n   return true\nend", "    local stack\
    \ = brackets:gsub('%([()]+)(%([()]+)%)', '\\2\\4')\n    local brackets = brackets:gsub('%([()]+)%',\
    \ '[%1]')\n    return brackets == stack\nend", "  local openingBrackets = {}\n\
    \  local closingBrackets = {}\n  for bracket, pos in pairs(brackets) do\n    if\
    \ openingBrackets[bracket] == nil then\n      openingBrackets[bracket] = pos\n\
    \    else\n      -- closing bracket already exists.\n      if openingBrackets[bracket]\
    \ > pos then\n        return false\n      else\n        closingBrackets[bracket]\
    \ = pos\n      end\n    end\n  end", "  return brackets:sub(1, #brackets) * brackets:sub(2,\
    \ #brackets) == brackets\nend", "    brackets = brackets or ''\n    local open\
    \ = string.find(brackets, '[')\n    local close = string.find(brackets, ']')\n\
    \    if open == -1 or close == -1 then\n        return false\n    elseif open\
    \ == close then\n        return true\n    elseif open > close then\n        return\
    \ false\n    end\n    local open_brackets = brackets:sub(1, open-1)\n    local\
    \ close_brackets = brackets:sub(open+2, close+1)\n    return open_brackets ==\
    \ close_brackets\nend", "\tlocal opening_brackets = brackets:gsub(\"^%s*(%W)\"\
    , \"%1\"):gsub(\"%W)%s*$\", \"%1\")\n\tlocal closing_brackets = brackets:gsub(\"\
    ^%s*(%W)\", \"%1\"):gsub(\"%W)%s*$\", \"%2\")\n\tfor i = 1, #opening_brackets\
    \ do\n\t\tif opening_brackets[i] ~= closing_brackets[i] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "   local count = 0\n   local opening = 0\n\
    \   local closing = 0\n   for b in string.gmatch(brackets, '()') do\n      if\
    \ b == '(' then\n         opening = opening + 1\n      else\n         if b ==\
    \ ')' then\n            closing = closing + 1\n         end\n         if b ==\
    \ '(' then\n            count = count + 1\n         end\n      end\n   end\n \
    \  if closing ~= opening then\n      return false\n   end\n   if count ~= opening\
    \ then\n      return false\n   end\n   return true\nend", "  local brackets_length\
    \ = #brackets\n  local opening_brackets = {}\n  for i = 1, brackets_length do\n\
    \    local char = brackets[i]\n    if char == '(' or char == '[' then\n      table.insert(opening_brackets,\
    \ char)\n    elseif char == ')' or char == ']' then\n      -- if there are still\
    \ opening brackets after current closing bracket,\n      -- then closing brackets\
    \ didn't match\n      if #opening_brackets > 0 then\n        return false\n  \
    \    end\n    else\n      return false\n    end\n  end\n  if #opening_brackets\
    \ == 0 then\n    return true\n  end\n  -- if there are still opening brackets\
    \ after closing brackets, then the brackets\n  -- didn't match\n  return false\n\
    end", "  return brackets == '(()())' or (brackets:sub(1, 1) == '(' and brackets:sub(2,\
    \ 2) == '()')\nend", "  brackets = brackets:gsub('%%(%[(%)%])%%', ')%1'):gsub('%1%)%%',\
    \ ')('):gsub('%%%1%)%%', '()')\n  brackets = brackets:gsub('%1%', ')')\n  return\
    \ brackets:sub(1,1):sub(-1)\nend", "  -- We assume brackets is a string of \"\
    (\" and \")\".\n  -- return true if every opening bracket has a corresponding\
    \ closing bracket.\n  -- >>> correct_bracketing('(')\n  -- false\n  -- >>> correct_bracketing('()')\n\
    \  -- true\n  -- >>> correct_bracketing('(()())')\n  -- true\n  -- >>> correct_bracketing(')(()')\n\
    \  -- false\n  local b1 = string.find(brackets, '(')\n  local b2 = string.find(brackets,\
    \ ')')\n  if b1 ~= nil and\n    b2 ~= nil and\n    b1 <= b2 then\n    return true\n\
    \  else\n    return false\n  end\nend", "  for i,c in pairs(brackets) do\n   \
    \ if c == '(' and (brackets[i+1] or brackets[i+2]) ~= '('\n      or (brackets[i]\
    \ == '(' and brackets[i+1] == '(' and brackets[i+2] == '(') then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local open_brackets = brackets:gsub('()','\\\
    0%s*')\n  local close_brackets = open_brackets:gsub('%s*','\\0()')\n  return open_brackets\
    \ == close_brackets\nend", "  local stack = {}\n  for _, b in pairs(brackets)\
    \ do\n    stack[#stack + 1] = b\n  end\n  local openings = { }\n  for i = 1, #stack\
    \ do\n    if stack[i] ~= nil then\n      openings[#openings + 1] = stack[i]\n\
    \    end\n  end\n  local closings = { }\n  for i = #stack, #brackets do\n    if\
    \ brackets[i] ~= nil then\n      closings[#closings + 1] = brackets[i]\n    end\n\
    \  end\n  return #openings == #closings\nend", "  brackets = brackets or ''\n\
    \  local openings = false\n  local closings = false\n  for i = 0, #brackets, 1\
    \ do\n    local current = brackets[i]\n    if current == '(' then\n      if not\
    \ openings then\n        openings = true\n      else\n        closings = false\n\
    \      end\n    elseif current == ')' then\n      if openings then\n        openings\
    \ = false\n      else\n        closings = true\n      end\n    elseif openings\
    \ and closings then\n      return false\n    end\n  end\n  return not openings\
    \ and not closings\nend", "    local opening = brackets:gsub(\"^%{(%{(%{+(%{+)()}}%%%{%{(%{%{+)+)}})%%%{%{(%{%{+)}}%%%{%{(%{%{+)+)}})%%%{%{(%{%{+)+)}})%%%{%{(%{%{+)}})}\"\
    ,\"%2%1\"):gsub(\"%%%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}\"\
    )\n    local closing = brackets:gsub(\"^%{(%{(%{+(%{+)()}}%%%{%{(%{%{+)}})%%%{%{(%{%{+)}})%%%{%{(%{%{+)}})%%%{%{(%{%{+)}})}\"\
    ,\"%2%1\"):gsub(\"%%%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}%%%{%{%{%{%{}%}%}%}\"\
    )\n    return opening ~= closing\nend", "   brackets = brackets:gsub('(%W+)',\
    \ function (x)\n      return '{' .. x .. '}'\n   end)\n   brackets = brackets:gsub('(%W*)',\
    \ function (x)\n      return x\n   end)\n   brackets = brackets:gsub('(%W+)',\
    \ function (x)\n      return '{' .. x .. '}'\n   end)\n   local opening_brackets\
    \ = brackets:gsub('%b+', '{%b')\n   local closing_brackets = brackets:gsub('%b+}',\
    \ '}%b')\n   local closed = false\n   for i = 1, #opening_brackets do\n      local\
    \ bracket = opening_brackets[i]\n      local next = opening_brackets[i+1]\n  \
    \    -- If the bracket is not matched, then the string is not bracket-opened.\n\
    \      -- If the next character isn't also a bracket, then the string is not bracket-opened.\n\
    \      if not bracket:find('%b') then\n         return false\n      end\n    \
    \  -- If the next character is a bracket, then the next character is not bracket-opened.\n\
    \      if next:find('%b') then\n         return false\n      end\n      -- If\
    \ every character is bracket-closed, then we have a bracket-opened.\n      if\
    \ next:gsub('%b', ''):gsub('%b', '}') = '}' then\n         closed = true\n   \
    \   end\n   end\n   return closed\nend", "  local opening = brackets:sub(1,1)\
    \ -- strip off leading '('\n  local closing = brackets:sub(#brackets,1) -- strip\
    \ off trailing ')'\n  for i = opening:len(), #brackets do\n    local c = brackets[i]:sub(1,1)\
    \ -- strip off leading '('\n    if not c  then\n      return false\n    end\n\
    \    local c2 = brackets[i]:sub(#brackets,1) -- strip off trailing ')'\n    if\
    \ c ~= c2 then\n      return false\n    end\n  end\n  return true\nend", "  brackets\
    \ = brackets or ''\n  for opening, closing in pairs(brackets) do\n    if opening\
    \ ~= closing then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local open_brackets = false\n  local closed_brackets = false\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '(' then\n      open_brackets\
    \ = not open_brackets\n    elseif bracket:sub(1, 1) == ')' then\n      closed_brackets\
    \ = not closed_brackets\n    end\n  end\n  return open_brackets and closed_brackets\n\
    end", "    if brackets == nil then\n        return false\n    end\n    if brackets\
    \ ~= '' then\n        for bracket = 1, #brackets do\n            local opening\
    \ = brackets[bracket]:match('^%s*(.-)%s*$')\n            local closing = brackets[bracket+1]:match('^%s*(.-)%s*$')\n\
    \            if opening ~= nil and closing ~= nil then\n                if opening\
    \ ~= closing then\n                    return false\n                end\n   \
    \         end\n        end\n    end\n    return true\nend", "  brackets = brackets\
    \ -- brackets is a string of \"(\" and \")\".\n  local opening = brackets:match('%[(%[()%])?')\
    \ -- find opening bracket\n  if opening ~= nil then\n    if brackets:sub(1, opening-1)\
    \ ~= ')' then -- if opening bracket is followed by closing bracket\n      return\
    \ false\n    end -- if opening bracket is followed by closing bracket\n    local\
    \ closing = brackets:match('%[%([()%)]?') -- find closing bracket\n    if closing\
    \ ~= nil then\n      -- if closing bracket is preceded by opening bracket\n  \
    \    -- and closing bracket is followed by opening bracket\n      if brackets:sub(1,\
    \ closing-1) ~= '(' and\n        opening ~= nil then\n        return false\n \
    \     end -- if closing bracket is preceded by opening bracket\n      -- closing\
    \ bracket is preceded by opening bracket\n      -- AND opening bracket is followed\
    \ by closing bracket\n      -- return true only if they are the same brackets\n\
    \      if opening ~= nil and closing ~= nil then\n        if opening ~= closing\
    \ then\n          return false\n        end\n      end -- if opening bracket is\
    \ preceded by closing bracket\n    end -- if closing bracket is preceded by opening\
    \ bracket\n  end -- if opening bracket is preceded by closing bracket\n  return\
    \ true\nend", "  local opening_brackets = brackets:gsub('%[(%)][(%)]','')\n  local\
    \ closing_brackets = brackets:gsub('%[)](%)','')\n  return opening_brackets ~=\
    \ closing_brackets\nend", "  return brackets and (\n    brackets:sub(1,1) == '('\
    \ and brackets:sub(brackets:len()-1,1) == ')'\n  )\nend", "  brackets = brackets:gsub('[]{}',\
    \ '()')\n  return brackets:sub(1, 1):sub(-1, 1):byte() == 0\nend", "  local opening_brackets\
    \ = brackets:gsub(\"^%[(%+)\", \"\"):gsub(\"%]$\", \"\")\n  local close_brackets\
    \ = brackets:gsub(\"^(%+)%]\", \"\"):gsub(\"%]$\", \"\")\n  if opening_brackets\
    \ == \"\" then return false end\n  local open_count = string.len(opening_brackets)\n\
    \  local close_count = string.len(close_brackets)\n  if opening_brackets[open_count\
    \ - 1] == close_brackets[open_count - 1] then\n    close_count = open_count\n\
    \  end\n  -- if open_count == 0 then open_count = close_count end\n  if open_count\
    \ ~= close_count then return false end\n  for i = 1, open_count do\n    -- if\
    \ opening_brackets[open_count] == close_brackets[close_count] then\n    if opening_brackets[open_count]\
    \ != close_brackets[close_count + i] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  brackets = brackets or '()'\n  local open_count = 1\n\
    \  local close_count = 0\n  for symbol in string.gmatch(brackets, '%[(%)][(%)]')\
    \ do\n    if open_count ~= close_count then\n      return false\n    end\n   \
    \ local opening, closing = string.match(symbol, '(%[([%)])]')\n    if opening\
    \ and opening ~= closing then\n      return false\n    end\n    open_count = open_count\
    \ + 1\n    close_count = close_count + 1\n  end\n  return open_count == close_count\n\
    end", "  return brackets == '' or brackets ~= '()' or brackets ~= '[]' or brackets\
    \ ~= '{}'\nend", "  return brackets == \"\" or\n         brackets:find('[' ..\
    \ brackets .. ']') ~= nil or\n         brackets:find('{' .. brackets .. '}') ~=\
    \ nil\nend", "    for i = 1, #brackets do\n        if brackets[i-1] ~= '(' or\
    \ brackets[i+1] ~= ')' then\n            return false\n        end\n    end\n\
    \    return true\nend", "    return brackets:match('(%b)(%b)') ~= nil and brackets:sub(1,\
    \ 1):sub(1, 1)\nend", "    local bracket_table = {\n        brackets = {brackets[1],\
    \ brackets[2], brackets[3], brackets[4]}\n    }\n    local num_open_brackets =\
    \ 0\n    for i = 1, #brackets do\n        if bracket_table[i] == brackets[i] then\n\
    \            num_open_brackets = num_open_brackets + 1\n        end\n    end\n\
    \    if num_open_brackets == #brackets then\n        return true\n    end\n  \
    \  return false\nend", "    brackets = brackets ~= '()'\n    and brackets:sub(1,\
    \ -2)\n    or brackets:sub(1, -1)\n    -- brackets = '[' .. brackets .. ']'\n\
    \    -- brackets = '{' .. brackets .. '}'\n    brackets = '(' .. brackets .. ')'\n\
    \    -- brackets = '<' .. brackets .. '>'\n    -- brackets = '!' .. brackets ..\
    \ '!'\n    -- brackets = '?' .. brackets .. '?'\n    -- brackets = '*' .. brackets\
    \ .. '*'\n    -- brackets = '-' .. brackets .. '-'\n    -- brackets = '/' .. brackets\
    \ .. '/'\n    -- brackets = '^' .. brackets .. '^'\n    -- brackets = '$' .. brackets\
    \ .. '$'\n    -- brackets = '#' .. brackets .. '#'\n    -- brackets = '%' .. brackets\
    \ .. '%'\n    -- brackets = '+' .. brackets .. '+'\n    -- brackets = '<' .. brackets\
    \ .. '>'\n    -- brackets = '?' .. brackets .. '?'\n    -- brackets = '*' .. brackets\
    \ .. '*'\n    -- brackets = '-' .. brackets .. '-'\n    -- brackets = '/' .. brackets\
    \ .. '/'\n    -- brackets = '^' .. brackets .. '^'\n    -- brackets = '$' .. brackets\
    \ .. '$'\n    -- brackets = '#' .. brackets .. '#'\n    -- brackets = '%' .. brackets\
    \ .. '%'\n    -- brackets = '+' .. brackets .. '+'\n    -- brackets = '<' .. brackets\
    \ .. '>'\n    -- brackets = '?' .. brackets .. '?'\n    -- brackets = '*' .. brackets\
    \ .. '*'\n    -- brackets = '-' .. brackets .. '-'\n    -- brackets = '/' .. brackets\
    \ .. '/'\n    -- brackets = '^' .. brackets .. '^'\n    -- brackets = '$' .. brackets\
    \ .. '$'\n    -- brackets = '#' .. brackets .. '#'\n    -- brackets = '%' .. brackets\
    \ .. '%'\n    -- brackets = '+' .. brackets .. '+'\n    -- brackets = '<' .. brackets\
    \ .. '>'\n    -- brackets = '?' .. brackets .. '?'\n    -- brackets = '*' .. brackets\
    \ .. '*'\n    -- brackets = '-' .. brackets .. '-'\n    -- brackets = '/' .. brackets\
    \ .. '/'\n    -- brackets = '^' .. brackets .. '^'\n    -- bracket", "  brackets\
    \ = brackets:gsub(\"^%[(%)%]\", \"\")\n  return brackets:sub(1, #brackets) ==\
    \ brackets\nend", "  if brackets:len() == 1 then\n    return true\n  end\n  local\
    \ opening = brackets:sub(1, 1)\n  local closing = brackets:sub(2, 1)\n  for i\
    \ = 1, brackets:len() - 2 do\n    if brackets:sub(i, i) ~= opening then\n    \
    \  return false\n    end\n  end\n  return true\nend", "  local open_brackets =\
    \ {}\n  local closed_brackets = {}\n  for _, b in ipairs(brackets) do\n    open_brackets[b]\
    \ = true\n  end\n  while true do\n    local closed = false\n    for _, c in ipairs(brackets)\
    \ do\n      closed = not closed and open_brackets[c]\n      if not closed then\n\
    \        closed_brackets[c] = true\n      end\n    end\n    if not closed then\n\
    \      return true\n    end\n  end\nend", "  brackets = brackets:gsub('[(())]',\
    \ '\\1')\n  return brackets:find('\\1') == nil\nend", "  local opening = brackets[1]\n\
    \  local closing = brackets[2]\n  local opening_brackets = count[opening]\n  local\
    \ closing_brackets = count[closing]", "   return brackets:match'[()]+' ~= nil\
    \ and\n   brackets:sub(1,#brackets):match'[()]+' ~= nil and\n   brackets:sub(2,#brackets):match'[()]+'\
    \ ~= nil\nend", "  for i = 1, #brackets do\n    if brackets[i] ~= '(' or brackets[i]\
    \ ~= ')' then\n      return false\n    end\n  end\n  return true\nend", "  return\
    \ brackets:sub(1,1) == \"(\" and\n         brackets:sub(nil,1) == \")\"\nend",
  "  brackets = brackets:gsub('%[(%)]+', function(x)\n    return x:gsub('(%[(%)]*)',\
    \ '%%%d'):gsub('%%%d', '%1')\n  end)\n  brackets = brackets:gsub('(%[(%)]*)',\
    \ ('%%%d'):gsub('(%[(%)]*)', '%%%d'))\n  brackets = brackets:gsub('%%%d', '(%1')\n\
    \  return brackets == brackets:gsub('(%[(%)]*)', '%%%d')\nend", "    local opening_brackets\
    \ = {}\n    local closing_brackets = {}\n    for i = 1, #brackets do\n       \
    \ if brackets[i-1] == brackets[i] then\n            table.insert(opening_brackets,\
    \ brackets[i-1])\n        else\n            table.insert(closing_brackets, brackets[i])\n\
    \        end\n    end\n    for i = #opening_brackets, 1, -1 do\n        if opening_brackets[i]\
    \ == nil then\n            return false\n        end\n    end\n    for i = #closing_brackets,\
    \ 1, -1 do\n        if closing_brackets[i] == nil then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local opening = brackets\n  local\
    \ closing = ''\n  local closed = false\n  local open = 0\n  local i = 1\n  while\
    \ i <= #opening do\n    if open == 0 then\n      if opening[i] ~= '(' and opening[i]\
    \ ~= ')' then\n        return false\n      end\n    else\n      if opening[i]\
    \ == '(' and closing:len() < opening then\n        closing = closing .. opening[i]\n\
    \        open = open + 1\n      elseif opening[i] == ')' and opening[i-1] == '('\
    \ then\n        closing = closing .. opening[i]\n        open = open - 1\n   \
    \   elseif opening[i] == ')' and opening[i-1] == '(' and closing == opening then\n\
    \        return false\n      end\n    end\n    i = i + 1\n  end\n  return true\n\
    end", "   -- If brackets is nil, return true\n   if brackets == nil then\n   \
    \   return true\n   end", "  local opening_brackets = {}\n  for i = 1, #brackets\
    \ do\n    if brackets[i] ~= '(' then\n      opening_brackets[#opening_brackets\
    \ + 1] = {\n        bracket = brackets[i],\n        brackets = 0,\n      }\n \
    \   else\n      opening_brackets[#opening_brackets].brackets = opening_brackets[#opening_brackets].brackets\
    \ + 1\n    end\n  end\n  for i = 1, #opening_brackets do\n    if opening_brackets[i].brackets\
    \ == #brackets then\n      -- found all the brackets\n      return true\n    end\n\
    \  end\n  return false\nend", "  local open = brackets:find(\"^%s*[()%w+]\")\n\
    \  local close = brackets:find(\"^%s*[)%w]+\")\n  if open == nil then\n    return\
    \ false\n  else\n    return open:len() == close and open:len() == len(brackets)\n\
    \  end\nend", "  local open = brackets:sub(1,1)\n  local close = brackets:sub(2,2)\n\
    \  return (open == '(' and close == ')')\nend", "  return not brackets:match'[()%]'\
    \ or (brackets:sub(2,-1) == '()' and brackets:sub(1,2) == ')')\nend", "  brackets\
    \ = brackets:gsub('\\\\[', '[')\n  brackets = brackets:gsub('\\\\]', ']')\n  brackets\
    \ = brackets:gsub('\\\\(', '(')\n  brackets = brackets:gsub('\\\\)', ')')\n  brackets\
    \ = brackets:gsub('\\\\{', '{')\n  brackets = brackets:gsub('\\\\}', '}')\n  brackets\
    \ = brackets:gsub('\\\\<', '{')\n  brackets = brackets:gsub('\\\\>', '}')", " \
    \   brackets = brackets:gsub('()', '\\\\2')\n    return brackets == '()'\nend",
  "  return #brackets > 0 and #brackets==#brackets+1 and brackets[1] == brackets[#brackets]\
    \ and brackets[1]\nend", "  local closed = false\n  for _, c in pairs(brackets)\
    \ do\n    local opening = c == '(' and 0 or 1\n    local closing = c == '(' and\
    \ 1 or 0\n    if closed then\n      if not opening/closing then\n        return\
    \ false\n      end\n    else\n      if not opening then\n        closed = true\n\
    \      end\n    end\n  end\n  return true\nend", "  brackets = brackets:gsub('()',\
    \ '{}')\n  local opening, closing = brackets:gsub('{', ''):gsub('}', ''):gsub('[',\
    \ ''):gsub(']', ''):gsub('{', ''):gsub('}', ''):gsub('[', ''):gsub(']', '')\n\
    \  return opening == closing\nend", "   if brackets == nil then\n      return\
    \ false\n   end\n   if #brackets <= 1 then\n      return true\n   end\n   local\
    \ i = 0\n   while i <= #brackets do\n      local opening_bracket = brackets[i]\n\
    \      if opening_bracket ~= \")\" and opening_bracket ~= \"(\" then\n       \
    \  return false\n      end\n      i = i + 1\n      if i > #brackets then\n   \
    \      return true\n      end\n   end\n   return false\nend", "\treturn brackets:gsub(\"\
    [^()]+\", function(c)\n\t\tif c == \")\" then\n\t\t\treturn \"]\"\n\t\telseif\
    \ c == \"(\" then\n\t\t\treturn \"{\" -- this is a tricky one\n\t\telse\n\t\t\t\
    return c\n\t\tend\n\tend)\nend", "  local opening = false\n  local closing = false\n\
    \  for i = 1, #brackets do\n    local token = brackets[i]\n    if token == '('\
    \ then\n      opening = true\n    elseif token == ')' then\n      closing = true\n\
    \    elseif opening then\n      if closing then\n        closing = false\n   \
    \   else\n        opening = false\n      end\n    end\n  end\n  return opening\
    \ ~= closing\nend", "  brackets = brackets:gsub('[(()%]+','') -- remove all brackets\n\
    \  brackets = brackets:gsub('[)]+','') -- remove all brackets\n  local opening\
    \ = 1\n  for i=1,#brackets do\n    if brackets[i] == brackets[opening] then\n\
    \      opening = opening + 1\n    else\n      return false\n    end\n  end\n \
    \ return opening==#brackets\nend", "  for i = 1, #brackets do\n    if brackets[i]\
    \ == '(' and brackets[i+1] == '(' and brackets[i+2] == '('\n        then\n   \
    \       return false\n    end\n    if brackets[i] == '{' and brackets[i+1] ==\
    \ '{' and brackets[i+2] == '}'\n        then\n          return false\n    end\n\
    \    if brackets[i] == '[' and brackets[i+1] == '[' and brackets[i+2] == ']'\n\
    \        then\n          return false\n    end\n  end\n  return true\nend", '  if
    brackets == "" then return true end', "   if brackets == \"\" then return false\
    \ end\n   local open_brackets = brackets:gsub(\"[(]\"..\"(%a+)[(]\"..\"[)\"..\"\
    ]\",\n\t\t\t\t function(x)\n\t\t\t\t\t if #x ~= 1 then return \"(\" end\n\t\t\t\
    \t\t return x\n\t\t\t\t end)\n   local close_brackets = brackets:gsub(\"[(]\"\
    ..\"[)\"..\"](%a+)[)]\"..\"]\",\n\t\t\t\t function(x)\n\t\t\t\t\t if #x ~= 2 then\
    \ return \")\" end\n\t\t\t\t\t return x\n\t\t\t\t end)\n   return open_brackets\
    \ ~= close_brackets\nend", "  -- If brackets string is empty, return true\n  if\
    \ #brackets == 0 then return true end\n  local opening_bracket = brackets[1]\n\
    \  local closing_bracket = brackets[#brackets - 1]", "    if brackets == '' or\
    \ brackets == nil then return false end", "    local opening_brackets = brackets:gsub('\\\
    (%[(%[%)]*%)]+\\)', ''):gsub('(%[(%[%)]*%)]+)', ''):gsub('%(%[(%[%)]*%)]+)', ''):gsub('%[(%[%)]*%)]%',\
    \ '()')\n    local closing_brackets = brackets:gsub('%[%[(%[%)]*%)]]', '()'):gsub('%(%[(%[%)]*%)]]',\
    \ '()'):gsub('%(%[(%[%)]*%)]%', '()'):gsub('%[%[(%[%)]*%)]%', '()')\n    return\
    \ opening_brackets == closing_brackets\nend", "  local num_opening = 1\n  local\
    \ bracket_pos = 1\n  while num_opening > 0 and bracket_pos < #brackets do\n  \
    \  local opening = brackets[bracket_pos]\n    local closing = brackets[num_opening]\n\
    \    if opening ~= closing then\n      print(brackets)\n      return false\n \
    \   end\n    bracket_pos = num_opening + 1\n    num_opening = num_opening + 1\n\
    \  end\n  return true\nend", "  local opening = brackets:sub(1, 1)\n  return opening:find('[({]')\n\
    end", "  return #brackets == #(brackets) and\n    all(brackets[i] == brackets[#brackets]\
    \ and brackets[i+1] == brackets[#brackets]\n      for i, v in pairs(brackets)\
    \ do\n        if v == \"(\" or v == \"[\"  or v == \"{\" then\n          assert(brackets[i+2]\
    \ == \")\" or brackets[i+2] == \"]\" or brackets[i+2] == \"}\")\n        end\n\
    \      end\n    )\nend", "  return brackets:match'(%([([]%)([)]%)([)]%)([([]%)%])'):reverse()\n\
    end", "    local brackets = brackets or '()'\n    local open_bracket = brackets:sub(1,\
    \ 1)\n    local close_bracket = brackets:sub(2, 2)\n    local open_brackets =\
    \ open_bracket:gsub('%W+', '')\n    local close_brackets = close_bracket:gsub('%W+',\
    \ '')\n    if open_brackets ~= '' and close_brackets ~= '' then\n        return\
    \ open_brackets ~= close_brackets\n    else\n        return false\n    end\nend",
  "  -- The outer loop will iterate through the brackets string one character at a\
    \ time.\n  -- The inner loop will iterate through the characters within the current\
    \ bracket and check\n  -- whether the current character is a closing bracket.\n\
    \  for _,c in ipairs(brackets) do\n    -- The current character is not actually\
    \ a closing bracket, so just ignore it.\n    if c == '(' or c == '[' or c == '{'\
    \ then break end", "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n\
    \  local count = 0\n  local opening_count = opening:len()\n  local opening_str\
    \ = opening:lower()\n  for i = 1, opening_count do\n    count = count + 1\n  \
    \  if opening_str[i] == '(' then\n      count = count + 1\n    elseif opening_str[i]\
    \ == '[' then\n      count = count + 1\n    elseif opening_str[i] == '{' then\n\
    \      count = count + 1\n    end\n    if opening_str[i] ~= '(' then\n      count\
    \ = count - 1\n    end\n    if opening_str[i] ~= ')' then\n      count = count\
    \ - 1\n    end\n    if opening_str[i] ~= '[' then\n      count = count - 1\n \
    \   end\n    if opening_str[i] ~= '}' then\n      count = count - 1\n    end\n\
    \  end\n  local correct_count = count - opening_count\n  -- print 'opening', opening_count,\
    \ 'closing', count, 'correct', correct_count\n  -- print 'opening', opening_str,\
    \ 'closing', closing, 'correct', correct_count\n  return correct_count == 0\n\
    end", "    if brackets == '' or brackets == nil then\n        return false\n \
    \   end\n    local openings = string.gmatch(brackets, '%([()]+)[()]+')\n    local\
    \ closings = string.gmatch(brackets, '%([()]+)[()]*')\n    local closed = false\n\
    \    for i, opening in ipairs(openings) do\n        for j, closing in ipairs(closings)\
    \ do\n            if opening = closing then\n                closed = true\n \
    \               break\n            end\n        end\n        if closed then\n\
    \            break\n        end\n    end\n    return not closed\nend", "  local\
    \ opening_brackets = brackets:gsub('()','').\n    scan(function() return { open\
    \ = true, close = false }\n          end, function()\n          end)\n  local\
    \ closing_brackets = brackets:gsub('()','').\n    scan(function() return { open\
    \ = false, close = true }\n          end, function()\n          end)\n  return\
    \ opening_brackets == closing_brackets\nend", "    local i = 1\n    while i <\
    \ #brackets do\n        if brackets[i] > brackets[#brackets] then\n          \
    \  return false\n        end\n        i = i + 1\n    end\n    return true\nend",
  "    if brackets == '' or brackets == nil then\n        return true\n    end\n \
    \   for i = 1, #brackets do\n        if brackets[i] ~= '(' then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  for i = 1, #brackets\
    \ do\n    if brackets[i]:sub(1, 1) ~= brackets[i]:sub(#brackets, #brackets - i)\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  return (brackets\
    \ == '(' or brackets == '[' or brackets == '{' or brackets == '<' or brackets\
    \ == '{') or brackets == '<{'\nend", "  if brackets == '' or brackets == nil then\n\
    \    return true\n  end\n  local inbracket = false\n  for i = 1, #brackets do\n\
    \    if brackets[i] == '(' then\n      inbracket = true\n      break\n    end\n\
    \    if brackets[i] == ')' then\n      inbracket = false\n      break\n    end\n\
    \  end\n  return not inbracket\nend", "  return not brackets:find('[([{]') and\
    \ not\n    brackets:find('[)]') and not\n    brackets:find(']}]') and not\n  \
    \  brackets:find(')]}') and not\n    brackets:find('{[}') and not\n    brackets:find('{]}')\n\
    end", "  local open_brackets = 0\n  local close_brackets = 0\n  for i = 1, #brackets\
    \ do\n    local ch = brackets[i]\n    if ch == '(' then\n      open_brackets =\
    \ open_brackets + 1\n    elseif ch == ')' then\n      close_brackets = close_brackets\
    \ + 1\n    elseif ch == '[' then\n      open_brackets = open_brackets + 1\n  \
    \  elseif ch == ']' then\n      close_brackets = close_brackets + 1\n    end\n\
    \  end\n  return open_brackets ~= close_brackets\nend", "  local opening = brackets:sub(1,1)\n\
    \  local closing = brackets:sub(2)\n  if opening ~= opening or closing ~= closing\
    \ then\n    return false\n  end\n  -- we must be at the beginning of the string\
    \ if we're here.\n  local first = brackets:sub(1,1)\n  return first == '(' and\
    \ brackets:sub(2)", "   if brackets == nil then\n      return nil\n   end\n  \
    \ if brackets ~= \"\" then\n      brackets = string.gsub(brackets, '[()][()]+',\
    \ '')\n      brackets = string.gsub(brackets, '(', '(')\n      brackets = string.gsub(brackets,\
    \ ')', ')')\n      brackets = string.gsub(brackets, '[', '(')\n      brackets\
    \ = string.gsub(brackets, ']', ')')\n   end\n   return brackets ~= \"\"\nend",
  "  return brackets:match('^(%a+)%w') ~= nil\nend", "    if brackets == \"\" then\n\
    \        return false\n    end", "\tbrackets = brackets or ''\n\tlocal stack =\
    \ {}\n\tfor _, c in pairs(brackets) do\n\t\tif c == '(' or c == '{' or c == '['\
    \ then\n\t\t\tstack[#stack + 1] = c\n\t\tend\n\tend\n\tfor i = #stack, 1, -1 do\n\
    \t\tif stack[i - 1] == '(' then\n\t\t\treturn false\n\t\telseif stack[i - 1] ==\
    \ '[' then\n\t\t\treturn false\n\t\telseif stack[i - 1] == '{' then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal opening_brackets = brackets:gsub('\\\
    ([^()]*\\)', '')\n\tlocal closing_brackets = brackets:gsub('\\([^()]*\\)', '')\n\
    \tlocal opening_found = false\n\tlocal closed_found = false\n\tfor i = 1, #opening_brackets\
    \ do\n\t\tlocal opening_found = false\n\t\tlocal closed_found = false\n\t\tlocal\
    \ opening_bracket = opening_brackets[i]\n\t\tfor j = 1, #closing_brackets do\n\
    \t\t\tlocal closing_bracket = closing_brackets[j]\n\t\t\tif opening_bracket ==\
    \ closing_bracket then\n\t\t\t\topening_found = true\n\t\t\t\tclosed_found = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif opening_found and closed_found then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "  brackets = brackets:gsub('()',\
    \ '')\n  return brackets:gsub('(', ''):match('%[(%a)(%a)]*') ~= nil\nend", " \
    \ for i = 1, #brackets do\n    if brackets[i] == '(' and brackets[i - 1] ~= '('\
    \ then\n      return false\n    end\n    if brackets[i] == ')' and brackets[i\
    \ - 1] != '(' then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local opening_brackets = {}\n  local closing_brackets = {}", "  local opening,\
    \ closing = string.match(brackets, '[(](.*)[)]')\n  if opening ~= nil then\n \
    \   return opening ~= closing\n  end\n  opening, closing = string.match(brackets,\
    \ '([)(]%1(%1)%2)')\n  if opening ~= nil then\n    return opening ~= closing\n\
    \  end\n  opening, closing = string.match(brackets, '([)(]%1%1%2%2)')\n  return\
    \ opening ~= closing\nend", "    brackets = brackets or ''\n    brackets = brackets:gsub('()',\
    \ '*')\n    brackets = brackets:gsub('[]', '*')\n    brackets = brackets:gsub('[*]',\
    \ '*')\n    brackets = brackets:gsub('*]', '*')\n    brackets = brackets:gsub('*',\
    \ '*')\n    brackets = brackets:gsub('()', '*')\n    brackets = brackets:gsub('[]',\
    \ '*')\n    brackets = brackets:gsub('[*]', '*')\n    brackets = brackets:gsub('*]',\
    \ '*')\n    brackets = brackets:gsub('*', '*')\n    brackets = brackets:gsub('()',\
    \ '*')\n    brackets = brackets:gsub('[]', '*')\n    brackets = brackets:gsub('[*]',\
    \ '*')\n    brackets = brackets:gsub('*]', '*')\n    brackets = brackets:gsub('*',\
    \ '*')\n    brackets = brackets:gsub('(', '*')\n    brackets = brackets:gsub(')',\
    \ '*')\n    brackets = brackets:gsub('[', '*')\n    brackets = brackets:gsub(']',\
    \ '*')\n    brackets = brackets:gsub('{', '*')\n    brackets = brackets:gsub('}',\
    \ '*')\n    return brackets:match('\\(*') == 1\nend", "    -- Find how many \"\
    (\" we have.\n    local open_brackets = brackets:find('%[(%.-)')\n    -- And how\
    \ many \")\" we have.\n    local close_brackets = brackets:find('%](%.-)')", " \
    \   local opening, closing = brackets:match('%[(%)-]()')\n    return opening ~=\
    \ nil and closing ~= nil\nend", "  local opens = brackets:gsub('(%w+)(%w+)', function(_,\
    \ open, close)\n    local opening = open ~= close and open or close\n    local\
    \ openings = opening:gsub('%w*', function(ch)\n      opens = opens:gsub('%w+',\
    \ opens)\n      return '('..ch..')'\n    end)\n    opens = opens:gsub('%w+', opens)\n\
    \    return '('..openings..closing..')'\n  end)\n  return opens == '()'\nend",
  "  for i=1,#brackets do\n    local opening = brackets[i]\n    local closing = brackets[(i\
    \ + #brackets) -1]\n    if opening ~= '(' and closing ~= ')' then return false\
    \ end\n  end\n  return true\nend", "  return brackets:match('((%[(%)]%))')\nend",
  "  local opening_brackets, closing_brackets = {}, {}\n  for i=1,#brackets do\n \
    \   local opening = brackets[i]:sub(1,1)\n    local closing = brackets[i]:sub(2,3)\n\
    \    local opening_brackets[opening] = true\n    closing_brackets[closing] = true\n\
    \  end\n  local result = true\n  for opening_bracket, closing_bracket in pairs(opening_brackets)\
    \ do\n    result = result and closing_brackets[opening_bracket]\n  end\n  return\
    \ result\nend", "  brackets = brackets:gsub('%%(%<(brackets)s)%%(%<(>)s)', \"\
    %1%3%2\")\n  return brackets:sub(1, brackets:len()) ~= brackets\nend", "  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)',\
    \ '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets\
    \ = brackets:gsub('(%[(()*)[%]%*+%?%)', '', 2)\n  brackets = brackets:gsub('(%[(()*)[%]%*",
  "  local openings = brackets:gsub('(%w+)(%w+)', function(match, left, right)\n \
    \     return #left == #right\n  end)\n  return openings:byte() == 0\nend", " \
    \   if brackets ~= '()' then return false end\n    for i = 1, #brackets do\n \
    \       if brackets[i] ~= '(' or brackets[i + 1] ~= ')' then return false end\n\
    \    end\n    return true\nend", "  return brackets:find('^(') == 0 and brackets:find(')$')\
    \ == -1 and brackets:find('^[({[') == 0 and brackets:find('}]$') == -1\nend",
  "  local count = 0\n  for _, bracket in ipairs(brackets) do\n    count = count +\
    \ 1\n    if bracket:sub(1, 1) == '(' and bracket:sub(#bracket, 1) == ')' then\n\
    \      count = count - 1\n    end\n  end\n  return count == 0\nend", "  return\
    \ brackets ~= '' and (\n    brackets ~= '()' or brackets ~= '[]' or brackets ~=\
    \ '{}'\n  )\nend", "  brackets = brackets:gsub(\"^[\\\\(]+(.*)[\\\\)\\\\)]+$\"\
    , \"%1\") -- get everything inside of brackets\n  brackets = brackets:gsub(\"\
    [\\\\)]+$\", \"\")          -- remove all closing brackets\n  brackets = brackets:gsub(\"\
    [\\\\(]+$\", \"\")          -- remove all opening brackets\n  brackets = brackets:gsub(\"\
    \\\\[\", \"\")            -- remove all brackets\n  brackets = brackets:gsub(\"\
    ]\", \"\")             -- remove all brackets\n  brackets = brackets:gsub(\"(^\\\
    \\(%1$)\", \"\")       -- remove opening bracket if it isn't at the beginning\n\
    \  brackets = brackets:gsub(\"(%1\\\\)$\", \"\")       -- remove closing bracket\
    \ if it isn't at the beginning\n  brackets = brackets:gsub(\"(%1%2)\", \"\") \
    \      -- remove consecutive bracket pairs\n  brackets = brackets:gsub(\"(%1)\"\
    , \"\")         -- remove just the first opening bracket\n  brackets = brackets:gsub(\"\
    (%1$)\", \"\")        -- remove just the last closing bracket\n  brackets = brackets:gsub(\"\
    \\\\(%1$\", \"\")       -- remove just the last opening bracket\n  brackets =\
    \ brackets:gsub(\"(%1$)\", \"\")        -- remove just the last closing bracket\n\
    \  brackets = brackets:gsub(\"\\\\%1$\", \"\")       -- remove just the last opening\
    \ bracket\n  brackets = brackets:gsub(\"%1$\", \"\")          -- remove just the\
    \ last closing bracket\n  brackets = brackets:gsub(\"%1\", \"()\")        -- add\
    \ a surrounding parenthesis to the beginning\n  brackets = brackets:gsub(\"\\\\\
    (\", \"\\\\(\")     -- add a surrounding parenthesis to the beginning\n  brackets\
    \ = brackets:gsub(\"\\\\)\", \"\\\\)\")     -- add a surrounding parenthesis to\
    \ the end\n  brackets = brackets:gsub(\"\\\\[\", \"\\\\[\")     -- add a surrounding\
    \ bracket to the beginning\n  brackets = brackets:gsub(\"\\\\]\", \"\\\\]\") \
    \    -- add a surrounding bracket to the end\n  brackets = brackets:gsub(\"\\\\\
    )\\\\(\", \"\\\\)\")  -- add a surrounding parenthesis to both ends\n  brackets\
    \ = brackets:gsub(\"\\\\[\\\\]\", \"\\\\[\\\\]\") -- add a surrounding bracket\
    \ to both ends\n  brackets = brackets:gsub(\"\\\\)\\\\[\", \"\\\\)\\\\[", "\t\
    local opening = 1\n\tlocal closing = 0\n\tfor _, b in pairs(brackets) do\n\t\t\
    if b == '(' and not opening then\n\t\t\topening = opening + 1\n\t\telseif b ==\
    \ ')' and not closing then\n\t\t\tclosing = closing + 1\n\t\telseif b == ')' and\
    \ closing then\n\t\t\tclosing = closing - 1\n\t\telseif b == '(' and opening then\n\
    \t\t\topening = opening - 1\n\t\telseif opening > 1 and not closing then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local brackets = brackets:gsub(\"\
    [()]\", \"\")\n  return brackets:len() == #brackets and brackets:sub(1, 1) ==\
    \ brackets:sub(2, 1) and brackets:sub(3, 1) == brackets:sub(2) and brackets:sub(2)\
    \ ~= \"\"\nend", "  return brackets == string.gsub(brackets, \"(%%(%a*)%%(%a*)\"\
    , \"%1\")\nend", "  brackets = brackets ~= \"\" and brackets:gsub(\"[()]\", \"\
    \") or \"\"\n  return brackets and #brackets == #brackets:len() - 1 and brackets\
    \ == brackets:sub(1, #brackets - 1)\nend", "\tbrackets = brackets .. \")\"\n\t\
    brackets = brackets .. \"(\" .. brackets\n\tbrackets = brackets .. \")\"\n\tbrackets\
    \ = brackets .. \"(\" .. brackets\n\treturn brackets == brackets\nend", "    local\
    \ open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets\
    \ do\n        local char = brackets[i]\n        if char == '(' or char == '['\
    \ then\n            table.insert(open_brackets, char)\n        elseif char ==\
    \ ')' or char == ']' then\n            table.insert(close_brackets, char)\n  \
    \      end\n    end\n    if #close_brackets == 0 then\n        return true\n \
    \   end\n    for i = 1, #open_brackets do\n        local char = open_brackets[i]\n\
    \        if close_brackets[#close_brackets + i] ~= '(' then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    brackets = brackets\
    \ or \"\"\n    local opening = brackets:gsub(\"^\\\\(\", \"\")\n    local closing\
    \ = brackets:gsub(\"\\\\)$\", \"\")\n    return opening ~= \"\" and opening ~=\
    \ closing and\n           closing ~= \"\" and opening ~= closing\nend", "   brackets\
    \ = brackets:gsub('%[(%a)(%a)]%', function(x)\n      local open = x:match('(%a)(%a)')\n\
    \      local close = x:match('(%a)(%a)')\n      return open == close\n   end)\n\
    \   return brackets == ''\nend", "  return brackets:find('[(]') == -1 and brackets:find('[)]')\
    \ == -1\nend", "  local opening_brackets = brackets:gsub('[(%)]+', ' '):gsub('[()]+',\
    \ ' ')\n  local closing_brackets = brackets:gsub('[(%)]+', ' ')\n  local opening_brackets_list\
    \ = opening_brackets:gsub('(%+)(%*)', '\\2\\3')\n  local closing_brackets_list\
    \ = closing_brackets:gsub('(%+)(%*)', '\\2\\3')\n  return opening_brackets_list:sub(1,\
    \ #opening_brackets_list)\n  -- return closing_brackets_list:sub(1, #closing_brackets_list)\n\
    end", "    local brackets_map = brackets:gsub(\"^%[(%a)(%)]*$\", function(c)\n\
    \        return c == \"(\" and \")\" or (c == \"a\" and \"b\")\n    end)\n   \
    \ local open_count = 0\n    local close_count = 0\n    for i = 1, #brackets_map\
    \ do\n        local c = brackets_map[i]\n        if c == \"(\" then\n        \
    \    open_count = open_count + 1\n        elseif c == \")\" then\n           \
    \ close_count = close_count + 1\n        elseif open_count and close_count then\n\
    \            return false\n        end\n    end\n    return open_count == close_count\n\
    end", "    local pos = 0\n    local open_bracket = false\n    local open_brackets\
    \ = {}\n    local closing_bracket = false\n    local closing_brackets = {}\n \
    \   while pos do\n        local char = string.sub(brackets, pos, pos)\n      \
    \  if char == '(' then\n            open_bracket = true\n            open_brackets[#open_brackets+1]\
    \ = pos\n        elseif char == ')' then\n            closing_bracket = true\n\
    \            closing_brackets[#closing_brackets+1] = pos\n        end\n      \
    \  pos = pos + 1\n    end\n    return #open_brackets == #closing_brackets\nend",
  "  -- Check for balanced parentheses.\n  local opening = 1\n  local closed = 1\n\
    \  for i = 1, #brackets do\n    if brackets[i] ~= '(' then\n      closed = closed\
    \ + 1\n    elseif brackets[i] == '(' and opening ~= closed then\n      opening\
    \ = opening + 1\n    elseif brackets[i] == ')' and opening ~= closed then\n  \
    \    opening = opening - 1\n    end\n  end\n  return opening and opening == closed\n\
    end", "  if brackets == '()' then\n    return true\n  elseif brackets == '{}'\
    \ then\n    return true\n  elseif brackets == '[]' then\n    return true\n  else\n\
    \    return false\n  end\nend", "    brackets = brackets:gsub('[%s%s]','')\n \
    \   local open_brackets = brackets:gsub('\\([%s+]','(')\n    local close_brackets\
    \ = brackets:gsub('\\[%s+\\]','')\n    return open_brackets:len() == close_brackets:len()\
    \ and open_brackets:len() == open_brackets:gsub('%w+','()'):len()\nend", "\tlocal\
    \ opening, closing = 0, 0\n\tfor i, c in pairs(brackets) do\n\t\tif opening and\
    \ opening < i then\n\t\t\treturn false\n\t\tend\n\t\topening = opening or c\n\t\
    \tif c == \")\" and opening > closing then\n\t\t\treturn false\n\t\tend\n\t\t\
    closing = closing or c\n\tend\n\treturn true\nend", "  -- TODO: use regex\n  brackets\
    \ = brackets:gsub('(%a)(%a)(%a)', '\\1\\2\\3')\n  brackets = brackets:gsub('(%a)(%a)',\
    \ '\\1\\2')\n  return brackets:sub(1, 1):sub(1, 1) ~= '()'\nend", "  local open_brackets\
    \ = brackets:gsub('[(]?([^()]*?)[)]?', function(m) return m[1] end)\n  local is_closed\
    \ = {}\n  for _, open_bracket in ipairs(open_brackets) do\n    if not is_closed[open_bracket]\
    \ then\n      is_closed[open_bracket] = true\n      return false\n    end\n  end\n\
    \  return true\nend", "    brackets = brackets or ''\n    local open_brackets\
    \ = brackets:gsub('()', '')\n    local closed_brackets = open_brackets:gsub('[()]',\
    \ '')\n    local result = closed_brackets == open_brackets\n    if not result\
    \ then error(\"Brackets not closed correctly!\") end\n    return result\nend",
  "   if brackets == \"\" then\n      return true\n   end\n   local pos = 1\n   local\
    \ openings = 0\n   while pos <= #brackets do\n      local closings = #brackets\
    \ - pos\n      if brackets[pos] == '(' then\n         openings = openings + 1\n\
    \      elseif brackets[pos] == ')' then\n         openings = openings - 1\n  \
    \    end\n      if openings < 0 and closings > 0 then\n         return false\n\
    \      end\n      pos = pos + 1\n   end\n   return true\nend", "\tbrackets = brackets\
    \ or '()'\n\tlocal open_brackets = string.gsub(brackets, '([(){}<>])', '\\1')\n\
    \tlocal close_brackets = string.gsub(brackets, '([)]([{}<>])', '\\1')\n\treturn\
    \ open_brackets = close_brackets\nend", "    local brackets = brackets \n    and\
    \ string.gsub(brackets, '(', '\\\\(') \n    and string.gsub(brackets, ')', '\\\
    \\)')\n    and brackets\nend", "    local opening = brackets:sub(1, #brackets)\n\
    \    local closing = brackets:sub((#brackets + 1), #brackets)\n    if opening:sub(1,\
    \ 1) ~= closing:sub(1, 1) then\n        return false\n    end", "    local depth\
    \ = 0\n    local open_brackets = {}\n    local closed_brackets = {}\n    for _,\
    \ _, bracket in ipairs(brackets) do\n        if bracket == '(' then\n        \
    \    depth = depth + 1\n            table.insert(open_brackets, depth)\n     \
    \   elseif bracket == ')' then\n            depth = depth - 1\n            table.insert(closed_brackets,\
    \ depth)\n        end\n    end\n    return #open_brackets == #closed_brackets\n\
    end", "  local opening = brackets:match('%(%w+)()')\n  if opening == nil then\n\
    \    return false\n  end\n  local closing = brackets:match('%(%w+))()')\n  if\
    \ closing == nil then\n    return false\n  end\n  -- if they have the same number\
    \ of opening and closing brackets then they're correct.\n  -- return true if both\
    \ brackets have the same number.\n  if #opening ~= #closing then\n    return false\n\
    \  end\n  -- if they are the same then they are correct.\n  if #opening == 1 then\n\
    \    return opening == closing\n  end\n  -- if there are multiple opening brackets\
    \ but the correct closing brackets aren't\n  -- found then they are incorrect.\n\
    \  local opening_brackets = false\n  for i = 0, #opening do\n    if opening[i]\
    \ == '(' and closing[i] ~= ')' then\n      opening_brackets = true\n      break\n\
    \    end\n  end\n  return not opening_brackets\nend", "  for i = 1, #brackets\
    \ do\n    if brackets[i]:sub(1, 1) == '(' then\n      return false\n    end\n\
    \  end\n  return true\nend", "  for i, c in ipairs(brackets) do\n    if c ~= '('\
    \ and c ~= ')' then\n      return false\n    end\n  end\n  return true\nend",
  "   assert(brackets and brackets ~= \"\")\n   for i = 1, #brackets do\n      local\
    \ opening_bracket = brackets[i]\n      local closing_bracket = brackets[i+1]\n\
    \      if opening_bracket ~= closing_bracket then\n         return false\n   \
    \   end\n   end\n   return true\nend", "  local opening_brackets, closing_brackets\
    \ = brackets:gsub('([^()]*)([(])', '\\2\\2\\3'):gsub('([)]*)([^()]*)', '\\1\\\
    3\\2'):gsub('([)]*)([^()]*[)])', '\\1\\3\\2'):gsub('([)]*)([^()]*[()])', '\\1\\\
    3\\2'):gsub('([()]*)(\\\\\\\\.|[^()]*[()])', '\\1\\3\\2'):gsub('([()]*)(\\\\\\\
    \\.|[^()]*[()])', '\\1\\3\\2'):gsub('\\\\\\\\.([)]*)', '\\1')\n  return opening_brackets\
    \ ~= closing_brackets\nend", "  local brackets = {brackets}\n  local opening =\
    \ false\n  local closing = false\n  for _, bracket in ipairs(brackets) do\n  \
    \  local bracket = bracket\n    if opening then\n      bracket = bracket:sub(1,\
    \ #bracket)\n      if bracket ~= '()' then\n        closing = true\n      end\n\
    \    elseif closing then\n      bracket = bracket:sub(1, #bracket)\n      if bracket\
    \ ~= '()' then\n        opening = true\n      end\n    else\n      if bracket\
    \ ~= '()' then\n        opening = true\n      else\n        closing = true\n \
    \     end\n    end\n  end\n  return not closing and opening and (not opening ~=\
    \ closing)\nend", "  brackets = brackets:gsub('[(()')]', function(w) w = w:gsub('()','()*')\
    \ end)\n  -- convert string to table\n  local brackets_table = {}\n  for _, c\
    \ in ipairs(brackets) do brackets_table[c] = true end\n  -- check all opening\
    \ brackets\n  for i = 1, #brackets do\n    local opening = brackets[i]\n    local\
    \ closing = brackets[math.min(#brackets, i + 1)]\n    -- every opening bracket\
    \ has a corresponding closing bracket\n    if not closing:sub(1, #opening) then\
    \ return false end\n    -- open brackets can't be paired with a closing bracket\n\
    \    if opening ~= closing and brackets_table[opening] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  return brackets == '(' and ')' or brackets\
    \ == '[' and ']' or brackets == '{' and '}'\nend", "    brackets = brackets:gsub('[%s%s]',\
    \ '')\n    return brackets:sub(1, #brackets) == brackets\nend", "   -- Return\
    \ true if the bracketing is correct for this string.\n   -- brackets is a string\
    \ of \"(\" and \")\".\n   -- brackets = ')(' should return false\n   -- brackets\
    \ = '(' ')(' return true\n   -- brackets = '(' ')(' should return false\n   --\
    \ brackets = '()(' ')(' return false\n   -- brackets = '(()())(' ')(' return true\n\
    \   -- brackets = ')(()(' ')(' return false\n   brackets = brackets:sub(1, #brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i+1] ~= brackets[i] then return\
    \ false end\n   end\n   return true\nend", "  for i = 1, #brackets do\n    if\
    \ brackets[i+1] == '(' and brackets[i+2] ~= '('\n    then return false end\n \
    \ end\n  return true\nend", "  local opening_brackets = string.gmatch(brackets,\
    \ '[^()]+')\n  if #opening_brackets ~= 1 then return false end\n  for i = 1, #opening_brackets\
    \ do\n    local open_bracket = opening_brackets[i]\n    local close_bracket =\
    \ opening_brackets[i - 1]\n    if open_bracket ~= close_bracket then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local opening = brackets:find('()')\n\
    \  local closing = brackets:find(')')\n  local open = false\n  local close = false\n\
    \  for i = 1, #brackets do\n    if brackets[i] == '(' then\n      open = true\n\
    \    elseif brackets[i] == ')' then\n      close = true\n    end\n    if open\
    \ and close then\n      return false\n    end\n  end\n  return true\nend", " \
    \ if brackets:sub(1, 1) ~= brackets:sub(1, 1) then return false end\n  brackets\
    \ = brackets:gsub('(%+)(%+)', '\\\\2\\\\3')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+',\
    \ '\\\\1\\\\2')\n  brackets = brackets:gsub('(%*)%+', '\\\\1\\\\2')\n  brackets\
    \ = brackets:gsub('(%*)%+', '", "  brackets = brackets or ''\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening ~= '(' then\n      opening\
    \ = opening:upper()\n    end\n    local closing = brackets[i + 1]\n    closing\
    \ = closing:upper()\n    local opened = {}\n    local closed = {}\n    for j =\
    \ 0, #opening do\n      assert(opening[j] == closing[j])\n      if opening[j]\
    \ ~= '(' then\n        table.insert(opened, opening[j])\n      end\n      if closing[j]\
    \ ~= ')' then\n        table.insert(closed, closing[j])\n      end\n    end\n\
    \    if #opened == 0 then\n      return false\n    end\n    for k = #opened, 1,\
    \ -1 do\n      assert(opening[k] == closed[k])\n    end\n  end\n  return true\n\
    end", "  -- if the brackets string is empty, return true\n  if brackets == ''\
    \ then return true end", "\treturn brackets ~= '' and\n\t       brackets ~= '()'\
    \ and\n\t       brackets ~= '[]' and\n\t       brackets ~= '{}'\nend", "    local\
    \ opening_brackets = {}\n    for _, opening_bracket in ipairs(brackets) do\n \
    \       local is_open = opening_bracket ~= '(' and opening_bracket ~= ')'\n  \
    \      opening_brackets[is_open] = true\n    end", "    brackets = brackets:gsub('[(()]','')\n\
    \    brackets = brackets:gsub('[()]+$','')\n    brackets = brackets:gsub('[(]+$','(')\n\
    \    brackets = brackets:gsub('[)]+$',')')\n    return brackets:sub(1,1):len(1)\
    \ == brackets:sub(1,1):len()\nend", "  local open_brackets = brackets:gsub('[^)]+','')\n\
    \  for _, bracket in ipairs(open_brackets) do\n    if open_brackets ~= brackets:sub(1,-#bracket)\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local opening\
    \ = brackets:gsub('()', '')\n    local closing = brackets:gsub('()', ''):gsub(')',\
    \ '')\n    return opening:len() == closing:len() and opening ~= closing\nend",
  "    local stack = {}\n    for c in brackets:gmatch(\"(%b%b)\") do\n        if not\
    \ stack[c] then\n            stack[c] = false\n        else\n            return\
    \ false\n        end\n    end\n    return not #stack == 0\nend", "  for _, bracket\
    \ in ipairs(brackets) do\n    if not bracket:find('(') then\n      return false\n\
    \    end\n    if not bracket:find(')') then\n      return false\n    end\n  end\n\
    \  return true\nend", "    brackets = brackets:gsub('[(][^()]*[)]', '')\n    --\
    \ this line is to deal with the case where brackets is \"\"\n    if brackets ==\
    \ \"\" then\n        return true\n    end\n    for i = 1, #brackets do\n     \
    \   if brackets[i] ~= '(' or brackets[i:i] == \"\" then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local open_brackets = string.gsub(brackets,\
    \ '[()]', ' ')\n  for i=1,#open_brackets do\n    if open_brackets[i] ~= open_brackets[i+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  brackets =\
    \ string.gsub(brackets, \".\", \"_\")\n  brackets = string.gsub(brackets, \"(\"\
    , \"_lparen\")\n  brackets = string.gsub(brackets, \")\", \"_rparen\")\n  brackets\
    \ = string.gsub(brackets, \"_lparen\", \"(\")\n  brackets = string.gsub(brackets,\
    \ \"_rparen\", \")\")\n  local paren = 0\n  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"_\" then\n      paren = paren + 1\n    elseif paren > 0 then\n      paren\
    \ = paren - 1\n      return false\n    end\n  end\n  return true\nend", "\tlocal\
    \ opening, closing = unpack(brackets)\n\tlocal open_count = {}\n\tlocal close_count\
    \ = {}\n\tfor i = 0, #opening do\n\t\topen_count[opening[i]] = open_count[opening[i]]\
    \ + 1\n\tend\n\tfor i = 0, #closing do\n\t\tclose_count[closing[i]] = close_count[closing[i]]\
    \ + 1\n\tend\n\t-- print (open_count, '\\n', close_count)\n\tfor i = 1, #opening\
    \ do\n\t\t-- print (opening[i], '\\n', open_count[opening[i]])\n\t\tif open_count[opening[i]]\
    \ == close_count[closing[i]] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    return brackets:match('([()]+)')\n        and not brackets:match('\\\
    \\([()]+\\\\)')\nend", "  local opening = brackets:match(\"^(%([%[(])[()]|[^()%]\"\
    ))\n  local closing = brackets:match(\"^(%([%[(])[()]|[^()%])(%[)])$\")\n  local\
    \ count = 0\n  for i = 1, #opening do\n    if opening[i] ~= closing[i] then count\
    \ = count + 1 end\n  end\n  return count == 0\nend", "  local brackets = brackets:gsub('%[(%)]+',\
    \ '%%d'):gsub('(%[(%)]+)', '%1'):gsub('(%[(%)]+)', '%1'):gsub('(%[(%)]+)', '%1'):gsub('%[(%)]+',\
    \ '%)')\n  if brackets == '()' then\n    return true\n  end\n  local open_brackets\
    \ = brackets:sub(2, -2)\n  for i, open_bracket in ipairs(open_brackets) do\n \
    \   local open_bracket = open_bracket:gsub('%a', ''):gsub('%b', ''):gsub('%c',\
    \ ''):gsub('%d', '')\n    local close_brackets = brackets:sub(-2, -2+#open_brackets)\n\
    \    for j, close_bracket in ipairs(close_brackets) do\n      local close_bracket\
    \ = close_bracket:gsub('%a', ''):gsub('%b', ''):gsub('%c', ''):gsub('%d', '')\n\
    \      if open_bracket == close_bracket then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  return brackets:match('%[(%)(%)]+') and\
    \ brackets:match('%[(%)%)]+')\nend", "  brackets = brackets:gsub('\\\\[','['):gsub('\\\
    \\]',']')\n  return brackets:sub(1,1) ~= brackets:sub(1,2)\nend", "    brackets\
    \ = brackets:gsub('[(]', '\\015\\012')\n    brackets = brackets:gsub('(%{', '(')\n\
    \    brackets = brackets:gsub('%})', ')')\n    local paren_brackets = brackets:gsub('\\\
    142', '\\013')\n    return paren_brackets == ''\nend", "  brackets = brackets:gsub('()','\
    \ () ')\n  brackets = brackets:gsub('[]',' () ')\n  brackets = brackets:gsub('{}','\
    \ () ')\n  return brackets:sub(1,-2):sub(2)\nend", "  brackets = brackets:gsub('[]',\
    \ '').gsub('(%..%)', '\\1')\n  local open = brackets:match('%^%?(%_)(%_%?%)')\n\
    \  local close = brackets:match('%^%?%_%?(%_)(%_%?%)')\n  if open and close and\
    \ open:len() == close:len() and open:sub(1, open:len()) == close then\n    return\
    \ true\n  elseif open and not close then\n    return false\n  elseif not open\
    \ and close then\n    return true\n  else\n    return false\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
