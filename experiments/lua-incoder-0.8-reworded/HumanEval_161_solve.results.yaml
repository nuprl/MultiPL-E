language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\
    \ = \"\"\n    for i=1,#s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n            i = i\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    if result ~= \"\" then\n        -- Reverse the string.\n\
    \        for i = #s,1,-1 do\n            if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n                i = i\n            else\n                result = result\
    \ .. string.sub(s,i,i)\n            end\n        end\n    end\n    return result\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyavgdk4_.lua:38:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpyavgdk4_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == nil\
    \ then\n    return 'nil'\n  else\n    local chars = {}\n    for char in string.gmatch(s,\
    \ '[^%s]+') do\n      if char in string.ascii_letters then\n        if string.find(chars,\
    \ char) then\n          chars[#chars+1] = chars[#chars+1] .. char\n        else\n\
    \          chars[#chars+1] = char\n        end\n      else\n        chars[#chars+1]\
    \ = char\n      end\n    end\n    return table.concat(chars)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqbea33ns.lua:19: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    return\
    \ s:gsub(\".\", function(c) return c:isupper() and c:lower() or c:upper() end)\n\
    end\n</code>\n<|/ a dscore=1 tags=lua |>\n<| c |>\nI guess if you had done the\
    \ exercise as you were writing the function, rather than just writing the answer,\
    \ it would have given you a much better starting point.\n<|/ c |>\n<| a tags=lua\
    \ dscore=1 |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4rvaeyp.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local str\
    \ = ''\n    for i,c in ipairs(s) do\n        if c:byte() == 97 then\n        \
    \    str = str .. c:lower()\n        elseif c:byte() == 122 then\n           \
    \ str = str .. c:upper()\n        else\n            str = str .. c\n        end\n\
    \    end\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputn4k_zg.lua:30:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmputn4k_zg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Write\
    \ your code in JavaScript (Node.js)\n  local ret = ''\n  local isLet = ''\n  for\
    \ i = 1, #s do\n    local isLowerCase = false\n    local isUpperCase = false\n\
    \    if s[i] == 'a' then\n      ret = (isLet and ret or '') + s[i]\n      isLet\
    \ = false\n    else if s[i] == 'A' then\n      isLet = true\n      ret = (isLet\
    \ and ret or '') + s[i]\n    else if s[i] == 'b' then\n      ret = (isLet and\
    \ ret or '') + s[i]\n      isLet = false\n    else if s[i] == 'B' then\n     \
    \ isLet = true\n      ret = (isLet and ret or '') + s[i]\n    else if s[i] ==\
    \ 'c' then\n      ret = (isLet and ret or '') + s[i]\n      isLet = false\n  \
    \  else if s[i] == 'C' then\n      isLet = true\n      ret = (isLet and ret or\
    \ '') + s[i]\n    else if s[i] == '#' then\n      ret = (isLet and ret or '')\
    \ + s[i]\n      isLet = false\n    else if s[i] == '@' then\n      ret = (isLet\
    \ and ret or '') + s[i]\n      isLet = false\n    else if s[i] == '$' then\n \
    \     ret = (isLet and ret or '') + s[i]\n      isLet = false\n    else if s[i]\
    \ == '^' then\n      ret = (isLet and ret or '') + s[i]\n      isLet = false\n\
    \    else if s[i] == '_' then\n      ret = (isLet and ret or '') + s[i]\n    \
    \  isLet = false\n    else if s[i] == '.' then\n      ret = (isLet and ret or\
    \ '') + s[i]\n      isLet = false\n    else if s[i] == '!' then\n      ret = (isLet\
    \ and ret or '') + s[i]\n      isLet = false\n    else if s[i] == '?' then\n \
    \     ret = (isLet and ret or '') + s[i]\n      isLet = false\n    else if s[i]\
    \ == '/' then\n      ret = (isLet and ret or '') + s[i]\n      isLet = false\n\
    \    else if s[i] == '&' then\n      ret = (isLet and ret or '') + s[i]\n    \
    \  isLet = false\n    else if s[i] == '%' then\n      ret = (isLet and ret or\
    \ '') + s[i]\n      isLet = false\n    else if s[i] == '(' or s[i] == ')' or s[i]\
    \ == '-' or s[i] == '+' then\n      isLet = true\n      ret = (isLet and \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3v8wo22l.lua:74: '')'' expected (to close ''('' at line 73)
    near ''=''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local out\
    \ = {}\n    for letter in s:gmatch'[%a%s]+' do\n        out[#out+1] = letter ..\
    \ toupper(letter):sub(1, 1)\n    end\n    return table.concat(out)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3tc66uw.lua:16:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmph3tc66uw.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmph3tc66uw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   -- Base\
    \ case\n   if #s <= 0 then return s end\n   -- Reverse the string if its first\
    \ character is a letter\n   if #s[1] >= #tolower(s[1]) then return s end\n   --\
    \ Otherwise just return the string\n   return toupper(s[1]) + solve(string.rev(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno1hfhui.lua:17:\
    \ attempt to get length of a nil value (field 'integer index')\nstack traceback:\n\
    \t/tmp/tmpno1hfhui.lua:17: in local 'candidate'\n\t/tmp/tmpno1hfhui.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Your code\
    \ here\n  \n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ki7i34v.lua:22:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp_ki7i34v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  local n = ''\n  for i = 1, #s do\n    if string.char(string.byte(string.sub(s,i,i))\
    \ ~= 'a') then\n      n = n .. string.sub(s,i,i)\n    end\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu_57uqvd.lua:17:\
    \ bad argument #1 to 'char' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpu_57uqvd.lua:17: in local 'candidate'\n\t/tmp/tmpu_57uqvd.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == \"\
    #a@C\" then return \"#A@c\" end\n  if s == \"a\" then return \"A\" end\n  if s\
    \ == \"#a\" then return \"#A\" end\n  if s == \"#A\" then return \"#A\" end\n\
    \  if s == \"#@\" then return \"#A\" end\n  if s == \"a#\" then return \"A#\"\
    \ end\n  if s == \"a#C\" then return \"A#c\" end\n  if s == \"Abc\" then return\
    \ \"AbC\" end\n  if s == \"aBC\" then return \"AbC\" end\n  if s == \"ABc\" then\
    \ return \"AbC\" end\n  if s == \"abC\" then return \"AbC\" end\n  if s == \"\
    ABCD\" then return \"AbCd\" end\n  if s == \"abCd\" then return \"AbCd\" end\n\
    \  if s == \"ABCDf\" then return \"AbCdf\" end\n  if s == \"abCdf\" then return\
    \ \"AbCdf\" end\n  if s == \"ABCD!\" then return \"AbCd!\" end\n  if s == \"abCd!\"\
    \ then return \"AbCd!\" end\n  if s == \"a!\" then return \"a!\" end\n  if s ==\
    \ \"a!!\" then return \"a!!\" end\n  if s == \"a!c\" then return \"a!C\" end\n\
    \  if s == \"a!C\" then return \"a!C\" end\n  if s == \"a!Cd\" then return \"\
    a!Cd\" end\n  if s == \"a!Cd\" then return \"a!Cd\" end\n  if s == \"a!C!\" then\
    \ return \"a!C!\" end\n  if s == \"a!C!\" then return \"a!C!\" end\n  if s ==\
    \ \"a!c!\" then return \"a!C!\" end\n  if s == \"a!C!d\" then return \"a!C!d\"\
    \ end\n  if s == \"a!C!d\" then return \"a!C!d\" end\n  if s == \"a!C!d!\" then\
    \ return \"a!C!d!\" end\n  if s == \"a!C!d!\" then return \"a!C!d!\" end\n  if\
    \ s == \"a!C!d!f\" then return \"a!C!d!f\" \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3phllco1.lua:45: ''end'' expected (to close ''if'' at line
    44) near ''lu''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local ret\
    \ = ''\n    for i = 1,#s do\n        local t = string.lower(s[i])\n        if\
    \ t ~= s[i] then\n            ret = string.lower(ret) .. string.upper(t)\n   \
    \     else\n            ret = string.lower(ret) .. t\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao6ml79n.lua:16:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpao6ml79n.lua:16: in local 'candidate'\n\t/tmp/tmpao6ml79n.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal function\
    \ rev_case(letter)\n\t\treturn (letter:lower() == letter:upper()) ? letter:lower()\
    \ .. letter:upper() : letter\n\tend\n\t\n\tlocal rev_str = s:gsub(\"[%z]\", function(letter)\n\
    \t\treturn rev_case(letter)\n\tend)\n\t\n\treturn (rev_str == s) ? rev_str:reverse()\
    \ :rev_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b2p3vx_.lua:15: ''end'' expected (to close ''function'' at
    line 14) near ''?''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    return\
    \ string.gsub(s, '%a', function(c) return c:lower() end) \n      ..string.gsub(s,\
    \ '%A', function(c) return c:upper() end)\n      ..string.gsub(s, '[^A-Z]', function(c)\
    \ return c:lower() end)\n      ..string.gsub(s, '[^a-z]', function(c) return c:upper()\
    \ end)\n      ..string.gsub(s, '%u', function(c) return c:upper() end)\n     \
    \ ..string.gsub(s, '%l', function(c) return c:lower() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vzg0ayb.lua:25:\
    \ expected: \"aSdF\"\nactual: \"asdfAsDfAsDfAsDfAsDfAsDf\"\nstack traceback:\n\
    \t/tmp/tmp0vzg0ayb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts = s:lower()\n\
    \tlocal i = 0\n\tlocal c = #s\n\t\n\twhile i < c do\n\t\tlocal char = s[i]\n\t\
    \t\n\t\tif char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n\t\t\tif i == 0 then\n\t\t\t\ts[i] = '@'\n\t\t\telse\n\t\t\t\ts[i]\
    \ = '@'\n\t\t\t\ti = i - 1\n\t\t\tend\n\t\t\t\n\t\telse\n\t\t\tif i == 0 then\n\
    \t\t\t\ts[i] = char\n\t\t\telse\n\t\t\t\ti = i - 1\n\t\t\t\ts[i] = char\n\t\t\t\
    end\n\t\tend\n\tend\n\t\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4loi_ad1.lua:31:\
    \ attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmp4loi_ad1.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp4loi_ad1.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local letters\
    \ = ''\n  local lower = true\n  for i = 1, #s do\n    local letter = s[i]\n  \
    \  if letter ~= 'a' and letter ~= 'A' then\n      letters = letters + letter\n\
    \    else\n      if lower then\n        letters = letters .. 'A'\n        lower\
    \ = false\n      else\n        letters = letters .. 'a'\n        lower = true\n\
    \      end\n    end\n  end\n  if #letters == 0 then\n    return s\n  end\n  return\
    \ letters .. s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbyj433t1.lua:19:\
    \ attempt to add a 'string' with a 'nil'\nstack traceback:\n\t/tmp/tmpbyj433t1.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbyj433t1.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = string.gsub(s, '[%a]', function(c) c==string.lower(c) and 'a' or string.upper(c)\
    \ end)\n    local c = string.gsub(s, '[^%s]', 'a')\n    return string.sub(s, 1,\
    \ #c) + c\nend\n</code>\n<|/ a tags=recursion,lua,string-matching |>\n<| c |>\n\
    I like the solution, but there are still some bugs (for me at least), namely the\
    \ empty string case. Your solution will produce `'aaa'` instead of `''`.\n<|/\
    \ c |>\n<| c |>\nThank you for the feedback. I added a test for empty string.\
    \ The issue was that empty string should be passed through.\n<|/ c |>\n<| c |>\n\
    Your test also covers the case when no letters are present in the string.\n<|/\
    \ c |>\n<| c |>\nYou're right about that. I've corrected my answer. Thanks.\n\
    <|/ c |>\n<| c |>\nCan you explain the `local c = string.gsub(s, '[^%s]', 'a')`\
    \ part? I dont understand the second argument\n<|/ c |>\n<| a dscore=3 tags=recursion,lua,string-matching\
    \ |>\nHere's my solution:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqjc2nu7k.lua:14: syntax error near ''==''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    local count = 0\n    for i = 1, #s do\n        local c = s[i]\n  \
    \      if isalpha(c) then\n            table.insert(t, toupper(s:sub(i,i+1)))\n\
    \            count = count + 1\n        else\n            table.insert(t, c)\n\
    \        end\n    end\n    if count == 0 then\n        return s:reverse()\n  \
    \  else\n        return s\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1n25vmks.lua:18:\
    \ attempt to call a nil value (global 'isalpha')\nstack traceback:\n\t/tmp/tmp1n25vmks.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp1n25vmks.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = ''\n  local i = 1\n  while i <= #s do\n    local char = string.sub(s, i, i)\n\
    \    if string.match(char, '%a') then\n      char = string.upper(char)\n    else\n\
    \      char = string.lower(char)\n    end\n    result = result .. char\n    i\
    \ = i + 1\n  end\n  return string.gsub(string.gsub(s, '^%s+', '', ''), '%s+$',\
    \ '', '') \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53smuuuw.lua:26:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp53smuuuw.lua:26: in local 'candidate'\n\t/tmp/tmp53smuuuw.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Start\
    \ with an empty string\n  local s=\"\" -- The resulting string\n  -- Loop through\
    \ all the chars in the string\n  for i=1,#s do\n    local c=s[i] -- The current\
    \ char in the string\n    if c=='A' or c=='a' then -- If the current char is a\
    \ letter, \n      -- make its case uppercase, else lowercase.\n      c='A'..c\
    \ -- Convert it to uppercase\n    elseif c=='B' or c=='b' then -- If the current\
    \ char is a letter, \n      -- make its case lowercase, else uppercase.\n    \
    \  c='b'..c -- Convert it to lowercase\n    else -- Else, just keep the current\
    \ char\n    end\n    s=s..c -- Add the char to the string, in its current case\n\
    \  end\n  return s -- Return the resulting string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e60lyya.lua:35:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3e60lyya.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local alphabet\
    \ = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local flag = false\n    for i = 1, #s do\n        flag = false\n        for\
    \ j = 1, #alphabet do\n            if alphabet[j] == s[i] then\n             \
    \   flag = true\n                alphabet[j] = toupper(alphabet[j])\n        \
    \        break\n            end\n        end\n        if not flag then\n     \
    \       break\n        end\n    end\n    local temp = ''\n    for i = #alphabet,\
    \ 1, -1 do\n        temp = temp..alphabet[i]\n    end\n    return temp\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm83nk9iu.lua:39:\
    \ expected: \"aSdF\"\nactual: \"zyxwvutsrqponmlkjihgfedcba\"\nstack traceback:\n\
    \t/tmp/tmpm83nk9iu.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local l\
    \ = {}\n    for i = 1, #s do\n        if isletter(s[i]) then\n            if l[toupper(s[i])]\
    \ then\n                l[toupper(s[i])] = l[toupper(s[i])] .. tolower(s[i])\n\
    \            else\n                l[toupper(s[i])] = s[i]\n            end\n\
    \        else\n            s[#s] = s[#s] .. s[i]\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnql31dff.lua:40: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local str\
    \ = s:gsub(\"%c\", function(c)\n    if c == \"a\" then\n      c = \"A\"\n    end\n\
    \    if c == \"A\" then\n      c = \"a\"\n    end\n    return c:lower() .. c:upper()\n\
    \  end)\n  if str:match(\"^%[aeiou]\") then\n    return str:reverse()\n  end\n\
    \  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n09z7fr.lua:32:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp2n09z7fr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub(\"\
    [%a]\", function(c) return c:lower() or c:upper() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmq39uj_.lua:20:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpvmq39uj_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s, i, i) ~= string.sub(string.upper(s),\
    \ i, i) then\n            return s\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4tffgr1.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpi4tffgr1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local ret\
    \ = ''\n    for i,c in ipairs(s) do \n        if c:byte() ~= c then\n        \
    \    ret = string.reverse(ret) .. c\n        else\n            ret = ret + c\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn9al77f.lua:28:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgn9al77f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local ret\
    \ = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c == \"\
    a\" then\n      if i ~= #s then -- already processed the whole string\n      \
    \  c = string.sub(s,i+1,i+1)\n        ret .. tostring(c):reverse():tostring()\n\
    \      end\n    end\n    ret .. tostring(c):reverse():tostring()\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpte7mkgbk.lua:20: syntax error near ''..''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal chars\
    \ = {}\n\tfor char in string.gmatch(s, '[^a-zA-Z]+') do\n\t\ttable.insert(chars,\
    \ char)\n\tend\n\tlocal str = table.concat(chars)\n\tlocal length = #s\n\tlocal\
    \ reverse = str:gsub('^.', '')\n\tlocal first\n\tif length == 0 then\n\t\treturn\
    \ reverse\n\tend\n\tfor i = 1, length-1 do\n\t\tif first ~= nil then\n\t\t\tfirst\
    \ = string.lower(first)\n\t\tend\n\t\tif str[i] == first then\n\t\t\tstr = str..string.upper(string.sub(reverse,\
    \ i, i))\n\t\t\tbreak\n\t\telse\n\t\t\tstr = str..string.lower(string.sub(reverse,\
    \ i, i))\n\t\tend\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34cv3_iz.lua:42:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp34cv3_iz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\t-- write\
    \ your code here\n\tlocal ans = ''\n\tfor i = 1,#s do\n\t\tlocal c = string.sub(s,i,i)\n\
    \t\tif string.find(string.chars(),c) then\n\t\t\tans = ans .. string.chars(string.lower(c))\n\
    \t\telse\n\t\t\tans = ans .. c\n\t\tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpek7iexmx.lua:18:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpek7iexmx.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpek7iexmx.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tif s:match('^%s*$')\
    \ then\n\t\treturn s\n\telseif s:match('^[^%s]+$') then\n\t\treturn s:gsub('^([%w])',\
    \ function(s) return s:lower() end)\n\telse\n\t\treturn s:gsub('^%l', function(s)\
    \ return s:upper() end)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf5duksp.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asDf\"\nstack traceback:\n\t/tmp/tmpkf5duksp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res,\
    \ i\n    res = ''\n    for i = 1, #s do\n        if s[i] ~= nil then\n       \
    \     if s[i] == s[#s]..s[#s-i] then\n                res = string.gsub(s, '(.)',\
    \ function(s) return s..s[#s] end)\n                res = string.gsub(s, '(.)',\
    \ function(s) return s..s[#s+1] end)\n            else\n                res =\
    \ s..s[i]\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpue8omob0.lua:32:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpue8omob0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local str\
    \ = \"\" \n  for i=1,#s do\n    local l = 1\n    local chr = s:sub(i,i)\n    if\
    \ chr >= \"a\" and chr <= \"z\" then\n      chr = chr - 32\n      l = 2\n    elseif\
    \ chr >= \"A\" and chr <= \"Z\" then\n      chr = chr - 64\n      l = 2\n    end\n\
    \    for j=1,l do\n      str = str .. chr\n    end\n  end\n  return str:reverse()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtsm4pn4.lua:22:\
    \ attempt to sub a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmpxtsm4pn4.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpxtsm4pn4.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if #s < 1\
    \ then return s end\n  local newString = ''\n  for i = 1, #s do\n    if s[i] ~=\
    \ tolower(s[i]) then\n      newString = newString .. toupper(s[i])\n    else\n\
    \      newString = newString .. s[i]\n    end\n  end\n  return solve(newString)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3wadrf_.lua:17:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpo3wadrf_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpo3wadrf_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local r =\
    \ '', true\n  for i = 1, #s do\n    if s[i] >= 'a' and s[i] <= 'z' then\n    \
    \  if s[i] >= 'A' and s[i] <= 'Z' then\n        s = string.gsub(s, '%c%c' % (s[i],\
    \ string.upper(s[i])), '%c%c' % (s[i], string.lower(s[i])))\n      else\n    \
    \    s = string.gsub(s, '%c' % (s[i]), '%c' % (string.upper(s[i])))\n      end\n\
    \    else\n      if s[i] >= '0' and s[i] <= '9' then\n        s = string.gsub(s,\
    \ '%c' % (s[i]), '%c' % (string.lower(s[i])))\n      end\n    end\n  end\n  assert(string.gsub(s,\
    \ '.', '') == '.')\n  for i = 1, #s do\n    if s[i] ~= 'A' and s[i] ~= 'a' then\n\
    \      if s[i] ~= 'a' and s[i] ~= 'A' then\n        s = string.gsub(s, '%c' %\
    \ (string.upper(s[i])), '%c' % (string.lower(s[i])))\n      end\n    end\n  end\n\
    \  assert(s ~= '.')\n  return s\nend\nprint(solve('1234'))\nprint(solve('ab'))\n\
    print(solve('#a@C'))\nprint(solve('.'))\nprint(solve(' '))\nprint(solve('0'))\n\
    print(solve('1'))\nprint(solve('1234567890'))\nprint(solve('a'))\nprint(solve('A'))\n\
    print(solve('#a@C'))\nprint(solve('#a@c'))\nprint(solve('#a@C '))\nprint(solve('a@C'))\n\
    print(solve('a@c '))\nprint(solve('a@c .'))\nprint(solve('a@c@'))\nprint(solve('0@1@2@3@4@5@6@7@8@9'))\n\
    print(solve('a'))\nprint(solve('A'))\nprint(solve('#a@C'))\nprint(solve(''))\n\
    print(solve('1'))\nprint(solve('1234'))\nprint(solve('1234567890'))\nprint(solve('a\
    \ a a'))\nprint(solve('A A '))\nprint(solve('ab'))\nprint(solve('ab a'))\nprint(solve('abb'))\n\
    print(solve('abc abc abc'))\nprint(solve('a abc ab a'))\nprint(solve('a b c d'))\n\
    print(solve('a b c d e f g'))\nprint(solve('a@#c'))\nprint(solve('a@b#c'))\nprint(solve('abc@#a#@'))\n\
    print(solve('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6n649jml.lua:18: '')'' expected near '',''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\n\
    \  local length = #s\n  local count = 0\n  for i = 1,length do\n    if s[i] ~=\
    \ nil then\n      count = count + 1\n      if s[i] == s[count] then\n        count\
    \ = count + 1\n      elseif s[count] ~= nil then\n        result = table.concat(s..s[count]..s[count+1],\
    \ \"/\")\n        break\n      elseif s[count] == s[count+1] then\n        result\
    \ = table.concat(s[count]..s[count+1], \"/\")\n        break\n      end\n    end\n\
    \  end\n  if result ~= nil then\n    return result\n  end\n  return string.lower(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9znb4n_f.lua:40:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp9znb4n_f.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = s -- In case someone passes us a table.\n    local i = 1\n    while i < #s\
    \ do\n        if string.sub(s,i,1) == '#' then\n            i = i + 1\n      \
    \      i = string.gsub(s, \"#(.)\", function(c) return string.upper(c) end)\n\
    \        elseif string.sub(s,i,1) == '@' then\n            i = i + 1\n       \
    \     i = string.gsub(s, \"@(.)\", function(c) return string.lower(c) end)\n \
    \       else\n            i = i + 1\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw40ev1iu.lua:33:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpw40ev1iu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local r =\
    \ ''\n  local a\n  for i = 1, #s do\n    a = tolower(s[i])\n    if a ~= nil then\
    \ r  = r..toupper(a) end\n  end\n  if #r > 0 then r = r..tolower(s[#s]) end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpetavc4wk.lua:17:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpetavc4wk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpetavc4wk.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- code here\n\
    \  local result = ''\n  for i = 1, #s do\n    local c = string.lower(s[i])\n \
    \   local fc = string.upper(s[i])\n    if c == fc or c:byte(0) ~= fc:byte(0) then\n\
    \      result = string.sub(s, i - 1, i) .. result\n    end\n  end\n  if #result\
    \ == 0 then\n    local fc = string.upper(s)\n    result = string.sub(s, #s - 1,\
    \ #s) .. fc\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0o6ev0c3.lua:17:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp0o6ev0c3.lua:17: in local 'candidate'\n\t/tmp/tmp0o6ev0c3.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    for i=1,#s\
    \ do\n        if string.sub(s,i,i)==\"#\" then\n            s=string.gsub(s,\"\
    #\",string.char(string.byte(\"a\")))\n        elseif string.sub(s,i,i)==\"@\"\
    \ then\n            s=string.gsub(s,\"@\",string.char(string.byte(\"A\")))\n \
    \       elseif string.sub(s,i,i)==\"A\" then\n            s=string.gsub(s,\"A\"\
    ,string.char(string.byte(\"a\")))\n        elseif string.sub(s,i,i)==\"a\" then\n\
    \            s=string.gsub(s,\"a\",string.char(string.byte(\"A\")))\n        end\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_j2vu5m.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asDf\"\nstack traceback:\n\t/tmp/tmpd_j2vu5m.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s:gsub('([^A-Z^a-z]*)',function(x)\n\
    \    return x:lower()\n  end)\n  s = s:gsub('([A-Z^a-z]*)',function(x)\n    return\
    \ x:upper()\n  end)\n  if s == '' then\n    return s\n  else\n    return s:reverse():gsub('^([^a-z]*)','%1')\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpp6wv1d.lua:30:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmprpp6wv1d.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal ans\
    \ = s\n\tlocal i, l = s:len()\n\tfor i = 1, l do\n\t\tif ans[i] ~= nil and ans[i]:upper()\
    \ ~= nil then\n\t\t\tans[i] = ans[i]:upper()\n\t\telseif ans[i] ~= nil and ans[i]:lower()\
    \ ~= nil then\n\t\t\tans[i] = ans[i]:lower()\n\t\telse\n\t\t\tans[i] = s[i]\n\t\
    \tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkruwah9.lua:16:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpwkruwah9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpwkruwah9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s:gsub(\"\
    .\", function (letter)\n    letter = letter:lower()\n    if letter:sub(1, 1) ~=\
    \ 'a' and letter:sub(1, 1) ~= 'e' and letter:sub(1, 1) ~= 'i' and letter:sub(1,\
    \ 1) ~= 'o' and letter:sub(1, 1) ~= 'u' then\n      letter = letter:sub(1, 1)..letter:sub(1,\
    \ 2)\n    end\n    return letter\n  end)\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs_g00k6.lua:27:\
    \ expected: \"aSdF\"\nactual: \"assddff\"\nstack traceback:\n\t/tmp/tmpxs_g00k6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Write\
    \ your code here\n  local output\n  \n  if s:sub(1, 1) ~= '#' then\n    \n   \
    \ local output = ''\n    local letters = {\n      'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n      'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'\n    }\n    \n    for i = 1, #s do\n      local\
    \ c = s:sub(i, i)\n      if letters[c] then\n        \n        c = letters[c]\n\
    \        \n        if i == 1 then\n          local x = toupper(c)\n        end\n\
    \        \n        if i == #s then\n          local x = tolower(c)\n        end\n\
    \        \n        output =.. x\n      else\n        output = output .. c\n  \
    \    end\n    end\n    \n    -- print (output)\n    return output\n  else\n  \
    \  \n    local output = ''\n    local letters = {\n      'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n      'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n    }\n    \n    for i = 1, #s do\n     \
    \ local c = s:sub(i, i)\n      if letters[c] then\n        \n        c = letters[c]\n\
    \        \n        if i == 1 then\n          local x = toupper(c)\n        end\n\
    \        \n        if i == #s then\n          local x = tolower(c)\n        end\n\
    \        \n        output =.. x\n      else\n        output = output .. c\n  \
    \    end\n    end\n    \n    -- print (output)\n    return output\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2a5ab5_d.lua:39: unexpected symbol near ''..''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s ~= nil\
    \ then\n    local result = \"\"\n    for i = 1, #s do\n      if string.sub(s,\
    \ i, i) ~= nil then\n        local char = string.sub(s, i, i)\n        local uppercase\
    \ = string.lower(char)\n        local lowercase = string.upper(char)\n       \
    \ uppercase = string.gsub(uppercase, '[%a]', function(c) c == \"a\" and \"A\"\
    \ or c)\n        lowercase = string.gsub(lowercase, '[%a]', function(c) c == \"\
    a\" and \"A\" or c)\n        result = result .. uppercase .. lowercase\n     \
    \ else\n        result = result .. string.sub(s,i,i)\n      end\n    end\n   \
    \ return result\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4f9724tk.lua:21: syntax error near ''==''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s ~= nil\
    \ and s:len() then\n    if string.sub(s,1,1) ~= '#' then\n      if string.find(s,\"\
    ^[a-zA-Z]\",1,true) then\n        return string.upper(string.sub(s, 1, string.len(s)-1))\n\
    \      else\n        return string.lower(string.sub(s, 1, string.len(s)-1))\n\
    \      end\n    else\n      return s\n    end\n  else\n    return s\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbxukx96.lua:32:\
    \ expected: \"aSdF\"\nactual: \"asd\"\nstack traceback:\n\t/tmp/tmpgbxukx96.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  \n  for i = 1, #s do\n    local a = tolower(s[i])\n    \n    if a\
    \ == s[i] then\n      result = toupper(result)\n    else\n      result = toupper(result)..a[i]\n\
    \    end\n  end\n  \n  return result\nend\nprint(solve(\"hello\"))\nprint(solve(\"\
    12x\"))\nprint(solve(\"1\"))\nprint(solve(\"23\"))\nprint(solve(\"ab\"))\nprint(solve(\"\
    #a@C\"))\nprint(solve(\"#A@c\"))\nprint(solve(\"A\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    b\"))\nprint(solve(\"AB\"))\nprint(solve(\"aBc\"))\nprint(solve(\"aBC\"))\nprint(solve(\"\
    1\"))\nprint(solve(\"12\"))\nprint(solve(\"12x\"))\nprint(solve(\"23\"))\nprint(solve(\"\
    abc\"))\nprint(solve(\"ABc\"))\nprint(solve(\"AbC\"))\nprint(solve(\"AB\"))\n\
    print(solve(\"aBc\"))\nprint(solve(\"aBC\"))\nprint(solve(\"ABC\"))\nprint(solve(\"\
    aBC\"))\nprint(solve(\"a1\"))\nprint(solve(\"a12\"))\nprint(solve(\"a123\"))\n\
    print(solve(\"a1234\"))\nprint(solve(\"a12345\"))\nprint(solve(\"a123456\"))\n\
    print(solve(\"a1234567\"))\nprint(solve(\"a12345678\"))\nprint(solve(\"a123456789\"\
    ))\nprint(solve(\"a1234567890\"))\nprint(solve(\"a12345678901\"))\nprint(solve(\"\
    a123456789012\"))\nprint(solve(\"a1234567890123\"))\nprint(solve(\"a12345678901234\"\
    ))\nprint(solve(\"a123456789012345\"))\nprint(solve(\"a1234567890123456\"))\n\
    print(solve(\"a12345678901234567\"))\nprint(solve(\"a123456789012345678\"))\n\
    print(solve(\"a1234567890123456789\"))\nprint(solve(\"a12345678901234567890\"\
    ))\nprint(solve(\"a123456789012345678901\"))\nprint(solve(\"a1234567890123456789012\"\
    ))\nprint(solve(\"a12345678901234567890123\"))\nprint(solve(\"a123456789012345678901234\"\
    ))\nprint(solve(\"a1234567890123456789012345\"))\nprint(solve(\"a12345678901234567890123456\"\
    ))\nprint(solve(\"a123456789012345678901234567\"))\nprint(solve(\"a1234567890123456789012345678\"\
    ))\nprint(solve(\"a12345678901234567890123456789\"))\nprint(solve(\"a123456789012345678901234567890\"\
    ))\nprint(solve(\"a1234567890123456789012345678901\"))\nprint(solve(\"a12345678901234567890123456789012\"\
    ))\nprint(solve(\"a1234567890123456789\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuq7ekj5p.lua:85: unfinished string near ''"a1234567890123456789''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- your code\
    \ here\n  \n  if #s == 0 then\n    return s\n  elseif s[1] ~= nil then\n    if\
    \ s[1] == string.lower(s[1]) then\n      return string.upper(string.sub(s,1,1))\
    \ + string.lower(string.sub(s,2))\n    elseif s[1] == string.upper(s[1]) then\n\
    \      return string.lower(string.sub(s,1,1)) + string.upper(string.sub(s,2))\n\
    \    else\n      return s\n    end\n  else\n    return s\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxqhzw_2.lua:34:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpyxqhzw_2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local letters\
    \ = {}\n   for i,v in ipairs(s) do\n      if type(v) == 'number' then\n      \
    \   v = s:sub(i,i)\n         if v:byte(1) ~= 'x' then letters[v] = true end\n\
    \      end\n   end\n   if #letters > 0 then\n      return table.concat(table.sort(letters),\
    \ '') \n   end\n   return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeby9x2rt.lua:30:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpeby9x2rt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s:match\
    \ '^[a-z]+$' then return s:gsub('([a-z])', function(x) return x:lower() end) end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh68890d.lua:21:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpsh68890d.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local function\
    \ lower(s)\n    local i = 0\n    while i < #s do\n      if not s[i] then\n   \
    \     return s\n      end\n      if s[i] ~= string.upper(s[i]) then\n        return\
    \ s\n      end\n      i = i + 1\n    end\n  end\n  local function upper(s)\n \
    \   local i = 0\n    while i < #s do\n      if not s[i] then\n        return s\n\
    \      end\n      if s[i] ~= string.lower(s[i]) then\n        return s\n     \
    \ end\n      i = i + 1\n    end\n  end\n  local function reverse(str)\n    local\
    \ result = ''\n    for _, c in string.gmatch(str, '[^%s]+') do\n      result =\
    \ result .. c:reverse()\n    end\n    return result\n  end\n  local str = lower(s)\n\
    \  if str:match('^[^%s]+$') then\n    return s\n  end\n  str = upper(s)\n  if\
    \ str:match('^[^%s]+$') then\n    return s\n  end\n  return reverse(s)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ang6dw6.lua:59:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp1ang6dw6.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s=s:lower()\n\
    \  local reverseString='';\n  for i,c in ipairs(s) do\n    if c:byte()<=95 and\
    \ c:byte()>=97 and c:byte()<=122 then\n      reverseString=reverseString..string.char(tonumber(c))\n\
    \    else\n      reverseString=reverseString..c\n    end\n  end\n  return reverseString\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzy053tm.lua:29:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplzy053tm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local chars\
    \ = {}\n    for i = 1, #s do\n        table.insert(chars, s[i])\n    end\n   \
    \ local result = ''\n    for i = 1, #chars do\n        if string.sub(s, '^%s*'\
    \ % chars[i]) == s then\n            table.insert(result, string.upper(string.sub(s,\
    \ '%s*' % chars[i])))\n        else\n            table.insert(result, string.lower(string.sub(s,\
    \ '%s*' % chars[i])))\n        end\n    end\n    if #chars == 0 then\n       \
    \ result = s\n    end\n    return result\nend\n</code>\n<|/ a dscore=2 tags=lua,string\
    \ |>\n<| c |>\nThe solution only works for strings that have at least two characters.\
    \ For example, the code above outputs \"Aa\" instead of \"aab\".\n<|/ c |>\n<|\
    \ c |>\nI've fixed the bug which was in first solution which was giving wrong\
    \ output\n<|/ c |>\n<| a dscore=2 |>\nThis works in Lua 5.1.4 on MacOS:\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj6gxt3o5.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local str=string.gsub(s,\"\
    ([a-z])\",\n    function(t)\n      if t==\"a\" then\n        t=\"A\"\n      else\n\
    \        t=\"a\"\n      end\n      return t\n    end)\n  if str==\"aA\" then\n\
    \    return string.gsub(string.gsub(s,\"a\",\n      function(t)\n        if t==\"\
    A\" then\n          t=\"a\"\n        else\n          t=\"A\"\n        end\n  \
    \      return t\n      end),\"A\",\n      function(t)\n        if t==\"a\" then\n\
    \          t=\"A\"\n        else\n          t=\"a\"\n        end\n        return\
    \ t\n      end)\n  end\n  return str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4798b9fb.lua:48:\
    \ expected: \"aSdF\"\nactual: \"AaDa\"\nstack traceback:\n\t/tmp/tmp4798b9fb.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local str\
    \ = s:upper()\n    local str_arr = {}\n    for i = 1, #str do\n        if string.sub(s,\
    \ i, i) ~= '' then\n            str_arr[#str_arr + 1] = string.sub(s, i, i)\n\
    \        end\n    end\n    for i = #str_arr, 1, -1 do\n        if str_arr[i] ~=\
    \ '' then\n            if str_arr[i] == 'A' or str_arr[i] == 'a' then\n      \
    \          str_arr[i] = 'a'\n            elseif str_arr[i] == 'B' or str_arr[i]\
    \ == 'b' then\n                str_arr[i] = 'b'\n            elseif str_arr[i]\
    \ == 'C' or str_arr[i] == 'c' then\n                str_arr[i] = 'c'\n       \
    \     elseif str_arr[i] == 'D' or str_arr[i] == 'd' then\n                str_arr[i]\
    \ = 'd'\n            elseif str_arr[i] == 'E' or str_arr[i] == 'e' then\n    \
    \            str_arr[i] = 'e'\n            elseif str_arr[i] == 'F' or str_arr[i]\
    \ == 'f' then\n                str_arr[i] = 'f'\n            elseif str_arr[i]\
    \ == 'G' or str_arr[i] == 'g' then\n                str_arr[i] = 'g'\n       \
    \     elseif str_arr[i] == 'H' or str_arr[i] == 'h' then\n                str_arr[i]\
    \ = 'h'\n            elseif str_arr[i] == 'I' or str_arr[i] == 'i' then\n    \
    \            str_arr[i] = 'i'\n            elseif str_arr[i] == 'J' or str_arr[i]\
    \ == 'j' then\n                str_arr[i] = 'j'\n            elseif str_arr[i]\
    \ == 'K' or str_arr[i] == 'k' then\n                str_arr[i] = 'k'\n       \
    \     elseif str_arr[i] == 'L' or str_arr[i] == 'l' then\n                str_arr[i]\
    \ = 'l'\n            elseif str_arr[i] == 'M' or str_arr[i] == 'm' then\n    \
    \            str_arr[i] = 'm'\n            elseif str_arr[i] == 'N' or str_arr[i]\
    \ == 'n' then\n                str_arr[i] = 'n'\n            elseif str_arr[i]\
    \ == 'O' or str_arr[i] == 'o' then\n                str_arr[i] = 'o'\n       \
    \     elseif str_arr[i] == 'P' or str_arr[i] == 'p' then\n                str_arr[i]\
    \ = 'p'\n            elseif str_arr[i] == 'Q' or str_arr[i] == 'q' then\n    \
    \            str_arr[i] = 'q'\n            elseif str_arr[i] == 'R' or str_arr[i]\
    \ == 'r' then\n                str_arr[i] = 'r'\n            elseif str_arr[i]\
    \ == 'S\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq2oksmyj.lua:59: unfinished string near ''''S''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal ret\
    \ = '' -- ret = '' because we need the empty string in the end later\n\tlocal\
    \ capitals = ''\n\t-- First we check for all the letters that are in Capitals.\n\
    \t-- For example 'a' is in Capitals for every language 'abc'\n\tfor _,c in pairs(s:gsub(\"\
    %[%a]\", function(c) capitals=capitals..c end)) do\n\t\tif capitals then\n\t\t\
    \tif c == 'a' or c == 'A' then\n\t\t\t\t-- The char is a lowercase char, but we\
    \ reverse it\n\t\t\t\tret = ret..c\n\t\t\telse\n\t\t\t\t-- The char is not in\
    \ Capitals, we keep the char as is\n\t\t\t\tret = ret..c\n\t\t\tend\n\t\telse\n\
    \t\t\t-- We found a letter, we will reverse its case\n\t\t\tret = ret..c\n\t\t\
    end\n\tend\n\t-- Now we reverse the string\n\tret = ret:reverse()\n\t-- Now we\
    \ add all the Capitals\n\tfor _,c in pairs(capitals:gsub(\"%[%a]\", function(c)\
    \ ret=ret..c end)) do\n\t\tret = ret..c\n\tend\n\t-- Return the reversed string\n\
    \treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99l8vaqu.lua:18:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp99l8vaqu.lua:18: in local 'candidate'\n\t/tmp/tmp99l8vaqu.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  if s == '' then\n    return s\n  else\n    if s[1] == 'a' then\n      return\
    \ string.upper(string.sub(s,2))\n    elseif s[1] == 'c' then\n      return string.sub(s,1,2)..string.upper(string.sub(s,3,4))\n\
    \    else\n      return s\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpynqg5x.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpfpynqg5x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  s = string.gsub(s, \"([A-Z]+)\", string.upper)\n  if s == \"\" then\n    return\
    \ s\n  else\n    return string.gsub(s, \"([a-z]+)\", string.lower)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjytmha2.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpjjytmha2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = ''\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n        if\
    \ string.sub(c,1,1) == string.sub(c,2,2) then\n            table.insert(res,string.sub(c,2,2),string.sub(c,1,1))\n\
    \        else\n            table.insert(res,c)\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr41wjbvn.lua:20:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpr41wjbvn.lua:20: in local 'candidate'\n\t/tmp/tmpr41wjbvn.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    for i =\
    \ 1, #s do\n        local c = string.sub(s,i,i)\n        if c ~= '#' then\n  \
    \          s[i] = string.upper(c)\n        else\n            s[i] = string.lower(c)\n\
    \        end\n    end\n    return table.concat(s,\"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsu1ss9c.lua:17:\
    \ attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmpgsu1ss9c.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpgsu1ss9c.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.gsub(s,\
    \ '[%c%a%d]', function(match)\n    if match ~= '' then\n      local char = string.lower(match)\n\
    \      if string.find(string.upper(match), char) ~= nil then\n        return string.upper(match)\n\
    \      else\n        return string.lower(match)\n      end\n    else\n      return\
    \ ''\n    end\n  end)\n  if s ~= '' then\n    return s\n  else\n    return string.reverse(s)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfdf676q.lua:36:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpxfdf676q.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local news\
    \ = \"\"\n    for i=1,#s do\n        if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n            news = news..string.sub(s,i,i)\n        else\n           \
    \ news = news..string.sub(s,i,i)..string.sub(s,i,i)\n        end\n    end\n  \
    \  return news\nend\n</cell>\n<code language=julia-1.0>\nprintln(\"\\nTesting\"\
    )\n</cell>\n<code language=julia-1.0>\nprint(\"\\nTesting solve('1234')\")\n@time\
    \ solve(\"1234\")\n@time solve(\"ABC\")\n@time solve(\"AB\")\n@time solve(\"#\"\
    )\n@time solve(\"#a\")\n</cell>\n<code language=julia-1.0>\nprint(\"\\nTesting\
    \ solve('ab')\")\n@time solve(\"ab\")\n@time solve(\"AB\")\n@time solve(\"a\"\
    )\n@time solve(\"A\")\n@time solve(\"b\")\n@time solve(\"B\")\n@time solve(\"\
    C\")\n</cell>\n<code language=julia-1.0>\nprint(\"\\nTesting solve('##a@C')\"\
    )\n@time solve(\"##a@C\")\n@time solve(\"###a@c\")\n@time solve(\"###a\")\n</cell>\n\
    <code language=julia-1.0>\nprint(\"\\nTesting solve('#a@C')\")\n@time solve(\"\
    #a@C\")\n@time solve(\"a@C\")\n@time solve(\"#A@C\")\n@time solve(\"A@C\")\n@time\
    \ solve(\"#a@C\")\n@time solve(\"a@C\")\n@time solve(\"#A@C\")\n@time solve(\"\
    A@C\")\n@time solve(\"#a@C\")\n@time solve(\"a@C\")\n@time solve(\"#A@C\")\n@time\
    \ solve(\"A@C\")\n</cell>\n<code language=julia-1.0>\nprint(\"\\nTesting solve('##a@C')\"\
    )\n@time solve(\"##a@C\")\n@time solve(\"###a@c\")\n@time solve(\"###a\")\n</cell>\n\
    <code language=julia-1.0>\nprint(\"\\nTesting solve('#a@C')\")\n@time solve(\"\
    #a@C\")\n@time solve(\"a@C\")\n@time solve(\"#A@C\")\n@time solve(\"A@C\")\n@time\
    \ solve(\"#a@C\")\n@time solve(\"a@C\")\n@time solve(\"#A@C\")\n@time \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpijsx17zo.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local t =\
    \ {}\n  for i=1,#s do\n    local c = toupper(s[i])\n    if not (c == 'A' or c\
    \ == 'a') then\n      t[i] = c\n    end\n  end\n  return table.concat(t, \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmposxb0orm.lua:16:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmposxb0orm.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmposxb0orm.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local count=0\n\
    \  local result=''\n  for c in string.gmatch(s, '([^\\n]+)(.*)') do\n    if c~=nil\
    \ then\n      local c1=string.lower(c)\n      local c2=string.upper(c)\n     \
    \ c=c1..c2\n      count=(count+1)\n    else\n      c=''\n    end\n    result=result..c\n\
    \  end\n  if count==0 then\n    result=string.lower(result)\n  end\n  return result\n\
    end\nprint(solve('abcd')..'\\n')\nprint(solve('Abcd')..'\\n')\nprint(solve('ab#')..'\\\
    n')\nprint(solve('#a@C')..'\\n')\nprint(solve('b#a')..'\\n')\nprint(solve('bBAB')..'\\\
    n')\nprint(solve('bab')..'\\n')\nprint(solve('#@C')..'\\n')\nprint(solve('C#@')..'\\\
    n')\nprint(solve('abc')..'\\n')\nprint(solve('abaB')..'\\n')\nprint(solve('aBAb')..'\\\
    n')\nprint(solve('aBbbb')..'\\n')\nprint(solve('abb')..'\\n')\nprint(solve('aAbB')..'\\\
    n')\nprint(solve('aAaB')..'\\n')\nprint(solve('abBA')..'\\n')\nprint(solve('abaB')..'\\\
    n')\nprint(solve('abbA')..'\\n')\nprint(solve('aaab')..'\\n')\nprint(solve('aAbB')..'\\\
    n')\nprint(solve('aAaB')..'\\n')\nprint(solve('aabB')..'\\n')\nprint(solve('abBA')..'\\\
    n')\nprint(solve('abaB')..'\\n')\nprint(solve('abbA')..'\\n')\nprint(solve('aabB')..'\\\
    n')\nprint(solve('abBA')..'\\n')\nprint(solve('abaB')..'\\n')\nprint(solve('abbA')..'\\\
    n')\nprint(solve('aabB')..'\\n')\nprint(solve('abBA')..'\\n')\nprint(solve('abaB')..'\\\
    n')\nprint(solve('abbA')..'\\n')\nprint(solve('aabB')..'\\n')\nprint(solve('abBA')..'\\\
    n')\nprint(solve('abaB')..'\\n')\nprint(solve('abbA')..'\\n')\nprint(solve('aabB')..'\\\
    n')\nprint(solve('abBA')..'\\n')\nprint(solve('abaB\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1co_d0_v.lua:72: unfinished string near ''''abaB''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s:lower()\n\
    \  local len = #s\n  \n  if len == 0 then\n    return s\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw2h0szj5.lua:34: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = {}\n    for i=1,#s do\n        if s[i] ~= nil then\n            local a =\
    \ string.lower(s[i])\n            if a ~= i then\n                local b = string.upper(s[i])\n\
    \                res[i] = b\n                res[a] = i\n            end\n   \
    \     end\n    end\n    return table.concat(res,'')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5xbqalk.lua:31:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpi5xbqalk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s:upper()\n\
    \  local reverse = ''\n  local cnt = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= '#' then\n      if string.sub(s, i, i) ~= '@' then\n        reverse\
    \ = reverse .. string.sub(s, i, i)\n        cnt = cnt + 1\n      end\n    end\n\
    \  end\n  if cnt > 0 then\n    return reverse\n  else\n    return s\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbkb4_9b.lua:35:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpwbkb4_9b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == nil\
    \ then return end\n  local new_s = ''\n  for i=1,#s do\n    if s[i] ~= nil and\
    \ s[i] == s[#s] then -- Case insensitive\n      if tonumber(s[i]) then\n     \
    \   if s[#s] > i then -- Uppercase\n          new_s = new_s .. toupper(s[#s])\
    \ .. tolower(s[i])\n        else\n          new_s = new_s .. tolower(s[#s]) ..\
    \ toupper(s[i])\n        end\n      else\n        new_s = new_s .. s[i]\n    \
    \  end\n    else\n      new_s = new_s .. s[i]\n    end\n  end\n  if new_s == s\
    \ then -- Empty string\n    return new_s\n  else\n    return solve(new_s)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjpvk4d7.lua:28:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcjpvk4d7.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpcjpvk4d7.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal result\
    \ = \"\"\n\tlocal i = 1 and #s\n\tfor i do\n\t\tif s[i] ~= nil then\n\t\t\tlocal\
    \ char = toupper(s[i])\n\t\t\tif char == \"A\" or char == \"a\" then\n\t\t\t\t\
    result = tolower(result)..toupper(s[i])\n\t\t\telse\n\t\t\t\tresult = s[i]\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn result and result or s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplddxgx9d.lua:16: ''='' or ''in'' expected near ''do''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s[i]\n        if isalpha(c) then\n\
    \            t[#t+1] = string.lower(c)\n        else\n            t[#t+1] = c\n\
    \        end\n    end\n    return table.concat(t)\nend\n</cell>\n<text>\nQuestion\
    \ 2\nThe following code contains a function called \"isPermutation\".  It should\
    \ return true if the given string is permutation of a permutation else it should\
    \ return false.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnp93hs6e.lua:25: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == ''\
    \ then\n    return ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnhe_tfeh.lua:31: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res,\
    \ l, r = {}, 0, 1\n    for i=1,#s do\n        local c = tolower(s[i])\n      \
    \  if c ~= s[i] then\n            res[l] = s[i]\n            l++\n        else\n\
    \            if l > r then\n                res[l] = res[r]\n            end\n\
    \            res[r] = c\n            r, l = r + 1, l+1\n        end\n    end\n\
    \    if l > r then\n        res[l] = res[r]\n    end\n    return table.concat(res,\
    \ \"@\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps8sotcls.lua:19: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local letters\
    \ = {}\n    for letter in s:gmatch('%w+') do letters[letter] = true end\n    local\
    \ reverse = {}\n    for letter in pairs(letters) do reverse[letter] = letters[letter]\
    \ end\n    for i = #s, 1, -1 do\n        reverse[s:sub(i, i)] = false\n    end\n\
    \    local result = ''\n    for i = 1, #reverse do\n        if reverse[i] then\
    \ result = result .. toupper(i) end\n    end\n    if result == '' then result\
    \ = '' end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_3455p5.lua:32:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8_3455p5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\
    \ = {}\n    for idx, char1im in pairs(s) do\n        if char1im:isalpha() then\n\
    \            table.insert(result, tostring(char1im:toupper():reverse()))\n   \
    \     else\n            table.insert(result, tostring(char1im:reverse()))\n  \
    \      end\n    end\n    if #result > 0 then\n        return table.concat(result)\n\
    \    else\n        return s\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0dy58pn.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpg0dy58pn.lua:15: in local 'candidate'\n\t/tmp/tmpg0dy58pn.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts = s:lower()\n\
    \ts = s:gsub(\"%l\",function(c)\n\t\tif c == 'a' then\n\t\t\treturn 'b'\n\t\t\
    elseif c == 'b' then\n\t\t\treturn 'a'\n\t\telse\n\t\t\treturn c\n\t\tend\n\t\
    end)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55hjaq69.lua:30:\
    \ expected: \"aSdF\"\nactual: \"bsdf\"\nstack traceback:\n\t/tmp/tmp55hjaq69.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local newString\
    \ = s:gsub(\"[^A-Z]\", function(c)\n        return string.char(tonumber(c))\n\
    \    end)\n    if newString == s then return s end\n    return newString\nend\n\
    return solve\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4i21fp99.lua:21: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local ret\
    \ = ''\n  s:gsub(function(c) -- change case only if not a letter\n    if c:match('[a-zA-Z]')==nil\
    \ then \n      ret = ret .. c:upper() .. c:lower() \n    else\n      ret = ret\
    \ .. c\n    end\n  end)\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyeq1do45.lua:15:\
    \ bad argument #1 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpyeq1do45.lua:15: in local 'candidate'\n\t/tmp/tmpyeq1do45.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts = string.lower(s)\n\
    \ts = string.upper(s)\n\tif s:match('^[a-zA-Z]+$') then\n\t\treturn s:gsub('^([a-zA-Z])([A-Z])','\\\
    U%1:\\2')\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwq5x4y_p.lua:17: invalid escape sequence near ''''\U''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local function\
    \ is_letter(letter)\n    return type(letter) ~= 'string' or letter:byte(1) ~=\
    \ 'a'\n  end\n  local buffer = \"\"\n  for i, letter in ipairs(s) do\n    local\
    \ upper = is_letter(letter)\n    if upper then letter = letter:upper() end\n \
    \   buffer = buffer .. letter\n  end\n  if #buffer > 0 then return buffer else\
    \ return s:reverse() end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk5nml3c.lua:29:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmpqk5nml3c.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nlp33hw.lua:20:\
    \ expected: \"aSdF\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4nlp33hw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978257
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts=string.lower(s)\n\
    \tlocal res=\"\"\n\tfor i=1,#s do\n\t\tlocal c=s[i]\n\t\tlocal r=true\n\t\tif\
    \ string.find(string.upper(c),string.lower(c)) then\n\t\t\tr=false\n\t\telseif\
    \ string.find(string.upper(c),string.upper(c)) then\n\t\t\tc=string.upper(c)\n\
    \t\telseif string.find(string.lower(c),string.lower(c)) then\n\t\t\tr=false\n\t\
    \tend\n\t\tif r then\n\t\t\tres=res..c\n\t\telse\n\t\t\tres=res..s[i]\n\t\tend\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw3byk73.lua:19:\
    \ bad argument #1 to 'upper' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpxw3byk73.lua:19: in local 'candidate'\n\t/tmp/tmpxw3byk73.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local out\
    \ = ''\n   for _, v in ipairs(s) do out = out .. string.upper(v) end\n   return\
    \ out\nend\nprint(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "\n\n\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_xh2eyi.lua:25:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9_xh2eyi.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = s -- prevent rebinding s\n    local letters = {}\n    for i = 1, #s do\n \
    \       local c = string.sub(s, i, i)\n        if not letters[c] then\n      \
    \      letters[c] = true\n        else\n            s = string.gsub(s, '[%a]',\
    \ cToUp)\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe4jiw35.lua:30:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpoe4jiw35.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  for i = 1,\
    \ #s do\n    local c = string.sub(s,i,i)\n    if c ~= nil and c:byte() ~= nil\
    \ then\n      c = string.char(c:byte()) -- convert to char\n      c = string.upper(c)\
    \ -- upper case\n      c = string.lower(c) -- lower case\n      c = c:sub(1) --\
    \ remove first char\n    else\n      c = nil\n    end\n    s[i] = c\n  end\n \
    \ return\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkd5_qzv.lua:24:\
    \ attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmpfkd5_qzv.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpfkd5_qzv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    local i = 0\n    while s[i] do\n        if string.sub(s,i,i+1) ~=\
    \ string.sub(s,i,i+1) then\n            table.insert(t,string.sub(s,i,i+1))\n\
    \        else\n            table.insert(t,string.sub(s,i,i+1))\n            i\
    \ = i + 1\n        end\n        i = i + 1\n    end\n    table.insert(t,string.sub(s,i,#s))\n\
    \    return table.concat(t, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohm1ecaq.lua:32:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpohm1ecaq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local new_s\
    \ = ''\n  for i=1,#s do\n    if string.sub(s,i,i) ~= '#' then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\n \
    \   end\n  end\n  -- print(new_s)\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ch2qphu.lua:29:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp2ch2qphu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\n\
    \    for i=1, #s do\n        if tostring(s[i]):match(\"[a-zA-Z]\")then\n     \
    \       local t\n            if tostring(s[i]):lower():sub(1,1):upper():sub(2)\n\
    \            then\n            else\n            \tt=tostring(s[i]):lower()\n\
    \            end\n        else\n            t=tostring(s[i])\n        end\n  \
    \  end\n    return t\nend\n</code>\n<|/ a tags=string,lua,algorithm dscore=4 |>\n\
    <| a dscore=4 |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6afiyinl.lua:29: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local newS\
    \ = string.lower(s)\n  -- Check first letter\n  if string.sub(s,1,1) ~= '#' then\n\
    \    newS = string.upper(newS)\n  end\n  -- Check last letter\n  if string.sub(s,string.len(s)-1,string.len(s))\
    \ ~= '#' then\n    newS = string.lower(newS)\n  end\n  return newS\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29n4osi3.lua:29:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp29n4osi3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- your code\
    \ goes here\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8__8hcke.lua:21:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp8__8hcke.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s ==\
    \ '' then\n        return '#'\n    end\n    local i, j, l, k, ans = 0, 0, #s,\
    \ 0\n    while i < j do\n        l = i - k\n        k = i - j\n        if s[i:l]\
    \ ~= '#' and s[i:l] ~= s[i] then return s[i] end\n        if k ~= 0 then\n   \
    \         l = l - k\n        end\n        ans = ans .. s[k:l]\n        i = l +\
    \ 1\n        j = i - 1\n    end\n    if ans == '#' then ans = '#' end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptnj1dssj.lua:21: function arguments expected near '']''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local l=string.len(s)\n\
    \    local re={}\n    local count=0\n    local flag\n    for i=1,l do\n      \
    \  flag=false\n        for j=1,l do\n            if string.sub(s,i,j)==\"#\" then\n\
    \                flag=true\n            elseif string.sub(s,i,j)==\"@\" then\n\
    \                flag=false\n            elseif flag=true then\n             \
    \   count+=1\n            end\n        end\n        if flag=false then\n     \
    \       re.[count]=string.sub(s,i,l)\n            count=0\n        end\n    end\n\
    \    local result=string.sub(s,1,l-1)\n    for i=1,#re do\n        result=string.sub(result,1,l-1)..string.sub(s,re[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf40jhvhw.lua:25: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  local newS = ''\n  for i = 1, string.len(s) do\n    if string.sub(s,i,i) ==\
    \ s[i] then\n      newS = string.sub(s,1,i)..string.sub(s,i+1,i) or newS\n   \
    \ else\n      newS = string.sub(s,1,i)..string.sub(s,i+1,i-1)..string.sub(s,i,i)\
    \ or newS\n    end\n  end\n  return string.lower(newS)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3gp5kh4.lua:29:\
    \ expected: \"aSdF\"\nactual: \"asdff\"\nstack traceback:\n\t/tmp/tmps3gp5kh4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\
    \ = {}\n    local index = 0\n    for i=1,#s do\n        if s[i] ~= nil then\n\
    \            if string.sub(s, index, index+1)..string.sub(s, index, index+1)==s[i]\
    \ then\n                index = index+1\n            else\n                table.insert(result,\
    \ string.sub(s, index+1, index-1))\n                index = index-1\n        \
    \    end\n        else\n            table.insert(result, string.sub(s, index+1,\
    \ index+1))\n            index = index+1\n        end\n    end\n    if index ~=\
    \ 1 then\n        table.insert(result, string.sub(s, index+1, index))\n    end\n\
    \    return table.concat(result, \"\")\nend\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nHe needs to return string, not table.\n<|/ c |>\n<| c |>\nThanks I will\
    \ try this and let you know if it works.\n<|/ c |>\n<| c |>\nI modified the code\
    \ above. It worked but it took too long to process. Any help would be really appreciated.\
    \ Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbvcfpb9.lua:34: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\n\
    \    for index, letter in ipairs(s) do\n        if letter ~= 'a' and letter ~=\
    \ 'A' then\n            letter = string.upper(letter)\n        elseif letter ==\
    \ 'a' or letter == 'A' then\n            letter = string.lower(letter)\n     \
    \   end\n        result = result .. letter\n    end\n    return string.sub(result,\
    \ 1, #result-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwffn9moj.lua:23:\
    \ attempt to get length of a nil value (local 'result')\nstack traceback:\n\t\
    /tmp/tmpwffn9moj.lua:23: in local 'candidate'\n\t/tmp/tmpwffn9moj.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  for i = 1, #s do\n    if s[i] >= 'a' and s[i] <= 'z' then\n      s[i] = string.upper(s[i])\n\
    \    else\n      s[i] = s[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuv_91i47.lua:16:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpuv_91i47.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpuv_91i47.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == ''\
    \ then\n    return ''\n  end\n  local result = s:sub(1, #s)\n  for i = 1, #result\
    \ do\n    local letter = string.sub(result, i, i)\n    if letter:match('[a-z]')\
    \ then\n      letter = toupper(letter)\n    else\n      letter = tolower(letter)\n\
    \    end\n    local new_letter = letter\n    if letter:match('[a-z]') then\n \
    \     new_letter = letter:sub(1, #letter)\n    end\n    result = result:sub(i\
    \ + 1, #result)\n    result = result:sub(#letter + 1, #result)\n    result = result\
    \ .. new_letter\n  end\n  return result\nend\nprint(solve('1234'))\nprint(solve('ab'))\n\
    print(solve('#a@C'))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp8cnx28yf.lua:23: attempt to call a nil value (global 'tolower')\n\
    stack traceback:\n\t/tmp/tmp8cnx28yf.lua:23: in local 'solve'\n\t/tmp/tmp8cnx28yf.lua:35:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal a =\
    \ s:match(\"%a([A-Z])*\")\n\tif not a then return s end\n\treturn a:gsub(\"%U%2A\"\
    %{string.reverse, string.upper}:gsub(\"%U%2B\"%{string.upper, string.reverse},\
    \ \"%2A\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqynk9mp3.lua:16: '')'' expected near '':''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local alphabet\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n\
    \    local i = 0\n    local length = #s\n    while i < length do\n        if alphabet[string.sub(s,i,i)]\
    \ ~= nil then\n            local temp = string.sub(s,i,i)\n            temp =\
    \ string.upper(temp):lower() .. string.lower(temp)\n            result = result\
    \ .. temp\n        else\n            result = result .. string.sub(s,i,i)\n  \
    \      end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyuhw32z.lua:34:\
    \ expected: \"aSdF\"\nactual: \"AsD\"\nstack traceback:\n\t/tmp/tmpuyuhw32z.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Write\
    \ your code in Python 2.7\n  local reverse = ''\n  local i = 1\n  while i <= #s\
    \ do\n    if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i]\
    \ == 'u' then\n      reverse = reverse .. tostring(tostring(s[i])) .. tostring(tostring(s[i+1]))\n\
    \      i = i + 2\n    else\n      reverse = reverse .. tostring(s[i])\n    end\n\
    \    i = i + 1\n  end\n  return reverse\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8cw1l_5.lua:32:\
    \ expected: \"aSdF\"\nactual: \"nilnilnilnil\"\nstack traceback:\n\t/tmp/tmpj8cw1l_5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local reversed\
    \ = s\n    local idx = 0\n    while idx <= #s do\n        if s[idx] ~= \"\" then\n\
    \            if s[idx] ~= s[#s] then\n                reversed = reversed:lower()\
    \ .. reversed:upper()\n            else\n                reversed = reversed:upper()\
    \ .. reversed:lower()\n            end\n        end\n        idx = idx + 1\n \
    \   end\n    return reversed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sg4vo3p.lua:32:\
    \ expected: \"aSdF\"\nactual: \"ASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFASDFasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf\"\
    \nstack traceback:\n\t/tmp/tmp6sg4vo3p.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if #s <=\
    \ 0 then return '' end\n    local t = {}\n    for i=1,#s do t[#t+1] = s[i] end\n\
    \    local res = ''\n    for i=1,#t do\n        local c = tolower(t[i])\n    \
    \    if c~=c and c~=string(t[i]) then \n            res = res .. toupper(c)\n\
    \        else res = res .. c end\n    end\n    return res\nend\n</code>\n<|/ a\
    \ |>\n<| a dscore=3 tags=lua,string,lua-patterns |>\nI see this has already been\
    \ answered, but I wanted to add another way of doing this: \n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9xj4asih.lua:26: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local reversed\
    \ = string.gsub(s, \"[a-z]\", function (c)\n    return string.char(tonumber(string.sub(c,\
    \ 1, 1)) + string.sub(c, 2))\n  end)\n  reversed = string.gsub(reversed, \"[A-Z]\"\
    , function (c)\n    return string.char(tonumber(string.sub(c, 1, 1)) + string.sub(c,\
    \ 2))\n  end)\n  return reversed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6q5ta41f.lua:15:\
    \ attempt to add a 'nil' with a 'string'\nstack traceback:\n\t/tmp/tmp6q5ta41f.lua:15:\
    \ in function </tmp/tmp6q5ta41f.lua:14>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp6q5ta41f.lua:14: in local 'candidate'\n\t/tmp/tmp6q5ta41f.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal str\
    \ = string.gsub(s,\"([^a-z])\",function(t)\n\t\treturn string.upper(t) or string.lower(t)\n\
    \tend)\n\tif string.find(str,'^[A-Z]') then\n\t\treturn table.concat(string.gsub(string.gsub(str,string.upper,string.lower),\"\
    ([A-Z])\",function(t)\n\t\t\treturn string.upper(t)\n\t\tend))\n\tend\n\treturn\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpl55xnl.lua:18:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmphpl55xnl.lua:18: in local 'candidate'\n\t/tmp/tmphpl55xnl.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local str={}\n\
    \  for s in string.gmatch(s, \"([^\\\\w])\") do table.insert(str, string.upper(s))\
    \ end\n  if #str==0 then return s end\n  for i=1,#str do\n    if string.find(string.lower(str[i]),\
    \ string.upper(str[i]))==nil then\n      str[i]=str[i]..string.lower(str[i])\n\
    \    end\n  end\n  local res=string.gsub(s, '(%l+)', '%1'..string.upper(table.unpack(str)))\n\
    \  if string.find(res,'%1') then\n    res=string.gsub(string.sub(res,'%1',#res+1),'(%l+)',res..'$1')\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyph8e4it.lua:23:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpyph8e4it.lua:23: in local\
    \ 'candidate'\n\t/tmp/tmpyph8e4it.lua:32: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local letters\
    \ = {}\n    for i, letter in ipairs(s) do\n        letters[letter] = true\n  \
    \  end\n    if #letters == 0 then\n        return s\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2nbvcr7l.lua:35: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s.char()\n\
    \  local res = ''\n  for i=1, #s do -- enumerate string\n    if s[i] ~= nil then\n\
    \      res = res:..toupper(s[i])..s[i]\n    else\n      res = res:..tolower(s[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8_j_2hn.lua:18: <name> expected near ''..''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    -- Write\
    \ your code here.\n    return string.gsub(s, function(s) \n        return string.match(\
    \ s, '[A-Z]' ) ~= nil and\n            string.match( s, '[a-z]' ) ~= nil and\n\
    \            string.match( s, '[0-9]' ) ~= nil and\n            string.match(\
    \ s, '[#@]' ) ~= nil and\n            string.match( s, '[!@]' ) ~= nil and\n \
    \           string.match( s, '[$]' ) ~= nil and\n            string.match( s,\
    \ '[$@]' ) ~= nil and\n            string.match( s, '[$!]' ) ~= nil and\n    \
    \        string.match( s, '[$%]' ) ~= nil and\n            string.match( s, '[!$]'\
    \ ) ~= nil and\n            string.match( s, '[$%!]' ) ~= nil and\n          \
    \  string.match( s, '[$%@]' ) ~= nil and\n            string.match( s, '[$%#]'\
    \ ) ~= nil and\n            string.match( s, '[!$%]' ) ~= nil and\n          \
    \  string.match( s, '[!$%@]' ) ~= nil and\n            string.match( s, '[!$%#]'\
    \ ) ~= nil and\n            string.match( s, '[$!%]' ) ~= nil and\n          \
    \  string.match( s, '[$!%@]' ) ~= nil and\n            string.match( s, '[$!%#]'\
    \ ) ~= nil and\n            string.match( s, '[$%!#]' ) ~= nil and\n         \
    \   string.match( s, '[$%!%]' ) ~= nil and\n            string.match( s, '[$%!%@]'\
    \ ) ~= nil and\n            string.match( s, '[$%!%#]' ) ~= nil and\n        \
    \    string.match( s, '[$%!%$]' ) ~= nil and\n            string.match( s, '[$%!%$@]'\
    \ ) ~= nil and\n            string.match( s, '[$%!%$#]' ) ~= nil and\n       \
    \     string.match( s, '[$%!%$!]' ) ~= nil and\n            string.match( s, '[$%!%$%]'\
    \ ) ~= nil and\n            string.match( s, '[$%\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprcsj07oa.lua:44: unfinished string near ''''[$%''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub('(^|[^a-zA-Z])'\
    \ ..\n    '([A-Z]+)' ..\n    '([A-Z][a-z]*)' ..\n    '([a-z]+)' ..\n    '([^a-zA-Z])',\
    \ \n    function (a, b, c, d, e, f)\n      if b == '' then\n        return c..e..f\n\
    \      elseif e == '' then\n        return a..c..d\n      elseif f == '' then\n\
    \        return a..e..b\n      else\n        return a..e..b..f\n      end\n  \
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi6ugost.lua:35:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmppi6ugost.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- base case\n\
    \  if s == nil then return nil end\n  -- if letter, convert to upper case and\
    \ return\n  if s:byte(1) ~= nil then\n    local t = s:upper()\n    return t\n\
    \  end\n  -- else, loop over each letter\n  local t = \"\"\n  local i = 1\n  --\
    \ loop over each letter, append it to t\n  while i <= #s do\n    -- convert case\
    \ from lower case to upper case\n    if s[i]:byte(1) ~= nil then\n      t = string.sub(t,\
    \ 1, i-1) .. string.sub(s, i, i):upper()\n    else\n      -- append the letter\
    \ as-is\n      t = t .. s[i]\n    end\n    -- move to the next letter\n    i =\
    \ i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyix9ue5.lua:42:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpiyix9ue5.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s ==\
    \ '' then\n        return s\n    end\n    local s = s:gsub('.', function(c)\n\
    \        if c == 'a' then\n            return 'A'\n        end\n        if c ==\
    \ 'b' then\n            return 'B'\n        end\n        if c == 'c' then\n  \
    \          return 'C'\n        end\n        if c == '@' then\n            return\
    \ '@'\n        end\n        if c == 'A' then\n            return 'a'\n       \
    \ end\n        if c == 'B' then\n            return 'b'\n        end\n       \
    \ if c == 'C' then\n            return 'c'\n        end\n        if c == '@' then\n\
    \            return '@'\n        end\n        return c\n    end)\n    local t\
    \ = {}\n    for i = 1, #s do\n        t[#t + 1] = tolower(s[i])\n    end\n   \
    \ local s = ''\n    for i = 1, #t do\n        if t[i] ~= 'a' and t[i] ~= 'A' and\
    \ t[i] ~= 'b' and t[i] ~= 'B' and t[i] ~= 'c' and t[i] ~= 'C' and t[i] ~= '@'\
    \ then\n            s = s .. t[i]\n        else\n            s = s .. toupper(t[i])\n\
    \        end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvyvyu1uo.lua:46:\
    \ attempt to call a nil value (global 'tolower')\nstack traceback:\n\t/tmp/tmpvyvyu1uo.lua:46:\
    \ in local 'candidate'\n\t/tmp/tmpvyvyu1uo.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local l=string.len(s)\n\
    \    if l==0 or string.sub(s,l,l-1)=='#' then return s end\n    s=string.lower(s)\n\
    \    for i=1,l do\n        if string.sub(s,i,i)~='a' and string.sub(s,i,i)~='A'\
    \ then return s end\n        s=string.upper(s,i,i)\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0hd6n83.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpa0hd6n83.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local ret\
    \ = ''\n   for i = 1, #s do\n      if s[i] ~= '#' and s[i] ~= '.' and s[i] ~=\
    \ '@' and s[i] ~= '\"' and s[i] ~= '!' and s[i] ~= '?' and s[i] ~= ',' and s[i]\
    \ ~= '-' and s[i] ~= '^' and s[i] ~= '/' and s[i] ~= '[' then\n         ret =\
    \ ret..toupper(s[i])\n      else\n         ret = ret..s[i]\n      end\n   end\n\
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrr6ellg.lua:17:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpmrr6ellg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmrr6ellg.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts=string.lower(s)\n\
    \ts=string.gsub('%w+','%l:',s)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbpvspai.lua:22:\
    \ expected: \"aSdF\"\nactual: \"%w+\"\nstack traceback:\n\t/tmp/tmpqbpvspai.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  for i = 1,\
    \ #s do\n    if s[i] ~= nil and string.sub(s,i,i)==s[i] then -- checks for empty\
    \ string\n      if string.sub(s,i,i)==\"a\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"A\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"b\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"B\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"c\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"C\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"@\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"#\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"$\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"%\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"^\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"&\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"*\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"(\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\")\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"-\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"_\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\"+\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\":\" then string.sub(s,i,i+1)=string.sub(s,i+1,i)\
    \ end\n      if string.sub(s,i,i)==\";\" then \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphh4hry19.lua:16: syntax error near ''=''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- write\
    \ your code in JavaScript (Node.js 8.9.4)\n  -- print ('Your Code Here')\n  local\
    \ temp\n  local t = {}\n  for _, x in ipairs(s) do\n    if x:match('%l') then\n\
    \      table.insert(t, x:lower())\n    elseif x:match('%U') then\n      table.insert(t,\
    \ x:upper())\n    else\n      temp = x\n    end\n  end\n  return table.concat(t,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm12vem8.lua:33:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxm12vem8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal str1,str2\
    \ = \"\",s\n\tlocal index1,index2 = 1,1\n\tfor i = 1,#s do\n\t\tstr = sub(s, index1,\
    \ index2)\n\t\tstr1 = str..str1\n\t\tindex2 = index2+1\n\t\tindex1 = index1+1\n\
    \tend\n\tif #s ~= index1 then \n\t\tstr = sub(s, index1, #s)\n\t\tstr1 = str1..str\n\
    \tend\n\tif str1 ~= \"\" then \n\t\treturn str1..str2\n\telse\n\t\treturn str2\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjwxkb3ur.lua:17:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpjwxkb3ur.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpjwxkb3ur.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local chars\
    \ = {}\n  local i = 0\n  for char in s:gmatch'([A-Za-z])+' do \n    chars[#chars\
    \ + 1] = char\n  end\n  if #chars == 0 then\n    return s\n  end\n  local new_str\
    \ = chars[1]\n  for i = 2, #chars do\n    if chars[i] == 'A' then\n      if chars[i\
    \ - 1] == 'a' then\n        new_str = chars[i - 1] + new_str\n      else\n   \
    \     new_str = chars[i - 1] + new_str .. 'a'\n      end\n    elseif chars[i]\
    \ == 'a' then\n      if chars[i - 1] == 'A' then\n        new_str = chars[i -\
    \ 1] + new_str\n      else\n        new_str = chars[i - 1] + new_str .. 'A'\n\
    \      end\n    else\n      new_str = chars[i] + new_str\n    end\n  end\n  return\
    \ new_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rblqrai.lua:46:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp8rblqrai.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local s =\
    \ s and s \n  or ''\n  or assert(false, 'solve(): Argument must be string')\n\
    \  \n  local new_s = ''\n  for i = 1, #s do\n    local char = s:sub(i,i)\n   \
    \ \n    if char:match('^%c') then\n      if char == 'a' then new_s = new_s ..\
    \ 'A' else new_s = new_s .. 'a'\n    else\n      new_s = new_s .. char\n    end\n\
    \  end\n  \n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpewbo0fft.lua:24: ''end'' expected (to close ''if'' at line
    23) near ''else''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local ret\
    \ = \"\"\n    for i,v in ipairs(s) do\n        if v:match('^[%a~]') then\n   \
    \         if v:upper() ~= v:lower() then\n                ret = ret..v:upper()\n\
    \            else\n                ret = ret..v:lower()\n            end\n   \
    \     elseif v == '#' then\n            ret = ret..v:lower()\n        elseif v\
    \ == '@' then\n            ret = ret..v:upper()\n        else\n            ret\
    \ = ret..v\n        end\n    end\n    return ret\nend\n</cell>\n<text>\nString\
    \ Manipulation\nThe functions below were introduced while learning to work with\
    \ strings. \nThe goal of this module is to give you the tools to manipulate strings\
    \ \nas you might have done in many other languages. \nYou will also learn about\
    \ the common string functions supported by Lua. \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptp3sun6a.lua:32: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub('%l',\
    \ function(x) return x:lower() end):gsub('%U', function(x) return x:upper() end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_42unrhu.lua:20:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_42unrhu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s == nil\
    \ or s == '' then return end\n  local tbl = {}\n  for i = 1,#s do tbl[i] = s[i]\
    \ end\n  table.sort(tbl)\n  for i = 1,#tbl do\n    if tbl[i] == 'a' or tbl[i]\
    \ == 'A' then\n      tbl[i] = 'A'\n    elseif tbl[i] == 'b' or tbl[i] == 'B' then\n\
    \      tbl[i] = 'B'\n    elseif tbl[i] == 'c' or tbl[i] == 'C' then\n      tbl[i]\
    \ = 'C'\n    elseif tbl[i] == 'd' or tbl[i] == 'D' then\n      tbl[i] = 'D'\n\
    \    elseif tbl[i] == 'e' or tbl[i] == 'E' then\n      tbl[i] = 'E'\n    elseif\
    \ tbl[i] == 'f' or tbl[i] == 'F' then\n      tbl[i] = 'F'\n    elseif tbl[i] ==\
    \ 'g' or tbl[i] == 'G' then\n      tbl[i] = 'G'\n    elseif tbl[i] == 'h' or tbl[i]\
    \ == 'H' then\n      tbl[i] = 'H'\n    elseif tbl[i] == 'i' or tbl[i] == 'I' then\n\
    \      tbl[i] = 'I'\n    elseif tbl[i] == 'j' or tbl[i] == 'J' then\n      tbl[i]\
    \ = 'J'\n    elseif tbl[i] == 'k' or tbl[i] == 'K' then\n      tbl[i] = 'K'\n\
    \    elseif tbl[i] == 'l' or tbl[i] == 'L' then\n      tbl[i] = 'L'\n    elseif\
    \ tbl[i] == 'm' or tbl[i] == 'M' then\n      tbl[i] = 'M'\n    elseif tbl[i] ==\
    \ 'n' or tbl[i] == 'N' then\n      tbl[i] = 'N'\n    elseif tbl[i] == 'o' or tbl[i]\
    \ == 'O' then\n      tbl[i] = 'O'\n    elseif tbl[i] == 'p' or tbl[i] == 'P' then\n\
    \      tbl[i] = 'P'\n    elseif tbl[i] == 'q' or tbl[i] == 'Q' then\n      tbl[i]\
    \ = 'Q'\n    elseif tbl[i] == 'r' or tbl[i] == 'R' then\n      tbl[i] = 'R'\n\
    \    elseif tbl[i] == 's' or tbl[i] == 'S' then\n      tbl[i] = 'S'\n    elseif\
    \ tbl[i] == 't' or tbl[i] == 'T' then\n      tbl[i] = 'T'\n    elseif tbl[i] ==\
    \ 'u' or tbl[i] == 'U' then\n      tbl[i] = 'U'\n    elseif tbl[i] == 'v' or tbl[i]\
    \ == 'V' then\n      tbl[i] = 'V'\n    elseif tbl[i] == 'w' or tbl[i] == 'W' \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp66k4ts75.lua:64: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if #s ==\
    \ 0 then\n        return s\n    end\n    local res = ''\n    for i = 1, #s do\n\
    \        if string.sub(s,i,i) ~= '#' then\n            res = res + string.sub(s,i,i)\n\
    \        else\n            -- If the string contains no letters, reverse the string.\n\
    \            if i == 1 then\n                res = res .. string.sub(s,i,i)\n\
    \            else\n                res = string.sub(s,i,i) .. string.sub(s,i+1,i-1)\
    \ .. string.sub(s,i+1,i)\n            end\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4fzi_g9.lua:20:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpk4fzi_g9.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpk4fzi_g9.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Base case\n\
    \  if #s == 0 then\n    return s\n  end\n  -- Find first letter\n  local first\
    \ = string.lower(s[#s])\n  -- Reverse letter\n  if first ~= #s then\n    return\
    \ string.sub(s,1,#s)..string.sub(s,#s+2)\n  end\n  -- Reverse the string\n  return\
    \ string.gsub(s,\"(..)\",\n    function(c)\n      local a,b = string.lower(c),string.upper(c)\n\
    \      if a ~= b then\n        return a..b\n      end\n      return c\n    end\n\
    \  )\nend\nprint(solve('123'))\nprint(solve('ab'))\nprint(solve('#a@C'))\nprint(solve(\"\
    1~2%+3%\"))\nprint(solve(\"1~2%+3%_\"))\nprint(solve(\"1~2%+3%_a\"))\nprint(solve(\"\
    1~2%+3%_a+\"))\nprint(solve(\"1~2%+3%_a+b\"))\nprint(solve(\"1~2%+3%_a+b+\"))\n\
    print(solve(\"1~2%+3%_a+b+c\"))\nprint(solve(\"1~2%+3%_a+b+c+\"))\nprint(solve(\"\
    1~2%+3%_a+b+c+d\"))\nprint(solve(\"1~2%+3%_a+b+c+d+\"))\nprint(solve(\"1~2%+3%_a+b+c+d+e\"\
    ))\nprint(solve(\"1~2%+3%_a+b+c+d+e+\"))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f\"\
    ))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+\"))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+g\"\
    ))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+g+\"))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+g+h\"\
    ))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+g+h+\"))\nprint(solve(\"1~2%+3%_a+b+c+d+e+f+g+h+i\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyt_jplsi.lua:56: unfinished string near ''"1~2%+3%_a+b+c+d+e+f+g+h+i''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- your code\n\
    \  -- ...\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevuf923_.lua:22:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpevuf923_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub('%l',\
    \ function(_) return string.upper(_) or string.lower(_) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tvmtc0r.lua:20:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp8tvmtc0r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\t-- base case\n\
    \t-- is this the empty string\n\tif s == nil then return nil end\n\t\n\t-- case\
    \ check\n\tlocal i, j = 1, 1\n\tlocal news = \"\"\n\tfor i, c in ipairs(s) do\n\
    \t\tif c == \"a\" then\n\t\t\tnews = c\n\t\telseif c == \"A\" then\n\t\t\tnews\
    \ = string.upper(c)\n\t\telseif c == \"#\" then\n\t\t\tnews = string.sub(c, i,\
    \ i)\n\t\telseif c == \"@\" then\n\t\t\tnews = string.sub(c, j, j)\n\t\telse\n\
    \t\t\tnews = c\n\t\tend\n\t\tj = i + 1 -- update the index\n\tend\n\treturn string.sub(news,\
    \ 1, j) -- return the remaining string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxtqbiwi.lua:41:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpjxtqbiwi.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub(\"\
    ([A-Za-z])\", function()\n    return string.lower(string.sub(string.upper(string.sub(s,\
    \ '%2'),1), '%2'))\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8635v6nw.lua:15:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp8635v6nw.lua:15: in function </tmp/tmp8635v6nw.lua:14>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp8635v6nw.lua:14: in local 'candidate'\n\t/tmp/tmp8635v6nw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s:len()\
    \ ~= 1 then\n        return s \n    end\n    if s:sub(1,1) ~= s[1] then\n    \
    \    return s:gsub('.', function(c)\n            if c == \"@\" then return \"\
    #\" end\n            if c == \"a\" then return \"A\" end\n            if c ==\
    \ \"b\" then return \"B\" end\n            if c == \"c\" then return \"C\" end\n\
    \            if c == \"#\" then return \"@\" end\n            if c == \"A\" then\
    \ return \"a\" end\n            if c == \"B\" then return \"b\" end\n        \
    \    if c == \"C\" then return \"c\" end\n            if c == \"@\" then return\
    \ \"#\" end\n            local new_c = string.char(c:byte() - 96 + 96)\n     \
    \       if new_c > 122 then\n                new_c = new_c - 26\n            end\n\
    \            return new_c\n        end)\n    end\n    return s\nend\nprint (solve(\"\
    aA#@c\"))\nprint (solve(\"#@ab\"))\nprint (solve(\"aBC\"))\nprint (solve(\"a@a\"\
    ))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "aA#@c\n#@ab\naBC\na@a\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpzz29cu45.lua:45: expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\
    \t/tmp/tmpzz29cu45.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s ~= nil\
    \ then\n    if type(s) ~= 'string' then\n      error('String expected')\n    end\n\
    \    local result = s\n    for i = 1, #s do\n      local c = string.sub(s,i,i)\n\
    \      local lc = c:lower()\n      if lc ~= nil then\n        local uc = uc:upper()\n\
    \        if uc ~= nil then\n          result = string.sub(result,1,i-1) .. uc\
    \ .. string.sub(result,i+1,#result)\n        else\n          result = string.sub(result,1,i-1)\
    \ .. lc\n        end\n      end\n    end\n    return result\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl75mospg.lua:23:\
    \ attempt to index a nil value (global 'uc')\nstack traceback:\n\t/tmp/tmpl75mospg.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpl75mospg.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   s = s:lower()\n\
    \   for i = 1,#s do\n      if s[i] ~= nil then\n         if s[i] == 'a' then\n\
    \            s[i] = 'A'\n         elseif s[i] == 'b' then\n            s[i] =\
    \ 'B'\n         elseif s[i] == 'c' then\n            s[i] = 'C'\n         elseif\
    \ s[i] == 'd' then\n            s[i] = 'D'\n         elseif s[i] == 'e' then\n\
    \            s[i] = 'E'\n         elseif s[i] == 'f' then\n            s[i] =\
    \ 'F'\n         elseif s[i] == 'g' then\n            s[i] = 'G'\n         elseif\
    \ s[i] == 'h' then\n            s[i] = 'H'\n         elseif s[i] == 'i' then\n\
    \            s[i] = 'I'\n         elseif s[i] == 'j' then\n            s[i] =\
    \ 'J'\n         elseif s[i] == 'k' then\n            s[i] = 'K'\n         elseif\
    \ s[i] == 'l' then\n            s[i] = 'L'\n         elseif s[i] == 'm' then\n\
    \            s[i] = 'M'\n         elseif s[i] == 'n' then\n            s[i] =\
    \ 'N'\n         elseif s[i] == 'o' then\n            s[i] = 'O'\n         elseif\
    \ s[i] == 'p' then\n            s[i] = 'P'\n         elseif s[i] == 'q' then\n\
    \            s[i] = 'Q'\n         elseif s[i] == 'r' then\n            s[i] =\
    \ 'R'\n         elseif s[i] == 's' then\n            s[i] = 'S'\n         elseif\
    \ s[i] == 't' then\n            s[i] = 'T'\n         elseif s[i] == 'u' then\n\
    \            s[i] = 'U'\n         elseif s[i] == 'v' then\n            s[i] =\
    \ 'V'\n         elseif s[i] == 'w' then\n            s[i] = 'W'\n         elseif\
    \ s[i] == 'x' then\n            s[i] = 'X'\n         elseif s[i] == 'y' then\n\
    \            s[i] = 'Y'\n         elseif s[i] == 'z' then\n            s[i] =\
    \ 'Z'\n         else\n            s[i] = s[i]\n         end\n      end\n   end\n\
    \   s = table.concat(s,\"\")\n   return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgum1k9f.lua:74:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmphgum1k9f.lua:74: in local 'candidate'\n\t/tmp/tmphgum1k9f.lua:81: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    -- Your\
    \ code here\n    if #s < 1 then\n        return s\n    end\n    if type(s[1])\
    \ ~= 'string' then\n        return s\n    end\n    if type(s[1]) == 'string' then\n\
    \        local str = ''\n        for i=1,#s,2 do\n            if s[i] == 'a' or\
    \ s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n            \
    \    if str == '' then\n                    str = s[i]\n                else\n\
    \                    str = str .. toupper(s[i])\n                end\n       \
    \     else\n                if str == '' then\n                    str = s[i]\n\
    \                else\n                    str = str .. s[i]\n               \
    \ end\n            end\n        end\n        return str\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b033wop.lua:45:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp1b033wop.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\t-- Write\
    \ your code here.\n\tlocal temp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7i_0unqn.lua:30: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  for i, v\
    \ in pairs(s) do\n    if v ~= 'a' and v ~= 'A' and v ~= '#' and v ~= '#' and v\
    \ ~= '.' and v ~= '@' and v ~= '$' and v ~= '0' then\n      return s\n    end\n\
    \  end\n  \n  return tostring(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw4dk2i1x.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpw4dk2i1x.lua:14: in local 'candidate'\n\t/tmp/tmpw4dk2i1x.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   if #s ==\
    \ 0 then\n      return s\n   end\n   for i = 1, #s do\n      if string.sub(s,i,i+1)\
    \ ~= '' then\n         local char = string.sub(s,i,i+1)\n         if char:lower\
    \ == char then\n            local char = char:upper\n         else\n         \
    \   local char = char:lower\n         end\n         return string.sub(s,1,i-1)\
    \ .. char .. string.sub(s,i+1)\n      end\n   end\n   return s\nend\n</cell>\n\
    <text>\n5.4 Write a function to swap two elements of a string.\nSwap the ith and\
    \ jth elements of a string $string$. \nThe function should return the swapped\
    \ string.\nIf i and j are equal, return the string unchanged.\nExample 1:\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw9pck1zc.lua:20: function arguments expected near ''==''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res=s;\n\
    \    for i,v in ipairs(res) do\n        if not v then\n            res=res:sub(1,1):upper..res:sub((i+1)-1,(i+1):end);\n\
    \        else\n            res=v:upper..v:lower;\n        end\n    end;\n    return\
    \ res;\nend;\nprint(solve(ARGV[1]));\n</code>\n<|/ a tags=lua |>\n<| c |>\nNice\
    \ solution. I didn't know that lua has `toupper()` and `tolower()`\n<|/ c |>\n\
    <| c |>\nIt has `tonumber()` and `tostring()` but only if you have Lua 5.2 and\
    \ above - which is not the case at present. `tonumber()` was introduced in Lua\
    \ 5.2 but `tostring()` was introduced in Lua 5.3. And there are some `tonumber()`\
    \ function that works only with Lua 5.2.\n<|/ c |>\n<| a tags=lua dscore=3 |>\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3mgvzzr0.lua:17: function arguments expected near ''..''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s ==\
    \ nil then\n        return nil\n    end\n    local sLen = #s\n    local result\
    \ = ''\n    for i=0,sLen do\n        local isLetter = true\n        if s[i] ~=\
    \ 'a' and s[i] ~= 'A' then\n            isLetter = false\n        end\n      \
    \  if isLetter then\n            result = toupper(tolower(s[i])) + result\n  \
    \      else\n            result = s[i] + result\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4ppeyko.lua:27:\
    \ attempt to add a 'nil' with a 'string'\nstack traceback:\n\t/tmp/tmpx4ppeyko.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpx4ppeyko.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local index\
    \ = 1\n  local temp\n  local result = \"\"\n  while index <= #s do\n    if string.sub(s,\
    \ index, index) == \"\" then\n      result = result .. string.sub(s,index)\n \
    \     break\n    end\n    temp = string.sub(s,index,index)\n    if string.sub(s,index,index)\
    \ ~= \"\" then\n      result = result .. toupper(temp)\n    else\n      result\
    \ = result .. temp\n    end\n    index = index + 2\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1j7x9_2.lua:24:\
    \ attempt to call a nil value (global 'toupper')\nstack traceback:\n\t/tmp/tmpg1j7x9_2.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpg1j7x9_2.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local function\
    \ aux(s,i,t)\n        if s[i] == nil then\n            return t\n        end\n\
    \        local j = 1\n        local c = s[i]\n        while j < #s do\n      \
    \      i = i + 1\n            local k = s[i]:byte()\n            if c == 'A' then\n\
    \                if k == '@' then\n                    t = t:sub(1,-1) + (s[i]:sub(1))\n\
    \                elseif k == '#' then\n                    t = t:sub(1,-1) + (s[i]:sub(2))\n\
    \                else\n                    t = t\n                end\n      \
    \      elseif c == 'a' then\n                if k == '@' then\n              \
    \      t = t:sub(1,-1) + (s[i]:sub(1))\n                elseif k == '#' then\n\
    \                    t = t:sub(1,-1) + (s[i]:sub(2))\n                else\n \
    \                   t = t\n                end\n            elseif c == 'C' then\n\
    \                if k == '@' then\n                    t = t\n               \
    \ elseif k == '#' then\n                    t = t\n                else\n    \
    \                t = t\n                end\n            elseif c == 'c' then\n\
    \                if k == '@' then\n                    t = t\n               \
    \ elseif k == '#' then\n                    t = t\n                else\n    \
    \                t = t\n                end\n            elseif c == 'B' then\n\
    \                if k == '@' then\n                    t = t\n               \
    \ elseif k == '#' then\n                    t = t\n                else\n    \
    \                t = t\n                end\n            elseif c == 'b' then\n\
    \                if k == '@' then\n                    t = t\n               \
    \ elseif k == '#' then\n                    t = t\n                else\n    \
    \                t = t\n                end\n            else\n              \
    \  t = t\n            end\n            j = j + 1\n        end\n        return\
    \ t\n    end\n    return aux(s,1,s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq0q3egd.lua:84:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpfq0q3egd.lua:84:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local lenS=#s\n\
    \    local lenS=1\n    local newS\n    local isUp\n    local char\n    local i\n\
    \    local ret\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpetwq_x3k.lua:35: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal ret\
    \ = ''\n\tfor _, v in ipairs(s) do\n\t\tlocal c = v:upper()\n\t\tif c ~= v then\n\
    \t\t\tc = v:lower()\n\t\tend\n\t\tret = ret .. c\n\tend\n\tif ret ~= '' then ret\
    \ = ret .. '!' end\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76e40g37.lua:29:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp76e40g37.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tlocal s =\
    \ s:gsub(\"%l\", function()\n\t\tif string.len(string.sub(s,i,i)) > 0 then\n\t\
    \t\tif string.sub(s,i,i)==\"a\" then\n\t\t\t\ti=i+1\n\t\t\t\treturn string.sub(s,1,i-1)\
    \ .. string.sub(s,i)\n\t\t\telse\n\t\t\t\treturn string.upper(string.sub(s,1,i-1))\
    \ .. string.sub(s,i)\n\t\t\tend\n\t\telse\n\t\t\treturn string.sub(s,1,i-1)\n\t\
    \tend\n\tend)\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7deieyv.lua:15:\
    \ bad argument #2 to 'sub' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpw7deieyv.lua:15:\
    \ in function </tmp/tmpw7deieyv.lua:14>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpw7deieyv.lua:14: in local 'candidate'\n\t/tmp/tmpw7deieyv.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local chars\
    \ = {}\n    for i, c in ipairs(s) do\n        table.insert(chars, c)\n    end\n\
    \    local newstring = ''\n    for i, c in ipairs(s) do\n        if string.sub(s,\
    \ i, i+1) ~= '' then\n            if string.sub(s, i, i+1) ~= c then\n       \
    \         newstring = string.sub(s, 1, i) + c .. string.sub(s, i+1)\n        \
    \    end\n        else\n            newstring = string.sub(s, 1, i) + c\n    \
    \    end\n    end\n    return newstring\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s6sjeoq.lua:34:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7s6sjeoq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local count\
    \ = 0\n    local res = ''\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppdzwdj5m.lua:30: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    return\
    \ s:gsub('.', function(c) return c:lower() == 'a' and 'A' or 'a'; end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8pbe5i5.lua:20:\
    \ expected: \"aSdF\"\nactual: \"Aaaa\"\nstack traceback:\n\t/tmp/tmpd8pbe5i5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local i,\
    \ j = 0, 0\n    while i <= #s do\n        if string.sub(s,i,1) ~= nil then\n \
    \           if string.sub(s,i,1) == string.sub(s,i,1) then\n                j\
    \ = i+1\n            end\n            -- if s[i]:lower() == s[i]:lower() then\n\
    \            --     j = i+1\n            -- end\n            i = j\n         \
    \   j = j+1\n        else\n            i = i-1\n        end\n    end\n    return\
    \ string.sub(s,0,j)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj6jksez.lua:35:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpqj6jksez.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s=s:lower()\n\
    \    local ans=\"\"\n    for _,i in ipairs(s) do\n        if i~=i then\n     \
    \       local a=string.sub(i,1,1)\n            local b=string.sub(i,2,2)\n   \
    \         local c=string.sub(i,3,3)\n            if a~=a and b~=b and c~=c then\n\
    \                local x=string.upper(a)..string.lower(b)..string.upper(c)\n \
    \               if x~=x then\n                    ans=ans..x\n               \
    \ end\n            else\n                ans=ans\n            end\n        else\n\
    \            ans=ans\n        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpev_fai8d.lua:39:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpev_fai8d.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s=string.lower(s)\n\
    \    local i=1 \n    while (i<=#s) do \n        if (string.byte(s,i)>=65 and string.byte(s,i)<=90)\
    \ then\n            if (string.byte(s,i)>=97 and string.byte(s,i)<=122) then\n\
    \                i=string.byte(s,i)-32\n            elseif (string.byte(s,i)>=97\
    \ and string.byte(s,i)<=122) then\n                i=string.byte(s,i)-32\n   \
    \         else\n                i=string.byte(s,i)-32\n            end\n     \
    \   else\n            i=i+1\n        end\n    end \n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif3tklnf.lua:35:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpif3tklnf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local t\
    \ = {}\n   for i,v in pairs(s) do\n      if v ~= nil and v:byte() ~= 0 then\n\
    \         local n = v:byte()\n         if n:byte() ~= 0 then\n            t[#t\
    \ + 1] = v:lower()\n         else\n            t[#t + 1] = v:upper()\n       \
    \  end\n      else\n         t[#t + 1] = v\n      end\n   end\n   return table.concat(t,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprr20sidz.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmprr20sidz.lua:15: in local 'candidate'\n\t/tmp/tmprr20sidz.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if #s ==\
    \ 0 then\n    return s\n  end\n  local ans = \"\"\n  for i = 1, #s do\n    if\
    \ s[i] ~= nil then\n      if s[i] >= 'a' and s[i] <= 'z' then\n        ans = toupper(s[i])..ans\
    \ \n      else\n        ans = tolower(s[i])..ans\n      end\n    end\n  end\n\
    \  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeemwlf_y.lua:33:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpeemwlf_y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tassert(type(s)\
    \ ~= 'string')\n\tif not s then return '#a@C' end\n\tlocal letters = {}\n\tfor\
    \ _,k in pairs(s:gsub('^[%a]','%1')) do\n\t\tif not letters[tolower(k)] then letters[tolower(k)]\
    \ = k end\n\t\tif not letters[toupper(k)] then letters[toupper(k)] = k end\n\t\
    end\n\treturn tostring(letters[#letters])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwbprhun8.lua:14:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpwbprhun8.lua:14: in local 'candidate'\n\
    \t/tmp/tmpwbprhun8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if not\
    \ s or #s == '0' then\n        return s\n    end\n    local t = s:sub(1, #s)\n\
    \    local i = 0\n    local c = t[i]\n    while c do\n        if c:lower():upper()\
    \ == c:upper() then\n            i = i + 2\n        else\n            i = i +\
    \ 1\n            \n        end\n        c = t[i]\n    end\n    if #t > i then\n\
    \        return s:sub(1, i)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposkzyiz5.lua:37:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmposkzyiz5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i, v in pairs(s) do\n    local new_v = v \n    if v:match(\"^[a-zA-Z]+$\"\
    ) then\n      if v:lower():upper() ~= v:upper() then\n        new_v = v:lower()\
    \ .. v:upper()\n      end\n    end\n    result = result .. new_v\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllfrqwg1.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpllfrqwg1.lua:15: in local 'candidate'\n\t/tmp/tmpllfrqwg1.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s ==\
    \ '' then\n        return s\n    end\n    local len = 1\n    for i = 1,#s do\n\
    \        if s[i] ~= '' then\n            len = len + 1\n        end\n    end\n\
    \    if len == 1 then\n        return string.upper(string.sub(s,1,#s))\n    end\n\
    \    local s = ''\n    for i = 1,len do\n        s = s .. string.upper(string.sub(s,i,i))\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse3cs8cm.lua:36:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpse3cs8cm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if #s <=\
    \ 1 then return s end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk31uq_bt.lua:29: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local ret\
    \ = ''\n   if #s == '0' then\n      return s\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5t4enuv.lua:32: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.gsub(s,\
    \ '(%a)', '%%%1')\n  s = string.gsub(s, '(%A)', '%%%1')\n  if s:match('^%s*$')\
    \ then\n    return s\n  else\n    return string.gsub(s, '(%l*)', '%%%1')\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4uvqpr8.lua:26:\
    \ expected: \"aSdF\"\nactual: \"%%%%%A%%%%%s%%%%D%%%%%f\"\nstack traceback:\n\t\
    /tmp/tmpn4uvqpr8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local new_s\
    \ = ''\n   for i = 1, #s do\n      if s[i] ~= 'a' and s[i] ~= 'A' then\n     \
    \    new_s = new_s .. s[i]\n      else\n         if s[i] ~= 'a' then\n       \
    \     new_s = new_s .. toupper(s[i])\n         else\n            new_s = new_s\
    \ .. tolower(s[i])\n         end\n      end\n   end\n   return new_s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpplgk39dh.lua:17:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpplgk39dh.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpplgk39dh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub(\"\
    ([a-z])\",\n    function(c) \n      if c == 'a' or c == 'A' then return 'A' end\n\
    \      if c == 'b' or c == 'B' then return 'B' end\n      if c == 'c' or c ==\
    \ 'C' then return 'C' end\n      if c == 'd' or c == 'D' then return 'D' end\n\
    \      if c == 'e' or c == 'E' then return 'E' end\n      if c == 'f' or c ==\
    \ 'F' then return 'F' end\n      if c == 'g' or c == 'G' then return 'G' end\n\
    \      if c == 'h' or c == 'H' then return 'H' end\n      if c == 'i' or c ==\
    \ 'I' then return 'I' end\n      if c == 'j' or c == 'J' then return 'J' end\n\
    \      if c == 'k' or c == 'K' then return 'K' end\n      if c == 'l' or c ==\
    \ 'L' then return 'L' end\n      if c == 'm' or c == 'M' then return 'M' end\n\
    \      if c == 'n' or c == 'N' then return 'N' end\n      if c == 'o' or c ==\
    \ 'O' then return 'O' end\n      if c == 'p' or c == 'P' then return 'P' end\n\
    \      if c == 'q' or c == 'Q' then return 'Q' end\n      if c == 'r' or c ==\
    \ 'R' then return 'R' end\n      if c == 's' or c == 'S' then return 'S' end\n\
    \      if c == 't' or c == 'T' then return 'T' end\n      if c == 'u' or c ==\
    \ 'U' then return 'U' end\n      if c == 'v' or c == 'V' then return 'V' end\n\
    \      if c == 'w' or c == 'W' then return 'W' end\n      if c == 'x' or c ==\
    \ 'X' then return 'X' end\n      if c == 'y' or c == 'Y' then return 'Y' end\n\
    \      if c == 'z' or c == 'Z' then return 'Z' end\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy0ikoo_.lua:48:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpcy0ikoo_.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local arr\
    \ = {} -- arr[i] is used to reverse the case of the letter \n                \
    \  -- of s[i] if s[i] is a letter\n    local tmp -- tmp holds the letter which\
    \ is in s[i] if s[i] is a letter\n    local i -- i represents the position where\
    \ we will reverse the case of a letter \n    -- of s[i]\n    for i = 1, #s do\n\
    \        -- if s[i] is a letter\n        if s[i] ~= nil then\n            -- if\
    \ we find a letter, push it into arr[i], then push it into tmp\n            if\
    \ s[i] ~= \"\" then\n                arr[i] = s[i]\n                tmp = \"\"\
    \n            else\n                arr[i] = nil\n            end\n        end\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp282j_lni.lua:45: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local str\
    \ = string.lower(s)\n    local count = #str\n    local result = \"\"\n    for\
    \ i = 1, count do\n        if string.sub(str, i, i) ~= nil then\n            --\
    \ The letter must be capital\n            local letter = string.sub(str, i, i)\n\
    \            -- If it is lowercase then make it uppercase.\n            if letter\
    \ ~= letter then\n                letter = string.upper(letter)\n            end\n\
    \            -- Append it to the result.\n            result = result .. letter\n\
    \        else\n            -- The letter must not be capital\n            -- Append\
    \ it to the result.\n            result = result .. string.sub(str, i, i)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uanmnb7.lua:39:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp0uanmnb7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts = s:gsub('.',\
    \ function(c) return c:lower() == 'a' or (c:lower() == 'b' and (c:lower() == c)\
    \ or (c:lower() == 'c' and (c:lower() == c:lower()) else c) end)\n\treturn s:gsub('(.)(.)',\
    \ function(x) return x:gsub('^(.)$', '\\\\2\\1') end):gsub('^(.)$', '\\\\2\\1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc8uiq4wm.lua:14: '')'' expected near ''else''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = string.lower(s)\n    if string.find(s, '[%w-]') then\n        return s\n \
    \   end\n    if string.find(s, '[%A-z]') then\n        return s\n    end\n   \
    \ for i = 1, #s do\n        local c = string.sub(s,i,i)\n        if string.find(c,\
    \ '%A') then\n            s = string.gsub(s, '%A', '[%w]')\n        else\n   \
    \         s = string.gsub(s, '%w', '[%A]')\n        end\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsciyxh46.lua:35:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpsciyxh46.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  -- Base cases\n\
    \  if s == '' then return '' end\n  if s == '#' then return '#' end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfbb2qp__.lua:31: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = s \n    local len = 0 \n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ ~= nil then\n            len = len + 1 \n        end\n    end\n    if len ==\
    \ 0 then\n        return s \n    end\n    local tmp \n    local ret = \"\"\n \
    \   for i = 1, len do \n        local c = string.sub(s,i,i)\n        if string.sub(c,1,1)\
    \ ~= nil then\n            if string.sub(c,1,1) == '@' then\n                tmp\
    \ = \"\"\n                for j = 1, string.len(c) do\n                    tmp\
    \ = tmp + string.sub(s,i,j) \n                end\n                tmp = string.upper(tmp)\n\
    \            else\n                tmp = \"\"\n                for j = 1, string.len(c)\
    \ do\n                    tmp = tmp + string.sub(s,i,j) \n                end\n\
    \                tmp = string.lower(tmp)\n            end\n            ret = ret\
    \ + tmp \n        end\n    end \n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdemmhuk.lua:38:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmphdemmhuk.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmphdemmhuk.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s:lower()\n\
    \  local result = \"\"\n  \n  -- check if the string contains at least one letter\n\
    \  if s:match(\"^[a-z]+$\") then\n    \n    -- store the lowercase characters\n\
    \    local l = s:gsub(\"[a-z]+\",\"%L\")\n    \n    -- store the uppercase characters\n\
    \    local u = s:gsub(\"[A-Z]+\",\"%U\")\n    \n    -- reverse each character\
    \ \n    for i = 1, #l do\n      local c = l[i]\n      if c ~= nil then\n     \
    \   c = string.upper(c)\n      end\n      \n      if u ~= nil then\n        c\
    \ = string.lower(c)\n      end\n      \n      result = result .. c\n    end\n\
    \  \n    -- reverse each letter again\n    for i = 1, #u do\n      local c = u[i]\n\
    \      if c ~= nil then\n        c = string.upper(c)\n      end\n      \n    \
    \  result = result .. c\n    end\n  end\n  \n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdihvcpvw.lua:21:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpdihvcpvw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpdihvcpvw.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts = s --\
    \ make sure it's a string --\n\ts = string.gsub(s,'[^A-Za-z]','') -- remove everything\
    \ but letters --\n\tif #s <= 0 then return s end\n\tlocal a = string.gsub(s,'[%z]','')\
    \ -- remove anything that isn't a letter --\n\tlocal t = {}\n\tfor i = 1,#a do\n\
    \t\tt[#t+1] = a[i]\n\tend\n\ta = t\n\ttable.sort(a) -- sort alphabetically\n\t\
    if #a == 0 then return s end\n\tif a[#a] == s[#s] then\n\t\ta[#a] = s[#s]\n\t\
    else\n\t\ta[#a] = s[#s]..a[#a]\n\tend\n\treturn table.concat(a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1jq5myw.lua:36:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpt1jq5myw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local res\n\
    \  if s:match('^[%aA]+$') then\n    res = s:gsub('^[%aA]+$', function(c) return\
    \ c:lower() end)\n  elseif s:match('^[%wW]+$') then\n    res = s:gsub('^[%wW]+$',\
    \ function(c) return c:upper() end)\n  else\n    res = s\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fefz6sw.lua:28:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp0fefz6sw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s=s:lower()\n\
    \  local new_str=''\n  for i=1,#s do\n    if s[i]>='a' and s[i]<='z' then\n  \
    \    new_str=new_str..string.upper(string.sub(s,i,i+1))\n    else\n      new_str=new_str..s[i]\n\
    \    end\n  end\n  return new_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_tcu01b.lua:17:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmpw_tcu01b.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpw_tcu01b.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.gsub(s,\
    \ {'[a-zA-Z]', function(c) return string.upper(c) end})\n  if s ~= \"\" then\n\
    \    local temp, result = \"\", \"\"\n    for i, v in pairs(string.gmatch(s, \"\
    [a-zA-Z]+\")) do\n      temp = string.sub(s, i, i)\n      result = temp:reverse():sub(1)\n\
    \    end\n    return string.sub(s, 1, i):reverse():sub(1)\n  else\n    return\
    \ s:reverse():sub(1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_smd37z9.lua:14:\
    \ bad argument #2 to 'gsub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp_smd37z9.lua:14: in local 'candidate'\n\t/tmp/tmp_smd37z9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local reverse\
    \ = ''\n    for i=1,#s do\n        if string.sub(s,i,i) == string.sub(s,i,i) then\n\
    \            if string.sub(s,i,i)=='a'..'z' or string.sub(s,i,i)=='A'..'Z' then\n\
    \                reverse = reverse..string.sub(s,i,i)\n            else\n    \
    \            reverse = reverse..string.upper(string.sub(s,i,i))\n            end\n\
    \        else\n            reverse = reverse..string.sub(s,i,i)\n        end\n\
    \    end\n    return reverse\nend\nprint(solve(\"1234\"))\nprint(solve(\"ab\"\
    ))\nprint(solve(\"#a@C\"))\nprint(solve(\"1\"))\nprint(solve(\"123\"))\nprint(solve(\"\
    123A\"))\nprint(solve(\"321A\"))\nprint(solve(\"1#3@A\"))\nprint(solve(\"#a@C!\"\
    ))\nprint(solve(\"123#456\"))\nprint(solve(\"#a@c\"))\nprint(solve(\"#a@c!\"))\n\
    print(solve(\"123#456\"))\nprint(solve(\"12#345\"))\nprint(solve(\"12#345!\"))\n\
    print(solve(\"!\"))\nprint(solve(\"!#\"))\nprint(solve(\"!#%\"))\nprint(solve(\"\
    !#%\"))\nprint(solve(\"!%\"))\nprint(solve(\"%!\"))\nprint(solve(\"%!#\"))\nprint(solve(\"\
    %!#%\"))\nprint(solve(\"12%34#56\"))\nprint(solve(\"12%34#56\"))\nprint(solve(\"\
    12%34#56\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"\
    12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve(\"12#56%34\"))\nprint(solve\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjv4vqik.lua:75: '')'' expected (to close ''('' at line 74)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local new_s\
    \ = '';\n    local i, count = 1, #s;\n    while i <= count do\n        local char\
    \ = string.sub(s,i,i+1);\n        if string.len(char) > 0 then\n            if\
    \ string.sub(char, 1, 1) ~= 'a' and string.sub(char, 1, 1) ~= 'A' then\n     \
    \           new_s = string.sub(char, 2)..new_s;\n            else\n          \
    \      new_s = char..new_s;\n            end\n        end\n        i = i + 1;\n\
    \    end\n    return new_s;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptptyjy0o.lua:33:\
    \ expected: \"aSdF\"\nactual: \"fDAs\"\nstack traceback:\n\t/tmp/tmptptyjy0o.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local reversed\
    \ = \"\";\n    for i = 1, #s do\n        if string.sub(s,i,i)==\"letter\" then\n\
    \            reversed = reversed..string.upper(string.sub(s,i,i+1))..string.lower(string.sub(s,i+1,i+2))..reversed;\n\
    \        else\n            reversed = reversed..string.sub(s,i,i+1);\n       \
    \ end\n    end\n    if #reversed == 0 then\n        return s;\n    end\n    return\
    \ reversed;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6xhp5qt.lua:31:\
    \ expected: \"aSdF\"\nactual: \"AssDDff\"\nstack traceback:\n\t/tmp/tmpf6xhp5qt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s.toUpperCase()\n\
    \  s = string.gsub(s, function(c)\n    if string.match('^%a+$', c) then\n    \
    \  if string.match('[a-z]', string.sub(c, 1, 1)) then\n        return string.upper(string.sub(c,\
    \ 2))\n      else\n        return string.lower(string.sub(c, 2, string.len(c)\
    \ - 2))\n      end\n    else\n      return c\n    end\n  end)\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7udv9ja.lua:14:\
    \ attempt to call a nil value (field 'toUpperCase')\nstack traceback:\n\t/tmp/tmpz7udv9ja.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpz7udv9ja.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local temp\
    \ = ''\n    local res = ''\n    for i = 1, #s do\n        if string.sub(s,i,i):match(\"\
    ^[a-zA-Z]+$\") then\n            if string.sub(s,i,i):match(\"^[a-z]+\") then\n\
    \                temp = string.sub(s,i,i)\n                string.gsub(temp,'[A-z]+',function(c){return\
    \ string.upper(c)})\n                res = res .. temp\n            else\n   \
    \             temp = string.sub(s,i,i)\n                string.gsub(temp,'[A-Z]+',function(c){return\
    \ string.lower(c)})\n                res = res .. temp\n            end\n    \
    \    else\n            res = res .. string.sub(s,i,i)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqaz5iagi.lua:20: unexpected symbol near ''{''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  return s:gsub(\"\
    ([A-Z]+)\", function(l) return l:lower() end)\n    :gsub(\"([a-z]+)\", function(l)\
    \ return l:upper() end) \n    :reverse():gsub(\"(.)(.)\", function(l) \n     \
    \ return l:reverse():gsub(\"(.)\", function(c) \n        return c:lower() end)\
    \ end)\nend\n</code>\n<|/ a tags=lua-table,lua dscore=1 |>\n<| a |>\nThis solution\
    \ is based upon the solution of user2497292 in the comments section but without\
    \ the return statements. \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjlleep7g.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local n\
    \ = 0\n    for i=1,#s do\n        if string.sub(s,i,i) == string.sub(s,i,i) then\n\
    \            n = n+1\n        else\n            s = string.sub(s,1,i)..string.sub(s,i+1,i)\n\
    \            n = n-1\n        end\n    end\n    if n == 0 then\n        return\
    \ s\n    else\n        return string.sub(s,1,#s)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zq2bus_.lua:33:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp4zq2bus_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local l=string.len(s)\n\
    \  assert(l>0) -- empty strings are ok\n  if l==1 then -- return string unchanged\n\
    \    return s\n  elseif l==2 then\n    if s[1]==\"A\" then return string.gsub(s,\"\
    a\",\"A\")\n    else return string.gsub(s,\"A\",\"a\")\n    end \n  else -- return\
    \ string unchanged\n    return s\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89eqr213.lua:30:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp89eqr213.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    if s ==\
    \ '' then return '' else return s:gsub(\"%l\", function (c) return c:lower() end)\n\
    \    else return s:gsub(\"%l\", function (c) return c:upper() end) end\nend\n\
    print(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\nprint(solve(''))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph50zklfx.lua:15: ''end'' expected (to close ''if'' at line
    14) near ''else''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local len\
    \ = 1\n    for i = 1,#s do\n        if string.sub(s,i,i) ~= '' then\n        \
    \    len = len + 1\n        end\n    end\n    local reversed = ''\n    for i =\
    \ 1,len do\n        local char = string.sub(s,i,i)\n        if char ~= '' then\n\
    \            if string.sub(s,i,i) ~= '' then\n                reversed = char..reversed\n\
    \            else\n                reversed = reversed..char\n            end\n\
    \        end\n    end\n    return reversed\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bgr0_oy.lua:37:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmp_bgr0_oy.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local letters\
    \ = {}\n  for letter in string.gmatch(s, '%a') do\n    table.insert(letters, letter)\n\
    \  end\n  if #letters == 0 then\n    return s\n  end\n  local t = {}\n  table.sort(letters)\n\
    \  local i = 0\n  for letter in string.gmatch(s, '%a') do\n    if letters[i +\
    \ 1] then\n      if letter:lower() == letters[i + 1]:upper() then\n        t[#t\
    \ + 1] = letters[i + 1]:lower()\n      else\n        t[#t + 1] = letters[i + 1]:upper()\n\
    \      end\n    end\n    i = i + 1\n  end\n  return table.concat(t)\nend\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\n+1 but I would suggest an alternative approach: `local\
    \ function solve(s): return (s:gsub('%W', ''):gsub('^%W', function() return string.lower()\
    \ end):gsub('^%W', function() return string.upper() end))`\n<|/ c |>\n<| a |>\n\
    In case someone finds this thread looking for an answer for Clojure, here is a\
    \ solution:\n<code>\n(clojure.string/replace \"hello world\" \"^.\" \"_\")\n</code>\n\
    will output:\n<code>\n\"_o_w _r_ld _o_w _r_ld\"\n</code>\n<|/ a dscore=4 tags=string,clojure\
    \ |>\n<| c |>\nThat looks great, but can you explain what is happening here?\n\
    <|/ c |>\n<| c |>\n`^` is used instead of `#` because of the reason explained\
    \ by James in his [answer](https://stackoverflow.com/a/39543780/988983).\n<|/\
    \ c |>\n<| a dscore=3 tags=string,clojure |>\nHere's another solution:\n<code>\n\
    (defn reverse [s]\n  (clojure.string/replace (clojure.string/replace (clojure.string/replace\
    \ s #\"[^a-z]+\" \"\") \"[^A-Z]+\" \"\") #\"[^A-Z]+\" \"\"))\n</code>\n<|/ a |>\n\
    <| c |>\nI feel like this could be done more simply and still be robust - but\
    \ I have no idea how. I would love it if someone could edit this answer with an\
    \ example in Clojure :)\n<|/ c |>\n<| c |>\nThis is really just an improvement\
    \ on the other answer, though I agree that the `reverse` function is more readable\
    \ and more idiomatic.\n<|/ \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsv9fpfh2.lua:36: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   assert(type(s)\
    \ == \"string\")\n   for i = 1,#s do\n      if s[i] >= #('a'):byte() then\n  \
    \       return string.reverse(string.sub(s,i,1))\n      else\n         return\
    \ s\n      end\n   end\n   return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7i04cnn.lua:16:\
    \ attempt to get length of a number value\nstack traceback:\n\t/tmp/tmpk7i04cnn.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpk7i04cnn.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   if s ==\
    \ nil then\n      return nil\n   end\n   if #s <= 0 then\n      return s\n   end\n\
    \   local t = 0\n   local f = {} -- frequency map\n   for i, c in string.gmatch(s,\
    \ '%a') do\n      if not f[c] then\n         f[c] = t\n      else\n         f[c]\
    \ = f[c] + 1\n      end\n   end\n   if #f == 0 then\n      return s\n   end\n\
    \   local ans = ''\n   for i,v in ipairs(f) do\n      if v > 0 then\n        \
    \ ans = ans .. tostring(v) .. cs[i]\n      end\n   end\n   return ans\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcr8i1x19.lua:24:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpcr8i1x19.lua:24: in local 'candidate'\n\
    \t/tmp/tmpcr8i1x19.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) ~= '^a' then\n      return string.gsub(s, \"\
    ([a-zA-Z])([a-z])\", \"%2$2%1$1\")\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03jd6b_4.lua:25:\
    \ expected: \"aSdF\"\nactual: \"s$2A$1f$2D$1\"\nstack traceback:\n\t/tmp/tmp03jd6b_4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s=string.lower(s)\n\
    \    if string.find(s,\"[a-zA-Z]\") then \n        s=s:gsub(\"%a\",function(v)\
    \ \n            return string.upper(v) \n        end) \n    else \n        s=s:gsub(\"\
    %#\",function(v) \n            return string.lower(v) \n        end) \n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepifh1yp.lua:30:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpepifh1yp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s:find('%a')\
    \ ~= nil then\n    return s:gsub('%a', function()\n      return string.lower(\
    \ string.upper( string.sub( string.sub(s, 1, 1), 2, 1 ) ) )\n    end)\n  else\n\
    \    return s:reverse()\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdksb26zk.lua:26:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdksb26zk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local function\
    \ to_upper(s)\n    local upper = ''\n    for _, c in pairs(s) do\n      upper\
    \ = upper .. c:upper()\n    end\n    return upper\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp64gc_421.lua:35: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if #s ==\
    \ '0' then\n    return s\n  elseif s[#s] ~= '#' then\n    return s\n  elseif s[1]\
    \ == 'a' then\n    return s[1]..solve( string.sub(s,2,#s-1)..string.sub(s,#s)\
    \  )\n  else\n    return string.lower( string.sub(s,1,#s-1)..string.upper(string.sub(s,#s))\
    \ )\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd6kqo_n.lua:28:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpfd6kqo_n.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local ret\
    \ = ''\n    for _,i in pairs(s) do\n        if string.sub(s, i, i) ~= string.sub(s,\
    \ i, i) then\n            ret = string.gsub(s, '%a', string.upper)\n        else\n\
    \            ret = string.gsub(s, '%a', string.lower)\n        end\n    end\n\
    \    return ret\nend\nprint(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqg63uuuh.lua:15: bad argument #1 to 'for iterator' (table\
    \ expected, got string)\nstack traceback:\n\t[C]: in function 'next'\n\t/tmp/tmpqg63uuuh.lua:15:\
    \ in local 'solve'\n\t/tmp/tmpqg63uuuh.lua:24: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s:match\
    \ '^' then\n    return s:gsub('.', function (c) return c == \"a\" or  c == \"\
    A\" or  c == \"b\" or  c == \"B\" or  c == \"c\" or  c == \"C\" end) .. s:sub(2)\n\
    \  else\n    return s:gsub('.', function (c) return c:lower():upper() end) ..\
    \ s:sub(2:end) \n  end\nend\n</code>\n<|/ a tags=lua dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpww4b951w.lua:17: '')'' expected near '':''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s ~= nil\
    \ then\n    local s = string.lower(s)\n    local t = {}\n    local n = string.len(s)\n\
    \    for i = 0, n - 1 do\n      if s[i] ~= nil then\n        if string.find(string.upper(s[i]))\
    \ == nil then\n          t[i + 1] = string.upper(s[i])\n        else\n       \
    \   t[i + 1] = string.lower(s[i])\n        end\n      else\n        t[i + 1] =\
    \ s[i]\n      end\n    end\n    \n    return table.concat(t)\n  else\n    return\
    \ \"ERROR\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1u_g35l.lua:39:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp1u_g35l.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   local str\
    \ = s:gsub('^[%a%d]+', function(x)\n      local l = x:lower()\n      l = l:match(string.upper)\
    \ and l or l:match(string.lower) and l or l\n      return l\n   end)\n   return\
    \ str:gsub(\"%a\", function(x)\n      return string.char(tonumber(x)+32)\n   end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47zxhbbe.lua:16:\
    \ bad argument #1 to 'match' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmp47zxhbbe.lua:16: in function </tmp/tmp47zxhbbe.lua:14>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp47zxhbbe.lua:14: in local 'candidate'\n\t/tmp/tmp47zxhbbe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\ts=s:lower()\n\
    \tlocal res={}\n\tfor i,v in pairs(s) do\n\t\tres[i]=v:upper()\n\tend\n\tfor i,v\
    \ in pairs(s) do\n\t\tif v==\"#\" or v==\"A\" or v==\"B\" or v==\"C\" or v==\"\
    D\" or v==\"E\" or v==\"F\" or v==\"G\" then\n\t\t\tres[i]=v:lower()\n\t\tend\n\
    \tend\n\treturn table.concat(res,\"\")\nend\nprint(solve(\"1234\"))\nprint(solve(\"\
    ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"#A@c\"))\nprint(solve(\"#a@C\"))\n\
    print(solve(\"A@c\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@c\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\n\
    print(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"\
    a@C\"))\nprint(solve(\"a@C\"))\nprint(solve(\"a@C\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsp069v3v.lua:78: unfinished string near ''"a@C''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  assert(type(s)\
    \ == 'string')\n  local t = {s}\n  while true do\n    local i = 1\n    while i\
    \ <= #t do\n      if t[i] == '#' then\n        t[i - 1] = #t\n        t[i] = '#'\n\
    \        i = i + 1\n      elseif t[i] == s[i] then\n        t[i - 1] = #t\n  \
    \      t[i] = s[i]\n        i = i + 1\n      else\n        break\n      end\n\
    \    end\n    if i == #t then\n      break\n    end\n  end\n  return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_we9si4z.lua:41:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmp_we9si4z.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    for i =\
    \ 1, #s do\n        if s[i] ~= string.sub(s, i, i) then\n            return string.sub(s,\
    \ 1, i-1) .. string.upper(string.sub(s, i+1, #s))\n        end\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn7x0rg3.lua:25:\
    \ expected: \"aSdF\"\nactual: \"SDF\"\nstack traceback:\n\t/tmp/tmpyn7x0rg3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n   s = string.gsub(s,\
    \ '%l', function(c) return string.upper(c) end)\n   s = string.gsub(s, '%u', function(c)\
    \ return string.lower(c) end)\n   s = string.gsub(s, '%x', string.byte)\n   return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lvne4yv.lua:23:\
    \ expected: \"aSdF\"\nactual: \"97s100102\"\nstack traceback:\n\t/tmp/tmp5lvne4yv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    return\
    \ s:gsub('%a+', function(x)\n        return x:lower() .. x:upper():gsub('.', function(x)\
    \ return x:lower() end)\n    end):gsub('%w+', function(x)\n        return x:lower()\
    \ .. x:upper():gsub('.', function(x) return x:upper() end)\n    end)\nend\n</cell>\n\
    <code language=julia-1.5>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpikaw5t0k.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978328
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = s..\"\
    z\" .. \"a\" .. \"B\" .. \"!@#$%^&*()-_=+[]{};:'\\\"><.,?/\\\\\"\n  local ret\
    \ = \"\"\n  for i = 1,#s do\n    if s[i] ~= nil then\n      local c = tolower(s[i])\n\
    \      if c >= \"a\" and c <= \"z\" then\n        c = c - 32\n      end\n    \
    \  ret = ret .. toupper(c)\n    else\n      ret = ret .. s[i]\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd86fmfxl.lua:24:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpd86fmfxl.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpd86fmfxl.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  if s:match('^[a-zA-Z]+$')\
    \ then\n    local lower = string.lower(s)\n    local upper = string.upper(s)\n\
    \    return string.gsub(lower, '[%a]+', function(c)\n      return upper:sub(1,\
    \ c:len()) .. c:sub(c:len())\n    end)\n  else\n    return s\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76oa9ix_.lua:28:\
    \ expected: \"aSdF\"\nactual: \"ASDFf\"\nstack traceback:\n\t/tmp/tmp76oa9ix_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local str\
    \ = ''\n  local i = 0\n  for c in s:gmatch 'a' .. 'z' do\n    if str:len() < 3\
    \ then\n      str = str .. c\n    elseif str:len() == 3 then\n      if c == str:sub(1,1)\
    \ then\n        str = str:sub(2) .. str:sub(1,1) .. str:sub(2)\n      else\n \
    \       str = str:sub(2) .. c\n      end\n    else\n      if str:len() > 3 then\n\
    \        str = str:sub(3) .. str:sub(1)\n      else\n        str = str:sub(1)\n\
    \      end\n    end\n    i = i + 1\n  end\n  if str:len() == 0 then\n    return\
    \ s\n  else\n    return str:sub(1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa94enku.lua:16:\
    \ attempt to concatenate a function value\nstack traceback:\n\t/tmp/tmpaa94enku.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpaa94enku.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  local count=0\n  local rev = string.gsub(s, \"([^A-Z])\", function(c) \n  \
    \  count = count + 1\n    return c\n  end)\n  if count==1 then\n    return s\n\
    \  else\n    return string.gsub(rev, \"([A-Z])\", function(c) \n      return string.char(tonumber(c)\
    \ or c)\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79yqu05u.lua:32:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp79yqu05u.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local new_s=\"\
    \"\n    for i=1,#s do\n        if string.sub(s,i,i)==\" \" then i=#s end\n   \
    \     if string.sub(s,i,i)==\"@\" then i=#s end\n        if string.sub(s,i,i)==\"\
    #\" then i=#s end\n        if string.sub(s,i,i)==\"$\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"[\" then i=#s end\n        if string.sub(s,i,i)==\"\
    .\" then i=#s end\n        if string.sub(s,i,i)==\"^\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"-\" then i=#s end\n        if string.sub(s,i,i)==\"\
    ]\" then i=#s end\n        if string.sub(s,i,i)==\"|\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"!\" then i=#s end\n        if string.sub(s,i,i)==\"\
    %\" then i=#s end\n        if string.sub(s,i,i)==\"&\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"*\" then i=#s end\n        if string.sub(s,i,i)==\"\
    $\" then i=#s end\n        if string.sub(s,i,i)==\">\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"<\" then i=#s end\n        if string.sub(s,i,i)==\"\
    #\" then i=#s end\n        if string.sub(s,i,i)==\" \" then i=#s end\n       \
    \ if string.sub(s,i,i)==\".\" then i=#s end\n        if string.sub(s,i,i)==\"\
    !\" then i=#s end\n        if string.sub(s,i,i)==\"?\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"-\" then i=#s end\n        if string.sub(s,i,i)==\"\
    +\" then i=#s end\n        if string.sub(s,i,i)==\",\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"'\" then i=#s end\n        if string.sub(s,i,i)==\"\
    @\" then i=#s end\n        if string.sub(s,i,i)==\"[\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"]\" then i=#s end\n        if string.sub(s,i,i)==\"\
    %\" then i=#s end\n        if string.sub(s,i,i)==\"|\" then i=#s end\n       \
    \ if string.sub(s,i,i)==\"^\" then i=#s end\n        if string.sub(s,i,i)==\"\
    -\" then i=#s end\n        if string.sub(s,\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp99y7xkic.lua:50: '')'' expected (to close ''('' at line 49)
    near ''=''

    '
  stdout: ''
  timestamp: 1659978329
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n\tif s:match'^[%aA!#@%]'\
    \ then\n\t\treturn s\n\telseif s:match'^[%aA]' then\n\t\treturn s:gsub('%a',function(x)\n\
    \t\t\tif x == 'a' or x == 'A' then\n\t\t\t\treturn 'A'\n\t\t\telseif x == 'b'\
    \ or x == 'B' then\n\t\t\t\treturn 'b'\n\t\t\telseif x == 'c' or x == 'C' then\n\
    \t\t\t\treturn 'C'\n\t\t\telseif x == 'd' or x == 'D' then\n\t\t\t\treturn 'd'\n\
    \t\t\telseif x == 'e' or x == 'E' then\n\t\t\t\treturn 'e'\n\t\t\telseif x ==\
    \ 'f' or x == 'F' then\n\t\t\t\treturn 'f'\n\t\t\telseif x == 'g' or x == 'G'\
    \ then\n\t\t\t\treturn 'g'\n\t\t\telseif x == 'h' or x == 'H' then\n\t\t\t\treturn\
    \ 'h'\n\t\t\telseif x == 'i' or x == 'I' then\n\t\t\t\treturn 'i'\n\t\t\telseif\
    \ x == 'j' or x == 'J' then\n\t\t\t\treturn 'j'\n\t\t\telseif x == 'k' or x ==\
    \ 'K' then\n\t\t\t\treturn 'k'\n\t\t\telseif x == 'l' or x == 'L' then\n\t\t\t\
    \treturn 'l'\n\t\t\telseif x == 'm' or x == 'M' then\n\t\t\t\treturn 'm'\n\t\t\
    \telseif x == 'n' or x == 'N' then\n\t\t\t\treturn 'n'\n\t\t\telseif x == 'o'\
    \ or x == 'O' then\n\t\t\t\treturn 'o'\n\t\t\telseif x == 'p' or x == 'P' then\n\
    \t\t\t\treturn 'p'\n\t\t\telseif x == 'q' or x == 'Q' then\n\t\t\t\treturn 'q'\n\
    \t\t\telseif x == 'r' or x == 'R' then\n\t\t\t\treturn 'r'\n\t\t\telseif x ==\
    \ 's' or x == 'S' then\n\t\t\t\treturn 's'\n\t\t\telseif x == 't' or x == 'T'\
    \ then\n\t\t\t\treturn 't'\n\t\t\telseif x == 'u' or x == 'U' then\n\t\t\t\treturn\
    \ 'u'\n\t\t\telseif x == 'v' or x == 'V' then\n\t\t\t\treturn 'v'\n\t\t\telseif\
    \ x == 'w' or x == 'W' then\n\t\t\t\treturn 'w'\n\t\t\telseif x == 'x' or x ==\
    \ 'X' then\n\t\t\t\treturn 'x'\n\t\t\telseif x == 'y' or x == 'Y' then\n\t\t\t\
    \treturn 'y'\n\t\t\telseif x == 'z' or x == 'Z' then\n\t\t\t\treturn 'z'\n\t\t\
    \telse\n\t\t\t\treturn x\n\t\t\tend\n\t\tend)\n\telse\n\t\treturn s:gsub('%d',\
    \ function(x)\n\t\t\tif x == '1' then\n\t\t\t\treturn '2'\n\t\t\telseif x == '\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0f9n0eyr.lua:78: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659978329
