name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty table of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the table.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- >>> search({4, 1, 2, 2, 3, 1})\n-- 2\n-- >>> search({1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4})\n-- 3\n-- >>> search({5, 5, 4, 4, 4})\n-- -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local counter = { }\n    for i, v in pairs(lst) do\n        if\
    \ not counter[v] then\n            counter[v] = i\n        end\n    end\n    local\
    \ i, max_count = next(counter)\n    if max_count == nil then return -1 end\n \
    \   return max_count, counter[max_count]\nend", "  -- Set default values for all\
    \ variables.\n  local freq = 1\n  local minfreq = sys.maxsize\n  \n  -- Traverse\
    \ the input list.\n  for index, item in ipairs(lst) do\n    freq = freq + 1 --\
    \ freq[item]\n    if freq > minfreq then minfreq = freq end\n  end\n  \n  -- Return\
    \ the greatest value.\n  return minfreq and lst[#lst - 1] or -1\nend", "    if\
    \ #lst == 0 then return -1 end\n    local i = lst.max\n    while i ~= 0 do\n \
    \       local count = lst[i]\n        if count >= i then return i end\n      \
    \  i = i - 1\n    end\n    return -1\nend", "  local max_count = 0\n  local max_val\
    \ = nil\n  local max_idx = nil", "    local res, cnt\n    for i = #lst, 1, -1\
    \ do\n        cnt = cnt\n            or (\n            -- If current value is\
    \ less than the previous one, then keep decrementing by one.\n            -- If\
    \ current value is greater than previous one, then keep incrementing by one.\n\
    \            --\n            --   4         3         2         1\n          \
    \  --   < 1 --->  < 1 --->  < 1 --->  < 1\n            --   4         3      \
    \   2         1\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (1).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (1).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (2).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (2).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (3).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (3).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (4).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (4).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (5).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (5).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (6).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (6).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (7).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (7).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (8).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (8).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (9).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (10).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (10).\n            --   4         3         2         1 < -- Keep incrementing\
    \ by one (11).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by one (11).\n            --   4         3         2         1 < -- Keep decrementing\
    \ by ", "\tassert(lst)\n\tlocal max = 0\n\tlocal cur = lst[1]\n\tlocal freq =\
    \ 1\n\tfor i = 2, #lst do\n\t\tif lst[i] >= cur then\n\t\t\tfreq = freq + 1\n\t\
    \telse\n\t\t\tif freq > max then\n\t\t\t\tmax = freq\n\t\t\t\tcur = lst[i]\n\t\
    \t\t\tfreq = 1\n\t\t\telse\n\t\t\t\tfreq = freq\n\t\t\tend\n\t\tend\n\tend\n\t\
    return max\nend", "  if #lst == 0 then\n    return -1\n  end\n  local count =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == lst[#lst] then \n      count = count\
    \ + 1\n    else\n      count = count + 1\n      if count > lst[i] then \n    \
    \    return i\n      end\n    end\n  end\n  return -1\nend\n</cell>\n<cell>",
  "    local max = 0\n    local maxCount = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ == 1 then\n            if maxCount == 0 then\n                max = i\n    \
    \            maxCount = 1\n            else\n                max = i\n       \
    \         maxCount = maxCount + 1\n            end\n        else\n           \
    \ if maxCount > 0 then\n                max = i\n                maxCount = 1\n\
    \            end\n        end\n    end\n    if maxCount == 0 and max > 0 then\n\
    \        return -1\n    else\n        return max\n    end\nend", "    local mn\
    \ = nil\n    for i = 1, #lst do\n        if lst[i] == 0 then break end\n     \
    \   if lst[i][1] > mn then\n            mn = lst[i][1]\n        end\n    end\n\
    \    return mn or -1\nend", "    if lst[1] == nil then\n        return -1\n  \
    \  end\n    local value = lst[1]\n    local cnt = 1\n    for i = 2, #lst do\n\
    \        if lst[i] > value then\n            cnt = 1\n            value = lst[i]\n\
    \        else\n            cnt = cnt + 1\n        end\n    end\n    return value\n\
    end", "\tassert(#lst > 0)\n\tlocal max_val, max_count = (lst[1], 1)\n\tfor i =\
    \ 2, #lst do\n\t\tif lst[i] ~= max_val then break end\n\t\tmax_count = math.max(max_count,\
    \ i)\n\tend\n\tif max_count > 0 then return max_val end\n\treturn -1\nend", " \
    \   if not lst then\n        return -1\n    end\n    local result = -1\n    for\
    \ i = 1, #lst do\n        local x = lst[i]\n        if x >= result and x >= 1\
    \ then\n            result = x\n        end\n    end\n    return result\nend",
  "    local ans, freq = -1, 0\n    for v in lst do\n        if v > ans then\n   \
    \         ans, freq = v\n        end\n        if freq > 0 then\n            break\n\
    \        end\n    end\n    return ans\nend", "   local max, freq = lst[1], 1\n\
    \   for i, v in pairs(lst) do\n      if v >= max and v > freq then return v end\n\
    \      freq = freq + 1\n   end\n   return -1\nend", "    local largest = nil\n\
    \    local freq = 0\n    local i = 1\n    local n = #lst", "  for i = 1, #lst\
    \ do\n    if lst[i] > 0 then\n      if lst[i] == lst[i-1] then\n        return\
    \ i\n      else\n        return -1\n      end\n    end\n  end\nend", "    local\
    \ max_freq = -1\n    local max_value = -1\n    local freq = 0\n    for v in lst:gmatch(\"\
    %d+\") do\n        if freq < 1 then\n            max_freq = freq\n           \
    \ max_value = v\n        end\n        freq = freq - 1\n    end\n    return max_value,\
    \ max_freq\nend", "  if #lst == 0 then\n    return -1\n  end\n  local max = 0\n\
    \  local cur = lst[1]\n  local f = lst[1]\n  for i = 2, #lst do\n    local a =\
    \ cur\n    cur = lst[i]\n    if a > cur then\n      max = a\n      f = f+1\n \
    \   end\n  end\n  return max\nend", "\t-- Check for an empty table\n\tif lst[1]\
    \ == nil then\n\t\treturn -1\n\tend\n\t-- Find the greatest number with frequency\
    \ > 1\n\tlocal max = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v >= max then\n\t\
    \t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "    local max_freq = -1\n  \
    \  local maxval = nil\n    \n    for i, v in ipairs(lst) do\n        if v > 0\
    \ then\n            local freq = #lst:find(function(x) return x == v end)\n  \
    \          if max_freq == -1 or freq > max_freq then\n                max_freq\
    \ = freq\n                maxval = v\n            end\n        end\n    end\n\
    \    \n    return maxval\nend", "  local max_value = lst[1]\n  local index = 2\n\
    \  while index <= #lst do\n    if lst[index] > max_value then\n      max_value\
    \ = lst[index]\n    end\n    index = index + 1\n  end\n  if max_value == 0 then\n\
    \    return -1\n  end\n  return max_value + 1\nend", "    if lst == nil then return\
    \ end\n    if lst[1] == nil then return end\n    if lst[1] > 0 then return end",
  "  local freq = {}\n  for i = 1, #lst do\n    local value = lst[i]\n    if not freq[value]\
    \ then\n      freq[value] = 1\n    else\n      freq[value] = freq[value] + 1\n\
    \    end\n  end\n  \n  for i = 1, #lst do\n    if freq[lst[i]] >= lst.value then\
    \ \n      return i\n    end\n  end\n  return -1\nend", "\tlocal maxval, maxfreq\
    \ = lst[1], lst[2]\n\tfor i = 2, #lst do\n\t\tif maxfreq <= lst[i] then\n\t\t\t\
    maxval, maxfreq = lst[i], lst[i]\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\t\
    return maxval\nend", "    if #lst == 0 then\n        return -1\n    end\n    local\
    \ maxval = -1\n    local maxfreq = 0\n    for i = 1, #lst do\n        local v\
    \ = lst[i]\n        local freq = #lst", "    local max, val = 0, lst[1]\n    for\
    \ i=2,#lst do if val < lst[i] then\n        val, max = val, lst[i]\n    end end\n\
    \    return val\nend", "    local max = 0\n    local freq = { }", "   local maxVal\
    \ = -1\n   local maxCount = 0\n   for i = 1, #lst do\n      if lst[i] > maxVal\
    \ then\n         maxVal = lst[i]\n         maxCount = 1\n      elseif maxCount\
    \ > lst[i] then\n         maxCount = lst[i]\n      end\n   end\n   return maxVal\n\
    end", "   if #lst == 0 then\n      return -1\n   end", "  if #lst == 0 then\n\
    \    return -1\n  end\n  local max = lst[1]\n  for i=2,#lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n  end\n  return max\nend", "    local\
    \ result = nil\n    local frequency = 1\n    for _, v in ipairs(lst) do\n    \
    \    if frequency >= v then\n            frequency = frequency + 1\n        else\n\
    \            frequency = 1\n            result = v\n        end\n    end\n   \
    \ return result\nend", "   -- We need to find the maximum frequency of any integer.\n\
    \   -- We do this by creating a table with each integer as a key and incrementing\
    \ the value \n   -- every time we see it.\n   local freq = {}\n   for _, i in\
    \ pairs(lst) do\n      table.insert(freq, i, 1)\n   end\n   -- If there is no\
    \ such integer, return -1.\n   if #freq == 0 then\n      return -1\n   end\n \
    \  -- Otherwise, find the maximum frequency\n   local maxFreq = 0\n   local maxVal\
    \ = -1\n   for key, val in pairs(freq) do\n      if val > maxFreq then\n     \
    \    maxFreq = val\n         maxVal = key\n      end\n   end\n   return maxVal\n\
    end", "  local n = #lst\n  if n < 1 then return -1 end\n  local max = 0\n  local\
    \ count = 0\n  for i = 1, n do\n    if lst[i] > 0 then\n      count = count +\
    \ 1\n      max = max or lst[i]\n      if count > lst[i] then\n        count =\
    \ count-count\n      end\n    end\n  end\n  return max\nend", "    if not lst\
    \ or #lst == 0 then\n        return -1\n    end", "    for i = 1, #lst do\n  \
    \      if lst[i] <= 0 then\n            return -1\n        end\n        if lst[i]\
    \ > #lst then return -1 end\n    end\n    return #lst + 1\nend", "  assert(#lst,\
    \ \"Empty list\")\n  local max_value = 0\n  local max_count = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] > 0 then\n      local count = #lst\n      count = count\
    \ - i\n      if count > max_count then\n        max_count = count\n        max_value\
    \ = i\n      end\n    end\n  end\n  return max_value if max_count >= #lst and\
    \ max_value >= 0 end\n  return -1\nend", "\tlocal frequencies = {}\n\tfor i=1,#lst\
    \ do\n\t\tfrequencies[lst[i]] = frequencies[lst[i]] or 1\n\t\tfrequencies[lst[i]]\
    \ = frequencies[lst[i]] + 1\n\tend\n\tlocal max = -1\n\tfor key, value in pairs(frequencies)\
    \ do\n\t\tif max < key then\n\t\t\tmax = key\n\t\tend\n\t\tif value > max then\n\
    \t\t\tmax = value\n\t\tend\n\tend\n\treturn max\nend", "    local ans=-1\n   \
    \ for v in pairs(lst) do\n        if lst[v] > 0 then\n            ans = v\n  \
    \      end\n    end\n    return ans\nend", "    local n = #lst\n    if n == 0\
    \ then\n        return -1\n    end\n    local max_val = lst[1]\n    local max_count\
    \ = 0\n    for i = 2, n do\n        if lst[i] >= max_val then\n            max_val\
    \ = lst[i]\n            max_count = i - 1\n        end\n    end\n    return max_count\n\
    end", "   -- Sort the list\n   lst.sort(function(a,b) return a < b end)\n   --\
    \ Initialize the result\n   local ret = 0\n   -- Initialize our current index\
    \ position to zero\n   local indx = 0\n   -- If the list is empty, return -1\n\
    \   if not lst or #lst == 0 then\n      return -1\n   end\n   -- Iterate over\
    \ the list\n   for _, v in ipairs(lst) do\n      -- Increment the index\n    \
    \  indx = indx + 1\n      -- If we have found a value greater than the current\
    \ index position\n      if v >= indx then\n         -- Set our result to be this\
    \ index\n         ret = indx\n         break\n      end\n   end\n   return ret\n\
    end", "    local i = #lst\n    while i ~= 0 do\n        local freq = lst[i]\n\
    \        local maxVal = i\n        for j = i + 1, #lst do\n            if lst[j]\
    \ == freq then\n                maxVal = j\n            end\n        end\n   \
    \     if maxVal ~= i then\n            return maxVal\n        end\n        i =\
    \ i - 1\n    end\n    return -1\nend", "  return lst[#lst]\nend", "    if lst\
    \ == nil then\n        return -1\n    end\n    local max = 0\n    local max_cnt\
    \ = 0\n    for i=1,#lst do\n        if lst[i] ~= 0 then\n            if lst[i]\
    \ > max then\n                max = lst[i]\n                max_cnt = 1\n    \
    \        elseif lst[i] == max then\n                max_cnt = max_cnt + 1\n  \
    \          end\n        end\n    end\n    if max_cnt == 0 then\n        return\
    \ -1\n    end\n    return max\nend", "    local freq = lst[1]\n    local max =\
    \ -1\n    for i = 2, #lst do\n        if freq ~= lst[i] then break end\n     \
    \   if max < i then\n            max = i\n        end\n        freq = freq - 1\n\
    \    end\n    if max == -1 then return -1 end\n    return max\nend\n</code>\n\
    <|/ a |>\n<| a tags=lua,pattern-matching,algorithm dscore=3 |>\nIt is a classical\
    \ problem in Algorithms\n\"The most efficient algorithm for searching integers\
    \ in a range is the Knuth-Morris-Pratt algorithm\"\nKMP Algorithm\n<code>", " \
    \   local max_count = 0\n    local max_value = -1\n    for i=1, #lst do\n    \
    \    if lst[i] > max_value then \n            max_value = lst[i]\n           \
    \ max_count = i\n        end\n    end\n    return max_value\nend", "    local\
    \ maxV = -1\n    for v in lst:gmatch(\"%d*\") do\n        if maxV < v then\n \
    \           maxV = v\n        end\n    end\n    if maxV == -1 then\n        return\
    \ -1\n    else\n        return maxV\n    end\nend", "    local result = 0\n  \
    \  for _, v in pairs(lst) do\n        if v <= result then\n            result\
    \ = v\n        end\n    end\n    return result\nend", "  local freq = {}\n  local\
    \ max = -1\n  for _, v in ipairs(lst) do\n    local n = freq[v] or 0\n    freq[v]\
    \ = n + 1\n    if n > max then\n      max = n\n    end\n  end\n  if #freq > 0\
    \ then\n    for k, v in pairs(freq) do\n      if v >= max then\n        return\
    \ v\n      end\n    end\n  end\n  return -1\nend", "  local freq = {}\n  for _,\
    \ val in ipairs(lst) do\n    if freq[val] == nil then\n      freq[val] = 0\n \
    \   end\n    freq[val] = freq[val] + 1\n  end\n  local result = -1\n  for k, v\
    \ in pairs(freq) do\n    if freq[k] > result then\n      result = k\n    end\n\
    \  end\n  return result\nend", "\t-- Base cases\n\tif lst[1] < 0 then return -1\
    \ end\n\tif lst[#lst] <= 0 then return -1 end", "   -- Base case\n   if #lst ==\
    \ 0 then\n      return -1\n   end", "\tlocal max_freq = nil\n\tlocal max_val =\
    \ nil\n\tlocal i = 0\n\tlocal count = 0\n\tfor v in lst do\n\t\tcount = count\
    \ + 1\n\t\tif count > max_freq then\n\t\t\tmax_freq = count\n\t\t\tmax_val = v\n\
    \t\tend\n\tend\n\treturn max_val\nend", "    if lst == nil then return -1 end\n\
    \    local max = lst[1]\n    for i = 2, #lst do\n        if lst[i] > max then\n\
    \            max = lst[i]\n        end\n    end\n    return max\nend", "\tif lst\
    \ == nil then return -1 end\n\tlocal max = lst[1]\n\tfor i = 2, #lst do\n\t\t\
    if lst[i] > max then\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\treturn max\nend",
  "    local i = 1\n    while i ~= #lst do\n        if lst[i] > 0 then\n         \
    \   if lst[i - 1] + 1 == lst[i] then\n                return lst[i]\n        \
    \    else\n                return -1\n            end\n        end\n        i\
    \ = i + 1\n    end\nend\n</cell>\n<text>\n9. Search in Rotated Sorted Array\n\
    Given an array and a target value, write a function to search the array for a\
    \ given target value.", "    if #lst == 0 then return -1 else return lst[1] end\n\
    \    local i = 1\n    while i <= #lst do\n        local val = lst[i]\n       \
    \ local count = #lst\n        count = count - 1\n        while count > 0 do\n\
    \            if lst[count] == val then\n                count = count - 1\n  \
    \          else\n                count = count - 1\n                if count <\
    \ 0 then\n                    return val\n                end\n            end\n\
    \        end\n        i = i + 1\n    end\n    return -1\nend", "  for i, v in\
    \ ipairs(lst) do\n    if v > 0 then\n      return v\n    end\n  end\n  return\
    \ -1\nend", "  if #lst == 0 then return -1 end\n  local i = 1\n  while i <= #lst\
    \ do\n    local j = 1\n    while j <= #lst do\n      if lst[i] == lst[j] then\n\
    \        local k = j + 1\n        while k <= #lst and lst[k] == lst[i] do\n  \
    \        k = k + 1\n        end\n        if k - j > 1 then return lst[i] end\n\
    \      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return -1\nend",
  "    local max = 0\n    local freq = #lst\n    for i = 1, #lst do\n        if freq\
    \ == 0 then\n            return -1\n        end\n        if lst[i] > 0 and lst[i]\
    \ > max then\n            max = lst[i]\n        end\n        freq -= 1\n    end\n\
    \    return max\nend", "    if not lst:isTable() then return nil end\n    local\
    \ max = 1\n    local max = lst[1]\n    for i = 2, lst:len() do\n        if lst[i]\
    \ > max then\n            max = lst[i]\n        end\n    end\n    if max >= 1\
    \ then\n        return max\n    end\nend", "    local freq = {}\n    for x in\
    \ lst\n        do\n            if freq[x] == nil then\n                freq[x]\
    \ = 1\n            else\n                freq[x] = freq[x] + 1\n            end\n\
    \        end\n    return #lst > 0 and #lst <= #freq and #freq <= #lst and #freq\
    \ > 0 and #freq >= 1 and #freq >= #lst and freq[lst] >= #lst * 2 - 1 and lst.max()\
    \ or -1\nend", "   -- Base case\n   if #lst == 0 then\n      return -1\n   end\n\
    \   -- Try all pairs of elements to see if it satisfies the conditions\n   local\
    \ min1, min2 = lst[1], lst[1]\n   for i = 2, #lst do\n      if min1 > lst[i] then\n\
    \         min1 = lst[i]\n         min2 = lst[i]\n      elseif min2 > lst[i] then\n\
    \         min2 = lst[i]\n      end\n   end\n   -- If min2 is greater, min1 is\
    \ not greater than min2, and min2 > 0, return min2\n   if min2 > 0 then\n    \
    \  return min2\n   end\n   -- Else, min2 > 0. Return min1\n   return min1\nend",
  "   -- Get the first element of the list to compare\n   local candidate = lst[1]\n\
    \   -- For each element in lst, remove it if its the same as candidate\n   for\
    \ i = 2, #lst do\n      if lst[i] == candidate then\n         candidate = nil\n\
    \         break\n      end\n   end\n   -- Return -1 if candidate is nil, else\
    \ return candidate\n   return candidate\nend", "  local highest_frequency\n  local\
    \ highest_value\n  for i = 2, #lst do\n    local frequency = lst[i]\n    if frequency\
    \ >= highest_frequency then\n      highest_frequency = frequency\n      highest_value\
    \ = i\n    end\n  end\n  return highest_value or -1\nend\n</cell>\n<code language=julia-0.6>\n\
    # === Question 3 ===\n# Define a function that returns true if the string given\
    \ as argument has only digits.\n# Example:\n# >>> is_digits(\"123\")\n# true\n\
    # >>> is_digits(\"a123\")\n# false\n# >>> is_digits(\"a123asdf\")\n# false\n#\
    \ >>> is_digits(\"\")\n# false\n# >>> is_digits(\"a\")\n# false", "    local freq\
    \ = lst[1]\n    for i=2, #lst do\n        if lst[i] <= 0 then\n            return\
    \ -1\n        else\n            freq = freq * lst[i]\n        end\n    end\n \
    \   return freq\nend", "\tlocal size = #lst\n\t\n\tif size == 0 then\n\t\treturn\
    \ -1\n\tend\n\t\n\tlocal max = lst[1]\n\tfor i=2,size do\n\t\tif lst[i] > max\
    \ then\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\t\n\tlocal found = 1\n\tlocal i =\
    \ 1\n\twhile found ~= 0 and i < size do\n\t\tif lst[i] > max then\n\t\t\tfound\
    \ = 0\n\t\telseif lst[i] == max then\n\t\t\tfound = found + 1\n\t\telse\n\t\t\t\
    found = found + 1\n\t\t\tmax = lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\t\n\tif\
    \ found == 0 then\n\t\treturn -1\n\telse\n\t\treturn max\n\tend\nend", "    local\
    \ max = 0\n    local num = 0\n    for i = 1, #lst do\n        num = num + lst[i]\n\
    \        if num > 0 then\n            if num > max then\n                max =\
    \ num\n            end\n        end\n    end\n    return max\nend", "    local\
    \ i, max_freq = 0, 0\n    \n    for i, v in ipairs(lst) do\n        if v > 0 then\n\
    \            local freq = #lst\n            if freq <= v then freq = v end\n \
    \           max_freq = max_freq or freq\n        end\n    end", "  local count\
    \ = 0\n  local max = lst[1]\n  local i = 1\n  while i < #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n      count = 0\n    else\n      count = count\
    \ + 1\n    end\n    i = i + 1\n  end\n  if count >= max then\n    return -1\n\
    \  else\n    return max\n  end\nend", "    if lst[1] then\n        local val =\
    \ lst[1]\n        lst[1] = nil\n        return val\n    else\n        return -1\n\
    \    end\nend", "    local freq = { }\n    local max = 0\n    for i = 1,#lst do\n\
    \        if freq[lst[i]] == nil then\n            freq[lst[i]] = 0\n        end\n\
    \        freq[lst[i]] = freq[lst[i]] + 1\n        if freq[lst[i]] > max then\n\
    \            max = freq[lst[i]]\n        end\n    end\n    return max\nend", " \
    \ local largest = nil\n  for i=1,#lst do\n    local frequency = getFrequency(lst,i)\n\
    \    if frequency >= 1 and frequency >= frequency then\n      if largest == nil\
    \ or frequency > largest then\n        largest = i\n      end\n    end\n  end\n\
    \  return largest\nend", "    local max_val = -1\n    local max_val = -1\n   \
    \ local count = -1\n    for i = 1, #lst do\n        if lst[i] == 0 then \n   \
    \         return -1\n        else\n            if lst[i] > max_val then\n    \
    \            max_val = lst[i]\n            end\n            if lst[i] == max_val\
    \ and lst[i] > count then\n                count = lst[i]\n            end\n \
    \       end\n    end\n    if count > 0 then\n        return max_val\n    else\n\
    \        return -1\n    end\nend", "    local max_count = lst[1]\n    for i=2,#lst\
    \ do\n        if lst[i] > lst[i - 1] then return i end\n        max_count = max_count\
    \ or lst[i]\n    end\n    return -1\nend", "  local function find(x)\n    if x\
    \ > 0 then\n      local y = lst[x]\n      if y == nil then\n        return -1\n\
    \      else\n        return find(y - 1) + 1\n      end\n    else\n      return\
    \ 0\n    end\n  end\n  local i = 0\n  while i < #lst do\n    i = find(i)\n  end\n\
    \  return i\nend", "\tif lst[1] == nil then\n\t\treturn nil\n\tend", "    local\
    \ max_idx = 0 \n    local max_freq = -1\n    for i, x in ipairs(lst) do\n    \
    \    if x > 0 then\n            if freq[x] >= max_freq then\n                max_freq\
    \ = freq[x]\n                max_idx = i\n            end\n        end\n    end\n\
    \    return max_idx\nend", "\tlst = lst or {}\n\tlocal max = 0\n\tlocal key\n\t\
    for i, v in ipairs(lst) do\n\t\tkey = v\n\t\tif max < key then\n\t\t\tmax = key\n\
    \t\tend\n\t\tif max >= v then\n\t\t\treturn key\n\t\tend\n\tend\n\treturn -1\n\
    end", "\tlocal max = 0 \n\tlocal i = 1\n\twhile i < #lst and lst[i] > 0 do\n\t\
    \tif lst[i] > max then\n\t\t\tmax = lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    if max > 0 then\n\t\treturn max\n\tend\n\treturn -1\nend", "    local max_count\
    \ = 0\n    local max_val = -1\n    for _, v in ipairs(lst) do\n        if v >\
    \ 0 then\n            local count = table.getn(lst)\n            if count > max_count\
    \ then\n                max_count = count\n                max_val = v\n     \
    \       end\n        end\n    end\n    return max_val\nend", "  return lst[1]\
    \ > 0 and\n         lst[1]:getFrequency() >= lst[1]:getValue() or\n         lst[2]:getFrequency()\
    \ >= lst[2]:getValue() or\n         lst[3]:getFrequency() >= lst[3]:getValue()\
    \ or\n         lst[4]:getFrequency() >= lst[4]:getValue()\nend", "  local result,\
    \ freq = lst[1], lst[2]\n  for i = 2, #lst do\n    if freq > lst[i] then\n   \
    \   result, freq = lst[i], freq - lst[i]\n    end\n  end\n  return result\nend",
  "   local max_num = -1\n   local max_freq = -1\n   local num = -1\n   for _, v in\
    \ pairs(lst) do\n      if v >= num then\n         max_num = v\n         max_freq\
    \ = 1\n      elseif v > max_num then\n         max_num = v\n         max_freq\
    \ = 1\n      elseif v == num then\n         max_freq = max_freq + 1\n      end\n\
    \      num = v + 1\n   end\n   return max_num if max_num > 0 then\n      return\
    \ -1\n   else\n      return -1\n   end\nend", "    local result\n    for i, v\
    \ in ipairs(lst) do\n        if v == nil then return end\n        local count\
    \ = 0\n        for _, t in ipairs(lst) do\n            if t == nil then return\
    \ end\n            if t == v then\n                count = count + 1\n       \
    \     end\n        end\n        if count >= v then\n            result = v\n \
    \       end\n    end\n    return result\nend\n</cell>\n<text>\nExercise 9: Search\
    \ in Rotated Sorted Array", "  local max_freq, max = 0, lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > max then \n      max, max_freq = lst[i], 1\n    elseif lst[i]\
    \ == max then\n      max_freq = max_freq + 1\n    end\n  end\n  return max_freq\
    \ > #lst and -1 or max\nend", "    if lst[1] ~= nil then\n        local key =\
    \ lst[1]\n        local val = lst[1]\n        lst[1] = nil\n        -- remove\
    \ all elements with same value \n        local newLst = filter(function(x) x ==\
    \ val, lst)\n        if newLst[1] != nil then\n            return search(newLst)\n\
    \        else\n            return -1\n        end\n    end\nend", "  for _, val\
    \ in ipairs(lst) do\n    if val == nil or not (val > 0) then break end\n    if\
    \ val == lst[#lst] then return -1 end\n  end\n  return lst[#lst]\nend", "  local\
    \ m = {}\n  for k, v in pairs(lst) do m[#m + 1] = k end\n  local pos = 1\n  while\
    \ pos <= #lst\n    do\n      local value = lst[pos]\n      local count = m[pos]\n\
    \      if value < count and m[value] >= count then\n        return pos\n     \
    \ end\n      pos = pos + 1\n    end\n  return -1\nend", "    if lst[1] > 0 then\n\
    \        if lst[1] > lst[2] and lst[1] > lst[3] then\n            return lst[1]\n\
    \        end\n        if lst[1] > lst[2] then\n            return lst[1]\n   \
    \     end\n        if lst[1] > lst[3] then\n            return lst[1]\n      \
    \  end\n        if lst[2] > lst[3] then\n            return lst[2]\n        end\n\
    \        if lst[2] > lst[3] and lst[2] > lst[4] then\n            return lst[2]\n\
    \        end\n        if lst[2] > lst[3] then\n            return lst[2]\n   \
    \     end\n        if lst[3] > lst[4] then\n            return lst[3]\n      \
    \  end\n        if lst[3] > lst[4] then\n            return lst[3]\n        end\n\
    \    end\n    return -1\nend", "    local freq = {}\n    local curr, cur_freq\
    \ = lst[1], 1\n    for i = 2, #lst do\n        if freq[cur_freq] == nil then\n\
    \            freq[cur_freq] = curr\n            cur_freq = 1\n        else\n \
    \           cur_freq = freq[cur_freq] + 1\n        end\n        if cur_freq <=\
    \ i then\n            freq[cur_freq] = i\n        end\n        curr = curr + i\n\
    \    end\n    if cur_freq > #freq then\n        return -1\n    else\n        return\
    \ freq[cur_freq]\n    end\nend", "  return lst == nil and -1 or math.max(search(lst[1]),\
    \ search(lst[2]))\nend", "  local i = #lst\n  if i == 0 then return -1 end\n \
    \ local max = 0\n  local count = 0\n  while i do\n    count = count + 1\n    if\
    \ lst[i] == max then\n      if count > max then max = count end\n      count =\
    \ count - 1\n    else\n      count = count + 1\n      max = lst[i]\n    end\n\
    \    i = i - 1\n  end\n  return max\nend", "  if #lst == 0 then\n    return -1\n\
    \  end\n  local minfreq = #lst + 1\n  local maxfreq = 1\n  local maxint = -1\n\
    \  for i = 1, #lst do\n    local f = #lst\n    for j = 1, i do\n      f = f and\
    \ lst[j]\n    end\n    if f > maxfreq then\n      maxfreq = f\n      maxint =\
    \ i\n    end\n  end\n  if maxfreq > minfreq then\n    return maxint\n  else\n\
    \    return -1\n  end\nend", "   -- Create a frequency dictionary\n   local frequencies\
    \ = {}\n   for _, item in ipairs(lst) do\n      frequencies[item] = frequencies[item]\
    \ or 0\n      frequencies[item] = frequencies[item] + 1\n   end\n   -- Go through\
    \ all pairs of integers in frequency dictionary\n   local i = 0\n   local result\
    \ = -1\n   while i < #frequencies do\n      if frequencies[i] >= frequencies[result]\
    \ then\n         result = i\n      else\n         i = i + 1\n      end\n   end\n\
    \   return result\nend", "  local freq = {}\n  for _, value in ipairs(lst) do\
    \ freq[value] = 0 end\n  for _, value in ipairs(lst) do freq[value] = freq[value]\
    \ + 1 end\n  local maxValue = -1\n  local maxCount = 0\n  for key, value in pairs(freq)\
    \ do\n    if value > maxCount and value >= value then\n      maxCount = value\n\
    \      maxValue = key\n    end\n  end\n  return maxValue\nend", "  -- Your code\
    \ here\n  local max_index = -1\n  local max_freq = -1\n  for i = 1,#lst do\n \
    \   local num = lst[i]\n    if num ~= nil then\n      if num > max_freq then\n\
    \        max_freq = num\n        max_index = i\n      end\n    end\n  end\n  return\
    \ max_index\nend", "    local maxV = -1\n    local maxC = 0", "    local size\
    \ = #lst\n    for i = 1, #lst do\n        if lst[i] > 0 and lst[i] ~= size then\n\
    \            size = lst[i]\n        end\n    end", "    local result = -1\n  \
    \  local freq = 0\n    local i = 1\n    while i < #lst do\n        if lst[i] >=\
    \ 0 then\n            freq = freq + lst[i]\n        else\n            if freq\
    \ <= 0 then\n                result = -1\n                break\n            else\n\
    \                freq = freq - 1\n            end\n        end\n        i = i\
    \ + 1\n    end\n    return result\nend", "   -- The list might be empty or nil\n\
    \   if lst[1] == nil then\n      return -1\n   end", "    if lst[1] == nil then\n\
    \        return -1\n    end", "  for k, v in pairs(lst) do\n    if v >= 0 then\n\
    \      return v\n    end\n  end\n  return -1\nend", "\tlocal result = -1\n\tfor\
    \ i = 1, #lst do\n\t\tif lst[i] > result then\n\t\t\tresult = lst[i]\n\t\tend\n\
    \tend\n\treturn result\nend", "  if #lst == 0 then\n    return -1\n  end\n  local\
    \ max_freq = 1\n  local max_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ ~= max_val then\n      if max_freq > max_val then\n        max_freq = max_val\n\
    \      else\n        max_freq = 1\n      end\n      max_val = lst[i]\n    end\n\
    \  end\n  if max_freq > 0 then\n    return max_val\n  end\n  return -1\nend",
  "   for i = 1, #lst do\n      local value = lst[i]\n      if value[1] >= value[2]\
    \ then\n         return value[1]\n      else\n         return -1\n      end\n\
    \   end\nend", "    local max = 0\n    local curr = 1\n    for k in lst:gmatch('%d+')\
    \ do\n        if curr >= k then\n            curr = 1\n        else\n        \
    \    curr = curr * k\n            if curr > max then\n                max = curr\n\
    \            end\n        end\n    end\n    if max == 0 then\n        return -1\n\
    \    end\n    return max\nend", "  -- Base case\n  if #lst == 0 then\n    return\
    \ -1\n  end\n  -- Recursive case\n  local value = lst[1]\n  if #lst == 1 then\n\
    \    return value\n  end\n  -- If current value is greater than value, return\
    \ -1 \n  -- If current value is greater than or equal to value, return the value\
    \ of current \n  -- Recursive case\n  local index = #lst - 1\n  while index >\
    \ 1 do\n    value = lst[index]\n    if value > value then\n      return -1\n \
    \   elseif value == value then\n      -- If value is equal to value, increment\
    \ index\n      index = index - 1\n    else\n      -- If value is greater than\
    \ value, decrement index\n      index = index - 1\n    end\n  end\n  return value\n\
    end", "  local n = 1\n  while n > 0 do\n    local m = 1\n    while m < n do\n\
    \      if lst[m] > lst[n - 1] then\n        if m > n then\n          return -1\n\
    \        else\n          return lst[m]\n        end\n      elseif lst[m] == lst[n\
    \ - 1] then\n        return lst[m]\n      end\n      m = m + 1\n    end\n    n\
    \ = n + 1\n  end\nend", "    local i = lst.head\n    local max = 0\n    while\
    \ i ~= nil do\n        local f = lst:get(i)\n        if f >= max then\n      \
    \      max = f\n        end\n        i = lst:getNextPos(i)\n    end\n    return\
    \ max\nend", "    if #lst==0 then return -1 end\n    local maxV=lst[1]\n    local\
    \ maxF=lst[1]\n    for i=2,#lst do\n        if lst[i]>=maxV and lst[i]>maxF then\n\
    \            maxV=lst[i]\n            maxF=lst[i]\n        elseif lst[i]>maxV\
    \ then\n            maxV=lst[i]\n        end\n    end\n    return maxV\nend\n\
    return search", "  if #lst==0 then\n    return -1\n  end\n  local highest=lst[1]\n\
    \  local frequency = 1\n  for i=2,#lst do\n    if lst[i]>highest then\n      highest\
    \ = lst[i]\n      frequency = 1\n    else\n      frequency = frequency + 1\n \
    \   end\n  end\n  return highest - frequency + 1\nend", "\tlocal key, max = 1,\
    \ lst[1][1]\n\tfor i = 2, #lst do\n\t\tif lst[i][1] > max then\n\t\t\tmax = lst[i][1]\n\
    \t\t\tkey = i\n\t\tend\n\tend\n\tif key == #lst then\n\t\treturn -1\n\tend\n\t\
    return lst[key][2]\nend", "  local v = 0\n  for _,v in pairs(lst) do break end\n\
    \  return v\nend\n</cell>\n<cell>\nassert(search({}) == -1)\nassert(search({\"\
    A\"}) == -1)\nassert(search({\"A\",\"B\"}) == -1)\nassert(search({\"A\",\"A\"\
    ,\"B\"}) == 1)\nassert(search({\"A\",\"A\",\"A\",\"B\",\"C\",\"C\",\"C\",\"D\"\
    ,\"D\",\"D\"}) == 4)\n</cell>\n<text>\nThe solution is linear in the size of the\
    \ table, but is $O(n)$ in the number of keys.", "  local max = 0\n  local max\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  return max\nend", "   for i = 1, #lst do\n      if lst[i] ==\
    \ 1 then\n         return i\n      end\n   end\n   return -1\nend", "\t-- Your\
    \ code here\n\tlocal result = 0\n\t\n\tfor i = 1, #lst do \n\t\t-- Your code here\n\
    \tend\n\treturn result\nend", "    local maxValue = 0\n    local maxCount = 0\n\
    \    for _, value in ipairs(lst) do\n        if value > maxValue then\n      \
    \      maxValue = value\n            maxCount = 1\n        elseif value == maxValue\
    \ then\n            maxCount = maxCount + 1\n        end\n    end\n    return\
    \ maxValue if maxCount >= maxValue else -1\nend", "  -- First sort\n  lst.sort()\n\
    \  -- Check if the first element of the list is 0\n  if lst[1] < 0 then\n    return\
    \ -1\n  end\n  -- Keep on checking\n  for i = 2, #lst do\n    -- If the current\
    \ value is the same as the previous one, add 1 to the frequency\n    if lst[i]\
    \ == lst[i - 1] and lst[i] > 0 then\n      lst[i - 1] += 1\n      -- If the current\
    \ value is less than the previous one\n    elseif lst[i] < lst[i - 1] and not\
    \ lst[i - 1] > 0 then\n      -- The new frequency, because if lst[i] < lst[i -\
    \ 1]\n      lst[i] = 1\n      -- If the current value is greater than the previous\
    \ one\n    else\n      -- The previous frequency, because if lst[i] > lst[i -\
    \ 1]\n      lst[i - 1] = 1\n    end\n  end\n  -- If the first value is the same,\
    \ there is no frequency, because lst[1] <= 0\n  if lst[1] = 1 then\n    return\
    \ -1\n  end\n  -- Return the first value of the list which has a frequency greater\
    \ than or equal to the value itself\n  return lst[1]\nend", "  local max = 1\n\
    \  local count = 0\n  for v in lst do\n    count = count + 1\n    if max > v then\n\
    \      max = v\n    end\n  end\n  if count > 0 then\n    for v in lst do\n   \
    \   if v > max then\n        max = v\n      end\n    end\n  end\n  return max\n\
    end", "  local freq = {}\n  for _, v in ipairs(lst) do\n    if freq[v] == nil\
    \ then\n      freq[v] = 1\n    else\n      freq[v] = freq[v] + 1\n    end\n  end",
  "    local ans = lst[1]\n    for i = 2, #lst do\n        if lst[i] > ans then\n\
    \            ans = lst[i]\n        end\n    end\n    return ans\nend", "\tassert(lst,\
    \ \"No list given\")\n\tassert(#lst > 0, \"The given list is empty\")", "\tlocal\
    \ max = 1\n\tfor index, element in ipairs(lst) do\n\t\tif element == 1 then\n\t\
    \t\tif max <= 0 then return -1 end\n\t\telse\n\t\t\tmax = element + 1\n\t\tend\n\
    \tend\n\treturn max\nend", "\tlocal max = 0 \n\tlocal count = 0\n\tfor i, x in\
    \ ipairs(lst) do \n\t\tif x > max then\n\t\t\tmax = x\n\t\t\tcount = i\n\t\tend\n\
    \tend\n\treturn max or -1\nend", "    local largest = 0\n    local freq = 1\n\
    \    for i,v in ipairs(lst) do\n        freq = freq + v\n        if freq > largest\
    \ then\n            largest = freq\n        end\n    end\n    return largest\n\
    end", "  local max = 0\n  local pos = 0\n  for _,v in ipairs(lst) do\n    max\
    \ = math.max(max, v)\n    pos = pos + 1\n  end\n  if pos == 0 or max <= 0 then\n\
    \    return -1\n  end\n  return max\nend", "  for i = #lst, 1, -1 do\n    local\
    \ freq = lst[i]\n    local index = i\n    for j = i + 1, #lst do\n      local\
    \ freq2 = lst[j]\n      if freq > freq2 then\n        index = j\n        freq\
    \ = freq2\n      end\n    end\n    if index == i then return index else break\
    \ end\n  end\n  return -1\nend", "    return lst:reduce(function(acc, val)\n\t\
    \tif acc == 0 then return val end\n\t\tif val ~= (acc:get(acc)) + 1 then\n\t\t\
    \tacc:add(val)\n\t\t\treturn val\n\t\tend\n\t\treturn acc\n\tend, {})\nend", " \
    \   local maxval = 0\n    for i = 1, #lst do\n        if lst[i] == 1 then\n  \
    \          local maxval = maxval or 0\n            local found = 0\n         \
    \   for j = 0, i do\n                if lst[j] == lst[i] then\n              \
    \      found = 1\n                elseif found == 0 then\n                   \
    \ maxval = lst[j]\n                end\n            end\n            if maxval\
    \ == 0 then\n                return -1\n            end\n        end\n    end\n\
    \    return maxval\nend", "   local max = 0\n   local maxVal = nil\n   for i =\
    \ 1, #lst do\n      if lst[i] == max then\n         return -1\n      end\n   \
    \   if lst[i] > max then\n         max = lst[i]\n         maxVal = i\n      end\n\
    \   end\n   return maxVal\nend", "  if #lst == 0 then return -1 end\n  local max\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n  \
    \  end\n  end\n  if max >= lst[#lst] then return #lst end\n  return max\nend",
  "    local max_num = 0\n    local max_cnt = 0\n    for i=1,#lst do\n        local\
    \ cnt = lst:count(lst[i])\n        if cnt > max_cnt then\n            max_cnt\
    \ = cnt\n            max_num = lst[i]\n        end\n    end\n    return max_num\n\
    end", "    local max = 0\n    local freq = 0\n    for i, v in ipairs(lst) do\n\
    \        if v > 0 then\n            freq = freq + 1\n            if freq > max\
    \ then\n                max = v\n            end\n        end\n    end\n    return\
    \ max\nend", "  local max_count, cur_freq = 1, 1\n  for idx, item in ipairs(lst)\
    \ do\n    cur_freq = cur_freq * item + 1 -- increment freq\n    if cur_freq >\
    \ max_count then return idx end\n  end\n  return -1\nend", "   local max = 0 \n\
    \   for i = 1, #lst do \n      if lst[i] == 0 then break end\n      max = lst[i]\
    \ \n      if max > 0 then\n         for j = i + 1, #lst do \n            if lst[j]\
    \ == 0 then break end \n            if lst[j] > max then\n               max =\
    \ lst[j]\n            end\n         end\n      end\n   end\n   return max\nend",
  "    if not lst or #lst==0 then return end\n    if lst[1] <= 0 then return -1 end\n\
    \    if lst[#lst] == 1 then return lst[1] end\n    local ret = search(lst[#lst].next)\n\
    \    if ret ~= nil then\n        if ret > 0 then\n            return ret\n   \
    \     else\n            if ret <= lst[#lst] then\n                return -1\n\
    \            end\n        end\n    end\nend", "    local max_val = -1\n    local\
    \ max_freq = -1\n    for _, v in ipairs(lst) do\n        if v > 0 and v > max_freq\
    \ then\n            max_val = v\n            max_freq = v\n        end\n    end\n\
    \    return max_val\nend", "  if lst[1] == nil then\n    return -1\n  end", "\t\
    -- lst: table\n\tlocal max = -1\n\tlocal maxfreq = -1\n\t\n\t-- Loop over all\
    \ elements.\n\tfor i, val in pairs(lst) do\n\t\t-- Check if frequency is greater\
    \ than zero.\n\t\tif val > 0 then\n\t\t\t-- Check if frequency is greater than\
    \ or equal to the value of current element.\n\t\t\tif val >= max then\n\t\t\t\t\
    -- If value is greater than or equal to current element, assign it to max and\
    \ update its frequency.\n\t\t\t\tmax = val\n\t\t\t\tmaxfreq = lst[i]\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\treturn maxfreq\nend", "    local max, count = 0, 1\n   \
    \ for i = #lst + 1, 1 do -- We count from 1 because the first value might be 0\n\
    \        if lst[i] == 0 then break end\n        if lst[i] > 0 then count = count\
    \ + 1 end\n        if count >= max then max = count end\n    end\n    return max\n\
    end", "    local freq = { }\n    for i,v in ipairs(lst) do\n        table.insert(freq,\
    \ v)\n    end\n    local result = 1\n    for i,v in ipairs(freq) do\n        if\
    \ v <= 1 then\n            return -1\n        else\n            result = v\n \
    \       end\n    end\n    return result\nend", "    local max_freq = 0\n    local\
    \ max_val = nil\n    for i, v in ipairs(lst) do\n        if v > 0 then\n     \
    \       local freq = #lst[#lst - i - 1]\n            if freq >= v then\n     \
    \           max_freq = freq\n                max_val = v\n            end\n  \
    \      end\n    end\n    return max_val and max_freq and max_val >= max_freq and\
    \ max_val or -1\nend", "\tlocal max = -1\n\tlocal fmax = -1\n\tfor i=1,#lst do\n\
    \t\tlocal n = lst[i]\n\t\tif n > 0 then\n\t\t\tif n > max then\n\t\t\t\tmax =\
    \ n\n\t\t\t\tfmax = i\n\t\t\tend\n\t\telse\n\t\t\tif max >= 0 then\n\t\t\t\tmax\
    \ = -1\n\t\t\t\tfmax = -1\n\t\t\tend\n\t\tend\n\tend\n\tif max >= 0 then\n\t\t\
    if fmax > 0 then\n\t\t\t-- fmax is the frequency of element with value max, and\
    \ max is the greatest integer greater than 0\n\t\t\t-- so we can ignore the value\
    \ of max\n\t\t\tfmax = fmax - max \n\t\tend\n\tend\n\treturn fmax\nend", "  if\
    \ lst[1] == nil then return -1 end\n  local maxfreq = lst[2]\n  local idx = 1\n\
    \  while idx <= #lst do\n    local freq = lst[idx]\n    if freq > maxfreq then\
    \ maxfreq = freq end\n    if freq > 0 then\n      idx = idx + 1\n    elseif freq\
    \ == 0 then\n      if maxfreq < 0 then return -1 end\n      maxfreq = maxfreq\
    \ - 1\n    end\n  end\n  return maxfreq\nend", "  local max = 0 \n  local index\
    \ = 0 \n  local freq = 0 \n  for i = 2, #lst do \n    freq = freq + lst[i] \n\
    \    if freq >= lst[index] then \n      index = i \n      freq = freq - lst[index]\
    \ \n    else \n      max = i + 1 \n      freq = 0 \n    end \n  end \n  return\
    \ max \nend ", "  local maxfreq = table.count(lst)\n  if maxfreq < 1 then return\
    \ -1 else return maxfreq end\n  local largest = 0\n  for i = 2, #lst do\n    local\
    \ freq = table.count(lst:sub(1, i - 1))\n    if freq > largest * i then\n    \
    \  largest = i\n    end\n  end\n  return largest\nend\n</cell>\n<cell>", "\tlocal\
    \ maxCount = 0\n\tlocal index = nil\n\tfor i = 1, #lst do\n\t\tlocal item = lst[i]\n\
    \t\tlocal count = lst.frequency (item)\n\t\tif count > maxCount then \n\t\t\t\
    maxCount = count\n\t\t\tindex = item\n\t\tend\n\tend\n\treturn index\nend", " \
    \  local function find(x, lst)\n      if #lst==0 then return -1 end\n      if\
    \ lst[x] > 0 then return lst[x] end\n      if lst[x] == 0 then return find(lst[x+1],\
    \ lst) end\n   end\n   return find(0, lst)\nend", "    local max = 0\n    local\
    \ count = 0\n    for value in lst do\n        if value > 0 then\n            if\
    \ frequency > count then\n                max = value\n                count =\
    \ frequency\n            end\n        else\n            count = count + 1\n  \
    \      end\n    end\n    if max ~= -1 and count >= frequency then\n        return\
    \ max\n    end\n    return -1\nend", "    return table.max({0, unpack(lst)})\n\
    end", "    local ans, freq, i, j, k, l, m, n, o\n    freq = #lst\n    ans = -1\n\
    \    if freq == 0 then\n        return ans\n    end\n    for i = 1, freq do\n\
    \        for j = 1, freq do\n            m = i - j\n            if m == 0 then\n\
    \                ans = i if lst[i] > lst[j] else j\n            else\n       \
    \         n = lst[i] > lst[j]\n                if n == 1 then\n              \
    \      ans = i if n > lst[i] else j\n                elseif n == 0 then\n    \
    \                ans = -1\n                    break\n                else\n \
    \                   m = m + lst[j]\n                    local tm = lst[m]\n  \
    \                  lst[m] = lst[j]\n                    lst[j] = tm\n        \
    \            i = i - 1\n                    j = j - 1\n                    k =\
    \ k + 1\n                    l = l - 1\n                    m = m - 1\n      \
    \          end\n            end\n        end\n    end\n    return ans\nend", " \
    \ if lst[1] == nil then\n    return -1\n  else\n    if lst[#lst] > 0 then\n  \
    \    return search(lst[#lst]:next())\n    else\n      return search(lst[#lst]:next())\n\
    \    end\n  end\nend", "    local max = lst[1]\n    local min = 1", "    local\
    \ freq = {}\n    for i = 1, #lst do \n        local x = lst[i]\n        if freq[x]\
    \ == nil then\n            freq[x] = 1\n        else\n            freq[x] = freq[x]\
    \ + 1\n        end\n    end\n    \n    for key, value in pairs(freq) do\n    \
    \    if value > 0 then\n            return key\n        end\n    end\n    return\
    \ -1\nend", "\tlocal max_frequency = 0\n\tlocal max_number = nil\n\tlocal index\n\
    \tfor index = 1, #lst - 1 do\n\t\tlocal frequency = lst[index]:frequency()\n\t\
    \tif frequency > max_frequency then\n\t\t\tmax_frequency = frequency\n\t\t\tmax_number\
    \ = lst[index]:number()\n\t\tend\n\tend\n\treturn max_number \nend", "\tlocal\
    \ max = -1\n\tlocal freq = 0\n\tlocal maxFreq = 0\n\tfor i, v in pairs(lst) do\n\
    \t\tif v > 0 then\n\t\t\tif freq == 0 then\n\t\t\t\tfreq = v\n\t\t\telseif freq\
    \ == v then\n\t\t\t\tfreq = freq + 1\n\t\t\telse\n\t\t\t\tif v > maxFreq then\n\
    \t\t\t\t\tmax = v\n\t\t\t\t\tmaxFreq = v\n\t\t\t\tend\n\t\t\t\tfreq = v\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn max\nend", "    local i, c, freq, max = 0,0,0,0\n\
    \    for x in lst:gmatch(\"%d\") do\n        if x > freq then\n            freq\
    \ = x\n            i = i\n        elseif freq == x then\n            c = c+1\n\
    \        end\n        if x > max then\n            max = x\n        end\n    end\n\
    \    return max, freq, c\nend", "  local max = 0\n  local freq = 0", "  -- Search\
    \ for largest value in given list.\n  -- If no such value exists return -1.\n\
    \  for i = 1, #lst do\n    if lst[i] > 0 then\n      return i\n    end\n  end",
  "  local max = 1\n  local max = -1\n  for i = 1,#lst do \n    if lst[i] > 0 then\n\
    \      local freq = #lst\n      for j = 1,i do\n        freq = freq - lst[j]\n\
    \      end\n      if freq >= max then\n        max = freq\n      end\n    end\n\
    \  end\n  return max\nend", "\tlocal i = 1\n\t\n\twhile i <= #lst do\n\t\tif lst[i]\
    \ <= 0 then\n\t\t\treturn -1\n\t\telseif lst[i] == 0 then\n\t\t\treturn -1\n\t\
    \telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\t\n\treturn -1\nend", "    if lst ==\
    \ nil then\n        return -1\n    end\n    local n = #lst\n    for i = 1,n do\n\
    \        if lst[i] <= 0 then\n            return -1\n        end\n    end\n  \
    \  local max = 1\n    local max_i = 0\n    local count = 1\n    for i = 1,n do\n\
    \        if lst[i] <= 0 then\n            if count == max then\n             \
    \   max_i = i - 1\n            end\n            max = count + 1\n        else\n\
    \            count = count + 1\n        end\n    end\n    if count > max then\n\
    \        return -1\n    end\n    return lst[max_i] \nend", "    if #lst < 2 then\
    \ return -1 end\n    local max = -1\n    local i = 1\n    while i <= #lst do\n\
    \        if lst[i] > max then\n            max = lst[i]\n        end\n       \
    \ i = i + 1\n    end\n    return max\nend", "    local largest = -1\n    local\
    \ frequency = 0\n    local max = 0\n    for i, v in ipairs(lst) do\n        if\
    \ v > largest or v == largest and frequency < 1 then\n            largest = v\n\
    \            frequency = 1\n        elseif v == largest and frequency > frequency\
    \ then\n            frequency = frequency + 1\n        else\n            frequency\
    \ = frequency + 1\n        end\n        if frequency > max then\n            max\
    \ = frequency\n        end\n    end\n    if frequency == 0 or largest == -1 then\n\
    \        return -1\n    end\n    return max\nend", "  if #lst == 0 then\n    return\
    \ -1\n  end\n  local max = -1\n  local count = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] > max then\n      max = lst[i]\n    end\n    count = count + 1\n    if\
    \ count >= max then\n      return i\n    end\n  end\n  return -1\nend", "    local\
    \ max_val, max_freq = lst[1], lst[2]\n    for _,v in ipairs(lst) do\n        if\
    \ v > max_val then max_val, max_freq = v, 1 end\n        if v == max_val then\
    \ max_freq = max_freq + 1 end\n    end\n    if max_freq == 0 then\n        return\
    \ -1\n    else\n        return max_val\n    end\nend", "    local key\n    local\
    \ max = 1\n    for key, value in pairs(lst) do\n        if max < key then\n  \
    \          max = key\n        end\n    end\n    return max\nend", "  local max\
    \ = 0\n  local cur = 0\n  local f = 0", "    local max_count = -1\n    local max_count\
    \ = 0\n    local frequency = {}\n    for key, value in pairs(lst) do\n       \
    \ if frequency == nil then\n            frequency = { }\n        end\n       \
    \ frequency[key] = frequency[key] + 1 or 1\n        if frequency[key] > max_count\
    \ then\n            max_count = frequency[key]\n        end\n    end\n    if max_count\
    \ >= 0 then\n        return max_count\n    else\n        return -1\n    end\n\
    end", "  -- base case\n  if lst[1] == 0 then\n    return -1\n  end", "  for i\
    \ = #lst,1,-1 do\n    if lst[i] > 0 then\n      return i\n    end\n  end\n  return\
    \ -1\nend", "\tlocal freq = {}\n\tfor i, v in pairs(lst) do\n\t\tif freq[v] ==\
    \ nil then\n\t\t\tfreq[v] = 1\n\t\telse\n\t\t\tfreq[v] = freq[v] + 1\n\t\tend\n\
    \tend\n\t\n\tlocal result = nil\n\tfor k, v in pairs(freq) do\n\t\tif v > 0 and\
    \ k <= result then\n\t\t\tresult = k\n\t\tend\n\tend\n\treturn result\nend", " \
    \   if lst[1] == nil then\n        return -1\n    end", "  local largest = lst[1]\n\
    \  for i = 2, #lst do\n    local count = lst[i]\n    if count >= largest or count\
    \ == largest * 2 then -- found a better one\n      largest = count\n    end\n\
    \  end\n  return largest\nend", "  local freq = {}\n  local max = -1\n  for i,v\
    \ in ipairs(lst) do\n    freq[v] = freq[v] or 1\n    if freq[v] > max then\n \
    \     max = freq[v]\n    end\n  end\n  if max == -1 then\n    return -1\n  end\n\
    \  for i,v in ipairs(lst) do\n    if freq[v] > max and freq[v] >= v then\n   \
    \   max = freq[v]\n    end\n  end\n  return max\nend", "    if #lst == 0 then\
    \ return -1 end\n    local key = lst[1]\n    for i=2, #lst do\n        if lst[i]\
    \ <= key then\n            key = -1\n        else\n            return i\n    \
    \    end\n    end\n    return key\nend", "  -- base case\n  if #lst <= 0 then\
    \ return -1 end\n  \n  -- initialize max frequency counter\n  local maxFrequency\
    \ = 0\n  \n  -- get the current integer and increment frequency\n  for i, v in\
    \ pairs(lst) do\n    -- only add if we have a frequency greater than the existing\
    \ value\n    if maxFrequency < i then\n      maxFrequency = i\n    end\n  end\n\
    \  \n  -- return the greatest value that meets our criteria\n  return maxFrequency\n\
    end", "  local max_val = nil\n  local max_frequency = nil\n  for i = 1, #lst do\
    \ \n    if lst[i] > 0 then\n      local current_frequency = lst[i]\n      local\
    \ current_val = lst[i]\n      for j = i + 1, #lst do \n        if lst[j] > 0 then\n\
    \          current_frequency = (current_frequency + lst[j]) / 2 \n        end\n\
    \      end\n      local is_greater = current_frequency >= current_val\n      if\
    \ max_frequency == nil or is_greater then\n        max_frequency = current_frequency\n\
    \        max_val = current_val\n      end\n    end\n  end\n  return max_val\n\
    end", "  if #lst == 0 then\n    return -1\n  end\n  \n  local val = lst[1]\n \
    \ \n  local max = -1\n  \n  for i = 2, #lst do\n    if val <= lst[i] then\n  \
    \    val = val + 1 -- frequency\n    else\n      val = val - 1 -- frequency\n\
    \      if val <= 0 then\n        max = i\n        break\n      end\n    end\n\
    \  end\n  \n  return max\nend", "  for k,v in pairs(lst) do\n    if v >= lst[k]\
    \ then\n      return k\n    end\n  end\n  return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test your function\n@test search({ 4, 1, 2, 2, 3, 1}) == 2 \n@test search({\
    \ 1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n@test search({ 5, 5, 4, 4, 4}) == -1\n</cell>\n\
    <text>\n10.2) Now that you have the tools to write a function that finds the greatest\
    \ integer that has a frequency greater than or equal to the value of the integer\
    \ you just found. Complete the function below.", "  for i = #lst, 1, -1 do\n \
    \   if lst[i] > 0 then\n      return lst[i]\n    end\n  end\n  return -1\nend",
  "    local function helper(tab, last)\n        local n = #tab\n        if n == 0\
    \ then\n            return -1\n        else\n            if last == 0 then\n \
    \               return 0\n            else\n                local m = math.floor(math.log(n)/math.log(2))\n\
    \                if tab[m] < tab[last] then\n                    return helper(tab,\
    \ m-1)\n                else\n                    return helper(tab, m+1)\n  \
    \              end\n            end\n        end\n    end\n    return helper(lst,\
    \ 0)\nend", "  local maxNum = -1\n  local maxNumCount = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > maxNum then\n      maxNum = lst[i]\n      maxNumCount = 1\n \
    \   else\n      maxNumCount = maxNumCount + 1\n    end\n  end\n  return maxNum\
    \ if maxNumCount >= maxNum and maxNumCount > 0 then maxNum end\nend", "\tlocal\
    \ m=0, i\n\tfor i=1, #lst do\n\t\tif lst[i] > 0 then\n\t\t\tm, i = i, lst[i]\n\
    \t\t\tif not m then return -1 end\n\t\tend\n\tend\n\treturn m\nend", "\tlocal\
    \ max = 0\n\tlocal freq = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v == max then\n\
    \t\t\tfreq = freq + 1\n\t\telse\n\t\t\tif freq == 0 then\n\t\t\t\tmax = v\n\t\t\
    \t\tfreq = 1\n\t\t\telse\n\t\t\t\tif v > max then\n\t\t\t\t\tmax = v\n\t\t\t\t\
    end\n\t\t\t\tfreq = 1\n\t\t\tend\n\t\tend\n\tend\n\tif max < 1 then\n\t\treturn\
    \ -1\n\tend\n\treturn max\nend", "  if #lst == 0 then\n    return -1\n  end\n\
    \  local result = #lst\n  for i = 1, #lst do\n    if lst[i - 1] > 0 then\n   \
    \   local num = lst[i]\n      if num > 0 then\n        result = i\n      end\n\
    \    end\n  end\n  return result\nend", "\tlocal maxValue, maxCount = 0, 1\n\t\
    for k, v in pairs(lst) do\n\t\tif v > maxValue then\n\t\t\tmaxValue, maxCount\
    \ = v, 1\n\t\telseif v == maxValue then\n\t\t\tmaxCount = maxCount + 1\n\t\tend\n\
    \tend\n\tif maxCount == 0 then\n\t\treturn -1\n\telseif maxValue == 1 then\n\t\
    \treturn maxValue\n\telse\n\t\treturn maxValue - maxCount + 1\n\tend\nend", "\t\
    local max = 0 \n\tlocal cur = 0\n\tfor i = 1,#lst do\n\t\tif lst[i] > 0 then\n\
    \t\t\tcur = cur + lst[i]\n\t\t\tif cur > max then max = cur end\n\t\tend\n\tend\n\
    \tif max >= 0 then\n\t\treturn max\n\telse\n\t\treturn -1\n\tend\nend", "    local\
    \ index = 1\n    local maximum = -1\n    while index <= #lst do\n        if lst[index]\
    \ == lst[index] then\n            if maximum == -1 or lst[index] > lst[maximum]\
    \ then\n                maximum = index\n            end\n        end\n      \
    \  index += 1\n    end\n    return maximum\nend", "    local max_freq, current_freq\
    \ = lst[1], 1\n    for i, v in pairs(lst) do\n        if v ~= 0 then\n       \
    \     if current_freq > v then\n                max_freq = current_freq\n    \
    \        else\n                current_freq = v\n            end\n        end\n\
    \    end\n    if max_freq > 0 then\n        return max_freq\n    else\n      \
    \  return -1\n    end\nend", "    if not lst or #lst == 0 then return -1 end\n\
    \    local max = 0\n    local max = lst[1]\n    for i=2, #lst do\n        if lst[i]\
    \ > max then max = lst[i] end\n    end\n    return max\nend", "    local result\
    \ = nil\n    local n = 1\n    for value in lst:gmatch(\"%d+\") do\n        n =\
    \ n / value\n        if n > 1 then\n            if result ~= nil then\n      \
    \          result = result\n            else\n                result = value\n\
    \            end\n        end\n    end\n    return result\nend", "  for _,v in\
    \ ipairs(lst) do\n    if v > 0 then\n      return v\n    end\n  end\n  return\
    \ -1\nend\n</cell>\n<cell>", "    return next(lst, nil) ~= nil and next(lst, nil)\
    \ or -1\nend", "  if #lst~= 0 then\n    return lst[#lst]\n  end\n  return -1\n\
    end", "    local maxValue, maxCount = lst[1], lst[2]\n    for i=3, #lst do \n\
    \        local v, c = lst[i], lst[i-1]\n        if c >= v then return i end\n\
    \    end\n    return maxValue \nend", "    local max_freq = -1\n    local max_val\
    \ = nil\n    for i,v in pairs(lst) do\n        if v > 0 then\n            if max_freq\
    \ == -1 or v ~= max_val then\n                max_freq = v\n                max_val\
    \ = v\n            else\n                --max_freq = max_freq + 1\n         \
    \   end\n        end\n    end\n    return max_val\nend", "\tlocal value = -1\n\
    \tlocal count = 0\n\tfor i = 1, #lst do -- loop through list\n\t\tif lst[i] >\
    \ 0 then -- check if number is greater than zero\n\t\t\tif value ~= -1 then --\
    \ check if value is still being assigned a value\n\t\t\t\tcount = count + 1\n\t\
    \t\t\tif count >= value then\n\t\t\t\t\tvalue = i\n\t\t\t\tend\n\t\t\telse --\
    \ value is assigned to first number\n\t\t\t\tvalue = i\n\t\t\t\tcount = 1 -- count\
    \ number of times number is seen\n\t\t\tend\n\t\tend\n\tend\n\treturn value\n\
    end", "  local n = #lst\n  if n < 1 then\n    return -1\n  else\n    local highest_freq\
    \ = lst[1]\n    local i = 1\n    while i < n do\n      if lst[i] < highest_freq\
    \ then\n        highest_freq = lst[i]\n      else\n        if highest_freq > lst[i]\
    \ then\n          highest_freq = lst[i]\n        end\n      end\n      i = i +\
    \ 1\n    end\n    return highest_freq\n  end\nend", "    if not lst then\n   \
    \     return -1\n    end\n    \n    local max = 0 \n    local cur, freq = lst[1],\
    \ 1\n    \n    for i = 2, #lst do\n        if cur == lst[i] then\n           \
    \ freq = freq + 1\n        elseif cur > 0 then\n            if freq >= cur then\n\
    \                max = cur\n            end\n            freq = 1\n          \
    \  cur, freq = lst[i], 1\n        else\n            max = -1\n        end\n  \
    \  end\n    \n    return max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
