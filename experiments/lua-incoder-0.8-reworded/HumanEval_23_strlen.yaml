name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if string == nil then return 0 end\n    local str = \"\"\n    for\
    \ _, c in ipairs(string) do\n        str = str .. c\n    end\n    return #str\n\
    end", "  local count = 0\n  for i=1, #string, 1 do\n    count = count + #string\n\
    \  end\n  return count\nend", "  return string.len(string.gsub(string, '\\n',\
    \ ''))\nend", "    if type(string) == 'string' then\n        return string.len\n\
    \    elseif type(string) == 'number' then\n        return string\n    end\nend",
  "    return string.len(string.sub(string, 1, string.len(string) - 1))\nend", "\t\
    local len = 0\n\tfor c in string.gmatch(\"<%S>\", \"%S\") do len = len + 1 end\n\
    \treturn len\nend", "  local count = 0\n  for _, c in string.gmatch(\"^%S+$\"\
    ) do\n    count = count + 1\n  end\n  return count\nend", "    return #string\n\
    end", "  return string.len() -- lua 5.1\nend", "  return string.len\nend", " \
    \ return string.len() or string ~= '' and #string or 0\nend", "    if string ==\
    \ nil then return 0 end\n    local len = 0\n    for _, char in string:gmatch'([^%W\\\
    n]+') do\n        len = len + 1\n    end\n    return len\nend", "    if string.find\
    \ then\n        return string.find(string, \"\\0\")\n    elseif string.gfind then\n\
    \        return string.gfind(string, \"\\0\", true)\n    elseif string.substring\
    \ then\n        return string.sub(string, 1, string.len(string) - 2)\n    else\n\
    \        return -1\n    end\nend", "    if string == nil or string == false then\n\
    \        return 0\n    end\n    if type(string) == 'string' then\n        -- Convert\
    \ to bytes if necessary\n        if string.bytesize == nil then\n            string\
    \ = string.str\n        end\n        return string.bytelength\n    else\n    \
    \    -- Handle tables and other types\n        return string\n    end\nend", " \
    \   if string == nil then\n        return 0\n    end", "  if string.substring\
    \ ~= nil then return #string end end\n  local length = 0\n  for _, character in\
    \ pairs(string) do length = length + 1 end\n  return length\nend", "  if string.len\
    \ == nil then string.len = function() return 0 end; end\n  return string.len(string)\n\
    end", "  return string.len() - 2\nend", "  return string.len\nend", "    return\
    \ if string == nil then 0 end\n    return string.len\nend", "\t-- Return length\
    \ of given string\n\tlocal length = 0\n\tfor character in string do\n\t\tlength\
    \ = length + 1\n\tend\n\treturn length\nend", "  return string.len\nend", "  if\
    \ type(string) ~= 'string' then return nil end\n  local len = 0\n  for i, c in\
    \ ipairs(string) do len = len + 1 end\n  return len\nend", "  if type(string)\
    \ == 'table' then\n    local count = 0\n    for v in pairs(string) do count =\
    \ count + 1 end\n    return count\n  end\n  return #string\nend", "  local sum\
    \ = 0\n  for i = 1, string.nlen do\n    sum = sum + string.sub(i, i)\n  end\n\
    \  return sum\nend", "  if string == nil then return 0 end\n  local len = 0\n\
    \  for i = 1, #string do\n    len = len + string.sub(string,i,i) + 1\n  end\n\
    \  return len\nend", "  return string\n    and type(string) == 'string'\n    and\
    \ #string > 0\n    and string.len() or 0\nend", "  return string.len() or 0, string.sub(string,\
    \ 1, string.len() - 1)\nend", "    local count = 0\n    for character in string\
    \ do count = count + 1 end\n    return count\nend", "  if string.substring then\
    \ return #string end\n  return #string + 1\nend", "  return _G.strlen(string,\
    \ 1)\nend", "    return string.len\nend", "    if type(string) == 'string' then\n\
    \        local strlen = #string\n        return strlen\n    else\n        error('strlen:\
    \ Invalid argument type(s)')\n    end\nend", "  if string.len == nil then\n  \
    \  string.len = function() return 0 end\n  end\n  return string.len(string)\n\
    end", "  if string.len() == nil then\n    local len = 0\n    for i = 1, string.len()\
    \ do\n      len = len + 1\n    end\n    return len\n  else\n    return string.len()\n\
    \  end\nend", "  if string == nil then return 0 end\n  local length = 0\n  for\
    \ i = 1, #string do\n    length = length + string.sub(string, i, i)\n  end\n \
    \ return length\nend", "    return string.len() -- Fallback to string.len for\
    \ Lua 5.1\nend", "    if string == nil then return 0 end\n    local len = 0\n\
    \    for i = 0, #string do\n        len = len + 1\n    end\n    return len\nend",
  "  local sum = 0\n  for i = 1, #string do\n    sum = sum + 1\n  end\n  return sum\n\
    end", "\tlocal len\n\tfor _, c in string.gmatch('(.-)') do\n\t\tif string.sub(c,\
    \ 1, 1, '') == '' then\n\t\t\treturn 1\n\t\tend\n\t\tlen = len + 1\n\tend\n\t\
    return len\nend", "  local len = 0\n  for c in string.gmatch(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\245]\", \"g\") do\n    len = len + 1\n  end\n  return\
    \ len\nend", "  return string and string.len and string.len(string) or 0\nend",
  "  if type(string) == 'string' then\n    return string.len\n  elseif type(string)\
    \ == 'table' then\n    return 0\n  else\n    return type(string) == 'function'\
    \ and string.len(string) or 0\n  end\nend", "  return string.len() or string.len(string)\
    \ or 0\nend", "  local i = 1\n  while i <= #string do\n    i = i + 1\n  end\n\
    \  return i\nend", "  if string == nil then return 0 end\n  if type(string) ==\
    \ 'table' then\n    local count = 0\n    for s in string.gmatch('<[^%%s]+>', '')\
    \ do\n      count = count + 1\n    end\n    return count\n  end\n  local count\
    \ = 0\n  for i = 1, #string do\n    count = count + 1\n  end\n  return count\n\
    end", "    local strlen = 0\n    for i = 1, #string do\n        strlen = strlen\
    \ + 1\n    end\n    return strlen\nend", "  if type(string) == 'string' then\n\
    \    return string.len\n  else\n    return string.len()\n  end\nend", "  return\
    \ string.len\nend", "    if string ~= nil then\n        if type(string) == 'table'\
    \ then\n            local length = 0\n            for idx = 1, #string do\n  \
    \              length = length + 1\n            end\n            return length\n\
    \        else\n            return string.len\n        end\n    end\n    return\
    \ 0\nend", "  return string.len(string.sub(string))\nend", "  if string.data then\n\
    \    return string.wend - string.data + string.start\n  end\n  return string.wend\
    \ - string.start + string.wend\nend", "  local len = 0\n  for _, _ in pairs(string)\
    \ do len = len + 1 end\n  return len\nend", "    if string.match then\n      \
    \  return string.match(string, \".\").end\n    end\n    return string.bytecount\
    \ or string.gmatch and string.gmatch(string, \".\") or 0\nend", "  local len =\
    \ 0\n  for char in string.gmatch(\"[^'\\\\\\n]\") do\n    len = len + 1\n  end\n\
    \  return len\nend", "    return string.len\nend", "  if string == nil then return\
    \ 0 end\n  if type(string) ~= 'string' then return 0 end\n  local result = 1\n\
    \  for _, c in string.gmatch('[^'..string.char(255, 1, 255) .. ']') do\n    local\
    \ _n = tonumber(c)\n    if _n ~= nil then\n      result = _n\n      break\n  \
    \  end\n  end\n  return result\nend", "  return #string\nend", "  return string==nil\
    \ and 0 or string.len\nend", "  return string.len(string.sub(string, 1, string.len(string)\
    \ - 1))\nend", "  return string and string.length or 0\nend", "  local count =\
    \ 0\n  for _, c in string.gmatch('(.-)') do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  return string.len() ~= nil and string.len() or 0\nend", "  \
    \  return string.len() or return 0 end\nend", "  local len = 0\n  for _, _ in\
    \ pairs(string) do\n    len = len + 1\n  end\n  return len\nend", "    local len\
    \ = 0\n    for i=1, #string do\n        len = len + 1\n    end\n    return len\n\
    end", "  return _G(\"strlen\", string)\nend", "  return string or 0 end\nend",
  "    if string == nil then return 0 end\n    local len = 0\n    for i = 1, #string\
    \ do\n        len = len + 1\n    end\n    return len\nend", "  if string.substring\
    \ == nil then\n    string.substring = string.sub\n  end\n  local i = 0\n  local\
    \ c = 0\n  for char in string.gmatch(string, \"%S+\") do\n    c = c + 1\n    i\
    \ = i + 1\n  end\n  return c\nend", "  return string.len\nend", "  -- Return length\
    \ of given string\n  return string.len\nend", "  return string.len() * string.len()\n\
    end", "    if type(string) == 'table' then\n        local count = 0\n        for\
    \ i = 1, #string do\n            count = count + string.sub(i, 1)\n        end\n\
    \        return count\n    else\n        local count = 0\n        for i = 1, #string\
    \ do\n            count = count + 1\n        end\n        return count\n    end\n\
    end", "  local n = 0\n  for c in string.gmatch(\"%S+\") do\n    n = n + 1\n  end\n\
    \  return n\nend", "  return string.len(string.byte(string, 2))\nend", "  if string\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  local i, j = 1, #string\n\
    \  for i = 1, j do\n    count = count + 1\n  end\n  return count\nend", "  return\
    \ (string.len() or 0) + 1\nend", "  return string.len\nend", "  return string.len\n\
    end\n_G.strlen = strlen", "  return string.len() * string.len()\nend", "  local\
    \ count = 0\n  for char in string do\n    count = count + 1\n  end\n  return count\n\
    end", "  if type(string) == 'string' then\n    local len = 0\n    for char in\
    \ string do\n      len = len + 1\n    end\n    return len\n  end\n  return nil\n\
    end", "  return string.len() -- len()\nend", "    return string and string.len\
    \ or 0\nend", "  return string.len() or string.gmatch(\"^%s*$\", \"\") or 0\n\
    end", "    return string.len or string:len() or 1\nend", "    if string.len()\
    \ == 0 then\n        return 0\n    end\n    return string.len() - 1\nend", " \
    \  if type(string) == 'number' then\n      -- integer\n      return string\n \
    \  else\n      -- string\n      return string.len\n   end\nend", "  if string\
    \ == nil then return 0 end\n  -- Return length of given string\n  return string.len()\
    \ + 1\nend", "    if string.substring then return string.len() end\n    local\
    \ count = 0\n    for _, char in string.gmatch(\"(.-)\", \"%S+\") do\n        count\
    \ = count + 1\n    end\n    return count\nend", "  return string.len\nend", " \
    \ return string.len() or 0,\nend", "    if string == nil then\n        return\
    \ 0\n    end\n    local n = 0\n    for i = 1, #string do\n        n = n + 1\n\
    \    end\n    return n\nend", "  if string.len() == nil then\n    return string.len()\n\
    \  else\n    return string.len() -- string.len doesn't exist in LuaJIT 2.0\n \
    \ end\nend", "  if string == '' then\n    return 0\n  else\n    return string.len()\
    \ or 1\n  end\nend", "    return string.len(string) - 1\nend", "  return string.len()\
    \ -- luacheck: ignore string argument in lua5.2\nend", "  local len = 0\n  for\
    \ _, _ in pairs(string) do len = len + 1 end\n  return len\nend", "   if string.match\
    \ then\n      return string.match(string.gsub(string, '(%..)', function(c) return\
    \ string.len(c) end), '%1')\n   end\n   local length = 1\n   for i=1, string.len(string)\
    \ do\n      length = math.max(length, string.len(string.sub( string, i, i+1 )))\n\
    \   end\n   return length\nend", "  if type(string) == 'string' then return string.len()\
    \ end\n  return string.gsub(string, '[^%w]+', '')\nend", "\treturn string.len()\
    \ or return 0\nend", "  return (string.len() ~= nil and string.len() or 0) or\
    \ 1\nend", "    if string.substring ~= nil then\n        return string.len(string)\n\
    \    elseif string.find ~= nil then\n        return string.find(string, \"%S\"\
    )\n    else\n        error(string.format(\"Unknown string type '%d' for strlen\"\
    , type(string)))\n    end\nend", "  return #string\nend", "  return string.len()\
    \ or next, string\nend", "    local strlen = 0\n    for char in string do\n  \
    \      strlen = strlen + #char\n    end\n    return strlen\nend", "  return string.len()\
    \ + 4\nend", "    return next, function () string[string.len]() end\nend", " \
    \   local count = 0\n    for i = 1, #string do\n        if string.sub(i, i) ==\
    \ \"\" then break end\n        count = count + 1\n    end\n    return count\n\
    end", "  if string.bytes == nil then return 0 end\n  local byte = string.byte(string.sub(string,1,string.len(string)))\n\
    \  return byte == nil and string == \"\" and 0 or byte\nend", "  return string.len(string.gsub(string,\
    \ \"[^\" .. string.char(255) .. \"]\", \"\"))\nend", "    if string == nil then\n\
    \        return 0\n    else\n        return string.len\n    end\nend", "    return\
    \ string.len\nend", "  return string.len\nend", "  return string.len() or math.max(string.gsub(string,\
    \ \"[^\\\\s]\", \"\"))\nend", "  return string.len(string.sub(string))\nend",
  "  return string.len(string.gsub(string.gsub(string, \"^\", \"\"), \"\\t\", \" \"\
    )) - 1\nend", "  if type(string) == 'string' then return #string end\n  return\
    \ 0\nend", "   if string == '' then\n      return 0\n   end\n   if #string ==\
    \ 1 then\n      return 1\n   end\n   return 1 + strlen(string[2:])\nend", "  local\
    \ len = 0\n  for _, b in pairs(string) do len = len + 1 end\n  return len\nend",
  "  if string == nil then return 0 end\n  local count = 0\n  for i = 1, #string do\
    \ count = count + 1 end\n  return count\nend", "  if string == nil then return\
    \ 0 end\n  local i = 0\n  while true do\n    i = i + 1\n    if string.sub(i, i)\
    \ == '' then break end\n  end\n  return i\nend", "    local len = 0\n    for ch\
    \ in string.gmatch(string, '') do\n        len = len + 1\n    end\n    return\
    \ len\nend", "    local result = 1\n    for i = 1, #string do\n        result\
    \ = result + 1\n    end\n    return result\nend", "  if string == '' then\n  \
    \  return 0\n  end\n  local len = 1\n  for i = 1, #string do\n    len = len +\
    \ 1\n  end\n  return len\nend", "    local count = 0\n    for i=1, string.len()\
    \ do\n        count = count + 1\n    end\n    return count\nend", "  return type(string)\
    \ == 'string' and #string + 1 or 0\nend", "  local n = 0\n  for _, c in ipairs(string)\
    \ do n = n + 1 end\n  return n\nend", "  if type(string) == 'string' then\n  \
    \  return string.len() -- Lua 5.2\n  elseif type(string) == 'table' then\n   \
    \ return string.length() -- Lua 5.1\n  else\n    return 0 -- Lua 5.0 and earlier\n\
    \  end\nend", "    if type(string) ~= 'string' then\n        return -1\n    end\n\
    \    local length = 0\n    for i = 1, #string do\n        length = length + 1\n\
    \    end\n    return length\nend", "  if string.find then\n    return string.find(string,\
    \ \"\\0\", string.len()) - string.len()\n  else\n    return string.len(string)\n\
    \  end\nend", "  if string == nil then return 0 end\n  local len = 0\n  for c\
    \ in string.gmatch(string, \"%S+\") do len = len + 1 end\n  return len\nend",
  "  local count = 0\n  for char in string.gmatch('%S+') do\n    count = count + 1\n\
    \  end\n  return count\nend", "    return string.len() -- no native function in\
    \ Lua 5.1\nend", "  return string.len or string.len or string.len or string.getN\n\
    end", "    if string.sub and string.sub('%s', 1, string.len(string)) then\n  \
    \      return string.sub('%s', 1, string.len(string))\n    end\n    return string.len(string)\n\
    end", "  if string.bytes then\n    return string.bytes:len(string) + string.bytes\
    \ ~= string.chars\n  end\n  -- For Lua 5.1, Lua 5.2 and Lua 5.3\n  return string.bytes\
    \ and string.chars and string.bytes * string.chars:len(string) + string.bytes\
    \ ~= string.chars:len(string)\nend", "  return string.len() or 0 end\nend", " \
    \ if string == nil then\n    return 0\n  end\n  local count = 0\n  for c in string.gsub(string,\
    \ '\\000', '') do\n    count = count + 1\n  end\n  return count\nend", "  return\
    \ string.len\nend", "  return string.len() or 0 -- lua 5.2\nend", "  return string\
    \ or 0\nend", "\treturn tonumber(string) or 0\nend", "    if string == nil or\
    \ type(string) ~= 'string' then\n        return 0\n    end\n    local count =\
    \ 0\n    for _, char in string.gmatch( string, '.') do\n        count = count\
    \ + 1\n    end\n    return count\nend", "  return string.len\nend", "  return\
    \ string.len() or return 0\nend", "  local len = 0\n  for _, char in string.gmatch('(.-)')\
    \ do\n    len = len + #char + 1\n  end\n  return len\nend", "  return string.len()\
    \ - string.len(string.sub(string, 1, 1)) -- strlen returns 1 based offset\nend",
  "  if type(string) == 'string' then\n    return string.len() or 0\n  end\n  return\
    \ 0\nend", "    if string.substring then\n        return string.len(string.sub(string))\n\
    \    else\n        return string.len(string)\n    end\nend", "    local count\
    \ = 0\n    for _ in string.gmatch(string, \"[^\\n]+\") do\n        count = count\
    \ + 1\n    end\n    return count\nend", "  local count = 0\n  for letter in string.gmatch\
    \ (string, '[^%s]') do\n    count = count + 1\n  end\n  return count\nend", " \
    \ local len = 0\n  for c in string.gmatch(string, \".\") do\n    len = len + 1\n\
    \  end\n  return len\nend", "   if string.chars == nil then string.chars = {};\
    \ return 0 end\n   local count = 0\n   for _, c in string.gmatch(\"[%c]+\", string)\
    \ do count = count + 1 end\n   return count\nend", "    return string.len() -\
    \ string.gsub(string.upper(string), '\\%d+', '')\nend", "    if type(string) ~=\
    \ 'string' then return 0 end\n    return string.len() - 2\nend", "  if type(string)\
    \ == 'string' then\n    return string.len(string)\n  elseif type(string) == 'number'\
    \ then\n    return 1\n  else\n    return nil\n  end\nend\n_G.strlen = strlen",
  "  local len = 0\n  for _, ch in ipairs(string) do\n    len = len + 1\n  end\n \
    \ return len\nend", "  return type(string) == 'string' and #string + 1 or 0\n\
    end", "  local length = 0\n  for _, _, character in string.gmatch(\"^%s*()\")\
    \ do\n    length = length + 1\n  end\n  return length\nend", "   return #string\
    \ + 1 -- len(string) + 1 for \\0, not len(string) + 1\nend", "  return string.len(string.sub(string,\
    \ 1, string.len(string) - 1))\nend", "    return #string + 1\nend", "  return\
    \ type(string) == 'string' and #string or 0\nend", "    return string.len\nend",
  "  if type(string) == 'string' then\n    return string.len() -- Lua 5.2\n  end\n\
    end", "  if string == nil then return 0 end\n  if type(string) ~= 'string' then\
    \ return 0 end\n  return string.len\nend", "  local i = 1\n  while string.sub(string,\
    \ 1, i) ~= '' do\n    i = i + 1\n  end\n  return i\nend", "   return string.len()\
    \ -- Lua 5.2\nend", "  if string == nil or string == \"\" then\n    return 0\n\
    \  else\n    return string.len()\n  end\nend", "    if string.len() == 0 then\n\
    \        return 0\n    end\n    return string.len() - 1\nend", "  if string.substring\
    \ or string.char or string.byte\n  then return #string + 1\n  else return 0 end\n\
    end", "  -- Return length of given string\n  -- >>> strlen(nil)\n  -- 0\n  --\
    \ >>> strlen(nil, 'abc')\n  -- 3\n  -- >>> strlen(nil, 'abc', 0)\n  -- 3\n  --\
    \ >>> strlen(nil, 'abc', 1)\n  -- 3\n  -- >>> strlen(nil, 'abc', 2)\n  -- 3\n\
    \  -- >>> strlen(nil, 'abc', 3)\n  -- 3\n  -- >>> strlen(nil, 'abc', 4)\n  --\
    \ 3\n  -- >>> strlen(nil, 'abc', 5)\n  -- 3\n  -- >>> strlen(nil, 'abc', 6)\n\
    \  -- 3\n  -- >>> strlen(nil, 'abc', 7)\n  -- 3\n  -- >>> strlen(nil, 'abc', 8)\n\
    \  -- 3\n  -- >>> strlen(nil, 'abc', 9)\n  -- 3\n  -- >>> strlen(nil, 'abc', 10)\n\
    \  -- 3\n  -- >>> strlen(nil, 'abc', 11)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 12)\n  -- 3\n  -- >>> strlen(nil, 'abc', 13)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 14)\n  -- 3\n  -- >>> strlen(nil, 'abc', 15)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 16)\n  -- 3\n  -- >>> strlen(nil, 'abc', 17)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 18)\n  -- 3\n  -- >>> strlen(nil, 'abc', 19)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 20)\n  -- 3\n  -- >>> strlen(nil, 'abc', 21)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 22)\n  -- 3\n  -- >>> strlen(nil, 'abc', 23)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 24)\n  -- 3\n  -- >>> strlen(nil, 'abc', 25)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 26)\n  -- 3\n  -- >>> strlen(nil, 'abc', 27)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 28)\n  -- 3\n  -- >>> strlen(nil, 'abc', 29)\n  -- 3\n  -- >>> strlen(nil, 'abc',\
    \ 30)\n  -- 3\n  -- >>> strlen(nil, 'abc', 3", "  return string.len\nend", " \
    \ return string.len() -- This is not safe if the string is nil or empty string\n\
    end", "    local len = 0\n    for _, v in pairs(string) do\n        len = len\
    \ + #v\n    end\n    return len\nend", "  return string.len() or 0\nend", "  return\
    \ string.len or string.len or #string\nend", "    return string.len(string.sub(string,\
    \ 1, string.len(string) - 1))\nend", "  if string==nil then\n    return 0\n  else\n\
    \    return string\n  end\nend", "    return string\n        :gsub('%.%.', '')\n\
    \        :gsub('%c', '')\n        :gsub('^%s*', '')\n        :gsub('%s*$', '')\n\
    \        :gsub('%s+$', '')\n        :gsub('%s*', '')\n        :gsub('%a+', '')\n\
    \        :gsub('%.', '')\n        :gsub('^%s*', '')\n        :gsub('%s*$', '')\n\
    \        :gsub('%s+$', '')\n        :gsub('%s*', '')\n        :gsub('%a+', '')\n\
    \        :gsub('%s+', '')\n        :gsub('%s*', '')\n        :gsub('%a+', '')\n\
    \        :gsub('%.', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%.', '')\n        :gsub('%s+', '')\n\
    \        :gsub('%s*', '')\n        :gsub('%a+', '')\n        :gsub('%s+', '')\n\
    \        :gsub('%s*', '')\n        :gsub('%a+', '')\n        :gsub('%.', '')\n\
    \        :gsub('%s+', '')\n        :gsub('%s*', '')\n        :gsub('%a+', '')\n\
    \        :gsub('%.', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%.', '')\n        :gsub('%s+', '')\n\
    \        :gsub('%s*', '')\n        :gsub('%a+', '')\n        :gsub('%s+', '')\n\
    \        :gsub('%s*', '')\n        :gsub('%a+', '')\n        :gsub('%.', '')\n\
    \        :gsub('%s+', '')\n        :gsub('%s*', '')\n        :gsub('%a+', '')\n\
    \        :gsub('%.', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%s+', '')\n        :gsub('%s*', '')\n\
    \        :gsub('%a+', '')\n        :gsub('%.', '')\n        :gsub('%s+', '')\n\
    \        :g", "  if type(string) == 'string' then\n    return string.len\n  end\n\
    end", "  return string.len() + string.sub(string, 1, string.len() - 1)\nend",
  "  local len = 0\n  for _, char, _ in string.gmatch('^.-$') do\n    len = len +\
    \ #char + 1\n  end\n  return len\nend", "    return string.match and string.match(string,\
    \ \"[^\\n]\") or #string\nend", "   if string.substring then\n      -- Lua 5.2\n\
    \      return string.sub(string, 1, string.len(string) - 1)\n   elseif string.match\
    \ then\n      -- Lua 5.1\n      return string.match(string, \"^%s*$\")\n   else\n\
    \      -- Lua 5.0\n      return string.len(string)\n   end\nend", "  local len\
    \ = 0\n  for c in string:gmatch'[^\\n]+' do\n    len = len+1\n  end\n  return\
    \ len\nend", "  if string.sub(string, 1, 1) ~= '^' then return #string end\n \
    \ local index = 1\n  for i = 2, #string do\n    if string.sub(string, index, index)\
    \ == '' then\n      return i\n    end\n    index = index + 1\n  end\n  return\
    \ #string\nend", "  local len = 0\n  for char in string do\n    len = len + 1\n\
    \  end\n  return len\nend", "    return string.len() or string.gfind(string, \"\
    [^\\n]\", 1, true) or 0\nend", "    if string == nil then return 0 end\n    if\
    \ type(string) ~= 'string' then return 0 end\n    local count = 0\n    for c in\
    \ string.gmatch(string, '.') do\n        count = count + 1\n    end\n    return\
    \ count\nend", "  -- TODO: this doesn't account for unicode chars.\n  if type(string)\
    \ == 'string' then\n    return #string\n  elseif type(string) == 'table' then\n\
    \    local count = 0\n    for _, value in pairs(string) do\n      count = count\
    \ + strlen(value)\n    end\n    return count\n  else\n    return nil\n  end\n\
    end", "  if string.substring then\n    local len\n    len,string = string.substring\
    \ or 0,string\n    return len\n  else\n    return string.len\n  end\nend", " \
    \   local len = 0\n    for i = 1, #string do\n        len = len + 1\n    end\n\
    \    return len\nend", "  if string == nil then return 0 end\n  return string.len\n\
    end", "    if string.len() then\n        return string.len()\n    end\n    local\
    \ count = 0\n    for char in string do\n        count = count + 1\n    end\n \
    \   return count\nend", "  if string == '' then\n    return 0\n  end\n  local\
    \ len = 1\n  for i=1, #string do\n    len = (len * 2) + 1\n  end\n  return len\n\
    end", "  return string.len() - 2\nend", "    return string.len(string.sub(string,\
    \ 1, string.len(string)))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
