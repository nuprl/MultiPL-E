name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n <= 0 then return nil end\n  local primes = prime_factors(n)\n\
    \  return primes[#primes] or n\nend", "    local divisor = 1\n    local div =\
    \ 1\n    local last_div = 1\n    while divisor < n do\n        div = div + last_div\n\
    \        last_div = math.floor(div / divisor)\n        divisor = divisor * last_div\n\
    \    end\n    return div\nend", "\tlocal div,div1,div2 = 0,0,0\n\tfor i=1,n do\n\
    \t\tdiv = i\n\t\tdiv1 = div\n\t\twhile div > 1 do\n\t\t\tdiv = div - 1\n\t\t\t\
    div2 = div\n\t\t\tif div % 2 == 0 then break end\n\t\tend\n\tend\n\treturn div2\n\
    end", "  -- Return the largest divisor of n that is smaller than n\n  -- >>> largest_divisor(15)\n\
    \  -- 7\n  -- >>> largest_divisor(20)\n  -- 10\n  -- >>> largest_divisor(1000)\n\
    \  -- 1", "  -- Use Euclid's algorithm to find GCD of x and n, where x is a prime\
    \ number\n  -- Return its inverse\n  -- http://www.math.rwth-aachen.de/~obecker/C++/euclid/\n\
    \  local gcd = 1\n  for i = 2,n do\n    gcd = gcd*i -- gcd *= gcd\n  end\n  gcd\
    \ = gcd % n -- gcd%n -- gcd%n\n  if gcd == 1 then -- If gcd is a number not evenly\
    \ divisble by n then it's\n    return n -- a prime number\n  else -- if gcd is\
    \ a number evenly divisble by n then its inverse is the divisor\n    return n/gcd\
    \ -- inverse of n/gcd\n  end\nend\n</cell>\n<cell>", "  local i = n\n  local i2\
    \ = i\n  local k = n\n  local k2 = 1\n  while i2 < n do\n    i = i * k\n    i2\
    \ = i2 * i2\n    k = k * k\n    k2 = k2 * k2\n  end\n  return i - k\nend", " \
    \   assert(type(n) == \"number\")\n    local max_divisor = 1\n    local max_dividend\
    \ = n\n    while true do\n        if max_dividend % max_divisor == 0 then\n  \
    \          return max_divisor\n        end\n        max_divisor = max_divisor\
    \ + 1\n        max_dividend = max_dividend / max_divisor\n    end\nend", "   \
    \ local divisor = 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend", "  -- The algorithm is based on the\
    \ observation that n can be written as the product of a prime p\n  -- with all\
    \ the primes <= p less than p.\n  --\n  -- The final prime p >= n is computed\
    \ as a product of all the primes <= n / p\n  -- up to n/p >= 2 >= 1.  So p = floor(n/p).\n\
    \  --\n  -- Primes are found using a sieve.  It is important to not take any composites\
    \ out of the\n  -- sieve, as they will mess up the sieve's termination condition.\
    \  Sieves that are smaller\n  -- than 2**n are best for use with integers, and\
    \ are also very easy to construct.\n  --\n  -- Python code:\n  --\n  -- >>> n\
    \ = 20\n  -- >>> p = 6\n  -- >>> import primesieve\n  -- >>> sieve = primesieve.Sieve()\n\
    \  -- >>> sieve.update([2]) # Update with only 2 primes.\n  -- >>> sieve.update([3])\
    \ # Update with only 3 primes.\n  -- >>> sieve.update([5,7]) \n  -- >>> sieve.update(range(3,\
    \ 11)) # Update with all the primes from 3 to 10.\n  -- >>> n = 20\n  -- >>> sieve.largest(n)\
    \ \n  -- 30\n  -- >>> p = 7\n  -- >>> sieve.largest(p)\n  -- 40\n  -- >>> p =11\n\
    \  -- >>> sieve.largest(p)\n  -- 11\n  -- >>> n = 4\n  -- >>> sieve.largest(n)\n\
    \  -- 10", "  if n < 0 then return nil end\n  if n <= 2 then return n end\n  local\
    \ t = {}\n  local divisor = 2\n  while n >= divisor do\n    t[#t + 1] = divisor\n\
    \    divisor = divisor + 1\n  end\n  if #t == 0 then return n end\n  local v =\
    \ n\n  for i = #t - 1, 1, -1 do\n    v = v / t[i]\n  end\n  return v\nend", "\t\
    local max_div = nil\n\tlocal max_n = nil\n\tfor i = 1, n do\n\t\tif n % i == 0\
    \ then\n\t\t\tif max_div == nil or max_div > i then\n\t\t\t\tmax_div = i\n\t\t\
    \t\tmax_n = n\n\t\t\telse\n\t\t\t\tmax_n = max_n / i\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn max_n\nend", "  local max_val = 1\n  local max_factor = 1\n  for i =\
    \ 1, n do\n    local d = n / i\n    if d > max_factor then \n      max_val = i\n\
    \      max_factor = d\n    end\n  end\n  return max_val\nend", "  if n % 2 ==\
    \ 0 then\n    return n\n  end", "    local max_div = nil\n    local max_div_divisor\
    \ = nil\n    for i = 2, n do\n        if n % i == 0 then\n            if max_div\
    \ == nil then\n                max_div = i\n            else\n               \
    \ if max_div_divisor == nil then\n                    max_div_divisor = i\n  \
    \              else\n                    if max_div_divisor > i then\n       \
    \                 max_div_divisor = i\n                    end\n             \
    \   end\n            end\n        end\n    end\n    return max_div\nend", "\t\
    local max = n\n\tlocal factor\n\twhile max > 1 do\n\t\tfactor = n/max\n\t\tmax\
    \ = math.floor(max)\n\t\tif factor == 1 then\n\t\t\treturn factor\n\t\tend\n\t\
    end\n\treturn factor\nend", "  if n <= 1 then\n    return n\n  end", "  if n==1\
    \ then\n    return 1\n  else\n    return n/largest_divisor(n-1)\n  end\nend",
  "  local max = 0\n  local i = 2\n  while i <= n do\n    if n % i == 0 then\n   \
    \   if max < i then\n        max = i\n      end\n    end\n    i = i + 2\n  end\n\
    \  return max\nend", "  local max_div = 1\n  local max_divisor = n / 2\n  while\
    \ max_divisor <= n do\n    max_div = max_div * max_divisor\n    max_divisor =\
    \ max_divisor + 1\n  end\n  return max_div\nend", "\t-- http://en.wikipedia.org/wiki/Divisor_function\n\
    \t-- https://stackoverflow.com/questions/1209273/algorithm-to-find-the-greatest-number-divisible-by-a-number",
  "    if n < 2 then return 1 end\n    local divisor = n - 1\n    while divisor ~=\
    \ 0 do\n        local q = n / divisor\n        if n % divisor == 0 then return\
    \ divisor end\n        n = q\n        divisor = divisor - 1\n    end\n    return\
    \ n\nend", "\tassert(n > 0, \"n cannot be negative\")\n\t\n\tlocal i = 1\n\tlocal\
    \ divisor = 1\n\tlocal max_divisor = i\n\t\n\twhile i <= n do\n\t\tdivisor = divisor\
    \ * i\n\t\tif divisor > n then\n\t\t\tbreak\n\t\telseif divisor == n then\n\t\t\
    \tmax_divisor = i\n\t\tend\n\t\ti = i + 1\n\tend\n\t\n\treturn max_divisor\nend",
  "  if n < 2 then return end\n  if n % 2 == 0 then return n end\n  local result =\
    \ n\n  local m = math.floor(math.sqrt(n)) -- Use integer division\n  while m do\n\
    \    if n % m == 0 then return m end\n    -- Use a trick: let m = m + 1 and see\
    \ if n % m is 0. Since m is even,\n    -- if n % m is 0, then m is odd and we\
    \ have found the largest divisor m.\n    m = m + 1\n    if n % m == 0 then return\
    \ m end\n  end\n  return n\nend", "  if n <= 1 then return n end\n  if n <= 10\
    \ then return 1 end\n  if n % 2 == 0 then return n / 2 end\n  local largest =\
    \ n\n  local divisor = 2\n  while divisor < n do\n    largest = divisor\n    divisor\
    \ *= 2\n  end\n  return largest\nend", "  if n <= 1 then\n    return 1\n  end\n\
    \  local max_divisor = 1\n  local max_divisor_two = 1\n  local max_divisor_three\
    \ = 1\n  local max_divisor_four = 1\n  local max_divisor_five = 1\n  local max_divisor_six\
    \ = 1\n  local max_divisor_seven = 1\n  local max_divisor_eight = 1\n  local max_divisor_nine\
    \ = 1\n  local max_divisor_ten = 1\n  local max_divisor_eleven = 1\n  local max_divisor_twelve\
    \ = 1", '    local prime_table = prime_list()', "  if n % 2 == 0 then return 2\
    \ end\n  if n % 3 == 0 then return 3 end\n  if n % 5 == 0 then return 5 end\n\
    \  if n % 7 == 0 then return 7 end\n  if n % 9 == 0 then return 9 end\n  if n\
    \ % 11 == 0 then return 11 end\n  if n % 13 == 0 then return 13 end\n  if n %\
    \ 17 == 0 then return 17 end\n  return n\nend", "  -- Get the prime factorization\
    \ of n\n  local factorization = get_factorization(n)\n  -- Get the max number\
    \ of divisor of a factor\n  local max_divisor = 0\n  -- For each prime factor\n\
    \  for _, prime in pairs(factorization) do\n    -- If the number is divisible\
    \ by that prime factor\n    if n % (prime * prime) == 0 then\n      -- Update\
    \ the number of divisors found\n      max_divisor = max_divisor + 1\n    end\n\
    \  end\n  -- Return the max number\n  return max_divisor\nend\n</code>\n<|/ a\
    \ tags=lua,algorithm |>\n<| c |>\nI dont understand what is happening here `local\
    \ primes = {2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997}", "    local m = math.floor(n/2)\n    if m == 0 then\n \
    \       return n\n    end\n    for i = m, n do\n        if n % i == 0 then\n \
    \           return i\n        end\n    end\n    return n\nend", "  if n <= 1 then\n\
    \    return 1\n  end\n  local largest_divisor = 1\n  local prime_found = false\n\
    \  for i=2,n do\n    -- if there is a number which divides n evenly and is smaller\
    \ than n\n    -- we will break out of loop immediately\n    if n / i > 0 and not\
    \ prime_found then\n      prime_found = true\n      largest_divisor = i\n    end\n\
    \  end\n  return largest_divisor\nend", "  if n < 2 then return 1 end\n  local\
    \ i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      -- print(i)\n\
    \      return i\n    end\n    i = i + 1\n  end\n  return n\nend", "  -- The largest\
    \ divisor is equal to n / 2.\n  if n ~= 0 then\n    local q = n / 2\n    -- Keep\
    \ reducing q until q is less than n.\n    while q < n do\n      q = q * 2\n  \
    \  end\n    -- q is the greatest divisor smaller than n.\n    return q\n  end\n\
    \  return nil\nend", "    local candidates, i, divisor, max\n    candidates =\
    \ {}\n    max = -1\n    for i = 2, n do\n        divisor = i\n        while divisor\
    \ > 1 do\n            if n % divisor == 0 then\n                break\n      \
    \      end\n            divisor = divisor - 1\n        end\n        if divisor\
    \ > max then\n            max = divisor\n        end\n        if n <= max then\n\
    \            candidates[i] = n\n        end\n    end\n    return max\nend", " \
    \   -- Base cases\n    if n < 1 then return 0 end\n    if n == 0 then return 0\
    \ end\n    if n == 1 then return 1 end\n    -- Find largest divisor < n\n    local\
    \ i = 1\n    local m = 1\n    while i <= n do\n        if n % i == 0 then\n  \
    \          m = i\n        end\n        i = i + 1\n    end\n    return m\nend",
  "    if n < 2 then\n        return nil\n    end", "  if n == 1 then return 1 end\n\
    \  if n == 0 then return 0 end\n  local max = 0\n  local i = 1\n  while i <= n\
    \ do\n    if n % i == 0 then\n      max = i\n    end\n    i = i + 2\n  end\n \
    \ return max\nend", "    local largest, div = 0, 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            if i ~= div and div % i == 0 then\n     \
    \           largest = div\n            end\n            div = i\n        end\n\
    \    end\n    return largest\nend", "  local largest = nil\n  for i = 2, math.sqrt(n),\
    \ 1 do\n    if n % i == 0 then\n      if largest == nil then\n        largest\
    \ = i\n      else\n        if largest ~= i then\n          largest = nil\n   \
    \     end\n      end\n    end\n  end\n  return largest\nend", "\tlocal factors\
    \ = { }", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "   -- Initialize\
    \ base case\n   if n < 2 then return 1 end", "    local primes = primeFactors(n)\n\
    \    local max = 0\n    for i,v in ipairs(primes) do\n        if n % v == 0 then\n\
    \            max = n / v\n            break\n        end\n    end\n    return\
    \ max\nend", "\t-- Note: This assumes n is odd\n\tlocal factors = {}\n\tfactors[2]\
    \ = 2\n\tfactors[3] = 1\n\tfactors[4] = 4\n\tfactors[5] = 2\n\tfactors[6] = 1\n\
    \tfactors[7] = 2\n\tfactors[8] = 2\n\tfactors[9] = 6\n\tfactors[10] = 1\n\tfactors[11]\
    \ = 2\n\tfactors[12] = 2\n\tfactors[13] = 2\n\tfactors[14] = 2\n\tfactors[15]\
    \ = 1", "  if n < 1 then\n    return nil\n  end", "    local max_divisor = 1\n\
    \    local divisor_found = {}\n    local i = 1", "  if n == 0 then\n    return\
    \ n\n  else\n    local ld = 1\n    local last_div = n\n    while last_div > 1\
    \ do\n      last_div = math.gcd(last_div, last_div)\n      ld = ld + 1\n    end\n\
    \    return last_div\n  end\nend", '    local largest_divisor = 1', "    local\
    \ divisor = 1\n    while divisor <= n do\n        if n % divisor == 0 then\n \
    \           divisor = divisor * 2\n        end\n    end\n    return divisor\n\
    end", '    local factors = {}', "    local max_factor = 0\n    for factor = 1..n\
    \ do\n        if math.fmod(n, factor) == 0 then\n            if factor > max_factor\
    \ then\n                max_factor = factor\n            end\n        end\n  \
    \  end\n    return max_factor\nend", "  if n == 0 then return 1 end\n  if n ==\
    \ 2 then return 1 end\n  if n == 1 then return n end\n  local last_divisor = math.floor(math.sqrt(n))\n\
    \  local divisor_count = last_divisor\n  while divisor_count > 1 do\n    if n\
    \ / last_divisor == last_divisor then\n      divisor_count = divisor_count - 1\n\
    \    else\n      last_divisor = last_divisor - 1\n    end\n  end\n  return last_divisor\n\
    end", "    local divisor = 1\n    local last_div = 1", "    local largest = 0\n\
    \    local divisor", "  if n < 0 then\n    error('n must be non-negative')\n \
    \ end", "    -- Create a list with all the prime numbers from 1 to n\n    local\
    \ primes = {}\n    for i = 1, n do\n        -- Check for factors up to n\n   \
    \     for j = 2, i-1 do\n            if i % j == 0 then\n                break\n\
    \            else\n                primes[#primes + 1] = j\n            end\n\
    \        end\n    end\n    -- Find the largest one\n    local max_index = #primes\n\
    \    for i = max_index-1, 2, -1 do\n        if primes[i] <= n then\n         \
    \   max_index = i\n        end\n    end\n    -- Return the largest one\n    return\
    \ primes[max_index]\nend", "  -- Get the least common multiple of the two numbers,\
    \ to find the smallest\n  -- number that divides n evenly\n  local gcd = math.lcm(n,\
    \ n-1)\n  -- Divide n by gcd, to get the largest number that divides n evenly\n\
    \  n = n / gcd\n  -- Now loop from n downwards to get the largest number that\
    \ divides n\n  -- evenly\n  repeat\n    n = n/gcd\n  until n==1\n  return n\n\
    end", "  if n % 2 == 0 then return n end\n  local max_factor = 1\n  local factor\
    \ = 1\n  repeat\n    factor = factor * 2\n  until factor * factor <= n\n  repeat\n\
    \    if n % factor == 0 then\n      if max_factor < factor then\n        max_factor\
    \ = factor\n      end\n    end\n  until max_factor < n\n  return max_factor\n\
    end", "    local max_div = nil\n    local max_div_idx = nil\n    for i=1,n do\n\
    \        if n % i == 0 then\n            local div = i / n\n            if max_div\
    \ == nil or max_div > div then\n                max_div = div\n              \
    \  max_div_idx = i\n            end\n        end\n    end\n    return max_div\n\
    end", "  if n < 0 then return nil end\n  if n < 2 then return n end\n  if n ==\
    \ 2 then return 2 end\n  local k = 1\n  local m = n\n  while m % 2 ~= 0 do\n \
    \   m = m / 2\n    k = k + 1\n  end\n  local divisors = {}\n  divisors[k] = 2\n\
    \  local c = 2\n  while c <= k do\n    local d = 0\n    while c <= k do\n    \
    \  if n % divisors[c] == 0 then\n        d = d + 1\n      end\n      c = c + 1\n\
    \    end\n    if d > divisors[k] then\n      divisors[k] = d\n    end\n    c =\
    \ c + 2\n  end\n  return divisors[k]\nend", "  if n < 1 then return 1 end\n  if\
    \ n < 4 then return 1 end\n  if n % 2 == 0 then return n end\n  for i = 4, n,\
    \ 2 do\n    if n % i == 0 then return i end\n  end\nend", "    return math.max(\n\
    \        n, \n        math.ceil(\n            math.sqrt(\n                n\n\
    \            )\n        )\n    )\nend", "    local max_divisor = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            max_divisor = i\n       \
    \ end\n    end", "    local largest = 0\n    for i = 1, n do\n        if n % i\
    \ == 0 then\n            largest = i\n        end\n    end\n    return largest\n\
    end", "    local max_divisor = n\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend",
  "    local maxDivisor = 1\n    for _ = 1, n do\n        if n % maxDivisor == 0 then\n\
    \            maxDivisor = maxDivisor + 1\n        end\n    end\n    return maxDivisor\n\
    end", "  return math.floor((math.sqrt(math.pow(n, 2) + 1) - 1)/2) + 1\nend", " \
    \ local max_divisor = 1\n  for _, v in pairs(divisors) do\n    local m = v\n \
    \   if m > n then break end\n    if n % m == 0 then\n      if m > max_divisor\
    \ then\n        max_divisor = m\n      end\n    end\n  end\n  return max_divisor\n\
    end", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if i % 2 == 0 then\n                max = i \n            else\n  \
    \              max = i\n            end\n        end\n    end\n    return max\n\
    end", "    local k = 1\n    local div = 1\n    while n % k == 0 and div <= n do\n\
    \        k = k + 1\n        div = div + 1\n    end\n    return k\nend", "  if\
    \ n < 2 then\n    return 1\n  end", "   -- If n is evenly divisible by 2, then\
    \ there is no largest divisor\n   if n % 2 == 0 then\n      return nil\n   end",
  "  -- We want to find `a` such that\n  -- (`a` == n) and `a` <= n\n  local a = math.floor(n/2)\
    \ \n  -- Now we know that `a` is a divisor of `n` \n  -- so we can simply find\
    \ the first divisor\n  -- that isn't greater than `a`\n  while a > 1 and n%a ==\
    \ 0 do\n    a = a-1\n  end\n  return a\nend", "    assert(n > 0)\n    local result\
    \ = 0\n    for i=1, n do\n        if n%i == 0 then\n            n = n/i\n    \
    \        result = i\n        end\n    end\n    return result\nend", "  local max_factor\
    \ = 1\n  local max_factor_n = 1\n  for i = 2, n do\n    local max_factor_n = (max_factor_n\
    \ * i) % n\n    local factor = (max_factor_n * i) / n\n    if max_factor < factor\
    \ then\n      max_factor = factor\n    end\n  end\n  return max_factor\nend",
  "   assert(n >= 2, 'n must be positive')\n   if n == 0 then return 1 end\n   if\
    \ n == 2 then return 2 end\n   if n % 2 == 0 then return largest_divisor(n/2)\
    \ end\n   if n % 3 == 0 then return largest_divisor(n/3) end\n   if n % 5 == 0\
    \ then return largest_divisor(n/5) end\n   return n\nend", "  local i = 2\n  while\
    \ i <= n do\n    if n % i == 0 then\n      return i\n    end\n    i = i * 2\n\
    \  end\n  return n\nend", "\tlocal divisor = nil\n\tfor i = 1, n do\n\t\tif n\
    \ % i == 0 then\n\t\t\tdivisor = i\n\t\t\tbreak\n\t\tend\n\tend", "  local largest\
    \ = 1\n  local i = 1\n  while i <= n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n    i = i + 1\n  end\n  return largest\nend", "  local divisor\
    \ = 1\n  local largest = 1", "  local function is_factor(n)\n    return n ~= 0\
    \ and (n % 2) == 0 and (n:gsub(\"%d%d*\", function(m) return m > n and m or nil\
    \ end) or n % 2 == 0)\n  end\n  local max_factor = 1\n  while 1 do\n    max_factor\
    \ = (max_factor * 2) % n\n    if is_factor(max_factor) then\n      return max_factor\n\
    \    end\n  end\nend", "  local largest = 1\n  for i=2, n do \n    if n ~= i then\n\
    \      if n ~= n-1 and i ~= n-1 then\n        if n ~= largest-1 and n ~= largest-1\
    \ and i ~= largest-1 then\n          largest = i\n        end\n      end\n   \
    \ end\n  end\n  return largest\nend", "    local largest, div = 1\n    for i=2,n\
    \ do\n        if n % i == 0 then\n            largest = i\n            div = n\n\
    \        end\n    end\n    return div\nend", "   if n % 2 == 0 then\n      return\
    \ n\n   end\n   local largest = 1\n   for i = 2, n do\n      largest = math.max(largest,\
    \ i / largest)\n   end\n   return largest\nend", "  return n and math.max(\n \
    \   largest_divisor(math.floor(n / 2)),\n    largest_divisor(math.floor(math.sqrt(n)))\n\
    \  )\nend", "   local max_divisor = 1\n   for i = 2, n do\n      if n % i == 0\
    \ then\n         if max_divisor < i then\n            max_divisor = i\n      \
    \   end\n      end\n   end\n   return max_divisor\nend\n</cell>\n<cell>", "  \
    \  local largest = 1\n    local current = 1", "  -- If n is even, return n/2.\n\
    \  if n%2 == 0 then\n    return n/2\n  end", "  -- We have to find a divisor of\
    \ n that divides n. Since the largest divisor of n is n/2 then n/2 must be even.\n\
    \  -- Thus, we loop through all the possible divisors of n and find the largest\
    \ divisor that is divisible by n. \n  for i = 1, n do\n    if n % i == 0 then\n\
    \      return i\n    end\n  end\n  return nil\nend", "    local result = 1\n \
    \   local dividend = 0\n    local divisor = 2\n    while divisor * divisor <=\
    \ n do\n        if n % divisor = 0 then\n            if dividend >= n then\n \
    \               result = divisor\n                dividend = n\n            end\n\
    \            divisor = divisor + 1\n        end\n    end\n    return result +\
    \ (dividend > n and 1 or 0)\nend", "  local divisor = 1\n  local remainder = n",
  "    -- Create a table of factors\n    local factors = {}\n    local i = 1\n   \
    \ while i <= n do\n        if n % i == 0 then\n            factors[i] = i\n  \
    \          n = n / i\n            i = i + 1\n        end\n        i = i + 1\n\
    \    end", "  assert(n >= 0)\n  if n < 2 then\n    return n\n  end\n  local max_div\
    \ = 1\n  local max_div_n = 1\n  for div = 2, n do\n    if n % div == 0 then\n\
    \      if max_div * max_div_n < div then\n        max_div = div\n        max_div_n\
    \ = n\n      end\n    end\n  end\n  return max_div * max_div_n\nend", "    local\
    \ candidate = 2\n    local count = 1\n    local result = 1\n    while candidate\
    \ <= n do\n        if math.fmod(n, candidate) == 0 then\n            count = count\
    \ + 1\n            if count > result then result = count end\n        end\n  \
    \      candidate = 2 * candidate + 1\n    end\n    return result\nend\n</cell>\n\
    <text>\nThe first cell below will load the file \"data/data_for_homework1.csv\"\
    \ into a table called \"data\".  Notice that there are several columns of different\
    \ types (numeric, character, etc.). In particular, notice that not all rows have\
    \ the same number of columns. This will help us figure out how we need to process\
    \ the data.", "  if n%2==1 then return n end\n  local m\n  for m=3,n,2 do\n  \
    \  if n%m==0 then\n      return m\n    end\n  end\nend", "    if n <= 1 then\n\
    \        return 1\n    end\n    local m = n / 2\n    local i = 2\n    local max_n\
    \ = 1\n    while i <= m do\n        if n % i == 0 then\n            max_n = i\n\
    \            n = n / i\n        else\n            i = i + 1\n        end\n   \
    \ end\n    if n ~= 1 then\n        max_n = n \n    end\n    return max_n\nend",
  "    local n2 = math.floor(n/2)\n    local max_val = n/n2\n    for i = n2, -1, -1\
    \ do\n        if n % i == 0 then\n            local p = i\n            while n\
    \ > p do\n                p = p * 2\n            end\n            if n == p then\n\
    \                max_val = p\n                break\n            end\n       \
    \ end\n    end\n    return max_val\nend", "    if n % 2 == 0 then return n end\n\
    \    for i = 3, n - 1, 2 do\n        if n % i == 0 then return i end\n    end\n\
    \    return n\nend", "    if n == 0 then\n        return 0\n    end\n    local\
    \ factors = {}\n    local m = math.floor(n/2)\n    local factor = 1\n    for i\
    \ = 1, m do\n        factors[i] = factor\n        factor = factor * 2\n    end\n\
    \    for i = m, n-1 do\n        factors[#factors+1] = factor\n        factor =\
    \ factor * 2\n    end\n    if factor > n then\n        factor = n \n    end\n\
    \    local max = 0\n    for i = 1, #factors do\n        if factors[i] > max then\n\
    \            max = factors[i]\n        end\n    end\n    return max\nend", " \
    \ local divisor\n  for i = 2, n do\n    if n % i ~= 0 then\n      if divisor:isnumber()\
    \ and divisor > i then\n        divisor = i\n      end\n    end\n  end", "  if\
    \ n < 1 then\n    error(\"Non positive number\")\n  end\n  if n <= 1 then\n  \
    \  return 1\n  end\n  local i = 2\n  local max_value = nil\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      max_value = i\n    end\n    i = i + 1\n  end\n\
    \  return max_value\nend", "  assert(n > 0, \"n should be positive integer\")\n\
    \  if n == 1 then return 1 end\n  local max = 1\n  for i = 2, n do\n    max =\
    \ math.max(max, n % i)\n  end\n  return max\nend", "    if n%2==1 then return\
    \ n\n    else return largest_divisor(n/2)\n    end\nend", "    if n < 2 then\n\
    \        return nil\n    end\n    local max_div = math.floor(n / 2)\n    for i\
    \ = 2, max_div do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\n    return nil\nend", "  -- http://mathworld.wolfram.com/LargestDivisor.html\n\
    \  -- http://stackoverflow.com/a/16978759/17677\n  -- http://stackoverflow.com/a/5647830/17677\n\
    \  -- http://stackoverflow.com/a/4498417/17677\n  -- http://stackoverflow.com/a/3537874/17677\n\
    \  -- http://stackoverflow.com/a/10338211/17677\n  -- http://stackoverflow.com/a/1688402/17677\n\
    \  -- http://stackoverflow.com/a/3530398/17677\n  -- http://stackoverflow.com/a/985322/17677\n\
    \  -- http://stackoverflow.com/a/1776191/17677\n  -- http://stackoverflow.com/a/1417798/17677\n\
    \  -- http://stackoverflow.com/a/1554496/17677\n  -- http://stackoverflow.com/a/2066572/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1137322/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1218276/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://stackoverflow.com/a/1769867/17677\n  -- http://stackoverflow.com/a/1769867/17677\n\
    \  -- http://", "  return math.max(\n      n,\n      math.ceil(math.sqrt(n)) -\
    \ math.floor(math.sqrt(n))\n    )\nend", "    -- If n is divisible by any number,\
    \ its largest divisor is itself\n    if not n then return n end\n    -- Divide\
    \ by 2, then 3, then 5, then 7, and so on\n    return largest_divisor(n/2) + n\n\
    end", "   if n <= 1 then return 1 end\n   if n == 2 then\n      return 1\n   else\n\
    \      return n / largest_divisor(n - 1)\n   end\nend", "  -- >>> largest_divisor(15)\n\
    \  -- 5\n  if n < 1 then\n    return 0\n  end", "  local ns = { }\n  local m =\
    \ 1\n  while m <= n do\n    if n / m == n / m + 1 then\n      table.insert(ns,\
    \ m)\n    end\n    table.insert(ns, n / m + 2)\n  end\n  table.sort(ns)\n  local\
    \ largest_divisor = 1\n  for _, v in ipairs(ns) do\n    if v > largest_divisor\
    \ then\n      largest_divisor = v\n    end\n  end\n  return largest_divisor\n\
    end", '    local result = nil', "  assert(n > 1, 'n can not be larger than 2')\n\
    \  local max_divisor = n\n  local max_divisor_idx = 0", "    local i = 1\n   \
    \ local max = 1\n    while i <= n do\n        local m = n / i\n        if m %\
    \ 2 == 1 then\n            if n > max then\n                max = n\n        \
    \    end\n        end\n        i = i + 2\n    end\n    return max\nend", "  local\
    \ i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      if i ~= math.sqrt(n)\
    \ then\n        -- print(\"Yes i ~= math.sqrt(n)\", i, math.sqrt(n))\n       \
    \ return i\n      else\n        -- print(\"Yes i = 1\", i)\n        return 1\n\
    \      end\n    end\n    i = i + 1\n  end\n  return 1\nend", "    assert(n > 0\
    \ and n % 2 == 0, \"n must be greater than 0 and divisible by 2\")\n    local\
    \ max_divisor = 1\n    for i = 2, n do \n        if n % i == 0 then \n       \
    \     if i > max_divisor then \n                max_divisor = i \n           \
    \ end \n        end \n    end \n    return max_divisor \nend", "    -- Special\
    \ Case\n    if n==0 then return 0\n    elseif n%2==0 then return n\n    -- Base\
    \ Case\n    else return largest_divisor(math.floor(n/2))\n    end\nend", "  --\
    \ Return largest number that divides n evenly, smaller than n\n  return math.floor(n/2\
    \ - ((n-1)/2)*math.floor((n-1)/2))\nend", "   if n < 1 then return nil end\n \
    \  if n == 1 then return 1 end\n   local m = math.ceil(math.sqrt(n))\n   if n\
    \ % 2 == 0 then\n      local s = n\n      while s > m do\n         s = s / 2\n\
    \         if s == m then\n            return m\n         end\n      end\n    \
    \  return m\n   else\n      return 1\n   end\nend\n</cell>\n<text>\nExercise 2.7\n\
    Write a function that takes two positive integers n1 and n2, and returns True\
    \ if n2 divides n1 evenly into both numbers.", "  -- return n if n is a power\
    \ of 2\n  if n == 1 then return 1 end\n  -- base case\n  if n == 0 then return\
    \ 1 end\n  -- base case\n  if n == 1 then return 1 end\n  -- is the number even\
    \ to start with?\n  if n % 2 == 0 then return largest_divisor(n / 2) end\n  --\
    \ find the highest divisor\n  local max_divisor = 1\n  local num_divisors\n  --\
    \ find the largest divisor of n that divides evenly by num_divisors\n  for num_divisors\
    \ = 3, max_divisor < n / num_divisors, num_divisors do\n    -- calculate the next\
    \ divisor of n\n    local next_divisor = n / num_divisors\n    -- find the highest\
    \ divisor smaller than next_divisor\n    for i = max_divisor + 1, next_divisor,\
    \ 1 do\n      if next_divisor % i == 0 then\n        -- is the next_divisor greater\
    \ than n/num_divisors?\n        if next_divisor / i > n/num_divisors then\n  \
    \        -- is the next_divisor equal to the largest divisor of the given number?\n\
    \          local next_divisor_ind = i + 1\n          -- while there are still\
    \ numbers smaller than next_divisor, keep looking\n          while next_divisor_ind\
    \ < n do\n            -- find the next larger divisor\n            local next_divisor\
    \ = next_divisor / i\n            -- stop if the next divisor divides n evenly\n\
    \            if next_divisor % 2 == 0 then\n              num_divisors = next_divisor_ind\n\
    \              break\n            end\n            -- stop if the next_divisor\
    \ is greater than n/num_divisors\n            if next_divisor > n/num_divisors\
    \ then\n              num_divisors = next_divisor_ind\n              break\n \
    \           end\n            -- stop if the next_divisor is equal to the largest\
    \ divisor of the given number\n            if next_divisor == n/num_divisors then\n\
    \              num_divisors = next_divisor_ind\n              break\n        \
    \    end\n            -- stop if the next_divisor is less than n/num_divisors\n\
    \            if next_divisor < n/num_divisors then\n              num_divisors\
    \ = next_divisor_ind\n              break\n            end\n            -- continue\
    \ the search if the next divisor does not divide n evenly\n            -- because\
    \ the next divisor is larger than n/num_divisors\n          end\n        end\n\
    \      end\n    end\n    -- stop if the largest divisor is the given number\n\
    \    if num_divisors == n then\n      break\n    end\n    -- stop if there are\
    \ still numbers smaller than the given number, i.e. there are not enough divisors\n\
    \    if next_divisor < n then\n      break\n    end\n    -- update the largest\
    \ divisor if ", "  local m = math.floor(n/2)\n  if n % 2 == 0 then\n    if m ==\
    \ 0 then\n      return n\n    end\n    return m + 1\n  end\n  if m == 0 then\n\
    \    return n\n  end\n  -- m is odd\n  m = m - 1\n  if m > n then\n    return\
    \ n\n  end\n  if n % 2 == 1 then\n    if m == 0 then\n      return n\n    end\n\
    \    return m + 1\n  end\n  return m + 1\nend", "    if n < 2 then return 1 end\n\
    \    for d = 2, n do\n        if n % d == 0 then return d end\n    end\nend",
  "    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n \
    \           return i\n        end\n        i = i + 1\n    end\n    return n\n\
    end", "    local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n  \
    \          max = i \n        end\n    end\n    return max\nend", "  local c =\
    \ 0\n  local m = 0\n  for i = 2, n do\n    if n % i == 0 then\n      c = i\n \
    \     m = n\n    end\n  end\n  return m, c\nend", "    local i = 1\n    local\
    \ m = 0\n    while i <= n do\n        if n % i == 0 then\n            -- Divide\
    \ n evenly into i\n            m = i\n        end\n        i = i + 1\n    end\n\
    \    return m\nend", "  -- Base case:\n  if n == 1 then\n    return 1\n  end",
  "  -- The idea here is to try to find the largest divisor of n that evenly divides\
    \ n\n  -- The idea is basically this:\n  --  If the largest divisor of n is smaller\
    \ than n / 2, then n is a prime\n  --  If the largest divisor of n is larger than\
    \ n / 2, then n does not divide evenly into n", "    local primes = {}\n    for\
    \ i=2,n do\n        local count = 0\n        for j=1,i do\n            if i ~=\
    \ j and i%j = 0 then\n                count = count + 1\n            end\n   \
    \     end\n        if count == n then\n            table.insert(primes, i)\n \
    \       end\n    end\n    table.sort(primes, function(a,b) return a-b end)\n \
    \   return primes[#primes]\nend", "    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return i\n        end\n        i\
    \ = i + 1\n    end\n    return n \nend", "    if n<0 then\n        print(\"n must\
    \ be positive\")\n        return\n    end\n    local div=0\n    while n>0 do\n\
    \        if n%2 == 0 then\n            div = div + 2\n        end\n        n =\
    \ n/2\n    end\n    return div\nend", "\t-- http://stackoverflow.com/a/12558482/115084\n\
    \tn = tonumber(n)", "  if n<2 then return nil end\n  local d = 0\n  while d*n<n\
    \ do\n    d = d+1\n  end\n  return d\nend", "  if n == 0 then return 0 end\n \
    \ local i = 2\n  local i = 1\n  local max = 0\n  while i <= n do\n    if n % i\
    \ == 0 then\n      if i > max then\n        max = i\n      end\n    end\n    i\
    \ = i + 2\n  end\n  return max\nend", "    local largest = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            largest = i\n        end\n    end\n\
    \    return largest\nend", "    return select(2, (\n        -- If n is divisible\
    \ by 2, then n is evenly divisible\n        (n%2)==0 and n or n, -- If n is divisible\
    \ by 3, then n is evenly divisible\n        -- If n is divisible by 5, then n\
    \ is evenly divisible\n        (n%5)==0 and n or n, -- If n is divisible by 6,\
    \ then n is evenly divisible\n        -- If n is divisible by 10, then n is evenly\
    \ divisible\n        (n%10)==0 and n or n, -- If n is divisible by 15, then n\
    \ is evenly divisible\n        -- If n is divisible by 20, then n is evenly divisible\n\
    \        (n%20)==0 and n or n, -- If n is divisible by 25, then n is evenly divisible\n\
    \        -- If n is divisible by 50, then n is evenly divisible\n        (n%50)==0\
    \ and n or n, -- If n is divisible by 100, then n is evenly divisible\n      \
    \  -- If n is divisible by 100 and greater, then n is evenly divisible\n     \
    \   (n%100)==0 and n or n, -- If n is divisible by 200, then n is evenly divisible\n\
    \        -- If n is divisible by 200 and greater, then n is evenly divisible\n\
    \        (n%200)==0 and n or n, -- If n is divisible by 500, then n is evenly\
    \ divisible\n        -- If n is divisible by 500 and greater, then n is evenly\
    \ divisible\n        (n%500)==0 and n or n, -- If n is divisible by 1000, then\
    \ n is evenly divisible\n        -- If n is divisible by 1000 and greater, then\
    \ n is evenly divisible\n        (n%1000)==0 and n or n, -- If n is divisible\
    \ by 2000, then n is evenly divisible\n        -- If n is divisible by 2000 and\
    \ greater, then n is evenly divisible\n        (n%2000)==0 and n or n, -- If n\
    \ is divisible by 5000, then n is evenly divisible\n        -- If n is divisible\
    \ by 5000 and greater, then n is evenly divisible\n        (n%5000)==0 and n or\
    \ n, -- If n is divisible by 10000, then n is evenly divisible\n        -- If\
    \ n is divisible by 10000 and greater, then n is evenly divisible\n        (n%",
  "    local max_divisor = 0\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          local m = n / i\n            if m > max_divisor then\n            \
    \    max_divisor = m\n            end\n        end\n    end\n    return max_divisor\n\
    end", "  local largest = 0\n  for i = 2, n do\n    if n % i == 0 then\n      if\
    \ n > largest then\n        largest = n\n      end\n    end\n  end\n  return largest\n\
    end", "    local result = nil\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            result = i\n        end\n    end\n    return result\nend", "  if\
    \ n <= 1 then return 1 end\n  if n % 2 == 0 then return n / 2 end", "  assert(type(n)\
    \ == 'number')\n  assert(not math.isnan(n))", "    local biggest = 1\n    local\
    \ smallest = 1\n    while biggest < n do\n        biggest = biggest + 1\n    \
    \    local current = biggest\n        while current % biggest == 0 and current\
    \ > smallest do\n            current = current - 1\n        end\n        if current\
    \ > smallest then\n            smallest = current\n        end\n    end\n    return\
    \ smallest\nend\n</cell>\n<text>\nProblem 3. Find all factors of an integer\n\
    Now that we have our small function that finds smallest divisor of $n$ we can\
    \ extend it to find all divisors of $n$.", "    local result = 1\n    for i =\
    \ 1, n do\n        result = result * i\n        if result % 2 == 0 then\n    \
    \        result = result / 2\n        else\n            break\n        end\n \
    \   end\n    return result\nend", "    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    while true do\n        local current = max_divisor\n        for i =\
    \ 1, n do\n            local divisor = n / i\n            if divisor == current\
    \ then\n                max_divisor_index = i\n                current = current\n\
    \            end\n        end\n        if current > max_divisor then\n       \
    \     max_divisor = current\n            max_divisor_index = max_divisor_index\
    \ + 1\n        end\n        if max_divisor_index >= 3 then return false end\n\
    \    end\nend", "    local max = 1\n    local max_so_far = n\n    for i=1, n do\n\
    \        if n % i == 0 then\n            max = i\n            max_so_far = n\n\
    \        end\n    end\n    return max_so_far\nend", "\t-- If n < 0, return n\n\
    \t-- If n == 0, return 1\n\t-- If n == 1, return n\n\t-- Otherwise if n > 1, return\
    \ 2n\n\t-- Otherwise, find n with smallest remainder >= 1/2\n\tif n <= 0 then\n\
    \t\treturn n\n\tend\n\tif n == 0 then\n\t\treturn 1\n\tend\n\tif n == 1 then\n\
    \t\treturn n\n\tend\n\t-- If n > 1, then 2n\n\tif n > 1 then\n\t\treturn 2n\n\t\
    end\n\t-- n divides evenly into all positive integers. Find n such that n % n\
    \ == 0\n\t-- n >= 2 and n < 100\n\tfor _ = 1, 100 do\n\t\tif n % _ == 1 then\n\
    \t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "    local max_divisor = 1\n\
    \    local max_divisor_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor_n == i then\n                max_divisor = n\n   \
    \             max_divisor_n = n\n            else\n                max_divisor\
    \ = i\n                max_divisor_n = n\n            end\n        end\n    end\n\
    \    return max_divisor\nend", "  local largest = math.max(math.ceil(n/2), n)\n\
    \  for i = 2, largest/2 do\n    if n % i == 0 then\n      largest = i\n    end\n\
    \  end\n  return largest\nend", "   if n == 0 then\n      return 1\n   end\n \
    \  if n == 1 or n % 2 == 0 then\n      return n\n   end\n   return largest_divisor(n\
    \ / 2) * 2\nend", "  if n<0 then\n    return 0\n  end\n  if n==0 or n==1 then\n\
    \    return 1\n  end\n  if n%2==0 then\n    return 1\n  end\n  if n%3==0 then\n\
    \    return 2\n  end\n  if n%5==0 then\n    return 3\n  end\n  if n%7==0 then\n\
    \    return 5\n  end\n  return largest_divisor(n/2) + largest_divisor(n/3)\nend",
  "  local max_div = 1\n  for i = 1, n do\n    if n % i == 0 then\n      max_div =\
    \ i\n    end\n  end\n  return max_div\nend", "  if n <= 0 then return 0 end\n\
    \  local d = 0\n  for i = 1, n do\n    if n % i == 0 then\n      if d > n then\n\
    \        return n\n      end\n      d = i\n    end\n  end\n  return n\nend", " \
    \   -- The largest (positive) divisor is equal to the square root of n\n    --\
    \ >>> largest_divisor(15)\n    -- 5\n    return math.sqrt(n)\nend", "  assert(type(n)\
    \ == \"number\")\n  assert(n > 0)\n  local nDiv = (n - 1)\n  local largestDiv\
    \ = 0\n  while largestDiv < nDiv do\n    largestDiv = (largestDiv + nDiv - 1)\
    \ / 2\n  end\n  return largestDiv\nend", "  if n < 2 then return 1 end\n  if n\
    \ == 1 then return 1 end\n  local max\n  local maxN = 1\n  local i = 1\n  while\
    \ i <= n do\n    local divisor = n % i\n    if divisor == 0 then\n      if max\
    \ and divisor > max then maxN = i end\n      max = divisor\n    else\n      max\
    \ = max and max or divisor\n    end\n    i = i + 1\n  end\n  return maxN\nend",
  "  if n%2 == 0 then return n/2 end\n  local d = 2\n  while d <= n do\n    if n %\
    \ d == 0 then\n      return d\n    end\n    d = d + 2\n  end\n  return n\nend",
  "  -- TODO: Make sure that n is positive\n  assert(n > 0, \"n must be positive\"\
    )", "    local max_div = nil\n    local max_num = nil\n    for i = 1, n do\n \
    \       if n % i == 0 then\n            local d = n / i\n            if d > max_div\
    \ then\n                max_div = d\n                max_num = i\n           \
    \ elseif d == max_div then\n                max_num = max_num or i\n         \
    \   end\n        end\n    end\n    return max_num\nend", "    local largest =\
    \ 0\n    for i=1,n do\n        local current = math.floor(n/i)\n        if current*i\
    \ == n then return current end\n        if largest*current*i == n then largest\
    \ = current end\n    end\n    return largest\nend", "  if n == 1 then\n    return\
    \ 1\n  else\n    local max_div = 1\n    local max_div_n = 1\n    local i = 2\n\
    \    repeat\n      local div = n / i\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = i\n      end\n      i = i + 1\n    until i <= n and\
    \ n ~= max_div_n\n    return max_div_n\n  end\nend", "  local largest = 1\n  local\
    \ divs = n - 1\n  for i = 1, divs do\n    largest = largest % i + 1\n  end\n \
    \ return largest\nend", "    local d\n    for d = 2, n do\n        if n % d ==\
    \ 0 then\n            return d\n        end\n    end\n    return n\nend", "  \
    \  local max = 0\n    for i=1,n do\n        if ((n / i) ~= 0) then\n         \
    \   if ((max > i) and (max % i == 0)) then\n                max = i\n        \
    \    end\n        end\n    end\n    return max\nend", "    local max_divisor =\
    \ nil\n    for i = 1,n do\n        -- No need for division by i\n        if n\
    \ % i == 0 then\n            if max_divisor == nil then\n                max_divisor\
    \ = i\n            elseif max_divisor > i then\n                max_divisor =\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend", "  local\
    \ max_count = 0\n  local max_n = 1", "    local max_div = nil\n    for i = 1,\
    \ n do\n        if math.fmod(i, n) ~= 0 then\n            if max_div == nil then\n\
    \                max_div = i\n            else\n                max_div = i \n\
    \            end\n        end\n    end\n    return max_div\nend", "  -- n is integer\n\
    \  -- if n < 2, return 1\n  if n < 2 then\n    return 1\n  end", "\t-- If the\
    \ number is divisible by 2, then its smallest divisor is 2, which is larger than\
    \ n itself\n\tlocal small_divisor = 2\n\t-- If the number is divisible by 3 then\
    \ its smallest divisor is 3, which is larger than n itself\n\tlocal small_divisor\
    \ = 3\n\t-- Iterate until we find a divisor that divides n evenly smaller than\
    \ n\n\twhile n % small_divisor ~= 0 do\n\t\t-- If it is divisible by 4, then its\
    \ smallest divisor is 4, which is larger than n itself\n\t\tsmall_divisor = 4\n\
    \t\t-- If it is divisible by 6, then its smallest divisor is 6, which is larger\
    \ than n itself\n\t\tsmall_divisor = 6\n\t\t-- If it is divisible by 8, then its\
    \ smallest divisor is 8, which is larger than n itself\n\t\tsmall_divisor = 8\n\
    \t\t-- If it is divisible by 10, then its smallest divisor is 10, which is larger\
    \ than n itself\n\t\tsmall_divisor = 10\n\t\t-- If it is divisible by 12, then\
    \ its smallest divisor is 12, which is larger than n itself\n\t\tsmall_divisor\
    \ = 12\n\t\t-- If it is divisible by 15, then its smallest divisor is 15, which\
    \ is larger than n itself\n\t\tsmall_divisor = 15\n\tend\n\treturn n\nend", " \
    \ local max = 0\n  local i = 1\n  repeat\n    max = math.max(n, max)\n    i =\
    \ i + 1\n  until n % i == 0\n  return i\nend", "   assert(n > 0)\n   local d =\
    \ 0\n   if n % 2 == 0 then\n      d = n / 2\n   end\n   while d > 1 do\n     \
    \ if n % d == 0 then\n         return d\n      end\n      d = d / 2\n   end\n\
    \   return n\nend", "  -- base case: if we are dividing by zero, return 0\n  if\
    \ n == 0 then return 0 end", "    local result = 0\n    local divisor = 1\n  \
    \  for i = 1  do\n        if n % i == 0 then\n            result = i\n       \
    \     divisor = n\n        end\n    end", "  if n < 2 then\n    return 1\n  else\n\
    \    local max_divisor = math.floor(n/2)\n    local divisor = 1\n    local divisors\
    \ = []\n    for d = 2, max_divisor do\n      local remainder = n % d\n      if\
    \ remainder == 0 then\n        divisor = d \n        break\n      elseif remainder\
    \ > 0 then\n        divisor = d\n        break\n      else\n        divisors =\
    \ divs(divisor)\n        for i = #divisors, 1, -1 do\n          local remainder\
    \ = n % divisors[i]\n          if remainder > 0 then\n            divisor = divisors[i]\n\
    \            break\n          else\n            divisors[i] = divisors[i] + 1\n\
    \          end\n        end\n      end\n    end\n    return divisor\n  end\nend",
  "  if n < 4 then return 1 end\n  local m\n  for m = n; m > 1; m /= 2 do\n  end\n\
    \  return m == 2 and 2 or m\nend", "    local max_divisor = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            max_divisor = i\n        end\n\
    \    end\n    return max_divisor\nend", "\tassert(n > 0, \"n must be positive\"\
    )\n\tlocal max_divisor = 1\n\tlocal max_divisor_remainder = 1\n\tfor i=2,n do\n\
    \t\tlocal divisor = math.fmod(n,i)\n\t\tif divisor == 0 then\n\t\t\tdivisor =\
    \ i\n\t\tend\n\t\tif divisor > max_divisor_remainer then\n\t\t\tmax_divisor_remainder\
    \ = divisor\n\t\t\tmax_divisor = i\n\t\tend\n\tend\n\treturn max_divisor\nend",
  "   -- Find largest divisor, start from smallest divisor and go down\n   local n\
    \ = 1\n   local m = math.floor(n)\n   while m ~= n do\n      m = m / 2\n     \
    \ n = n + 1\n   end\n   return n\nend", "    local max_divisor = 0\n    local\
    \ max_divisor_tmp_n = 0\n    local i = 2\n    while i <= n do\n        local tmp1\
    \ = n - i\n        local tmp2 = i\n        if tmp1 % tmp2 == 0 then\n        \
    \    max_divisor = i\n            max_divisor_tmp_n = tmp1\n        end\n    \
    \    i = i + 1\n    end\n    return max_divisor, max_divisor_tmp_n\nend", "  \
    \  local result = 0\n    local remainder\n    for i = 1, n do\n        remainder\
    \ = i / 2\n        if remainder == 0 then\n            result = i\n        end\n\
    \    end\n    return result\nend", "    local maxDivisor = 1\n    local i = 2\n\
    \    while i <= n do\n        if n % i == 0 then\n            n = n/i\n      \
    \      maxDivisor = i\n        end\n        i = i + 1\n    end\n    return maxDivisor\n\
    end", "    if n == 0 then\n        return 0\n    end\n    local result = 1\n \
    \   for i = 2, n do\n        if n % i == 0 then\n            result = i\n    \
    \    end\n    end\n    return result\nend", '  assert(n ~= nil and n >= 0 and
    n % 2 == 0 and n ~= 0)', "  if n < 0 then\n    return nil\n  end\n  -- Check if\
    \ n is even\n  if n % 2 == 0 then\n    -- If n is even, return its largest divisor\n\
    \    return largest(n/2, largest)\n  else\n    -- If n is odd, return its largest\
    \ divisor and divide it by 2\n    return largest(largest(n/2, largest), largest)\n\
    \  end\nend", "    local max_divisor = 1\n    for x = 2, n do\n        if n %\
    \ x == 0 then\n            max_divisor = x\n        end\n    end\n    return max_divisor\n\
    end", "\t-- Start with n\n\tlocal n2 = n\n\tlocal i = 1\n\tlocal max = 2\n\t--\
    \ Iterate while n2 is even, and while n2 is smaller than n\n\twhile n2 % 2 ==\
    \ 0 and n2 < n do\n\t\t-- Add 1 to n2\n\t\tn2 = n2 + 1\n\t\t-- Keep increasing\
    \ i while n2 is smaller than n\n\t\twhile n2 % i == 0 and n2 < n do\n\t\t\t--\
    \ Add 1 to n2\n\t\t\tn2 = n2 + 1\n\t\tend\n\t\t-- Keep increasing i while n2 is\
    \ larger than n\n\t\twhile n2 % i == 0 and n2 > n do\n\t\t\t-- Subtract 1 from\
    \ n2\n\t\t\tn2 = n2 - 1\n\t\tend\n\t\t-- If n2 is even and n is odd, then n is\
    \ even.\n\t\tif n2 == n and n%2 == 1 then\n\t\t\tmax = i\n\t\t\tbreak\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn max\nend", "    local result = 0\n    local max_factor\
    \ = 1", "\tlocal max_div = 0\n\tlocal max_num = n", "    local max_factor = -1\n\
    \    local max_n = 0\n    local i = 1\n    while i <= n do\n        if n % i ==\
    \ 0 then\n            if max_n <= i then\n                max_n = i\n        \
    \    end\n            if i % 2 == 0 then\n                max_factor = i\n   \
    \         end\n        end\n        i = i + 1\n    end\n    return max_factor\n\
    end", "    local divisor = nil\n    local num = n\n    while num ~= 0 do\n   \
    \     divisor = num\n        num = num / 2\n    end\n    return divisor\nend",
  "\tassert(n > 0, \"n must be positive\")\n\tn = math.max(1, n)\n\tlocal m = 1\n\t\
    while m <= n do\n\t\tif n % m == 0 then\n\t\t\tlocal div = m / n\n\t\t\tassert(div\
    \ <= n, \"largest divisor must be less than n\")\n\t\t\treturn div\n\t\tend\n\t\
    \tm = m + 1\n\tend\n\t\n\t-- No divisor found for n\n\treturn nil\nend", "\t--\
    \ Based on: https://stackoverflow.com/a/39696938/3959875\n\tassert(n >= 0, \"\
    n must be non-negative\")\n\t\n\tlocal n = tonumber(n)\n\t\n\tif n == 0 then\n\
    \t\treturn 1\n\tend\n\t\n\tlocal m = 2\n\t\n\tlocal div = 1\n\tlocal i = 2\n\t\
    \n\twhile div <= n do\n\t\tm = i * 2\n\t\t\n\t\twhile m*m < n do\n\t\t\ti = i\
    \ + 1\n\t\t\tm = m * 2\n\t\tend\n\t\t\n\t\tif i < n then\n\t\t\tdiv = div + i\n\
    \t\tend\n\tend\n\t\n\treturn div\nend", "    local divs = {}\n    for d = 2, n\
    \ do\n        if n % d == 0 then\n            divs[#divs + 1] = n\n        end\n\
    \    end\n    return divs[#divs]\nend\nprint(largest_divisor(123))", "    local\
    \ max_divisor = 1\n    local max_divisor_size = n\n    for i = 1, n do\n     \
    \   if n % i == 0 then\n            if max_divisor_size / i > max_divisor then\n\
    \                max_divisor = max_divisor_size / i\n                max_divisor_size\
    \ = i\n            end\n        end\n    end\n    return max_divisor\nend", " \
    \   local num_div = 2\n    while n > num_div do\n        if n % num_div == 0 then\n\
    \            num_div = num_div + 1\n        end\n        n = math.floor(n / num_div)\n\
    \    end\n    return num_div\nend", "    local n = n or 1\n    local a = math.sqrt(n)\n\
    \    while a % 2 == 0 do\n        a = a / 2\n    done\n    return a\nend", " \
    \   local largest = 0\n    for i=1,n do\n        if math.fmod(n,i) == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend", "  --\
    \ A prime is known to divide every integer from 1 to n-1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return n\nend", " \
    \   local max_num = 1\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       max_num = i\n        end\n    end\n    return max_num\nend", "  local\
    \ div = 1\n  local r = n % div\n  if r == 1 then return div end\n  while r > 1\
    \ do\n    div = div + 1\n    r = n % div\n  end\n  return div\nend", "    local\
    \ max_divisor = 0\n    for i=1, n do\n        if n % i == 0 then\n           \
    \ n = n / i\n            if n > max_divisor then\n                max_divisor\
    \ = n\n            end\n        end\n    end\n    return max_divisor\nend", " \
    \   local max_value = 1\n    for x = 2, n do\n        if n % x = 0 then\n    \
    \        max_value = x\n        end\n    end\n    return max_value\nend", "  \
    \  local max_divisor = 1\n    local i = 1\n    while i <= n do\n        if n %\
    \ i == 0 then\n            if max_divisor * i > n then\n                max_divisor\
    \ = n\n            else\n                max_divisor = max_divisor * i\n     \
    \       end\n        end\n        i = i + 1\n    end\n    return max_divisor\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
