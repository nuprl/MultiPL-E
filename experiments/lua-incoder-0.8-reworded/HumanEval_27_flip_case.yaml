name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Special case\n  if string == nil then\n    return nil\n  end\n\
    \  -- Lowercase\n  if string.lowercase and string.lowercase ~= string.uppercase\
    \ then\n    return string.uppercase\n  end\n  -- Uppercase\n  if string.uppercase\
    \ and string.uppercase ~= string.lowercase then\n    return string.lowercase\n\
    \  end\n  -- All other characters\n  return string\nend", "   for i = 1,#string\
    \ do\n      local c = string.sub(i, i)\n      if c ~= string.lower then\n    \
    \     local flipped = string.char(i + string.upper(string.sub(i, i, 1, i)))\n\
    \         string.sub(i, i, 1, i) = flipped\n         string.sub(i, i + 1, i, i)\
    \ = string.sub(i, i, 1, i)\n      end\n   end\n   return string\nend", "  local\
    \ new_string = ''", "\treturn string:gsub(\"%l\",\n\t\tfunction(c)\n\t\t\treturn\
    \ string.upper(c)\n\t\tend)\nend", "    local output = {}\n    for i = 1, #string\
    \ do\n        local char = string.sub(i, i)\n        if char == 'a' or char ==\
    \ 'A' then\n            char = string.upper(char)\n        end\n        if char\
    \ == 'A' or char == 'a' then\n            char = string.lower(char)\n        end\n\
    \        output[#output + 1] = char\n    end\n    return table.concat(output,\
    \ '') -- Concatenate all the characters back into a string.\nend", "  local result\
    \ = string\n  for i = 1, #string do\n    local c = string.sub(i, i)\n    string.gsub(string,\
    \ '[%s%s]', function(s) return string.upper(s) end)\n    string.gsub(string, '[%s]',\
    \ function(s) return string.lower(s) end)\n    string.gsub(string, '[%s%s]', function(s)\
    \ return string.upper(s) end)\n    string.gsub(string, '[%s]', function(s) return\
    \ string.lower(s) end)\n  end\n  return result\nend", "\tlocal s = string.gsub(string,\
    \ '[%l%Lu%Ll%u%Uu]', function(c)\n\t\treturn string.char(tonumber(c)) .. string.char(tonumber(c:upper()))\n\
    \tend)\n\treturn string.gsub(s, '%l%Lu%Uu', function(c)\n\t\treturn string.char(tonumber(c:lower()))\
    \ .. string.char(tonumber(c:upper()))\n\tend)\nend", "   if string == nil then\n\
    \      return string\n   end\n   if string.gsub(\"%l\", 'l'):gsub(\"%L\", 'L'):gsub(\"\
    %u\", 'u'):gsub(\"%U\", 'U'):gsub(\"%l\", 'l'):gsub(\"%L\", 'L'):gsub(\"%u\",\
    \ 'u'):gsub(\"%U\", 'U') then\n      return string.gsub(\"%u\", 'u'):gsub(\"%U\"\
    , 'U'):gsub(\"%l\", 'l'):gsub(\"%L\", 'L'):gsub(\"%u\", 'u'):gsub(\"%U\", 'U')\n\
    \   elseif string.gsub(\"%C\", 'C'):gsub(\"%c\", 'c'):gsub(\"%C\", 'C'):gsub(\"\
    %c\", 'c') then\n      return string.gsub(\"%c\", 'c'):gsub(\"%C\", 'C'):gsub(\"\
    %c\", 'c')\n   else\n      return string\n   end\nend", "\tlocal result = string.gsub(\"\
    ([a-z])\", function(c) return string.upper(c) end)\n\tresult = string.gsub(\"\
    ([A-Z])\", function(c) return string.lower(c) end)\n\treturn result\nend", " \
    \  -- We need a string because string.gsub doesn't support pattern matching\n\
    \   for i = 1, #string do\n      local c = string[i]\n      if c == string.lower\
    \ then\n         string[i] = string.upper\n      elseif c == string.upper then\n\
    \         string[i] = string.lower\n      end\n   end\n   return string\nend",
  "\tlocal result = string\n\tresult = string.gsub(result, {\n\t\t[string.lower(string)]\
    \ = string.upper(string),\n\t\t[string.upper(string)] = string.lower(string)\n\
    \t})\n\treturn result\nend", "  return string.gsub(\"[%a]\", function(c) return\
    \ c:lower() .. c:upper() end) .. string.gsub(\"[%A]\", function(c) return c:upper()\
    \ .. c:lower() end)\nend", "    return string.gsub(string, '[%l%L]', function(match)\n\
    \        return string.char(tonumber(match)) or match\n    end)\nend", "  return\
    \ string.gsub(string.lower, '%l%U', string.upper)\nend", "  local result = string\n\
    \  for i = 1, #string do\n    if string.byte(i, string.byte(i+1, string.byte(i+2)))\
    \ == 1 then\n      result = string.sub(i, 1, string.len(i)-1) + string.sub(i,\
    \ string.len(i) + 1, string.len(i))\n    end\n  end\n  return result\nend", " \
    \ local output = ''\n  for ch in string.gmatch('([A-Za-z])') do\n    output =\
    \ output .. string.lower(ch) .. string.upper(ch)\n  end\n  return output\nend",
  "  local result = {}\n  for i = 1, #string do\n    local char = string.sub(i, i)\n\
    \    if char == 'a' or char == 'A' then\n      char = 'A'\n    elseif char ==\
    \ 'b' or char == 'B' then\n      char = 'B'\n    elseif char == 'c' or char ==\
    \ 'C' then\n      char = 'C'\n    elseif char == 'd' or char == 'D' then\n   \
    \   char = 'D'\n    elseif char == 'e' or char == 'E' then\n      char = 'E'\n\
    \    elseif char == 'f' or char == 'F' then\n      char = 'F'\n    elseif char\
    \ == 'g' or char == 'G' then\n      char = 'G'\n    elseif char == 'h' or char\
    \ == 'H' then\n      char = 'H'\n    elseif char == 'i' or char == 'I' then\n\
    \      char = 'I'\n    elseif char == 'j' or char == 'J' then\n      char = 'J'\n\
    \    elseif char == 'k' or char == 'K' then\n      char = 'K'\n    elseif char\
    \ == 'l' or char == 'L' then\n      char = 'L'\n    elseif char == 'm' or char\
    \ == 'M' then\n      char = 'M'\n    elseif char == 'n' or char == 'N' then\n\
    \      char = 'N'\n    elseif char == 'o' or char == 'O' then\n      char = 'O'\n\
    \    elseif char == 'p' or char == 'P' then\n      char = 'P'\n    elseif char\
    \ == 'q' or char == 'Q' then\n      char = 'Q'\n    elseif char == 'r' or char\
    \ == 'R' then\n      char = 'R'\n    elseif char == 's' or char == 'S' then\n\
    \      char = 'S'\n    elseif char == 't' or char == 'T' then\n      char = 'T'\n\
    \    elseif char == 'u' or char == 'U' then\n      char = 'U'\n    elseif char\
    \ == 'v' or char == 'V' then\n      char = 'V'\n    elseif char == 'w' or char\
    \ == 'W' then\n      char = 'W'\n    elseif char == 'x' or char == 'X' then\n\
    \      char = 'X'\n    elseif char == 'y' or char == 'Y' then\n      char = 'Y'\n\
    \    elseif char == 'z' or char == 'Z' then\n      char = 'Z'\n    else\n    \
    \  error('Invalid character: ' .. char)\n    end\n    table.insert(result, char)\n\
    \  end\n  return table.concat(result, '", "    local s = string.gsub(string, '[%a]',\
    \ '^%1')\n    local s = string.gsub(s, '.', string.upper)\n    return string.gsub(s,\
    \ '.', string.lower)\nend", "  local result = {}\n  for i, c in ipairs(string)\
    \ do\n    result[i] = toupper(c)\n  end\n  return table.concat(result)\nend",
  "  local result = ''\n  for _, c in ipairs(string) do\n    local l = c:byte()\n\
    \    if l >= 0x40 and l <= 0x7a then\n      l = l:byte() + 0x20\n    end\n   \
    \ result = result .. string.escape(c)\n  end\n  return result\nend", '    local
    result = string', "    return string.gsub( string, '[%s%s]', function(char1, char2)\n\
    \        return char1 == char2 then\n            assert(false)\n        end",
  "  return string:gsub(\"([a-z])\", function(c) return string.char(tonumber(c) +\
    \ 32) end)\nend", "  assert(type(string) == 'string')\n  local result = {}\n \
    \ for _, char in ipairs(string) do\n    result[#result + 1] = char:upper()\n \
    \   result[#result + 1] = char:lower()\n  end\n  return table.concat(result, '')\
    \ -- Return the string back, rather than the table which would have made it immutable.\n\
    end\n</cell>\n<cell>", "  local result = string\n  for i = 1, #string do\n   \
    \ local character = string.sub(i, i)\n    if character >= string.lower and character\
    \ <= string.upper then\n      result = string.sub(i, i) + string.sub(i, i+1)\n\
    \    end\n  end\n  return result\nend", "    if string == '' then\n        return\
    \ string\n    end\n    local first_letter = toupper(string.sub(string, 1, 1))\n\
    \    local last_letter = tolower(string.sub(string, -1))\n    return string.sub(string,\
    \ 1, -1):sub(-1) + first_letter + last_letter\nend", "  return string.gsub(\"\
    %l\", string.upper) .. string.gsub(\"%U\", string.lower)\nend", "  local result\
    \ = {}\n  for i = 1, #string do\n    local c = string.sub(i, i)\n    local l =\
    \ string.len(c)\n    if l == 0 then -- empty string just return\n      result[#result\
    \ + 1] = c\n      break\n    end\n    local uc = tostring(c:upper()) + l:sub(1,\
    \ l)\n    result[#result + 1] = uc\n  end\n  return table.concat(result, \"\"\
    )\nend", "    return string.gsub(string, '([a-z]) %1', '\\U%2')\nend", "  local\
    \ _, _, string = string.gsub(\"^%lc(.)\", string.upper)\n  return string\nend",
  "    local lower = string.lower()\n    local upper = string.upper()\n    local flip\
    \ = string.char", "  if string == nil then\n    return\n  end\n  return string.gsub(\"\
    %a\", \"%A\").gsub(\"b\", \"B\").gsub(\"c\", \"C\")\nend", "  local result = {}\n\
    \  for i = 1, #string do\n    local char = string[i]\n    local case_change =\
    \ nil\n    if char == \"a\" then\n      case_change = \"A\"\n    elseif char ==\
    \ \"b\" then\n      case_change = \"B\"\n    elseif char == \"c\" then\n     \
    \ case_change = \"C\"\n    elseif char == \"d\" then\n      case_change = \"D\"\
    \n    elseif char == \"e\" then\n      case_change = \"E\"\n    elseif char ==\
    \ \"f\" then\n      case_change = \"F\"\n    elseif char == \"g\" then\n     \
    \ case_change = \"G\"\n    elseif char == \"h\" then\n      case_change = \"H\"\
    \n    elseif char == \"i\" then\n      case_change = \"I\"\n    elseif char ==\
    \ \"j\" then\n      case_change = \"J\"\n    elseif char == \"k\" then\n     \
    \ case_change = \"K\"\n    elseif char == \"l\" then\n      case_change = \"L\"\
    \n    elseif char == \"m\" then\n      case_change = \"M\"\n    elseif char ==\
    \ \"n\" then\n      case_change = \"N\"\n    elseif char == \"o\" then\n     \
    \ case_change = \"O\"\n    elseif char == \"p\" then\n      case_change = \"P\"\
    \n    elseif char == \"q\" then\n      case_change = \"Q\"\n    elseif char ==\
    \ \"r\" then\n      case_change = \"R\"\n    elseif char == \"s\" then\n     \
    \ case_change = \"S\"\n    elseif char == \"t\" then\n      case_change = \"T\"\
    \n    elseif char == \"u\" then\n      case_change = \"U\"\n    elseif char ==\
    \ \"v\" then\n      case_change = \"V\"\n    elseif char == \"w\" then\n     \
    \ case_change = \"W\"\n    elseif char == \"x\" then\n      case_change = \"X\"\
    \n    elseif char == \"y\" then\n      case_change = \"Y\"\n    elseif char ==\
    \ \"z\" then\n      case_change = \"Z\"\n    else\n      case_change = char\n\
    \    end\n    result[i] = case_change\n  end\n  return table.concat(result, \"\
    _\")\nend", "  if string.match \"^%b\" then\n    local new_string = string.gsub(string.lower,\
    \ \"%b\", \"%b\")\n    return string.gsub(string.upper, new_string, new_string)\n\
    \  end\n  return string\nend", "  local result = string\n  result:gsub('(.)',\
    \ function(c)\n    local match = c\n    if match == \"a\" then\n      match =\
    \ \"A\"\n    end\n    if match == \"A\" then\n      match = \"a\"\n    end\n \
    \   return match\n  end)\n  result:gsub('([A-Z])', function(c)\n    local match\
    \ = c\n    if match == \"a\" then\n      match = \"A\"\n    end\n    if match\
    \ == \"A\" then\n      match = \"a\"\n    end\n    if match ~= \"\" then\n   \
    \   return \"[\" .. match .. \"]\"\n    else\n      return \"\"\n    end\n  end)\n\
    \  result:gsub('([A-Z])', function(c)\n    local match = c\n    if match == \"\
    a\" then\n      match = \"A\"\n    end\n    if match == \"A\" then\n      match\
    \ = \"a\"\n    end\n    if match ~= \"\" then\n      return \"[\" .. match ..\
    \ \"]\"\n    else\n      return \"\"\n    end\n  end)\n  result:gsub('([A-Z])',\
    \ function(c)\n    local match = c\n    if match == \"a\" then\n      match =\
    \ \"A\"\n    end\n    if match == \"A\" then\n      match = \"a\"\n    end\n \
    \   if match ~= \"\" then\n      return \"[\" .. match .. \"]\"\n    else\n  \
    \    return \"\"\n    end\n  end)\n  result:gsub('([A-Z])', function(c)\n    local\
    \ match = c\n    if match == \"a\" then\n      match = \"A\"\n    end\n    if\
    \ match == \"A\" then\n      match = \"a\"\n    end\n    if match ~= \"\" then\n\
    \      return \"[\" .. match .. \"]\"\n    else\n      return \"\"\n    end\n\
    \  end)\n  result:gsub('([A-Z])', function(c)\n    local match = c\n    if match\
    \ == \"a\" then\n      match = \"A\"\n    end\n    if match == \"A\" then\n  \
    \    match = \"a\"\n    end\n    if match ~= \"\" then\n      return \"[\" ..\
    \ match .. \"]\"\n    else\n      return \"\"\n    end\n  end)\n  result:gsub('([A-Z])',\
    \ function(c)\n    local match = c\n    if match == \"a\" then\n      match =\
    \ \"A\"\n    end\n    if match == \"A\" then\n      match = \"a\"\n    end\n \
    \   if match ~= \"\" then\n      return \"[\" .. match .. \"]\"\n    else\n  \
    \    return \"\"\n    end\n  end)\n  result:gsub('([A-Z])', function(c)\n    local\
    \ match = c\n    if match == \"a\" then\n      match", "  local result = string\n\
    \  result:gsub('(..)', string.upper)\n  result:gsub('(.)', string.lower)\n  return\
    \ result\nend", "  -- We only do things when the string is longer than 2 characters.\n\
    \  -- For shorter strings, just return the original string.\n  if string.chars\
    \ > 2 then\n    local new_string = ''\n    local string_index, string_index_end\
    \ = string.index, string.index\n    for char in string.gmatch('.') do\n      --\
    \ Flip each character based on the corresponding case for the character.\n   \
    \   -- Uppercase to lowercase\n      new_string = string_index_end(new_string,\
    \ char):lower()\n      -- Lowercase to uppercase\n      new_string = string_index_end(new_string,\
    \ char):upper()\n    end\n    return new_string\n  end\n  return string\nend",
  "  -- A quick check to see if there is a case change\n  if string.lower ~= string.upper\
    \ then\n    return string\n  end", "  return string.gsub('.', function(c) c ==\
    \ 'a' then c ~= 'A' then c:toupper() else c:tolower() end)\nend", "  local capitals\
    \ = string.gsub('([A-Z])', function(c) return string.upper(c) end):gsub('([A-Z])',\
    \ function(c) return string.lower(c) end):gsub('([a-z])', function(c) return string.upper(c)\
    \ end):gsub('([a-z])', function(c) return string.lower(c) end)\n  return capitals\n\
    end", "    local result = string\n    for i, v in string.gmatch((string.gsub(string,\
    \ '%l', string.upper)), '%l:g') do\n        string.gsub(string, '%l', string.sub,\
    \ v, i)\n    end\n    for i, v in string.gmatch((string.gsub(string, '%U', string.lower)),\
    \ '%U:g') do\n        string.gsub(string, '%U', string.sub, v, i)\n    end\n \
    \   return result\nend", "   return string.gsub(\"[%l%L]\", function(c) \n   \
    \   return string.char(tonumber(c)) == c \n      and string.upper(c) or string.lower(c)\
    \ end)\nend\n</cell>\n<text>\nFunctional Programming in Julia\nIn Julia, functions\
    \ are objects, so they can be passed around like any other objects.  They can\
    \ also have arguments and return values:", "    return string:gsub('.', function(c)\n\
    \        return string.upper(c)\n    })\nend", "    local uppercase_string = string.gsub(string,\
    \ \"[A-Z]\", \"%u\")\n    local lowercase_string = string.gsub(string, \"%u\"\
    , \"[A-Z]\")\n    return uppercase_string .. lowercase_string\nend", "    local\
    \ s = string.gsub(string, '\\L\\1', '\\U\\1')\n    return string.gsub(string,\
    \ '\\U\\1', '\\L\\1')\nend", "  -- Special case for empty string\n  if string\
    \ == '' then return '' end\n  -- We do not want to modify 'string', so start with\
    \ a copy\n  local copy = string.dup", "  local result = string\n  -- Lowercase\
    \ each character\n  for i = 1,#string do\n    if string.sub(i, i, i) ~= string.sub(i,\
    \ i, i) then -- If it's not already uppercase\n      result = result:sub(i, i)\
    \ + result:sub(i+1, i+1)\n    end\n  end\n  return result:upper()\nend", "   for\
    \ i = 1, #string do\n      if string.sub(i, 1, 1) == 'a' then\n         string.sub(i,\
    \ 1, #string + 1) = string.sub(i, #string + 1, #string)\n         string.sub(i,\
    \ #string + 1, 1) = 'a'\n      elseif string.sub(i, 1, 1) == 'A' then\n      \
    \   string.sub(i, 1, #string + 1) = string.sub(i, #string + 1, #string)\n    \
    \     string.sub(i, #string + 1, 1) = 'A'\n      end\n   end\n   return string\n\
    end", "  local upper, lower = {}, {}\n  local index = string.upper:gsub(\"[^A-Z]\"\
    , \"\")\n  string.upper:gsub(\"%a\", function(c)\n    upper[c] = string.upper(c)\n\
    \    lower[c] = string.lower(c)\n  end, \"g\")\n  string.lower:gsub(\"%a\", function(c)\n\
    \    upper[c] = string.upper(c)\n    lower[c] = string.lower(c)\n  end, \"g\"\
    )\n  return string.format(\n    string.upper(string.sub(string, index, -1)..string.lower(string.sub(string,\
    \ 1, index))),\n    string.sub(string, 1, index)..string.sub(string, index + 1)..upper..lower)\n\
    end", "    local result = string\n    for i, char in pairs(string) do\n      \
    \  local new_char = string.sub(char, 1, 1)\n        if new_char >= 'a' and new_char\
    \ <= 'z' then\n            new_char = new_char - 'a' + 'A'\n        end\n    \
    \    result = result .. new_char\n    end\n    return result\nend", "    return\
    \ string.gsub('([a-z])', function(c) string.char.upper(c) end)\nend", "  return\
    \ string:gsub(\"%l\", string, \"G\")\nend", "  local result = {}\n  for i, v in\
    \ ipairs(string) do\n    local l = string.lower(v)\n    local u = string.upper(v)\n\
    \    table.insert(result, string.sub(v, 1, 1) == l and l or u)\n  end\n  return\
    \ table.concat(result)\nend", "  local buffer = ''\n  for i = 1, #string do\n\
    \    if string.sub(i, i, i) ~= '' then\n      buffer = buffer .. string.sub(i,\
    \ i, i)\n    else\n      buffer = buffer .. string.sub(i, i)\n    end\n  end\n\
    \  return buffer\nend", "  local new_string = ''\n  for i, char in ipairs(string)\
    \ do\n    local new_char = char:lower()\n    new_char = new_char:upper()\n   \
    \ new_char = new_char:lower()\n    new_string = new_string .. new_char\n  end\n\
    \  return new_string\nend", "  local new_string = string\n  for i = 1, #string\
    \ do\n    if string.sub(i, i, i) ~= string.sub(i, i, i) then\n      new_string\
    \ = new_string .. string.sub(i, i, i)\n    end\n  end\n  return new_string\nend",
  "    string = string.gsub('%l', function()\n        local c = string.byte(string.sub(string))\n\
    \        return string.char((c > 96 and c - 32 or c) + 32)\n    end)\n    return\
    \ string\nend", "  -- If string has 0 characters, return empty string.\n  if string:len()\
    \ == 0 then\n    return ''\n  -- Return string with uppercase characters.\n  elseif\
    \ string:len() > 0 then\n    local result = string:lower()\n    local i = 2\n\
    \    while i < string:len() do\n      if string.sub(result,i,i) == string.sub(result,i,i)\
    \ then\n        result = string.sub(result,i,i):upper()\n      end\n      i =\
    \ i + 1\n    end\n    return result\n  end\nend", "    return string.gsub('%l','%U',\
    \ string.gsub('%U','%l', string))\nend", "  local new_string = '' -- The new string\
    \ with the flipped characters.\n  for i, character in string.gmatch'([%a][%a]*)'\
    \ do\n    new_string = new_string .. character:lower() .. character:upper()\n\
    \  end\n  return new_string\nend", "  local result = string\n  for i = 1, #string\
    \ do\n    local c = string.sub(string, i, i)\n    local l = string.len(c)\n  \
    \  if l:byte() == 1 then\n      if string.byte(c) == 127 then\n        c = string.sub(string,\
    \ 1, l:byte() - 1)\n      end\n    else\n      if string.byte(c) == 127 then\n\
    \        c = string.sub(string, 1, l:byte() + 1)\n      end\n    end\n    result\
    \ = string.sub(string, 1, i-1) .. c .. string.sub(string, i+l)\n  end\n  return\
    \ result\nend", "  return string.gsub(\"[%a]\", function(c) string.char(tonumber(c))\
    \ end)\nend", "  local output = ''\n  for i = 1, #string do\n    local char =\
    \ string.sub(i, i)\n    if char >= 'a' and char <= 'z' then\n      char = 'A'\n\
    \    elseif char >= 'A' and char <= 'Z' then\n      char = 'a'\n    end\n    output\
    \ = output .. char\n  end\n  return output\nend", "    local result = \"\"\n \
    \   for i = 1, #string do\n        local char = string.sub(i, i)\n        if char\
    \ >= \"a\" and char <= \"z\" then\n            char = char.up\n        elseif\
    \ char >= \"A\" and char <= \"Z\" then\n            char = char.down\n       \
    \ end\n        result = result .. char\n    end\n    return result\nend", "  return\
    \ string:gsub('Lu', 'LuU'):gsub('lU', 'lU')\nend", "  local result = string\n\
    \  local index = #result", "  return string:gsub(\"([a-z]) \", function(c) return\
    \ c:upper() end)\nend", "  local result = string\n  local cap = true\n  string.gsub(function(char)\
    \ -- Scan every char\n    if cap and char >= 'a' and char <= 'z' then\n      char\
    \ = char - 'a' + 'A'\n      cap = false\n    elseif char >= 'A' and char <= 'Z'\
    \ then\n      char = char - 'A' + 'a'\n      cap = true\n    else\n      char\
    \ = char\n    end\n  end, function(char) -- Scan every non-lowercase char\n  \
    \  if not cap and char >= 'a' and char <= 'z' then\n      char = char - 'a' +\
    \ 'A'\n      cap = false\n    elseif char >= 'A' and char <= 'Z' then\n      char\
    \ = char - 'A' + 'a'\n      cap = true\n    else\n      char = char\n    end\n\
    \  end)\n  return result\nend", "    return string.gsub(string, '(%l)', function(x)\n\
    \        return string.char(x:lower():byte() + 0x20)\n    end):gsub('%W', string.upper):gsub('%w',\
    \ string.lower)\nend", "   -- Lowercase string before flipping.\n   local lowercase_string\
    \ = string.lower\n   -- Uppercase string after flipping.\n   local uppercase_string\
    \ = string.upper\n   -- Flip characters and return string.\n   return uppercase_string(lowercase_string(string))\n\
    end", "  local result = ''\n  local length = string.len\n  local index = 0\n \
    \ while index <= string.len do\n    local char = string.sub(string,index,index)\n\
    \    if char:lower():upper() then\n      result = result .. char:upper()\n   \
    \ else\n      result = result .. char:lower()\n    end\n    index = index + 1\n\
    \  end\n  return result\nend", "  return string.gsub('Lu', 'U') .. string.gsub('lL',\
    \ 'L')\nend", "    local out = string\n    for i, c in ipairs(string:gmatch(\"\
    ([%a])\")) do\n        if c:lower() ~= c then\n            out = out:gsub(c:lower(),\
    \ c:upper())\n        end\n    end\n    return out\nend", '  local new_string
    = ""', "    local new_string = ''\n    for c, _ in string.gmatch(string, \"%a\"\
    ) do\n        if c == string.lower then\n            c = string.upper\n      \
    \  elseif c == string.upper then\n            c = string.lower\n        end\n\
    \        new_string = new_string .. c\n    end\n    return new_string\nend", " \
    \ local new_string = ''\n  for i = 1, #string do\n    if string.sub(i, 1) == string.sub(i,\
    \ 1) then\n      new_string = new_string .. string.sub(i, 2)\n    else\n     \
    \ new_string = new_string .. string.sub(i, 1)\n    end\n  end\n  return new_string\n\
    end", "    return string.gsub('%l', string.upper) .. string.gsub('%U', string.lower)\n\
    end\nreturn flip_case\nend", "    local result = {}\n    for _, chars in pairs(string)\
    \ do\n        for _, char in pairs(chars) do\n            result[#result + 1]\
    \ = char == string.lower and char == string.upper and char or string.upper(char)\
    \ .. string.lower(char)\n        end\n    end\n    return table.concat(result,\
    \ \"\")\nend", "  assert(type(string) == 'string', 'string parameter required')\n\
    \  return string:gsub('%l', function(c) c:lower() == 'l' and c:upper() or c:lower()\
    \ end)\nend", "   for i = 1, #string do\n      local c = string.sub(i, i)\n  \
    \    local uc = string.sub(i, i+1)\n      if c > 'a' and c < 'z' then\n      \
    \   if uc > 'Z' and uc < 'a' then\n            uc = string.char(uc + ((c - 'a')\
    \ * (-1))):lower()\n         end\n      end\n      string.sub(i, i+1, uc)\n  \
    \ end\n   return string\nend", "  return string.gsub('[%s]' % string.upper(),\
    \ '[%u]' % string.upper, '[%s]' % string.lower)\nend", "  local toupper\n  if\
    \ string.upper then\n    toupper = string.upper\n  elseif string.lower then\n\
    \    toupper = string.lower\n  else\n    error(\"'string' has no upper or lower\
    \ function\")\n  end\n  return toupper(string)\nend", "  local new_string = ''\n\
    \  for i=1,#string do\n    local char = string[i]\n    new_string = new_string\
    \ .. string.upper(char) .. string.lower(char)\n  end\n  return new_string\nend",
  "    local result = {}\n    for _, c in ipairs(string) do\n        if c == 'a' then\n\
    \            result[c] = 'b'\n        elseif c == 'A' then\n            result[c]\
    \ = 'B'\n        elseif c == '0' then\n            result[c] = 'n'\n        elseif\
    \ c == 'N' then\n            result[c] = 'N'\n        else\n            result[c]\
    \ = c\n        end\n    end\n    return table.concat(result)\nend", "  local output\
    \ = {}\n  for i, character in ipairs(string) do\n    output[i] = character:upper()\n\
    \  end\n  return table.concat(output)\nend", "    return string:gsub(\"%l\", string.reverse):reverse()\n\
    end", "    return string.gsub(\"[%a]\", function(c) return string.char(tonumber(c))\
    \ end) .. string.gsub(\"[%A]\", function(c) return string.upper(string.char(tonumber(c)))\
    \ end)\nend", "  local new_string = ''\n  for i = 1, string.len do\n    local\
    \ char = string.sub(i, i)\n    char = char == string.upper(char) then\n      string.sub(i,\
    \ 1, string.lower(char))\n    else\n      new_string = new_string .. string.lower(char)\n\
    \    end\n  end\n  return new_string\nend", "  return string.gsub( string, \"\
    [%l^%u^%u]+\", function(c) return c:lower() .. c:upper() end) -- Uppercase\nend",
  "    local new_str = ''\n    for idx, char in enumerate(string) do\n        if char\
    \ == 'a' then\n            new_str = new_str .. 'A'\n        elseif char == 'A'\
    \ then\n            new_str = new_str .. 'a'\n        else\n            new_str\
    \ = new_str .. char\n        end\n    end\n    return new_str\nend", "  local\
    \ new_string = ''\n  local prev_char = ''\n  for char in string.gmatch('([A-Z]+)')\
    \ do\n    char = string.upper(char)\n    char = string.lower(char)\n    new_string\
    \ = new_string .. char\n    prev_char = char\n  end\n  return new_string .. prev_char\n\
    end", "  local result = {}\n  for i = 1, string.count do\n    result[string.sub(i,\
    \ i)] = string.sub(i, i)\n  end\n  for i = 1, string.count do\n    result[string.sub(i,\
    \ i)] = string.sub(i, i):gsub(\"%l\", function(c) return c:upper() end)\n  end\n\
    \  return table.concat(result)\nend", "    local result = string:gsub(\"%l\",\
    \ string.upper)\n    result = result:gsub(\"%U\", string.lower)\n    return string\n\
    end", "  return string.gsub('%l%u', function(c) return string.char(tonumber(c)\
    \ + 0x20) end, string.char(tonumber(c) - 0x20))\nend", "  return string.gsub(\
    \ function(x)\n    return x:lower()\n  end, function(x)\n    return x:upper()\n\
    \  end)\nend", "   for _, letter in pairs(string) do\n      local upper = string.byte(letter)\n\
    \      string.byte(letter) = (string.byte(letter) + string.byte(letter))\n   \
    \   string.byte(upper) = (string.byte(upper) - string.byte(letter))\n   end\n\
    \   return string\nend", "    local new_string = \"\"\n    local index = 1\n \
    \   repeat\n        if string.sub(string, 1, index) then\n            new_string\
    \ = new_string .. string.sub(string, index, index) .. string.sub(string, index\
    \ + 1, string.len(string))\n        end\n        index = index + 1\n    until\
    \ string.sub(string, 1, index) ~= \"\"\n    return new_string\nend", "  local\
    \ output = ''\n  for i = 1, #string do\n    local char = string.sub(i, i)\n  \
    \  if char >= 'a' and char <= 'z' then\n      char = char + ('A'-'a')\n    end\n\
    \    output = output .. char\n  end\n  return output\nend", "    local chars =\
    \ {}\n    string.gsub(string, '', function(c) chars[#chars + 1] = c; chars[#chars]\
    \ = c; end)\n    string.gsub(chars, '', function(c)\n        return string.char(tonumber(c,\
    \ 16))\n    end)\n    return table.concat(chars, \"\")\nend", "  return string.gsub('%l',\
    \ string.upper) ..\n         string.gsub('%L', string.lower)\nend", "    local\
    \ new_string\n    for i = 1, #string do\n        if string.sub(i, 1, 1) == \"\
    a\" then\n            new_string = string.sub(i, 1, 1) + \"B\"\n        else\n\
    \            new_string = string.sub(i, 1, 1) + \"a\"\n        end\n    end\n\
    \    return new_string\nend", "  string = string.gsub(\"%l\", \"%l\")\n  string\
    \ = string.gsub(\"%U\", \"%u\")\n  string = string.gsub(\"%l\", \"%l\")\n  return\
    \ string\nend", "  local chars = string.gsub(string, \"[%s[%s\\\\]%w%w\\\\-]+\"\
    , \"\")\n  local new_string = \"\"\n  for i = 1, #chars do\n    local c = string.sub(string,\
    \ i, i)\n    if c:lower() == c then\n      new_string = new_string .. string.sub(string,\
    \ i, i):upper()\n    else\n      new_string = new_string .. string.sub(string,\
    \ i, i):lower()\n    end\n  end\n  return new_string\nend", "\treturn string\n\
    \t\t:gsub('[%s
  "  local new_string = string\n  local upper = string.find(string, \"[A-Z]\")\n \
    \ if upper == nil then\n    new_string = string.lower(string)\n  else\n    new_string\
    \ = string.upper(string)\n  end\n  return new_string\nend", "  return string.gsub(\"\
    %l\", string.upper) .. string.gsub(\"%U\", string.lower)\nend", "   -- No string\
    \ provided\n   if string == nil then return end\n   -- The string is empty (no\
    \ characters)\n   if #string == 0 then return end\n   -- Return an empty string\
    \ if there are no lowercase characters\n   local lowercase = string.gsub(string,\
    \ '[a-z]', '[A-Z]')\n   local uppercase = string.gsub(string, '[A-Z]', '[a-z]')\n\
    \   if #lowercase == 0 then lowercase = '' end\n   if #uppercase == 0 then uppercase\
    \ = '' end\n   return (uppercase .. lowercase)\nend", "    if string:len() < 2\
    \ then\n        return string\n    end\n    local result = string[1]\n    for\
    \ i = 2, string:len() do\n        if result:sub(1, 1) ~= string[i]:sub(1, 1) then\n\
    \            result = result .. string[i]:sub(1, 1)\n        else\n          \
    \  result = result .. string[i]:sub(1, 1)\n        end\n    end\n    return result\
    \ .. string[#string]\nend", "\treturn string.gsub(\"%l\", string.upper)\nend",
  "  return string.gsub('^%l', string.upper, '%l', string.lower)\nend", "  -- First\
    \ split the string into words (splits on non-word characters).\n  local words\
    \ = string.gmatch\"([^A-Za-z0-9]+)\" -- Split on non-alphanumeric characters.\n\
    \  -- Now loop over those splits and flip each word character.\n  for i = 1, #words\
    \ do\n    words[i] = string.gsub(words[i], \"[%a]\", function(character)\n   \
    \   -- If the character is lowercase, then convert to uppercase.\n      if string.byte(character)\
    \ == string.byte('a') and string.byte(character) <= string.byte('z') then\n  \
    \      return string.char(string.byte(character) + 32)\n      -- If the character\
    \ is uppercase, then convert to lowercase.\n      elseif string.byte(character)\
    \ == string.byte('A') and string.byte(character) >= string.byte('Z') then\n  \
    \      return string.char(string.byte(character) - 32)\n      -- Otherwise return\
    \ the original character.\n      else\n        return character\n      end\n \
    \   end)\n  end\n  -- Join all the words back together with spaces.\n  return\
    \ table.concat(words, \" \")\nend", "    return string.gsub('%l', function(c)\
    \ return string.char(tonumber(c) + 0x20) end) .. string.gsub('%U', function(c)\
    \ return string.char(tonumber(c) - 0x20) end)\nend", "\tlocal str = \"\"\n\tfor\
    \ i,v in pairs(string) do\n\t\tif v:lower() then\n\t\t\tstr = str .. v:upper()\n\
    \t\telse\n\t\t\tstr = str .. v:lower()\n\t\tend\n\tend\n\treturn str\nend", " \
    \ return string.gsub(\"^%l\", string.upper):gsub(\"%l$\", string.lower):gsub(\"\
    \ \", \"_\")\nend", "   return string.gsub(string.lower(), '%l', string.upper)\n\
    \   -- return string.gsub(string, '%l', string.upper)\nend", "    if string ==\
    \ nil then\n        return nil\n    end\n    \n    local result = string.gsub('%a',\
    \ nil, function() return string.char.upper(string.sub(this, 1, 1)) end)\n    return\
    \ string.gsub(result, '%A', string.char.lower)\nend", "    if string == '' then\n\
    \        return ''\n    end", "  local result = \"\"\n  for i = 1, #string do\n\
    \    local character = string[i]\n    if character <= \"Z\" and character >= \"\
    A\" then\n      character = character .. \"a\"\n    end\n    if character <= \"\
    Z\" and character >= \"a\" then\n      character = character .. \"A\"\n    end\n\
    \    result = result .. character\n  end\n  return result\nend", "  return string.gsub(string.lower,\
    \ \"%L\", string.upper)\nend", "  -- If string is nil, return nil\n  -- Otherwise,\
    \ return string\n  return string and string:gsub(\"[%l%L]\", function(character)\n\
    \    local value = character:upper()\n    return value:lower()\n  end) or nil\n\
    end", "  return string:gsub('%l', function(c) return upper(c) end):gsub('%U',\
    \ function(c) return lower(c) end)\nend", "\tlocal output = ''\n\tfor letter in\
    \ string.gmatch('^([a-z]-[%z])+$') do\n\t\toutput = output .. string.upper(letter)\
    \ .. string.lower(letter)\n\tend\n\treturn output\nend", "   local result = \"\
    \"\n   for _, char in string.gmatch(\"[%a][%a]+\") do\n      result = result ..\
    \ toupper(char)\n   end\n   return result\nend", "    local output = string\n\
    \    for i, c in pairs(string) do\n        output = string.sub(output, 1, 1) ..\
    \ string.sub(output, 2) .. string.sub(output, 3)\n    end\n    return output\n\
    end", "   -- We use a helper function to flip case only once.\n   -- If it returns\
    \ true, we know the string is already correctly cased.\n   if flip_case_helper(string.lower)\
    \ == true then\n      return string\n   end\n   -- We use a helper function to\
    \ flip case only once.\n   -- If it returns true, we know the string is already\
    \ correctly cased.\n   if flip_case_helper(string.upper) == true then\n      return\
    \ string\n   end\n   -- We flip case for each char.\n   return string.gsub(string,\
    \ \"([a-z])\", function(c)\n      -- We flip case for each char.\n      return\
    \ c.upper():lower() .. c.lower()\n   end)\nend", "  return string.gsub(string.lower(string),\
    \ string.upper, string.lower)\nend", "  local s = string.gsub(string.upper, string.lower)\n\
    \  s = string.gsub(string.lower, string.upper)\n  return s\nend", "    if #string\
    \ > 0 then\n        local new_string = string\n        for i = 1, #string do\n\
    \            if string.sub(i, i) == string.sub(i, i) or string.sub(i, i) == '_'\
    \ then\n                new_string = string.sub(string, 1, i - 1) .. string.sub(string,\
    \ i + 1, #string) -- Replace lowercase char with uppercase\n            else\n\
    \                new_string = string.sub(string, 1, i-1) .. string.sub(string,\
    \ i + 1, #string) -- Replace lowercase char with lowercase\n            end\n\
    \        end\n        return new_string\n    end\n    return string\nend", " \
    \   local newString = \"\"\n    for i = 1, #string do\n        local char = string.sub(i,\
    \ i)\n        if char >= string.lower and char <= string.upper then\n        \
    \    newString = newString .. string.sub(string.upper, char)\n        else\n \
    \           newString = newString .. char\n        end\n    end\n    return newString\n\
    end", "   return string.gsub(string.lower(), '%l', string.upper)\nend", "    if\
    \ string.lower then\n        return string.lower:gsub(\"%l\", string.upper)\n\
    \    else\n        return string.upper:gsub(\"%L\", string.lower)\n    end\nend",
  "   if string.lower ~= string.upper then\n      -- Uppercase to lowercase\n    \
    \  string.lower = string.upper\n   end\n   if string.upper ~= string.lower then\n\
    \      -- Lowercase to uppercase\n      string.upper = string.lower\n   end\n\
    \   return string\nend", "    if string == nil then\n        return nil\n    end",
  "  if type(string) == 'string' then\n    local new_string = string\n    for i =\
    \ 1, #string do\n      if string.sub(i, 1, 1) ~= string.sub(i, 1, 1):lower() then\n\
    \        new_string = new_string .. string.sub(i, 1, 1):upper()\n      end\n \
    \   end\n    return new_string\n  else\n    error('First argument must be a string')\n\
    \  end\nend", "   return string.gsub(\"%l\", string.upper) .. string.gsub(\"%u\"\
    , string.lower)\nend", "\tstring = string.upper()\n\tstring.gsub('^%l', string.lower)\n\
    \treturn string\nend", "   if string == '' or string == 'null' then\n      return\
    \ string\n   end", "    local buffer = {}\n    for letter, character in string:gmatch('(.)')\
    \ do\n        if character == letter then\n            table.insert(buffer, character:lower())\n\
    \            table.insert(buffer, letter:upper())\n        else\n            table.insert(buffer,\
    \ character)\n        end\n    end\n    return table.concat(buffer)\nend", " \
    \ -- Avoid a global lookup.\n  local string_lower = string\n  -- Convert uppercase\
    \ letters to lowercase ones, and vice versa.\n  string_lower = string_lower:gsub(\"\
    [%a]\", function(letter)\n    letter = string.lower(letter)\n    return string.upper(letter)\n\
    \  end)\n  -- Return the flipped string.\n  return string_lower\nend", "  return\
    \ string:gsub(\"([a-z])\", function(c) return c:lower() end)\nend", "    return\
    \ string.gsub(string.lower(string), '%L', function(c)\n        if string.upper(c)\
    \ ~= c then\n            return string.upper(c)\n        else\n            return\
    \ string.lower(c)\n        end\n    end)\nend", "  return string:gsub('^[%a%A]+',\
    \ function(c)\n    return c:lower() .. c:upper()\n  end):gsub('[%a%A]+$', function(c)\n\
    \    return c:lower() .. c:lower()\n  end)\nend", "    local result = \"\"\n \
    \   for i, v in string.gmatch(\"[%l%u]\", string) do\n        if v == \"l\" then\n\
    \            v = string.char(\"Lu\")\n        elseif v == \"u\" then\n       \
    \     v = string.char(\"Ll\")\n        else\n            assert(false)\n     \
    \   end\n        result = result .. v\n    end\n    return result\nend", "   for\
    \ i = 1, #string do\n      local char = string.sub(i, i)\n      if char >= 'a'\
    \ and char <= 'z' then\n         char = string.sub(char, 1, #char - 1) + string.sub(string.sub(char,\
    \ 1, #char - 1), #char, 1)\n      else\n         char = string.sub(i, 1, #i -\
    \ 1) + string.sub(char, 1, #char - 1)\n      end\n      string.sub(i, 1, i) =\
    \ char\n   end\n   return string\nend", "    local result = string\n    for i,\
    \ c in string.gfind(string, \"^%l\", function(c)\n        if string.byte(c) >=\
    \ 65 then\n            return string.byte(c) - 32\n        end\n    end)\n   \
    \ return result\nend", "  local new_string = ''\n  for i = 1, #string do\n   \
    \ local char = string.byte(string, i)\n    if (char >= string.upper(char)) then\n\
    \      char = string.upper(char)\n    end\n    if (char >= string.lower(char))\
    \ then\n      char = string.lower(char)\n    end\n    new_string = new_string\
    \ .. char\n  end\n  return new_string\nend", "    return string.gsub('%l', function(c)\
    \ return string.char(tonumber(c)+32) end)\nend", "\t-- If the string is empty,\
    \ just return the empty string.\n\tif string:len() == 0 then\n\t\treturn ''\n\t\
    end", "  return string.gsub(tostring(string), '([a-z])', function(c) return string.upper(c)\
    \ end) ..\n    string.gsub(tostring(string), '([A-Z])', function(c) return string.lower(c)\
    \ end)\nend", "  return string.gsub(string.lower, \"%l%u\", string.upper)\nend",
  "  return string.gsub(tostring(string), '([a-z])', function(c) return c:upper()\
    \ end)\nend", "  local new_string = ''\n  for char in string:gmatch'([^%s]+)'\
    \ do\n    char = string.upper(char)\n    if char ~= char then\n      char = string.lower(char)\n\
    \    end\n    new_string = new_string .. char\n  end\n  return new_string\nend",
  "  if string.lower() ~= string then\n    return string:upper()..string:lower()\n\
    \  end\n  return string\nend", "    local result = \"\"\n    for i = 1, #string\
    \ do\n        if string.sub(i, 1, 1) == string.sub(i, 2, 2) then\n           \
    \ string.sub(i, 1, 2) = string.sub(i, 2, 1)\n            string.sub(i, 2, 1) =\
    \ string.sub(i, 1, 1)\n        else\n            result = result .. string.sub(i,\
    \ 1, i)\n        end\n    end\n    return string\nend", "    local first_char\
    \ = string.sub(1,1)\n    local rest = string.sub(string.len() - 1)\n    local\
    \ new_rest = rest:upper()\n    return string.sub(1, 1) .. new_rest .. first_char:lower()\n\
    end", "  local chars = string.gsub(string, '%l+', function(c) return string.char(tonumber(c))\
    \ end) -- Converts lowercase letter to uppercase\n  chars = chars:gsub('%U', function(c)\
    \ return string.char(tonumber(c)) end) -- Converts uppercase letter to lowercase\n\
    \  chars = chars:gsub('%%', function(c) return string.char(tonumber(c)) end) --\
    \ Revert lowercase letters to uppercase\n  chars = chars:gsub('%%', function(c)\
    \ return string.char(tonumber(c)) end) -- Revert uppercase letters to lowercase\n\
    \  return chars\nend", "\tlocal newString = ''\n\tfor char in string.gmatch(string,\
    \ \"%W\") do\n\t\t-- This looks for any letter that is all capitals.\n\t\tif string.upper(string.sub(char,\
    \ 1)) == char then\n\t\t\t-- This converts any letter that is all capitals to\
    \ lowercase\n\t\t\tnewString = newString .. string.lower(string.sub(char, 1, 1))\n\
    \t\telseif string.lower(string.sub(char, 1)) == char then\n\t\t\t-- This converts\
    \ any letter that is all capitals to uppercase\n\t\t\tnewString = newString ..\
    \ string.upper(string.sub(char, 1, 1))\n\t\telse\n\t\t\t-- This just appends the\
    \ current letter to our string\n\t\t\tnewString = newString .. char\n\t\tend\n\
    \tend\n\treturn newString\nend", "  local new_str = ''\n  for i = 1, #string do\n\
    \    new_str = new_str .. string:sub(i, i):upper():sub(1, 1) .. string:sub(i,\
    \ i):lower()\n  end\n  return new_str\nend", "   -- Strip the leading space if\
    \ any.\n   if string.sub(string,1,1) == '_' then\n      string = string.sub(string)\n\
    \   end\n   -- Iterate over all characters in the string.\n   local new_string\
    \ = ''\n   for i = 1,string.len(string) do\n      -- If the character is a lower\
    \ case letter, capitalize it.\n      if string.sub(string,i,i) == 'a' or string.sub(string,i,i)\
    \ == 'e' or string.sub(string,i,i) == 'i' or string.sub(string,i,i) == 'o' or\
    \ string.sub(string,i,i) == 'u' then\n         new_string = new_string .. string.sub(string,i,i).upper()\
    \ .. string.sub(string,i,i+1)\n      -- If the character is upper case, lowercase\
    \ it.\n      elseif string.sub(string,i,i) == 'A' or string.sub(string,i,i) ==\
    \ 'E' or string.sub(string,i,i) == 'I' or string.sub(string,i,i) == 'O' or string.sub(string,i,i)\
    \ == 'U' then\n         new_string = new_string .. string.sub(string,i,i).lower()\
    \ .. string.sub(string,i,i+1)\n      -- If character is not a lower or upper case,\
    \ just copy it.\n      else\n         new_string = new_string .. string.sub(string,i,i)\n\
    \      end\n   end\n   -- Return new string with flipped case.\n   return new_string\n\
    end\n</cell>\n<cell>\nprint(flip_case('hello'))\n</cell>\n<text>\nExercise: Write\
    \ a function that accepts a string and counts the number of lowercase and uppercase\
    \ characters in the string.", "  local result = ''\n  for i = 1, #string do\n\
    \    if string.sub(i, i, i) ~= string.sub(i, i, i) then\n      result = string.sub(i,\
    \ 1, i) + string.sub(i, i+1..#i) + string.sub(i, 1, i)\n    end\n  end\n  return\
    \ string.gsub(result,\n    function(c)\n      if c == string.sub(c, i, i) then\n\
    \        return string.sub(c, i, i)\n      elseif c ~= 'A' and c ~= 'a' then\n\
    \        return string.sub(c, 1, 1) + string.sub(c, string.sub(c, i+1..#i), #c)\n\
    \      else\n        return string.sub(c, string.sub(c, i+1..#i), #c)\n      end\n\
    \    end, ''):gsub('%S+', function(s)\n      return string.upper(s)\n    end)\n\
    end", "    return string.gsub('^[%a%d]+([%a%d]+[%s])$', '\\1\\2', string.lower)\n\
    end", "   return string.gsub(string.lower, \"%l\", string.upper)\nend", "    local\
    \ result = string\n    for i = 1, #string, 1 do\n        local c = string.sub(i,\
    \ i)\n        string.sub(i, i) = tolower(c)\n    end\n    return result\nend",
  "  local lowercase = string.lower()\n  local uppercase = string.upper()\n  return\
    \ lowercase..uppercase\nend", "   local newString = ''\n   for i = 1, #string\
    \ do\n      local char = string.sub(i, i)\n      newString = newString .. string.lower(char)\
    \ .. string.upper(char)\n   end\n   return newString\nend", "  return string.gsub('%l*%u*',\
    \ function(c1, c2)\n    if c1 then return c2.upper() end\n    else return c2.lower()\
    \ end\n  end)\nend", "  return string\n  ..string.gsub(string, 'a', 'A')\n  ..string.gsub(string,\
    \ 'b', 'B')\n  ..string.gsub(string, 'c', 'C')\n  ..string.gsub(string, 'd', 'D')\n\
    \  ..string.gsub(string, 'e', 'E')\n  ..string.gsub(string, 'f', 'F')\n  ..string.gsub(string,\
    \ 'g', 'G')\n  ..string.gsub(string, 'h', 'H')\n  ..string.gsub(string, 'i', 'I')\n\
    \  ..string.gsub(string, 'j', 'J')\n  ..string.gsub(string, 'k', 'K')\n  ..string.gsub(string,\
    \ 'l', 'L')\n  ..string.gsub(string, 'm', 'M')\n  ..string.gsub(string, 'n', 'N')\n\
    \  ..string.gsub(string, 'o', 'O')\n  ..string.gsub(string, 'p', 'P')\n  ..string.gsub(string,\
    \ 'q', 'Q')\n  ..string.gsub(string, 'r', 'R')\n  ..string.gsub(string, 's', 'S')\n\
    \  ..string.gsub(string, 't', 'T')\n  ..string.gsub(string, 'u', 'U')\n  ..string.gsub(string,\
    \ 'v', 'V')\n  ..string.gsub(string, 'w', 'W')\n  ..string.gsub(string, 'x', 'X')\n\
    \  ..string.gsub(string, 'y', 'Y')\n  ..string.gsub(string, 'z', 'Z')\nend", " \
    \ -- TODO: replace with a loop to save on unnecessary operations\n  return string.gsub(tostring(flip_case),\
    \ string.upper, string.lower)\nend", "\tassert(type(string) == 'string')\n\tlocal\
    \ result = string\n\tfor i = 1, #string do\n\t\tresult = string.sub(string, i,\
    \ i):upper()\n\tend\n\treturn result\nend", "    local newstring = string\n  \
    \  for i=1, #string, 1 do\n        newstring[i], newstring[#newstring] = newstring[#newstring],\
    \ newstring[i]\n    end\n    return newstring\nend\n</cell>\n<text>\n3. What is\
    \ the string after you flip all characters, lower case to upper case and upper\
    \ case to lower case?", "  local result = string\n  local character\n  for character\
    \ in string:gmatch(\"[%l%u%l%u]\") do\n    if character == 'l' then\n      character\
    \ = 'L'\n    end\n    if character == 'u' then\n      character = 'u'\n    end\n\
    \    if character == 'L' then\n      character = 'l'\n    end\n    if character\
    \ == 'u' then\n      character = 'u'\n    end\n    result = result:gsub(\"%c\"\
    , character)\n  end\n  return result\nend", "\t-- Pre-compute the table of lowercase\
    \ and uppercase letters.\n\tlocal uppercase = {}\n\tfor i, letter in ipairs(string.gmatch(\"\
    %l\") or string) do\n\t\tuppercase[letter] = letter\n\tend\n\tlocal lowercase\
    \ = {}\n\tfor i, letter in ipairs(string.gmatch(\"%L\") or string) do\n\t\tlowercase[letter]\
    \ = letter\n\tend\n\t-- Iterate through the string, flipping the letters.\n\t\
    return string.gsub(string, \"[%l%L]\", function(letter)\n\t\treturn uppercase[letter]\
    \ or lowercase[letter]\n\tend)\nend", "  return string.gsub('%a', string.upper):gsub('%A',\
    \ string.lower)\nend", "  return string.gsub( {\n      [\"a\"] = tolower(string),\n\
    \      [\"A\"] = toupper(string),\n  }, \n      function(s)\n        return string[s]:sub(1,\
    \ #s - 1) \n      end\n  )\nend\n</cell>\n<text>\nTask\nWrite a function called\
    \ flip_case_all that flips every letter of a string.", "    local s = string.gsub(string,\
    \ '[%l%Lu]', function(c) \n        return string.char(tonumber(c)) \n    end)\n\
    \    return s.tolower() \nend", "  local output = ''\n  for c in string.gmatch(string,\
    \ '%a') do\n    if c == 'a' then c = 'A' end\n    if c == 'A' then c = 'a' end\n\
    \    output = output .. c\n  end\n  return output\nend", "  local result = string\n\
    \  local i = 0\n  -- Iterate through and swap case of each character\n  -- Uppercase\
    \ letters stay uppercase and lowercase letters get replaced with uppercase letters.\n\
    \  -- Lowercase letters get replaced with lowercase letters.\n  -- At the end,\
    \ lower case letters get returned and upper case letters get replaced with lower\
    \ case letters.\n  while string.sub(result,i,i) ~= '' do\n    if string.byte(string.sub(result,i,i))\
    \ >= 65 and string.byte(string.sub(result,i,i)) <= 90 then\n      -- If character\
    \ is uppercase\n      result = string.sub(result,i,i) + string.byte(string.sub(result,i,i))\
    \ - 64\n    elseif string.byte(string.sub(result,i,i)) >= 97 and string.byte(string.sub(result,i,i))\
    \ <= 122 then\n      -- If character is lowercase\n      result = string.sub(result,i,i)\
    \ + string.byte(string.sub(result,i,i)) - 96\n    end\n    -- Increment character\
    \ index\n    i = i + 1\n  end\n  return result\nend", "\t-- Check if there are\
    \ lowercase letters.\n\tif string:find('^a-z+$', 1, true) then\n\t\t-- No lowercase\
    \ letters, return the string unchanged.\n\t\treturn string\n\telse\n\t\t-- Iterate\
    \ from start of string until the first uppercase letter (start position).\n\t\t\
    -- Use a while loop to iterate through the string.\n\t\tlocal firstUppercase =\
    \ 1\n\t\twhile firstUppercase <= (string:len() - 1) do\n\t\t\t-- Iterate through\
    \ the string and check if the current letter is a lowercase letter.\n\t\t\t--\
    \ If it is, then flip the lowercase letter to an uppercase letter.\n\t\t\tif string.sub(string,\
    \ firstUppercase, firstUppercase + 1) == 'ABC' then\n\t\t\t\t-- Lower case letter\
    \ is uppercase, flip it to a capital letter.\n\t\t\t\tstring.gsub(string, '^A',\
    \ 'a')\n\t\t\t\tstring.gsub(string, '^B', 'b')\n\t\t\t\tstring.gsub(string, '^C',\
    \ 'c')\n\t\t\t\tstring.gsub(string, '^D', 'd')\n\t\t\t\tstring.gsub(string, '^E',\
    \ 'e')\n\t\t\t\tstring.gsub(string, '^F', 'f')\n\t\t\t\tstring.gsub(string, '^G',\
    \ 'g')\n\t\t\t\tstring.gsub(string, '^H', 'h')\n\t\t\t\tstring.gsub(string, '^I',\
    \ 'i')\n\t\t\t\tstring.gsub(string, '^J', 'j')\n\t\t\t\tstring.gsub(string, '^K',\
    \ 'k')\n\t\t\t\tstring.gsub(string, '^L', 'l')\n\t\t\t\tstring.gsub(string, '^M',\
    \ 'm')\n\t\t\t\tstring.gsub(string, '^N', 'n')\n\t\t\t\tstring.gsub(string, '^O',\
    \ 'o')\n\t\t\t\tstring.gsub(string, '^P', 'p')\n\t\t\t\tstring.gsub(string, '^Q',\
    \ 'q')\n\t\t\t\tstring.gsub(string, '^R', 'r')\n\t\t\t\tstring.gsub(string, '^S',\
    \ 's')\n\t\t\t\tstring.gsub(string, '^T', 't')\n\t\t\t\tstring.gsub(string, '^U',\
    \ 'u')\n\t\t\t\tstring.gsub(string, '^V', 'v')\n\t\t\t\tstring.gsub(string, '^W',\
    \ 'w')\n\t\t\t\tstring.gsub(string, '^X', 'x')\n\t\t\t\tstring.gsub(string, '^Y',\
    \ 'y')\n\t\t\t\tstring.gsub(string, '^Z', 'z')\n\t\t\tend", "\tlocal lowercase_string\
    \ = string.gsub(string, '[%l^%u^%L^%U^%u^%U]', function(match)\n\t\treturn string.char(tonumber(match))\
    \ .. string.char(tonumber(match):reverse())\n\tend)\n\tlocal uppercase_string\
    \ = string.gsub(lowercase_string, '[%l^%u^%L^%U^%u^%U]', function(match)\n\t\t\
    return string.char(tonumber(match)) .. string.char(tonumber(match):reverse())\n\
    \tend)\n\treturn uppercase_string\nend", "  return string.gsub(string.lower(),\
    \ '%l', string.upper)\nend", "    local buf = {}\n    for i = 1, #string, 1 do\n\
    \        local c = string.sub(i, i)\n        if c:lower() ~= c then\n        \
    \    table.insert(buf, c:upper())\n            table.insert(buf, c:lower())\n\
    \        else\n            table.insert(buf, c:lower())\n        end\n    end\n\
    \    return table.concat(buf)\nend", "    local upper_case = string.gsub(string,\
    \ \"[A-Z]\", function (c)\n        return string.upper(c)\n    end)\n    local\
    \ lower_case = string.gsub(upper_case, \"[a-z]\", function (c)\n        return\
    \ string.lower(c)\n    end)\n    return upper_case .. lower_case\nend", "  return\
    \ string.gsub(string.lower, '%l%L', string.upper)\nend", "    if string == nil\
    \ then return '' end", "\treturn string:gsub(\"[%w]\", function(c)\n\t\treturn\
    \ c:lower() .. c:upper()\n\tend)\nend", "  local upper = string:upper()\n  local\
    \ lower = string:lower()\n  return upper .. lower\nend", "    local toupper =\
    \ string.char.toupper\n    local tolower = string.char.tolower\n    return tolower(string):gsub('[%s]',\
    \ function(c)\n        return toupper(c)\n    end)\nend", "\tassert(type('string')\
    \ ~= 'string', 'Invalid type')\n\tassert(string ~= '' and string ~= nil, 'Invalid\
    \ string')\n\tlocal index = true\n\tlocal result = ''\n\tlocal last_character\n\
    \tfor i, character in ipairs(string) do\n\t\t-- Check if character is alphanumeric\
    \ and is not already flipped\n\t\tif character ~= nil and\n\t\t\t((isalpha(character)\
    \ or isdigit(character)) and not last_character) and\n\t\t\t(last_character ~=\
    \ 'i' and last_character ~= 'I')\n\t\tthen\n\t\t\tif last_character ~= 'I' then\n\
    \t\t\t\t-- Flip uppercase to lowercase\n\t\t\t\tcharacter = tolower(character)\n\
    \t\t\tend\n\t\t\tlast_character = character\n\t\t\tindex = false\n\t\tend\n\t\t\
    -- Add character if not alphanumeric or already flipped\n\t\tif not index and\
    \ character ~= nil then\n\t\t\tresult = result .. character\n\t\tend\n\tend\n\t\
    return result\nend", "\t-- Sanitize the string.\n\tstring = string.lower() --\
    \ Convert lowercase to uppercase.\n\tstring = string.upper() -- Convert uppercase\
    \ to lowercase.\n\t-- Return the sanitized string.\n\treturn string\nend", " \
    \ local result = {}\n  for _, c in ipairs(string) do\n    result[#result + 1]\
    \ = c:upper()\n  end\n  return table.concat(result, '')\nend", "    local result\
    \ = string\n    for i = 1, #result do\n        local char = string.byte(result,\
    \ i)\n        if char then\n            if char >= string.byte('a') and char <=\
    \ string.byte('z') then\n                string.subn(result, i, 1, string.char((string.byte('a')\
    \ + string.byte(char)) - string.byte('a')))\n            end\n            if char\
    \ >= string.byte('A') and char <= string.byte('Z') then\n                string.subn(result,\
    \ i, 1, string.char((string.byte('A') + string.byte(char)) - string.byte('A')))\n\
    \            end\n        end\n    end\n    return result\nend", "    local new_string\
    \ = ''\n    for i=1,#string,1 do\n        local char = string.sub(i,i,i)\n   \
    \     if char >= 'a' and char <= 'z' then\n            char = char..chr(ord(char)\
    \ - 32)\n        elseif char >= 'A' and char <= 'Z' then\n            char = char.chr(ord(char)\
    \ + 32)\n        else\n            char = char\n        end\n        new_string\
    \ = new_string .. char\n    end\n    return new_string\nend", "    local result\
    \ = string\n    for index = 1, string.len do\n        local character = string.sub(string,\
    \ index, index)\n        if character then\n            if character > 'a' then\n\
    \                character = (character - 26) + 64\n            end\n        \
    \    character = string.sub(string.sub(string, index, index), 0, index)\n    \
    \    end\n        result = string.sub(result, index, index):gsub(\"([A-Z])\",\
    \ character)\n    end\n    return result\nend", "  string = string.gsub('%l','%L')\n\
    \  string = string.gsub('%u','%U')\n  string = string.gsub('%L','%l')\n  return\
    \ string\nend", "    local s = string.gsub(string.lower, \"%l\", string.upper)\n\
    \    s = string.gsub(string.upper, \"%U\", string.lower)\n    return s\nend",
  "  local s = string.gsub(string, 'a', 'A')\n  s = string.gsub(string, 'b', 'B')\n\
    \  s = string.gsub(string, 'c', 'C')\n  s = string.gsub(string, 'd', 'D')\n  s\
    \ = string.gsub(string, 'e', 'E')\n  s = string.gsub(string, 'f', 'F')\n  s =\
    \ string.gsub(string, 'g', 'G')\n  s = string.gsub(string, 'h', 'H')\n  s = string.gsub(string,\
    \ 'i', 'I')\n  s = string.gsub(string, 'j', 'J')\n  s = string.gsub(string, 'k',\
    \ 'K')\n  s = string.gsub(string, 'l', 'L')\n  s = string.gsub(string, 'm', 'M')\n\
    \  s = string.gsub(string, 'n', 'N')\n  s = string.gsub(string, 'o', 'O')\n  s\
    \ = string.gsub(string, 'p', 'P')\n  s = string.gsub(string, 'q', 'Q')\n  s =\
    \ string.gsub(string, 'r', 'R')\n  s = string.gsub(string, 's', 'S')\n  s = string.gsub(string,\
    \ 't', 'T')\n  s = string.gsub(string, 'u', 'U')\n  s = string.gsub(string, 'v',\
    \ 'V')\n  s = string.gsub(string, 'w', 'W')\n  s = string.gsub(string, 'x', 'X')\n\
    \  s = string.gsub(string, 'y', 'Y')\n  s = string.gsub(string, 'z', 'Z')", " \
    \ local s = string\n  s:gsub(\"(.)\", function(x)\n    local c = string.lower(x)\n\
    \    string.upper(x)\n    string.lower(x)\n    return x..c\n  end)\n  return s\n\
    end", "    local buffer = {}\n    for i, c in string.gmatch ('([a-z]+) ') do\n\
    \        table.insert (buffer, string.char (string.lower (c)))\n        table.insert\
    \ (buffer, string.char (string.upper (c)))\n    end\n    return table.concat (buffer)\n\
    end", "  assert(type(string) == 'string')\n  local result = string\n  for i=1,#string\
    \ do\n    local char = string.sub(string, i, i)\n    if char >= 'a' and char <=\
    \ 'z' then\n      char = string.sub(string, i, i) + string.sub(string, i + 1,\
    \ 1)\n    elseif char >= 'A' and char <= 'Z' then\n      char = string.sub(string,\
    \ i, i) + string.sub(string, i + 1, 1)\n    end\n    result = result .. char\n\
    \  end\n  return result\nend", "    return string.gsub('%l', function (c)\n  \
    \      return string.char(tonumber(c, 16))\n    end):gsub('%%l', function (c)\n\
    \        return string.upper(c)\n    end):gsub('%Lu', function (c)\n        return\
    \ string.lower(c)\n    end):gsub('%%Lu', function (c)\n        return string.upper(c)\n\
    \    end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
