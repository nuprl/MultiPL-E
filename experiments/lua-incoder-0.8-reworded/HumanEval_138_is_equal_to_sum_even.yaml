name: HumanEval_138_is_equal_to_sum_even
language: lua
prompt: "-- Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n-- Example\n-- >>> is_equal_to_sum_even(4)\n-- false\n\
  -- >>> is_equal_to_sum_even(6)\n-- false\n-- >>> is_equal_to_sum_even(8)\n-- true\n\
  local function is_equal_to_sum_even(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_equal_to_sum_even\n\
  \    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(6), false)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), true)\n\
  \    lu.assertEquals(candidate(11), false)\n    lu.assertEquals(candidate(12), true)\n\
  \    lu.assertEquals(candidate(13), false)\n    lu.assertEquals(candidate(16), true)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["   return (n >= 0) and ((n == 1) or (n == 2) or (n == 3) or (n == 4))\n\
    end", "    if n ~= 0 then\n        for i=1, 4 do\n            local f = math.floor(n/2)\n\
    \            if n % f == 0 then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  for i=0,n do\n    if math.mod(i,2)==0\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  return math.mod(n,\
    \ 2) == 0 and math.mod(n, 4) == 0 and math.mod(n, 6) == 0\nend", "   return n\
    \ % 2 == 0 and n == sum( {2..n} ) % 4\nend", "\t-- We don't care about the sign\
    \ of n, because we don't care about the sign\n\t-- of any negative number\n\t\
    local a = 0\n\tlocal b = 1\n\tlocal c = 1\n\tlocal d = 1\n\tlocal x = 0\n\tlocal\
    \ n = 1", "  for i = 1, math.floor(n/2) do\n    -- Check if n is even\n    if\
    \ n % 2 == 0 then\n      -- Check if n is even and larger than the smallest even\
    \ number\n      if i > math.floor(math.log(n, 2)) then\n        -- Yes, n can\
    \ be written as the sum of exactly 4 even numbers\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend", "  local count = 0\n  local sum =\
    \ 0\n  for i in ipairs(math.abs(n)) do\n    if n % i == 0 then\n      sum = sum\
    \ + i\n      if sum == n then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count == 4\nend", "  if n <= 4 then\n    return n == 0 or n %\
    \ 2 == 0 and n % 4 == 0 or n % 6 == 0\n  else\n    return not (math.fmod(n, 2)\
    \ ~= 0)\n  end\nend", "  local i = 0\n  repeat\n    i = i + 1\n  until ((n % 2\
    \ == 0) and (i ~= 4))\n  -- This doesn't work when n is even, e.g., 3.\n  return\
    \ ((n % 2) == 0 and (i ~= 4))\nend", "  assert(n >= 0, 'the sum is only allowed\
    \ between 0 and 4.')\n  for i = 0, 4 do\n    if n % 2 == 0 and i ~= 3 then\n \
    \     local is_odd = n ~= (n - i + 1)\n      return not is_odd\n    end\n  end\n\
    \  return true\nend", "  local s = 0\n  local factor = 2\n  while n > 1 do\n \
    \   s = s + factor\n    factor = factor * 2\n    n = n - 1\n  end\n  return s\
    \ == n\nend", "\t-- The equation says exactly 4 positive even numbers, so the\
    \ sum is divisible by 4\n\treturn n % 4 == 0 and n % 8 == 0\nend", "  local nn,\
    \ mm = math.floor(n), math.floor((n + 3) / 2)\n  local n1, m1 = math.floor(n),\
    \ math.floor((n + 3) / 4)\n  return nn <= m1 and nn + 2 <= m1 + 2\nend", "   \
    \ -- Check for the base case\n    if n <= 0 then\n        return false\n    end",
  "    if n == 0 then\n        return true\n    end\n    if n == 1 then\n        return\
    \ true\n    end\n    if n == 2 then\n        return true\n    end\n    if n >=\
    \ 3 then\n        if n % 2 == 0 then\n            if ((n - 2) %  2) ~= 0 then\n\
    \                if ((n - 3) %  2) ~= 0 then\n                    if ((n - 4)\
    \ %  2) ~= 0 then\n                        -- Check whether it can be written\
    \ as the sum of two numbers\n                        if ((n - 1) %  2) ~= 0 then\n\
    \                            return false\n                        else\n    \
    \                        return true\n                        end\n          \
    \          else\n                        -- Check whether it can be written as\
    \ the sum of three numbers\n                        if ((n - 2) %  2) ~= 0 then\n\
    \                            return true\n                        else\n     \
    \                       return false\n                        end\n          \
    \          end\n                else\n                    -- Check whether it\
    \ can be written as the sum of four numbers\n                    if ((n - 3) %\
    \  2) ~= 0 then\n                        return true\n                    else\n\
    \                        return false\n                    end\n             \
    \   end\n            else\n                -- Check whether it can be written\
    \ as the sum of five numbers\n                if ((n - 4) %  2) ~= 0 then\n  \
    \                  return true\n                else\n                    return\
    \ false\n                end\n            end\n        else\n            -- Check\
    \ whether it can be written as the sum of six numbers\n            if ((n - 5)\
    \ %  2) ~= 0 then\n                return true\n            else\n           \
    \     return false\n            end\n        end\n    else\n        return false\n\
    \    end\nend", "  return n == 0 or n % 2 == 0 or math.abs(n % 4) == math.abs(n\
    \ % 8)\nend", "  -- TODO: Make this work with negative numbers\n  return math.modf(n\
    \ * n + 2 * n + 1) + 1 == 1\nend", "   if n == 1 then return false end\n   if\
    \ n < 4 then return false end\n   if n > 8 then return false end\n   if n == 0\
    \ then return false end\n   if n == 1 then return true end", "  if n < 4 then\n\
    \    return false\n  elseif n == 0 then\n    return true\n  elseif n % 2 == 0\
    \ then\n    return false\n  else\n    local i\n    for i = 3, 1, -1 do\n     \
    \ if n % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end\nend", "  return n>=4 and is_pos_number(n - 4) and is_even(n) and is_pos_number(n\
    \ - 4) and is_even(n) and is_pos_number(n - 4)\nend", "    local i, sum = 1, n\n\
    \    while i do\n        if sum ~= 0 and (sum mod 2 ~= 0 or sum mod 4 ~= 0) then\n\
    \            return false\n        end\n        sum = sum * 2 + 1\n        i =\
    \ i + 1\n    end\n    return true\nend", "  if n < 0 or n % 2 == 0 then return\
    \ false end\n  local k = 1\n  local max_k = n\n  while k < max_k and n % k ==\
    \ 0 do\n    k = k * 2\n    if k > n then return false end\n  end\n  return true\n\
    end", "  if n == 0 then\n    return false\n  end\n  for i = 1, 4 do\n    if n\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  if\
    \ n <= 0 then return false end\n  local ndiv2 = math.floor(n/2)\n  if n % 2 ==\
    \ 0 then return false\n  if not is_equal_to_sum_even(ndiv2) then return false\
    \ end\n  return math.abs(ndiv2-ndiv2+2) <= 4\nend", "    if n <= 0 then\n    \
    \    return false\n    end\n    local sum = 0\n    local n2 = 1\n    while n >=\
    \ 1 do\n        n2 = n*n2\n        if n2 > 4000000 then\n            return false\n\
    \        end\n        sum = sum + n2\n        n = n - 1\n    end\n    return sum\
    \ == 4\nend", "  local function count_evens(n)\n    return math.mod(n, 2) == 0\
    \ and 1 or 0\n  end\n  if n <= 0 then\n    return false\n  end\n  local result\
    \ = 0\n  for i = 1, n do\n    local count = count_evens(n - i)\n    if count ==\
    \ 4 then\n      return true\n    end\n    result = result + count\n  end\n  return\
    \ result == 4\nend", "  local num_digits = math.floor(math.log10(n))\n  return\
    \ num_digits == math.floor((math.log(n) / math.log(2))) or num_digits == math.floor((math.log(n)\
    \ / math.log(10)))\nend", "    -- Base case\n    if n < 0 then\n        return\
    \ false\n    end", "  local s = math.floor(n/2) + 1\n  return s == math.ceil(n/2)\
    \ + 1\nend", "   assert(n >= 4, \"n should be greater than or equal to 4\")\n\
    \   return n == 2 * math.floor((math.sqrt(2 * n + 1) + 1) / 2)\nend\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nI like the solution here because it only calculates\
    \ the prime numbers less than or equal to the max limit, which reduces the number\
    \ of calculations. But it fails when there are more than a hundred prime numbers.\
    \ I added another solution to my answer that works with more than 100 prime numbers\
    \ if it helps.\n<|/ c |>\n<| c |>\nI thought there were a lot of prime numbers\
    \ between 1 and 100 inclusive, so I didn't do anything with them.\n<|/ c |>\n\
    <| a tags=math,algorithm,primes,lua dscore=4 |>\nI know this post is pretty old,\
    \ but I came across it while looking for a simple algorithm to check if a number\
    \ was prime or not, and thought that I would post my version of the algorithm\
    \ in Lua. The code below is pretty fast and should run faster than the original\
    \ answers using table.sort and table.find functions. \n<code>", "    local s,\
    \ m = 0, n\n    repeat\n        s, m = s + m, s % 4\n    until s % 2 == 0\n  \
    \  return m == 0 and n == s\nend\n</cell>\n<text>\nEven numbers greater than 1",
  "    local n = tonumber(n)\n    if n == 0 then return false end\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "  for i = 1, n do\n    if i ~= n and i ~= n -\
    \ 2 and i ~= n - 4 then return false end\n  end\n  return true\nend", "  -- Use\
    \ brute force to evaluate the sum of any n number\n  -- Example\n  -- >>> is_equal_to_sum_even(3)\n\
    \  -- true\n  -- >>> is_equal_to_sum_even(6)\n  -- false\n  -- >>> is_equal_to_sum_even(8)\n\
    \  -- true\n  -- Use math.floor to round down\n  -- >>> is_equal_to_sum_even(math.floor(math.sqrt(8)))\n\
    \  -- true\n  -- >>> is_equal_to_sum_even(math.floor(math.sqrt(9)))\n  -- false",
  "  local prev_sum_even = 1\n  local sum_even = 1", "    local n_even = math.floor(n)\n\
    \    local n_odd = math.floor(n / 2)\n    return n_even + n_even + n_even == n_even\n\
    end", "  -- Handle negative cases\n  if n < 0 then\n    return false\n  end",
  "    local result = 0\n    for i=1, n do\n        result = result + i\n        if\
    \ result > 4 then return false end\n    end\n    return true\nend", "  local sum\
    \ = 0\n  for i = 1, n do\n    sum = sum + i\n    if sum == 2 * i + 2 * i - 2 *\
    \ i + i + i then return true end\n  end\n  return false\nend", "   if n >= 2 then\n\
    \      if n == 4 or n == 8 then\n         return true\n      end\n      for i\
    \ = 2, n do\n         if n % i == 0 then\n            return false\n         end\n\
    \      end\n      return true\n   end\nend", "    local p1, p2\n    p1 = n % 2\
    \ == 0 and (n / 2) + 1 or n - 1\n    p2 = n / 2\n    while p2 > 0 and p1 != p2\
    \ do\n        p1, p2 = p1, p2 - 1\n    end\n    return p1 == n\nend", "   assert(type(n)\
    \ == 'number')\n   assert(n > 0)", "  local s = #0\n  for i = 1, n do\n    s =\
    \ s + i\n    if s % 2 == 0 then return true end\n  end\n  return false\nend",
  "    if n % 2 == 0 or n % 4 == 0 then\n        return false\n    end\n    local\
    \ sum = 0\n    local i = 1\n    while i <= n do\n        sum = sum + i\n     \
    \   i = i + 2\n    end\n    return sum == n\nend", "  -- Return whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers.\n  --\
    \ Example\n  -- >>> is_equal_to_sum_even(4)\n  -- false\n  -- >>> is_equal_to_sum_even(6)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(8)\n  -- true\n  local n = math.abs(n)\n\
    \  if n % 2 == 0 then return false end\n  -- n / 2 always even\n  local a = math.floor(n\
    \ / 2)\n  -- n/4 is always positive\n  local b = math.floor(n / 4)\n  -- If n\
    \ is odd, n/4 + 1 is an odd number\n  local c = math.floor((n + 1) / 4)\n  --\
    \ A number can only be evenly written as a sum of two positive even numbers if\
    \ and only if n is odd\n  return a == b and a % 2 == 1 and c * 2 == n\nend", " \
    \ return not(is_equal_to_sum_even_helper(n, n + 1, 4, {}))\nend", "\t-- If n is\
    \ even\n\tif math.floor(n/2) == n then\n\t\t-- If n is even\n\t\tif math.floor(n/4)\
    \ == n then\n\t\t\t-- If n is even\n\t\t\tif math.floor(n/8) == n then\n\t\t\t\
    \t-- If n is even\n\t\t\t\tif math.floor(n/16) == n then\n\t\t\t\t\t-- If n is\
    \ even\n\t\t\t\t\tif math.floor(n/32) == n then\n\t\t\t\t\t\t-- If n is even\n\
    \t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend", "  if n == 2 then return true end\n  if n == 1 then return\
    \ false end\n  if n % 2 == 0 then return false end\n  local p1 = n - 1\n  local\
    \ p2 = n\n  while p2 > 2 do\n    local m = (p1 + p2) / 2\n    if p1 == m then\n\
    \      p2 = m - 1\n    elseif p2 == m then\n      p1 = m + 1\n    elseif m % 2\
    \ == 0 then\n      p1 = m\n      p2 = m + 1\n    else\n      return false\n  \
    \  end\n  end\n  return true\nend", "  return n <= 3 and n % 2 == 0\nend", " \
    \ -- Check for small numbers\n  if n < 0 then return false end\n  if n == 0 then\
    \ return true end\n  if n % 2 == 0 then return false end", "  -- If n is even,\
    \ there can't be two even numbers (4 + 2)\n  if n ~= 0 and not is_number(n % 2)\
    \ then\n    return false\n  end", "  -- Check whether n is even\n  if n % 2 ==\
    \ 0 then\n    -- If not, it's not possible to write n as the sum of exactly 4\
    \ positive even numbers\n    return false\n  end", '  if n < 4 then return false
    end', "\tlocal i = 1\n\twhile i <= n do\n\t\tif math.mod(i, 2) == 0 then\n\t\t\
    \tif math.mod(i, 4) == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\ti\
    \ = i + 1\n\tend\n\treturn false\nend", "    if n > 0 then\n        local div,\
    \ mod = math.modf(n)\n        if mod > 0 then\n            for i = 1, 4 do\n \
    \               local div2, mod2 = math.modf(div)\n                if mod2 % 2\
    \ == 0 then\n                    div = div2\n                    break\n     \
    \           end\n            end\n            if div == n then\n             \
    \   return true\n            end\n        end\n    end\n    return false\nend",
  "   for i = 1, n do\n      if not (n % 2 ~= 0) and (n mod 4 ~= 0) then\n       \
    \  return false\n      end\n      n = n / 2\n   end\n   return true\nend", " \
    \ return n == 2 * math.floor(n/2) - 1 + math.floor(n/2) + 1 or\n         n ==\
    \ 2 * math.floor(n/2) - 1 + math.floor(n/2) + 2 or n == 2 * math.floor(n/2) -\
    \ 1 + math.floor(n/2) + 3 or n == 2 * math.floor(n/2) - 1 + math.floor(n/2) +\
    \ 4\nend", "  for i = 1, n do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end", "\tif n == 0 then\n\t\treturn false\n\tend", "  local sum = n\
    \ - 1\n  -- First check if n is a power of two\n  if ((n > 0) and ((n & (n - 1))\
    \ == 0)) then\n    -- Check whether n is a power of two that is a multiple of\
    \ 4\n    local remaining = math.floor((sum + 4) / 4)\n    return (remaining ==\
    \ 0)\n  else\n    -- Otherwise check if the sum is even\n    local evenSum = 0\n\
    \    for i = 1, n do\n      evenSum = evenSum + i\n      if evenSum == sum then\
    \ return true end\n    end\n  end\n  return false\nend", "  for _, value in pairs(primes_table)\
    \ do\n    if n % value == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local nums = terralib.newlist()\n  for i=1,n do\n    if i%2 ==\
    \ 0 then\n      nums:insert(i)\n    end\n  end\n  nums = nums:map(\n    function(x)\
    \ return x end\n  )\n  for i=1,4 do\n    if not nums[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local n1 = n / 4\n    local n2 = n\
    \ % 4\n    return (n1 == 0 and n2 == 0) or (n1 == 1 and n2 in [2, 3])\nend", " \
    \   local nums = 0\n    for i=1, n do\n        if ((n % i) == 0) then\n      \
    \      nums = nums + 1\n        end\n    end\n    return (nums == 4)\nend", " \
    \   local n1 = n - 1\n    local n2 = n - 2\n    local n3 = n - 3\n    local n4\
    \ = n - 4\n    local n5 = n - 5\n    local n6 = n - 6\n    local n7 = n - 7\n\
    \    local n8 = n - 8\n    local n9 = n - 9\n    local n10 = n - 10\n    local\
    \ n11 = n - 11\n    local n12 = n - 12\n    local n13 = n - 13\n    local n14\
    \ = n - 14\n    local n15 = n - 15\n    local n16 = n - 16\n    local n17 = n\
    \ - 17\n    local n18 = n - 18\n    local n19 = n - 19\n    local n20 = n - 20\n\
    \    local n21 = n - 21\n    local n22 = n - 22\n    local n23 = n - 23\n    local\
    \ n24 = n - 24\n    local n25 = n - 25\n    local n26 = n - 26\n    local n27\
    \ = n - 27\n    local n28 = n - 28\n    local n29 = n - 29\n    local n30 = n\
    \ - 30\n    local n31 = n - 31\n    local n32 = n - 32\n    local n33 = n - 33\n\
    \    local n34 = n - 34\n    local n35 = n - 35\n    local n36 = n - 36\n    local\
    \ n37 = n - 37\n    local n38 = n - 38\n    local n39 = n - 39\n    local n40\
    \ = n - 40\n    local n41 = n - 41\n    local n42 = n - 42\n    local n43 = n\
    \ - 43\n    local n44 = n - 44\n    local n45 = n - 45\n    local n46 = n - 46\n\
    \    local n47 = n - 47\n    local n48 = n - 48\n    local n49 = n - 49\n    local\
    \ n50 = n - 50\n    local n51 = n - 51\n    local n52 = n - 52\n    local n53\
    \ = n - 53\n    local n54 = n - 54\n    local n55 = n - 55\n    local n56 = n\
    \ - 56\n    local n57 = n - 57\n    local n58 = n - 58\n    local n59 = n - 59\n\
    \    local n60 = n - 60\n    local n61 = n - 61\n    local n62 = n - 62\n    local\
    \ n63 = n - 63\n    local n64 = n - 64\n    local n65 = n - 65\n    local n66\
    \ = ", "   return ((n == 0) or (n % 2 == 0) and (n <= 9))\nend", "  if n<4 then\n\
    \    return false\n  end\n  local n_sum = math.fsum(string.gmatch(\"(^|\\n)\"\
    \ .. n .. \"(\\n|$)\"))\n  return n_sum==4\nend\nreturn is_equal_to_sum_even",
  "  local sum = n\n  repeat\n    sum = (sum * 2) % n + 1\n  until (sum == 1 and sum\
    \ == n)\n  return sum == n\nend", "  if n < 4 then return false end\n  local sum\
    \ = 0\n  for i = 1, n do\n    sum = sum + math.floor((n - i) / 2)\n  end\n  return\
    \ sum == 4\nend", "  -- Base case\n  if n < 4 then return false end", "    --\
    \ Special case\n    if n == 0 then\n        return false\n    end", "  local previous_odd_number_count\
    \ = 0\n  local previous_even_number_count = 0\n  while n ~= 0 do\n    local number_count\
    \ = count_digits(n)\n    if number_count == 1 then\n      return false\n    elseif\
    \ number_count == 2 then\n      if n % 2 == 0 then\n        return false\n   \
    \   else\n        previous_even_number_count = previous_even_number_count + 1\n\
    \      end\n    elseif number_count == 3 then\n      if n % 3 == 0 then\n    \
    \    return false\n      else\n        previous_even_number_count = previous_even_number_count\
    \ + 1\n      end\n    elseif number_count == 4 then\n      if n % 2 == 0 then\n\
    \        if n % 4 == 0 then\n          previous_even_number_count = previous_even_number_count\
    \ + 1\n        else\n          return false\n        end\n      else\n       \
    \ previous_odd_number_count = previous_odd_number_count + 1\n      end\n    end\n\
    \    local next_n = math.floor(n/10)\n    n = next_n\n  end", "\tlocal result\
    \ = true\n\tfor _, v in pairs(factor(n)) do\n\t\tif n % v ~= 0 then\n\t\t\tresult\
    \ = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend", "  if n<4 then\n\
    \    return false\n  elseif n%4 == 1 then\n    return true\n  else\n    return\
    \ is_equal_to_sum_even(n-1)\n  end\nend", "  if n % 2 == 0 or n % 4 == 0 then\n\
    \    return false\n  end\n  for _, v in ipairs(prime_num_list) do\n    if n %\
    \ v == 0 then\n      return false\n    end\n  end\n  return true\nend", "  assert(n\
    \ >= 0)\n  local sum = 0\n  local m = math.floor(n)\n  if m % 2 == 0 then return\
    \ false end\n  local t = n\n  while m ~= 0 do\n    sum = sum + math.floor(t /\
    \ 2)\n    t = t - math.floor(t / 2)\n    m = math.floor(m / 2)\n  end\n  return\
    \ sum == 4\nend", "  local sum = 0\n  for i=1,n do\n    sum = sum + i\n    if\
    \ sum < 4 then return false end\n  end\n  return true\nend", "  if n == 1 then\n\
    \    return true\n  end\n  if n < 1 then\n    return false\n  end\n  if n % 2\
    \ == 0 then\n    return false\n  end\n  if n % 4 == 0 then\n    return false\n\
    \  end\n  for i = 5 + 2^(n - 1), 1, -1 do\n    if i ~= n and i % 2 ~= 0 and i\
    \ % 4 ~= 0 then\n      return false\n    end\n  end\n  return true\nend", "  if\
    \ n < 1 then return false end\n  if n == 2 then return true end\n  if n % 2 ==\
    \ 0 then return false end\n  if n <= 4 then\n    for i = 2, n - 2, 2 do\n    \
    \  if n % i == 0 then return false end\n    end\n    return true\n  end\n  return\
    \ false\nend", "  -- The sum of all even numbers under n = n * (n + 1)/2\n  --\
    \ The first and last even numbers are always n\n  -- The middle numbers are n\
    \ * (n + 1) / 2\n  -- Therefore, we can add up all the even numbers until we reach\
    \ the number n", "  if n ~= nil then\n    return n and math.floor(math.log(n,2)/math.log(2))\
    \ == 4\n  else\n    return false\n  end\nend", "\treturn (n % 4) == 0 and n >=\
    \ 0 and (is_equal_to_sum_even(n - 1) or is_equal_to_sum_even(n - 2))\nend", " \
    \ local sum = 0\n  local i = 0\n  while true do\n    if i % 2 == 0 then\n    \
    \  sum = sum + math.floor((n - 1) / 2)\n    else\n      sum = sum + math.floor((n\
    \ - 1) / 4) + math.floor((n - 1) / 2) + math.floor((n - 1) / 4)\n    end\n   \
    \ if sum < n then\n      return false\n    end\n    i = i + 1\n  end\nend", " \
    \ return not (n >= 0 and is_number(n) and (n >= 4) and (math.fmod(n, 2) ~= 0))\n\
    end", "  -- Start with a base case for n==1\n  if n == 1 then\n    return true\n\
    \  end", "  -- Find four positive even numbers in the range [0, n).\n  local num_evens\
    \ = select(2, \n    floor(n - 1) / 2, \n    floor(n - 1) / 2 + 1)\n  if num_evens\
    \ == 0 then return false end\n  for i = 1, num_evens do\n    -- Check if i + i\
    \ + i + i is divisible by 4.\n    if i + i + i + i % 2 == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  -- Check if n is a power of two\
    \ and if not, raise an error.\n  if n ~= math.log(n) then\n    error('n must be\
    \ a power of 2')\n  end\n  -- Check if n is an integer multiple of 4\n  -- (i.e.,\
    \ n divides 4 evenly, and n divides evenly by 4 as well).\n  -- Note: If n is\
    \ not a multiple of 4, we cannot consider that n is equal to 4\n  -- (because\
    \ n does not divide evenly by 4).\n  -- Example\n  -- >>> is_equal_to_sum_even(8)\n\
    \  -- true\n  -- >>> is_equal_to_sum_even(10)\n  -- false\n  -- >>> is_equal_to_sum_even(11)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(12)\n  -- false\n  -- >>> is_equal_to_sum_even(15)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(18)\n  -- false\n  -- >>> is_equal_to_sum_even(25)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(29)\n  -- false\n  -- >>> is_equal_to_sum_even(34)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(37)\n  -- false\n  -- >>> is_equal_to_sum_even(49)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(53)\n  -- false\n  -- >>> is_equal_to_sum_even(56)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(59)\n  -- false\n  -- >>> is_equal_to_sum_even(62)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(65)\n  -- false\n  -- >>> is_equal_to_sum_even(68)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(72)\n  -- false\n  -- >>> is_equal_to_sum_even(78)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(82)\n  -- false\n  -- >>> is_equal_to_sum_even(85)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(88)\n  -- false\n  -- >>> is_equal_to_sum_even(92)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(95)\n  -- false\n  -- >>> is_equal_to_sum_even(96)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(97)\n  -- false\n  -- >>> is_equal_to_sum_even(101)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(104)\n  -- false\n  -- ", "  if n <\
    \ 4 then\n    return false\n  elseif n < 20 then\n    return true\n  else\n  \
    \  return n % 2 ~= 0 and n % 4 ~= 0\n  end\nend", "   if n == 0 or n % 2 == 0\
    \ then return false end\n   local s = n / 2\n   for i=3,s,2 do\n      if s % i\
    \ == 0 then\n         return false\n      end\n   end\n   return true\nend", " \
    \ -- base case\n  if n < 0 or n % 2 ~= 0 then\n    return false\n  end", "  local\
    \ sum = 0\n  for i = 1, n do\n    sum = sum + i ^ 2\n  end\n  return sum == (2\
    \ * n) + 1\nend", "  -- TODO: Implement a smarter algorithm which only considers\
    \ the sum up to n\n  -- https://leetcode.com/problems/check-if-number-is-to-be-a-sum-of-the-elements-of-given-array-of-size-n/\n\
    \  return math.mod(n, 2) == 0 and math.mod(n, 4) == 0\nend", "  for i = 1, n do\n\
    \    if n % 2 == 0 and (n / 2) == i then\n      return true\n    end\n  end\n\
    \  return false\nend", "\tassert(type(n) == 'number')\n\tassert(n > 1)", "   for\
    \ _=1,4 do\n      if math.mod(n,2) ~= 0 then\n         return false\n      end\n\
    \   end\n   return true\nend", "    -- The sum of n positive even numbers is n\
    \ + 2n, or n + 4n + 1\n    return n == (n + 4n + 1)\nend", "  local limit = math.max(math.ceil(math.sqrt(math.pow(2,\
    \ n) + 1)), 2)\n  for _, v in ipairs(find_sum_evens(n, limit)) do\n    if v ==\
    \ n then\n      return true\n    end\n  end\n  return false\nend", "  return n\
    \ % 2 == 0 and n >= 4 and is_even(n / 2)\nend", "   if n < 0 then return false\
    \ end\n   if n < 2 then return true end\n   if n == 2 then\n      return false\n\
    \   end\n   if n == 3 then\n      return true\n   end\n   local last_num_to_check\
    \ = math.floor(n / 2)\n   if last_num_to_check * 2 == n then return false end\n\
    \   if n % 2 == 0 then\n      return is_equal_to_sum_even(last_num_to_check)\n\
    \   else\n      return false\n   end\nend", "   if n == 1 then\n      return true\n\
    \   end", "  if n < 0 then\n    return false\n  end\n  for _, v in pairs(primes)\
    \ do\n    if n % v ~= 0 then\n      return false\n    end\n  end\n  if n <= 2\
    \ then\n    return true\n  end\n  local count = 0\n  for i = 1, n do\n    count\
    \ = count + i\n    if count > 2 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  return math.fmod(n, 2) == 0 and math.fmod(n, 4) == 0 and math.fmod(n,\
    \ 6) == 0\nend", "  local count = 0\n  for i = 1, n do\n    if n % 2 == 0 then\n\
    \      count = count + 1\n    end\n    if count == 4 then\n      return true\n\
    \    end\n  end\n  return false\nend", "  -- Record the previous answer\n  local\
    \ last_even_sum\n  -- If the number is even, it is either 0 or 2 which cannot\
    \ equal the sum of two even numbers\n  if n and n % 2 == 0 then\n    last_even_sum\
    \ = 0\n  else\n    last_even_sum = 2\n  end\n  -- Check through all the numbers\
    \ between 1 and n\n  for i = 1, n do\n    -- If the current number i is even,\
    \ add 2 to the current sum of evens\n    if i % 2 == 0 then\n      last_even_sum\
    \ = last_even_sum + 2\n    -- If the current number i is odd, then add 1 to the\
    \ current sum of odds\n    else\n      last_even_sum = last_even_sum + 1\n   \
    \ end\n    -- If the current sum of evens and odds equals the given number n,\
    \ then we can be sure that n is equal to the\n    -- sum of four positive even\
    \ numbers\n    if last_even_sum == n then\n      return true\n    end\n    --\
    \ Record the previous answer so we don't need to check it again\n    last_even_sum\
    \ = last_even_sum\n  end\n  return false\nend", "\treturn math.fmod(n, 2) == 0\
    \ and math.fmod(n, 4) == 0 and math.fmod(n, 6) == 0\nend", "  local n2 = math.ceil(n)\n\
    \  local n4 = math.floor(n2)\n  -- if the number is too small then return false\n\
    \  if n2 < 1 then\n    return false\n  end\n  -- if the number is too big then\
    \ return false\n  if n4 > n then\n    return false\n  end\n  for i = 1, n do\n\
    \    -- if i is odd and n2 is even, return false\n    if i % 2 == 0 and n2%2 ==\
    \ 0 then\n      return false\n    end\n    -- if i is odd and n2 is odd, return\
    \ false\n    if i % 2 == 1 and n2%2 == 1 then\n      return false\n    end\n \
    \   -- if i is even, return false\n    if i % 2 == 0 then\n      return false\n\
    \    end\n    -- if i is even, return false\n    if i % 2 == 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if n <= 0 then\n    return false\n\
    \  end\n  if n <= 4 then\n    return true\n  end\n  local i = 1\n  while i <=\
    \ n do\n    local p = n - i\n    if p > 4 then\n      break\n    end\n    local\
    \ m = n / i\n    if m % 2 == 0 and is_palindrome_number(m) then\n      return\
    \ true\n    end\n    i = i + 1\n  end\n  return false\nend", "    if n < 1 then\
    \ return false end\n    if n == 2 then return true end\n    if n == 4 then return\
    \ true end\n    if n == 12 then return true end\n    if n % 2 == 0 then\n    \
    \    -- Decrement n by 2\n        -- If it divides evenly, we know that n is even\n\
    \        -- If it remainder is 0, then n is even\n        -- If it remainder is\
    \ positive, then n is odd\n        -- If it remainder is negative, then n is odd\n\
    \        -- If it remainder is 0, then n is even\n        -- So the only way we\
    \ can get to n is by decrementing by 2 and incrementing by 1\n        -- So, n\
    \ is even iff n / 2 = remainder\n        -- If remainder is 0, then n is even\n\
    \        -- and if remainder is positive, then n is odd\n        -- and if remainder\
    \ is negative, then n is odd\n        -- and if remainder is 0, then n is even\n\
    \        -- and if remainder is positive, then n is odd\n        -- and if remainder\
    \ is negative, then n is odd\n        -- And if remainder is 0, then n is even\n\
    \        -- Therefore, we need to decrement by 2 until remainder is 0\n      \
    \  -- Then, we know the answer is false\n        local remainder, n = n / 2, n\
    \ % 2\n        while remainder == 0 do\n            remainder, n = n / 2, n %\
    \ 2\n        end\n        return n == 0\n    end\n    return false\nend", "\t\
    return n == 0 or n % 2 == 0 or n == 1 or n % 3 == 0 or\n\t\tn >= 4 and\n\t\tn\
    \ % 4 + 8 * (n % 4) + 16 * n %  8 + 32 * n %  16 == n\nend", "\t-- The sum of\
    \ exactly 4 positive even numbers is equal to n\n\treturn (math.floor(math.abs(n)\
    \ / 4) == math.floor(n/4))\nend", "\t-- Check if n is even\n\tif n ~= (n / 2)\
    \ then\n\t\treturn false\n\tend", "  local sum = 0\n  for i = 1, n do\n    sum\
    \ = sum + i\n    if sum == n then return true end\n  end\n  return false\nend",
  "  local s = 0\n  for i = 1, n do\n    if i % 2 == 0 then\n      s = s + i\n   \
    \ end\n  end\n  return s == 4\nend", "    local result = true\n    for i = 1,\
    \ n do\n        if n % 2 == 0 and n <= 4 * i then\n            result = false\n\
    \        end\n    end\n    return result\nend", "  -- If n is even, return true\n\
    \  if n % 2 == 0 then\n    return true\n  end\n  -- If n is odd, check for a pattern\
    \ of 3 or 5 positive even numbers that are multiples of 5\n  -- (i.e. 3, 5, 7...).\
    \ We can ignore any multiples of 5 and any number divisible by 3.\n  local pattern\
    \ = n % 4\n  if pattern == 0 or pattern == 1 then\n    -- If n is divisible by\
    \ 3, return true\n    if n % 3 == 0 then\n      return true\n    end\n    -- If\
    \ the number is not divisible by 3, check for 5 positive even numbers that are\
    \ multiples of 5\n    pattern = n % 5\n    if pattern == 0 or pattern == 1 then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local s = 0\n \
    \   for _ = 1, n do\n        if n % 2 == 0 then\n            s = (s + n % 2) %\
    \ 2\n        end\n        n = n / 2\n    end\n    return (s == 0 and n % 2 ==\
    \ 0)\nend", "  local s = 0\n  local t = 4\n  while t <= n do\n    if n % t ==\
    \ 0 then\n      if t % 2 == 0 then\n        s = (s + n) / t\n      else\n    \
    \    s = (n - s) / t\n      end\n      t = t + 4\n    end\n    local m = math.floor(n\
    \ / t)\n    n = n - m * t\n    t = t*2\n  end\n  if n % 4 == 0 then\n    s = s\
    \ - n\n  end\n  return s == 0\nend", "  return n == 0 or n % 2 == 0 or n % 4 ==\
    \ 0\nend", "   if n == 0 then return false end\n   if n <= 4 then return n ==\
    \ 0 or n % 2 == 0 end\n   local count = 0\n   for i=1, n do\n      if n % i ==\
    \ 0 then\n\t count = count + 1\n      end\n   end\n   return count == 4\nend",
  "    return n % 2 == 0 and math.floor(n/2) ~= math.floor(n/2 + 1/2)\nend\n</cell>\n\
    <cell>", "  if n == 0 then\n    return false\n  else\n    return n % 2 == 0 and\
    \ is_equal_to_sum_even(n - 2)\n  end\nend", "  local s = 0\n  for i = 1, n do\n\
    \    s = s + i\n    if s % 2 == 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "  return n % 2 == 0 and is_positive(n / 2) and\n    n %\
    \ 4 ==0 and\n    n %2 ==0 and\n    n %2 == 0\nend", "  if n == 0 then return false\
    \ end\n  if n == 1 then return true end\n  if n < 0 then return false end\n  local\
    \ i = 1\n  while i <= n do\n    if i ^ 2 ^ i > n then return false end\n    i\
    \ = i + 2\n  end\n  return true\nend", "  -- Base Case\n  -- True: n = 1 mod 2\n\
    \  -- False: n != 1 mod 2\n  if n % 2 == 0 then\n    return n == math.floor(n/2)\n\
    \  else\n    -- Middle Case\n    -- True: n = 2 mod 4\n    -- False: n != 2 mod\
    \ 4\n    return n % 4 ~= 0\n  end\nend", "\tlocal sum = 0\n\tlocal i = 1\n\twhile\
    \ i <= n do\n\t\tsum = sum + i\n\t\ti = i * 2\n\tend\n\treturn sum == 4\nend",
  "  return n % 2 == 0 and n == 2 or n % 2 == 0 and n == 0 and n / 2 == 0 and is_equal_to_sum_even(n\
    \ - 2)\nend", "  local s = math.floor(n/2) + 1\n  return s == n and n % 2 == 0\n\
    end", "\tlocal i = 1\n\twhile i <= n do\n\t\tlocal sum = 0\n\t\tlocal j = 1\n\t\
    \twhile j <= i do\n\t\t\tsum = sum + j\n\t\t\tj = j + 1\n\t\tend\n\t\tif sum ==\
    \ i then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
  "  -- https://math.stackexchange.com/questions/1295/given-an-integer-what-is-the-sum-of-the-four-positive-numbers-that-can-be\n\
    \  -- The number `n` can be written as the sum of exactly 4 positive even numbers\
    \ if the sum is equal to the product of 4 numbers, of which there are 4.", " \
    \ if n <= 0 then return false end\n  if n >= 15 then return false end\n  if n\
    \ % 2 == 0 then return false end\n  if n % 4 == 0 then return false end\n  if\
    \ n % 8 == 0 then return false end", "  if n >= 1 and n <= 100000 then\n    local\
    \ s = 4\n    while s > 0 do\n      if n % s == 0 then\n        -- print(\"even\"\
    )\n        return false\n      elseif s ~= 1 then\n        s = s - 1\n      else\n\
    \        s = 4\n      end\n    end\n    -- print(\"even\")\n    return true\n\
    \  else\n    -- print(\"odd\")\n    return false\n  end\nend", "  return math.floor(n/4)*4\
    \ + 1 == n\nend", "  -- The sum of a sequence of positive even numbers equals\
    \ to n\n  -- Example\n  -- >>> is_equal_to_sum_even(4)\n  -- false\n  -- >>> is_equal_to_sum_even(6)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(8)\n  -- true\n  -- >>> is_equal_to_sum_even(9)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(10)\n  -- false\n  -- >>> is_equal_to_sum_even(11)\n\
    \  -- false\n  if n % 2 == 0 then\n    return (n == 0 or n == 2 or n == 4 or n\
    \ == 6 or n == 8 or n == 9 or n == 10)\n  else\n    return (n == 0 or n % 4 ==\
    \ 0 or n == 7)\n  end\nend", "  return math.floor((n + 1) / 4) == ((n + 1) % 4)\n\
    end", "    -- Return the sum of the even numbers of n\n    local sum = 0\n   \
    \ while n > 0 do\n        if n % 2 == 0 then\n            sum = sum + n\n    \
    \        n = n / 2\n        else\n            n = n / 2\n        end\n    end\n\
    \    return sum == n\nend", "    if n <= 0 then return false end\n    -- Check\
    \ if all n is even and no two are equal\n    local even = true\n    for i = 1,\
    \ n do\n        -- Check if i divides n\n        if i ~= n/i then\n          \
    \  even = false\n            break\n        end\n    end\n    if even then\n \
    \       -- If all numbers are even then check if all summed are even\n       \
    \ -- The sum is n * 1/2 + n * 1/2 + n/2 + n/2 which for n = 3 is:\n        --\
    \ (1/2) * (1/2 + 1/2 + 1/2)\n        -- (1/2) * (1/2 + 1/2)\n        -- (1/2)\
    \ * (1/2 + 1/2 + 1/2)\n        -- So the sum must be even\n        local even\
    \ = true\n        for i = 1, n do\n            -- Check if sum is even\n     \
    \       if n*(i-1) + n*(i-1) + n/2 + n/2 ~= (i*(i-1) + i*i) / 2 then\n       \
    \         even = false\n                break\n            end\n        end\n\
    \        return even\n    else\n        return false\n    end\nend", "  -- Base\
    \ case\n  if n < 4 then return false end\n  -- Decrement n until it is no longer\
    \ less than 4\n  repeat\n    n = n - 4\n  until n < 0\n  -- If the number is still\
    \ less than 4, then it cannot be written as the sum of four even numbers\n  if\
    \ n < 4 then return false end\n  -- Increment n until it is no longer less than\
    \ 8\n  repeat\n    n = n + 4\n  until n < 8\n  -- If the number is still less\
    \ than 8, then it cannot be written as the sum of four even numbers\n  if n <\
    \ 8 then return false end\n  -- The number is equal to the sum of four even numbers\n\
    \  return true\nend", "    if n == 0 then\n        false\n    elseif n % 2 ==\
    \ 0 then\n        false\n    elseif n < 0 then\n        true\n    else\n     \
    \   local total = 0\n        for x = 1, n, 2 do\n            total = total + x\n\
    \        end\n        return total == 4 and n % 2 ~= 0\n    end\nend", "  local\
    \ sum = 0\n  local i = 1\n  while i <= n do\n    sum = (sum + i) %  4\n    i =\
    \ i + 1\n  end\n  return sum == 0 and n > 0 and n % 2 == 0\nend", "    local sum\
    \ = 0\n    for i = 1, n do\n        if math.floor(i) ~= i or math.modf(i)[1] ~=\
    \ 0 then return false end\n        sum = sum + i\n    end\n    return sum == 4\n\
    end", "  if n >= 0 then\n    if n == 0 then return false end\n    if n == 1 then\
    \ return true end\n    if n % 2 == 0 then return false end\n    local sum = 2\n\
    \    while sum <= n do\n      if n % sum == 0 then return false end\n      sum\
    \ = sum + 1\n    end\n  end\n  return true\nend", "    local limit = 1 + math.floor(math.sqrt(n))\n\
    \    for i = 1, limit do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  return math.fmod(n, 4) == 0 and\
    \ (math.fmod(n, 2) == 0 or math.fmod(n, 2) == 2) and\n         math.fmod(n, 2)\
    \ == 0\nend", "  -- Base case\n  if n < 0 then\n    return false\n  end", "\t\
    -- Check base case\n\tif n < 0 then\n\t\treturn false\n\tend", "  -- Find all\
    \ numbers that can be written as the sum of 4 positive even numbers\n  -- Use\
    \ a table to cache the result\n  local cache = setmetatable({}, { __mode = \"\
    k\" })\n  -- If we already calculated the answer, return it\n  -- This saves us\
    \ a lot of expensive checks\n  if cache[n] then\n    return cache[n]\n  end\n\
    \  -- Create a table with 4 entries\n  local table = {0, 0, 0, 0, 0}\n  -- Start\
    \ from the largest possible number\n  -- This way, we only have to check even\
    \ numbers up to 5\n  for i = 5, 1, -1 do\n    -- Calculate the sum of 4 positive\
    \ even numbers up to i\n    local n = 0\n    for j = 0, 4 do\n      n = n + table[j]\n\
    \    end\n    -- If the given number can be written as the sum of 4 even numbers\n\
    \    -- add the number to the table\n    if n == n then\n      table.[5] = i\n\
    \      break\n    end\n  end\n  -- Now check if the given number can be written\
    \ as the sum of 4 positive even numbers\n  cache[n] = #table\n  return cache[n]\n\
    end", "  return not (n % 4) and (n % 6) == 0 and not (n % 8) == 0 and math.gcd(n,\
    \ 4) == 1 and math.gcd(n, 6) == 1 and math.gcd(n, 8) == 1 and n % 2\nend", " \
    \ if n == 0 or n == 2 then\n    return true\n  end\n  for i = 1, n do\n    if\
    \ not is_positive_even(i) then\n      return false\n    end\n  end\n  return true\n\
    end", "  if n < 4 then\n    return true\n  else\n    for i = 4, 1, -1 do\n   \
    \   if n % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end\nend", "\tlocal function recurse(n, m)\n\t\tif n == 0 or m == 0 then\n\t\
    \t\treturn false\n\t\tend\n\t\tif n % 2 == 0 and n % 4 == 0 then\n\t\t\t-- print(n,\
    \ \"+\", m, \"=\", n + m)\n\t\t\treturn recurse(n + m, m)\n\t\telseif n % 2 ==\
    \ 0 and n % 2 ~= 0 and n % 4 ~= 0 then\n\t\t\t-- print(n, \"+\", m, \"=\", n +\
    \ m)\n\t\t\treturn recurse(n, m)\n\t\telseif n % 2 == 0 and n % 2 == 0 and n %\
    \ 4 ~= 0 then\n\t\t\t-- print(n, \"+\", m, \"=\", n + m)\n\t\t\treturn recurse(n,\
    \ m)\n\t\telseif n % 2 == 0 and n % 2 == 0 and n % 2 == 0 then\n\t\t\t-- print(n,\
    \ \"+\", m, \"=\", n + m)\n\t\t\treturn recurse(n, m)\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\tlocal m = math.floor(math.sqrt(n))\n\tif recurse(n,\
    \ m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "\tif n <=\
    \ 0 then return false end\n\treturn n % 2 == 0 and is_positive_even(n-4) and is_positive_even(n+4)\
    \ and is_positive_even(n+6) and is_positive_even(n+8)\nend", "  local even = 0\n\
    \  local odd = 0\n  for i = 2, n do\n    if n % i == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return even == n/4\nend",
  "  local function even(n)\n    if n % 2 == 0 then\n      return true\n    end\n\
    \    return false\n  end\n  local function odd(n)\n    if n % 2 ~= 0 then\n  \
    \    return true\n    end\n    return false\n  end\n  local function sum_of_evens(n)\n\
    \    local sum = 0\n    for i = 1, n do\n      if even(i) then\n        sum =\
    \ sum + i\n      end\n    end\n    return sum\n  end\n  if n == 0 then\n    return\
    \ true\n  end\n  local sum = 0\n  while n > 0 do\n    sum = sum + n\n    n = n\
    \ - 1\n  end\n  local x = sum_of_evens(sum)\n  return x == 4\nend", "  local result\
    \ = false\n  local sum = 0\n  for i = 1, n do\n    sum = sum + i\n    if sum ==\
    \ 2*n then\n      result = true\n      break\n    end\n  end\n  return result\n\
    end", "  for i = 1, 4 do\n    if n % 2 == 0 and math.floor(n/2) == n then\n  \
    \    return true\n    end\n  end\n  return false\nend", "  if n == 0 then\n  \
    \  return true\n  end", "  if n > 0 then\n    for i=1, n do\n      if math.fmod(n,\
    \ 2) ~= 0 then\n        return false\n      end\n    end\n    return true\n  else\n\
    \    return false\n  end\nend", "    local sum = 0\n    for _ = 1, n do\n    \
    \    sum = sum + math.floor(n/2)\n        n = n - sum\n        if n % 2 == 0 then\n\
    \            sum = 0\n        end\n    end\n    return n == sum\nend", "  -- Special\
    \ case: 4 can be written as 2 + 2 + 2.\n  if n == 4 then\n    return true\n  end\n\
    \  -- Test all even numbers.\n  for i = 2, n do\n    -- If this number doesn't\
    \ divide evenly, then return false.\n    if n % (i * i) == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local sum_even = 0\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            sum_even = sum_even + i\n\
    \        end\n    end\n    return sum_even == n\nend", "  -- Base cases\n  if\
    \ n < 0 then return false end\n  if n == 2 then return true end", "  -- Find a\
    \ number c such that (c+2) % 4 == 0\n  -- This is not true when c is a multiple\
    \ of 2\n  -- Example\n  -- >>> is_equal_to_sum_even(1)\n  -- false\n  -- >>> is_equal_to_sum_even(2)\n\
    \  -- true\n  local c\n  for c = 1, n do\n    if c - 2 % 4 == 0 then return c\
    \ end\n  end\n  return nil\nend", "\tlocal s = 0\n\twhile true do\n\t\ts = s +\
    \ 2\n\t\tif s == n then\n\t\t\treturn true\n\t\tend\n\t\tif s <= n then\n\t\t\t\
    return false\n\t\tend\n\tend\nend", "   if n <= 0 then\n      return false\n \
    \  elseif n == 0 then\n      return true\n   elseif n ~= 2 then\n      return\
    \ false\n   end", "  if n < 0 then return false end\n  local count = 0\n  for\
    \ i = 1, n do\n    if n % 2 == 0 then\n      count = count + 1\n      if count\
    \ > 4 then return false end\n    end\n  end\n  return true\nend", "   -- If n\
    \ is a non-negative integer, return true\n   -- If n is negative, return false\n\
    \   if type(n) ~= 'number' then\n      return false\n   elseif n >= 0 then\n \
    \     -- Check whether n is divisible by 4\n      if n % 4 ~= 0 then\n       \
    \  return false\n      else\n         -- Check whether n is divisible by 2 and\
    \ not divisible by 4\n         if n % 2 ~= 0 then\n            if n % 4 ~= 0 then\n\
    \               return false\n            else\n               return true\n \
    \           end\n         else\n            return true\n         end\n      end\n\
    \   else\n      return false\n   end\nend", "  local numbers = {}\n  for _ = 1,\
    \ n do\n    table.insert(numbers, math.floor(math.random() * 10))\n  end\n  local\
    \ result = {}\n  local index = 1\n  for i = 1, n do\n    for j = 1, n do\n   \
    \   local difference = math.abs(numbers[index] - numbers[j])\n      if difference\
    \ <= 5 then\n        result.index = j\n        return\n      elseif i == j then\n\
    \        -- Keep the difference between numbers[i] and numbers[j] even if they\
    \ are equal\n        if difference <= 10 then\n          result.index = j\n  \
    \        return\n        end\n      end\n    end\n    index = index + 1\n  end\n\
    \  assert(false)\nend", "  local ok = false\n  for i = 2, n do\n    ok = ( n %\
    \ i == 0 ) xor ok\n  end\n  return ok\nend", "  -- Check whether the given number\
    \ is a sum of 4 positive even numbers.\n  -- We use n-1 because we start from\
    \ zero.\n  return n >= 0 and (n-1) % 2 == 0 and (n-1) >= 4\nend", "  return n\
    \ % 4 == 0 and n % 2 ~= 0 and is_sum_of_evens(n)\nend", "  -- Check if we already\
    \ have a solution\n  if n == 4 * n + 6 * n + 2 * n + 2 then return true end\n\
    \  if n == 4 * n + 6 * n + 4 * n then return true end\n  if n == 4 * n + 4 * n\
    \ + 2 * n + 2 then return true end\n  if n == 4 * n + 2 * n + 2 * n + 2 then return\
    \ true end\n  if n == 4 * n + 2 * n + 4 * n then return true end\n  return false\n\
    end", "    local sum = 0\n    for i=1,n do sum = sum+i end\n    return ((n ==\
    \ 4) and (sum == 24))\nend", "   assert(n >= 0, \"n must be positive\")\n   for\
    \ i=1,4 do\n      if i%2 ~= 0 then\n         if n ~= i^2 + i then return false\
    \ end\n      else\n         if n ~= i^2 + i - 1 then return false end\n      end\n\
    \   end\n   return true\nend", "  return n % 2 == 0 and is_positive_parity(n)\
    \ and (n * 2 - 2) % 4 == 0\nend", "    if n <= 0 then\n        return false\n\
    \    end\n    if n > 1 then\n        return n == sum((n*2)*(2*n-1))\n    end\n\
    \    return false\nend", "\tlocal sum = n\n\tlocal i = 0\n\twhile i < 4 do\n\t\
    \tsum = sum + n - i\n\t\tif sum >= 4 then\n\t\t\tbreak\n\t\telse\n\t\t\ti = i\
    \ + 1\n\t\tend\n\tend\n\treturn sum % 4 == 0\nend", "   -- Only positive even\
    \ numbers sum to n\n   if n < 0 then\n      return false\n   end\n   -- The result\
    \ is true if and only if there are 4 positive even numbers\n   -- that sum to\
    \ n.\n   local function is_sum_even(i)\n      -- Return true if the i-th number\
    \ equals i\n      return ((i == i) or (n % i == 0))\n   end\n   -- Find all positive\
    \ even numbers\n   local all_even = {}\n   for i = 1, n do\n      local s = i\n\
    \      -- While there are still positive even numbers to sum\n      while s ~=\
    \ 0 and s ~= n do\n         -- Add i to s\n         s = s + i\n         -- If\
    \ s is a positive even number\n         if is_sum_even(s) then\n            --\
    \ Append s to all_even\n            table.insert(all_even, s)\n         end\n\
    \         -- If s is a negative even number\n         if is_sum_even(-s) then\n\
    \            -- If there are at least 4 positive even numbers that sum to s\n\
    \            if #all_even >= 4 then\n               -- Return true\n         \
    \      return true\n            end\n         end\n      end\n   end\n   -- If\
    \ there are no even numbers that sum to n\n   return false\nend", "    if n ==\
    \ 1 then\n        return true\n    end\n    if n == 0 then\n        return false\n\
    \    end", "  -- We need to check if this number can be written as the sum of\
    \ exactly 4 positive even numbers\n  return n % 2 == 0 and\n    math.floor(n/2)\
    \ ~= 0 and\n    math.floor(n/4) == math.floor(n/2) and\n    math.floor(n/4) +\
    \ 1 == math.floor(n/4)\nend", "  assert(n > 0)\n  assert(n % 2 == 0, \"The given\
    \ number must be even!\")", "  if n <= 0 then\n    return false\n  end", "   \
    \ local sum = 0\n    local c = 0\n    for i = 1, n do\n        sum = sum + i\n\
    \        if sum == 2*c + 1 then return false end\n        c = c + 1\n    end\n\
    \    return true\nend\n</cell>\n<text>\nNext we are going to use the function\
    \ to get the nth number of the Fibonacci Sequence and perform the task of \"verifying\"\
    \ that the given number is indeed the nth number of the Fibonacci Sequence:",
  "  if n <= 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return false\n\
    \  end\n  for i = 1, n do\n    if i % 2 == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local sum = 0\n    for i = 1, n do\n       \
    \ sum = sum + i\n        if sum > 4 then\n            return false\n        end\n\
    \    end\n    return true\nend", "\treturn not (n % 2) and not (n % 4) and not\
    \ (n % 8) and not (n % 16)\nend", "  -- Check if number is negative\n  if n <\
    \ 0 then\n    return false\n  end\n  -- Check if number is even\n  if n % 2 ==\
    \ 0 then\n    return false\n  end\n  -- Check if number is odd\n  local count\
    \ = 0\n  for i = 1, n do\n    -- If number is not a multiple of 2, then continue\n\
    \    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  -- Check if\
    \ count is 4\n  if count ~= 4 then\n    return false\n  end\n  return true\nend",
  "    local evens = 0\n    local i = 1\n    while i <= n do\n        if i%2 ~= 0\
    \ then\n            evens = evens + i\n        end\n        i = i + 2\n    end\n\
    \    return evens == 4\nend", "  if n == 0 then\n    return false\n  end\n  if\
    \ n % 2 == 0 then\n    return true\n  end\n  local k = 1\n  while k < n do\n \
    \   k = k * 2\n    if n % k == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local p1 = n + 3\n    local p2 = n + 1\n    return p1 == 2\
    \ or p2 == 2 or p1 == n-1 or p2 == n-1\nend", "  -- Write a program to check whether\
    \ a given integer n can be written as the sum of exactly 4 positive even numbers.\n\
    \  -- Example\n  -- >>> is_equal_to_sum_even(4)\n  -- false\n  -- >>> is_equal_to_sum_even(6)\n\
    \  -- false\n  -- >>> is_equal_to_sum_even(8)\n  -- true", "    if n <= 0 then\
    \ return false end\n    if n ~= math.floor(n) then return false end\n    -- If\
    \ it's even and negative, it's false\n    if n % 2 == 0 and n <= 0 then return\
    \ false end\n    -- Otherwise check if there are 4 positive even numbers in the\
    \ number\n    local count = 0\n    for i = 1, math.floor(n/2) do\n        if n\
    \ % i == 0 then\n            count = count + 1\n            if count == 4 then\
    \ return true end\n        end\n    end\n    return false\nend", "  if n == 1\
    \ then return true end\n  if n % 2 == 0 then\n    return is_equal_to_sum_even(n\
    \ - 2) and\n           is_equal_to_sum_even(n - 4) and\n           is_equal_to_sum_even(n\
    \ - 6) and\n           is_equal_to_sum_even(n - 8)\n  else\n    return false\n\
    \  end\nend", "  if n < 4 then\n    return false\n  else\n    local last_digit\
    \ = n\n    for i = 1, 4 do\n      local new_last_digit = last_digit % 10\n   \
    \   last_digit = last_digit / 10\n      if new_last_digit + 2 <= last_digit then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \ end\nend", "  -- Check for four even numbers only\n  for i = 1, n do\n    if\
    \ n % i ~= 0 then return false end\n  end\n  return true\nend", "    local i =\
    \ 2\n    repeat\n        local x = math.floor((math.sqrt(2 * i + 1) - 1) / 2)\n\
    \        if math.abs(x - math.floor((math.sqrt(2 * i + 1) - 1) / 2)) < 0.000001\
    \ then\n            break\n        end\n        i = i + 1\n    until i >= n\n\
    \    return i >= n\nend", "   if n < 0 then\n      error (string.format(\"Cannot\
    \ check whether number is sum of even numbers. Negative numbers not allowed.\"\
    ))\n   end\n   return ((2^n - 1) - (2^n - 1)) == 4\nend", "  for i = 1, n do\n\
    \    if n % 2 == 0 and math.mod(n, 2) == 0 then\n      -- if remainder of n /\
    \ 2 is 0, then n is even\n      return false\n    end\n  end\n  return true\n\
    end", "    if n < 1 then\n        return false\n    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
