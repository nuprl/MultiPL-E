name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns true if the string\n\
  -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
  -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
  -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- Check to see if string is empty\n\tif string == nil or string\
    \ == \"\" then return false end\n\t-- Check to see if length is prime\n\tif string\
    \ <= 2 then return false end\n\tfor i = 2, #string do\n\t\t-- Only check odd lengths\n\
    \t\tif i ~= #string and string[i] ~= string[i-1] then\n\t\t\t-- Only check multiples\
    \ of 3\n\t\t\tif i % 2 ~= 0 then\n\t\t\t\t-- Check if number is prime\n\t\t\t\t\
    if i == 2 or i == string-1 then\n\t\t\t\t\treturn false\n\t\t\t\telse\n\t\t\t\t\
    \t-- If number is NOT prime then test to see if the number is prime\n\t\t\t\t\t\
    return isPrime(math.floor(i))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  if string^0 == string then\n    return false\n  end\n  local\
    \ length\n  do\n    local i = 0\n    repeat\n      i = i + 2\n      length = length\
    \ + 1\n    until i > string.len\n  until length > 2\n  return #string == length\n\
    end", "  for i = 1, #string do\n    if string[i] ~= string[math.floor(i/2)] then\n\
    \      -- a character is neither a prime number nor an even number\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local found = false\n  for i=2,\
    \ #string do\n    if string.sub(string,i,i)=='1' then\n      found = true\n  \
    \    break\n    end\n  end\n  return found\nend", "    local count = 0\n    for\
    \ _, char in string.gmatch'([^\\n\\r])' do\n        if char == \"\\n\" or char\
    \ == \"\\r\" then\n            count = count + 1\n        elseif math.mod(char,\
    \ 2) == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count == 1\nend", "    for i = 2, #string do\n        if string[i] == 0 then\
    \ break end\n        if string[i] == 1 then return false end\n    end\n    return\
    \ true\nend", "  if string.len <= 1 then return false end\n  if string.len ==\
    \ 2 then return string.len == 2 end\n  local is_prime = true\n  for i = 2, string.len-1\
    \ do\n    if not string.sub(i, i, string) == '' then is_prime = false end\n  end\n\
    \  return is_prime\nend", "  if string == nil then return nil end\n  if #string\
    \ < 2 then return false end\n  for i = 2, #string do\n    if string[i] == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    return not (string:match(\"\
    ^0+$\") or string:match(\"^%d+$\"))\nend", "\tlocal found = true\n\tlocal i =\
    \ 1\n\twhile found do\n\t\tfound = false\n\t\tlocal j = i - 1\n\t\twhile j >=\
    \ 0 do\n\t\t\tif string.sub(i, j + 1, i) ~= '0' then\n\t\t\t\tfound = true --\
    \ found a number that does not start with '0'\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\
    j = j - 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn found -- if found is false\
    \ then it is not a prime number\nend", "    return string.sub(string, 1, math.floor(math.sqrt(string)))\
    \ == nil\nend", "  for i = 2, #string do\n    if string[i] == true then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    local counter = 2\n\
    \    for i = 2, #string do\n        if (math.fmod(string, counter) == 0) then\n\
    \            counter = counter + 1\n        else\n            return false\n \
    \       end\n    end\n    return true\nend", "  local num_chars = #string\n  for\
    \ i = 2, num_chars do\n    if string.sub(i, i, i) == '' then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local primes = {}\n    for i = 2, #string\
    \ do\n        local found = false\n        for j = 2, #primes do\n           \
    \ if string.sub(i, i, j) == string.sub(primes[j], j, j) then\n               \
    \ found = true\n            end\n        end\n        if not found then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    return #primes > 0\
    \ and #primes ~= 1 -- Return true only if the string\n                       \
    \                 -- contains at least a prime\nend", "  if string==nil then return\
    \ false end\n  for i=1,#string do\n    local char = string.sub(i,i)\n    if string==nil\
    \ then return false end\n    if char == \"0\" then\n      for j=0,i+#char-1 do\n\
    \        local test2 = string.sub(char,j,j)\n        if test2 ~= test2 then return\
    \ false end\n      end\n    end\n    if string%char == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local num_chars = 0\n    local num_chars\
    \ = 0\n    for _,letter in string.gmatch('(.):%s*$','$1 ') do\n        num_chars\
    \ = num_chars + 1\n    end\n    if num_chars % 2 == 0 then\n        return false\n\
    \    end\n    for i = 2,num_chars-1 do\n        if num_chars % i == 0 then\n \
    \           return false\n        end\n    end\n    return true\nend", "  if string==nil\
    \ then\n    return false\n  end\n  local counter=2\n  while counter<=string.length\
    \ do\n    if string.sub(string,counter,counter+1)=='' then\n      counter=counter+1\n\
    \      local tmp=string.sub(string,counter,counter+1)\n      if tmp==string.sub(string.sub(string,1,counter-1),1,counter-1)\
    \ then\n        counter=counter-1\n      else\n        counter=counter+1\n   \
    \   end\n    else\n      counter=counter+1\n    end\n  end\n  return counter==string.length\n\
    end\nprime_length=prime_length", "  -- Write your test here\n  return false\n\
    end", "    local p = 1\n    for i = 1, #string do\n        p = (p * #string) -\
    \ i\n        if p == 1 then return false end\n        if p % 2 == 0 then return\
    \ false end\n    end\n    return true\nend", "    local prime = false\n    for\
    \ i = 1, #string do\n        if string.sub(i, i, #string) == '' then\n       \
    \     return prime\n        elseif #string[i] == 1 then\n            prime = true\n\
    \        end\n    end\n    return prime\nend", "    if string == nil then\n  \
    \      return nil\n    end\n    if string == '' or string == 'null' then\n   \
    \     return true\n    end", "  -- Write your code!\n  return true\nend", "\t\
    -- Write your function here\nend", "  for i = 2, (math.sqrt(string)) + 1 do\n\
    \    if string % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  for i = 2, #string do\n    if string[i] == 0 then return false end\n\
    \    if string[i] % 2 == 0 then return false end\n    if string[i] % 3 == 0 then\
    \ return false end\n  end\n  return true\nend", "  -- Your code here!\nend", " \
    \ for i = 2, 1000 do\n    if string.find(string, \"^\" .. i .. \"[\\\\w\\\\W]*$\"\
    , 1, true) ~= nil then\n      return false\n    end\n  end\n  return true\nend",
  "    if string == '' then\n        return true\n    end\n    local is_prime = true\n\
    \    for i = 2, math.floor(math.sqrt(string) .. 1) do\n        if not string.sub(1,i)\
    \ or string.sub(i,i) == 'x' then\n            is_prime = false\n            break\n\
    \        end\n    end\n    return is_prime\nend", "  local i = 1\n  while i <=\
    \ math.sqrt(#string) do\n    if string.sub(i, i) ~= '' then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\n</cell>\n<text>\n2. Write\
    \ a function that takes a string and returns true if the characters are in a given\
    \ list, where  is a given list or string  and , is a given string or list.", " \
    \   local counter = 0\n    local number = tonumber(string)\n    if number == nil\
    \ then\n        return false\n    end\n    for i = 2, number do\n        if number\
    \ % i == 0 then\n            counter = counter + 1\n        end\n    end\n   \
    \ if counter == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local n = 1\n    for i = 2, string.len() do\n        if string.sub(string,i,i)\
    \ == string then\n            n = n + 1\n        end\n    end\n    if n > 1 then\n\
    \        return false\n    else\n        return true\n    end\nend", "   for i\
    \ = 2, string.len() do\n      local candidate = string.sub (string, i - 1, 1)\n\
    \      if prime (candidate) then\n         return true\n      end\n   end\n  \
    \ return false\nend", "  return string == nil or string==\"\" or string.match(\"\
    \ \") or string.match(\" [bcdfghjklmnpqrstvwxyz]\")\nend", "  for i = 1, (string.len()\
    \ / 2) do\n    if not string.sub(string, 1, i) == '' then\n      local mult =\
    \ 1\n      for j = 2, i do\n        mult = mult*j\n      end\n      if mult ==\
    \ i then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    local prime_count = 2\n    for i=2,#string do\n        if string[i] == string[i]^string[i]\
    \ then\n            prime_count = prime_count + 1\n        end\n    end\n    if\
    \ prime_count > 1 then\n        return false\n    else\n        return true\n\
    \    end\nend", "  for i = 2, #string do\n    if string[i] ~= ' ' and string[i]\
    \ ~= '-' then\n      local count = 0\n      local j = 1\n      while j < #string\
    \ do\n        count = count + string[j]\n        j = j + 1\n      end\n      if\
    \ string[i] == string[count] then\n        count = count + 1\n      end\n    \
    \  if count == i then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "    local length = #string\n    local prime = true\n    for i=1,\
    \ length, 1 do\n        if ((not ((string.sub(i, i + 1) ~= ''))) or ((i == 1)\
    \ and not ((string.sub(i, i + 1) ~= '')) and (string.sub(i, i + 1) ~= '1')) or\
    \ ((i == length) and (string.sub(i, i + 1) ~= '1'))) then\n            prime =\
    \ false\n            break\n        end\n    end\n    return prime\nend", "  if\
    \ string == '' then\n    return false\n  end\n  local i = 1\n  local c = string.sub(string,\
    \ 1, 2)\n  while i < string.len(string) and string.sub(s, i, i) ~= c do\n    i\
    \ = i + 1\n  end\n  if i % 2 == 0 then\n    return false\n  end\n  local j = 3\n\
    \  local flag = false\n  while j < i do\n    local m = math.floor(j / 2)\n   \
    \ if string.sub(s, j, j) == string.sub(s, m, m) then\n      flag = true\n    end\n\
    \    j = j + 2\n  end\n  return flag\nend", "  -- Base case\n  if string == nil\
    \ then return false end\n  -- If the input string is not empty and the first character\
    \ is a letter\n  -- and the remainder is either empty or the letter not 'e', then\
    \ return false\n  if string.len() > 0 and string.sub('', 1, 1) == 'a' and string.sub('',\
    \ 2, 1) ~= 'e' then return false end\n  -- Otherwise, if the input string is not\
    \ empty and the first character is a letter\n  -- and the remainder is not 'e',\
    \ then return false\n  if string.len() > 0 and string.sub('', 1, 1) == 'a' and\
    \ string.sub('', 2, 1) ~= 'e' then return false end\n  -- Otherwise, if the input\
    \ string is not empty and the first character is a letter\n  -- and the remainder\
    \ is 'e', then return true\n  if string.len() > 0 and string.sub('', 1, 1) ==\
    \ 'a' and string.sub('', 2, 1) == 'e' then return true end\n  -- Otherwise, if\
    \ the input string is not empty and the first character is not a letter\n  --\
    \ then return false\n  if string.len() > 0 and string.sub('', 1, 1) ~= 'a' then\
    \ return false end\n  -- Otherwise, if the input string is not empty and the first\
    \ character is not a letter\n  -- then return true\n  if string.len() > 0 and\
    \ string.sub('', 1, 1) ~= 'a' then return true end\n  -- Otherwise, return false\n\
    \  return false\nend", "  -- base case\n  if string == '' then\n    return true\n\
    \  end\n  -- base case\n  if #string < 2 then\n    return false\n  end\n  -- base\
    \ case\n  if string[1] == string[2] then\n    return true\n  end\n  -- recursive\
    \ case\n  return prime_length(string .. string[2])\nend", "   for i = 2, tonumber(string)\
    \ do\n      if tonumber(string) == i then\n         return true\n      end\n \
    \     if string % i == 0 then\n         return false\n      end\n   end\n   return\
    \ true\nend", "  if string:len() ~= 1 then\n    return false\n  end\n  local i\
    \ = 1\n  while i * i <= string * string:len() do\n    if string * string:len()\
    \ >= i then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end", "\tlocal function test(i)\n\t\tif string.len() ~= 1 then return false end\n\
    \t\tif string.sub(string, 1, i) ~= '1' then return false end\n\t\ttest(i + 1)\n\
    \t\treturn string.len() ~= 2\n\tend\n\treturn test(2)\nend", '   -- Write your
    solution here', "    -- Write code here\n    for i = 2, 2 .. string do\n     \
    \   if string%i == 0 then\n            return false\n        end\n    end\n  \
    \  return true\nend", "    return string.find(\n        '^$%' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$' ..\n        '[Bb]y$'\
    \ ..\n        '[Bb]y$' ..\n        '", "  local length = 1\n  for i = 1, #string\
    \ do\n    length = length * 2\n    if string:sub(i):byte() == 0 then\n      return\
    \ false\n    end\n  end\n  for i = 1, length do\n    if string%i == 0 then\n \
    \     return false\n    end\n  end\n  return true\nend", "\tif string.match(string,\
    \ '^%d+$') then\n\t\tlocal n = tonumber(string.sub(string, 1, string.len()))\n\
    \t\tif n and n ~= 0 then\n\t\t\tlocal i = 1\n\t\t\twhile i <= n do\n\t\t\t\tif\
    \ string.sub(string,i, i) ~= 'i' then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\
    \t\t\ti = i + 2\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end", "  for i = 2, #string do\n    if string[i] ~= '#' then return false end\n\
    \    for j = i, #string do\n      if string.sub(i, j, i) == string.sub(i, j, i)\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "  -- Your code here\n  local is_prime = false\n  local str_length = #string\n \
    \ \n  if str_length ~= 0 then\n    for i = 2, str_length-1 do\n      local isprime\
    \ = true\n      for j = 2 to str_length-1 do\n        if string.sub(i, i, j) ~=\
    \ string.sub(i, j) then\n          isprime = false\n        end\n      end\n \
    \     if isprime then\n        is_prime = true\n        break\n      end\n   \
    \ end\n  end\n  \n  return is_prime\nend", "  -- Write your code here\n  return\
    \ true\nend", "\treturn string.gmatch(tostring(prime), '%1') and true or false\n\
    end", "    -- Your code here\n    local strlen=#string\n    for i=2,strlen-1,1\
    \ do\n        for j=1,strlen-1,1 do\n            if string.sub(i,j,i)~=\".\" then\n\
    \                local x=string.sub(i,j,i)\n                local y=string.sub(i,j,i+1)\n\
    \                if ((x==y)==false) then\n                    strlen=strlen-1\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    if strlen%2==0 then\n        -- If length is odd, then it is not\
    \ a prime number\n        return false\n    else\n        -- If length is even,\
    \ then it is a prime number\n        return true\n    end\nend", "  return not\
    \ string.match(string, '%P') or\n    (string.len() == 1 and\n     string.sub(1,\
    \ 1) == 'l')\nend", "  if type(string) ~= 'string' then\n    return nil\n  end\n\
    \  local count = 0\n  for letter in string do count = count + 1 end\n  for i =\
    \ 2, count do\n    if string.sub(string,i,i) == string.sub(string,i,i-1) then\n\
    \      return false\n    end\n  end\n  return true\nend", "  if string == nil\
    \ then\n    return false\n  end\n  -- Write your implementation here\n  local\
    \ prime = true\n  local p = 1\n  local count = 0\n  repeat\n    if string ~= nil\
    \ then\n      count = count + 1\n    end\n    if count == p then\n      prime\
    \ = false\n    end\n    count = count + 1\n    p = p + 1\n  until count > p\n\
    \  return prime\nend", "    if not string then\n        return false\n    end\n\
    \    local i = 2\n    local prime = true\n    local str = string.gsub(string,\
    \ \"%a*\", \"\")\n    while i <= #str do\n        if str == string.sub(str, i,\
    \ i) then\n            prime = false\n            break\n        end\n       \
    \ i = i + 1\n    end\n    return prime\nend", "  local function is_prime(number)\n\
    \    for i = 2, number do return false end\n    return true\n  end\n  \n  return\
    \ is_prime(string:len())\nend\n</cell>\n<text>\nWrite a function to determine\
    \ if a given string has only alphabetic characters and is of even length.\nExamples\n\
    >>> only_alphabetic_characters('Hello')\ntrue\n>>> only_alphabetic_characters('kittens')\n\
    false\n>>> only_alphabetic_characters('1')\nfalse", "    if #string > 0 then\n\
    \        for index = 2, #string do\n            if string:sub(1, index) == string:sub(1,\
    \ index) then\n                return false\n            end\n        end\n  \
    \      return true\n    else\n        return false\n    end\nend", "   -- Check\
    \ every character in the string to ensure they are prime\n   for i = 1, #string\
    \ do\n      local value = tonumber(string[i])\n      -- Checks to see if the characters\
    \ are prime\n      if not (value == 0 or value % 1 == 0 and not (i == 1 and value\
    \ == 2))\n      then\n         return false\n      end\n   end\n   -- Checks if\
    \ the string is prime\n   return true\nend", "  local n = 0\n  for i = 1, #string\
    \ do\n    if string[i] == string[i] then\n      n = n + 1\n    end\n  end\n  return\
    \ n >= 2 and\n    n % ~= 0 and\n    n % 2 == 0\nend", "  -- Write your solution\
    \ here\n  -- Hint: You can check the string length using the function string.len\n\
    \  -- If it is the length of the string then it is a prime number, otherwise not.\n\
    \  -- Hint: You can use the function math.mod to check the mod of the length of\
    \ string by 3\n  if string.length == 1 or string.length == 2 or string.length\
    \ == 3 then\n    return true\n  end", "    local count = 0\n    local tmp = 1\n\
    \    for i = 1, #string do\n        tmp = tmp * i\n        count = count + tmp\n\
    \    end", "   -- Check for all characters and count\n   for i = 1, #string do\n\
    \      -- Check if char is a prime\n      if string.sub(i, i, #string)%2 ~= 0\
    \ then\n         return false\n      end\n   end\n   -- If no prime chars are\
    \ found, return true\n   return true\nend", "   -- Check for invalid input range\n\
    \   if string == '' then return false end", "    local count = 0\n    for i =\
    \ 1, #string do\n        if string.sub(i, i) == string.sub(i, i, i) then\n   \
    \         count = count + 1\n        else\n            return false\n        end\n\
    \    end\n    if count == 0 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  local count = 0\n  for letter in string do count =\
    \ count + 1 end\n  return count <= 2\nend", "  for i = 2, #string do\n    if string.sub(string,\
    \ 1, i) == string.sub(string, 1, i - 1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "   -- Implementation in C\n   return string.len\n   or\
    \ string.len -- LuaJIT 1.2+\n   or string.gmatch -- LuaJIT 1.4\n   or string.gsub\
    \ -- LuaJIT 1.4\n   or (function (string)\n      -- Implementation in Lua\n  \
    \    local function is_prime(n)\n         -- Implementation in Lua\n         if\
    \ n == 2 then\n            return false\n         elseif n % 2 == 0 or n % 3 ==\
    \ 0 then\n            return false\n         else\n            return true\n \
    \        end\n      end\n      local function check_divisors(n)\n         -- Implementation\
    \ in Lua\n         if n == 2 then\n            return false\n         elseif n\
    \ % 2 == 0 or n % 3 == 0 then\n            return false\n         else\n     \
    \       for i=3,n,2 do\n               if not is_prime(i) then\n             \
    \     return false\n               end\n            end\n         end\n      \
    \   return true\n      end\n      return string.gsub(\n         string, \"^%a+\"\
    , \"\"\n      ) or check_divisors(math.floor(string))\n   end)\nend", "   -- TODO:\
    \ Write code\nend", "   for i,c in ipairs(string) do\n      if string.sub(c,i,i)~=c\
    \ then\n         return false\n      end\n   end\n   return true\nend", "  return\
    \ string.match(\"%w+\") and\n         (string.len() == 1 or\n          string[1]\
    \ == 'n' or\n          string[1] == 'p' or\n          string[1] == 'q' or\n  \
    \        string[1] == 'k')\nend", "  -- base case\n  if string == '' then\n  \
    \  return true\n  end\n  \n  -- check first character of the string to see\n \
    \ if string.sub(1, 1) == string.sub(1, 1) then\n    return false\n  end\n  \n\
    \  -- check each other character in the string\n  for i = 2, string.sub(string,\
    \ 1, string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string,\
    \ 1,string.sub(string,1,string.sub(string, 1,string.sub(string,1,string.sub(string",
  "  -- TODO: Your code here\n  return false\nend", "\tif string == nil then return\
    \ false end\n\tif type(string) ~= 'string' then return false end\n\tlocal count\
    \ = 0\n\tfor i = 1, #string do\n\t\tcount = count + 1\n\t\tif count == 2 then\n\
    \t\t\treturn false\n\t\telseif string[i] == string[i+1] then\n\t\t\tcount = count\
    \ - 1\n\t\tend\n\tend\n\treturn true\nend", "\tlocal prime_number_table = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47}\n\tlocal string_length\
    \ = string.len()\n\tlocal length = prime_number_table[string_length]\n\treturn\
    \ (string_length == length) and true or false\nend", "\tlocal prime_char = \"\
    1234567890-=~\\\";'\\\\,<>.?/!&%^|*()_+{}[]\\\\\";\n\t-- Remove any special characters\
    \ from the string\n\t-- e.g. \"a@b\" becomes \"ab\"\n\tstring = string.replace(/[^a-z0-9]/g,\
    \ \"\");\n\t-- If the string length divides by 3 then it is a prime number\n\t\
    -- and hence the string length must be a multiple of 3\n\treturn string.lenght%3\
    \ ~= 0 or not string.match(string.chars, prime_char);\nend", "\treturn string.len\
    \ and string.len > 0 and\n\t\tstring.len() > 2 and string.len % 2 == 0 and\n\t\
    \tstring.len() == math.floor(string.len / 2) and \n\t\tstring.len() == string.len\
    \ - 1 and string.len() < math.sqrt(string.len)\nend", "    local result = string.match(\n\
    \        [[^]([^\\n\\r]*)\\n\\r?$]], ''\n    )", "  -- Check for correct length\
    \ strings\n  if string == '' or string == '\\n' then return false end\n  -- Check\
    \ for empty strings\n  if string == '' then return false end\n  -- Check the first\
    \ character for a valid character\n  if string.sub(1, 1) ~= ' ' then return false\
    \ end\n  -- Check each character in the string\n  for i = 2, #string, 1 do\n \
    \   -- Check if each character in the string is a digit\n    if string.sub(i,\
    \ i-1) ~= ' ' then return false end\n    -- Check each character in the string\
    \ is a digit\n    if string.sub(i, i-1) ~= '\\t' then return false end\n    --\
    \ Check each character in the string is a digit\n    if string.sub(i, i-1) ~=\
    \ '\\n' then return false end\n    -- Check each character in the string is a\
    \ digit\n    if string.sub(i, i-1) ~= '\\r' then return false end\n    -- Check\
    \ each character in the string is a digit\n    if string.sub(i, i-1) ~= '\\v'\
    \ then return false end\n    -- Check each character in the string is a digit\n\
    \    if string.sub(i, i-1) ~= '\\f' then return false end\n    -- Check each character\
    \ in the string is a digit\n    if string.sub(i, i-1) ~= '\\e' then return false\
    \ end\n  end\n  -- Return true to indicate that the string is a prime number\n\
    \  return true\nend", "  -- Base case\n  if string == '' or string == '\\n' then\n\
    \    return false\n  end\n  -- Find the length of the string\n  local string_length\
    \ = string.len\n  -- Calculate the first char\n  local first_char = string.sub(1,\
    \ 1)\n  -- Calculate the last char\n  local last_char = string.sub(string:len())\n\
    \  -- Find the middle char\n  local middle_char = string.sub(string:len()/2, string:len()/2)\n\
    \  -- If middle char is non-numeric\n  -- or is not a letter or is numeric and\
    \ less than the number\n  -- of letters in the word then we consider it a prime\n\
    \  if middle_char == '' or middle_char == '\\n' or middle_char == '\\r' or\n \
    \ middle_char == '0' then\n    return true\n  elseif middle_char == '.' or middle_char\
    \ == ',' or middle_char == '-' or\n  middle_char == '_' then\n    return false\n\
    \  elseif middle_char == 'a' or middle_char == 'e' or middle_char == 'i' or\n\
    \  middle_char == 'o' or middle_char == 'u' then\n    return false\n  elseif middle_char\
    \ ~= 'a' and middle_char ~= 'e' and middle_char ~= 'i' and\n  middle_char ~= 'o'\
    \ and middle_char ~= 'u' then\n    return false\n  elseif middle_char ~= '0' then\n\
    \    return false\n  end\n  -- If middle char is a letter we check to see\n  --\
    \ if the middle char is less than or equal to the length\n  if middle_char ==\
    \ 'a' or middle_char == 'e' or middle_char == 'i' or\n  middle_char == 'o' or\
    \ middle_char == 'u' then\n    -- If the middle char is not a number or a letter\n\
    \    -- then we consider it not a prime\n    return false\n  elseif middle_char\
    \ == '0' then\n    -- If the middle char is a number then we check if the\n  \
    \  -- middle char is less than or equal to the length\n    if middle_char ~= 'a'\
    \ and middle_char ~= 'e' and middle_char ~= 'i' and\n    middle_char ~= 'o' and\
    \ middle_char ~= 'u' then\n      return false\n    elseif middle_char ~= '0' then\n\
    \      return false\n    end\n  end\n  -- If the last char is not a letter\n \
    \ -- or is not a number or a letter\n  -- then we consider it not a prime\n  return\
    \ false\nend", "   -- your code here\n   -- Write your code here\n   return true\n\
    end", "  -- Write your code here\n  local prime_numbers = string\n  -- print(prime_numbers)\n\
    \  for i = 2, #prime_numbers do\n    local result = prime_numbers[i]:find(prime_numbers[i])\n\
    \    if result == nil then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- Write your code here\n    return #string <= 1 or not string[1] or\
    \ not is_number(string[1]) or string[1] <= 1\nend", "    if type(string) ~= 'string'\
    \ then\n        error('Input must be a string')\n    end\n    if not string.match\
    \ '^[0-9]+$' then\n        error('Input must be a number')\n    end\n    local\
    \ counter = 1\n    while true do\n        local next = string.sub(string, 1, counter)\n\
    \        if next == last then\n            break\n        end\n        local count\
    \ = string.len(next)\n        counter = counter + count + 1\n        if counter\
    \ - 1 < 1 then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- Remember that string characters are 0-indexed\n  if #string > 1 then\n\
    \    local prime = true\n    local count = 0\n    for i = 2, #string do\n    \
    \  if ((string.sub(string,i,i)) ~= \"\") then\n        count = count + 1\n   \
    \     if count > 1 then\n          prime = false\n          break\n        end\n\
    \      end\n    end\n    return prime\n  end\n  return false\nend", "   -- Write\
    \ your solution here\nend", "  return not (string == '')\n    or string:match('^%w+$')\
    \ or string:match('^-?%d+$') or string:match('^-?%d*$') or string:match('^-?%d?$')\
    \ or string:match('^-?%d*%d?$') or string:match('^-?%d+%d*$') or string:match('^-?%d*%d*%d?$')\
    \ or string:match('^%d*%d*%d?$') or string:match('^%d+%d*%d?$') or string:match('^%d*%d*%d*%d?$')\
    \ or string:match('^%d+%d*%d*%d?$') or string:match('^%d*%d*%d*%d*%d?$') or string:match('^%d+%d*%d*%d*%d*%d?$')\n\
    end", "  -- base case\n  if string == nil then return 0 end\n  -- Base case\n\
    \  if string == 1 then return 1 end\n  -- Recursive case\n  local string_length\
    \ = string.len()\n  local index = 1\n  while true do\n    local prime = 1\n  \
    \  while prime <= string_length do\n      local index2 = index + 1\n      local\
    \ counter = string_length - index\n      if string_length >= index + prime*prime\
    \ and string[index + prime*prime] == string[index2 + prime*prime] then\n     \
    \   prime = prime + 1\n        counter = counter - 1\n      end\n      if counter\
    \ ~= 0 then\n        index = index2\n      else\n        return prime == string_length\n\
    \      end\n    end\n    -- if index == string_length then break\n    index =\
    \ index + 1\n  end\n  return false\nend", "  for _, char in string:gmatch'([^%s]+)'\
    \ do\n    if string.match(char..'\\1') then\n      return false\n    end\n  end\n\
    \  return true\nend", "  return string.len == 0 and nil or prime_helper(string,\
    \ string.len):match(\"^%d$\")\nend", "  -- Write your implementation here\n  return\
    \ false\nend", "   -- Write your code\nend", "  return string.gsub('(^|[^-])%%(%d+)$',\
    \ function(_,n)\n    return string.format('%d', #string) == n and n ~= ''\n  end)\n\
    end", "\tlocal counter = 1\n\tlocal prime = true\n\tfor i = 2, #string do\n\t\t\
    if counter == #string then return false end\n\t\tif string[i] == string[i] and\
    \ counter ~= 2 then\n\t\t\tcounter = counter + 1\n\t\tend\n\t\tif counter <= 1\
    \ then prime = false end\n\tend\n\treturn prime\nend", "   local index = 1\n \
    \  local prime = true\n   while index <= #string do\n      local char = string.sub\
    \ (string, index, index)\n      if char == '1' then\n         prime = false\n\
    \         break\n      end\n      index = index + 1\n   end\n   return prime\n\
    end", "  if string.substring or string.find then\n    return string.find(string)\
    \ == 1 and false or true\n  end\n  local i = 1\n  while i <= #string do\n    if\
    \ string[i] ~= ' ' and ((string[i] > 'a' and string[i] < 'z')\n        or (string[i]\
    \ > 'A' and string[i] < 'Z')) then\n      i = i + 1\n    else\n      i = i + 1\n\
    \      while i <= #string do\n        if string[i] == '.' then\n          i =\
    \ i + 1\n          break\n        end\n        if string[i] > 'a' and string[i]\
    \ < 'z' then\n          i = i + 2\n        else\n          i = i + 2\n       \
    \   while i <= #string do\n            if string[i] == '.' then\n            \
    \  i = i + 1\n              break\n            end\n            if string[i] >\
    \ 'a' and string[i] < 'z' then\n              i = i + 3\n            else\n  \
    \            i = i + 3\n              while i <= #string do\n                if\
    \ string[i] > 'a' and string[i] < 'z' then\n                  i = i + 5\n    \
    \            else\n                  i = i + 5\n                  while i <= #string\
    \ do\n                    if string[i] == '.' then\n                      i =\
    \ i + 1\n                      break\n                    end\n              \
    \      if string[i] > 'a' and string[i] < 'z' then\n                      i =\
    \ i + 7\n                    else\n                      i = i + 7\n         \
    \             while i <= #string do\n                        if string[i] == '.'\
    \ then\n                          i = i + 1\n                          break\n\
    \                        end\n                        if string[i] > 'a' and string[i]\
    \ < 'z' then\n                          i = i + 11\n                        else\n\
    \                          i = i + 11\n                        end\n         \
    \             end\n                    end\n                  end\n          \
    \      end\n              end\n            end\n          end\n        end\n \
    \     end\n    end\n  end\n  return true\nend", "  for i = 2, #string do\n   \
    \ if not string.sub(1, i)^string.sub(i, i) then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local i\n    local count", "  for i = 2, #string\
    \ do\n    if not string.sub(string,i,i)%1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "   -- Implement here\nend\n</cell>\n<text>\n3.2\
    \ The is_prime function\nis_prime is similar to the prime_length function you\
    \ implemented above. Complete the definition of is_prime using the code you wrote\
    \ in previous questions. Note that the function is_prime returns true if the argument\
    \ is a prime number, and false otherwise.", "   for i = 2, #string do\n      if\
    \ string:sub(i, i) == string.sub(string) then return false end\n   end\n   return\
    \ true\nend", "\t-- the length of the string is our first value\n\tlocal length\
    \ = 1\n\t-- the length of all the strings comprising the first number\n\tlocal\
    \ primes = {}\n\t-- we go through the string and increment our length\n\tfor i\
    \ = 1, #string do\n\t\t-- we check if the current character is a prime\n\t\tif\
    \ string[i] ~= '^' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i]\
    \ ~= '*' and string[i] ~= '/'\n\t\tand string[i] ~= '^' and string[i] ~= '-' and\
    \ string[i] ~= '+'\n\t\tand string[i] ~= '*' and string[i] ~= '/'\n\t\tand string[i]\
    \ ~= '.' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '^' and\
    \ string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '*' and string[i]\
    \ ~= '/'\n\t\tand string[i] ~= '^' and string[i] ~= '-' and string[i] ~= '+'\n\
    \t\tand string[i] ~= '*' and string[i] ~= '/'\n\t\tand string[i] ~= '.' and string[i]\
    \ ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '^' and string[i] ~= '-' and\
    \ string[i] ~= '+'\n\t\tand string[i] ~= '*' and string[i] ~= '/'\n\t\tand string[i]\
    \ ~= '^' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '*' and\
    \ string[i] ~= '/'\n\t\tand string[i] ~= '^' and string[i] ~= '-' and string[i]\
    \ ~= '+'\n\t\tand string[i] ~= '*' and string[i] ~= '/'\n\t\tand string[i] ~=\
    \ '.' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '^' and\
    \ string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '*' and string[i]\
    \ ~= '/'\n\t\tand string[i] ~= '^' and string[i] ~= '-' and string[i] ~= '+'\n\
    \t\tand string[i] ~= '*' and string[i] ~= '/'\n\t\tand string[i] ~= '^' and string[i]\
    \ ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '*' and string[i] ~= '/'\n\
    \t\tand string[i] ~= '.' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i]\
    \ ~= '^' and string[i] ~= '-' and string[i] ~= '+'\n\t\tand string[i] ~= '*' and\
    \ string[i] ~= '/'\n\t\t", "\treturn nil\nend", "  return string.find(string)\
    \ == nil or (string.find(string, '%a') == nil and string.find(string, '%A') ==\
    \ nil)\nend", "  local len = string.len\n  if len == nil then return false end\n\
    \  if string.sub == nil then return false end\n  if string.sub(string, 0, len)\
    \ == string then return false end", "\t-- Your code here\n\t-- Hint: You'll want\
    \ to use the string length function\n\t-- and modulo operator to determine prime\
    \ numbers and return false if\n\t-- they are divisible by some number\n\t-- Hint:\
    \ Since we're only checking the length of a string, you'll want\n\t-- use that\
    \ to check for prime numbers\n\t-- Example: prime_length('abcde') == 2\n\t-- Example:\
    \ prime_length('a') == 1\n\t-- Example: prime_length('') == 0\nend", "    if string\
    \ == '' then\n        return 0\n    end\n    if string == '1' then\n        return\
    \ 1\n    end\n    if string.sub(1,1) == '' then\n        return false\n    end\n\
    \    local result = 0\n    for index = 2, string.len() do\n        if string.sub(string,index,index)\
    \ == string.sub(string,index-1,index-1) then\n            result = result + 1\n\
    \        end\n    end\n    return result == 2\nend", "    local count = 1 -- first\
    \ character is 1\n    for i = 2, #string do\n        count = count + (math.floor(string[i]/2))\n\
    \    end\n    -- checks to see if prime number\n    if count % 2 == 1 then return\
    \ false end\n    return true\nend", "    local count = 0\n    local primes\n \
    \   primes = assert(io.open('data/primes.txt', 'r'))\n    primes:seek(\"set\"\
    )\n    for line in primes:lines() do\n        count = count + 1\n        if string.len(line)\
    \ == math.floor((string.len(line)/2)) then\n            count = count - 1\n  \
    \      end\n    end\n    primes:close()\n    if count == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  -- base case\n  if string\
    \ == '' then\n    return true\n  end\n  -- base case end\n  -- recursive case\n\
    \  if string.sub(1, 1) == string.sub(1, 1) then -- base case\n    if string.sub(2,\
    \ 2) == string.sub(2, 2) then -- base case\n      if string.sub(3, 3) == string.sub(3,\
    \ 3) then -- base case\n        return true\n      end\n    end\n  end\n  return\
    \ false -- recursive case end\nend", "  return string.find(string, \"^%a%d*$\"\
    ) ~= nil\nend", "  -- TODO: Write this function\n  return false\nend", "  if string\
    \ == nil then\n    return nil\n  end\n  for i = 2, #string do\n    if string[i]\
    \ == nil then\n      return false\n    end\n    local prime = true\n    for j\
    \ = 1, #string do\n      if string[i] ~= string[j] then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      return true\n   \
    \ end\n  end\n  return false\nend", "    if not string or not string.match then\n\
    \        return 0\n    end\n    local count = 0\n    for i = 1, #string do\n \
    \       for j = 1, #string do\n            if string[i] == string[j] then\n  \
    \              count = count + 1\n            end\n        end\n    end\n    return\
    \ #string > 0 and count > 1 and #string % 2 == 0\nend", "  -- TODO: Improve this\
    \ algorithm\n  local i = 2\n  local p = 1\n  while i < string do\n    i = i +\
    \ 1\n    local count = 0\n    while i < string do\n      count = count + 1\n \
    \     i = i + 1\n      if string.sub(i, i - 1) == string.sub(i, i - 1) then\n\
    \        count = count + 1\n      end\n    end\n    if count > 0 then\n      p\
    \ = p + 1\n    end\n  end\n  return p == 1\nend", "  -- Only need to verify input\
    \ is an string and length is at least 1\n  -- since if input length is not 1 then\
    \ length must be prime\n  if string == nil or string:len() <= 1 then\n    return\
    \ false\n  end\n  -- Only need to verify input is a string and length is less\
    \ than or equal to\n  -- 10. Since 10 is the largest prime number less than or\
    \ equal to input\n  -- length, 10 will always be a prime number\n  if string:len()\
    \ > 10 then\n    return false\n  end\n  -- Iterate over each character in the\
    \ string\n  for i = 1, string:len() do\n    -- Check if the current character\
    \ is a prime number\n    -- This should only return true if the current character\
    \ is a prime\n    -- number or false if it is not a prime number\n    if prime_number(string:sub(i,\
    \ i + 1)) then\n      return true\n    end\n  end\n  return false\nend", "\tlocal\
    \ count = 0\n\tlocal i = 2\n\twhile i < math.ceil(string/2) do\n\t\tif string:sub(i,i)\
    \ == string then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tif\
    \ count == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", " \
    \   -- Write your solution here\n    local function is_prime(n)\n        -- Write\
    \ your implementation here\n    end\n    return string.find(string, \"^((%d+1)%d)\"\
    , 1, true) ~= nil\nend", "  local count = 0\n  local is_prime = true\n  string.gsub(function\
    \ (char) \n    if is_prime and char:lower() ~= 'a' and char:lower() ~= 'e' and\
    \ char:lower() ~= 'i' and char:lower() ~= 'o' and char:lower() ~= 'u' then return\
    \ false end \n    if char:lower() ~= 'a' and char:lower() ~= 'e' and char:lower()\
    \ ~= 'i' and char:lower() ~= 'o' and char:lower() ~= 'u' and char:lower() ~= 'y'\
    \ then\n      if char == 'a' then \n        if count == 1 then is_prime = false\
    \ else count = count - 1 end\n      else\n        if count == 2 then is_prime\
    \ = false else count = count - 1 end\n      end\n    else count = count + 1 end\n\
    \  end, '')\n  return is_prime and count > 1 and count < string\nend", "    local\
    \ prime = true\n    for i = 2, math.sqrt(string) do\n        if string:sub(i,\
    \ i) ~= '' then\n            prime = false\n            break\n        end\n \
    \   end\n    return prime\nend", "  return string.len > 2 and string.len % 2\n\
    end", "  if string == nil then return nil end\n  -- We will go through the string\
    \ one char at a time and\n  -- test if it's a prime number\n  for i = 1, string.len\
    \ do\n    if string.sub(i, i, string) == 0 then\n      -- If the first char in\
    \ the string is 0, the string\n      -- is not a prime number.\n      return false\n\
    \    end\n    -- For each char except the first we try to multiply\n    -- it\
    \ by itself (this also means we skip over the\n    -- char). We stop when we reach\
    \ a non-prime number\n    local j = 1\n    while j <= string.sub(i, i+1, string)\
    \ do\n      j = j + 1\n      if j > string.sub(i, i+1, string) then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "   -- Your code here\n\
    end", "  -- Write your function here.\n  -- Use the string length function string\
    \ length.\n  -- Use the string length function string length.\n  return string[1]\
    \ == 0 end\nend", "    return string.len and ((string.len() > 1) and (string.sub('1',\
    \ string.len - 1) == string.sub(string.len, 1))) or false\nend", "   for i = 2,\
    \ string.leng do\n      if string.sub(i, i) == 0 then\n         return false\n\
    \      else\n         if string.sub(i, i - 1) == string.sub(i, i) then\n     \
    \       return false\n         end\n      end\n   end\n   return true\nend", " \
    \ if string == nil then\n    error()\n  end\n  if type(string) ~= 'string' then\n\
    \    error()\n  end", "   for i = 2, #string do\n      if ((string:sub(i, i) ==\
    \ string) and (string.sub(i, i) <= #string)) then\n         return false\n   \
    \   end\n   end\n   return true\nend", "\tif string == nil then return nil end\n\
    \tlocal count = 0\n\tfor char in string do\n\t\tcount = count + 1 -- count from\
    \ 1 to the length of the string\n\tend\n\tif count == 0 then return false end\n\
    \tif count == 1 then return true end\n\t-- The first prime test will give a false\
    \ positive if the string\n\t-- starts with '2', so we will skip that initial check.\
    \ See\n\t-- https://www.mathsisfun.com/prime-numbers-permutations.html\n\tfor\
    \ i = 3, math.ceil(math.sqrt(count)) do\n\t\tif count % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  for i = 2, #string do -- prime\
    \ check loop\n    if string:sub(i, i) ~= '0' and string:sub(i, i) ~= '1' then\n\
    \      return false\n    end\n  end\n  return true\nend", "  -- Write your function\
    \ here\n  -- Example: for string = 'abcdcba'\n  --             n = 1\n  --   \
    \          prime = true\n  --             for i = 1 to len(string) do\n  --  \
    \               if string[i] ~= string[n] then\n  --                     prime\
    \ = false\n  --                 end\n  --                 n = n + 1\n  --    \
    \         end\n  --             if prime then\n  --                 return true\n\
    \  --             else\n  --                 return false\n  --             end\n\
    \  return false\nend", "  -- Base case\n  if string == nil then\n    return false\n\
    \  end\n  -- Iterate over all characters and return false if any character is\
    \ not\n  -- a decimal digit\n  for i = 1, string.len() do\n    if string.sub(i,\
    \ i, i) ~= string.sub(i, i, i) then\n      return false\n    end\n  end\n  --\
    \ If string.len() is odd, then return false because all integers are\n  -- not\
    \ primes\n  if string.len() % 2 ~= 0 then\n    return false\n  end\n  -- Else,\
    \ return true if there are only 2 consecutive prime numbers\n  for i, v in pairs(string.gmatch('^([%d]*[%d]+)'))\
    \ do\n    if i == 2 or v == 2 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    for i = 2, math.ceil(math.sqrt(#string) ) do\n        local\
    \ count = 0\n        for _, char in string.gmatch'(.)(%w)' do\n            if\
    \ char == char then\n                count = count+1\n            end\n      \
    \  end\n        if count == 0 then\n            return true\n        end\n   \
    \ end\n    return false\nend", "  return string.find(string, '[%w]')\nend", " \
    \ -- Check string for invalid characters\n  if string:sub(1,1) ~= string.char(46)\
    \ or string:sub(#string,#string) ~= string.char(46) then\n    return false\n \
    \ end\n  for i=2,#string do -- If all characters are even, return false\n    if\
    \ string[i] % 2 == 0 then return false end\n  end\n  return true\nend", "  --\
    \ Base Case\n  if string == nil then return end", "    -- base case\n    if string\
    \ == '' or string == '0' then\n        return false\n    end", "    local number\
    \ = tonumber(string) or 0\n    local test = 2\n    local prime = true", "  local\
    \ is_prime = false\n  for i = 2, #string do\n    if string.sub(string,i,i)%2 ==\
    \ 0 then\n      is_prime = true\n      break\n    end\n  end\n  return is_prime\n\
    end", "  for i = 1, #string do\n    if string[i] == 0 then\n      return false\n\
    \    end\n    if string[i] == 1 then\n      return true\n    end\n  end\nend",
  "  for i = 2, math.floor(string:len() / 2) do\n    local prime = true\n    for j\
    \ = 1, i do\n      if string:sub(i, i + j):sub(1, 1) ~= '0' then\n        prime\
    \ = false\n        break\n      end\n    end\n    if prime then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    for i = 2, #string do\n   \
    \     if string[i] == string[1] then return false end\n    end\n    return true\n\
    end", "    if string == nil then\n        return nil\n    end\n    if string ==\
    \ '' then\n        return true\n    end\n    for i = 1, #string, 1 do\n      \
    \  if string.sub(i, i) ~= '#' then\n            break\n        end\n    end\n\
    \    for i = 2, #string, 1 do\n        for j = 1, #string, 1 do\n            if\
    \ string.sub(i, i) ~= string.sub(j, j) then\n                break\n         \
    \   end\n        end\n        if string.sub(i, i) ~= '#' then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local num_chars = #string\n\
    \    return ((num_chars + 1) / num_chars - 1) == 1\nend", "    local i = 1\n \
    \   while i <= string.len do\n        if string[i] == ' ' then\n            i\
    \ = i + 1\n        elseif string.sub(i, i, i - 1) ~= '\\n' then\n            if\
    \ string[i] == '\\n' then\n                return false\n            elseif string.sub(i,\
    \ i + 1, i - 1) ~= '\\n' then\n                i = i + 2\n            else\n \
    \               i = i + 1\n            end\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return true\nend", "  return string.gsub(string,\
    \ function (x)\n    if x == '' then\n      return ''\n    end\n    local length\
    \ = 0\n    while x ~= '0' do\n      x = x:sub(1, 1)\n      length = length + 1\n\
    \    end\n    local prime = 2 -- ignore first number\n    for i = 2, math.floor(math.sqrt(length\
    \ + 2)) do\n      if length % i == 0 then\n        return false\n      end\n \
    \   end\n    return true\n  end)\nend", "\tif string == nil or string == '' or\
    \ string == 'nil' then\n\t\treturn true\n\tend\n\tlocal len = string.len\n\tlocal\
    \ function helper(number, divisor, prime)\n\t\tif number == 1 then\n\t\t\treturn\
    \ true\n\t\telseif number == 2 then\n\t\t\treturn prime and divisor\n\t\telse\n\
    \t\t\treturn helper(number / divisor, divisor, prime and divisor)\n\t\tend\n\t\
    end\n\treturn helper(len, 2, true)\nend", "  if string == nil then return nil\
    \ end\n  local s = string\n  -- Remove any leading whitespace\n  s = s:match('^%s*(.-)%s*$')\n\
    \  -- If it doesn't start with a letter, it is probably a number\n  if not s:match('^[a-zA-Z]')\
    \ then\n    return nil\n  end\n  -- Otherwise, find the first letter\n  s = s:sub(1,\
    \ 1)\n  -- Remove any extra whitespace\n  s = s:gsub('^%s*(.-)%s*$', '\\\\1')\n\
    \  -- Add 1 to the result\n  return string.len(s) + 1\nend", "    local count\
    \ = 0\n    for idx, letter in string.gmatch('(.-)') do\n        count = count\
    \ + #letter\n        if count > 1 then\n            break\n        end\n    end\n\
    \    return #string > 0 and count % 2 == 0\nend", "  -- TODO: Write a Python function\
    \ that takes a string and returns true if the string length is a prime number\
    \ or false otherwise\n  return true\nend", "   -- write your logic here\n   --\
    \ ...\n   return true\nend", "  for i = 2, #string do\n    if not string[i] then\n\
    \      return false\n    end\n    if string[i] == 'a' or string[i] == 'e' or string[i]\
    \ == 'i' or\n       string[i] == 'o' or string[i] == 'u' then\n      return false\n\
    \    end\n    for j = 1, (math.sqrt(#string) / 2) do\n      if string[i] == string[j]\n\
    \      then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "  if string == nil then return nil end\n  if #string <= 1 then return true\
    \ end\n  for i = 2, #string do\n    if math.fmod(i,string) == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    -- Write your solution here\n\
    end", "  for _, c in pairs(string) do\n    if not prime(string.len(c)) then return\
    \ false end\n  end\n  return true\nend", "\t-- Write your code here\n\t-- Use\
    \ a for loop to check each character\n\t-- Check if character is prime\n\t-- Return\
    \ true if character is prime and false otherwise\n\t-- return prime\n\t\n\treturn\
    \ true\nend", "    local count = 0\n    for i = 1, string.len()-1 do\n       \
    \ if string.sub(i, i) == string.sub(i, i+1) then\n            count = count +\
    \ 1\n        end\n    end\n    if count == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend", "  -- Write your solution here\n  local\
    \ prime_numbers = ...\n  -- If there is only one number in the string, it is prime\n\
    \  if string.len(string) == 1 then\n    return prime_numbers[string.byte(string)]\n\
    \  end\n  -- Else, we can go through each character and check\n  -- if we have\
    \ seen the character before\n  for i = 1, string.len(string) do\n    -- If we\
    \ haven't seen this character before, then we are\n    -- not prime\n    if not\
    \ prime_numbers[string.byte(string)] then\n      return false\n    end\n    --\
    \ Now, we have, so we can check for the next character\n    -- if this is a new\
    \ character that we have seen before\n    prime_numbers[string.byte(string)] =\
    \ true\n  end\n  -- There should only ever be one number in the string\n  return\
    \ prime_numbers[string.byte(string)]\nend", "  -- Write your solution here\n \
    \ return false\nend", "  local count = 0\n  for c in string:gmatch'[^' .. '&%/]+'\n\
    \  do\n    count = count+1\n    if count==1 or count==3 or count==5 or count==7\
    \ or count==11 or count==13 or count==17 then\n      return false\n    end\n \
    \ end\n  return true\nend", "    local count = 0\n    local prime = true\n   \
    \ string.gsub(string, '[^' .. '0' .. '1' .. '2' .. '3' .. '4' .. '5' .. '6' ..\
    \ '7' .. '8' .. '9' .. ']', function(x)\n        if string.sub(x, 1, 1) == '0'\
    \ then return end\n        if string.sub(x, 1, 1) == '1' then\n            count\
    \ = count + 1\n            if count == 2 then\n                prime = false\n\
    \            end\n        end\n    end)\n    return prime\nend", "    local n\
    \ = 0\n    for i = 1, #string do\n        n = n * i %  7\n    end\n    if n <=\
    \ 2 then\n        return false\n    else\n        return true\n    end\nend",
  "  -- base case\n  if string == nil then\n    return false\n  end", "   -- TODO:\
    \ Write the code for this function\nend", "   -- Your code here\n   if string\
    \ == nil then\n       return nil\n   else\n       local length = 0\n       for\
    \ i = 1, #string do\n           if string[i] == string[i] and string[i] ~= '\\\
    n' then\n               length = length + 1\n           end\n       end\n    \
    \   if #string <= 2 then\n           return true\n       else\n           if length\
    \ == 2 then\n               return true\n           else\n               if length\
    \ == 3 then\n                   return true\n               else\n           \
    \        if length <= 5 then\n                       return true\n           \
    \        else\n                       return false\n                   end\n \
    \              end\n           end\n       end\n   end\nend", "  local result\
    \ = true\n  for _,c in string.gmatch(\"([^\\n\\r]*)\", \"([^\\n\\r]*%s)\") do\n\
    \    if not(prime_number(c)) then\n      result = false\n    end\n  end\n  return\
    \ result\nend", "    if string == nil then\n        string = \"Hello World!\"\n\
    \    end", "\tif string == '' then\n\t\treturn false\n\tend", "  for i, c in pairs(string)\
    \ do\n    if c:byte() ~= c then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local prime = true\n    for i=2,math.floor(math.sqrt(string))\
    \ do\n        if string.sub(i,i) ~= ' ' then\n            prime = false\n    \
    \    end\n    end\n    return prime\nend", "    for i = 2, #string do\n      \
    \  if string.sub(string,i,i) == '' then return false end\n        for j = i +\
    \ 1, #string do\n            local t = string.sub(string,i,j)\n            if\
    \ t == t then\n                return false\n            elseif t ~= '' and t\
    \ ~= '-' and t ~= '1' and t ~= '0' then\n                return false\n      \
    \      end\n        end\n    end\n    return true\nend", "    local prime = true\n\
    \    for i = 2, #string do\n        if string.sub(string,i,i) == '' then\n   \
    \         prime = false\n            break\n        else\n            if string.sub(string,i,i)%2\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n    end\n    return prime\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I appreciate that you've tried to help me, but your code is far from correct.\
    \ There seems to be some problems with it, and I believe I should be able to fix\
    \ my code using your ideas. I'll be back at you shortly to give feedback.\n<|/\
    \ c |>\n<| c |>\nIt does work, but it's not the solution. I've been trying to\
    \ think of how to fix it, but I can't seem to find out how. If I input the string\
    \ \"hello\", it returns true. If I input the string \"hellohello\", it returns\
    \ false. I'm just trying to get it working for strings with more than one character.\
    \ I'm thinking about how I might use a loop to solve it.\n<|/ c |>\n<| c |>\n\
    : What is \"it\"? The code as it is in your question works? If so, what's your\
    \ problem?\n<|/ c |>\n<| c |>\nYes, the code as it is in my question works, however\
    \ it only checks the first character in the string. If I input the string \"hello\"\
    , it returns true. If I input the string \"hellohello\", it returns false. I'm\
    \ just trying to get it working for strings with more than one character.\n<|/\
    \ c |>\n<| c |>\n: That doesn't make any sense to me. I've written a program that\
    \ does exactly that in the first part of my answer. What is the difference between\
    \ that and what you tried? I ask because you said you tried it and got it wrong.\n\
    <|/ c |>\n<| a tags=lua |>\nThe easiest solution is to use string.gsub (Lua 5.2+):\n\
    <code>\nstring.gsub('hello', '(.-)', '$1')\n</code>\nThis simply removes the last\
    \ character from each string and returns that value without modifying the original\
    \ string.\n<|/ a dscore=2 |>\n<| c |>\nIt works, but it modifies `string`. Is\
    \ there a way to do it without modifying `string`? I'm trying to do this without\
    \ using a function.\n<|/ c |>\n<| c |>\nI don't think there is a way to do it\
    \ without modifying the original string in Lua 5.2 or above. 5.1 and below would\
    \ require creating a new string with the modified value, though.\n<|/ c |>\n<|\
    \ c |>\n: You could copy the string before applying the ", "    if #string > 1\
    \ then\n        for i = 2, #string do\n            if string[i] ~= ' ' then\n\
    \                local count = 0\n                -- Check for factors up to sqrt(i)\
    \ (where i is even)\n                for j = 2, #i do\n                    if\
    \ i % j == 0 then\n                        count = count + 1\n               \
    \     end\n                end\n                -- If count is even, i isn't a\
    \ prime\n                if count % 2 == 1 then\n                    return false\n\
    \                end\n            end\n        end\n        return true\n    end\n\
    end", "    if string == nil then\n        return 'nil'\n    end\n    local length\
    \ = #string\n    for i = 1, length do\n        local character = string:sub(i,\
    \ i)\n        local count = 0\n        for j = 2, #character do\n            count\
    \ = count + character:sub(1, j)\n        end\n        if count > 1 and count ~=\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "  if string == nil then return false end\n  local i, count = 1, 2\n  repeat\n \
    \   i = i + 1\n    count = count * i\n  until (i <= #string) and (#string == (count*i)\
    \ or string[i] == '')\n  return (count % 2) == 0 and true or false\nend", "  \
    \ for i = 1, math.sqrt(#string) do\n      if math.floor(#string / i) == #string\
    \ then\n         return false\n      end\n   end\n   return true\nend", "   for\
    \ i=2,string^1 do \n      if string%i == 0 then \n         return false \n   \
    \   end \n   end \n   return true\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a number and returns true if and only if that number is a prime number\
    \ or not. ", "\tlocal prime = 1\n\tfor i = 1, string do\n\t\tif string.sub(i,\
    \ i, i) ~= '' then\n\t\t\tprime = prime + 1\n\t\tend\n\tend\n\tif prime == 0 then\n\
    \t\treturn false\n\telse\n\t\treturn true\n\tend\nend", "  -- Based on\n  -- \
    \  http://rosettacode.org/wiki/Primality_test#Lua\n  --   http://stackoverflow.com/questions/5305305/lua-prime-number-check\n\
    \  --   http://www.lua.org/pil/11.3.html\n  local n = string.len()\n  local i\
    \ = 3\n  local result = 0\n  -- First try trial division using i-1\n  repeat\n\
    \    if string.sub(string,i,i) == '' then\n      return result\n    end\n    i\
    \ = i+2\n  until not i%2\n  -- Now try trial division using i\n  repeat\n    if\
    \ string.sub(string,i,i) == '' then\n      result = result + 1\n    end\n    i\
    \ = i+2\n  until not i%2\n  if i==n then\n    return nil\n  end\n  -- If i is\
    \ a prime, return true\n  return result%2 == 0\nend", "    local length = 1\n\
    \    for i = 2, #string do\n        if string.sub(string, 1, i) == '' then return\
    \ false end\n        for j = i + 1, #string do\n            if string.sub(string,\
    \ 1, j) == '' then return false end\n            if string.len(string.sub(string,\
    \ 1, i)) * string.len(string.sub(string, 1, j)) <= 1 then\n                return\
    \ false\n            end\n        end\n        length = length + 1\n    end\n\
    \    return true\nend", "    local len = 0\n    for i = 1, string.len() do\n \
    \       len = len + 1\n        if math.pow(string.sub(string,i,i),2) == string.sub(string,i,i)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  return string.len > 1 and string.len % 2 ~= 0 and string.len > 3\nend", "  for\
    \ i = 2, #string do\n    if string.sub(i, i) ~= '' then return false end\n  end\n\
    \  return true\nend", "  for i = 2, #string do\n    if string.sub(i, i) == ''\
    \ then\n      break\n    end\n    local count = 1\n    for j = i + 1, #string\
    \ do\n      if string.sub(i, i) == string.sub(j, j) then\n        count = count\
    \ + 1\n      end\n    end\n    if count % 2 == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    local count = 0\n    for i = 1, #string\
    \ do\n        count = count + 1\n        if string:sub(i, i) == string[i] then\n\
    \            count = count - 1\n        end\n    end\n    if count == 0 then return\
    \ false else return true end\nend", "   if string.len() == 2 then\n      return\
    \ false\n   end\n   local length = string.len() - 1\n   for i = 2, string.len()\
    \ do\n      if string.sub(string, 1, i) == string.sub(string, 1, i - 1) then\n\
    \         return false\n      end\n   end\n   return true\nend", "  -- Write your\
    \ code here\n  \n  return true\nend", "   local prime_numbers = {}\n   for idx\
    \ = 1, 10000 do\n      local digit = math.floor(idx / 10)\n      if prime ~= nil\
    \ then\n         if prime == true then\n            prime = idx % 2 == 0\n   \
    \      end\n      else\n         prime = true\n      end\n      prime_numbers[digit]\
    \ = true\n   end\n   for idx = 1, string.len() do\n      if not prime_numbers[string.sub(string,\
    \ idx, idx)]\n      then\n         return false\n      end\n   end\n   return\
    \ true\nend", "  -- We use a variable to store the length of the string in its\
    \ prime form\n  -- this lets us use that value after we are done calculating the\
    \ prime form\n  -- length. This avoids having to recalculate the length a second\
    \ time when we\n  -- do our tests\n  local num_chars = string.len(string)\n  --\
    \ The variable that will store the length of the prime form of the string is\n\
    \  -- prime and will start out as half the length of the string\n  local prime\
    \ = num_chars / 2\n  -- The variable that will store the length of the string\
    \ in its prime form\n  -- will start out as half the length of the string\n  local\
    \ prime_len = num_chars / 2\n  -- Now we loop through every character in the string\
    \ and calculate the\n  -- prime form of each character and store that value in\
    \ the prime variable\n  for i = 1, num_chars do\n    prime = math.mod(prime +\
    \ string.sub(i, i+1), 2)\n  end\n  -- Now we return the length of the prime variable\
    \ and compare it to the length\n  -- of the string we are given to determine if\
    \ we are prime\n  return prime == prime_len\nend", "  return string.gmatch(string,\
    \ \"(%s)+\") == nil\nend", "  return string.match('^%d%d*$') ~= nil\nend", " \
    \ return string.match('^%d+$') ~= nil\nend", "    local function is_prime(num,\
    \ div)\n        if num <= 1 then\n            return false\n        end\n    \
    \    for i = 2, div*div, div do\n            if num % i == 0 then\n          \
    \      return false\n            end\n        end\n        return true\n    end",
  "  local count = 0\n  for _, _ in ipairs(string) do\n    count = count + 1\n  end\n\
    \  for i = 2, #string - 1 do\n    if string[i] == string[i + 1] then\n      count\
    \ = count + 1\n    end\n  end\n  return ((count % 2) == 0)\nend", "   -- Write\
    \ your function here\n   -- print(string)\n   if string == nil then\n      return\
    \ string\n   end\n   if string[1] == nil then\n      return string\n   end\n \
    \  for i = 2, string[1] do\n      if string[i] == nil then\n         return string\n\
    \      end\n   end\n   return true\nend", "    if string == nil or string == ''\
    \ then\n        return 0\n    end\n    local length = 0\n    for i = 1, #string\
    \ do\n        length = length + string.sub(i, i)\n    end\n    local is_prime\
    \ = 1\n    for i = 1, length + 1 do\n        if ((i ^ length - 1) % i == 0) then\n\
    \            is_prime = false\n            break\n        end\n    end\n    return\
    \ is_prime\nend", "  return string\n  and string.len and string.len() > 1\n  and\
    \ string.gmatch(string, '^%a+') ~= nil\n  and string.sub('%a', 1, string.len()\
    \ div 2) == string\n  and string.sub('%a', string.len() div 2, string.len() mod\
    \ 2) == nil\n  and string.len() >= 3\n  and string.sub('%a', string.len() div\
    \ 2, string.len() mod 2) == string\n  and string.sub('%a', string.len() mod 2,\
    \ string.len() + 1) == nil\nend", "  return string.find(string, \"^1%w\")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
