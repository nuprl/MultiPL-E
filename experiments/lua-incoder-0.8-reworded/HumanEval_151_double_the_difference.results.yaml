language: lua
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then return 0 end\n   local s = 0\n   for i = 1, #lst do\n  \
    \    if lst[i] and math.floor(lst[i]) ~= lst[i] then return 0 end\n      s = s\
    \ + lst[i]^2\n   end\n   return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgaj_u61.lua:26:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmprgaj_u61.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v <= 0 or not (v % 2) then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrdagtxq.lua:29:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmptrdagtxq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    local n = lst[i]\n    if n then\n      if n < 0 then\n        sum =\
    \ -sum + n * n\n      else\n        sum = sum + n * n\n      end\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsqn95gs.lua:34:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpgsqn95gs.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for _, x in ipairs(lst) do\n        if x ~= 0 and ((x\
    \ % 2) and x ~= x^2) then\n            total = total + x\n        end\n    end\n\
    \    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz48grnu.lua:26:\
    \ expected: 25, actual: 9.0\nstack traceback:\n\t/tmp/tmphz48grnu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i,v in ipairs(lst) do\n\
    \    if v then\n      if v < 0 or not isinteger(v) then\n        print((\"WARNING:\
    \ negative number ignored during double_the_difference computation:\\n\" ..\n\
    \        \"\\tidx: \" .. tostring(i) .. \"\\n\" ..\n        \"\\tval: \" .. tostring(v)))\n\
    \      end\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4spykk4_.lua:17:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmp4spykk4_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4spykk4_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if next(lst) == nil then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if math.mod(lst[i], 2) ~= 0 then -- odd\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipfqbz2k.lua:16:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpipfqbz2k.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpipfqbz2k.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n    for\
    \ _, i in ipairs(lst) do\n        if i % 2 == 1 then\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzsncr58.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpuzsncr58.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n    local\
    \ len = #lst\n    for i = 1, len do\n        if lst[i] ~= 0 then\n           \
    \ if isinteger(lst[i]) then\n                sum = sum + lst[i] * lst[i]\n   \
    \         else\n                sum = sum + lst[i] * double_the_difference(lst[i])\n\
    \            end\n        end\n    end\n    return sum\nend\n</code>\n<|/ a |>\n\
    <| a tags=lua |>\nI believe that this is what you want.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7tamqtju.lua:29: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if type(lst) == \"table\" then\n        local sum = 0\n        local count\
    \ = 0\n        for k,v in ipairs(lst) do\n            if v == 0 or type(v) ~=\
    \ \"number\" then\n                return 0\n            end\n            if v\
    \ % 2 == 1 then\n                sum = sum + v\n                count = count\
    \ + 1\n            end\n        end\n        if count == 0 then\n            return\
    \ 0\n        end\n        return sum\n    else\n        return 0\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdggbsckk.lua:38:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpdggbsckk.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst:is_empty() then return math.fsum(lst) end\n  return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfxs4m3y.lua:13:\
    \ attempt to call a nil value (method 'is_empty')\nstack traceback:\n\t/tmp/tmphfxs4m3y.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphfxs4m3y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst[1] then\n    return 0\n  end\n  local sum = 0\n  for i = 2, #lst\
    \ do\n    local value = lst[i]\n    if value:isnumber() and value % 2 == 1 then\n\
    \      sum = sum + value\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkr0gr9zp.lua:19:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmpkr0gr9zp.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpkr0gr9zp.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if type(lst) == \"table\" then\n    local sum = 0\n    for _, x in ipairs(lst)\
    \ do\n      sum = sum + x*x\n    end\n    if sum > 0 then\n      return sum\n\
    \    end\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5yydp3a.lua:29:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpj5yydp3a.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] > 0 then\n      sum = sum + math.pow(lst[i], 2)\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnur7724.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpwnur7724.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(#lst ~= 0)\n  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]^2\n\
    \    if lst[i] > 0 then\n      return sum\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptq2rxj5s.lua:13:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmptq2rxj5s.lua:13: in local 'candidate'\n\
    \t/tmp/tmptq2rxj5s.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then\n    return 0\n  end\n  local sum = 0\n  for i=1,#lst do\n\
    \    if i%2==1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnrp71cy.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpsnrp71cy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, _ in\
    \ ipairs(lst) do\n    if _ % 2 == 1 then\n      sum = sum + _\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgbzr561.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpxgbzr561.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpxgbzr561.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 else return sum(map(function(a) return a^2 end, lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaf90tk9h.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\n  local sum = 0\n  for i = 1, #lst, 1 do\n  \
    \  if lst[i] % 2 == 1 then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuisnwpc.lua:30:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpiuisnwpc.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  elseif lst:len() == 1 then\n    return\
    \ lst:sum()\n  end\n  local sum = 0\n  for i = 1, lst:len() do\n    if lst:is_numeric()\
    \ then\n      sum = sum + lst:at(i)^2\n    elseif lst:is_vector() then\n     \
    \ sum = sum + lst:at(i)^2 * lst:at(i):fround()\n    elseif lst:is_map() then\n\
    \      sum = sum + lst:at(i):to_number():pow(2)\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96u5_ynw.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp96u5_ynw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp96u5_ynw.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n  local i = 1\n\
    \  for i = 2, #lst do\n    if lst[i] > 0 then\n      sum = sum + lst[i]*lst[i]\n\
    \    end\n  end\n  if sum < 0 then\n    sum = -sum\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_bttwd2.lua:33:\
    \ expected: 25, actual: 16.0\nstack traceback:\n\t/tmp/tmpx_bttwd2.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  local total = 0\n  for i=1,lst:len()\
    \ do\n    if lst[i]*lst[i] > 0 then\n      total = total + lst[i]*lst[i]\n   \
    \ end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbah4dif3.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpbah4dif3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbah4dif3.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  -- Return the sum of the squares\
    \ of the odd integers in the input table.\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    sum = sum + math.pow(lst[i], 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzrwxiff.lua:28:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmphzrwxiff.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst:is_empty() then\n        local sum = 0\n        for i = 1, #lst\
    \ do\n            if lst:is_value(i) and i ~= 0 and not lst:is_negative(i) then\n\
    \                sum = sum + math.pow(i, 2)\n            end\n        end\n  \
    \      return sum\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq7ytpf3.lua:13:\
    \ attempt to call a nil value (method 'is_empty')\nstack traceback:\n\t/tmp/tmpiq7ytpf3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiq7ytpf3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Return 0 if the input table is empty.\n  if not lst:is_empty() then\n  \
    \  return 0 -- The input list is not empty, so calculate the sum of the squares.\n\
    \  end\n  -- Initialize the sum to the first element in the input list.\n  local\
    \ sum = 0\n  -- Iterate over the input list.\n  for i = 1, #lst do\n    -- If\
    \ the current number in the list is an integer,\n    -- add it to the sum and\
    \ proceed to the next number.\n    if lst:is_integer() then\n      sum = sum +\
    \ lst:get_integer(i)\n      -- If the current number in the list is an odd number,\n\
    \      -- subtract it from sum and proceed to the next number.\n    elseif lst:is_odd()\
    \ then\n      sum = sum - lst:get_integer(i)\n    end\n  end\n  -- Return the\
    \ sum of the squares of the odd numbers in the input list.\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nr5335r.lua:14:\
    \ attempt to call a nil value (method 'is_empty')\nstack traceback:\n\t/tmp/tmp0nr5335r.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0nr5335r.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local n = 1\n  local s = 0\n  for\
    \ i, v in ipairs(lst) do\n    if v ~= 0 then\n      s = s + v\n      n = n * v\n\
    \    end\n  end\n  return n - (s / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fig52qo.lua:31:\
    \ expected: 25, actual: 15.5\nstack traceback:\n\t/tmp/tmp_fig52qo.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = 1\n  local num_elems = #lst\n  for i = 1, num_elems do\n   \
    \ local elem = lst[i]\n    if type(elem) == \"number\" then\n      if elem % 2\
    \ == 0 then\n        result = result + elem\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphguqo5x3.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphguqo5x3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  if #lst > 0 then\n    local i = 1\n    while i <= #lst do\n\
    \      if type(lst[i]) ~= 'number' then\n        return 0\n      else\n      \
    \  if math.floor(lst[i]) ~= lst[i] then\n          return 0\n        else\n  \
    \        sum = sum + math.pow(lst[i], 2)\n        end\n      end\n      i = i\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3__jndt.lua:36:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpa3__jndt.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaza6ht8a.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n = 1\n  local total = nil\n  if next(lst) == nil then return 0 end\n\
    \  for _, v in ipairs(lst) do\n    if v <= 0 then break end\n    if n % 2 == 1\
    \ then\n      total = total + (v * v)\n    end\n    n = n + 1\n  end\n  return\
    \ total or (n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_y_51yv.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'total')\nstack traceback:\n\
    \t/tmp/tmpx_y_51yv.lua:19: in local 'candidate'\n\t/tmp/tmpx_y_51yv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  else\n    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n      if v <= 0 then\n        print('Ignoring negative\
    \ numbers: ' .. v)\n      elseif v % 2 == 1 then\n        sum = sum + math.pow(v,2)\n\
    \      end\n    end\n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6ewa1oq.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpf6ewa1oq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf6ewa1oq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" then\n\
    \      if v < 0 then\n        sum = 0\n      elseif v % 2 ~= 0 then\n        sum\
    \ = sum + v\n      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3vz37u0.lua:30:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmph3vz37u0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  local even = 1\n\
    \  for i = 1, #lst do\n    -- Ignore negative and non-integer values.\n    if\
    \ lst[i] ~= 0 and not (i == 1 and lst[1] ~= 0) then\n      -- If even, double\
    \ the sum.\n      if even % 2 == 1 then\n        sum = sum + lst[i]\n      else\n\
    \        sum = sum - lst[i]\n      end\n      even = even + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5qx3uoo.lua:37:\
    \ expected: 25, actual: 4.0\nstack traceback:\n\t/tmp/tmpf5qx3uoo.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local s = 0\n  for i=1,#lst do\n\
    \    if tonumber(lst[i]) % 2 ~= 0 then\n      s = s + lst[i]\n    end\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8cc8xts.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpg8cc8xts.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp39a65pqn.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum_of_squares\n\tif not lst then return 0 end\n\tsum_of_squares = lst[1]\n\
    \tfor i=2, #lst do\n\t\tif lst[i] > 0 then\n\t\t\tlocal square = lst[i] * lst[i]\n\
    \t\t\tsum_of_squares = sum_of_squares + square\n\t\telse\n\t\t\tsum_of_squares\
    \ = sum_of_squares - square\n\t\tend\n\tend\n\treturn sum_of_squares\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupy42uio.lua:30:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpupy42uio.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst==0 then return 0 end\n    local sum=0\n    for n in lst:gmatch(\"\
    %d*\") do\n        if tonumber(n)==0 then continue end\n        sum=sum+tonumber(n)*tonumber(n)\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nThe function double_the_difference\
    \ takes a list of numbers and calculates the sum of squares of all even integers\
    \ in the list, and returns the result.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjn9botfj.lua:16: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local count = 0\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if v then\n      sum = sum + v * v\n      count\
    \ = count + 1\n    end\n  end\n  if count > 0 then\n    return sum * sum / count\n\
    \  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgj_3768.lua:35:\
    \ expected: 25, actual: 840.5\nstack traceback:\n\t/tmp/tmpbgj_3768.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprizbea_n.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 else (#lst>0 and lst[1]*2+lst[2]*4+lst[3]*16+lst[4]*64+lst[5]*256)\
    \ or 0 end\n  local sum = 0\n  for i = 2, #lst do sum = sum + lst[i]*lst[i] end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph5b9olw7.lua:13: syntax error near ''or''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  local max = 0\n\
    \  for i, v in ipairs(lst) do\n    if v < 0 then\n      sum = 0\n      break\n\
    \    end\n    if v > max then\n      max = v\n    end\n    sum = sum + v\n  end\n\
    \  return sum * sum / max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jl9bssn.lua:35:\
    \ expected: 25, actual: 16.2\nstack traceback:\n\t/tmp/tmp8jl9bssn.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  -- Compute sum of squares modulo\
    \ 2:\n  local s = 0\n  local x = 0\n  for i = 1, #lst do\n    x = x * 2 + lst[i]\n\
    \    s = s + x\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s_g5tr9.lua:30:\
    \ expected: 25, actual: 19.0\nstack traceback:\n\t/tmp/tmp9s_g5tr9.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkwlj23zk.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Pre-condition: input is non-empty.\n  -- Post-condition: The return value\
    \ is the sum of squared odd numbers in\n  -- the input table, excluding any negative\
    \ numbers or not integers.\n  -- >>> double_the_difference([-1, 2, 0])\n  -- 0\n\
    \  -- >>> double_the_difference([-2, 0, 0])\n  -- 0\n  -- >>> double_the_difference([9,\
    \ -2])\n  -- 81\n  -- >>> double_the_difference([9, -1])\n  -- 100\n  -- >>> double_the_difference([9,\
    \ -5])\n  -- 100\n  -- >>> double_the_difference({})\n  -- 0\n  -- >>> double_the_difference([])\n\
    \  -- 0\n  -- >>> double_the_difference([1])\n  -- 0\n  -- >>> double_the_difference([1,\
    \ 2])\n  -- 6\n  -- >>> double_the_difference([1, 3, 5])\n  -- 45\n  -- >>> double_the_difference([10,\
    \ 10, 10, 10])\n  -- 45\n  local total = 0\n  for i = 1, #lst do\n    if math.mod(lst[i],\
    \ 2) ~= 1 then\n      total = total + lst[i]\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2zjv3si.lua:40:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpg2zjv3si.lua:40:\
    \ in local 'candidate'\n\t/tmp/tmpg2zjv3si.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then\n    return 0\n  elseif #lst == 0 then\n    return 0\n  else\n\
    \    return #lst and tonumber(table.concat(lst, \"+\"))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvzras7l.lua:26:\
    \ expected: 25, actual: nil\nstack traceback:\n\t/tmp/tmpzvzras7l.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4sky_pu8.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local is_negative = false\n  local max_value = lst[1]\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgb78i8fd.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst or #lst == 0 then\n        return 0\n    end\n    local sum =\
    \ 0\n    local pos = 1\n    for i = 1, #lst do\n        if lst[i] ~= 0 then\n\
    \            sum = sum + pos ^ lst[i]\n            pos = pos >> 1\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7off0ru3.lua:31:\
    \ expected: 25, actual: 1.0\nstack traceback:\n\t/tmp/tmp7off0ru3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for i, v in ipairs(lst) do\n    if v < 0 or not (v % 2)\
    \ == 0 then -- ignore negative and odd numbers\n      total = total + v\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrkgutej.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpfrkgutej.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if type(lst) == \"table\" then\n    local sum = 0\n    for _, val in ipairs(lst)\
    \ do\n      if val ~= 0 and tonumber(val) ~= nil then\n        sum = sum + val\
    \ * val\n      end\n    end\n    return sum\n  else\n    return 0\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzf24r01.lua:30:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmptzf24r01.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local total = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      total = total + lst[i]\n    end\n  end\n \
    \ return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6upb1_f.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpz6upb1_f.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 end\n  local total = 0\n  for i=1,#lst do\n    if\
    \ type(lst[i]) == \"number\" then\n      total = total + lst[i]*lst[i]\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa798zegd.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpa798zegd.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, x in ipairs(lst) do\n    if x >= 0 then\n      sum\
    \ = (sum + x * x)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2aqd1xps.lua:26:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp2aqd1xps.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if lst == nil then return 0 end\n   local num = 0\n   for k,v in pairs(lst)\
    \ do\n      if v > 0 then\n         num = num + v*v\n      elseif v < 0 then\n\
    \         num = num - v*v\n      end\n   end\n   return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppus_7e2k.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmppus_7e2k.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaza6ht8a.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for v in lst:gmatch(\"%d*\") do\n      if v == \"0\" or\
    \ v == \"\" then return 0 end\n      sum = sum + v\n   end\n   return sum * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja_4w31x.lua:14:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpja_4w31x.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpja_4w31x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _,i in ipairs(lst) do\n    if i == \"integer\" then\n\
    \      sum = sum + i\n    elseif i ~= 0 then\n      sum = sum + i^2\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vnnzp6i.lua:28:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp1vnnzp6i.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local ret = 0\n  for _, v in ipairs(lst) do\n    if v ~= nil and v:is_integer()\
    \ then\n      ret = ret + v\n    else\n      ret = ret + 0\n    end\n  end\n \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpe6v1kq.lua:15:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmplpe6v1kq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplpe6v1kq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if not lst then return 0 end\n    local total = 0\n    local n = 0\n    for\
    \ i = 1, #lst do\n        if i == 1 or lst[i] > 0 then\n            total = total\
    \ + lst[i] * lst[i]\n            n = n + 1\n        end\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac2jv4ur.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpac2jv4ur.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  -- Create an array to hold the sums\
    \ of each of the numbers in the table.\n  local sums = {}\n  for i = 1, lst:len()\
    \ do\n    sums[i] = 0\n  end\n  -- For each element in the table, sum all the\
    \ numbers in the table.\n  for i, value in ipairs(lst) do\n    sums[i]:add(value)\n\
    \  end\n  -- Return the sum of squares of the numbers in the table that are odd.\n\
    \  return sums[#sums]:squared()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlnholkm.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpmlnholkm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmlnholkm.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- We will assume that table has at least 1 element.\n  if lst:len() == 0 then\n\
    \    return 0\n  end\n  -- Get a local copy of lst and remove its first element.\n\
    \  local list_without_first_element = lst:sub(1) + 1\n  -- Get the sum of squares\
    \ of the elements in the list that are odd.\n  local sum_of_squares_of_integers_that_are_odd_1\
    \ = 1\n  for _, elem in ipairs(list_without_first_element) do\n    -- Only sum\
    \ squares when the number is odd.\n    if elem % 2 == 1 then\n      -- We sum\
    \ squares of odd elements.\n      sum_of_squares_of_integers_that_are_odd_1 =\
    \ sum_of_squares_of_integers_that_are_odd_1 + elem * elem\n    end\n  end\n  --\
    \ Return the sum of the squares of the even elements in the list.\n  return sum_of_squares_of_integers_that_are_odd_1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3dstgla.lua:14:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpi3dstgla.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpi3dstgla.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 or not v:isnumber() then\n      return\
    \ 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpln3fwzo9.lua:31: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst:fold(\n    function(acc, item)\n      if type(item) == 'table' and\
    \ item[1] >= 0 then\n        return acc + item[1] * item[1]\n      elseif item\
    \ > 0 then\n        return acc\n      else\n        return acc\n      end\n  \
    \  end, 0\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_m2_4yng.lua:13:\
    \ attempt to call a nil value (method 'fold')\nstack traceback:\n\t/tmp/tmp_m2_4yng.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_m2_4yng.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  else\n    return lst[#lst]:map(function(x)\n\
    \      return x:double():sum(function(y)\n        return y ~= 0 and y or 0\n \
    \     end)\n    end):sum() \n  end\nend\n</cell>\n<text>\nQuestion 3\nNow suppose\
    \ we are given a new table, we need to update it so that all the numbers that\
    \ are odd are doubled up to a multiple of 3.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpodnn9if2.lua:23: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if next(lst) == nil then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9w10yan8.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local i = 0\n  \n  for i=1, #lst do\n    if lst[i] < 0 or\
    \ type(lst[i]) ~= 'number' then\n      -- ignore non-integers, ignore negative\
    \ numbers\n    else\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<text>\nGiven the function definitions above, the following\
    \ cell tests your implementations. Make sure that they give the expected results.\
    \ If they do, all test cells should evaluate to True. If not, please go over the\
    \ solutions below to see where you've made a mistake.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2vmof8f1.lua:25: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- A local variable is not used as an assignment target since we need\n  --\
    \ to support python 3.\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] %\
    \ 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqz8fq59.lua:28:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpnqz8fq59.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local even = lst:filter(function(x)\n   \
    \ return x % 2 == 0\n  end)\n  local odd = lst:filter(function(x)\n    return\
    \ x % 2 == 1\n  end)\n  return sum(even:map(function(x)\n    return x * x\n  ))\
    \ +\n    sum(odd:map(function(x)\n    return x * x\n  ))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd_omg7yh.lua:22: ''end'' expected (to close ''function'' at
    line 20) near '')''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- The solution is easy, just return the empty table\n  if next(lst) == nil\
    \ then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxt5nmq0h.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 else lst[1]*lst[1] end\n  local n = 1\n  local sum\
    \ = 0\n  for _,x in pairs(lst) do\n    if x % 2 == 1 then\n      sum = sum + x\n\
    \      n = n*x\n    end\n  end\n  return sum+n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7qthmvu5.lua:13: syntax error near ''*''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  else\n    -- Compute the sum of the square of the numbers in the input table.\n\
    \    local sum = 0\n    for i = 1, #lst do\n      local x = lst[i]\n      sum\
    \ = sum + x\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpboyi6vr4.lua:37: ''end'' expected (to close ''if'' at line
    13) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v <= 0 then\n \
    \           sum = 0\n            break\n        elseif v ~= math.floor(v) then\n\
    \            sum = sum + math.pow(v,2)\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgj6yxx3.lua:29:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpbgj6yxx3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and not (v\
    \ % 2) then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw5jkjdx.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpcw5jkjdx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n\
    \        if tonumber(lst[i]) ~= nil then\n            sum = sum + math.pow(lst[i],\
    \ 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmd7wo1q.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmptmd7wo1q.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr6fex91.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpnr6fex91.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  else\n    local res = lst[1]\n    for i = 2, #lst do\n      if res*res == lst[i]\
    \ then\n        return res\n      else\n        res = res*res + lst[i]\n     \
    \ end\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbisvl27.lua:34:\
    \ expected: 25, actual: 29.0\nstack traceback:\n\t/tmp/tmpnbisvl27.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n  for i = 2, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17o_fjhp.lua:29:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp17o_fjhp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_5wrcfmm.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i=1,#lst do\n    sum = sum + lst[i]*lst[i]\n    if lst[i]\
    \ < 0 or not (type(lst[i]) == \"number\" and not lst[i]:isdigit()) then\n    \
    \  break\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdp8dks4w.lua:16:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpdp8dks4w.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpdp8dks4w.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4sky_pu8.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = 0\n  local count  = #lst\n  for i = 1, count do\n    if lst[i]\
    \ >= 0 then\n      result = result + lst[i]^2\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7h93hth.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpb7h93hth.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local total = 0\n  for i = 1, #lst\
    \ do\n    if type(lst[i]) == \"number\" then\n      if lst[i] % 2 == 1 then\n\
    \        total = total + lst[i]\n      end\n    end\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmkzhgx1.lua:31:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpqmkzhgx1.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if len(lst) == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5iz_bu78.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp791ndote.lua:27:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmp791ndote.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      sum = sum\
    \ + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7b618_e5.lua:26:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp7b618_e5.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return 0 -- To comply with functional paradigm\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01x_087w.lua:20:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp01x_087w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal total = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v ~= nil then\n\t\t\t\
    if v <= 0 or not math.isinteger(v) then -- Ignore negative or non-integers\n\t\
    \t\t\treturn 0\n\t\t\tend\n\t\t\ttotal = total + (v * v)\n\t\tend\n\tend\n\treturn\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7uho5_tn.lua:16:\
    \ attempt to call a nil value (field 'isinteger')\nstack traceback:\n\t/tmp/tmp7uho5_tn.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp7uho5_tn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then\n    return 0\n  end\n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2nd3rru.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpz2nd3rru.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(lst)\n  if #lst == 0 then return 0 end\n  local total = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] % 2 == 1 then return 0 end\n    total = total + lst[i]\
    \ * lst[i]\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhd7_0ag.lua:27:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpjhd7_0ag.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\n   local sum = 0\n   for _, v in\
    \ pairs(lst) do\n      if v <= 0 or not is_integer(v) then\n         return 0\n\
    \      end\n      sum = sum + v\n   end\n   return sum * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp828wfh74.lua:18:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp828wfh74.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp828wfh74.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if type(v) == \"number\" then\n      if v <= 0 or type(v) == \"boolean\"\
    \ then\n        continue\n      else\n        sum = sum + v\n      end\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzqj2visc.lua:21: syntax error near ''else''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then\n    return 0\n  end\n  local sum=0\n  for i,v in pairs(lst)\
    \ do\n    if v<0 or math.floor(v)~=v then\n      sum=0\n      break\n    else\n\
    \      sum=sum+v*v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkdovsmv.lua:32:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpgkdovsmv.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] and i % 2 ~= 0 then\n  \
    \    sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp400_8w54.lua:27:\
    \ expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmp400_8w54.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tassert(lst)\n\tif lst:len() == 0 then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\
    \tfor i = 1, lst:len() do\n\t\tif lst[i] % 2 == 1 then\n\t\t\tsum = sum + lst[i]\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzk8a6epv.lua:14:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpzk8a6epv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpzk8a6epv.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  -- If the list contains 0 or 1 element,\
    \ then the result is 0.\n  if #lst == 0 or #lst == 1 then\n    return 0\n  end\n\
    \  local sum = 0\n  -- Loop through the list.\n  for i = 1, #lst do\n    local\
    \ x = lst[i]\n    -- If the current number is odd and is not an integer, then\
    \ add it.\n    if x % 2 == 1 and not x%1 then\n      sum = sum + x\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4y3_79bj.lua:25:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp4y3_79bj.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp4y3_79bj.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in pairs(lst) do\n        if v and v ~= math.floor(v)\
    \ then\n            sum = sum + v * v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a28pyoe.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp5a28pyoe.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \t-- We have a list of ints, find the sum of the squares of those ints.\n\t--\
    \ The sum of the squares is going to be the sum of the squares of the odd numbers\
    \ in the list.\n\tlocal odd_squares  = {}\n\tlocal sum          = 0\n\t-- Loop\
    \ through each number in the list to see if it's odd or not.\n\tfor i, num in\
    \ pairs(lst) do\n\t\t-- If it's odd, then add it to our list of odd squares.\n\
    \t\tif num & 1 then\n\t\t\t-- We don't need to do anything if the number was already\
    \ in the list.\n\t\t\tif odd_squares[num] then return 0 end\n\t\t\t-- This number\
    \ is odd, so add it to the list.\n\t\t\todd_squares[num] = 1\n\t\t\t-- Increment\
    \ the sum of squares.\n\t\t\tsum = sum + num * num\n\t\tend\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a4bcifx.lua:36:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp0a4bcifx.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  end\n  local even = 0\n  local odd\
    \ = 0\n  for i = 1, lst:len() do\n    local value = lst[i]\n    if value == 0\
    \ then\n      even = even + value\n    else\n      if value % 2 == 0 then\n  \
    \      even = even + value * value\n      else\n        odd = odd + value * value\n\
    \      end\n    end\n  end\n  return even + odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvftuz2d_.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpvftuz2d_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvftuz2d_.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if type(lst) ~= 'table' then return {} end\n  local sum = 0\n  for i, x in\
    \ pairs(lst) do\n    if type(x) == 'number' and x ~= 0 then\n      if x > 0 then\n\
    \        sum = sum + x * x\n      else\n        sum = sum + x\n      end\n   \
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirbg0mfy.lua:31:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpirbg0mfy.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local total = 0\n  for i = 1, #lst do\n \
    \   total = total + lst[i]\n    if total % 2 == 1 then return 0 end\n  end\n \
    \ return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxby5cz90.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpxby5cz90.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local s = 0\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      s = s + lst[i]*lst[i]\n\
    \    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiic04au.lua:26:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpoiic04au.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, value in ipairs(lst) do\n    if math.abs(value) >=\
    \ 1 then\n      sum = sum + value\n    end\n  end\n  if sum ~= 0 then\n    return\
    \ sum\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5lykbit.lua:29:\
    \ expected: 25, actual: 9.0\nstack traceback:\n\t/tmp/tmpc5lykbit.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- The result is guaranteed to be correct if lst is not nil,\n  -- but in that\
    \ case we know that sum(lst) == 0.\n  local sum = 0\n  if lst then\n    sum =\
    \ 1\n    for _, x in ipairs(lst) do\n      -- Ignore negative numbers, since they\
    \ would still cause the sum to be 0.\n      if x < 0 then\n        return 0\n\
    \      end\n      sum = sum * x\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo84wgog.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfo84wgog.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if lst:len() == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0hsbl90n.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i]%2 == 1 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp219kp92q.lua:26:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmp219kp92q.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg86ma46b.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    local n = v:int() + 0\n    if n > 0 then\n      sum = sum + n * (n -\
    \ 1)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoq9bl14z.lua:18:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpoq9bl14z.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpoq9bl14z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst:fold(0, function(a, b) \n    if a < 0 or not b or b < 0 or not a\
    \ then return a end\n    return a + math.pow(b, 2)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgzlt069.lua:13:\
    \ attempt to call a nil value (method 'fold')\nstack traceback:\n\t/tmp/tmpqgzlt069.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqgzlt069.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst[#lst] * lst[#lst] or 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphajenj1f.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmphajenj1f.lua:13: in local 'candidate'\n\t/tmp/tmphajenj1f.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor i, v in pairs(lst) do\n\t\tif not v:isnumber() or v <=\
    \ 0 then\n\t\t\treturn sum\n\t\telse\n\t\t\tsum = sum + v * v\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5al4my9.lua:15:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpb5al4my9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpb5al4my9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if len(lst) == 0 then return 0 end\n  local total = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v < 0 or not is_integer(v) then break end\n    total = total + (v\
    \ * v)\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgfuf83qn.lua:13:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpgfuf83qn.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgfuf83qn.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, value in ipairs(lst) do\n        if value % 2 ==\
    \ 1 then\n            sum = sum + value ^ 2\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm47j5l7j.lua:29:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpm47j5l7j.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst or #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf77u7w6.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpsf77u7w6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n\n  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd0oa2ksj.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  end\n  local sum = 0\n  for _, item\
    \ in ipairs(lst) do\n    if item > 0 and not (item % 2) then\n      sum = sum\
    \ + item\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsozv7x_.lua:29:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmphsozv7x_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal sum = 0\n\tfor _, value in pairs(lst) do\n\t\tif not (type(value) == 'number')\
    \ then\n\t\t\treturn 0\n\t\tend\n\t\tif value == 0 then\n\t\t\tbreak\n\t\tend\n\
    \t\tif value == 1 then\n\t\t\tsum = sum + value\n\t\telseif value % 2 == 0 then\n\
    \t\t\tsum = sum + value * value\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65_8814_.lua:34:\
    \ expected: 25, actual: 16.0\nstack traceback:\n\t/tmp/tmp65_8814_.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]^2\n\
    \  else\n    local sum = 0\n    for _, x in ipairs(lst) do\n      if x > 0 then\n\
    \        sum = sum + x^2\n      end\n    end\n    return sum\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd67yu59.lua:32:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpfd67yu59.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n    if\
    \ lst[i] < 0 then\n      return 0\n    end\n    if lst[i] ~= math.floor(tonumber(lst[i]))\
    \ then\n      return 0\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa_s11a2.lua:30:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpqa_s11a2.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg86ma46b.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local s = 0\n  for i, v in ipairs(lst) do\n    if type(v) == 'number' and v\
    \ ~= 0 then\n      if math.floor(v) ~= v then -- ignore non-integers\n       \
    \ s = s + v * v\n      end\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93qj767q.lua:28:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp93qj767q.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if type(lst) == 'table' then\n      local result = 0\n      for _, v in ipairs(lst)\
    \ do\n         if v ~= nil then\n            result = (v % 2 == 1) ? result +\
    \ v : result\n         end\n      end\n      return result\n   else\n      return\
    \ 0\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf6j0a60h.lua:17: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n = 1\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      n = n*(-1)\n      sum = sum + lst[i]\n    else\n      if n % 2 == 1 then\n\
    \        sum = sum + lst[i]\n      else\n        sum = sum + lst[i]*lst[i]\n \
    \     end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneiu489l.lua:34:\
    \ expected: 25, actual: 9.0\nstack traceback:\n\t/tmp/tmpneiu489l.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst, 1 do\n\
    \    sum = sum + lst[i] * lst[i]\n    if lst[i] > 0 then sum = sum + 2 * lst[i]\
    \ end\n    if lst[i] < 0 then\n      sum = sum + 2 * lst[i]\n      if lst[i] >\
    \ 0 then\n        sum = sum + 4 * (lst[i] - 1)\n      elseif lst[i] < 0 then\n\
    \        sum = sum + 8 * (lst[i] - 1)\n      end\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi72vs6f6.lua:34:\
    \ expected: 25, actual: 59.0\nstack traceback:\n\t/tmp/tmpi72vs6f6.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp39a65pqn.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if not lst then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdcmm30po.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then return 0 end\n  local sum=0\n  for i=1,#lst,2 do\n    local\
    \ x = lst[i]\n    if x ~= 0 and x ~= 1 then sum=sum+x*x end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdy5m2eel.lua:27:\
    \ expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpdy5m2eel.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  for _, value in ipairs(lst) do\n    if value <= 0 then\n      return 0\n  \
    \  end\n  end\n  local sum = 0\n  for _, value in ipairs(lst) do\n    sum = sum\
    \ + value * value\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbvb_t9s.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpwbvb_t9s.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Return the sum of the squares of the numbers in the input table.\n  -- The\
    \ sum of the squares of any number less than x is (x*x).\n  -- The sum of the\
    \ squares of any number greater than x is ((x-1)*(x-1))\n  --\n  -- >>> double_the_difference([4,\
    \ 9, 16])\n  -- 598\n  -- >>> double_the_difference([])\n  -- 0\n  -- >>> double_the_difference({})\n\
    \  -- 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxr75m917.lua:36: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local n = #lst\n  for i = 1, n do\n    if lst[i] > 0 then\n\
    \      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsvfh5m_.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpvsvfh5m_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, value in ipairs(lst) do\n    if value < 0 or not type(value)\
    \ then return 0 end\n    sum = sum + value * value\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w078z__.lua:25:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp3w078z__.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal result = 0\n\tfor i, x in pairs(lst) do\n\t\tif not x:is_number() then\n\
    \t\t\terror(\"table contains non-numeric value\", 2)\n\t\tend\n\t\tif x:sign()\
    \ ~= 0 then\n\t\t\terror(\"negative values are not allowed\")\n\t\tend\n\t\tresult\
    \ = result + (x % 2 == 1 and x or 0)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9cfsw1_.lua:15:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpg9cfsw1_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpg9cfsw1_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i] * lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvibqtmy.lua:32:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmplvibqtmy.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyxodib50.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(lst)\n  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv7rcekfh.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] ~= 0 and not (lst % 2) then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpake6j1da.lua:15:\
    \ attempt to perform arithmetic on a table value (local 'lst')\nstack traceback:\n\
    \t/tmp/tmpake6j1da.lua:15: in local 'candidate'\n\t/tmp/tmpake6j1da.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst:reduce(\n    function(total, num)\n      local ok, num = pcall(function()\
    \ return tonumber(num) end)\n      if ok == true and num > 0 then\n        return\
    \ total + math.pow(2, num)\n      end\n      return total\n    end, 0\n  )\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_pqv8wy.lua:13:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpb_pqv8wy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpb_pqv8wy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > 0 and type(lst[i]) ==\
    \ 'number' then\n      sum = sum + lst[i] * lst[i]\n    end\n  end\n  if #lst\
    \ == 0 then\n    return 0\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j8y7c47.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp6j8y7c47.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then\n    return 0\n  else\n    return lst[1]:real*lst[1]:real+lst[2]*lst[2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5go7aljo.lua:16: function arguments expected near ''*''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, value in ipairs(lst) do\n    sum = sum + value ^ 2\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifoaedu1.lua:24:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpifoaedu1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i]) ~= 'number' then break\
    \ end\n    if lst[i] < 0 then break end\n    if math.floor(lst[i]) ~= lst[i] then\
    \ break end\n    sum = sum + lst[i] * lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr__dp42r.lua:27:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpr__dp42r.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst,\
    \ 2 do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aeobxox.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmp3aeobxox.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if type(v) ~= 'number' then\n      -- Ignore non-numbers.\n      continue\n\
    \    end\n    if v > 0 then\n      -- Ignore negative numbers.\n      continue\n\
    \    end\n    sum = sum + v\n  end\n  return sum * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0pf93wc0.lua:21: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if lst:len() == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvjdrpa3d.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_afp72ja.lua:29:\
    \ expected: 25, actual: 4.0\nstack traceback:\n\t/tmp/tmp_afp72ja.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local total = 0\n  for _, value in ipairs(lst) do\n    if value % 2 == 1 then\n\
    \      total = total + value * value\n    end\n  end\n  return total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19863sdo.lua:29:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp19863sdo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- If list is empty, return 0.\n  if #lst == 0 then\n    return 0\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptqtjimsd.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i] * lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvibqtmy.lua:32:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmplvibqtmy.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_5wrcfmm.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst==0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwk_5htw.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmprwk_5htw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst[1] then\n    return 0\n  end\n  local sum = 0\n  for _, val in pairs(lst)\
    \ do\n    if val > 0 then\n      sum = sum + val^2\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo5amxpq.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpfo5amxpq.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v ~= 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oc1dgqz.lua:29:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp4oc1dgqz.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\n  return sum( -- Sum squares plus one\n    map(function(x)\n\
    \      return x * x\n    end, lst\n    ) ) + 1 -- Add one to account for the one\
    \ that is not a number.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7cz0p4i.lua:15:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpr7cz0p4i.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpr7cz0p4i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst[1] then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzata4vqw.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local result = 0\n  for _, v in ipairs(lst) do\n    if v <= 0 or not isinteger(v)\
    \ then\n      return 0\n    end\n    result = result + v\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrmfgmby.lua:15:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmplrmfgmby.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplrmfgmby.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i=1, #lst do\n    sum\
    \ = sum + lst[i]\n    if sum % 2 == 1 then return 0 end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1cbujlt.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpe1cbujlt.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst:is_empty() then\n    local sum = 0\n    for _, v in ipairs(lst)\
    \ do\n      if v ~= nil and tonumber(v) ~= nil then\n        sum = sum + tonumber(v)^2\n\
    \      end\n    end\n    return sum\n  end\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpto1mj9ni.lua:13:\
    \ attempt to call a nil value (method 'is_empty')\nstack traceback:\n\t/tmp/tmpto1mj9ni.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpto1mj9ni.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_5wrcfmm.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if not lst then return 0 end\n  local sum = 0\n  for i=1,#lst do\n    if not\
    \ (type(lst[i]) == \"number\") then return 0 end\n    if type(lst[i]) ~= 'number'\
    \ then return 0 end\n    if lst[i] < 0 then return 0 end\n    if lst[i] % 2 ==\
    \ 1 then sum = sum + lst[i]*lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvudwgz0i.lua:33:\
    \ expected: 165, actual: 0\nstack traceback:\n\t/tmp/tmpvudwgz0i.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v < 0 or (v % 1 == 0) then\n      sum = sum + v\n    end\n  end\n\
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv2ih2is.lua:29:\
    \ expected: 25, actual: 18.0\nstack traceback:\n\t/tmp/tmppv2ih2is.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local total = 0\n    for _, v in pairs(lst) do\n        if v:is_number()\
    \ then\n            if v ~= math.floor(v) then\n                total = total\
    \ + v\n            end\n        else\n            total = 0\n        end\n   \
    \ end\n    if total == 0 then\n        return 0\n    else\n        return total\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvvpjxav.lua:15:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpfvvpjxav.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfvvpjxav.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   local sum = 0\n   for _, v in ipairs(lst) do\n      if not is_integer(v) then\n\
    \         return sum\n      elseif v == 0 then\n         return sum\n      else\n\
    \         sum = sum + v\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ldud7zu.lua:15:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp7ldud7zu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7ldud7zu.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(lst)\n  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1,\
    \ #lst, 2 do\n    local num = lst[i]\n    if type(num) == 'number' then\n    \
    \  if num % 2 == 1 then sum = sum + num end\n    elseif num == nil then\n    \
    \  sum = sum\n    else\n      print('Invalid argument to double_the_difference\
    \ in Lua: ' .. tostring(lst))\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcib76_y.lua:33:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpdcib76_y.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  local num_odds = 0\n  for _, value in ipairs(lst) do\n   \
    \ if value ~= 0 then\n      local is_odd = not (value % 2)\n      sum = sum +\
    \ value * value\n      if is_odd then num_odds = num_odds + 1 end\n    end\n \
    \ end\n  return sum if sum and num_odds then return sum / num_odds else return\
    \ 0 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyqv5o_4l.lua:22: ''end'' expected (to close ''function'' at
    line 12) near ''if''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  assert(type(lst) == \"table\")\n  -- If the table is empty, return 0.\n  if\
    \ #lst == 0 then\n    return 0\n  else\n    -- Otherwise, add up the squares of\
    \ all the odd numbers in the table.\n    local sum = 0\n    for i = 1, #lst, 1\
    \ do\n      -- If the number is odd, add it to the sum.\n      if math.floor(lst[i])\
    \ % 2 == 1 then\n        sum = sum + lst[i] * lst[i]\n      end\n    end\n   \
    \ return sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqimu8e8p.lua:37:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpqimu8e8p.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] % 2 ~= 0 then return 0 end\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q_m7ggn.lua:26:\
    \ expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp2q_m7ggn.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local n = #lst\n  if not n then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk080ooxh.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() then\n    local sum = 0\n    for i = 1, lst:len() do\n      if\
    \ type(lst[i]) == \"number\" then\n        if lst[i] % 2 == 1 then\n         \
    \ sum = sum + lst[i] * lst[i]\n        end\n      end\n    end\n    return sum\n\
    \  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8onazbq.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpn8onazbq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpn8onazbq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, num in ipairs(lst) do\n    if type(num) ~= 'number'\
    \ then\n      print('Input table is empty')\n      return\n    end\n    if num\
    \ > 0 then\n      sum = sum + num\n    end\n  end\n  if sum == 0 then\n    sum\
    \ = 1\n  end\n  return sum * (sum - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7_uvkjm.lua:33:\
    \ expected: 25, actual: 72.0\nstack traceback:\n\t/tmp/tmpi7_uvkjm.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst:fold(0, function (accum, x)\n    if x > 0 then\n      if x % 2 ~=\
    \ 0 then return 0 end\n      accum = accum + x\n    end\n    return accum\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1oi_0rbi.lua:13:\
    \ attempt to call a nil value (method 'fold')\nstack traceback:\n\t/tmp/tmp1oi_0rbi.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1oi_0rbi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return lst[#lst] ~= 0 and (lst[#lst] + lst[#lst - 1]) * (lst[#lst] % 2 ~= 0\
    \ and 1 or -1) or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppax6vddr.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmppax6vddr.lua:13: in local 'candidate'\n\t/tmp/tmppax6vddr.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst = 0 then\n    return 0\n  end\n  local sum = 0\n  local i = 1\n  while\
    \ i <= #lst do\n    if i %% 2 == 1 then\n      sum = sum + lst[i]\n    end\n \
    \   i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbnsf0kbx.lua:13: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum_of_squares = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0\
    \ then\n            sum_of_squares = sum_of_squares + math.pow((lst[i] - 1) ^\
    \ 2, 2)\n        end\n    end\n    return sum_of_squares\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_czbwx8.lua:26:\
    \ expected: 25, actual: 337.0\nstack traceback:\n\t/tmp/tmpq_czbwx8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1,\
    \ lst:len() do\n    local num = lst:at(i)\n    if num >= 0 and num % 2 == 1 then\n\
    \      sum = sum + num * num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zntovef.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp4zntovef.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4zntovef.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 ~= 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx647y9r3.lua:29:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpx647y9r3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst:len() == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp39a65pqn.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Base case.\n  if lst:len() == 0 then\n    return 0\n  end\n  -- Iterate\
    \ over the table of numbers until we find the first number that\n  -- isn't an\
    \ integer.\n  for i = 1, lst:len() do\n    -- If the number at the current index\
    \ isn't an integer, continue.\n    -- The table of numbers we're iterating over\
    \ is non-integer.\n    if type(lst[i]) ~= 'number' then\n      continue\n    end\n\
    \    -- If the number at the current index is a negative integer, continue.\n\
    \    if lst[i] < 0 then\n      continue\n    end\n    -- If the number at the\
    \ current index is a positive integer, continue.\n    if lst[i] > 0 then\n   \
    \   continue\n    end\n    -- If we've found the first positive integer, return\
    \ the sum of the squares\n    -- of all the numbers after the positive integer\
    \ that aren't evenly\n    -- divisible by all the numbers before the positive\
    \ integer.\n    if i ~= 1 then\n      local sum = 0\n      for j = i + 1, lst:len()\
    \ do\n        -- If the number is odd and divisible by the number before it,\n\
    \        -- add it to the sum.\n        if lst[j] % lst[i] ~= 0 then\n       \
    \   sum = sum + lst[j]\n        end\n      end\n      -- Return the sum of the\
    \ squares of the numbers after the positive\n      -- integer that aren't evenly\
    \ divisible by the number before it.\n      return sum * sum\n    end\n  end\n\
    \  -- If the for loop completes without returning, then there were no odd\n  --\
    \ numbers in the input table.\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp97gh0rec.lua:24: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_5wrcfmm.lua:27: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\
    \ * lst[1]\n  end\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k_oq1g8.lua:31:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp_k_oq1g8.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      lst[i] = 0\n    end\n    sum = sum + lst[i]\
    \ * lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2utdmgut.lua:30:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp2utdmgut.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    if #lst == 0 then return 0 else return sum(tonumber(string.sub(table.concat(lst),\
    \ 2)) * tonumber(string.sub(table.concat(lst), 2)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpauoie89a.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  local n = #lst\n  for i =\
    \ 1, n do\n    if lst[i]%2==1 then sum = sum+lst[i] end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0id5zrl.lua:26:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmpd0id5zrl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \   if #lst == 0 then\n      return 0\n   end\n   return lst[1] * (lst[1] - 1)\
    \ + double_the_difference(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkathqqmd.lua:16: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqfcsnxx.lua:29: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst==nil then return 0 end\n  local sum = 0\n  for v in lst do sum = sum\
    \ + v*v end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01j7j_u9.lua:15:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp01j7j_u9.lua:15: in local 'candidate'\n\t/tmp/tmp01j7j_u9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  else\n    -- Compute the sum of the first few odd integers in the list.\n \
    \   local sum = lst[1]\n    for i = 2, #lst do\n      sum = sum + lst[i]\n   \
    \ end\n    -- Square it.\n    local sqr = sum * sum\n    -- Add the first odd\
    \ integer.\n    local first = 1\n    -- Now scan the list to see if there are\
    \ any odd numbers left.\n    for i = 2, #lst do\n      if lst[i] % 2 ~= 0 then\n\
    \        first = first + 1\n      end\n      -- Add the squared value of the odd\
    \ integer to the sum.\n      sum = sum + first * first * sqr + (lst[i] / 2) *\
    \ sqr ^ 2\n    end\n    -- Return the sum of the squared odd numbers.\n    return\
    \ sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypw3wms4.lua:44:\
    \ expected: 25, actual: 13212.0\nstack traceback:\n\t/tmp/tmpypw3wms4.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  else\n    return lst[1]*lst[1] + double_the_difference(lst[#lst+1])\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4bdbrmd.lua:13:\
    \ attempt to get length of a nil value (local 'lst')\nstack traceback:\n\t/tmp/tmpj4bdbrmd.lua:13:\
    \ in upvalue 'double_the_difference'\n\t/tmp/tmpj4bdbrmd.lua:18: in local 'candidate'\n\
    \t/tmp/tmpj4bdbrmd.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i]) ~= 'number' or lst[i]\
    \ < 0 then\n      sum = sum + 1\n    elseif lst[i] % 2 == 1 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k6u0pjn.lua:28:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmp5k6u0pjn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \tlocal count = 0\n\tfor i, v in pairs(lst) do\n\t\tif v ~= 0 and v ~= 1 then\n\
    \t\t\tcount = count + (v * v)\n\t\tend\n\tend\n\treturn count or 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89sibxql.lua:26:\
    \ expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp89sibxql.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  return tonumber(table.concat(tonumber(lst)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9b2goo_.lua:13:\
    \ bad argument #1 to 'concat' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpc9b2goo_.lua:13: in local 'candidate'\n\t/tmp/tmpc9b2goo_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  local sum = 0\n  for i, x in ipairs(lst)\
    \ do\n    if x ~= nil and x:isdigit() then\n      sum = sum + tonumber(x)\n  \
    \  elseif x > 0 then\n      sum = sum + x\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp734fgb61.lua:18:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmp734fgb61.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp734fgb61.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in pairs(lst) do\n    if v % 2 == 1 then sum = sum\
    \ + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp051drmo3.lua:24:\
    \ expected: 25, actual: 5.0\nstack traceback:\n\t/tmp/tmp051drmo3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- The first number is the first number in the input list if the input list\
    \ is not empty\n  if lst[1] then\n    -- Take the square of the first number in\
    \ the list\n    return lst[1]:cmul(lst[1]):sum()\n  else\n    -- If the input\
    \ list has only one element or no elements, return 0\n    return 0\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdftkwbun.lua:16:\
    \ attempt to index a number value (field 'integer index')\nstack traceback:\n\t\
    /tmp/tmpdftkwbun.lua:16: in local 'candidate'\n\t/tmp/tmpdftkwbun.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- Check if table is empty.\n  if not lst then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz5b8cwz9.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] and lst[i] % 2 == 1 then\n\
    \      sum = sum + lst[i]*lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_vpmb0x.lua:29:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpz_vpmb0x.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977906
- exit_code: 1
  program: "-- Given a table of numbers, return the sum of squares of the numbers\n\
    -- in the table that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  if len(lst) == 0 then\n    return 0\n  end\n  return sum(map(function(x)\n\
    \    return x * x\n  end, (lst)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3evhhqu2.lua:13:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp3evhhqu2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3evhhqu2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977906
