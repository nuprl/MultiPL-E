name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a table\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n--\
  \ >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a\
  \ b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n\
  -- >>> histogram('')\n-- {}\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return test\n  \t   and test:gmatch(\"%a([A-Za-z])\")\n  \t   and\
    \ setmetatable({},\n  \t   { __index = function(t, n)\n  \t    return table.getn(t[n])\
    \ + 1 end})\nend", "  local counts = terralib.newlist()\n  for _, letter in ipairs(test)\
    \ do\n    local count = tonumber(string.match(test, letter .. '([%s])'))\n   \
    \ if count ~= nil then\n      counts[letter] = count\n    end\n  end\n  local\
    \ histo = {}\n  for _, letter in ipairs(counts) do\n    if histo[letter] == nil\
    \ then\n      histo[letter] = 1\n    else\n      histo[letter] = histo[letter]\
    \ + 1\n    end\n  end\n  histo = table.concat(histo, '=')\n  return histo\nend",
  "  if test == nil then\n    return {}\n  end\n  local letters = {}\n  local max\
    \ = 0\n  local current = {}\n  for letter, count in pairs(test) do\n    if letters[letter]\
    \ ~= nil then\n      letters[letter] = letters[letter] + count\n    else\n   \
    \   letters[letter] = count\n    end\n    max = math.max(max, count)\n  end\n\
    \  for letter, count in pairs(letters) do\n    current = {letter, count}\n   \
    \ if count > max then\n      break\n    end\n  end\n  return current\nend", " \
    \ local counts = {}\n  for letter, count in pairs(test) do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local map = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    local count = 1\n    local _, k = unpack(map)\n    for i = 1, k do\n\
    \      if test[i] == letter then\n        count = count + 1\n      end\n    end\n\
    \    map[letter] = count\n  end\n  return map\nend", "  local ret = {}\n  local\
    \ letters = {}\n  for letter, count in pairs(test) do\n    table.insert(letters,\
    \ letter)\n    count = count or 1\n    ret[letter] = ret[letter] or {}\n    table.insert(ret[letter],\
    \ count, count)\n  end\n  local max = {}\n  for k, v in pairs(ret) do\n    table.sort(v)\n\
    \    local maxCount = 1\n    local maxLetter\n    for _, count in pairs(v) do\n\
    \      if count > maxCount then\n        maxCount = count\n        maxLetter =\
    \ k\n      end\n    end\n    if maxLetter == '' then\n      maxLetter = 'a'\n\
    \    end\n    max[maxLetter] = max[maxLetter] or {}\n    table.insert(max[maxLetter],\
    \ k, v)\n  end\n  local result = {}\n  for _, maxLetter in pairs(max) do\n   \
    \ result[maxLetter] = max[maxLetter][#max[maxLetter]]\n  end\n  return result\n\
    end", "    local tb = {}\n    for word in string.gmatch(test, \"([^ ]*)\") do\n\
    \        for letter, count in pairs(tb.letters) do\n            count = count\
    \ or 0\n            if letter == word then\n                count = count + 1\n\
    \                tb[letter] = count\n                table.shuffle(tb.letters)\n\
    \            end\n        end\n    end\n    table.shuffle(tb.letters)\n    return\
    \ tb\nend", "  if not test then\n    return {}\n  elseif test:find(' ') then\n\
    \    local counts = { }\n    for letter in test:gmatch('%a') do\n      local count\
    \ = counts[letter] or 0\n      counts[letter] = count + 1\n    end\n    return\
    \ counts\n  else\n    return { [test] = 1 }\n  end\nend", "  local result = {}\n\
    \  for letter in string.gmatch(test, \"([a-z ])\") do\n    result[letter] = result[letter]\
    \ or 1\n  end\n  return result\nend", "  local t = {}\n  for _, letter in ipairs(test)\
    \ do\n    t[letter] = t[letter] or 1\n    t[letter] = t[letter] + 1\n  end\n \
    \ local max_count\n  local max_letter\n  for letter, count in pairs(t) do\n  \
    \  if max_count is nil then\n      max_letter = letter\n      max_count = count\n\
    \    elseif max_count < count then\n      max_letter = letter\n      max_count\
    \ = count\n    end\n  end\n  return t\nend", "  local function charfreq(cnt)\n\
    \    local ret = { }\n    local letters = string.gsub(test, \"[\" .. string.lower(string.rep(\"\
    a b c\", cnt)) .. \"]\", \"\")\n    local letters = letters:gsub(\"[\" .. string.lower(string.rep(\"\
    a b c a b\", cnt)) .. \"]\", \"\")\n    local letters = letters:gsub(\"[\" ..\
    \ string.lower(string.rep(\"a b c a b\", cnt)) .. \"]\", \"\")\n    local letters\
    \ = letters:gsub(\"[\" .. string.lower(string.rep(\"a b c a b\", cnt)) .. \"]\"\
    , \"\")\n    local letters = letters:gsub(\"[\" .. string.lower(string.rep(\"\
    a b c a b\", cnt)) .. \"]\", \"\")\n    local letters = letters:gsub(\"[\" ..\
    \ string.lower(string.rep(\"a b c a b\", cnt)) .. \"]\", \"\")\n    for letter\
    \ in letters:gmatch(\"a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z\") do\n\
    \      if not ret[letter] then\n        ret[letter] = 0\n      end\n      ret[letter]\
    \ = ret[letter] + 1\n    end\n    return ret\n  end", "  local histo = {}\n  for\
    \ _, _, c in test:gmatch\"(%l+) %d *$\" do\n    histo[c] = histo[c] or 0\n   \
    \ histo[c] = histo[c] + 1\n  end\n  return histo\nend", "  local counts = {}\n\
    \  local letters = test\n  while not empty(letters) do\n    for letter in letters\
    \ do\n      counts[letter] = counts[letter] or 1\n      counts[letter] = counts[letter]\
    \ + 1\n    end\n    letters = trim(letters, 'a')\n  end\n  return counts\nend",
  "    local counts = {}\n    for letter in unpack(test:gmatch(\"%a\"))\n    do\n\
    \        if counts.hasOwnProperty(letter)\n            then\n                counts[letter]\
    \ = counts[letter] + 1\n            else\n                counts[letter] = 1\n\
    \            end\n        end\n    end\n    return counts\nend", "  local count\
    \ = tables.new({ })\n  for _, rec in ipairs(string.gmatch(test, \"([a-zA-Z]+)\"\
    ) ) do\n    local letter = string.lower(rec)\n    if count[letter] == nil then\
    \ count[letter] = 1 end -- init count\n    count[letter] = count[letter] + 1 --\
    \ increment count for each letter\n  end \n  return count\nend", "  local counts\
    \ = {}\n  for letter, count in pairs(test) do\n    table.insert(counts, letter,\
    \ count)\n  end\n  table.sort(counts)\n  return counts\nend", "\tlocal result\
    \ = {}\n\tfor letter in string.gmatch(test, \"[^ ]+\") do\n\t\tlocal count = tonumber(test)\n\
    \t\tif count then\n\t\t\tresult[letter] = count\n\t\tend\n\tend\n\treturn result\n\
    end", "    local counts = { }\n    for _, letter in ipairs(test) do\n        counts[letter]\
    \ = counts[letter] or 1\n        counts[letter] = counts[letter] + 1\n    end\n\
    \    return counts\nend", "  local letters = test..' '\n  local histogram = {}\n\
    \  for i = 1, #letters do\n    if histogram[letters[i]] ~= nil then\n      histogram[letters[i]]\
    \ = histogram[letters[i]] + 1\n    else\n      histogram[letters[i]] = 1 \n  \
    \  end\n  end\n  return histogram\nend", "    local tbl = {}\n    local maxVal\
    \ = 0\n    for letter in string.gmatch(test, \"(%a+)\") do\n        if tbl[letter]\
    \ ~= nil then\n            tbl[letter] = tbl[letter] + 1\n            if maxVal\
    \ < tbl[letter] then\n                maxVal = tbl[letter]\n            end\n\
    \        else\n            tbl[letter] = 1\n        end\n    end\n    return tbl\n\
    end", "\tlocal t = {}\n\tfor letter in string.gmatch(test, \"[%a]+\") do\n\t\t\
    if t[letter] ~= nil then t[letter] = t[letter] + 1 end\n\tend\n\treturn t\nend",
  "  local function compare(a, b)\n    if a[1] == b[1] then return 0 end\n    if a[1]\
    \ == nil then return 1 end\n    if b[1] == nil then return -1 end\n    if a[1]\
    \ < b[1] then return -1 end\n    if a[1] > b[1] then return 1 end\n    return\
    \ 0\n  end\n  return test:gsub(\"[^ ]\", \" \"):gsub(\"^ \", \"\"):gsub(\" *$\"\
    , \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"^ \", \"\"):gsub(\" *$\"\
    , \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"^ \", \"\"):gsub(\" *$\"\
    , \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"^ \", \"\"):gsub(\"\
    \ *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"^ \", \"\"):gsub(\"\
    \ *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"^ \", \"\"\
    ):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"^ \", \"\"\
    ):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"^ \"\
    , \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"^ \"\
    , \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"):gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\")\n    :gsub(\"\
    ^ \", \"\"):gsub(\" *$\", \"\"):gsub(\"^ *\", \"\"):gsub(\" *$\", \"\"", "  local\
    \ letters = {}\n  for _, item in ipairs(string.gmatch(test, \"([^ ]+)\")) do\n\
    \    local letter, count = item:sub(1, -1):gsub(\"^[%z\\1-\\127]+\", \"\")\n \
    \   count = tonumber(count) or 1\n    if letters[letter] then\n      letters[letter]\
    \ = letters[letter] + count\n    else\n      letters[letter] = count\n    end\n\
    \  end\n  return letters\nend", "  local letters = {}\n  local counts = {}\n \
    \ for letter in string.gmatch(test, \"([^ ]+)\") do\n    local letter = letter:lower()\n\
    \    local count = counts[letter]\n    if count == nil then\n      count = 0\n\
    \    end\n    count = count + 1\n    counts[letter] = count\n    letters[letter]\
    \ = count\n  end\n  return letters\nend", "\tlocal table = {}\n\tlocal max = 0\n\
    \tfor k in pairs(splitlower(test)) do\n\t\tlocal count = table[k]\n\t\tif count\
    \ > max then\n\t\t\tmax = count\n\t\t\ttable = {}\n\t\tend\n\t\ttable.insert(table,\
    \ k)\n\tend\n\treturn table\nend", "  local count = { }\n  local letters = { }\n\
    \  for letter, count in pairs(splitstring(test)) do\n    if count == nil then\
    \ count = 1 end\n    local _letter = string.lower(letter)\n    if not _letters[_letter]\
    \ then\n      count = 1\n      letters[_letter] = true\n    else\n      count\
    \ = count + 1\n    end\n    count[letter] = count\n  end\n  return letters\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n   \
    \ counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter] +\
    \ 1\n  end\n  local ans = {}\n  for k, v in pairs(counts) do\n    if v > 1 then\n\
    \      ans[k] = v\n    end\n  end\n  return ans\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nThis is a version that uses regular expressions, though\
    \ it's not clear whether it's more efficient than the others.\n<code>", "  local\
    \ letters, counts = table(), {}\n  for letter in test:gmatch(\"%a\") do\n    table.insert(letters,\
    \ letter)\n    local count = table.insert(counts, letters[letter])\n    if count\
    \ > 1 then\n      letters[letter] = count\n    end\n  end\n  return letters\n\
    end", "  local letters = {}\n  local counts = {}\n  for letter in unpack(split(test))\
    \ do\n    counts[letter] = counts[letter] + 1 or 1\n    table.insert(letters,\
    \ letter)\n  end\n  local max_count = -1\n  local max_letter\n  local max_value\n\
    \  for value, letter in pairs(counts) do\n    if value > max_count then\n    \
    \  max_count = value\n      max_letter = letter\n      max_value = value\n   \
    \ end\n  end\n  return table.cons(max_letter, table.cons(max_value, table.cons(max_count,\
    \ {})))\nend", "    local letters = {}\n    for letter in test:gmatch('%a') do\n\
    \        table.insert(letters, letter)\n    end\n    local counts = {}\n    for\
    \ letter in letters do\n        local count = counts[letter] or 0\n        counts[letter]\
    \ = count + 1\n    end\n    local maxCount = 1\n    for _, count in pairs(counts)\
    \ do\n        if count > maxCount then\n            maxCount = count\n       \
    \ end\n    end\n    local lettersWithMaxCount = {}\n    for _, count in pairs(counts)\
    \ do\n        if count == maxCount then\n            table.insert(lettersWithMaxCount,\
    \ letter)\n        end\n    end\n    return lettersWithMaxCount\nend", "  local\
    \ max = {}\n  for c in test:gmatch(\"%[bcdefghijklmnopqrstuvwxyz]\") do\n    local\
    \ count = max[c] or 0\n    max[c] = count + 1\n  end\n  return max\nend", "  local\
    \ tt = {}\n  local i, letter, count\n  for letter in string.gmatch(test, '(%a+)')\
    \ do\n    count = 1\n    for _ in string.gmatch(test, letter) do\n      count\
    \ = count + 1\n    end\n    table.insert(tt, {letter = letter, count = count})\n\
    \  end\n  return tt\nend", "  local result = {}\n  for k in pairs(test:gmatch(\"\
    %a([a-z]+)%a\") ) do\n    table.insert(result, k)\n  end\n  return result\nend",
  "  if test == '' then\n    return {}\n  end\n  local counter = {}\n  for letter\
    \ in unpack(test:gsub(' ','')):gmatch'([%a%d]+)' do\n    counter[letter] = counter[letter]\
    \ + 1 or 1\n  end\n  return counter\nend", "  local histo = {}\n  for c in string.gmatch(test,\
    \ '(.)') do\n    if histo[c] == nil then\n      histo[c] = 1\n    else\n     \
    \ histo[c] = histo[c] + 1\n    end\n  end\n  return histo\nend", "\tlocal t =\
    \ {}\n\tlocal i = 1\n\twhile test and test ~= '' do\n\t\tif t[test] then\n\t\t\
    \tt[test] = t[test] + 1\n\t\telse\n\t\t\tt[test] = 1\n\t\tend\n\t\ti = i + 1\n\
    \t\ttest = test:sub(#test + 1)\n\tend\n\treturn t\nend", "    local t = {}\n \
    \   for c in string.gmatch(test, \"%S+\") do t[c] = 1 end\n    return t\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([^ ]+)\")do counts[letter]\
    \ = counts[letter] + 1 end\n  return counts\nend", "  -- Create a hash with all\
    \ the letters in the alphabet as the keys and empty table\n  -- as the value\n\
    \  local letters = {}\n  for i = 0, #test do letters[test[i]] = {} end", "  local\
    \ function letter_to_key(letter)\n    if letter:sub(1, 1) ~= ' ' then return letter\
    \ end\n    return letter:sub(1, 1):byte()\n  end\n  local function count_to_key(count)\n\
    \    if count ~= nil then return count end\n    return 1\n  end\n  local letters\
    \ = {}\n  for letter in test:gmatch'([^ ]+)' do\n    local key\n    if not letters[letter]\
    \ then\n      letters[letter] = { [letter] = 1 }\n      key = letter\n    else\n\
    \      letters[letter][letters[letter]] = letters[letter][letter] + 1\n      key\
    \ = letter\n    end\n    letters[letter][key] = letters[letter][key]\n  end\n\
    \  local result = {}\n  for key, _ in pairs(letters) do\n    local counts = {}\n\
    \    for letter, count in pairs(letters[key]) do\n      if not counts[letter]\
    \ then\n        counts[letter] = 1\n      else\n        counts[letter] = counts[letter]\
    \ + count\n      end\n    end\n    result[key] = counts[result[key]]\n  end\n\
    \  return result\nend", "  if test == '' then\n    return {}\n  end\n  local count\
    \ = {}\n  for letter in test:gmatch('%S+') do\n    count = { letter = letter,\
    \ count = 1 }\n    table.insert(count, letter)\n    count[letter] = count[letter]\
    \ + 1\n  end\n  table.sort(count)\n  return count\nend", "  local histo = {}\n\
    \  for item in gmatch(test, '([^ ]+)') do\n    histo[item] = histo[item] or 0\n\
    \    histo[item] = histo[item] + 1\n  end\n  return histo\nend", "    local table\
    \ = nil\n    if test ~= '' then\n        local counts = {}\n        test = string.gsub(test,\
    \ \"[^\" .. string.letters(string.lower(test)) .. \"]\", \"\")\n        for _,c\
    \ in ipairs(string.gsub(test, \"[^\" .. string.letters() .. \"]\", \"\")) do\n\
    \            counts[c] = counts[c] + 1 or 1\n        end\n        table = table()\n\
    \        for k, v in pairs(counts) do\n            table[k] = v\n        end\n\
    \    end\n    return table\nend", "  local result = {}\n  for letter, count in\
    \ pairs(test:gsub('([a-z])', '%d'):gsub('%z', 0) - 1) do\n    result[letter] =\
    \ result[[letter]] or count\n  end\n  return result\nend", "  local histogram\
    \ = {}\n  for c in string.gmatch(test, \"%S+\") do\n    histogram[c] = histogram[c]\
    \ or 0\n    histogram[c] = 1 + histogram[c]\n  end", "  if test == '' then return\
    \ nil end\n  local count = {}\n  for letter in unpack(test:gsub('%S+', function(s)\
    \ count[s] = count[s] or 1 end)) do\n    count[letter] = count[letter] + 1\n \
    \ end\n  return count\nend", "  local histo = {}\n  for letter in string.gmatch(test,\
    \ '([%a])') do\n    local count = histo[letter] or 0\n    histo[letter] = count\
    \ + 1\n  end\n  return histo\nend", "  local counts = {}\n  for c in test:gmatch'[%a]+'\
    \ do\n    counts[c] = counts[c] or 1\n    counts[c] = counts[c] + 1\n  end\n \
    \ return counts\nend", "  local m = {}\n  for c in test:gmatch(\"[%a]\") do m[c]\
    \ = m[c] or 1 end\n  local max = {}\n  for k, v in pairs(m) do max[v] = max[v]\
    \ or k end\n  for k, v in pairs(m) do max[v] = max[v] or 1 end\n  for k, v in\
    \ pairs(max) do\n    if v > 1 then max[k] = (max[k] - 1) / v end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for char in test:gmatch('%[a-hA-H]') do\n\
    \    counts[char] = counts[char] or 0\n    counts[char] = counts[char] + 1\n \
    \ end\n  return counts\nend", "  local counts = table_create(1);\n  for _, _ in\
    \ pairs(string.gmatch(test, \"([^ ]+)\") do\n    if counts.[s[1]] then\n     \
    \ counts.[s[1]] = counts.[s[1]] + 1\n    else\n      counts.[s[1]] = 1\n    end\n\
    \  end)\n  local result = {};\n  for k, v in pairs(counts) do\n    if v > 1 then\n\
    \      table.insert(result, {k = k, v})\n    end\n  end\n  return result\nend",
  "  if test == '' then\n    return {}\n  end", "    local counts = { }\n    for index,\
    \ letter in ipairs(test) do\n        counts[letter] = counts[letter] or 0\n  \
    \      counts[letter] = counts[letter] + 1\n    end\n    local mostOccuring =\
    \ {}\n    for key, value in pairs(counts) do\n        if value > mostOccuring[value]\
    \ then\n            mostOccuring[value] = key\n        end\n    end\n    return\
    \ mostOccuring\nend", "\tlocal count = tselectn(test, string.gsub, ' ', '') --\
    \ Convert string to table\n\tlocal result = {}\n\tfor letter, count in pairs(count)\
    \ do -- For each key in the table, increment the count\n\t\tlocal previous = result[letter]\n\
    \t\tresult[letter] = previous and previous + count or count\n\tend\n\treturn result\n\
    end", "  local histogram = {}\n  for ch in test:gmatch(\"%a\") do\n    histogram[ch]\
    \ = histogram[ch] or 1\n    histogram[ch] = histogram[ch] + 1\n  end\n  return\
    \ histogram\nend", "  local t = {}\n  local n = 0\n  for c in string.gmatch(test,\
    \ \"[%a]+\") do\n    if table.find(t, c) ~= nil then\n      n = n + 1\n      t[c]\
    \ = t[c] + 1\n    else\n      n = n + 1\n      t[c] = 1\n    end\n  end\n  if\
    \ #t > 0 then\n    if #t > 1 then\n      t = table.merge(t, t[1])\n    end\n \
    \ end\n  return t\nend", "  local result = {}\n  for _, c in pairs(test) do\n\
    \    local count = result[c]\n    if not count then\n      result[c] = 1\n   \
    \ else\n      result[c] = count + 1\n    end\n  end\n  return result\nend", " \
    \  local counts = table.make(\n      {},\n      function(c)\n         return c\n\
    \      end,\n      function(c)\n         return c\n      end\n   )\n   for letter\
    \ in string.gmatch(test, \"([a-zA-Z]+)\") do\n      counts[letter] = counts[letter]\
    \ + 1 or 1\n   end\n   return counts\nend", "    local result = {}\n    for c\
    \ in string.gmatch(test, \"([\" .. string.letters .. \"]+)\") do\n        if result[c]\
    \ == nil then\n            result[c] = 1\n        else\n            result[c]\
    \ = result[c] + 1\n        end\n    end\n    for i = 1, #result do\n        for\
    \ j = i, #result do\n            if result[i] > result[j] then\n             \
    \   local aux = result[i]\n                result[i] = result[j]\n           \
    \     result[j] = aux\n            end\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for letter in test:gmatch(\"%[%aA-z %]\") do\n \
    \   local count = result[ letter ] or 0\n    result[ letter ] = 1 + count\n  end\n\
    \  return result\nend", "  local table = {}\n  for char in test:gmatch(\"[%a]\
    \ +\") do\n    if test[char] then\n      table.insert(table[char], test[char])\n\
    \    end\n  end\n  if table.count == 0 then\n    return {}\n  end\n  table.sort(table.byvalue)\n\
    \  local max = {}\n  for _, value in ipairs(table) do\n    max[#max+1] = value\n\
    \  end\n  return max\nend", "  local letters = {}\n  for letter in string.gmatch(test,\
    \ \"[^ ]+\") do\n    table.insert(letters, letter)\n  end\n  return table.merge(letters,\
    \ 1)\nend", "  local counts = {}\n  for letter, count in string.gmatch(test, \"\
    ([^ ]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  -- Find the letter with the highest count and return\n\
    \  if counts.a > counts.b then\n    return counts\n  else\n    return counts\n\
    \  end\nend", "\tlocal histogram = {}\n\tfor letter, count in pairs(test) do\n\
    \t\thistogram[letter] = histogram[letter] or 1\n\t\thistogram[letter] = count\
    \ + histogram[letter]\n\tend", "\tlocal keys = {}\n\tlocal maxValues = {}\n\t\
    for letter in string.gmatch(test, \"([a-zA-Z ]+)\") do\n\t\tif keys[letter] then\n\
    \t\t\tkeys[letter] = keys[letter] + 1\n\t\telse\n\t\t\tkeys[letter] = 1\n\t\t\
    end\n\t\tif not maxValues[letter] then\n\t\t\tmaxValues[letter] = 0\n\t\tend\n\
    \t\tmaxValues[letter] = math.max(maxValues[letter], keys[letter])\n\tend\n\tlocal\
    \ result = {}\n\tfor letter, count in pairs(maxValues) do\n\t\tresult[letter]\
    \ = count\n\tend\n\treturn result\nend", "    local result = {}\n    for ch in\
    \ test:gmatch(\"%S+\") do\n        result[ch] = result[ch] or 1\n        result[ch]\
    \ = result[ch] + 1\n    end\n    for k, v in pairs(result) do\n        if v ==\
    \ result[true] then\n            result[k] = true\n        end\n    end\n    return\
    \ result\nend", "  local counts = {}\n  for ch in test:gmatch(\"[%a]+\") do\n\
    \    counts[ch] = counts[ch] or 0\n    counts[ch] = counts[ch] + 1\n  end\n  local\
    \ result = {}\n  for ch, count in pairs(counts) do\n    if count > result[#result]\
    \ then\n      result[#result] = {ch, count}\n    end\n  end\n  return result\n\
    end", "    local counts = {}\n    for letter in test:gmatch(\"[^ ]\") do\n   \
    \     local n = counts[letter] or 0\n        counts[letter] = n + 1\n    end\n\
    \    return counts\nend", "  if test == '' then return end", "  local frequencies\
    \ = {}\n  for letter in string.gmatch(test, \"[%a]\") do\n    local count\n  \
    \  if frequencies[letter] then\n      count = frequencies[letter]\n    else\n\
    \      count = 0\n    end\n    frequencies[letter] = count + 1\n  end", "  local\
    \ counts = {}\n  for _, v in ipairs(string.gmatch(test, \"(%w+)\")) do\n    table.insert(counts,\
    \ v)\n  end\n  return counts\nend", "    local histo = {}\n    local letters =\
    \ {}\n    local max = -1\n    local maxLetter = ''\n    local numLetters = 0\n\
    \    for letter in string.gmatch(test, '(%S+)') do\n        local count = tonumber(letters[letter])\n\
    \        if count == nil then\n            count = 1 -- Make sure to start counting\
    \ at 1 so we can use letters[letter]\n        else\n            count = count\
    \ + 1\n        end\n        max = max or count\n        if letters[letter] ==\
    \ nil then\n            letters[letter] = count\n        else\n            letters[letter]\
    \ = count\n        end\n        if count == max then\n            if maxLetter\
    \ == '' then\n                maxLetter = letter\n            elseif letters[letter]\
    \ > letters[maxLetter] then\n                maxLetter = letter\n            end\n\
    \        end\n        numLetters = numLetters + 1\n    end\n    local longest\
    \ = 0\n    for letter in string.gmatch(test, '(%S+)') do\n        local count\
    \ = tonumber(letters[letter])\n        if count == nil then\n            count\
    \ = 1 -- Make sure to start counting at 1 so we can use letters[letter]\n    \
    \    else\n            count = count + 1\n        end\n        if count == max\
    \ then\n            longest = longest + 1\n        end\n    end\n    for k, v\
    \ in pairs(letters) do\n        histo[#histo + 1] = k\n    end\n    if maxLetter\
    \ ~= '' and numLetters == 0 then\n        histo[#histo + 1] = maxLetter\n    end\n\
    \    if longest == 0 then\n        histo[#histo + 1] = '-'\n    end\n    return\
    \ histo\nend", "  if test == '' then return end\n  local letters = {}\n  for i\
    \ = 1,#test do\n    local letter = test:sub(i,i)\n    letters[letter] = letters[letter]\
    \ + 1 or (letters[letter] and letters[letter] + 1)\n  end\n  table.sort(letters,\
    \ function(a,b) return letters[a] < letters[b] end);\n  local counts = {}\n  for\
    \ letter, count in pairs(letters) do\n    counts[letter] = counts[letter] or 0\n\
    \    counts[letter] = counts[letter] + count or (counts[letter] and counts[letter]\
    \ + count)\n  end\n  return counts\nend", "    local counts = {}\n    for letter\
    \ in string.gmatch(test, \"([a-z]+)\") do\n        local count = table.insert(counts,\
    \ letter, counts[letter] or 0)\n        counts[letter] = count\n    end\n    return\
    \ counts\nend", "  local counts = { }\n  for _, c in ipairs(string.gmatch(test,\
    \ \"([^ ]+ ?)\")) do\n    local letter, count = c:match(\"(%w+)%d(?=( |$))\")\n\
    \    table.insert(counts, letter, count ~= 0 and count or 1)\n  end", "  local\
    \ histogram = {}\n  local words = string.gsub(test, \"([^ ]+)\") -- Split by spaces.\n\
    \  for _, word in ipairs(words) do\n    local letter = word:lower()\n    if not\
    \ histogram[letter] then\n      histogram[letter] = 1\n    else\n      histogram[letter]\
    \ = histogram[letter] + 1\n    end\n  end\n  return histogram\nend", "  local\
    \ t = {}\n  for c in test:gmatch('([a-z]%s*)') do\n    table.insert(t, c)\n  end\n\
    \  return t\nend", "  local counts = {}\n  test:gsub('.', function(char)\n   \
    \ if not counts[char] then\n      counts[char] = 1\n    else\n      counts[char]\
    \ = counts[char] + 1\n    end\n  end)", "  local t = {}\n  for letter in test:gmatch(\"\
    %a\") do\n    t[letter] = t[letter] or 1\n    t[letter] = t[letter] + 1\n  end\n\
    \  return t\nend", "  if not test then return {} end\n  local table = {}\n  local\
    \ letters = {}\n  for char in test:gmatch(\"[%a%w%s]+\") do\n    table.insert(letters,\
    \ char)\n  end\n  for _, letter in pairs(letters) do\n    table.insert(table[letter],\
    \ 1)\n  end\n  for letter, count in pairs(table) do\n    if count > 1 then\n \
    \     for i = 1, count - 1 do\n        table.insert(letters, letter)\n      end\n\
    \    end\n  end\n  return table\nend", "  local result = {}\n  for item in test:gmatch(\"\
    ([a-z]+)(%W)\") do\n    local count = result[item] or 0\n    result[item] = count\
    \ + 1\n  end\n  return result\nend", "  local freq = {}\n  for letter in test:gmatch(\"\
    %a\") do\n    freq[letter] = (freq[letter] or 0) + 1\n  end\n  return freq\nend",
  "  if test == '' then\n    return {}\n  end\n  local max = {}\n  local letters =\
    \ {}\n  for _, letter in ipairs(test) do\n    local count = max[letter] or 0\n\
    \    max[letter] = math.max(count, max[letter])\n    letters[letter] = letters[letter]\
    \ or 0\n    letters[letter] = letters[letter] + 1\n  end\n  local histo = {}\n\
    \  local letter\n  for letter, count in pairs(max) do\n    histo[letter] = count\n\
    \  end\n  for letter, count in pairs(letters) do\n    histo[letter] = count\n\
    \  end\n  return histo\nend", "    local histo = {}\n    local letters = string.gsub(test,\
    \ \"[^ ]\", \"\"):gmatch(\"%a+\") -- Split string into an array of the letters.\n\
    \    for _, letter in pairs(letters) do\n        histo[letter] = histo[letter]\
    \ + 1 or 1 -- Use dictionary as default value if letter is new to the dictionary.\n\
    \    end", "  return table.sort(\n    table.aggregate({}, function(counts, letter)\n\
    \      if test[letter] then\n        counts[letter] = counts[letter] + 1\n   \
    \   else\n        counts[letter] = 1\n      end\n      return counts\n    end,\
    \ {})\n  )\nend", "  local result = {}\n  for i = 1, #test do\n    local letter\
    \ = test[i]\n    if not result[letter] then\n      result[letter] = 0\n    end\n\
    \    result[letter] = result[letter] + 1\n  end\n  return result\nend", "    local\
    \ ret = {}\n    for letter in string.gmatch(test, \"%a\") do\n        ret[letter]\
    \ = ret[letter] or 1\n        ret[letter] = ret[letter] + 1\n    end\n    return\
    \ ret\nend", "  local letters = {}\n  local maxcount = {}\n  for letter, count\
    \ in pairs(test) do\n    if letters[letter] == nil then\n      letters[letter]\
    \ = 1\n      maxcount[letter] = count\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n      maxcount[letter] = maxcount[letter] or count\n    end\n  end\n  return\
    \ letters, maxcount\nend", "  local freq = { }\n  for letter in test:gmatch('[a-z]')\
    \ do freq[letter] = freq[letter] + 1 end\n  return freq\nend", "  return table.sortByDesc(\n\
    \    table.foldr(function(letters, letter)\n      local count, count = letters[letter]\
    \ or 0, 1\n      letters[letter] = count\n      return letters, count\n    end,\
    \ {}, string.gmatch(test, \"[^ ]+\"))\n  )\nend", "  local letters = {}\n  for\
    \ letter in string.gmatch(test, \"[^ ]\") do\n    table.insert(letters, letter)\n\
    \  end\n  local frequency = {}\n  for _, letter in ipairs(letters) do\n    table.insert(frequency,\
    \ letter, 1)\n  end\n  return frequency\nend", "  local t = {}\n  for letter in\
    \ test:gmatch(\"%a\") do\n    local count = 1\n    for _ in string.gmatch(test,\
    \ letter, \"%D\") do\n      count = count + 1\n    end\n    t[letter] = count\n\
    \  end\n  return t\nend", "    local result = {}\n    for letter in string.gmatch(test,\
    \ \"([^ ]+) *\") do\n        local letter = string.lower(letter)\n        local\
    \ count = result[letter] or 0\n        result[letter] = count + 1\n    end\n \
    \   return result\nend", "  local letters = {}\n  for letter in test:gmatch(\"\
    [%a]\") do\n    if letters[letter] == nil then\n      letters[letter] = 1\n  \
    \  else\n      letters[letter] = letters[letter] + 1\n    end\n  end\n  return\
    \ letters\nend", "  local result = {}\n  local letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    letters[letter] = letters[letter] or 1\n    letters[letter]\
    \ = letters[letter] + 1\n  end\n  for letter, count in pairs(letters) do\n   \
    \ result[letter] = result[letter] or count\n  end\n  if #result == 0 then\n  \
    \  return {result = {}}\n  end\n  for letter, count in pairs(result) do\n    if\
    \ count > result[#result] then\n      result = { letter = letter, count = count\
    \ }\n    end\n  end\n  if #result == 0 then\n    return {result = {}}\n  end\n\
    \  return result\nend", "    local histo = {}\n    for s in string.gmatch(test,\
    \ \"%S+\") do\n        if histo[s] then\n            histo[s] = histo[s] + 1\n\
    \        else\n            histo[s] = 1\n        end\n    end\n    return histo\n\
    end", "  local result = {}\n  for letter, occurrences in pairs(test:gsub(' ',\
    \ ''):gsub('%w','')) do\n    local letterCount = result.get(letter) or 0\n   \
    \ result[letter] = letterCount + occurrences or 1\n  end\n  return result\nend",
  "   local max\n   local ret\n   for _, letter in ipairs(split(test)) do\n      if\
    \ not ret then ret = {} end\n      if not ret[letter] then ret[letter] = 1 end\n\
    \      if ret[letter] > max then max = ret[letter] end\n   end\n   return ret\
    \ or max\nend", "    local hist = {}\n    for c in test:gmatch('([a-z]?)') do\n\
    \        if hist[c] then\n            hist[c] = hist[c] + 1\n        else\n  \
    \          hist[c] = 1\n        end\n    end", "  local histo = {}\n  local max\
    \ = 0\n  for word in string.gmatch(test, \"([^ ]+)\") do\n    for letter, count\
    \ in pairs(histo) do\n      if count == 0 then\n        histo[letter] = count\n\
    \      else\n        histo[letter] = count + 1\n      end\n    end\n    if histo[word]\
    \ > max then\n      max = histo[word]\n    end\n  end\n  return histo\nend", " \
    \ local max = 0\n  local letters = {}\n  for letter in string.gmatch(test, \"\
    ([a-zA-Z]+)\") do\n    max = max + 1\n    letters[letter] = letters[letter] +\
    \ 1 or 1\n  end\n  local result = {}\n  for letter in pairs(letters) do\n    local\
    \ count = letters[letter]\n    if count > max then\n      max = count\n      result[letter]\
    \ = count\n    end\n  end\n  return result\nend", "  return function(x)\n    local\
    \ s = x:gsub(' ', ' ')\n    local hist = setmetatable({}, { __index = function(t,\
    \ key)\n      rawset(t, key, (rawget(t, key) or 0) + 1)\n      return t\n    end})\n\
    \    for c in s:gmatch'([%a]+)' do\n      hist[c] = hist[c] + 1\n    end\n   \
    \ return hist\n  end\nend", "  local max = 0\n  local counts = {}\n  for _, letter\
    \ in ipairs(test) do\n    max = max or letter\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return setmetatable({\
    \ max = max, counts = counts }, table)\nend", "  local result = {}\n  for char\
    \ in test:gmatch(\"%a\") do\n    local count = result.get(char) or 0\n    result[char]\
    \ = count + 1\n  end\n  return result\nend", "  local letters = {}\n  local max\
    \ = 0\n  for c in string.gmatch(test, \"(%A+)\") do\n    if not letters[c] then\n\
    \      letters[c] = 1\n    else\n      letters[c] = letters[c] + 1\n      if letters[c]\
    \ > max then\n        max = letters[c]\n      end\n    end\n  end\n  local result\
    \ = {}\n  for k, v in pairs(letters) do\n    if v == max then\n      result[k[1]]\
    \ = v\n    end\n  end\n  return result\nend", "  local t = {}\n  for letter in\
    \ string.gmatch(test, \"(%a+)\") do\n    local count = t[letter] or 0\n    t[letter]\
    \ = count + 1\n  end\n  return t\nend", "  local t = {}\n  for c in test:gmatch(\"\
    [%a]\") do\n    table.insert(t, c)\n  end\n  local max = 0\n  local res = {}\n\
    \  for k, v in pairs(t) do\n    if v > max then\n      max = v\n    end\n    res[k]\
    \ = v\n  end\n  return res\nend", "   local result = {}\n   for letter in string.gmatch(test,\
    \ \"([^ ])\") do\n      local count = result.get(letter, 0) + 1\n      if count\
    \ > result[letter] then\n         result[letter] = count\n      end\n   end\n\
    \   return result\nend", "  -- Reuse the same table to count each letter\n  local\
    \ counts = {}\n  for letter in test:gmatch(\"[[:alpha:]]\") do\n    if counts[letter]\
    \ == nil then\n      counts[letter] = 1\n    else\n      counts[letter] = counts[letter]\
    \ + 1\n    end\n  end", "  local t = {}\n  for _, v in pairs(test:gmatch'([%a])')\
    \ do\n    local key = v\n    if t[letter:lower(key)] then\n      t[letter:lower(key)]\
    \ = t[letter:lower(key)] + 1\n    else\n      t[letter:lower(key)] = 1\n    end\n\
    \  end", "  local letters = {}\n  local counts = {}", "  if test == '' then return\
    \ {} end\n  local letters = {}\n  for letter in string.gmatch(test, \"([a-zA-Z])\"\
    ) do letters[letter] = letters[letter] + 1 end\n  local max_letter = nil\n  local\
    \ max_count = 0\n  for letter, count in pairs(letters) do\n    if count > max_count\
    \ then\n      max_count = count\n      max_letter = letter\n    end\n  end\n \
    \ local result = {}\n  for letter, count in pairs(letters) do\n    if letter ==\
    \ max_letter then\n      result[letter] = count\n    end\n  end\n  return result\n\
    end", "  local table = { }\n  for i = 1, #test, 1 do\n    local char = test[i]\n\
    \    local count = table.setdefault(char, 0)\n    count = count + 1\n    table[i]\
    \ = count\n  end\n  return table\nend", "    local map = {}\n    local count =\
    \ {}\n    for char in test:gmatch('%a') do\n        count[char] = count[char]\
    \ or 0\n        count[char] = count[char] + 1\n    end\n    for letter, count\
    \ in pairs(count) do\n        map[letter] = map[letter] or count\n        map[letter]\
    \ = map[letter]\n    end\n    return map\nend", "  local result = {}\n  local\
    \ table = {}\n  for letter in string.gmatch(test, \"[%a]+\") do\n    local count\
    \ = table[letter] or 0\n    count = count + 1\n    table[letter] = count\n  end\n\
    \  for key, value in pairs(table) do\n    table.insert(result, { key, value })\n\
    \  end\n  return result\nend", "    local result = {}\n    local list = test:split('\
    \ ')\n    for _, v in pairs(list) do\n        result[v] = result[table.getn(result)+1]\
    \ or 1\n    end\n    return result\nend", "  return assert(\n    parse:parse_string(test):map(function(element)\n\
    \      local counts = terralib.newlist()\n      for _, letter in ipairs(element)\
    \ do\n        counts:insert(letter)\n      end\n      local result = {}\n    \
    \  for _, letter in ipairs(element) do\n        if result[ letter ] == nil then\n\
    \          result[ letter ] = 0\n        end\n        result[ letter ] = result[\
    \ letter ] + 1\n      end\n      return result\n    end)\n  )\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"%w\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  table.sort(counts)",
  "  local counts = {}\n  for letter, count in pairs(table) do\n    local current_count\
    \ = counts[letter]\n    counts[letter] = current_count or count or 1\n  end\n\
    \  return counts\nend", "  local counters = {}\n  for c in test:gmatch(\"[%a]+\"\
    ) do\n    counters[c] = counters[c] or 1\n    counters[c] = counters[c] + 1\n\
    \  end", "  local t = {}\n  for letter, count in pairs(test) do\n    if t[letter]\
    \ ~= nil then\n      t[letter] = t[letter] + count\n    else\n      t[letter]\
    \ = count\n    end\n  end\n  return t\nend", "  if test == '' then\n    return\
    \ {}\n  end", "  local words = string.split(test, '%S')\n  local result = {}\n\
    \  for i = 1, #words do\n    local letter = words[i]\n    if letter ~= '' then\n\
    \      local count = result[letter]\n      result[letter] = count or 1\n    end\n\
    \  end\n  return result\nend", "  local letters = {}\n  for letter, count in pairs(test)\
    \ do\n    table.insert(letters, letter)\n    letters[letter] = letters[letter]\
    \ + 1\n  end\n  for letter in pairs(letters) do\n    letters[letter] = letters[letter]\
    \ / letters[letter]\n  end\n  return letters\nend", "  local letters = {}\n  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"(%a+)\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = 0\n  for letter in pairs(counts) do\n    if counts[letter] > max then\
    \ max = counts[letter] end\n  end\n  for letter in pairs(counts) do\n    if counts[letter]\
    \ == max then letters[#letters+1] = letter end\n  end\n  return letters\nend",
  "  return {}\nend", "  local t = {}\n  for k in string.gmatch(test, \"([^%s]+)\"\
    ) do\n    t[#t + 1] = (t[#t + 1] or 0) + 1\n  end\n  return t\nend", "  local\
    \ letters = {}\n  local counts = {}\n  for letter in string.gmatch(test, \"[%a]+\"\
    ) do\n    local letter = letter:lower()\n    if letters[letter] == nil then\n\
    \      letters[letter] = 1\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n    end\n  end\n  for letter, count in pairs(letters) do\n    counts[letter]\
    \ = counts[letter] + count\n  end\n  return counts\nend", "    local counts =\
    \ {}\n    local maxValue = 0\n    for _, value in string.gmatch(test, \"([%a]+)\"\
    ) do\n        count = counts[value] or 0\n        counts[value] = count + 1\n\
    \        if count > maxValue then\n            maxValue = count\n        end\n\
    \    end\n    return setmetatable({ count = maxValue, letters = counts }, mt)\n\
    end\nhistogram:setmetatable({}, mt)", "  local ret = {}\n  for letter in string.gmatch(test,\
    \ \"()\") do\n    ret[letter] = ret[letter] or 1\n    ret[letter] = ret[letter]\
    \ + 1\n  end\n  return ret\nend", "    local words = test:gsub(' ', ' '):gsub('[^A-Za-z]+',\
    \ '')\n    local histogram = {}\n    for letter in words:gmatch'([^A-Za-z]+)'\n\
    \        histogram[letter] = histogram[letter] + 1 or 1\n    end\n    return histogram\n\
    end", "    local result = {}\n    for letter, count in pairs(split(test, ' ')):\n\
    \        count = tonumber(count)\n        result[letter] = count or 1\n    end\n\
    \    return result\nend", "  local letters = {}\n  for letter in string.gmatch(test,\
    \ \"(%w)\") do\n    local letter = letter:lower()\n    table.insert(letters, letter)\n\
    \  end\n  local max\n  local count\n  for letter, count = table.sort(table.pairs(letters))\
    \ do\n    if max and max > count then\n      max = 0\n    end\n    max = count\
    \ or max\n  end\n  local result = {}\n  for letter, count = table.sort(table.pairs(letters))\
    \ do\n    if count == max then\n      result[letter] = count\n    end\n  end\n\
    \  return result\nend", "  local count = { }\n  for c in string.gmatch(test, '%a')\
    \ do\n    count = count[c] or 0\n    count[c] = count + 1\n  end\n  return count\n\
    end", "\tlocal alphabet = {}\n\tfor _, letter in ipairs(test) do\n\t\tif alphabet[letter]\
    \ == nil then\n\t\t\talphabet[letter] = 1\n\t\telse\n\t\t\talphabet[letter] =\
    \ alphabet[letter] + 1\n\t\tend\n\tend\n\tlocal results = {}\n\tfor letter, count\
    \ in pairs(alphabet) do\n\t\tif count > results[letter] then\n\t\t\tresults[letter]\
    \ = count\n\t\tend\n\tend\n\treturn results\nend", "  -- Parse string for letters\n\
    \  local alphabet = {}\n  for c in string.gmatch(test, '%a') do alphabet[c] =\
    \ alphabet[c] + 1 end", "  if not test then return end\n  local histo = {}\n \
    \ for letter in unpack(test) do\n    if not histo[letter] then\n      histo[letter]\
    \ = 1\n    else\n      histo[letter] = histo[letter] + 1\n    end\n  end\n  return\
    \ histo\nend", "   local counts = {}\n   for i = 1, #test do\n      local c =\
    \ counts[test[i]]\n      counts[test[i]] = c+1\n   end\n   if #counts == 0 then\n\
    \      return nil\n   end\n   local maxCount = 1\n   local maxElement = {}\n \
    \  for k,v in pairs(counts) do\n      if v > maxCount then\n         maxCount\
    \ = v\n         maxElement = k\n      end\n   end\n   return maxElement, counts[maxElement]\n\
    end", "  local letters = {}\n  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z ]+)\") do\n    table.insert(counts, letter)\n    table.insert(letters,\
    \ letter)\n  end\n  table.sort(counts)\n  if #counts > 1 then\n    for i = 1,\
    \ #letters do\n      local max = 0\n      for j = 1, #counts do\n        local\
    \ n = counts[j]\n        if n > max then max = n end\n      end\n      table.insert(letters,\
    \ counts[#counts] .. ' (' .. #letters - 1 .. ')')\n      table.insert(counts,\
    \ 0)\n    end\n  end\n  counts[#counts] = 0\n  return letters\nend", "  local\
    \ letters = test:split(' ')\n  local occurrences = {}\n  for _, letter in ipairs(letters)\
    \ do\n    occurrences[letter] = occurrences[letter] or 1\n    occurrences[letter]\
    \ = occurrences[letter] + 1\n  end", "\tlocal count = {}\n\tfor letter in string.gmatch(test,\
    \ '([^ ]+) ') do\n\t\tlocal value = count[letter] or 0\n\t\tcount[letter] = value\
    \ + 1\n\tend\n\treturn count\nend", "    local letters = test:gsub(' ', '').split('\
    \ ')\n    local letters_count = table.reduce(letters, function(acc, letter)\n\
    \        if not acc[letter] then\n            acc[letter] = 1\n        else\n\
    \            acc[letter] = acc[letter] + 1\n        end\n        return acc\n\
    \    end, {})\n    return letters_count\nend", "   local histo = {}\n   for item\
    \ in test:gmatch(\"[^ ]+\") do\n      if histo[item] then\n         histo[item]\
    \ = histo[item] + 1\n      else\n         histo[item] = 1\n      end\n   end\n\
    \   return histo\nend", "  local count = {}\n  for c in test:gmatch(\"[%a%s]*\"\
    ) do \n    local k = c:upper()\n    count[k] = count[k] or 1\n    count[k] = count[k]\
    \ + 1\n  end\n  return count\nend", "  local t = {}\n  for letter in test:gmatch'(%l+)\
    \ ' do\n    t[letter] = t[letter] or 1\n  end\n  return t\nend", "  local histo\
    \ = {}\n  for i = 1, #test do\n    local letter = test:sub(i, i)\n    if histo[letter]\
    \ == nil then\n      histo[letter] = 1\n    else\n      histo[letter] = histo[letter]\
    \ + 1\n    end\n  end\n  return histo\nend", "  local ret = {}\n  for letter,\
    \ count in pairs(test:gsub(' ', ''):gmatch(\"(.-)(.-)\")) do\n    ret[letter]\
    \ = ret[letter] or {}\n    ret[letter][count] = ret[letter][count] + 1\n  end\n\
    \  return ret\nend", "    if test == '' then\n        return {}\n    end\n   \
    \ local t = {}\n    for i = 1, #test do\n        local char = test[i]\n      \
    \  local count = t[char] or 0\n        t[char] = count + 1\n    end\n    return\
    \ t\nend", "    local tables = {}\n    for letter, count in pairs(test:gmatch(\"\
    %a([^ ]*)\")) do\n        tables[letter] = tables[letter] or {}\n        tables[letter][count]\
    \ = tables[letter][count] + 1\n    end\n    local result = {}\n    for letter,\
    \ counts in pairs(tables) do\n        count = counts.max or 1\n        if counts.min\
    \ == nil then\n            result[letter] = count\n        else\n            result[letter]\
    \ = { count = count, letter = letters[letter] }\n        end\n    end\n    return\
    \ result\nend", "  local letters = string.gmatch(test, \"(%w+)\") -- Extract all\
    \ letters\n  if #letters == 0 then\n    return {}\n  end\n  local counts = {}\n\
    \  for i = 1, #letters do\n    local letter = letters[i]\n    if counts[letter]\
    \ == nil then\n      counts[letter] = 1\n    else\n      counts[letter] = counts[letter]\
    \ + 1\n    end\n  end\n  return counts\nend", "  local result = {}\n  for letter,\
    \ count in pairs(test) do result[letter] = count end\n  local maxValue = 0\n \
    \ for letter, count in pairs(result) do\n    if count > maxValue then\n      maxValue\
    \ = count\n    end\n  end\n  for letter, count in pairs(result) do\n    if count\
    \ == maxValue then\n      result[letter] = maxValue\n    end\n  end\n  return\
    \ result\nend", "    if test == '' then\n        return {}\n    end\n    local\
    \ result = {}\n    for k in pairs(test) do\n        local v = test[k]\n      \
    \  local count = result[v] or 0\n        result[v] = count + 1\n    end\n    return\
    \ result\nend", "  local letters = {}\n  for char in test:gmatch(\"%a\") do\n\
    \    if not letters[char] then\n      letters[char] = 1\n    else\n      letters[char]\
    \ = letters[char] + 1\n    end\n  end", "  local counts = {}\n  for i = 1, #test\
    \ do\n    local letter = test[i]\n    if counts[letter] == nil then\n      counts[letter]\
    \ = 0\n    end\n    counts[letter] = counts[letter] + 1\n  end\n  local maxCount\
    \ = 0\n  local maxLetter\n  for letter, count in pairs(counts) do\n    if count\
    \ > maxCount then\n      maxCount = count\n      maxLetter = letter\n    end\n\
    \  end\n  -- Build a list with the letters having the most occurrences.\n  local\
    \ maxCounts = {}\n  for letter, count in pairs(counts) do\n    if count == maxCount\
    \ then\n      maxCounts[letter] = count\n    end\n  end\n  -- Return the counts\
    \ and the letters having the most occurrences.\n  return maxCounts, maxLetter\n\
    end", "  local result = {}\n  for letter, count in pairs(test) do\n    if result[letter]\
    \ == nil then\n      result[letter] = 0\n    end\n    result[letter] = result[letter]\
    \ + count\n  end\n  return result\nend", "  local chars = {}\n  test = 'a' ..\
    \ test .. 'z'\n  for _, char in ipairs(test) do\n    chars[char] = chars[char]\
    \ or 1\n  end\n  for letter, count in pairs(chars) do\n    if chars[letter] then\n\
    \      chars[letter] = count\n    else\n      table.insert(chars, letter, count)\n\
    \    end\n  end\n  -- Sort from greatest to least frequency, giving us the\n \
    \ -- letters we need for our final result.\n  table.sort(chars, function(a, b)\
    \ return b - a; end)\n  return chars\nend", "    local counter = table()\n   \
    \ for letter, count in gsub(test, \"([a-z])\", \"%1\").gmatch \"(%1)+\" do\n \
    \       counter[letter] = counter[letter] or 0\n        counter[letter] = counter[letter]\
    \ + 1\n    end\n    return counter\nend", "    local counts = terralib.newlist()\n\
    \    for c in test:gmatch('([a-z]+) '..pattern_space) do\n        local count\
    \ = counts[c]:get()\n        if count == nil then\n            counts[c] = terralib.newsymbol(c.type)\n\
    \        end\n        counts[c] = count + 1\n    end\n    return counts\nend",
  "   local letters = {}\n   for letter in string.gmatch(test, \"([a-z]+)\") do\n\
    \      letters[letter] = (letters[letter] or 0) + 1\n   end\n   local max = 0\n\
    \   local maxLetter\n   for letter, occurrences in pairs(letters) do\n      if\
    \ occurrences > max then\n         max = occurrences\n         maxLetter = letter\n\
    \      end\n   end\n   return letters[maxLetter]\nend", "  local result = {}\n\
    \  for letter, count in string.gmatch(test, \"(%S+)\") do\n    result[letter]\
    \ = result[letter] or count\n  end\n  return result\nend", "   local hist = {}\n\
    \   for letter in string.gmatch(test, '%a') do\n      hist[letter] = hist[letter]\
    \ or 0\n      hist[letter] = hist[letter] + 1\n   end\n   return hist\nend", " \
    \ if test == '' then\n    return {}\n  else\n    local letters = {}\n    for letter\
    \ in test:gmatch(\"%a\") do\n      local count = letters[letter] or 0\n      letters[letter]\
    \ = count + 1\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n      if count > result[letter] then\n        result[letter] = count\n \
    \     end\n    end\n    return result\n  end\nend", "  if test == nil then return\
    \ end\n  local result = {}\n  for c in string.gsub(test, \"[^ ]+\") do\n    local\
    \ count = result[c] or 0\n    result[c] = count + 1\n  end\n  return result\n\
    end", "\tlocal letters = {}\n\tlocal letterCount = 0\n\tfor letter, count in pairs(test)\
    \ do\n\t\tif letters[letter] == nil then\n\t\t\tletters[letter] = 1\n\t\t\tletterCount\
    \ = letterCount + 1\n\t\telse\n\t\t\tletters[letter] = letters[letter] + 1\n\t\
    \tend\n\tend\n\tlocal maxCount = 1\n\tlocal maxLetter\n\tfor letter, count in\
    \ pairs(letters) do\n\t\tif count > maxCount then\n\t\t\tmaxCount = count\n\t\t\
    \tmaxLetter = letter\n\t\tend\n\tend\n\treturn {maxLetter, maxCount}\nend", " \
    \   local count = {}\n    for letter in string.gmatch(test, '%a') do\n       \
    \ if count[letter] == nil then\n            count[letter] = 1\n        else\n\
    \            count[letter] = count[letter] + 1\n        end\n    end\n    return\
    \ count\nend", "  local histo = {}\n  for letter, count in pairs(test) do\n  \
    \  histo[letter] = histo[letter] or 1\n    histo[letter] = histo[letter] + count\n\
    \  end\n  return histo\nend", "  if test == '' then return {} end\n  local alphabet\
    \ = {}\n  local chars = {}\n  local counts = {}\n  for char in test:gmatch'([a-z]+')\
    \ do\n    alphabet[char] = alphabet[char] or 1\n    chars[char] = chars[char]\
    \ or 1\n    counts[char] = counts[char] or 1\n  end\n  for k, v in pairs(counts)\
    \ do\n    counts[v] = counts[v] + alphabet[k]\n  end\n  return chars\nend", " \
    \ local max = {}\n  for letter, count in string.gmatch(test, \"(%A+)\") do\n \
    \   local frequency = tonumber(count)\n    if frequency then\n      table.insert(max,\
    \ { letter = letter, frequency = frequency })\n    end\n  end\n  if #max == 1\
    \ then\n    return max[1].letter, max[1].frequency\n  end\n  return max\nend",
  "  -- The test string can be empty. Don't bother to compute the histogram of empty\
    \ string.\n  if not test then\n    return {}\n  end\n  local histogram = {}\n\
    \  for letter, count in pairs(split(test)) do\n    histogram[letter] = histogram[letter]\
    \ or 0\n    histogram[letter] = histogram[letter] + count\n  end\n  return histogram\n\
    end", "  local count = {}\n  for letter in test:gmatch(\"[%a]\") do -- [%a] will\
    \ match only letters\n    count[letter] = count[letter] or 0 -- initialize count\
    \ to 0 if letter not present\n    count[letter] = count[letter] + 1 -- add one\
    \ to count for the letter\n  end\n  return count\nend", "    local table = {}\n\
    \    for letter, count in string.gmatch(test, \"(%a+)\") do\n        table.insert(table,\
    \ letter)\n    end\n    return table\nend", "    local counts = { }\n    for letter,\
    \ count in gsub((test or '').toLowerCase(), '[^ ]+', '').gmatch'([^ ]+') do\n\
    \        count = tonumber(count)\n        if count == nil then\n            count\
    \ = 0\n        end\n        table.insert(counts, letter, count)\n    end\n   \
    \ return counts\nend", "    local result = {}\n    for c in test:gmatch(\"%a\"\
    ) do\n        local count = result[c] or 0\n        result[c] = count + 1\n  \
    \  end\n    local max\n    for k, v in pairs(result) do\n        if max and v\
    \ > max then\n            max = v\n        end\n    end\n    if max then\n   \
    \     for k, v in pairs(result) do\n            if v > max then\n            \
    \    result[k] = v\n            end\n        end\n    end\n    return result\n\
    end", "  if not test or test == '' then return {} end\n  local letters = {}\n\
    \  for letter in string.gmatch(test, \"[%a]+\") do\n    if not letters[letter]\
    \ then\n      letters[letter] = 1\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n    end\n  end\n  return letters\nend", "    local count = {}\n    for\
    \ letter in string.gmatch(test, \"[%a]+\") do\n        count[letter] = count[letter]\
    \ or 1\n    end", "    local counts = {}\n    local letters = {}\n    for letter\
    \ in test:gmatch(\"(.)\") do\n        table.insert(letters, letter)\n        counts[letter]\
    \ = counts[letter] + 1 or 1\n    end\n    table.sort(letters)\n    return letters\n\
    end", "  local counts = {}\n  for _, letter in pairs(test) do counts[letter] =\
    \ 1 end\n  local max = {}\n  local results = {}\n  for letter, count in pairs(counts)\
    \ do\n    if counts[letter] > 1 then\n      for _, otherLetter in pairs(counts)\
    \ do\n        if otherLetter ~= letter then\n          if count == counts[otherLetter]\
    \ then\n            counts[otherLetter] = count + 1\n          end\n        end\n\
    \      end\n    else\n      counts[letter] = 1\n    end\n    table.insert(results,\
    \ letter)\n  end\n  return results\nend", "  local t = {}\n  for c in string.gmatch(test,\
    \ \"%a\") do\n    if t[c] == nil then\n      t[c] = 1\n    else\n      t[c] =\
    \ t[c] + 1\n    end\n  end\n  return t\nend", "  local function helper(map, word)\n\
    \    map[word] = map[word] or 1\n    map[word] = map[word] + 1\n  end", "  local\
    \ m = {}\n  for _, letter in ipairs(test) do\n    if m[letter] == nil then\n \
    \     m[letter] = 1\n    else\n      m[letter] = m[letter] + 1\n    end\n  end\n\
    \  return m\nend", "    local counts = {}\n    for letter in test:gmatch'[%a]'\
    \ do\n        if counts[letter] == nil then\n            counts[letter] = 1\n\
    \        else\n            counts[letter] = counts[letter] + 1\n        end\n\
    \    end\n    return counts\nend", "  local letters = {}\n  for l in test:gmatch'(.)'do\
    \ letters[l] = letters[l] + 1 or 1 end\n  local max = 0\n  local maxletter\n \
    \ for l, count in pairs(letters) do\n    if count > max then\n      max = count\n\
    \      maxletter = l\n    end\n  end\n  return letters, maxletter\nend", "  --\
    \ If there's no input, don't bother with the algorithm.\n  if not test then return\
    \ end\n  local keys = {}\n  -- Get all the letters in the input string.\n  for\
    \ letter in string.gsub(test, \"%S\") do\n    -- If the letter hasn't been seen\
    \ yet, add it.\n    if keys[letter] == nil then\n      keys[letter] = 1\n    else\n\
    \      keys[letter] = keys[letter] + 1\n    end\n  end\n  return keys\nend", "\t\
    local words = string.split(test, \"%s\")\n\tlocal letters = {}\n\tfor i = 1, #words\
    \ do\n\t\tlocal letter = words[i]\n\t\tif letters[letter] == nil then\n\t\t\t\
    letters[letter] = 1\n\t\telse\n\t\t\tletters[letter] = letters[letter] + 1\n\t\
    \tend\n\tend\n\tlocal max = {}\n\tlocal max_count = 1\n\tlocal max_letter\n\t\
    for letter, count in pairs(letters) do\n\t\tif count > max_count then\n\t\t\t\
    max_count = count\n\t\t\tmax_letter = letter\n\t\tend\n\tend\n\tlocal output =\
    \ {}\n\tfor letter, count in pairs(letters) do\n\t\tif count == max_count then\n\
    \t\t\toutput[max_letter] = count\n\t\tend\n\tend\n\treturn output\nend", "  if\
    \ test and #test > 0 then\n    local letters = {}\n    local counts = {}\n   \
    \ for c in test:gmatch(\"[%a%A]+\") do\n      counts[c] = counts[c] or 0\n   \
    \   counts[c] = counts[c] + 1\n      table.insert(letters, c)\n    end\n    local\
    \ max = 0\n    local maxLetter\n    for letter, count in pairs(counts) do\n  \
    \    if count > max then\n        max = count\n        maxLetter = letter\n  \
    \    end\n    end\n    return {maxLetter, max}\n  else\n    return {}\n  end\n\
    end\n</code>\n<|/ a tags=lua |>\n<| a dscore=2 |>\nA solution based on a table\
    \ of letters with frequencies, similar to my solution (which was based on a table\
    \ of frequencies only). In a similar manner as the other answers, I've added a\
    \ default empty table if no letters are found at all:\n<code>", "    local frequencies\
    \ = {}\n    for letter, occurrences in string.gmatch(test, \"(%a+)\") do\n   \
    \     frequencies[letter] = frequencies[letter] or 0\n        frequencies[letter]\
    \ = frequencies[letter] + occurrences\n    end", "  local result = {}\n  for letter,\
    \ count in pairs(test) do\n    result[letter] = result[letter] or 0\n    result[letter]\
    \ = result[letter] + 1 or count\n  end\n  return result\nend", "  local table\
    \ = {}\n  local letters = {}\n  local letters_count = { }\n  for letter, count\
    \ in string.gmatch(test, \"([^ ]+)\") do\n    if not letters[letter] then\n  \
    \    table[letter] = count\n      letters[letter] = true\n      letters_count[letter]\
    \ = count\n    end\n  end\n  return table\nend", "  local frequency = {}\n  for\
    \ letter, count in pairs(test:gmatch'(%S+)') do\n    frequency[letter] = frequency\
    \ and frequency[letter] + 1 or count\n  end\n  return frequency\nend", "    local\
    \ table = {}\n    for letter, count in pairs(test) do\n        if table[letter]\
    \ == nil then\n            table[letter] = 1\n        else\n            table[letter]\
    \ = table[letter] + 1\n        end\n    end\n    return table\nend\n</code>\n\
    <|/ a |>\n<| a tags=lua,set,lua-table,string dscore=0 |>\nI wrote this function\
    \ that does what you asked for:\n<code>", "  local table = {}\n  local index =\
    \ 1\n  local splitted = test:gmatch('([^ ]+)') -- split string into table of characters\n\
    \  for i = 1, #splitted do\n    table[index] = splitted[i]\n    index = index\
    \ + 1\n  end\n  local letter\n  local count\n  for i, letter in pairs(table) do\n\
    \    count = table[i]\n    if count > 1 then\n      table[i] = { letter = letter,\
    \ count = count }\n    end\n  end\n  return table\nend", "  local result = {}\n\
    \  for letter, count in pairs(str_util.count(test)) do\n    result[letter] = count\n\
    \  end\n  return result\nend", "\tlocal counts = {}\n\tfor letter in string.gmatch(test,\
    \ '%a') do\n\t\tcounts[letter] = counts[letter] or 0\n\t\tcounts[letter] = counts[letter]\
    \ + 1\n\tend", "    local letters = string.gsub(test, \"[^ ]\", \"%1\").split('\
    \ ')\n    local result = {}\n    for i = 1, #letters do\n        local letter\
    \ = letters[i]\n        local count = letters[i] and tonumber(letters[i])\n  \
    \      if not result[letter] then\n            result[letter] = 0\n        end\n\
    \        result[letter] = math.max(result[letter], count)\n    end\n    return\
    \ result\nend", "    local counts = {}\n    for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n        counts[letter] = counts[letter] or 1\n    end\n  \
    \  local max = {}\n    local results = {}\n    for letter, count in pairs(counts)\
    \ do\n        table.insert(results, {letter, count})\n        if max[count] ==\
    \ nil then\n            max[count] = letter\n        end\n    end\n    if #max\
    \ == 0 then\n        return {}\n    end\n    for _, v in ipairs(max) do\n    \
    \    table.insert(results, {max[v], v})\n    end\n    return results\nend", " \
    \ if test == '' then\n    return {}\n  end\n  local mapping = {}\n  for _, letter\
    \ in ipairs(test) do\n    mapping[letter] = mapping[letter] or 0\n    mapping[letter]\
    \ = mapping[letter] + 1\n  end\n  return mapping\nend", "  local result = {}\n\
    \  for letter, count in string.gmatch(test, \"%a\") do\n    local lettercount\
    \ = result[letter] or 0\n    result[letter] = lettercount + count\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in test:gmatch'(.)' do\n  \
    \  counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter] +\
    \ 1\n  end\n  return counts\nend", '  local tables = {}', "  if test == '' then\n\
    \    return {}\n  end\n  local result = {}\n  local words = string.gmatch(test,\
    \ \"([^ ]+)\") -- split on spaces\n  for _, word in ipairs(words) do\n    local\
    \ count = 1\n    for letter in word do\n      count = count + 1\n      if letter\
    \ not in result then\n        result[letter] = count\n      else\n        if result[letter]\
    \ > count then\n          result[letter] = count\n        end\n      end\n   \
    \ end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
