name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the table,\n-- and\
  \ return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local row = {}\n   for _, v in pairs(lst) do\n      for _, n in\
    \ pairs(v) do\n         local row = row + {n, v[n]}\n      end\n   end\n   table.sort(row)\n\
    \   local row = {}\n   for _, n in pairs(row) do\n      table.insert(row, {})\n\
    \   end\n   table.sort(row)\n   table.sort(row, function(a, b) return b[1] < a[1]\
    \ end)\n   local row, r = {}, 0\n   for _, n in pairs(row) do\n      local nx\
    \ = x + 1\n      local ny = n - 1\n      local nz = x + n - 1\n      local nm\
    \ = nx * ny + nz * n\n      local mx = (x - 1) * ny + n * nz\n      local my =\
    \ (x - 1) * nz + n * nx\n      local mz = (x - 1) * nx + n * (y - 1)\n      local\
    \ r = r + {nx, ny}\n      for _, v in pairs(row) do\n         if v[0] == mx and\
    \ v[1] == my and v[2] == mz and v[1] > 0 then\n            break\n         end\n\
    \      end\n      if v[1] > 0 then\n         row[r] = v\n      end\n   end\n \
    \  return row\nend", "  local row = { }\n  for i, row in ipairs(lst) do\n    local\
    \ row2 = { }\n    for _, cell in ipairs(row) do\n      row2[cell[1]] = cell[2]\n\
    \    end\n    row[i] = row2\n  end\n  for i, row in ipairs(row) do\n    table.sort(row,\
    \ function(a, b)\n      if a[1] < b[1] then\n        return -1\n      else\n \
    \       return 1\n      end\n    end)\n    table.sort(row, function(a, b)\n  \
    \    if a[2] < b[2] then\n        return -1\n      else\n        return 1\n  \
    \    end\n    end)\n  end\n  local row2 = { }\n  for i, cell in ipairs(row) do\n\
    \    row2[cell[1]] = cell[2]\n  end\n  local sorted = { }\n  table.sort(row, function(a,\
    \ b)\n    if row[a[1]] < row[b[1]] then\n      return -1\n    elseif row[a[1]]\
    \ > row[b[1]] then\n      return 1\n    elseif row[a[2]] < row[b[2]] then\n  \
    \    return -1\n    elseif row[a[2]] > row[b[2]] then\n      return 1\n    end\n\
    \  end)\n  for i = 1, table.getn(row) do\n    table.insert(sorted, { row = row[i],\
    \ columns = {} })\n    local row2 = row\n    for j = 0, table.getn(row2) - 1 do\n\
    \      local key = row2[j][row2[j][2]]\n      for k = 0, table.getn(row) - 1 do\n\
    \        if key == row2[k][2] then\n          table.insert(sorted[j].columns,\
    \ row2[k][3])\n        end\n      end\n    end\n  end\n  table.sort(sorted, function(a,\
    \ b)\n    if a.row < b.row then\n      return -1\n    elseif a.row > b.row then\n\
    \      return 1\n    end\n    table.sort(a.columns, function(a, b)\n      if a.value\
    \ < b.value then\n        return -1\n      elseif a.value > b.value then\n   \
    \     return 1\n      end\n      return 0\n    end)\n    table.sort(b.columns,\
    \ function(a, b)\n      if a.value < b.value then\n        return -1\n      elseif\
    \ a.value > b.value then\n        return 1\n      end\n      return 0\n    end)\n\
    \  end\n  return sorted\nend", "    local tbl = {}\n    for i = 1, #lst do\n \
    \       local d = {}\n        for j = 1, #lst[i] do\n            d[j] = lst[i][j]\n\
    \        end\n        table.insert(tbl, d)\n    end\n    tbl = table.sort(tbl,\
    \ function(a, b) return a[2] < b[2] end)\n    for i = #tbl, 1, -1 do\n       \
    \ table.sort(tbl[i], function(a, b) return a[1] < b[1] end)\n    end\n    for\
    \ i = 1, #tbl do\n        if tbl[i][1] == x then\n            return tbl[i]\n\
    \        end\n    end\n    return {}\nend", "  if not lst then\n    return {}\n\
    \  end\n  -- First find coordinates of row number x in the nested tables.\n  local\
    \ function index_of(x, t)\n    local i = 1\n    while i <= #t do\n      if not\
    \ t[i] then break end\n      if t[i] == x then\n        return i\n      end\n\
    \      i = i + 1\n    end\n    return nil\n  end\n  -- Sort coordinates of row\
    \ by columns in descending order.\n  local function compare(a, b) return b[1]\
    \ > a[1] end\n  table.sort(lst, compare)\n  -- Then sort coordinates initially\
    \ by rows in ascending order.\n  local t = {}\n  for i = 1, #lst do\n    table.insert(t,\
    \ {index_of(i, lst), #lst})\n  end\n  table.sort(t, compare)\n  -- Return table\
    \ of tables.\n  local result = {}\n  for i = 1, #t do\n    table.insert(result,\
    \ table.copy(lst[t[i]]))\n  end\n  return result\nend", "    local rows = {}\n\
    \    for i, row in ipairs(lst) do\n        rows[i] = {}\n        for j, el in\
    \ ipairs(row) do\n            if j == x then\n                rows[i][j] = el\n\
    \            end\n        end\n    end\n    table.sort(rows, function(a, b) return\
    \ a[1] < b[1] end)\n    for i, row in ipairs(rows) do\n        table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    end\n    return rows\nend", "  --\
    \ Sort rows initially by columns in descending order.\n  local rows = setmetatable({},\
    \ {\n    __index = function (t, k)\n      local v = t[k]\n      t[k] = v\n   \
    \   if type(v) == 'table' then\n        table.sort(v)\n      end\n      return\
    \ v\n    end\n  })", "  if x ~= 0 then\n    local row = {}\n    local rows = {}\n\
    \    for k, v in pairs(lst) do\n      if row[k] == nil then\n        row[k] =\
    \ x\n        rows[k] = x\n        row[k] = v\n      elseif row[k] > x then\n \
    \       row[k] = nil\n        rows[k] = nil\n        row[k] = v\n      elseif\
    \ row[k] == x then\n        rows[k] = v\n      end\n    end\n    for k, _ in pairs(rows)\
    \ do\n      row[k] = nil\n    end\n    return rows\n  else\n    return {}\n  end\n\
    end", "    if not lst then\n        return {}\n    end", "  if type(lst) == 'table'\
    \ then\n    if x >= lst[x] then\n      return {}\n    else\n      local row =\
    \ {}\n      for i, v in ipairs(lst) do\n        table.insert(row, i)\n      end\n\
    \      table.sort(row, function(x,y) return x > y end)\n      table.sort(row,\
    \ function(x,y) return x < y end)\n      table.sort(row, function(x,y) return\
    \ x <= y end)\n      table.sort(row, function(x,y) return x >= y end)\n      table.sort(row,\
    \ function(x,y) return x == y end)\n      return row[#row]\n    end\n  else\n\
    \    return {}\n  end\nend", "  if x == nil then return lst end\n  local tbl =\
    \ {}\n  for i = 1, #lst do\n    local r = lst[i]\n    if tonumber(r[x]) then\n\
    \      tbl = table.concat(tbl, r)\n    end\n  end\n  return tbl\nend", "  local\
    \ n = #lst\n  if x == nil then\n    return {}\n  end\n  -- Sort by rows in ascending\
    \ order.\n  table.sort(lst, function(a, b) return a[1] < b[1] end)\n  -- Sort\
    \ coordinates initially by rows in ascending order.\n  table.sort(lst, function(a,\
    \ b) return a[1] < b[1] end)\n  -- Sort coordinates initially by columns in descending\
    \ order.\n  for _, row in ipairs(lst) do\n    table.sort(row, function(a, b) return\
    \ b[1] > a[1] end)\n  end\n  -- Return coordinates of each row by columns in descending\
    \ order.\n  return lst\nend", "  if x == 1 then\n    return {{}}\n  else\n   \
    \ local coords = {}\n    for i, v in ipairs(lst) do\n      if v == 1 then\n  \
    \      table.insert(coords, {i, x})\n      end\n    end\n    table.sort(coords)\n\
    \    table.sort(coords, function(a, b) return b[1] < a[1] end)\n    local ret\
    \ = {}\n    for _, v in ipairs(coords) do\n      table.insert(ret, get_row(v,\
    \ x - 1))\n    end\n    return ret\n  end\nend", "  -- sorts coordinates by rows\
    \ in ascending order\n  -- rows: 1 2 3 4 5 6\n  -- columns: 1 2 3\n  -- row: 1\
    \ 2 3 4 5 6\n  local rows = setmetatable({{x = {}, y = 0}},\n    {__index = function(self,\
    \ key)\n      -- returns the ith row\n      local value = self[key]\n      if\
    \ value == nil then\n        value = setmetatable({}, {__index = function(self,\
    \ key)\n          return rows[key]\n        end})\n        rows[key] = value.x\n\
    \      elseif value.x == nil then\n        value = setmetatable({x = value},\n\
    \          {__index = function(self, key)\n            return rows[key]\n    \
    \      end})\n        rows[key] = value.x\n      elseif value.y == nil then\n\
    \        value = setmetatable({x = value.x, y = value},\n          {__index =\
    \ function(self, key)\n            return rows[key]\n          end})\n       \
    \ rows[key] = value.x\n      else\n        value = setmetatable({x = value.x,\
    \ y = value.y},\n          {__index = function(self, key)\n            return\
    \ rows[key]\n          end})\n        rows[key] = value.x\n      end\n      return\
    \ rows[key]\n    end})\n  -- sorts coordinates of row by columns in descending\
    \ order\n  -- rows: 1 2 3 4 5 6\n  -- columns: 1 2 3\n  -- row: 1 2 3 4 5 6\n\
    \  local columns = setmetatable({{x = {}, y = 0}},\n    {__index = function(self,\
    \ key)\n      -- returns the ith column\n      local value = self[key]\n     \
    \ if value == nil then\n        value = setmetatable({}, {__index = function(self,\
    \ key)\n          return columns[key]\n        end})\n        columns[key] = value.x\n\
    \      elseif value.x == nil then\n        value = setmetatable({x = value},\n\
    \          {__index = function(self, key)\n            return columns[key]\n \
    \         end})\n        columns[key] = value.x\n      elseif value.y == nil then\n\
    \        value = setmetatable({x = value.x, y = value},\n          {__index =\
    \ function(self, key)\n            return columns[key]\n          end})\n    \
    \    columns[key] = value.x\n      else\n        value = setmetatable({x = value.x,\
    \ y = value.y},\n          {__index = function(self, key)\n            return\
    \ columns[key]\n          end})\n        columns[key] = value.x\n      end\n \
    \     return columns[key]\n    end})\n  -- sorts coordinates of row by columns\
    \ in descending order\n  -- rows: 1 2 3 4 5 6\n  -- columns: 1 2 3\n  -- row:\
    \ 1 ", "   local result = {}\n   local row_lst = lst[1]\n   for i=1, #lst do\n\
    \      local row_lst = lst[i]\n      local found = false\n      for j=1, #row_lst\
    \ do\n         if row_lst[j] == x then\n            found = true\n         else\n\
    \            break\n         end\n      end\n      if not found then\n       \
    \  break\n      end\n   end\n   if #row_lst > 0 then\n      for i=1, #row_lst\
    \ do\n         local row_lst = lst[i]\n         for j=1, #row_lst do\n       \
    \     if row_lst[j] ~= x then\n               break\n            end\n       \
    \  end\n         if j ~= #row_lst then\n            table.insert(result, row_lst)\n\
    \         end\n      end\n   end\n   return result\nend", "  local function get_index(idx)\n\
    \    if idx then\n      return idx, 1\n    end\n    return idx, 0\n  end", " \
    \   local t = {}\n    for i = 1, #lst do\n        local row = lst[i]\n       \
    \ for j = 1, #row do\n            t[j] = { j = j, i = i, x = row[j] }\n      \
    \  end\n    end\n    table.sort(t, function(a, b) return a.x < b.x end)\n    table.sort(t,\
    \ function(a, b) return a.j < b.j end)\n    table.sort(t, function(a, b) return\
    \ a.i < b.i end)\n    return t\nend", '  if #lst == 0 then return {{{}}} end',
  "  if #lst == 0 then\n    return {}\n  end\n  local rows = {}\n  local row_idx =\
    \ 1\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        rows[row_idx] = {}\n        for k = 1, #lst[i][j] do\n       \
    \   rows[row_idx][k] = i\n          rows[row_idx][#rows[row_idx] + k - 1] = j\n\
    \        end\n      end\n    end\n    row_idx = row_idx + 1\n  end\n  table.sort(rows,\
    \ function(a, b)\n    return b[#b] - a[#b]\n  end)\n  table.sort(rows, function(a,\
    \ b)\n    return b[#a] - a[#b]\n  end)\n  return rows\nend", "    if type(lst)\
    \ == 'table' and lst.__t == 'table' then\n        -- Check if x is in rows\n \
    \       for i, v in ipairs(lst) do\n            if x == i then\n             \
    \   -- Return the coordinate of a row in descending order\n                return\
    \ unpack(v, 1, #v)\n            end\n        end\n        -- Check if x is in\
    \ column\n        for k, v in pairs(lst) do\n            if x == k then\n    \
    \            -- Return the coordinate of a column in descending order\n      \
    \          return unpack(v, 1, #v)\n            end\n        end\n        -- Check\
    \ if x is in diagonal\n        if x < #lst then\n            -- Check if x is\
    \ in a lower triangle\n            if x == 1 then\n                -- Return only\
    \ lower triangle coordinates\n                return unpack(lst, 1, #lst)\n  \
    \          elseif x == #lst then\n                -- Return only upper triangle\
    \ coordinates\n                return unpack(lst, 1, #lst)\n            else\n\
    \                -- Check if x is in a diagonal to the right\n               \
    \ if lst[x - 1] == x then\n                    -- Return only lower triangle coordinates\n\
    \                    return unpack(lst, 1, #lst)\n                elseif lst[x\
    \ + 1] == x then\n                    -- Return only upper triangle coordinates\n\
    \                    return unpack(lst, 1, #lst)\n                else\n     \
    \               -- Return empty table if neither x is in lower or upper triangle\n\
    \                    return {}\n                end\n            end\n       \
    \ else\n            -- Return empty table if x is not in table\n            return\
    \ {}\n        end\n    else\n        return {}\n    end\nend", "    local row\
    \ = {}\n    for i=1,#lst do\n        for j=1,#lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(row, { i, j })\n                table.insert(row,\
    \ { i, #lst[i] - 1 })\n                break\n            end\n        end\n \
    \   end\n    table.sort(row)\n    table.sort(row, function(a,b) return b[1] <\
    \ a[1] end)\n    return row\nend", "\tlocal tbl = table.copy(lst)\n\tlocal row,\
    \ col = {}, {}\n\tfor i = 1, #tbl do\n\t\tfor j = 1, #tbl[i] do\n\t\t\tif tbl[i][j]\
    \ == x then\n\t\t\t\trow[i] = j - 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\
    \tfor i = 1, #row do\n\t\tfor j = #row + 1, #col + 1 do\n\t\t\ttbl[row[j]] = tbl[i\
    \ - 1]\n\t\tend\n\tend\n\tfor i = #row + 1, #col + 1 do\n\t\ttbl[row[i]] = tbl[i]\n\
    \tend\n\treturn tbl\nend", "  local ans = {}\n  local rows = {}\n  local cols\
    \ = {}", "  local rows, cols = {}, {}\n  for _, n in pairs(lst) do\n    rows[n]\
    \ = n\n    for i = 1, n do\n      cols[i] = i\n    end\n  end\n  rows[x] = x\n\
    \  table.sort(rows, function(a, b)\n    return a[b] and a[1] > b[1]\n  end)\n\
    \  table.sort(cols, function(a, b)\n    return b[a] and b[1] > a[1]\n  end)\n\
    \  local rows, cols = {}, {}\n  for i, n in ipairs(rows) do\n    rows[i] = {0,\
    \ i}\n    cols[i] = n - 1\n  end\n  for i = 1, x do\n    local j = x - i - 1\n\
    \    local row_x = rows[j]\n    local col_x = cols[j]\n    local row = lst[row_x][1]\n\
    \    local col = lst[row_x][col_x]\n    rows[col_x] = row\n    cols[row_x] = col\n\
    \  end\n  return rows, cols\nend", "  local row = {}\n  for i = 0, #lst do --\
    \ iterating over rows\n    local row_ = {}\n    local j = 0\n    for _, v in pairs(lst[i])\
    \ do\n      if v == x then\n        row_[j] = row_[j] or 0\n        row_[j] =\
    \ row_[j] + 1\n      end\n      j = j + 1\n    end\n    table.insert(row, row_)\n\
    \  end\n  return row\nend", "  if type(lst) ~= 'table' then\n    error('given\
    \ value is not a table')\n  end\n  local res = {}\n  for _, v in ipairs(lst) do\n\
    \    if v == x then\n      table.insert(res, {})\n    else\n      local newres\
    \ = res[#res]\n      for _, vv in ipairs(v) do\n        if newres == nil then\n\
    \          table.insert(res, {})\n        end\n        table.insert(newres, vv)\n\
    \      end\n    end\n  end\n  table.sort(res, function(a, b) return a[1] > b[1]\
    \ end)\n  table.sort(res, function(a, b) return a[2] > b[2] end)\n  return res\n\
    end", "  local rows = {}\n  for _, row in ipairs(lst) do\n    for _, value in\
    \ ipairs(row) do\n      if value == x then\n        table.insert(rows, {row[1],\
    \ row[-1]})\n      end\n    end\n  end\n  table.sort(rows, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(rows, function(a, b) return a[-1] > b[-1] end)\n\
    \  return rows\nend", "  if x == 1 then\n    return lst\n  else\n    local r =\
    \ {}\n    for _, v in ipairs(lst) do\n      r[#r + 1] = {}\n      for _, x in\
    \ ipairs(v) do\n        r[#r + 1][#r + 1] = x\n      end\n    end\n    table.sort(r,\
    \ function(a, b) return a[#a] > b[#b] end)\n    table.sort(r, function(a, b) return\
    \ a[#a] < b[#b] end)\n    return r\n  end\nend", "  local rows, cols = #lst[1],\
    \ #lst[2]\n  local ret = {}\n  for r = 0, rows do\n    for c = 0, cols do\n  \
    \    if lst[r][c] == x then\n        ret[#ret+1] = {r, c}\n      end\n    end\n\
    \  end\n  return ret\nend", "\tlocal tmp = {}\n\tfor i, row in ipairs(lst) do\n\
    \t\tfor j, cell in ipairs(row) do\n\t\t\tif cell == x then\n\t\t\t\ttmp[i] = {i,\
    \ j, cell}\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(tmp)\n\ttable.sort(tmp, function(a,\
    \ b)\n\t\tif a[2] < b[2] then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend)\n\treturn tmp\nend", "  if not lst then return end\n  local lst2\
    \ = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        lst2[i] = {i, j}\n        break\n      end\n    end\n  end\n\
    \  if #lst2 > 0 then\n    table.sort(lst2, function(a, b)\n      if a[1] > b[1]\
    \ then return 1 end\n      if a[1] < b[1] then return -1 end\n      if a[2] >\
    \ b[2] then return 1 end\n      if a[2] < b[2] then return -1 end\n      return\
    \ 0\n    end)\n  end\n  return lst2\nend", "   local row = {}\n   for _, row in\
    \ ipairs(lst) do\n      if x == row[1] then\n         return row\n      end\n\
    \   end\nend", "    local row = {}\n    for i = 1, #lst do\n        local c =\
    \ lst[i]\n        row[i] = c[x]\n    end\n    table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n    table.sort(row, function(a, b) return a[#a] > b[#b]\
    \ end)\n    return row\nend", "    if lst[x] == nil then\n        return {{}}\n\
    \    end\n    local r = {{x, 0}}\n    for i = 1, #lst do\n        if lst[i][x]\
    \ ~= nil then\n            table.insert(r, {i, #lst})\n        end\n    end\n\
    \    table.sort(r)\n    return r\nend", "  -- Sort coordinates initially by rows\
    \ in ascending order.\n  -- Also, sort coordinates of the row by columns in descending\
    \ order.\n  local function sort_rows(row)\n    local row_id = #row\n    table.sort(row,\
    \ function(a, b) return row_id > row_id-1 end)\n    local sort_columns = #row\n\
    \    table.sort(row, function(a, b) return sort_columns > sort_columns-1 end)\n\
    \  end", "\tlocal result = {}\n\tlocal i\n\tfor i, row in pairs(lst) do\n\t\t\
    local j = 0\n\t\twhile j > 0 do\n\t\t\tlocal ls = j - 1\n\t\t\tif row[ls] ~= x\
    \ then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = ls\n\t\t\tend\n\t\tend\n\t\tif\
    \ j ~= 0 then\n\t\t\tlocal ls = i\n\t\t\tlocal row_n = i - 1\n\t\t\twhile j >\
    \ 0 do\n\t\t\t\tif ls == row_n then\n\t\t\t\t\tlocal row_n_x = result[ls][1]\n\
    \t\t\t\t\tlocal row_n_y = result[ls][1]\n\t\t\t\t\tlocal col = j - 1\n\t\t\t\t\
    \tlocal col_n = i - 1\n\t\t\t\t\tlocal row_n_x = row_n_x + col\n\t\t\t\t\tlocal\
    \ row_n_y = row_n_y + col\n\t\t\t\t\tresult[ls] = {{row_n_x, row_n_y}, {row_n_x,\
    \ row_n_y}}\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\tlocal row_n_x = result[ls][1]\n\
    \t\t\t\t\tlocal row_n_y = result[ls][1]\n\t\t\t\t\tlocal col = j - 1\n\t\t\t\t\
    \tlocal col_n = i - 1\n\t\t\t\t\tlocal row_n_x = row_n_x + col\n\t\t\t\t\tlocal\
    \ row_n_y = row_n_y + col\n\t\t\t\t\tresult[ls] = {{row_n_x, row_n_y}, {row_n_x,\
    \ row_n_y}}\n\t\t\t\t\tls = ls - 1\n\t\t\t\t\tj = j - 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\tfor _, v in ipairs(result) do\n\t\ttable.sort(v)\n\tend\n\t\
    return result\nend", "  local row = {}\n  for i, v in ipairs(lst) do\n    table.insert(row,\
    \ v, i)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  table.sort(row, function(i, j) return row[j][1]\
    \ <= row[i][1] end)", "  local coords = {}\n  local min_row = math.min(lst.nrows)\n\
    \  local max_row = math.max(lst.nrows)\n  for i = min_row + 1,max_row do\n   \
    \ local row = lst[i]\n    local row_coords = {}\n    for j = 1,#row do row_coords[j]\
    \ = i end -- add first column coordinate as row\n    table.insert(coords, row_coords)\n\
    \  end\n  for i = min_row,max_row do\n    table.sort(coords, function(a,b)\n \
    \     return row(a) < row(b)\n    end)\n    table.sort(coords, function(a,b)\n\
    \      return row(b) < row(a)\n    end)\n  end\n  table.sort(coords, function(a,b)\n\
    \    return col(a) > col(b)\n  end)\n  table.sort(coords, function(a,b)\n    return\
    \ col(b) > col(a)\n  end)\n  local coord = nil\n  for i = 1,#coords do\n    coord\
    \ = coords[i]\n    for j = 1,#coord do\n      if x ~= coord[j] then break end\n\
    \    end\n    if j == #coord then break end\n  end\n  return coord\nend", "  \
    \  local row = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n   \
    \         if i == x then\n                table.insert(row, { i, j })\n      \
    \      end\n        end\n    end\n    table.sort(row, function(a, b)\n       \
    \ if a[1] < b[1] then\n            return -1\n        end\n        if a[1] ==\
    \ b[1] then\n            return 0\n        end\n        return 1\n    end)\n \
    \   table.sort(row, function(a, b)\n        if a[1] > b[1] then\n            return\
    \ 1\n        end\n        if a[1] == b[1] then\n            return 0\n       \
    \ end\n        return -1\n    end)\n    return row\nend", "  if x == 0 then\n\
    \    return {}\n  elseif lst[x] == nil then\n    return {}\n  else\n    if #lst[x]\
    \ > 0 then\n      local row = {}\n      local row_x = x + 1\n      for i = #lst[x]-1,\
    \ 1, -1 do\n        row[#row+1] = {row_x, lst[x][i]}\n      end\n      return\
    \ row\n    end\n  end\nend", "  local i = 1\n  local j = 1\n  local row = {}\n\
    \  local rows = {}\n  local cols = {}\n  for k, v in pairs(lst) do\n    i = i\
    \ + 1\n    j = j + 1\n    table.insert(rows, i)\n    for k1, v1 in pairs(v) do\n\
    \      table.insert(cols, j - 1)\n      if k1 == x then\n        table.insert(row,\
    \ i)\n      end\n    end\n  end\n  for i = #rows + 1, 1 do\n    table.insert(rows,\
    \ i)\n  end\n  table.sort(rows)\n  table.sort(cols)\n  for i = 1, #rows do\n \
    \   for j = 1, #cols do\n      if rows[i - 1] = i then\n        table.insert(rows,\
    \ rows[i], cols[j - 1])\n      end\n    end\n  end\n  return row\nend", "  local\
    \ rows = { }\n  for _, l in ipairs(lst) do\n    local row = { }\n    for _, r\
    \ in ipairs(l) do\n      if r == x then\n        table.insert(row, 0)\n      else\n\
    \        table.insert(row, table.getn(row) + 1)\n      end\n    end\n    table.insert(rows,\
    \ row)\n  end\n  table.sort(rows, function(a, b) return a[b[1]] < a[b[2]] end,\n\
    \    function(a, b) return a[b[1]] > a[b[2]] end,\n    function(a, b) return a[b[3]]\
    \ < a[b[2]] end,\n    function(a, b) return a[b[3]] > a[b[2]] end\n  )\n  return\
    \ rows\nend", "    if x == nil then\n        return {}\n    end", "  local rows\
    \ = {}\n  for k, v in pairs(lst) do\n    if v == x then\n      table.insert(rows,\
    \ {k, 0})\n    end\n  end\n  table.sort(rows, function(a, b) return b[1] < a[1]\
    \ end)\n  table.sort(rows, function(a, b) return b[2] > a[2] end)\n  table.sort(rows,\
    \ function(a, b) return a[2] < b[2] end)\n  return rows\nend", "    local tbl\
    \ = {}\n    for rowIdx = 1, #lst do\n        local row = lst[rowIdx]\n       \
    \ local cols = {}\n        for colIdx = 1, #row do\n            if row[colIdx]\
    \ == x then\n                table.insert(cols, (colIdx, rowIdx))\n          \
    \  end\n        end\n        table.sort(cols)\n        for _, col in ipairs(cols)\
    \ do\n            table.insert(tbl, {col, rowIdx})\n        end\n        table.sort(tbl,\
    \ function(a, b)\n            return a[2] > b[2]\n        end)\n    end\n    return\
    \ tbl\nend", "    local ans = {}\n    for i = 1, #lst, 1 do\n        for j = 1,\
    \ #lst[i], 1 do\n            if lst[i][j] == x then\n                table.insert(ans,\
    \ {i, j})\n            end\n        end\n    end\n    return ans\nend\n</cell>\n\
    <cell>\n%%solution", "  local t = {}\n  for _, v in ipairs(lst) do\n    local\
    \ r = v[x] or 0\n    for _ = 1, r do\n      table.insert(t, {v, x})\n    end\n\
    \  end\n  table.sort(t, function(a, b) return a[1] < b[1] end)\n  table.sort(t,\
    \ function(a, b) return b[2] < a[2] end)\n  return t\nend\nget_row = wrap_sort(get_row)",
  "  if x == 0 then\n    return {}\n  end", "  if x > #lst then\n    return {}\n \
    \ end\n  local new_lst = {}\n  for _, v in ipairs(lst) do\n    if x == 0 then\n\
    \      new_lst[#new_lst+1] = {0}\n    else\n      local row_coords = {}\n    \
    \  for _, e in ipairs(v) do\n        row_coords[#row_coords+1] = e\n      end\n\
    \      table.sort(row_coords, function(a, b) return a[1] > b[1] end)\n      table.sort(row_coords,\
    \ function(a, b) return a[2] > b[2] end)\n      new_lst[#new_lst+1] = row_coords\n\
    \    end\n  end\n  return new_lst\nend", "  local new_lst = tablex.new()\n  for\
    \ i, row in pairs(lst) do\n    local new_row = tablex.new()\n    for j = 1, #row\
    \ do\n      if row[j] == x then\n        new_row:insert(i, j)\n      end\n   \
    \ end\n    new_lst:insert(i, new_row)\n  end\n  return new_lst\nend", "  local\
    \ i, j, c = 0, #lst, {}\n  local row = {}", "    local row = {}\n    for k, v\
    \ in pairs(lst) do\n        for k2, v2 in pairs(v) do\n            if k == x then\n\
    \                row.row_index = k\n                row.column_index = k2\n  \
    \              break\n            end\n        end\n    end\n    if row.row_index\
    \ then\n        table.sort(row.column)\n        table.sort(row.row_index)\n  \
    \      return row\n    else\n        return {}\n    end\nend\nget_row = wrap_table(get_row)",
  "    local rows = {}\n    local row_len = {}\n    local row_lens = {}\n    local\
    \ row_lens_pos = 0\n    local col\n    for row_index, row in ipairs(lst) do\n\
    \        row_lens_pos = row_lens_pos + 1\n        row_lens[row_lens_pos] = {}\n\
    \        for _, column in ipairs(row) do\n            row_lens[row_lens_pos][column]\
    \ = row_lens_pos\n        end\n        row_lens[row_lens_pos][row_index] = #row\
    \ + 1\n    end\n    -- Find x index\n    local row_len = #lst\n    local row_len\
    \ = #lst\n    for row_index, row in ipairs(lst) do\n        if row_len == row_lens[row_index][x]\
    \ then\n            -- print(\"Found \", x, \"at \", row_index, \": \", row)\n\
    \            table.insert(rows, {row_index, x})\n            row_len = row_len\
    \ - 1\n        end\n    end\n    -- print(\"Rows sorted by column \", x)\n   \
    \ for _, row in ipairs(rows) do\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b[1] - a[1] end)\n    end\n    table.sort(rows)\n    --\
    \ table.sort(rows, function(a, b) return a[1] - b[1] end)\n    return rows\nend",
  "  local i, res = {}, {}\n  for i=1, #lst do res[i] = {} end\n  for i=1, #lst do\n\
    \    for j=1, #lst[i] do\n      res[i][j] = res[i][j] or {}\n      res[i][j][#res[i][j]\
    \ + 1] = lst[i][j]\n    end\n  end\n  table.sort(res, function(a, b) return a[1][x]\
    \ > b[1][x] end)\n  for i=1, #res do\n    table.sort(res[i], function(a, b) return\
    \ b[x] > a[x] end)\n  end\n  return res\nend", "   local row = {}\n   for i, v\
    \ in pairs(lst) do\n      row[i] = v\n   end\n   table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n   table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n   for i, v in ipairs(row) do\n      if v[1] == x then\n         return\
    \ row\n      end\n   end\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = lst[i]\n    if row[x] == x then\n      table.insert(row, i, row[i])\n\
    \      break\n    end\n  end\n  table.sort(row, 1, #row)\n  table.sort(row, -1,\
    \ #row)\n  return row\nend", "  local t = {}\n  for i = #lst, 1, -1 do\n    for\
    \ j = #lst[i], 1, -1 do\n      if x == lst[i][j] then\n        for k = i - 1,\
    \ -1, 1 do\n          table.insert(t, {k, j})\n        end\n        break\n  \
    \    end\n    end\n  end\n  table.sort(t, function(x, y)\n    return x[1] > y[1]\n\
    \  end)\n  table.sort(t, function(x, y)\n    return x[2] > y[2]\n  end)\n  return\
    \ t\nend", "  -- Find first row that has x value in it.\n  local i = 0\n  while\
    \ i <= #lst do\n    local row = lst[i]\n    local j = 0\n    while j <= #row do\n\
    \      -- Check if the current row has x value in it.\n      if row[j] == x then\n\
    \        return i\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n\
    \  return {}\nend", "    local i, j, t = {}, {}, {}\n    for k in pairs(lst) do\
    \ -- Iterate over every row in the table\n        local n = k[2] -- Number of\
    \ columns\n        for i=1, n do -- Iterate over every column in the row\n   \
    \         local v = k[i] -- Current value of the column\n            if v == x\
    \ then -- If a row contains the element\n                table.insert(i, v) --\
    \ Store the coordinate\n            end\n        end\n        table.sort(i) --\
    \ Sort the coordinate\n        table.sort(j, function(a, b) return b - a) -- Sort\
    \ the row\n        table.insert(t, {i, j}) -- Store the row coordinate\n    end\n\
    \    return t\nend", "    if not lst or x == nil then\n        return lst\n  \
    \  end", "  if x == nil then\n    return {}\n  end", "  local rv = { }\n  for\
    \ i=1, #lst do\n    local t = { }\n    local k = 1\n    for j=1, #lst[i] do\n\
    \      if j == x then break\n      else if k <= x then\n        table.insert(t,\
    \ j)\n      else\n        break\n      end\n      k = k + 1\n    end\n    table.insert(rv,\
    \ t)\n  end\n  table.sort(rv, function(a, b)\n    if a[1] < b[1] then return 1\n\
    \    else if a[1] > b[1] then return -1\n    else return 0\n    end\n  end)\n\
    \  return rv\nend", "  local result = {}\n  for _, v in pairs(lst) do\n    if\
    \ v[x] ~= nil then\n      for i = 1, #v do\n        table.insert(result, { x =\
    \ x, y = v[i] })\n      end\n    end\n  end\n  table.sort(result, function (_1,\
    \ _2)\n    if _1.x < _2.x then\n      return true\n    else\n      return false\n\
    \    end\n  end)\n  table.sort(result, function (_1, _2)\n    if _1.x > _2.x then\n\
    \      return true\n    else\n      return false\n    end\n  end)\n  return result\n\
    end", "  if x == nil then return end\n  local ans = {}\n  for i, e in ipairs(lst)\
    \ do\n    local row = x\n    local row_ans = {}\n    for j = 1, #e do\n      row_ans[(row\
    \ - 1) * #e + j] = e[j]\n    end\n    ans[i] = row_ans\n  end\n  return ans\n\
    end", "  local row = {}\n  for r, row in ipairs(lst) do\n    local x = x - 1\n\
    \    if x >= 0 then\n      table.insert(row, get_row(r, x), r)\n    end\n  end\n\
    \  table.sort(row)\n  return row\nend", "  -- Sort the row coordinates initially\
    \ by ascending order\n  -- Note: The column coordinate is not sorted in this case\n\
    \  if lst[x] ~= nil then\n    return { lst[x] }\n  end\n  -- Sort the row coordinates\
    \ initially by columns in descending order\n  local row = { lst[x] }\n  local\
    \ j = 1\n  for k, v in pairs(lst) do\n    if k == x then\n      j = j + 1\n  \
    \    continue\n    end\n    if row[k] ~= nil then\n      row[k] = { row[k], j\
    \ }\n    end\n  end\n  return row\nend", "\tlocal function _cmp(i, j)\n\t\tif\
    \ i == j then\n\t\t\treturn 0\n\t\telse\n\t\t\treturn i > j ? 1 : -1\n\t\tend\n\
    \tend\n\tlocal row_tables = {}\n\tfor i = 0, #lst - 1 do\n\t\tlocal j = i + 1\n\
    \t\tif j > #lst or _cmp(i, j) ~= 0 then\n\t\t\tfor k = 0, j - i do\n\t\t\t\trow_tables[k]\
    \ = row_tables[k] or {}\n\t\t\t\trow_tables[k][j - k + 1] = lst[i]\n\t\t\tend\n\
    \t\tend\n\tend\n\ttable.sort(row_tables, _cmp)\n\tlocal row_table = {}\n\tfor\
    \ i = 0, #row_tables[#row_tables] - 1 do\n\t\tlocal row = {}\n\t\tfor j = 0, #row_tables[#row_tables[i]]\
    \ + 1 - i do\n\t\t\trow[#row + 1] = row_tables[#row_tables[i]][j]\n\t\tend\n\t\
    \ttable.insert(row_table, row)\n\tend\n\treturn row_table\nend", "    if lst ==\
    \ nil then\n        lst = {}\n    end\n    if type(x) == \"number\" then\n   \
    \     if x > #lst or x < 1 then\n            return nil\n        end\n    else\n\
    \        if type(x) == \"table\" then\n            if #x == 0 then\n         \
    \       return nil\n            end\n        end\n    end\n    local res = {}\n\
    \    for i = 1, #lst, 1 do\n        local curr = lst[i]\n        if type(x) ==\
    \ \"number\" then\n            if x > #curr then break end\n        else\n   \
    \         if #x == 0 then break end\n        end\n        if curr[x] == nil then\
    \ break end\n        res[i] = {x = curr[x]}\n    end\n    table.sort(res, function(a,\
    \ b) return a.x < b.x end)\n    for i = #res - 1, 1, -1 do\n        table.insert(res,\
    \ res[i])\n    end\n    return res\nend", "  -- TODO: optimize this by using hash\
    \ tables or something\n  local row = {}\n  for i, v in ipairs(lst) do\n    if\
    \ i == x then\n      row = {}\n      table.insert(row, v)\n    end\n    table.insert(row,\
    \ v - i)\n  end\n  table.sort(row) -- sort by rows in ascending order\n  for i\
    \ = #row, 1, -1 do\n    table.sort(row, function(x, y)\n      return row[x] <=\
    \ row[y] -- descending sorting by columns in descending order\n    end)\n  end\n\
    \  return row\nend", "  local sorted_rows = sort(lst, function(a, b) return a.row\
    \ < b.row end)\n  for _, row in ipairs(sorted_rows) do\n    local sorted_cols\
    \ = sort(row, function(a, b) return b.col > a.col end)\n    local rows_in_range\
    \ = sorted_rows[table.search(sorted_cols, x)]\n    local new_coords = {}\n   \
    \ for _, coord in ipairs(rows_in_range) do\n      table.insert(new_coords, coord.row,\
    \ coord.col)\n    end\n    table.insert(new_coords, 0, 0)\n    table.insert(new_coords,\
    \ #new_coords, #row)\n    return new_coords\n  end\n  assert(false)\nend", " \
    \  local t = {}\n   local r = -1\n   for i = 1, #lst do\n      if lst[i] ~= nil\
    \ then\n         if not r then\n            r, c = i - 1, 0\n         else\n \
    \           r, c = r + 1, i - 1\n         end\n         t[r] = nil\n         t[r][c]\
    \ = i\n      end\n   end\n   if x > -1 then\n      for i = #t, 1, -1 do\n    \
    \     t[i], t[#t] = t[#t], t[i]\n      end\n   end\n   t[t]:sort()\n   t[t]:reverse()\n\
    \   return t\nend", "  -- Your code here\n  return nil\nend", "  if x ~= 1 then\n\
    \    local result = {}\n    local keys = lst:map(function (x) return x[x] end)\n\
    \    for i = #keys - 1, 1, -1 do\n      local row = lst:map(function (x) return\
    \ x[i] end)\n      table.insert(result, { x = i, y = row[#row] })\n    end\n \
    \   table.sort(result, function (a, b)\n      return a.x < b.x\n    end, true)\n\
    \    table.sort(result, function (a, b)\n      return a.x > b.x\n    end, true)\n\
    \    result[#result].x = x\n  end\n  return result\nend", "  local rows = {}\n\
    \  for _, row in ipairs(lst) do\n    for _, v in ipairs(row) do\n      if v ==\
    \ x then \n        rows[#rows + 1] = {v, 0}\n      end\n    end\n  end\n  return\
    \ table.sort(rows)\nend", "  local t = {}\n  for i, x in ipairs(lst) do\n    local\
    \ row = {x = x, y = lst[i].y}\n    if #row > 1 then\n      t[#t+1] = row\n   \
    \ end\n  end\n  table.sort(t)\n  for i, x in ipairs(t) do\n    local row = {}\n\
    \    if #row < x then\n      table.insert(t, {x=x, y=0})\n    else\n      table.insert(t,\
    \ {x=x, y=t[x].y})\n    end\n  end\n  return t\nend", "    local coords = {}\n\
    \    local count = 0\n    for i, row in ipairs(lst) do\n        count = count\
    \ + 1\n        table.insert(coords, {i, count, row})\n    end\n    table.sort(coords,\
    \ function(a, b) return a[2] > b[2] end)\n    table.sort(coords, function(a, b)\
    \ return a[2] > b[2] and a[1] > b[1] end)\n    table.sort(coords, function(a,\
    \ b) return a[1] < b[1] and a[2] < b[2] end)\n    for _, _, n in ipairs(coords)\
    \ do\n        if n > x then\n            return coords[#coords]\n        end\n\
    \    end\n    return nil\nend", "  local r = {{0, 0}}\n  for k, v in ipairs(lst)\
    \ do\n    if v == x then return { { r[1], r[2] }, { r[3], r[4] } }\n    for i\
    \ = 1, k do\n      r[#r + 1] = { r[1], r[2] }\n    end\n    r[1] = v\n  end\n\
    \  -- TODO: Handle errors\nend", "   if not lst or x == 0 then\n      return {{},\
    \ {}}\n   end\n   local _map = {}\n   local _last = {}\n   for _, v in ipairs(lst)\
    \ do\n      table.insert(_map, v)\n   end\n   if x < 0 or x > #_map then\n   \
    \   return {}\n   end\n   if #_map <= 1 then\n      return _map[1]\n   end\n \
    \  local _lastrow = {}\n   for _, v in ipairs(_map) do\n      table.insert(_lastrow,\
    \ v)\n      if v == x then\n         break\n      end\n   end\n   if #_lastrow\
    \ > 0 then\n      table.sort(_lastrow)\n   end\n   local _last = {}\n   local\
    \ i = 1\n   for _, v in ipairs(_map) do\n      if v ~= x then\n         _last[i]\
    \ = v\n      end\n      i = i + 1\n   end\n   table.sort(_last)\n   for i = 1,\
    \ #_last do\n      table.insert(_map, _last[i])\n   end\n   if #_map > 1 then\n\
    \      local j = 1\n      for _, v in ipairs(_map) do\n         if v ~= x then\n\
    \            local k = _map[i - 1][j]\n            if k ~= v then\n          \
    \     _map[i + 1] = { k, v }\n            end\n         end\n         j = j +\
    \ 1\n      end\n   end\n   return _map\nend", "  local i = {}\n  for i, row in\
    \ ipairs(lst) do\n    for j = 1, #row do\n      if row[j] == x then\n        return\
    \ i\n      end\n    end\n  end\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[#a] < b[#b] end)\n  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n\
    \  table.sort(row, function(a, b) return a[#a] > b[#b] end)\n  return row\nend",
  "    local t = {}\n    for i = 1, #lst do\n        t[i] = {}\n        for j = 1,\
    \ #lst[i] do\n            t[i][j] = lst[i][j]\n        end\n    end\n    table.sort(t,\
    \ function(a, b) return a[#a] - b[#a] end)\n    table.sort(t, function(a, b) return\
    \ a[#a][#b] ~= b[#a][#b] end)\n    table.sort(t, function(a, b) return b[#a][#b]\
    \ ~= a[#a][#b] end)\n    return t[#t][x]\nend", "  local row = {}\n  local row1\
    \ = {}\n  local row2 = {}\n  local i = 0\n  for y in ipairs(lst) do\n    local\
    \ count = table.getn(y)\n    local j = 1\n    while j < count do\n      local\
    \ xx = x + j\n      if row[xx + 1] == nil then\n        row[xx + 1] = y\n    \
    \    row1[xx + 1] = y\n        row2[xx + 1] = y\n      else\n        row[xx +\
    \ 1] = row[xx + 1] + y\n        row1[xx + 1] = row1[xx + 1] + y\n        row2[xx\
    \ + 1] = row2[xx + 1] + y\n      end\n      j = j + 1\n    end\n    i = i + 1\n\
    \  end\n  table.sort(row)\n  table.sort(row1, function(a, b) return a > b end)\n\
    \  table.sort(row2, function(a, b) return a > b end)\n  return row1, row2\nend",
  "  if is_empty(lst) then\n    return {}\n  else\n    local rm = lst[#lst]\n    local\
    \ new_lst = {}\n    for row = #rm, 1, -1 do\n      local columns = {}\n      for\
    \ col = #rm, 1, -1 do\n        if rm[col] == x then\n          table.insert(columns,\
    \ col)\n        end\n      end\n      table.insert(new_lst, {row, table.sort(columns)})\n\
    \    end\n    return new_lst\n  end\nend", "  local t = {}\n  for k, v in pairs(lst)\
    \ do\n    if k == x then\n      t[#t+1] = {k, v}\n    else\n      t[#t+1] = {k,\
    \ v}\n    end\n  end\n  table.sort(t, function(t0, t1)\n    if t0[1] == x then\n\
    \      if t0[2] > t1[2] then\n        return false\n      elseif t0[2] < t1[2]\
    \ then\n        return true\n      end\n    else\n      if t1[1] == x then\n \
    \       if t1[2] > t0[2] then\n          return false\n        elseif t1[2] <\
    \ t0[2] then\n          return true\n        end\n      end\n    end\n    return\
    \ false\n  end)\n  table.sort(t, function(t0, t1)\n    if t0[1] == x then\n  \
    \    if t0[2] < t1[2] then\n        return false\n      elseif t0[2] > t1[2] then\n\
    \        return true\n      end\n    elseif t1[1] == x then\n      if t1[2] >\
    \ t0[2] then\n        return false\n      elseif t1[2] < t0[2] then\n        return\
    \ true\n      end\n    end\n    return false\n  end)\n  table.sort(t, function(t0,\
    \ t1)\n    if t0[1] == x then\n      if t0[2] > t1[2] then\n        return false\n\
    \      elseif t0[2] < t1[2] then\n        return true\n      end\n    elseif t1[1]\
    \ == x then\n      if t1[2] > t0[2] then\n        return false\n      elseif t1[2]\
    \ < t0[2] then\n        return true\n      end\n    end\n    return false\n  end)\n\
    \  return t\nend", "    local t = {}\n    for _, v in pairs(lst) do\n        if\
    \ v == x then\n            t[#t+1] = {v, 0}\n        else\n            local tmp\
    \ = {}\n            for _, vv in pairs(v) do\n                tmp[#tmp + 1] =\
    \ {vv, v}\n            end\n            t[#t+1] = {x, table.reverse(table.sort(table.sort(tmp)))}\n\
    \        end\n    end\n    return t\nend", "  local n = 0 -- number of columns.\n\
    \  for _, row in ipairs(lst) do n = max(n, #row) end\n  local ipairs = n<=1 and\
    \ n-1 or n -- number of columns for every row.\n  local coords = {}\n  for i =\
    \ 0, n-1 do\n    local j = 0\n    for _, row in ipairs(lst) do\n      if i ==\
    \ j then\n        table.insert(coords, {i, #row})\n      else\n        table.insert(coords,\
    \ {i, j})\n      end\n      j = j + 1\n    end\n  end\n  table.sort(coords, function(a,b)\
    \ return a[a[1]] > b[b[1]] end)\n  table.sort(coords, function(a,b) return a[a[1]]\
    \ < b[b[1]] end)\n  table.sort(coords, function(a,b) return a[a[2]] > b[b[2]]\
    \ end)\n  table.sort(coords, function(a,b) return a[a[2]] < b[b[2]] end)\n  local\
    \ rt = {}\n  for _, x in ipairs(coords) do\n    table.insert(rt, {x = x, y = nil})\n\
    \  end\n  for i = 1, n do\n    if i == x then\n      break\n    end\n    local\
    \ row = coords[i]\n    local n = row[2]\n    for j = 1, n do\n      local x =\
    \ row[1]\n      local y = row[j + 1]\n      local xs = rt[x][y]\n      if xs ==\
    \ nil then\n        rt[x][y] = row\n      else\n        table.insert(xs, row)\n\
    \      end\n    end\n  end\n  return rt\nend", "  local results = {}\n  for i\
    \ = 1, #lst do\n    local new_result = {}\n    for j = 1, #lst[i] do\n      if\
    \ x == lst[i][j] then\n        new_result[j] = i - 1\n      else\n        new_result[j]\
    \ = nil\n      end\n    end\n    table.insert(results, new_result)\n  end\n  table.sort(results,\
    \ function(a, b)\n    if a > b then\n      return 1\n    elseif b > a then\n \
    \     return -1\n    else\n      return 0\n    end\n  end)\n  table.sort(results,\
    \ function(a, b)\n    if a == nil then\n      return -1\n    elseif b == nil then\n\
    \      return 1\n    elseif a > b then\n      return 1\n    elseif b > a then\n\
    \      return -1\n    else\n      return 0\n    end\n  end)\n  return results\n\
    end", "  local row_tbl = {}\n  for _, tbl in ipairs(lst) do\n    local row_tbl2\
    \ = {}\n    for _, el in ipairs(tbl) do\n      row_tbl2[el] = el + x\n    end\n\
    \    row_tbl[#row_tbl + 1] = row_tbl2\n  end\n  table.sort(row_tbl, function(a,\
    \ b) return a[2] > b[2] end)\n  local row_tbl2 = {}\n  for i = #row_tbl, 1, -1\
    \ do\n    table.sort(row_tbl[i], function(a, b) return a[1] < b[1] end)\n    row_tbl2[#row_tbl2\
    \ + 1] = row_tbl[i]\n  end\n  return row_tbl2\nend", "  if lst[x] == nil then\n\
    \    return {}\n  end\n  local results = {}\n  local row = {}\n  for i = 1, #lst[x]\
    \ do\n    table.insert(row, i)\n    table.insert(results, {table.concat(row, \"\
    \"), lst[x][i]})\n  end\n  table.sort(results)\n  table.sort(results, function(a,\
    \ b)\n    if a[1] < b[1] then\n      return -1\n    else\n      return 1\n   \
    \ end\n  end)\n  table.sort(results, function(a, b)\n    if a[2] < b[2] then\n\
    \      return -1\n    else\n      return 1\n    end\n  end)\n  return results\n\
    end\n</cell>\n<text>\nHere is a helper function for sorting 2D tables by rows\
    \ in ascending order:", "  local i, rows = next(lst), {}\n  for i = 1, #lst do\
    \ rows[#rows + 1] = i end\n  table.sort(rows, function (a, b) return a[a] < b[b]\
    \ end,\n    function (a, b) return a[a] > b[b] end)", "  local t = {}\n  local\
    \ n = #lst\n  local i = 0\n  while i < n do\n    if i == 0 then\n      t[i] =\
    \ {0, lst[i]}\n    else\n      if lst[i] <= x then\n        t[i] = {t[i-1][1],\
    \ lst[i]}\n      else\n        t[i] = {t[i-1][1], t[i-1][1]+1}\n      end\n  \
    \  end\n    i = i+1\n  end\n  t = t[#t]\n  t = t[#t]\n  t = t[#t]\n  return t\n\
    end", "  if lst.x ~= x then\n    lst.x = x\n    table.sort(lst.rows, function(x,\
    \ y) return x.y < y.y end)\n    table.sort(lst.columns, function(x, y) return\
    \ x.y < y.y end)\n  end\n  return lst.rows[lst.row]:map(function(row)\n    return\
    \ table.copy(row) .. lst.columns[table.unpack(row)]:map(function(column)\n   \
    \   return math.floor((column + x) / x) * x - math.floor((column + x + 1) / x)\
    \ * x\n    end)\n  end)\nend", "    local row_lst = {}\n    local row_x = {}\n\
    \    for i = 1, #lst do\n        row_lst[#row_lst + 1] = {}\n        for j = 1,\
    \ #lst[i] do\n            row_x = {i, j, lst[i][j]}\n            row_lst[#row_lst\
    \ + 1] = row_x\n        end\n    end\n    table.sort(row_lst, function (a, b)\n\
    \        if a[2] > b[2] then\n            return 1\n        elseif a[2] < b[2]\
    \ then\n            return -1\n        else\n            return 0\n        end\n\
    \    end)\n    table.sort(row_lst, function (a, b)\n        if a[#row_x] > b[#row_x]\
    \ then\n            return 1\n        elseif a[#row_x] < b[#row_x] then\n    \
    \        return -1\n        else\n            return 0\n        end\n    end)\n\
    \    return row_lst\nend", "    if not lst then\n        return {}\n    end",
  "  if x == nil then return end\n  local t = {}\n  local i, n = #lst, 1\n  for i\
    \ = 1, n do\n    t[i] = {}\n    for j = 1, n do\n      local m = lst[i][j]\n \
    \     if m == x then\n        table.insert(t[i], j)\n      else\n        break\n\
    \      end\n    end\n  end\n  table.sort(t)\n  if t[1][1] == nil then return {}\
    \ end\n  local j = 1\n  for i = 1, n do\n    for k = 1, n do\n      if t[i][j]\
    \ == x then\n        table.insert(t[i], k)\n        break\n      end\n    end\n\
    \    j = j + 1\n  end\n  return t\nend", "  local rows = {}\n  for _, row in ipairs(lst)\
    \ do\n    for _, cell in ipairs(row) do\n      if cell == x then\n        table.insert(rows,\
    \ {0, cell})\n      end\n    end\n  end\n  table.sort(rows, function(a, b) return\
    \ a.row > b.row end)\n  local row = {}\n  for _, cell in ipairs(rows) do\n   \
    \ table.insert(row, table.unpack(cell))\n  end\n  return row\nend", "  local ret\
    \ = {}\n  for k, v in ipairs(lst) do\n    if v == x then\n      table.insert(ret,\
    \ k)\n    end\n  end\n  table.sort(ret, '>', function(_, _) return -1 end)\n \
    \ table.sort(ret, '<', function(_, _) return 1 end)\n  return ret\nend", "  local\
    \ t = {}\n  for i = 1, #lst do\n    t[i] = {}\n  end\n  for i = 1, #lst do\n \
    \   for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        t[i][j] = i\n\
    \      end\n    end\n  end\n  table.sort(t, function(a, b) return a[1] < b[1]\
    \ end)\n  table.sort(t, function(a, b) return a[2] > b[2] end)\n  return t\nend",
  "  if x == 1 then\n    return {}\n  end\n  if #lst == 0 then\n    return {}\n  end\n\
    \  local row = {}\n  local i = 1\n  while i <= #lst do\n    local col = #lst[i]\n\
    \    table.insert(row, {{i, col}, {i - 1, col - 1}})\n    i = i + 1\n  end\n \
    \ table.sort(row, function(a, b) return a[a[1]] > b[b[1]] end)\n  table.sort(row,\
    \ function(a, b) return a[b[1]] > a[a[1]] end)\n  return row\nend", "  local row\
    \ = {}\n  for _, v in ipairs(lst) do\n    local found = false\n    for _,s in\
    \ pairs(v) do\n      if s == x then\n        table.insert(row, v)\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(row,\
    \ {v, {}})\n    end\n  end\n  table.sort(row, function (left, right)\n    if type(left)\
    \ == \"table\" then\n      if type(right) == \"table\" then\n        return true\n\
    \      elseif type(right) == \"number\" then\n        return right < x\n     \
    \ else\n        return false\n      end\n    else\n      if type(right) == \"\
    table\" then\n        return false\n      elseif type(right) == \"number\" then\n\
    \        return right < x\n      else\n        return true\n      end\n    end\n\
    \  end)\n  table.sort(row, function (left, right)\n    if type(right) == \"table\"\
    \ then\n      if type(left) == \"table\" then\n        return false\n      elseif\
    \ type(left) == \"number\" then\n        return left < right\n      else\n   \
    \     return true\n      end\n    else\n      if type(left) == \"table\" then\n\
    \        return false\n      elseif type(left) == \"number\" then\n        return\
    \ left < right\n      else\n        return true\n      end\n    end\n  end)\n\
    \  return row\nend", "    local row_table = {}\n    for i=1, #lst, 1 do\n    \
    \    for j=1, #lst[i], 1 do\n            if x == lst[i][j] then\n            \
    \    table.insert(row_table, {i, j})\n            end\n        end\n    end\n\
    \    table.sort(row_table, function(a, b) return a[a[1]] < b[b[1]] end)\n    for\
    \ i=1, #row_table, 1 do\n        table.sort(row_table[i], function(a, b) return\
    \ a[a[1]] > b[b[1]] end)\n    end\n    return row_table\nend", "  -- sort\n  if\
    \ #lst <= 1 then\n    return {}\n  elseif #lst == 1 then\n    local row = lst[1]\n\
    \    if #row == 1 then\n      return {{row[x]}};\n    else\n      return {{row[x]}}\n\
    \    end\n  end", "  -- Create a table with zero rows and two columns\n  local\
    \ rows = {}\n  for _, l in ipairs(lst) do\n    table.insert(rows, {0, 2})\n  \
    \  table.insert(rows, l, 2)\n  end", "  if lst[x] == nil then return end\n  if\
    \ #lst[x] > 0 then\n    local tbl = {}\n    local i = 0\n    for v in lst[x] do\n\
    \      tbl[i] = {v, x}\n      i = i + 1\n    end\n    table.sort(tbl, function(a,\
    \ b)\n      return a[1] > b[1]\n    end)\n    for i = #tbl - 1, -1, -1 do\n  \
    \    table.insert(tbl, tbl[i])\n    end\n    return tbl\n  end\nend", "  if not\
    \ lst or x == 0 then\n    return {}\n  elseif x == 1 then\n    return lst[1]\n\
    \  else\n    local row = table.getn(lst)\n    local result = {}\n    for i = 1,\
    \ row do\n      local columns = {}\n      for j = 1, x do\n        table.insert(columns,\
    \ j)\n      end\n      table.insert(result, columns)\n    end\n    table.sort(result)\n\
    \    table.sort(result, function(a, b) return b[1] < a[1] end)\n    return result\n\
    \  end\nend", "  if not lst or x == nil then\n    return lst\n  end\n  if #lst\
    \ == 1 then\n    return {{ x = x, y = lst[1].y }}\n  end\n  local l = {}\n  for\
    \ i = #lst, 1, -1 do\n    table.insert(l, { x = x, y = lst[i].y })\n  end\n  table.sort(l,\
    \ function (a, b) return a.x < b.x end)\n  table.sort(l, function (a, b) return\
    \ a.y < b.y end)\n  for i = #l, 1, -1 do\n    table.insert(l, { x = l[i].x, y\
    \ = l[#l].y })\n  end\n  table.sort(l, function (a, b) return a.x < b.x end)\n\
    \  return l\nend", "  local lst = lst or {}\n  local ans = {}\n  -- sort coordinates\
    \ of row by columns in descending order\n  table.sort(lst, function(a, b) return\
    \ a[2] > b[2] end)\n  for i = 1, #lst do\n    table.sort(lst[i], function(a, b)\
    \ return a[1] < b[1] end)\n  end\n  -- sort coordinates by rows in ascending order\n\
    \  for i = 1, #lst do\n    table.sort(lst[i], function(a, b) return a[1] > b[1]\
    \ end)\n  end\n  -- if x is 0, then return an empty table\n  if x == 0 then\n\
    \    return ans or {}\n  end\n  -- if x is negative, sort coordinates by rows\
    \ in ascending order\n  if x < 0 then\n    table.sort(lst, function(a, b) return\
    \ a[1] > b[1] end)\n  end\n  local r = #lst\n  -- try to find x\n  -- if x is\
    \ found, add coordinate to table and delete coordinate\n  -- from list\n  for\
    \ i = 1, #lst do\n    if x < lst[i][1] then\n      if ans[i] then\n        --\
    \ if there is already a coordinate in ans\n        -- add coordinate to coordinates\n\
    \        ans[i][#ans[i]+1] = lst[i]\n      else\n        -- if there is only an\
    \ empty coordinate\n        -- add coordinate to coordinates\n        ans[i] =\
    \ {lst[i]}\n      end\n      table.insert(lst, lst[i])\n      lst[i] = nil\n \
    \     -- decrease row and decrease column\n      r = r - 1\n      i = 1\n    else\n\
    \      -- decrease row\n      r = r - 1\n      -- decrease column\n      i = i\
    \ + 1\n    end\n  end\n  return ans\nend", "    if type(x) == \"number\" then\n\
    \        local y = {}\n        for i=1, #lst do\n            local v = lst[i]\n\
    \            for j=1, #v do\n                if v[j] == x then\n             \
    \       table.insert(y, {i, j, v[j]})\n                end\n            end\n\
    \        end\n        table.sort(y)\n        for i=1, #y do\n            y[i]\
    \ = table.remove(y)\n        end\n        return y\n    else\n        local y\
    \ = {}\n        for i=1, #lst do\n            local v = lst[i]\n            for\
    \ j=1, #v do\n                table.insert(y, {i, j, v[j]})\n            end\n\
    \        end\n        table.sort(y)\n        local r = {}\n        for i=1, #y\
    \ do\n            local v = y[i]\n            table.insert(r, v[1])\n        \
    \    for j=1, #v do\n                if j == #v or v[j] > v then\n           \
    \         table.insert(r, v[j])\n                end\n            end\n      \
    \  end\n        return r\n    end\nend", "  local result = {}\n  for _, v in pairs(lst)\
    \ do\n    local row = {}\n    for _, e in pairs(v) do\n      if e == x then\n\
    \        row[#row + 1] = #row + 1\n      else\n        row[#row + 1] = e\n   \
    \   end\n    end\n    for _, e in pairs(row) do\n      if e > #row then\n    \
    \    break\n      end\n    end\n    if #row > 0 then\n      result[#result + 1]\
    \ = {row = row, index = #row}\n    end\n  end\n  table.sort(result)\n  table.sort(result,\
    \ function(a, b) return a[5] < b[5] end) -- sort by column in descending order\n\
    \  return result\nend", "    local ans = {{0, 0}}\n    for i = 1, #lst do\n  \
    \      if x > lst[i][1] then\n            table.insert(ans, {i, lst[i][#lst]})\n\
    \            lst[i][#lst] = x\n        end\n    end\n    table.sort(ans, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2] end\n    end)\n\
    \    table.sort(ans, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] < b[2] end\n    end)\n    return ans\nend", "  if #lst == 0 then\n\
    \    return {}\n  end\n  local coord_x = {}\n  local coord_y = {}\n  for i = 1,\
    \ #lst do\n    local row_x = lst[i][x]\n    local row_y = lst[i][#lst[i]]\n  \
    \  table.insert(coord_x, row_x)\n    table.insert(coord_y, row_y)\n  end\n  table.sort(coord_x,\
    \ function(a, b) return a < b end,\n             function(l, r) return coord_y[l]\
    \ < coord_y[r] end)\n  table.sort(coord_y, function(a, b) return coord_x[a] <\
    \ coord_x[b] end,\n             function(l, r) return coord_y[l] > coord_y[r]\
    \ end)\n  local r = {{}, {}}\n  for i = 1, #coord_x do\n    table.insert(r[#r][#coord_x[i]],\
    \ {i, coord_x[i]})\n  end\n  return r\nend", "   -- The row should be sorted in\
    \ ascending order.\n   -- Also, if the row contains duplicate values, they should\
    \ get sorted in\n   -- descending order. So, first sort the row by columns, then\
    \ sort the\n   -- row by row.\n   local row = {}\n   for _, v in ipairs(lst) do\n\
    \      table.insert(row, v)\n   end\n   table.sort(row)\n   table.sort(row, function(v1,v2)\n\
    \      return v1 <= v2\n   end)\n   local row2 = {}\n   for _, v in ipairs(row)\
    \ do\n      table.insert(row2, v)\n   end\n   table.sort(row2, function(v1,v2)\n\
    \      return v1 <= v2\n   end)\n   if #row2 == 0 then\n      return {}\n   elseif\
    \ #row2 == 1 then\n      local v = row2[1]\n      row2[1] = nil\n      return\
    \ {{0, v}}\n   else\n      -- Reorganize row2 to [[x0, y0, x1, y1 ...], [x0, y0,\
    \ x1, y1 ...], ...].\n      local row3 = {}\n      for _, v in ipairs(row2) do\n\
    \         local row4 = { }\n         for i = #v, 1, -1 do\n            table.insert(row4,\
    \ v[i])\n         end\n         table.insert(row3, row4)\n      end\n      table.sort(row3,\
    \ function(v1,v2)\n         return v1 <= v2\n      end)\n      return row3\n \
    \  end\nend", "  local row = {}\n  local i, j = 0, 0\n  for _, _ in ipairs(lst)\
    \ do\n    if i == x then\n      row[j] = {}\n      j = j + 1\n    end\n    row[j]\
    \ = _\n    i = i + 1\n  end\n  return row\nend", "    if not lst or x == nil then\n\
    \        return nil\n    end", "    local r = {} -- Initialize table to hold coordinate\
    \ tuples\n    for i, v in ipairs(lst) do\n        local c = {} -- Initialize table\
    \ to hold coordinate values\n        for j = 1, #v do\n            c[j] = v[j]\n\
    \        end\n        r[#r+1] = {v, c}\n    end\n    r:sort(function(a, b) return\
    \ a[#a][#b] > a[#a][#b] end)\n    r:sort(function(a, b) return a[#a][#b] < a[#b][#a]\
    \ end)\n    return r\nend", "  local result = {}\n  local rows, columns = #lst,\
    \ lst[1]\n  for i = 1, rows do\n    table.insert(result, { i, x })\n    x, x =\
    \ x - 1, lst[i][columns - 1]\n  end\n  table.sort(result, function(a, b) return\
    \ a[1] > b[1] end)\n  for i = 1, rows do\n    table.sort(result[i], function(a,\
    \ b) return a[2] > b[2] end)\n  end\n  return result\nend", "  if not lst then\n\
    \    return {}\n  elseif type(x) == 'number' then\n    for _, row in pairs(lst)\
    \ do\n      for _, value in pairs(row) do\n        if value >= x then\n      \
    \    return {{0, x}, {row, value}, {row, value}}\n        end\n      end\n   \
    \ end\n  end\nend", '  if #lst == 0 then return {} end', '    if not lst[x] then
    return {} end', "  -- Base case\n  if lst == nil then\n    return nil\n  end",
  "   if x == 0 then\n      return {}\n   elseif type(lst) == \"table\" then\n   \
    \   -- Check if x is in first row.\n      if x < 1 then\n         return {{lst[x],\
    \ lst[1]}}\n      elseif x > #lst then\n         return {{lst[x], lst[1]}}\n \
    \     else\n         -- Check if x is in the rest of the table.\n         if x\
    \ > 1 then\n            local row = {}\n            for j = 2, x + 1 do\n    \
    \           table.insert(row, lst[j])\n            end\n            table.sort(row,\
    \ function(a, b) return a > b end)\n            table.sort(row, function(a, b)\
    \ return a < b end)\n            local res = {}\n            for i = 1, #row do\n\
    \               table.insert(res, get_row(row[i], i - 1))\n            end\n \
    \           table.sort(res, function(a, b) return a[1] ~= b[1] end)\n        \
    \    return res\n         else\n            -- Check if x is in the first row.\n\
    \            if x <= #lst - 1 then\n               return {{lst[x], lst[x]}}\n\
    \            else\n               return {{lst[x], lst[1]}}\n            end\n\
    \         end\n      end\n   else\n      return {}\n   end\nend", "  local ret\
    \ = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    local cols = {}\n  \
    \  for j = 1, #row do table.insert(cols, row[j]) end\n    table.sort(cols)\n \
    \   table.sort(row, function(a, b)\n      return b < a\n    end)\n    table.insert(ret,\
    \ { i, cols })\n  end\n  table.sort(ret)\n  return ret[x]\nend", "  local row\
    \ = {}\n  for i = 0, #lst do\n    if lst[i][1] == x then table.insert(row, i)\
    \ end\n  end\n  if #row < x then return nil end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return a[#row] <  b [#row] end)\n  return row\nend", "  if x\
    \ ~= 1 then\n    local coords = sort_row_by_col(lst, x, false)\n    local row\
    \ = {}\n    for _, coord in ipairs(coords) do\n      table.insert(row, unpack(coord))\n\
    \    end\n    return row\n  end\n  return {}\nend", "  local rows = {}\n  for\
    \ y, row in ipairs(lst) do\n    for z, c in ipairs(row) do\n      if c == x then\n\
    \        table.insert(rows, {y, z})\n      end\n    end\n  end\n  table.sort(rows)\n\
    \  table.sort(rows, function(x, y) return y[1] < x[1] end)\n  return rows\nend",
  "    local r = {}\n    for i, v in ipairs(lst) do\n        table.insert(r, {i, v})\n\
    \    end\n    table.sort(r, function(a, b) return a[2] < b[2] end)\n    table.sort(r,\
    \ function(a, b) return a[1] > b[1] end)\n    table.sort(r, function(a, b) return\
    \ a[1] < b[1] end)\n    if #r > 0 then\n        if x == r[2][1] then\n       \
    \     table.sort(r, function(a, b) return a[2] < b[2] end)\n        else\n   \
    \         table.sort(r, function(a, b) return a[2] > b[2] end)\n        end\n\
    \        return r\n    else\n        return {}\n    end\nend", "  local t = {}\n\
    \  for k, v in pairs(lst) do\n    if type(v) == \"table\" then\n      local rows\
    \ = v\n      for kk, v in pairs(rows) do\n        if k == x then\n          t[#t\
    \ + 1] = {k + x, v}\n        end\n      end\n    end\n  end\n  return t\nend",
  "  local row = {}\n  local row, i = {}, 0\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n    if i == x then break end\n    i = i + 1\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a; end)\n  return row\nend", "  local\
    \ row = {}\n  for _, row in ipairs(lst) do\n    for i, v in ipairs(row) do\n \
    \     if v == x then\n        table.insert(row, i)\n        break\n      end\n\
    \    end\n  end\n  table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \  table.sort(row, function(a, b) return a[b] ~= x end)\n  return row\nend", " \
    \   local rows = #lst\n    local cols = 0\n    for _, row in ipairs(lst) do\n\
    \        cols = #row\n        break\n    end", "\tlocal row = {}\n\tlocal row_num\
    \ = 1\n\tlocal col_num = 1\n\tlocal tmp_num = 1\n\tlocal first_row\n\tfor _, row\
    \ in ipairs(lst) do\n\t\tcol_num = col_num + 1\n\t\ttmp_num = tmp_num + 1\n\t\t\
    if col_num > x then\n\t\t\tbreak\n\t\tend\n\tend\n\tif col_num > x then\n\t\t\
    first_row = row\n\t\trow = row[1]\n\telse\n\t\tfirst_row = row\n\t\trow = row[1]\n\
    \t\trow_num = row_num - 1\n\tend\n\tlocal next_row = row\n\trow_num = row_num\
    \ - 1\n\tfor _, row in ipairs(lst) do\n\t\tif row_num > 0 then\n\t\t\tif row_num\
    \ == 1 then\n\t\t\t\trow = {first_row, row}\n\t\t\telse\n\t\t\t\trow = {row, next_row}\n\
    \t\t\t\tnext_row = row\n\t\t\t\trow_num = row_num - 1\n\t\t\tend\n\t\telse\n\t\
    \t\trow = {row, row}\n\t\tend\n\tend\n\treturn row\nend", "  local function get_row_inner(x,\
    \ row)\n    return unpack(row, x)\n  end\n  local t = {}\n  for k, v in pairs(lst)\
    \ do\n    t[#t + 1] = { k, get_row_inner(x, v) }\n  end\n  table.sort(t, function(a,\
    \ b)\n    return a[2] < b[2] or a[1] == b[1]\n  end)\n  table.sort(t, function(a,\
    \ b)\n    return a[1] > b[1] or a[1] < b[1]\n  end)\n  return t\nend", "    if\
    \ not lst then return {} end\n    local t = {}\n    for _, r in ipairs(lst) do\n\
    \        if r[x] ~= nil then\n            t[#t+1] = {x = r, y = lst.x}\n     \
    \   end\n    end\n    table.sort(t, function(a, b) return a.x > b.x end)\n   \
    \ table.sort(t, function(a, b) return a.y < b.y end)\n    return t\nend", "  if\
    \ type(lst) == 'table' then\n    lst = lst[x]\n  end\n  local rows = { { x = x\
    \ } }    \n  for i = 1, #lst, 1 do\n    local row = { x = 0 }\n    for j = 1,\
    \ #lst[i], 1 do\n      row.x = row.x .. \",\" .. i\n      row.y = row.y .. \"\
    ,\" .. j\n    end\n    rows[#rows+1] = row\n  end\n  table.sort(rows, function(a,\
    \ b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return a.y < b.y\
    \ end)\n  return rows\nend", "  local t = {}\n  local i = 1\n  for k, v in ipairs(lst)\
    \ do\n    i = i + 1\n    table.insert(t, {i, -i - 1})\n  end\n  table.sort(t)\n\
    \  local j = 0\n  for _, v in ipairs(t) do\n    j = j + 1\n    local tmp = {}\n\
    \    local k = 1\n    for _, v2 in ipairs(v) do\n      k = k + 1\n      table.insert(tmp,\
    \ v2 + k - 1)\n    end\n    if v[1] ~= x then return nil end\n    table.sort(tmp,\
    \ function(a, b) return a < b end)\n    table.insert(t, {j, -i - j - 1})\n   \
    \ for _, v2 in ipairs(tmp) do table.insert(t, {-i - j - 1, v2 - j - 1}) end\n\
    \  end\n  return t\nend", "  if x ~= nil then\n    local n = 1\n    local rows\
    \ = #lst\n    if rows <= 0 then\n      return {{x = x, y = x}};\n    else\n  \
    \    local i = 1\n      for i = 1, rows do\n        local x_ = lst[i][1]\n   \
    \     local y_ = lst[i][2]\n        if x_ < x then\n          n = i + 1\n    \
    \      x = x_\n        end\n        if y_ < x then\n          n = i + 1\n    \
    \      x = y_\n        end\n      end\n      return {{x = x, y = x}}\n    end\n\
    \  else\n    return {}\n  end\nend", "  if type(lst) ~= 'table' then return end\n\
    \  local coord = {}\n  for i, v in ipairs(lst) do\n    local row = i / x\n   \
    \ local col = i % x\n    if not coord[row] then\n      coord[row] = {}\n    end\n\
    \    table.insert(coord[row], col)\n  end\n  table.sort(coord, function(a, b)\
    \ return a[b] < b[a] end)\n  table.sort(coord, function(a, b) return a[b] > b[a]\
    \ end)\n  return coord\nend", "  local result = {}\n  local result_i = 1\n  for\
    \ i, row in ipairs(lst) do\n    local row_i = 1\n    for j, value in ipairs(row)\
    \ do\n      if value == x then\n        result[result_i] = {}\n        result[result_i][row_i]\
    \ = {}\n        result[result_i][row_i][x] = true\n      end\n      result[result_i][row_i][value]\
    \ = true\n      row_i = row_i + 1\n    end\n    result_i = result_i + 1\n  end\n\
    \  table.sort(result, function(a, b) return a[2] < b[2] end)\n  table.sort(result,\
    \ function(a, b) return a[1] > b[1] end)\n  return result\nend", "  if is_empty(lst)\
    \ then return {{}} end\n  local row_tables = {}\n  for _, row in ipairs(lst) do\n\
    \    for _, _ in ipairs(row) do\n      if _ == x then row_tables[#row_tables +\
    \ 1] = row end\n    end\n  end\n  table.sort(row_tables, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(row_tables, function(a, b) return a[2] > b[2]\
    \ end)\n  table.sort(row_tables, function(a, b) return a[3] < b[3] end)\n  table.sort(row_tables,\
    \ function(a, b) return a[3] > b[3] end)\n  return row_tables\nend", "    local\
    \ rows, cols = #lst, #lst[1]\n    local ans = {}\n    for i = 1, rows do\n   \
    \     local row = {}\n        for j = 1, cols do\n            if lst[i][j] ==\
    \ x then\n                table.insert(row, i - 1, j - 1)\n            end\n \
    \       end\n        table.insert(ans, row)\n    end\n    table.sort(ans, function(a,\
    \ b) return a[1] < b[1] end)\n    table.sort(ans, function(a, b) return a[2] >\
    \ b[2] end)\n    return ans\nend", "  if lst[x] then\n    local tt = {}\n    for\
    \ i = 1, #lst[x] do\n      table.insert(tt, {i, #lst[x]})\n    end\n    return\
    \ tt\n  else\n    return {}\n  end\nend", "   -- We sort the coordinates of all\
    \ rows and columns\n   -- initially by rows in ascending order, and then\n   --\
    \ by columns in descending order.\n   -- After that, we find rows which are in\
    \ sorted order in\n   -- the table by binary search and then return\n   -- coordinate\
    \ pairs for each row in ascending order\n   -- in form of table of tables, [[(x1,\
    \ y1), (x2, y2)] ...].\n   -- We do this because binary search may return index\
    \ in\n   -- negative range (which is equivalent for no value found)\n   -- and\
    \ we need to translate this index to positive range.\n   -- Also, we return the\
    \ table in descending order in the end so\n   -- that we can iterate in ascending\
    \ order over rows later.\n   local row_list = pairs(lst)\n   table.sort(row_list,\
    \ function(a, b) return a[1] < b[1] end)\n   table.sort(row_list, function(a,\
    \ b) return a[2] > b[2] end)\n   local rows = #row_list\n   local row_dict = {}\n\
    \   for i = 1, rows do\n      local row = row_list[i - 1]\n      local coords\
    \ = pairs(row)\n      table.sort(coords, function(a, b) return a[1] < b[1] end)\n\
    \      table.sort(coords, function(a, b) return a[2] > b[2] end)\n      -- We\
    \ return coordinate pairs in descending order\n      -- in the form of table of\
    \ tables, [[(x1, y1), (x2, y2)] ...].\n      table.insert(row_dict, i, coords)\n\
    \   end\n   local row_index = binary_search(row_dict, x)\n   if row_index == nil\
    \ then\n      return {}\n   end\n   -- We transform row_index into positive range\
    \ by adding one.\n   local row = row_list[row_index + 1]\n   local coords = pairs(row)\n\
    \   table.sort(coords, function(a, b) return a[1] < b[1] end)\n   table.sort(coords,\
    \ function(a, b) return a[2] > b[2] end)\n   return coords\nend", "  if lst[x]\
    \ ~= nil then\n    return lst[x]\n  end", "    if lst[x] == nil then return {{x\
    \ = x, y = x}};\n    else\n        local new_x = x + 1;\n        local new_y =\
    \ x; -- column index\n        local new_l = {{x = new_x, y = new_y}}; -- new table\
    \ to insert to\n        local new_r = {{x = x, y = new_y}};\n        for i=1,#lst[x]\
    \ do\n            local row = lst[x][i]; -- current row\n            if row.x\
    \ < new_x then\n                new_l = {{x = new_x, y = new_y}}; -- create new\
    \ row\n                new_x = row.x;\n                new_y = row.y;\n      \
    \      end\n            new_r[#new_r+1] = row; -- insert the row into the new\
    \ table\n        end\n        return new_l, new_r; -- return the new table\n \
    \   end\nend", "  local tables = lst:clone()\n  tables:sort(function(a, b) return\
    \ a < b end)\n  tables:sort(function(a, b) return a > b end)\n  local row = {}\n\
    \  for i, v in ipairs(tables) do\n    if v[x] == x then table.insert(row, i) end\n\
    \  end\n  return row\nend", "  local rows = {}\n  for k in pairs(lst) do\n   \
    \ table.insert(rows, {k, lst[k]})\n  end\n  table.sort(rows, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(rows, function(a, b) return a[2] > b[2] end)\n\
    \  table.sort(rows, function(a, b) return a[1] > x end)\n  table.sort(rows, function(a,\
    \ b) return a[2] > x end)\n  -- table.sort(rows, function(a, b) return a[1] ==\
    \ x and a[2] == x end)\n  return rows\nend", "  if lst == nil then\n    return\
    \ {}\n  end", "  if #lst == 0 then\n    return {}\n  elseif #lst == 1 then\n \
    \   return {{x, lst[1][x]}}\n  else\n    local result = {}\n    for i = 1, #lst\
    \ do\n      local row = lst[i]\n      for j = 1, #row do\n        table.insert(result,\
    \ {i, j})\n      end\n    end\n    table.sort(result, function(a, b) return a[1]\
    \ - b[1] end)\n    for i = 1, #result do\n      table.sort(result[i], function(a,\
    \ b) return b[1] - a[1] end)\n    end\n    return result\n  end\nend", "    local\
    \ row = {}\n    for _, r in ipairs(lst) do\n        table.insert(row, r[x])\n\
    \    end\n    table.sort(row, function(a, b) return a[1] > b[1] end)\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    return row\nend", "  local rows\
    \ = { }\n  for i = 1, #lst do\n    local row = { }\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, { i, j })\n      end\n\
    \    end\n    if not #row then break end\n    table.sort(row, function(a, b)\n\
    \      return a[1] > b[1]\n    end)\n    table.sort(row, function(a, b)\n    \
    \  return a[2] > b[2]\n    end)\n    table.insert(rows, row)\n  end\n  return\
    \ rows\nend", "    local row_table = {}\n    for i, elem in pairs(lst) do\n  \
    \      table.insert(row_table, i, elem[x])\n    end\n    -- Sort by row\n    table.sort(row_table)\n\
    \    -- Sort by column\n    for j = #row_table, 1, -1 do\n        table.sort(row_table[j],\
    \ function(i, j) return row_table[j][j] end)\n    end\n    return row_table\n\
    end", "    local new_lst = {}\n    for k, v in ipairs(lst) do\n        if v ==\
    \ x then\n            new_lst[#new_lst+1] = {k, x}\n        else\n           \
    \ new_lst[#new_lst+1] = {k, v}\n        end\n    end\n    for i = #new_lst, 1,\
    \ -1 do\n        table.sort(new_lst[i])\n    end\n    return new_lst\nend", " \
    \   if type(x) == \"number\" then\n        -- Special case: return the row corresponding\
    \ to the given index\n        -- e.g. get_row({{1, 2, 3, 4}, {5, 6, 7, 8}}, 3)\n\
    \        if lst == nil then\n            return {{}}\n        else\n         \
    \   local row = {}\n            for i = 1, #lst do\n                local coord\
    \ = {i = i, x = lst[i]}\n                table.insert(row, coord)\n          \
    \  end\n            table.sort(row)\n            return {row}\n        end\n \
    \   else\n        -- Find indices of x among lst elements\n        local xidx\
    \ = {}\n        for _, v in ipairs(lst) do\n            if v == x then\n     \
    \           table.insert(xidx, 1)\n            else\n                table.insert(xidx,\
    \ 0)\n            end\n        end\n        -- Sort indices according to ascending\
    \ order of values in descending order of indices\n        table.sort(xidx, 1,\
    \ function (a, b) return a > b end)\n        local row = {}\n        for i = 1,\
    \ #lst do\n            if i == #xidx then\n                table.insert(row, {})\n\
    \            else\n                local coord = {i = i, x = lst[i]}\n       \
    \         table.insert(row, coord)\n            end\n        end\n        table.sort(row)\n\
    \        return {row}\n    end\nend", "    local rows = {}\n    for i, v in pairs(lst)\
    \ do\n        if v == x then\n            table.insert(rows, {i, #lst[i + 1]})\n\
    \        end\n    end\n    table.sort(rows, function(a, b) return a[1] > b[1]\
    \ end)\n    for i, v in pairs(rows) do\n        table.sort(rows, function(a, b)\
    \ return a[2] > b[2] end)\n    end\n    return rows\nend", "  local rows, cols\
    \ = {}, {}\n  for i, v in ipairs(lst) do\n    table.insert(rows, v)\n    table.insert(cols,\
    \ i)\n  end", "  local row = {}\n  for _, v in ipairs(lst) do\n    local rows\
    \ = {}\n    for i, _ in ipairs(v) do\n      rows[#rows + 1] = i\n    end\n   \
    \ for _, v in ipairs(rows) do\n      table.insert(row, v)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b)\n    return a[1] > b[1]\n  end)\n  local out\
    \ = {}\n  for _, v in ipairs(row) do\n    local rows = {}\n    for i, _ in ipairs(v)\
    \ do\n      rows[#rows + 1] = i\n    end\n    for _, v in ipairs(rows) do\n  \
    \    table.insert(out, v)\n    end\n  end\n  table.sort(out, function(a, b)\n\
    \    return a[1] > b[1]\n  end)\n  return out\nend", "    if lst == nil then return\
    \ {{}} end\n    local t = {}\n    for _, v in pairs(lst) do\n        t[#t+1] =\
    \ row(v)\n    end\n    table.sort(t, function(row1, row2)\n        local r, c\
    \ = row1\n        local r_max = #row1\n        for i = 1, #row2 do\n         \
    \   if row2[i] ~= row1[r_max] then\n                r = r + 1\n            end\n\
    \            r_max = r_max - 1\n        end\n        c = c - r_max + 1\n     \
    \   if c > 1 then\n            return true\n        else\n            return false\n\
    \        end\n    end)\n    t[#t+1] = row(x)\n    return t\nend", "    local out\
    \ = {}\n    for i = 0, #lst do\n        local row = { { x = lst[i][1] } }\n  \
    \      for j = 2, #lst[i] do\n            table.insert(row, { x = lst[i][j], y\
    \ = lst[i][1] })\n        end\n        table.insert(out, row)\n    end\n    table.sort(out)\n\
    \    if out[x].x == nil then\n        table.insert(out, { x = 0, y = 0})\n   \
    \ end\n    table.sort(out[x])\n    return unpack(out)\nend", "   local rows =\
    \ {}\n   for row in lst do\n      local row = {}\n      for k, v in pairs(row)\
    \ do\n         row[k] = v + x\n      end\n      table.insert(rows, row)\n   end\n\
    \   table.sort(rows,\n      function(row, r) return row[r] end,\n      function(row,\
    \ r) return row[r][r] end,\n      function(rows, r1, r2) return rows[r1][r2] end,\n\
    \      function(rows, r1, r2, r3) return rows[r1][r2][r3] end)\n   return rows\n\
    end", "  -- assert x > 0\n  local i, t = 1, lst[1]\n  while i <= x do\n    i =\
    \ i + 1\n    table.insert(t, i)\n  end\n  local j = 1\n  local row = {}\n  while\
    \ j <= x do\n    local cur_row = row\n    local pos = table.remove(t)\n    for\
    \ k = 0, #pos do\n      cur_row[#cur_row + 1] = {}\n      cur_row[#cur_row + 1][#cur_row]\
    \ = pos\n      cur_row = cur_row[#cur_row + 1]\n    end\n    table.insert(row,\
    \ cur_row)\n  end\n  return row\nend", "  if type(lst) ~= 'table' then return\
    \ end\n  local coords = {}\n  for i = 1, #lst do\n    table.insert(coords, {i,\
    \ #lst})\n  end\n  table.sort(coords, function(a, b)\n    return a[1] < b[1]\n\
    \  end)\n  table.sort(coords, function(a, b)\n    return a[2] > b[2]\n  end)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local ans = {}\n  local current\
    \ = {}\n  while i <= #coords do\n    table.insert(current, {i, coords[i][j]})\n\
    \    if i == coords[i][j] then\n      j = j + 1\n      if j > #coords[i] then\n\
    \        j = 1\n        i = i + 1\n      end\n    else\n      if j > #coords[i]\
    \ then\n        table.insert(ans, {})\n        j = j + 1\n      end\n    end\n\
    \    if coords[i][j] == x then\n      k = k + 1\n      ans[k] = {}\n      ans[k]\
    \ = current\n    end\n    i = i + 1\n  end\n  return ans\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row2 = {}\n    for j = 1, #lst[i] do\n \
    \     if lst[i][j] == x then\n        table.insert(row2, {i, j, true})\n     \
    \ end\n    end\n    table.sort(row2)\n    table.insert(row, row2)\n  end\n  table.sort(row)\n\
    \  return row\nend", "   local res = {}\n   for index, row in ipairs(lst) do\n\
    \      for index = #row, 1, -1 do\n         if tostring(row[index]) == tostring(x)\
    \ then\n            table.insert(res, { index, #row - 1 })\n         end\n   \
    \   end\n   end\n   table.sort(res, function(a, b) return a[1] < b[1] end)\n \
    \  return res\nend", "    local t = {}\n    for i, row in ipairs(lst) do\n   \
    \     t[i] = {}\n        for j, col in ipairs(row) do\n            t[i][j] = col\n\
    \        end\n    end\n    table.sort(t, function(a, b) return b[1] < a[1] end)\n\
    \    table.sort(t, function(a, b) return a[2] > b[2] end)\n    table.sort(t, function(a,\
    \ b) return a[3] < b[3] end)\n    return t[x][1]\nend", "  if lst[x] == nil then\n\
    \    lst[x] = {}\n  end\n  local result = lst[x]\n  for i = #lst + 1, x - 1, -1\
    \ do\n    local m = i - 1\n    while m > 0 and lst[m] == nil do\n      m = m -\
    \ 1\n    end\n    table.insert(result, lst[m])\n  end\n  table.sort(result, function(a,\
    \ b)\n    return a.row > b.row\n  end)\n  table.sort(result, function(a, b)\n\
    \    return a.column > b.column\n  end)\n  return result\nend", "    if type(x)\
    \ == \"number\" then\n        -- If x is a number, then return lst[x], as list.\n\
    \        return lst[x]\n    end\n    -- If x is not table, then return x.\n  \
    \  -- If x is a table, then return x with {row = lst[x]} added on.\n    return\
    \ x { row = lst[x] }\nend", "    local row = {}\n    for k, v in pairs(lst) do\n\
    \        if v == x then\n            table.insert(row, k)\n        end\n    end\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return b < a end)\n    return row\nend", "    local row = {}\n    for _,v\
    \ in pairs(lst) do\n        if x==v then\n            table.insert(row, 0)\n \
    \       end\n    end\n    table.sort(row, function(a,b) return a<b end)\n    table.sort(row,\
    \ function(a,b) return a>b end)\n    return row\nend", "   if not lst or lst[1][x]\
    \ == nil then\n      return {}\n   end\n   local r = {}\n   for k, v in pairs(lst)\
    \ do\n      if v[x] ~= nil then\n         r[#r+1] = {}\n         r[#r+1].row =\
    \ k\n         r[#r+1].col = v[x]\n      end\n   end\n   table.sort(r, function(i,j)\
    \ return j.row < i.row end)\n   table.sort(r, function(i,j) return j.col > i.col\
    \ end)\n   return r\nend", "  if x == 1 then\n    if next(lst) ~= nil then\n \
    \     return {{0, 0}}\n    end\n  else\n    local new_lst = lst\n    local i =\
    \ 0\n    for k, v in ipairs(lst) do\n      if v == x then\n        new_lst[i]\
    \ = {k, v}\n      else\n        i = i + 1\n        new_lst[i] = nil\n      end\n\
    \    end\n    local k = #lst\n    new_lst[k] = nil\n    new_lst = table.sort(new_lst,\
    \ function(t1, t2)\n      if t1[1] ~= nil then\n        return t1[1] > t2[1]\n\
    \      else\n        return t2[1] ~= nil\n      end\n    end)\n    k = #new_lst\n\
    \    if k > 1 then\n      new_lst = table.sort(new_lst, function(t1, t2)\n   \
    \     return t2[1] < t1[1]\n      end)\n    end\n    if k == 1 then\n      return\
    \ new_lst[1]\n    else\n      return new_lst\n    end\n  end\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    if lst[i][x] ~= nil then\n      table.insert(row,\
    \ { i, lst[i][x] })\n    end\n  end\n  table.sort(row, function(a, b)\n    if\
    \ a[1] == b[1] then return a[2] > b[2] end\n    return a[1] > b[1]\n  end)\n \
    \ table.sort(row, function(a, b)\n    if a[1] == b[1] then return a[2] > b[2]\
    \ end\n    return a[1] > b[1]\n  end)\n  return row\nend", "    local row = {}\n\
    \    for _, r in ipairs(lst) do\n        row[#row + 1] = { r[1], r[#r] }\n   \
    \ end\n    table.sort(row, function(a, b) return a[#a] < b[#b] end)\n    table.sort(row,\
    \ function(a, b) return a[#a] > b[#b] end)\n    return row\nend", "    local t,\
    \ result = {}, {}\n    for j, row in ipairs(lst) do\n        for i = #row, 1,\
    \ -1 do\n            if i == x then\n                table.insert(t, {j, i - 1})\n\
    \            end\n        end\n    end\n    table.sort(t, function(a, b) return\
    \ a[1] > b[1] end)\n    for i, v in ipairs(t) do\n        result[v[1]] = {i, v[2]}\n\
    \    end\n    return result\nend", "    if not lst or lst[x] == nil then\n   \
    \     lst[x] = {}\n    end\n    return lst[x]\nend", "  local coord_x, coord_y\n\
    \  -- The coordinate (x, y) will always start from 0, as we sort by rows in ascending\
    \ order\n  -- The coordinate (x, 0) will always start from 0, as we sort by columns\
    \ in descending order\n  if x then\n    coord_x = 1\n    coord_y = 1\n  else\n\
    \    coord_x = 0\n    coord_y = -1\n  end\n  -- Create empty table for coordinates\n\
    \  local tbl = {}\n  -- Iterate through rows\n  for i = #lst:gmatch(\"[^}]+\"\
    ) do\n    local row = {}\n    -- Iterate through columns\n    for j = #lst[i]:gmatch(\"\
    [^}]+\") do\n      -- Search for coordinate (x, y), if found\n      if coord_x\
    \ == x and coord_y == 1 then\n        row[j] = 1\n      -- Search for coordinate\
    \ (x, 0), if found\n      elseif coord_x == x and coord_y == -1 then\n       \
    \ row[j] = 0\n      -- Search for coordinate (0, y), if found\n      elseif coord_x\
    \ == 1 and coord_y == j then\n        row[j] = 1\n      -- Search for coordinate\
    \ (1, 0), if found\n      elseif coord_x == 1 and coord_y == -j then\n       \
    \ row[j] = 0\n      -- Search for other coordinates, if found\n      else\n  \
    \      row[j] = 0\n      end\n    end\n    -- Append row to coordinates, if not\
    \ empty\n    if #row > 0 then\n      tbl = table.concat(tbl, row)\n    end\n \
    \ end\n  -- Sort coordinates\n  table.sort(tbl, function(l, r)\n    -- Sort rows\
    \ in ascending order\n    if l then\n      return l\n    else\n      return r\n\
    \    end\n  end)\n  return tbl\nend", "    local r = {{{}, {}}}\n    for _, item\
    \ in ipairs(lst) do\n        for i = 1, #item do\n            if i == x then\n\
    \                r[#r + 1] = {{i, item[i]}, {i, item[i - 1]}}\n            end\n\
    \        end\n    end\n    table.sort(r, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2] end\n    end)\n    for _, item in ipairs(r)\
    \ do\n        if item[1] then\n            table.sort(item, function(a, b)\n \
    \               return b[1] < a[1]\n            end)\n        end\n    end\n \
    \   return r\nend", "    local row = {}\n    for _, row in pairs(lst) do\n   \
    \     if x >= row[1] then\n            return row\n        end\n    end\nend",
  "  local function swap(x, y)\n    return x, y = y, x\n  end", "    local result\
    \ = {}\n    for i = #lst, 1, -1 do\n        local temp = {}\n        for j = 1,\
    \ #lst[i] do\n            table.insert(temp, {i, j, lst[i][j]})\n        end\n\
    \        table.sort(temp)\n        for j = #temp, 1, -1 do\n            if j ==\
    \ 1 then\n                result[temp[j - 1]] = nil\n            else\n      \
    \          if result[temp[j - 1]] == nil then\n                    result[temp[j\
    \ - 1]] = {}\n                end\n                result[temp[j - 1]][temp[j]\
    \ - 1] = temp[j - 1]\n            end\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  if #lst <= 0 then\n    return {}\n  end\n  local\
    \ row = {}\n  local pos = 0\n  -- Sort coordinates initially by rows in ascending\
    \ order.\n  table.sort(row,\n    function(k1, k2)\n      return k1.row > k2.row\n\
    \    end)", "    local t = {}\n    for _, r in ipairs(lst) do\n        t[#t+1]\
    \ = {[#r .. x], [r]}\n    end\n    table.sort(t, function(a,b) return a[#a] <\
    \ b[#b] end) -- rows in ascending order\n    for i = #t-1, 1, -1 do\n        local\
    \ p = {#t[i]}\n        for j = #t[i], 1, -1 do\n            t[i][j] = t[i][j]\
    \ or {}\n            for k = 1, p[k] do\n                t[i][j][#t[i][j]+1] =\
    \ #t[i][k] + j\n            end\n        end\n        table.sort(t[i], function(a,b)\
    \ return a[#a] < b[#b] end) -- columns in descending order\n    end\n    return\
    \ t\nend", "  local result = {}\n  for _, sublist in ipairs(lst) do\n    local\
    \ row = {}\n    for _, value in ipairs(sublist) do\n      if x == value then table.insert(row,\
    \ 0) end\n      table.insert(row, value - 1)\n    end\n    table.sort(row)\n \
    \   table.sort(row, function(a, b)\n      return math.abs(a - b)\n    end)\n \
    \   table.insert(result, row)\n  end\n  return result\nend", "   if #lst == 0\
    \ then\n      return {}\n   end\n   local result = {}\n   for i = 1, #lst do\n\
    \      local c = {}\n      for j=1, #lst[i] do\n         c[j] = lst[i][j]\n  \
    \    end\n      table.insert(result, c)\n   end\n   table.sort(result, function(x,\
    \ y)\n      return x[1] > y[1]\n   end)\n   table.sort(result, function(x, y)\n\
    \      return x[1] < y[1]\n   end, true)\n   for i, r in ipairs(result) do\n \
    \     if i == x then\n         return r\n      end\n   end\n   return {}\nend",
  "  -- Create a map for easier lookup\n  local row_map = {}\n  for _, v in pairs(lst)\
    \ do\n    row_map[#row_map + 1] = v\n  end", "\tlocal tmp = {}\n\tlocal i\n\t\
    local j\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j] ==\
    \ x then\n\t\t\t\ttmp[j] = tmp[j] or {}\n\t\t\t\ttmp[j] = { i = i, j = j }\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #tmp, 1, -1 do\n\t\ttable.insert(tmp,\
    \ { i = tmp[i-1].i, j = tmp[i-1].j-1 })\n\tend\n\treturn tmp\nend", "  if x ==\
    \ 1 then\n    return {{}}\n  else\n    if x < 1 or x > #lst then\n      return\
    \ nil\n    end\n    local row_idx = math.floor(x / 2)\n    local row_table = lst[row_idx]\n\
    \    if row_table == nil then\n      row_table = lst[1]\n      lst[1] = nil\n\
    \    end\n    local row_table2 = {}\n    for i = row_idx + 1, #lst do\n      row_table2[i]\
    \ = lst[i]\n    end\n    lst[row_idx] = row_table2\n    return row_table\n  end\n\
    end", "   -- initialize table\n   local t = {}\n   -- initialize coordinates table\n\
    \   local r = {{}, {}}\n   -- initialize return value\n   local rv = { }", " \
    \  if x ~= nil then\n      local row = table.remove(lst, x)\n      table.sort(row,\
    \ '> ')\n      table.sort(row, '< ')\n      local result = {}\n      for i = 1,\
    \ #row do\n         table.insert(result, table.remove(row, i))\n      end\n  \
    \    return result\n   else\n      return {}\n   end\nend", "  local i\n  local\
    \ rows = { }\n  for i = 1, #lst do\n    if lst[i][x] then\n      table.insert(rows,\
    \ { i, lst[i][x] })\n    end\n  end\n  table.sort(rows, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(rows, function(a, b) return a[2] > b[2] end)\n\
    \  return rows\nend", "\t-- TODO: Optimize with O(log n) using binary search\n\
    \tlocal t = {}\n\tfor _, v in ipairs(lst) do\n\t\tif x == v then\n\t\t\tt[#t+1]\
    \ = (x, v)\n\t\tend\n\tend\n\ttable.sort(t, function(a, b) return a[1] > b[1]\
    \ end)\n\ttable.sort(t, function(a, b) return a[2] > b[2] end)\n\treturn t\nend",
  "  local rt = {}\n  for i = 1, #lst do\n    if type(lst[i]) == \"table\" then\n\
    \      table.insert(rt, {i, get_row(lst[i], x)})\n      table.sort(rt, function(a,\
    \ b) return a.row > b.row end)\n      table.sort(rt, function(a, b) return a.column\
    \ > b.column end)\n    elseif lst[i] == x then\n      table.insert(rt, {i, 1})\n\
    \      table.sort(rt, function(a, b) return a.column > b.column end)\n    else\n\
    \      table.insert(rt, {i, 0})\n    end\n  end\n  return rt\nend", "  if x ~=\
    \ 0 then\n    local size = #lst\n    local l = {}\n    local k = x\n    while\
    \ k <= size do\n      local row = {}\n      local y = 0\n      for i = k - 1,\
    \ k, -1 do\n        row = row or {}\n        y = y + lst[i][k] or 0\n        row[i]\
    \ = y\n      end\n      l.sort.by = function(lhs, rhs)\n        return lhs[lhs]\
    \ < rhs[rhs] end\n      l.sort.reverse = true\n      table.insert(l, row)\n  \
    \  end\n    return l\n  end\n  return {}\nend", "  local out = {}\n  for i, row\
    \ in ipairs(lst) do\n    for j, cell in ipairs(row) do\n      if cell == x then\n\
    \        out = {{i, j}}\n      end\n    end\n  end\n  out = {{unpack(out)}}\n\
    \  return out\nend\n</code>\n<|/ a dscore=0 tags=lua |>\n<| a dscore=0 |>\n<code>",
  "    local row_lst = {}\n    local row_x = -1\n    local row = 0\n    for i = 1,\
    \ #lst do\n        local row_len = #lst[i]\n        if row_x == x then\n     \
    \       row = row+1\n            for j = 1, row_len do\n                table.insert(row_lst,\
    \ {row, lst[i][j]})\n            end\n        elseif row_x == row_len then\n \
    \           row = row+1\n            table.insert(row_lst, {row, row_x})\n   \
    \     end\n        row_x = row_x+1\n    end\n    table.sort(row_lst, function(a,\
    \ b) return a[1] < b[1] end)\n    table.sort(row_lst, function(a, b) return a[2]\
    \ > b[2] end)\n    return row_lst\nend", "  local row = {}\n  for i, v in ipairs(lst)\
    \ do\n    if v == x then row[i] = i end\n  end\n  table.sort(row, function(_,\
    \ row1, row2)\n    return row1 - row2\n  end)\n  table.sort(row, function(_, row1,\
    \ row2)\n    return row2 - row1\n  end)\n  return row\nend", "  if not lst then\
    \ return { } end\n  local row = {}\n  local i = 1\n  local rows = {}\n  for _\
    \ in ipairs(lst) do\n    local temp = {}\n    for j = 1, #row do\n      if row[j]\
    \ then table.insert(temp, row[j]) end\n    end\n    table.insert(rows, temp)\n\
    \    table.insert(row, x)\n  end\n  table.sort(rows)\n  table.sort(row, function(a,\
    \ b)\n    if #a > #b then return -1 end\n    if #a < #b then return 1 end\n  \
    \  local m, n = #a, #b\n    for i=1, m do\n      if a[i] > b[i] then return -1\
    \ end\n      if a[i] < b[i] then return 1 end\n    end\n    if m < n then return\
    \ -1 end\n    if m < n then return 1 end\n    for i=1, n do\n      if a[i] > b[i]\
    \ then return -1 end\n      if a[i] < b[i] then return 1 end\n    end\n    return\
    \ 0\n  end)\n  for i = 1, #row do\n    local r = {}\n    for j = 1, #rows[i] do\n\
    \      table.insert(r, rows[i][j])\n    end\n    table.insert(rows, r)\n  end\n\
    \  return rows\nend", "  local t = {}\n  for k, v in ipairs(lst) do\n    t[#t\
    \ + 1] = {k, v}\n  end\n  t.sort(function(a, b) return a[1] > b[1] end)\n  t.sort(function(a,\
    \ b) return a[2] < b[2] end)\n  local row = {}\n  for k = #t, 2, -1 do\n    table.insert(row,\
    \ t[#t + k - 1])\n  end\n  return row\nend", "  if lst == nil then\n    return\
    \ {}\n  end", "  if x == nil then\n    return {}\n  end\n  local tables = {}\n\
    \  for i = 1, #lst do\n    local row = lst[i]\n    if row[x] == nil then\n   \
    \   tables[i] = {}\n    else\n      tables[i] = {x = i, y = #row - x - 1}\n  \
    \  end\n  end\n  tables = sort_table_by_row(tables)\n  tables = sort_table_by_column(tables,\
    \ true)\n  return tables\nend", "    if lst == nil then return {}\n    local row\
    \ = {}\n    for i = 1, #lst do\n        row[i - 1] = lst[i]\n    end\n    table.sort(row,\
    \ function(a, b)\n        return a[1] < b[1]\n    end)\n    table.sort(row, function(a,\
    \ b)\n        return a[2] > b[2]\n    end)\n    local pos = 1\n    local row_lst\
    \ = {}\n    for i = 1, #row do\n        if row[i][1] == x then\n            table.insert(row_lst,\
    \ pos)\n        end\n        pos = (pos + 1) % #row\n    end\n    return row_lst\n\
    end", "  local t = {}\n  local n = #lst\n  -- TODO: Optimize this part for sparse\
    \ tables.\n  for i = 1, n do\n    if lst[i] > x then\n      table.insert(t, {i,\
    \ lst[i]})\n    end\n  end\n  table.sort(t, function(a, b) return a[1] > b[1]\
    \ end)\n  local r = {}\n  for i = 1, n do\n    r[#r+1] = {i-1, lst[i]}\n  end\n\
    \  table.sort(r, function(a, b) return b[2] > a[2] end)\n  return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
