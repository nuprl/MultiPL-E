name: HumanEval_45_triangle_area
language: lua
prompt: "-- Given length of a side and high return area for a triangle.\n-- >>> triangle_area(5,\
  \ 3)\n-- 7.5\nlocal function triangle_area(a, h)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
  \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
  \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local s = h * h\n    local area = s + (s * s)\n    local s2 = s\
    \ * (s - a)\n    local area2 = s2 + (s2 * s2)\n    return math.sqrt(area / area2)\n\
    end", "  return a * ((math.sqrt(3) * (h / 2)) * ((h / 2)) * ((h / 2)))\nend",
  "   local s = math.sqrt( math.pow(a, 2.0) + math.pow(h, 2.0) )\n   return s / 4.0\n\
    end", "  local tl, tr, bl, br, a, h\n  local result = a\n  local i = a - 1\n \
    \ local m = (a * a + h * h) / 2\n  while (i > 0) do\n    local u = (h - math.sqrt((h\
    \ * h) - (a * i)))\n    local v = (h - math.sqrt((h * h) - (a * (i - 1))))\n \
    \   local w = (h - math.sqrt((h * h) - (a * (i + 1))))\n    if u > v then\n  \
    \    if u > w then\n        result = result + w\n      else\n        result =\
    \ result + u\n      end\n    elseif v > w then\n      result = result + v\n  \
    \  else\n      result = result + w\n    end\n    i = i - 1\n    h = h * 2 - 1\n\
    \  end\n  return result\nend", "\treturn 0.5 * (h * (1 + math.pow(a, 2)) + math.sqrt(3)\
    \ * h * math.pow(a, 3) + ((h - math.pow(a, 2)) * math.sqrt(3) * math.pow(a, 2)))\
    \ / 2\nend", "  return a * math.sqrt(3)/2 - h * (a * math.sin(h * math.pi/3)/2\
    \ + a/2)\nend", "  return math.sqrt(a * a + h * h)\nend", "    local t = (a+h)/2\n\
    \    return math.sqrt(a^2 + t^2)\nend", "   return math.sqrt(3) * math.pow(a,\
    \ 2) * h / math.pow(a, 2) -- 3 times area\nend", "  local s = math.sqrt(3/4 *\
    \ a^2)\n  return 2 * s * h\nend", "    return math.sqrt(a * a * h)\nend", "  \
    \  return math.sqrt(a * a + h * h)\nend", "  local s = h / a\n  return 4 * s *\
    \ (s - 1) * (s + 1)\nend", "    return math.sqrt(a * a + h * h)\nend", "  return\
    \ h * 0.5 * (sqrt(0.5 * ((a / pi) * sin(h)) * ((a / pi) * sin(h)) + ((a / pi)\
    \ * cos(h)) * ((a / pi) * cos(h)) + ((a / pi) * sin(h)) * ((a / pi) * sin(h))\
    \ + ((a / pi) * cos(h)) * ((a / pi) * cos(h))))\nend", "    local s = math.sqrt(3/4\
    \ * math.pow(a, 2))\n    local e = math.sqrt(3/4 * math.pow(h, 2))\n    return\
    \ s * (1 - e) / (a + h)\nend", "\ta = a or 1\n\th = h or 1\n\treturn math.sqrt(h\
    \ * h - a * a) / 2\nend", "    local s = math.sqrt((2 * a) - h^2)\n    local t\
    \ = math.sqrt((2 * a + h) - h^2)\n    return s * t\nend", "  return a * (h - (a\
    \ * math.sqrt(3)))\nend", "  local b = (math.pi/2)*(h/2)\n  return (math.pi/2)*(h*math.sqrt((3*a*a-3*b*b)-(2*a*b)))\n\
    end", "  if h > 0 then\n    if h > a then return 0 end\n    return a * 0.5 * (a\
    \ * (h - 1) + math.sqrt((a - h) * (a * h - a)))\n  else\n    return math.abs(a)\n\
    \  end\nend", "  return math.sqrt(a ^ 2 * h ^ 2)\nend", "  return a * math.pow(a,\
    \ 2) * h / math.pow(h, 2)\nend", "  assert(a > 0 and h > 0, \"Area must be positive\"\
    )\n  assert(h > 0, \"Height must be positive\")\n  return math.abs((a * h - math.sqrt(h\
    \ * a * a * h)) * 0.5;\nend", "  return math.sqrt(math.pow(a, 2) * h / math.pow(h,\
    \ 2))\nend", "  return (math.sqrt(a*a + h*h)) * (1.0/6.0)\nend", "   return a\
    \ * (0.5 * h + math.sqrt(h ** 2 + a ** 2 - 4 * h * a / 3.0))\nend", "  local b\
    \ = math.sqrt(math.pow(h, 2) - math.pow(a, 2))\n  local c = (h / 2) * (math.sqrt(math.pow(h,\
    \ 2) - math.pow(a, 2)) + math.sqrt(math.pow(h, 2) - math.pow(b, 2)))\n  return\
    \ b + c\nend", "    if a > h then\n        a = h\n    end -- if\n    return a\
    \ * h / ((1 / a) * ((2 / a) + 1))\nend", "    local area_tri = (math.pow(h, 3)\
    \ - math.pow(a, 3)) * 0.5\n    return area_tri * area_tri * 0.5\nend", "  if a\
    \ == 0 then\n    return 0\n  elseif h == 1 then\n    return a\n  else\n    return\
    \ a + triangle_area(a - 1, h - 1) * 0.5\n  end\nend", "  if a <= h then\n    return\
    \ 0\n  end\n  return (a+h)/2 * sqrt(a**2 + h**2)\nend", "    local s = a*b\n \
    \   local e = s*(h/2)\n    local l = (s-e)/a\n    local m = s/(2*a)\n    local\
    \ n = e/(2*a)\n    return l*m*n + (l+m+n)\nend", "  local c2 = math.sqrt(a^2 +\
    \ h^2)\n  if c2 > 0.99 then return 0 else return 1 / c2 * math.pow(c2, 0.25) end\n\
    end\n</cell>\n<text>\nExercise\nWrite a function area(length, width, height)that\
    \ takes in a side length and returns the area of a triangle.", "  return a^2 +\
    \ h^2 * math.sin(a * math.pi / 180)\nend", "    return h * 0.5 * (sqrt(3 * a *\
    \ ((a + 1) / 2))\n                     - sqrt(3 * ((a - 2) / 2))) / 2\nend\n</cell>\n\
    <text>\nExercise 4.10\nWrite the function area_of_triangle which should take 2\
    \ parameters -- the side length of the triangle and return the area of the triangle.",
  "    return a * h / 4\nend", "  return ((1.0 / 3.0) * (a * (a * h)))\nend", "\t\
    return math.sqrt(math.pow(a, 2) + math.pow((h * h) / 2, 2))\nend", "\treturn a*h/2\n\
    end", "  if a == 0 then\n    return 0\n  end\n  if h == 1 then\n    return 0.5\
    \ * a * math.pi\n  end\n  local b = math.sqrt(math.pow(a, 2) - math.pow(h * h,\
    \ 0.5))\n  return 0.5 * b * math.pi\nend", "  if a < 0 or h < 0 then return 0\
    \ end\n  local t = 0.5 * (h + math.sin(h))\n  return a * math.pow((t + 1), 2)\
    \ * 0.5\nend", "  return a*h/2.0\nend", "  return math.sqrt(h * h / math.pi) *\
    \ (math.tan(math.pi / 6 * a / 2) +\n                                         \
    \  math.cos(math.pi / 6 * a / 2) * math.tan(math.pi / 6 * h / 2))\nend", "   return\
    \ a * ( math.sqrt( h * h + h * ( h - a ) * ( h - a + 1 ) ) )\nend", "  local s\
    \ = 0.0\n  for _ = 1, a do\n    s = s + (h - 2.0) * (h - 2.0) / 4.0\n  end\n \
    \ return math.sqrt(s * (s - a) * (s - a + h) * (s - a + h + 2.0) * (s - a + h\
    \ + 2.0 + h))\nend", "  return math.sqrt(math.pow(a, 2) * h * (a^2 - h^2))\nend",
  "    local t = 0.0\n    if h == 0 then\n        return t\n    else\n        t =\
    \ a * a * (h + h) / 2.0\n    end\n    return t\nend", "  return a*(a+h)*0.5\n\
    end", "  return a / math.pow(2, h) - triangle_area(a / math.pow(2, h) - h, h -\
    \ 1) -- recursive function\nend", "    local s0, s1 = 0, 1\n    local d\n    local\
    \ s, u\n    while s0 + (h - s2) > s1 do\n        d = (a * s0 + s1) * h / s2\n\
    \        s = s0 + d1\n        u = d1 + s\n        s0 = s\n        d1 = u\n   \
    \ end\n    return s0 + d1\nend", "    if h == 0 then return 0 end\n    if a ==\
    \ 0 then return 0 end\n    return math.sqrt(a^2 + h^2)\nend", "  if a == h then\n\
    \    return 0.5\n  elseif a == 0 or h == 0 then\n    return 0\n  else\n    return\
    \ math.abs(((math.floor((a + h) / 2) - math.floor(a / 2)) * math.pi / (math.floor((a\
    \ + h) / 2) - math.floor(a / 2))) - (((math.floor((a + h) / 2) + math.floor(a\
    \ / 2)) * math.pi / (math.floor((a + h) / 2) + math.floor(a / 2))))\n  end\nend",
  "    local dh = h * 0.5\n    if dh > a then\n        return dh * a\n    else\n \
    \       return a * math.sin(a * (math.pi / 180)) - dh\n    end\nend", "  -- Triangle\
    \ with height h and side length a.\n  return math.sqrt(math.pow(a, 2) * h * h)\n\
    end", "    if a <= h then\n        return a * 0.5\n    else\n        return 0.5\
    \ * math.sqrt( 3.0 / ( 3.0 - math.pow( h, 3 ) ) )\n    end\nend", "  return a\
    \ * ((a+b) * (a+b+h) * (a+b+h+2*a))\nend\n</cell>\n<text>\nExplanations of triangle_area()",
  "\treturn 0.5 * (h * a * (a - h))\nend", "    return a * math.sqrt(3) / math.pow(h\
    \ / 2, 2)\nend", "  return a*h/2\nend", "    return a * (math.sqrt(3)/2 - math.sin(math.pi*h/3)*math.sin(math.pi*a/3))\n\
    end", "    if a == 0 then\n        return h\n    else\n        return 0.5 * triangle_area(a\
    \ / 2, h) + ((a - 1) * (h + 2)) / a\n    end\nend", "  return math.sqrt(a * a\
    \ + h * h) / 2\nend", "    return math.sqrt(math.pow(a, 2) - math.pow(h, 2))\n\
    end", "  local s = math.abs(h) / 2\n  return math.abs(a * (s - math.sqrt(math.pow(a,\
    \ 2) - 4 * (s - math.sqrt(math.pow(s, 2))))))\nend", "  return h * (h + 1) * (h\
    \ + 2) / math.pow((a + a), 3)\nend", "    return a * math.sqrt(h * h + a * a)\n\
    end", "  return 0.5 * math.sqrt (a * a + h * h / 4)\nend", "  return ((0.5 * (math.sqrt(3)\
    \ * h + 0.5 * h) * (a + h)) / ((a + h) * (2 * h + a + h)))\nend", "  return math.sqrt(math.pow(a,\
    \ 2) + math.pow(h * h, 2))\nend", "    return (math.sqrt(h ** 2 - a ** 2) * (2\
    \ / h))\nend", "   return a * h / 4\nend", "  return math.sqrt(a * (h - a) * h)\n\
    end", "  -- This formula is incorrect.\n  return a*a*h/3\nend", "   return 0.5\
    \ * (a + b + c - h)\nend", "  local ah = h/2\n  local as = a\n  return 0.5*(as+ah)*0.5*(as+ah)+a*a*ah-a*ah*ah\n\
    end", "  return (a * ((1 - math.sqrt(math.pow((h - a / 2), 2)) - math.pow((a -\
    \ h / 2), 2))))\nend", "  -- Based on http://mathworld.wolfram.com/TriangleArea.html\n\
    \  -- http://mathworld.wolfram.com/TriangleArea.html\n  local s = (a + b + c)\
    \ / 2\n  local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n  if h == 0\
    \ then return area end\n  return area * h / a\nend", "  return a*(a-h)*(h-(a+h))/6\n\
    end", "  local s = h * (h + a / 2)\n  return s\nend", "  local s = math.sqrt(a\
    \ * a * h)\n  local t = math.sqrt(h * a * h)\n  local u = (s - t) / 2\n  return\
    \ u * u\nend", "  return math.sin(math.pi/180.0*a) * math.sin(math.pi/180.0*h)\n\
    end", "   return (a*(h/2))*((2*a)/(h*h))\nend", "    return a * a * h / math.pow(h,\
    \ 3)\nend", "  return a * ((h / 2) - math.sqrt((h / 2) * (h / 2) - 4 * h * a *\
    \ math.tan(math.rad(math.rad(math.rad(math.rad(h)))))))\nend", "\t-- return area\
    \ of triangle given lengths of sides\n\tlocal s = math.sqrt( ((math.pow(a, 2))\
    \ - (math.pow(h, 2)) + (math.pow(a, 2)) + (math.pow(h, 2)) ))\n\treturn s\nend",
  "  if a > h then return 0 end\n  if h == 0 then\n    return a * math.pi / 2\n  elseif\
    \ h == 1 then\n    return 0.5 * a * math.pi\n  elseif h == 2 then\n    return\
    \ a * math.pi\n  elseif h == 3 then\n    return 0.5 * math.pi\n  end\nend", " \
    \ if a > h then\n    return 0\n  elseif h <= 0 then\n    return a\n  elseif a\
    \ <= h then\n    return 0.5 * (a + h - 1 + math.pow((h - a + 1) * (h - a - 1)\
    \ / (2 * h), 0.5))\n  else\n    return math.pow((h - a + 1) * (h - a - 1) / (2\
    \ * h), 0.5)\n  end\nend", "  return (a * a) / h\nend", "  if a <= h then\n  \
    \  return 0\n  elseif h >= a*a then\n    return h*(h - a*a)/2\n  else\n    return\
    \ (a*(a-h)**2 + h*h)/2\n  end\nend", "  return math.pow(a * h, 0.5) * ((a == 1)\
    \ or ((a == 2) and (h > 0)))\nend", "  return math.sqrt(\n    ((3.141592653589793\
    \ * a) * (3.141592653589793 * a)) +\n    ((3.141592653589793 * h) * (3.141592653589793\
    \ * h)) +\n    ((3.141592653589793 * a) * (3.141592653589793 * h)) +\n    ((3.141592653589793\
    \ * h) * (3.141592653589793 * a))\n  )\nend", "  return h * a / math.tan(math.pi/a-math.pi/3)\n\
    end", "  return a * (h - a) / 2\nend", "    return (math.sqrt(a ** 2 + h ** 2)\
    \ * (h + math.floor(h / 2)))\nend", "  return h * 0.5 * ((math.pow(a, 3) * math.pow(a,\
    \ 2)) - (math.pow(a, 2) * math.pow(a - 3, 2)))\nend", "  return math.sqrt(a *\
    \ (h - a) * h)\nend", "  return math.pi * a * b * math.sqrt(1 + (h / a) ** 2)\n\
    end", "  return a*(a+h)/2 - h*h/2\nend", "    return a * math.abs(math.sin(h /\
    \ 3.1415))\nend", "  local area = 0.5 * (\n    math.abs(math.sqrt(math.pow(a,\
    \ 2) + math.pow(h/2, 2))) +\n    math.abs(math.sqrt(math.pow(a, 2) + math.pow(3*h/4,\
    \ 2))) +\n    math.abs(math.sqrt(math.pow(a, 2) + math.pow(5*h/8, 2))))\n  return\
    \ area\nend", "  -- Based on: http://www.mathopenref.com/coordpolygonarea2.html\n\
    \  -- See also: https://en.wikipedia.org/wiki/Triangle_area\n  local function\
    \ v(a, b, c) return a * math.sqrt(b * b + c * c) end\n  local function u(a, b,\
    \ c, d) return a + v(b, c, d) * h / v(a, b, c) end", "  local s = 0.5 * (h + math.sqrt(h*h\
    \ + a*a))\n  local area = s * s\n  return area\nend", "   local s = (a**2+b**2)/2\n\
    \   local p = s*a/b\n   return h*p\nend", "  -- Area of a triangle with sides\
    \ lengths a, b and c.\n  return (a * b) / math.pow((1 + math.pow((a - b), 2)),\n\
    \                             (2 * math.pow((a - h), 2)))\nend", "    return math.sqrt(a\
    \ * a + h * a * h)\nend", "    return math.sqrt(h * h / 4 - a * a * a / 2)\nend",
  "  return a / math.sqrt((math.pow(a, 2) + math.pow(h, 2)))\nend", "    return a*h/2\n\
    end", "  local l2 = math.sqrt(a * a + h * h)\n  if l2 > 0 then\n    return l2\
    \ * 1.0 / 3.0\n  end\n  return 0\nend", "  return a * (h - a) * (h - a + 1) /\
    \ (2 * h + 1)\nend", "  local s = h / a\n  if s > 1 then return s end\n  return\
    \ 2 * s * (s - 1) * (s - 2)\nend", "  return (a * h * h) / 2\nend", "  return\
    \ a * b * h / math.sqrt(a * a + b * b)\nend", "    local t = (a*h)/2\n    return\
    \ math.sqrt(t*(a-t)*(a+t) + t*(t-h)*(2*t+h))\nend", "  return math.sqrt(a*h/math.pow(h,\
    \ 2))\nend", "  return (math.sqrt(math.pi*(a**2.0 + h**2.0)) - math.sqrt(math.pi)*a)\n\
    end\n</cell>\n<text>\nExercise 3: Finding Triangles\nIn this exercise, you'll\
    \ use the function above to find all triangles whose side length is $a$ and height\
    \ $h$.", "  return math.sqrt(a * a * h - h * a * h)\nend", "  return a*(a+h)*0.5\n\
    end", "    return a*(a+h)*0.5\nend", "  if a > h then\n    return 0\n  else\n\
    \    return (a * h) / 2\n  end\nend", "    return a * (0.5 * b - 0.5 * c) / math.sin(math.pi\
    \ / h) * math.sqrt(a)\nend", "    return a*h/2\nend", "  local s = math.sin(a\
    \ / 2)\n  local c = math.cos(a / 2)\n  local area = math.abs(h * h + s * s - c\
    \ * c)\n  return area\nend", "    return a * b * h / (a + b + h)\nend", "  if\
    \ a == h then\n    return a\n  else\n    return h * ((a/2 - a + h)/2)\n  end\n\
    end", "    return h * h / math.pow(a, 2)\nend", "  return (h*h)/(a*(a+h))\nend",
  "\treturn (-h/2.0) * math.sqrt(3.0) * (a/(a+b+c+d))\nend", "  local s = 2*math.sin(math.pi/3-math.rad(a))\n\
    \  return h*s/a\nend", "  return math.sqrt(math.pow(a, 2) + math.pow(h,2))\nend",
  "  local s = 0.\n  local i = 1\n  while i < h or a <= h then\n    i = i + 1\n  \
    \  s = s + a\n  end\n  return s / i\nend", "  -- Note: this implementation is\
    \ for positive side lengths only.\n  if a > 0 then\n    local r1 = math.sqrt(3)\
    \ / 2 * a * h\n    local r2 = math.sqrt(3) / 2 * a * h\n    return r1 * r1 + r2\
    \ * r2\n  else\n    return 0\n  end\nend", "    local h = math.max(0, h)\n   \
    \ return a * (math.sqrt(3) * (h - a) / 2 + h / 2)\nend", "\treturn h * (h - a)\
    \ / 2\nend", "  return math.sqrt(a * a + h * h) / 2\nend", "    return a / sqrt(3\
    \ * h * (h - a))\nend", "  if a == 0 then return 0 end\n  local t = math.sqrt(3)\
    \ / 2 * math.sqrt(a - (h or a))\n  return t * (t - a)\nend", "  local s, d, h,\
    \ w, n = a, d, h, w, math.sqrt(a^2 + d^2)\n  return math.pow(s, 2) + math.pow(d,\
    \ 2) * h + 2 * h * w / n\nend", "  return ((math.sqrt(3) / 2) * ((math.sqrt(3))\
    \ * h) - ((math.sqrt(3) / 2) * a)) / 2\nend", "    return a * h / 6\nend", " \
    \ return a / math.sqrt(3) * math.pow(h / 2.0, 1 / 3.0)\nend", "  return a*h*h\n\
    end", "  return h * 0.5 * (math.sqrt(3 * a * a * a - h))\nend", "  return a *\
    \ (b - h) * (b + h)\nend", "    local s = 2 * math.atan(math.pow(h, 2) / math.pow(a,\
    \ 2))\n    return s * s\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThis is a simple\
    \ way to calculate area of a triangle:\n<code>", "    return math.sqrt(a * a +\
    \ h * h) / 2\nend", "  return a / h\nend", "    local t = h * 0.5\n    local area\
    \ = t * t * (3 - 2 * t)\n    area = area * math.pi * math.pow(a, 2)\n    return\
    \ area\nend", "    return math.sqrt(a ** 2 + h ** 2)\nend", "    local s = h/2\n\
    \    local area = math.sqrt(s*(s-a)*(s-a-s)*(0.25*s*(s-a-s)+a*(a-s)))\n    return\
    \ area\nend", "    return a * a * h / (((h ** 2) * h) + (a * a))\nend", "    return\
    \ a * (0.5 * ((h / 6) * (3 - ((1 / 3) * (3 - ((2 / 9) * (1 - ((1 / 9) * (3 - ((3\
    \ / 27) * (((3 / 9) * (4 - ((1 / 27) * (1 / 9)))))))))))))))\nend", "    return\
    \ a * ((h / 2) * ((h / 2) - (a * a)))\nend", "    if a == 0 and h == 0 then return\
    \ 0 end\n    if a == 0 then return h end\n    if h == 0 then return (1 / a) end\n\
    \    return (a * h) / 2\nend", "  if a == 0 then return 0 end\n  return math.sqrt(h\
    \ * h + a * a)\nend", "    return ((sqrt(3.0) * ((a*h)/2.0)) - h)*0.5\nend", " \
    \ return math.sqrt(math.pow(h, 2) - math.pow(a, 2)) * math.pi / 4\nend", "   \
    \ if a == 0 then\n        return h * h\n    else\n        return (a * h) / 3\n\
    \    end\nend", "\t-- TODO: Add other cases here\n\tassert(type(a) == 'number',\
    \ 'invalid area argument')\n\tassert(h, 'invalid triangle height')\n\treturn a\
    \ * (h / 2) * (h / 2)\nend", "\treturn math.sqrt(a / h) * h\nend", "  local f\
    \ = a * (h / 3)\n  return math.sqrt(f * f + a * a)\nend", "    local side = a/2\n\
    \    return side*(side - h)/(a - h)\nend", "  return a^2 - h^2 / (4 * math.pi\
    \ * math.sqrt(3 * a))\nend", "  return a^2 + h^2\nend", "  local s = (math.sqrt(3)\
    \ * a + h) / 2\n  return math.sqrt(s) * s\nend", "  return a * math.sqrt(3) /\
    \ 4 + h / 2\nend", "  if a == 0 then\n    return 0\n  end\n  local t = (a+b+c)/2\n\
    \  return math.sqrt(t*t*math.pow(h,3))\nend", "  if a <= 0 or h <= 0 then\n  \
    \  return 0\n  elseif h == 1 then\n    return a\n  elseif h == 2 then\n    return\
    \ a * (3 * (a - 1))\n  elseif h == 3 then\n    return a * (5 * (a - 1) * (a -\
    \ 2))\n  else\n    return a * ((5 * (a - 1)) * ((a - 2) * (a - 3)))\n  end\nend",
  "    return math.sqrt(h * h + a * a)\nend", "\tlocal s\n\tlocal a\n\tlocal h\n\t\
    if h == 0 then\n\t\treturn 0\n\telseif h == 1 then\n\t\treturn a * 2\n\telse\n\
    \t\ts = 0.5 * (a * h + h)\n\t\treturn s * (s - a) * (s - h)\n\tend\nend", "  \
    \ return math.sqrt((a*a + h*h) - a*h*h) / 2.0\nend", "  local s, v\n  if a >=\
    \ h then return h end\n  s = 0.5 * (1 + math.sqrt(1 + 4 * math.tan(math.rad(a\
    \ / h))^2))\n  v = s * (1 - 2 * math.tan(math.rad(a / h)))\n  return h * (s *\
    \ v - math.sqrt((s * v) ** 2 - 4 * s * (1 - v)))\nend", "  return a * ((math.sqrt(a\
    \ * a + h * h) - h) / 2)\nend", "  -- Calculate area of triangle given area of\
    \ a triangle and high\n  -- return area.\n  local d = math.sqrt(math.pow(a, 2)\
    \ + math.pow(h / 2, 2))\n  return math.pow(d, 0.5)\nend", "   if a <= h then\n\
    \      return 0\n   end\n   if h == 0 or h == a then\n      return a * a\n   end\n\
    \   if h == 1 then\n      return a * a * a\n   end\n   local i = 1\n   while i\
    \ < h do\n      i = i + 2\n      local k = i * (i + 1) // 2 * i\n      local m\
    \ = k + i\n      local r = a * (h - k)\n      return r + triangle_area(a * i -\
    \ k, a * i) + triangle_area(a, m) + triangle_area(a * i, m)\n   end\nend", " \
    \   if a == 0 or h == 0 then\n        return 0\n    end\n    return math.sqrt(math.pow(a,\
    \ 2) * (h - (2 * math.sqrt((a * a) - (b * b)))))\nend", "  return (h-a)*0.5\n\
    end", "  local s = (a+b)/2\n  local u = (s-a)/h\n  return s * u\nend", "  return\
    \ math.pow((math.pi * a * a), h / 2)\nend", "  return (a * h) ^ 0.5\nend", " \
    \ return a * (h ^ 2)\nend", "  return math.sqrt(a * (a * (h + h) + a * h)) / 2\n\
    end", "   local side = math.sqrt(a^2 + h^2)\n   return side/2\nend", "    return\
    \ a * (h - a) / 2\nend", "    return a * h / 2\nend", "  if a <= 0 or h <= 0 then\
    \ return 0 end\n  local h = h - a\n  return 0.5 * math.sqrt(h * h + a * a)\nend",
  "  return math.pi * math.pow(a, 2) * h ^ 2\nend", "\tlocal t = 2 * a * h\n\tlocal\
    \ r = math.sqrt(math.pow(a, 2) + math.pow(t,2))\n\tlocal area = r * r / 2\n\t\n\
    \treturn area\nend", "    return a * (h / 2)\nend", "    if a == 0 then return\
    \ 0 end\n    if a == 1 then return 1 end\n    if h == 1 then return a * h end\n\
    \    return a * h * triangle_area(h - 1, h - 1) + triangle_area(a - 1, h)\nend",
  "  return (a * h) / 2\nend", "    return a * ((2 * h) - h) / 3\nend", "    local\
    \ t = h * a\n    local area = 3.141592653589793 * (math.sqrt(t) - (t * math.tan(math.pi/6\
    \ - math.a/3)))\n    return area\nend", "    return math.sqrt(a * a + (h - a)\
    \ * (h - a))\nend", "  -- https://en.wikipedia.org/wiki/Straight_triangle#Two_angles\n\
    \  -- https://en.wikibooks.org/wiki/Algorithm_implementation/Geometry/Triangle/Area_of_a_Straight_triangle\n\
    \  -- The area of a triangle can be calculated using the following formula:\n\
    \  --   A = 1/2(s * (h - a))\n  -- where:\n  --   s = sqrt((h^2 - a^2)^2 + 4 a\
    \ h)\n  --   a = sqrt(h^2 - (s^2 + 4 a h))\n  --   h = sqrt(h^2 - a^2)\n  return\
    \ a / sqrt(h^2 - a^2)\nend", "  return math.sqrt(a * a + h * h)\nend", "  local\
    \ a2 = a^2 -- Area of triangle in square.\n  return a2 * (3 - 2*sqrt(a2))\nend",
  "    return math.sqrt(3 * a * h / 3.0)\nend", "    local t = 2.0 * a * h\n    local\
    \ r = 0.5 * a\n    return math.sqrt(t / r)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
