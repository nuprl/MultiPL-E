language: lua
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == 'table', 'strings should be a table')\n\
    \tassert(type(substring) == 'string', 'substring should be a string')\n\tlocal\
    \ filtered_table = {}\n\tfor key, val in pairs(strings) do\n\t\tif string.find(val,\
    \ substring, 1, true) then\n\t\t\ttable.insert(filtered_table, val)\n\t\tend\n\
    \tend\n\treturn filtered_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for k, v in pairs(strings) do\n\
    \    if string.find(v, substring) then\n      table.insert(filtered_strings, v)\n\
    \    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return strings end\n  local result\
    \ = {}\n  for _, item in ipairs(strings) do\n    if string.find(item, substring,\
    \ 1, true) then\n      result[#result + 1] = {item}\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nv9gchj.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {{\"xxx\"}, {\"xxxAAA\"},\
    \ {\"xxx\"}}\nstack traceback:\n\t/tmp/tmp9nv9gchj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == nil then\n        strings = {}\n    end\n  \
    \  local result = {}\n    for _, string in ipairs(strings) do\n        if string.find(substring)\
    \ ~= nil then\n            result[#result + 1] = {string}\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcfvc7v5.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpwcfvc7v5.lua:12: in local 'candidate'\n\t/tmp/tmpwcfvc7v5.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter = {}\n  for k in pairs(strings) do\n    if string.find(k,\
    \ substring) then table.insert(filter, k) end\n  end\n  return filter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad9kgmig.lua:18:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpad9kgmig.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) ~= nil then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in pairs(strings) do\n    if\
    \ string.sub(value, 1, string.len(substring)) ~= substring then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf9mi8e4.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmphf9mi8e4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\t-- Filter all strings for ones that contain given substring\n\t\
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')\n\t-- {'abc',\
    \ 'bacd', 'array'}\n\tfor _, string in ipairs(strings) do\n\t\tif string.find(substring)\
    \ then\n\t\t\t-- yield string\n\t\t\ttable.insert(strings)\n\t\tend\n\tend\n\t\
    return strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8rkrsim.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpb8rkrsim.lua:11: in local 'candidate'\n\t/tmp/tmpb8rkrsim.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, string in ipairs(strings) do\n\t\t\
    if string.find(substring, 1, true) then\n\t\t\ttable.insert(result, string)\n\t\
    \tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1uhf9qx.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpz1uhf9qx.lua:9: in local 'candidate'\n\t/tmp/tmpz1uhf9qx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    -- If 'strings' is actually\
    \ a string, pass it through as is.\n    local str = strings\n    strings = {}\n\
    \    strings[str] = true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpml4rxpht.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   if type(strings) ~= 'table' then return end\n   local result\
    \ = {}\n   for _, string in ipairs(strings) do\n      if string.find(substring,\
    \ 1, true) then\n         result[#result + 1] = string\n      end\n   end\n  \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmws2ghrc.lua:10:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpmws2ghrc.lua:10: in local 'candidate'\n\t/tmp/tmpmws2ghrc.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi11oa0im.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpi11oa0im.lua:9: in local 'candidate'\n\t/tmp/tmpi11oa0im.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings ~= 0 then\n    local filtered_strings = {}\n    for\
    \ _, string in pairs(strings) do\n      if string.find(substring) then\n     \
    \   table.insert(filtered_strings, string)\n      end\n    end\n    return filtered_strings\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanwviu9h.lua:10:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpanwviu9h.lua:10: in local 'candidate'\n\t/tmp/tmpanwviu9h.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not substring then\n        return strings\n    end\n   \
    \ local result = {}\n    for _, string in ipairs(strings) do\n        if string.find(substring,\
    \ 1, true) then\n            result[#result +1] = string\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qul28sf.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1qul28sf.lua:12: in local 'candidate'\n\t/tmp/tmp1qul28sf.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for i, v in ipairs(strings) do\n    if v:find(substring) then\n\
    \      table.remove(strings, i)\n    end\n  end\n  return strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7szsgaqg.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxx\"}\nstack traceback:\n\t/tmp/tmp7szsgaqg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in pairs(strings) do\n    if string.find(v,\
    \ substring, 1, true) then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- Empty table is the initial state.\n  -- If the table is empty\
    \ after filtering, we can assume that the table is full\n  -- because any empty\
    \ string would have been removed.\n  local filtered_strings = table_from_table({})\n\
    \  -- Iterate over the set of strings for which we filter\n  for _, s in pairs(strings)\
    \ do\n    local new_filtered_strings = table_from_table({})\n    \n    -- Filter\
    \ the set by checking each string against the substring\n    for index, t in pairs(filtered_strings)\
    \ do\n      if string_find(t, substring) then\n        new_filtered_strings[#new_filtered_strings\
    \ + 1] = t \n      end\n    end\n    filtered_strings = new_filtered_strings\n\
    \  end\n  \n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4q11awo.lua:10:\
    \ attempt to call a nil value (global 'table_from_table')\nstack traceback:\n\t\
    /tmp/tmpn4q11awo.lua:10: in local 'candidate'\n\t/tmp/tmpn4q11awo.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(io.string) == \"table\" and substring ~= nil then\n  \
    \  -- If substring is a table, loop through it and build a table.\n    for k,\
    \ v in ipairs(substring) do\n      strings = filter_by_substring(strings, v)\n\
    \    end\n  else\n    -- If substring is not a table, just build the string.\n\
    \    strings = string.gsub(strings, \"%$\" .. substring, \"%~\")\n  end\n  return\
    \ strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84fkh_n0.lua:14:\
    \ bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp84fkh_n0.lua:14: in local 'candidate'\n\t/tmp/tmp84fkh_n0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_table = {}\n    for _, item in pairs(strings)\
    \ do\n        if substring in item then\n            table.insert(filtered_table,\
    \ item)\n        end\n    end\n    return filtered_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4iz4m6ti.lua:9: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for k, v in pairs(strings) do\n    if substring in v then\n  \
    \    table.remove(strings, k)\n      -- table.remove(strings, k) -- TODO: remove\
    \ when stable Lua 5.2 is no longer supported\n    end\n  end\n  -- print(\"filtered\
    \ strings: \", strings)\n  return strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcwaao2ke.lua:8: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table', strings)\n  assert(type(substring)\
    \ == 'string', substring)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7nmypfo.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hh6dl6f.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4hh6dl6f.lua:9: in local 'candidate'\n\t/tmp/tmp4hh6dl6f.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(substring) ~= 'string' then\n    error('substring must\
    \ be a string')\n  elseif string.len(substring) == 0 then\n    return strings\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp6n5bzyi.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    return strings\n  end\n\
    \  local result = {}\n  for _, string in pairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      result[#result +1] = string\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv27ihrr9.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpv27ihrr9.lua:12: in local 'candidate'\n\t/tmp/tmpv27ihrr9.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring == '' then return strings end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvh6r32es.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return {} end\n  local substring_table\
    \ = {}\n  for i = 1, #strings do\n    local word = tonumber(strings[i])\n    if\
    \ type(word) == 'string' then\n      if word:find(substring, 1, true) then\n \
    \       substring_table[i] = strings[i]\n      end\n    end\n  end\n  return substring_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr7li2u6.lua:24:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnr7li2u6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.reduce(\n    strings,\n    function(output, str)\n\
    \      if string.find(str, substring) ~= nil then\n        output[#output + 1]\
    \ = str\n      end\n      return output\n    end,\n    {1}\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zf69th6.lua:7:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmp1zf69th6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1zf69th6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = setmetatable({}, {\n      __index = function(t,\
    \ key)\n          local filtered_strings = {}\n          for _, str in pairs(strings)\
    \ do\n            if str:find(substring) ~= nil then\n              table.insert(filtered_strings,\
    \ str)\n            end\n          end\n          return filtered_strings\n  \
    \    end,\n  })\n  for _, str in pairs(strings) do\n    if str:find(substring)\
    \ ~= nil then\n      table.insert(filtered_strings, str)\n    end\n  end\n  return\
    \ filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == '' then\n        return strings\n    end\n \
    \   local output = {}\n    for i = 1, #strings do\n        if strings[i] ~= substring\
    \ then\n            output[#output + 1] = strings[i]\n        end\n    end\n \
    \   return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwceoo3ec.lua:23:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\"}\nstack traceback:\n\t/tmp/tmpwceoo3ec.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, string in pairs(strings) do\n\
    \    for word in string.gmatch(substring, \"%w+\") do\n      new_strings[word]\
    \ = string\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1dse_0l.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {xxx=\"xxx\"}\nstack traceback:\n\
    \t/tmp/tmpd1dse_0l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l2q8qk9.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7l2q8qk9.lua:9: in local 'candidate'\n\t/tmp/tmp7l2q8qk9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(filtered,\
    \ value)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = terralib.newlist()\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring, 1, true) ~= nil then\n      table.insert(new_strings,\
    \ s)\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndzp6zb1.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpndzp6zb1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpndzp6zb1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == \"table\" and #strings > 0)\n\tassert(type(substring)\
    \ == \"string\" and #substring > 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx_7656qo.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) == 1 then\n      result[#result + 1] = {str}\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqf2fuq3e.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {{\"xxx\"}, {\"xxxAAA\"},\
    \ {\"xxx\"}}\nstack traceback:\n\t/tmp/tmpqf2fuq3e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring == nil then return strings end\n  local pattern =\
    \ \"^\"..substring..\"$\"\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(pattern) then\n      table.insert(filtered_strings, string)\n\
    \    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzeqjdc22.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpzeqjdc22.lua:11: in local 'candidate'\n\t/tmp/tmpzeqjdc22.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == 'table')\n\tassert(type(substring) ==\
    \ 'string')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjccjo8yl.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(\n    function(x)\n      return x:find(substring)\
    \ ~= nil\n    end,\n    strings\n  )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmn7pkcdj.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpmn7pkcdj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmn7pkcdj.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for k, v in pairs(strings) do\n    if string.find(k,\
    \ v, substring, 1, true) then\n      table.insert(filtered, v)\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19z_n338.lua:9:\
    \ bad argument #3 to 'find' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp19z_n338.lua:9: in local 'candidate'\n\t/tmp/tmp19z_n338.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return setmetatable({\n      strings = strings,\n      substring\
    \ = substring,\n      filter_ = nil,\n  }, { __index = _G and _G.filter_by_substring\
    \ or nil })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyebnyz22.lua:17:\
    \ expected: {}\nactual: {strings={}, substring=\"john\"}\nstack traceback:\n\t\
    /tmp/tmpyebnyz22.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, item in pairs(strings) do\n    if\
    \ string.find(item, substring) then\n      result[#result + 1] = item\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hh6dl6f.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4hh6dl6f.lua:9: in local 'candidate'\n\t/tmp/tmp4hh6dl6f.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) == 'table' then\n    local filtered_strings =\
    \ {}\n    for i, string in pairs(strings) do\n      if string.find(substring,\
    \ 1, true) then\n        table.insert(filtered_strings, string)\n      end\n \
    \   end\n    return filtered_strings\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm79v0t4r.lua:10:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm79v0t4r.lua:10: in local 'candidate'\n\t/tmp/tmpm79v0t4r.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- Find substring in each string\n  local substrings = terralib.newlist()\n\
    \  local index = terralib.newlist()\n  local len = #substring\n  for i = 1, #strings\
    \ do\n    for j = 1, #strings[i] do\n      local sub = strings[i][j]\n      if\
    \ sub == substring then\n        table.insert(substrings, sub)\n        table.insert(index,\
    \ j)\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnjdaukso.lua:30: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return {} end\n  local result\
    \ = {}\n  for _, s in ipairs(strings) do\n    if substring in s then\n      result[#result\
    \ + 1] = s\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgt05d1m_.lua:10: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ string.find(value, substring) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(substring) == 'string', \"'substring' argument must\
    \ be a string\")\n  local ret = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.sub(str, 1, string.len(substring)) == substring then\n      table.insert(ret,\
    \ str)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop1goot2.lua:22:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpop1goot2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in pairs(strings)\
    \ do\n    local match\n    if string.substr:find:find(substring, 1, true) then\n\
    \      match = true\n    end\n    if match then\n      filtered_strings[#filtered_strings\
    \ + 1] = string\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67r51ran.lua:10: function arguments expected near '':''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in pairs(strings) do\n    if string.sub(str,1,string.len(substring))\
    \ == substring then\n      result[#result + 1] = str\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53s06rep.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmp53s06rep.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, str in pairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   local result = {}\n   for _, item in ipairs(strings) do\n   \
    \   if string.find(item, substring) then\n         table.insert(result, item)\n\
    \      end\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not substring then return strings end\n    local ret = {}\n\
    \    for k, v in pairs(strings) do\n        if string.find(v, substring, 1, true)\
    \ then\n            ret[k] = v\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ou9x5au.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmp7ou9x5au.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, '') ~= nil then\n            result[#result\
    \ + 1] = string\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m42dxuv.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmp2m42dxuv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      result[i] = str\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr3if__x.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", 5=\"xxxAAA\", 6=\"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpbr3if__x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return strings end\n  if string.find(strings,\
    \ '^%s*$') then return strings end\n  -- TODO: this is going to be very inefficient\
    \ (O(n^2))\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) == 1 then\n      table.remove(strings, string)\n    end\n  end\n  return\
    \ strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmn_fjl.lua:8:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpvbmn_fjl.lua:8: in local 'candidate'\n\t/tmp/tmpvbmn_fjl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring == '' then\n    return strings\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz5scatwp.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    if string.find(strings[i],\
    \ substring) then\n      table.insert(result, strings[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, v in pairs(strings) do\n     \
    \   if v:find(string) == 1 then\n            table.insert(result, v)\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8q02xoq5.lua:9:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp8q02xoq5.lua:9: in local 'candidate'\n\t/tmp/tmp8q02xoq5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring, 1, true) ~= nil then\n      table.insert(result, s)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if typeOf(substring) ~= 'string' then\n    error('expected a string\
    \ parameter to filter_by_substring()')\n  end\n  if #strings < 1 then\n    return\
    \ {}\n  end\n  local out = setmetatable({}, {__mode='k'})\n  for _, v in pairs(strings)\
    \ do\n    if string.sub(v,1,#substring) == substring then\n      out[#out+1] =\
    \ v\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf09y4wcu.lua:7:\
    \ attempt to call a nil value (global 'typeOf')\nstack traceback:\n\t/tmp/tmpf09y4wcu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf09y4wcu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table', strings)\n  assert(type(substring)\
    \ == 'string', substring)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7nmypfo.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, '.') ~= nil then\n            filtered[#filtered\
    \ + 1] = string\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35m6vy7s.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmp35m6vy7s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in pairs(strings) do\n    string.find(substring):start()\n\
    \    if string.find(substring):end() then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi39rfid1.lua:10: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  local count = 0\n  for s in pairs(strings)\
    \ do\n    count = count + 1\n    if string.find(s, substring) then\n      result[count]\
    \ = s\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpugee1j.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnpugee1j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, str in pairs(strings) do\n    if string.find(str, substring)\
    \ then\n      return strings\n    end\n  end\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj0zhzhb.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpqj0zhzhb.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in pairs(strings) do\n   \
    \     if string.find(str, substring) then\n            result[#result + 1] = {str}\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn58v40_g.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {{\"xxx\"}, {\"xxxAAA\"},\
    \ {\"xxx\"}}\nstack traceback:\n\t/tmp/tmpn58v40_g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_table = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(string, \"^\" .. substring .. \"$\") then\n      table.insert(filtered_table,\
    \ string)\n    end\n  end\n  return filtered_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m8eq42r.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmp8m8eq42r.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   local filtered_strings = {}\n   for _, s in ipairs(strings) do\n\
    \      if not (s:find(substring)) then break end\n      table.insert(filtered_strings,\
    \ s)\n   end\n   return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9u25ovt.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\"}\nstack traceback:\n\
    \t/tmp/tmpc9u25ovt.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if string.find(value, substring) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979964
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local results = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.find(substring, 1, true) then\n            table.insert(results,\
    \ string)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0ythvr3.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpy0ythvr3.lua:9: in local 'candidate'\n\t/tmp/tmpy0ythvr3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('First argument must\
    \ be a table.')\n  end\n  -- TODO: this can be done more efficiently with a binary\
    \ search than a loop\n  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(string) ~= nil then\n      result[#result +1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6r44uxn.lua:13:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpi6r44uxn.lua:13: in local 'candidate'\n\t/tmp/tmpi6r44uxn.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  \n  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6xr3el0.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpu6xr3el0.lua:12: in local 'candidate'\n\t/tmp/tmpu6xr3el0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for key, value in pairs(strings) do\n   \
    \ if value == substring then\n      table.insert(result, key)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg9lpap5.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {1, 6}\nstack traceback:\n\
    \t/tmp/tmpqg9lpap5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for k, v in pairs(strings) do\n\
    \    if k ~= '' and string.find(k, substring, true) then\n      filtered_strings[k]\
    \ = v\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo41ftsu1.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpo41ftsu1.lua:9: in local 'candidate'\n\t/tmp/tmpo41ftsu1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, '.') == nil then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxpvvqca.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplxpvvqca.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local out = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.find(s, substring, 1, true) then\n            table.insert(out, s)\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      filtered_strings[#filtered_strings\
    \ + 1] = string\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77gq_cjb.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp77gq_cjb.lua:9: in local 'candidate'\n\t/tmp/tmp77gq_cjb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, v in pairs(strings) do\n    if v:find(string)\
    \ == 1 then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmesvn_yp.lua:9:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpmesvn_yp.lua:9: in local 'candidate'\n\t/tmp/tmpmesvn_yp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, v in ipairs(strings) do\n\
    \    local substrings = v:gsub(\"[\" .. substring .. \"]+\", \"\")\n    if substrings\
    \ == \"\" then\n      -- If the string doesn't contain the substring, filter it\
    \ out\n      filtered_strings[#filtered_strings + 1] = v\n    end\n  end\n  return\
    \ filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhxrjjpn.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmpbhxrjjpn.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for key, value in pairs(strings)\
    \ do\n    if value:find(substring) then\n      table.insert(filtered_strings,\
    \ value)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filter = {}\n  for k,v in pairs(strings) do\n    if string.find(v,\
    \ substring, 1, true) then\n      table.insert(filter, v)\n    end\n  end\n  return\
    \ filter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring == nil then\n    return strings\n  end\n  if typeof(substring)\
    \ ~= 'string' then\n    error('First argument of filter_by_substring must be a\
    \ string.')\n  end\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]\
    \ ~= substring then\n      result[#result + 1] = strings[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppli1hf9_.lua:10:\
    \ attempt to call a nil value (global 'typeof')\nstack traceback:\n\t/tmp/tmppli1hf9_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppli1hf9_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local ret = {}\n    for _, v in pairs(strings) do\n        if\
    \ string.find(v, substring, 1, true) then\n            ret[#ret + 1] = v\n   \
    \     end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == '' then return strings end\n    local filtered_strings\
    \ = {}\n    for _, _ in pairs(strings) do\n        if string.find(_, substring)\
    \ ~= nil then\n            table.insert(filtered_strings, _)\n        end\n  \
    \  end\n    return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1]=string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68i4se1y.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp68i4se1y.lua:9: in local 'candidate'\n\t/tmp/tmp68i4se1y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return setmetatable({\n    strings = strings,\n    substring =\
    \ substring,\n  }, getmetatable({\n    strings = strings,\n    substring = substring,\n\
    \  }))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ulja8a.lua:19:\
    \ expected: {}\nactual: {strings={}, substring=\"john\"}\nstack traceback:\n\t\
    /tmp/tmp20ulja8a.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    local i = 1\n    for _, str\
    \ in pairs(strings) do\n        if string.find(str, substring) ~= nil then\n \
    \           filtered_strings[i] = str\n            i = i + 1\n        end\n  \
    \  end\n    return filtered_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in pairs(strings) do\n \
    \       if value:find(substring) ~= nil then\n            result[#result + 1]\
    \ = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == 'table')\n\tassert(type(substring) ==\
    \ 'string')\n\tlocal keys = {}\n\tfor k, v in pairs(strings) do\n\t\tif v:find(substring)\
    \ == 1 then\n\t\t\ttable.insert(keys, k)\n\t\tend\n\tend\n\treturn keys\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1yny8t0.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {1, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpw1yny8t0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- If strings is not provided, return an empty table.\n  if strings\
    \ == nil then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2pdo56gg.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in pairs(strings) do\n    if\
    \ value:find(substring) == 1 then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6xpgjky.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpd6xpgjky.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(tonumber(substring)) ~= 'string' then\n    error('Substring\
    \ must be a string')\n  end\n  local result = {}\n  strings = strings or {}\n\
    \  for _, item in pairs(strings) do\n    local substring_index = 1\n    for index\
    \ = 1, #item do\n      if string.sub(item, index, index) == substring then\n \
    \       result[#result + 1] = item\n        substring_index = substring_index\
    \ + 1\n      end\n    end\n    if substring_index == #item then\n      result[#result\
    \ + 1] = item\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d_gbihw.lua:8:\
    \ Substring must be a string\nstack traceback:\n\t/tmp/tmp9d_gbihw.lua:8: in local\
    \ 'candidate'\n\t/tmp/tmp9d_gbihw.lua:30: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == nil then\n        strings = {}\n    end\n  \
    \  local result = {}\n    table.insert(strings, true)\n    table.insert(strings,\
    \ false)\n    for _, str in ipairs(strings) do\n        if string.find(str, substring)\
    \ then\n            table.insert(result, str)\n        else\n            table.remove(result,\
    \ 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbyo8fllt.lua:14:\
    \ bad argument #1 to 'find' (string expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpbyo8fllt.lua:14: in local 'candidate'\n\t/tmp/tmpbyo8fllt.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then return {} end\n    local output\
    \ = {}\n    for _, v in pairs(strings) do\n        if string.find(v, substring,\
    \ 1, true) ~= nil then\n            output[#output + 1] = v\n        end\n   \
    \ end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    for _, s in ipairs(strings) do\n        if substring in s then\n\
    \            return {}\n        end\n    end\n    return strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyk9jtm3w.lua:8: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if\
    \ string.find(s, substring) then\n      table.insert(filtered, s)\n    end\n \
    \ end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ value:find(substring) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local substring_index = string.find(strings, substring)\n  if\
    \ substring_index == nil then\n    return nil\n  else\n    strings = strings[substring_index]:sub(1,\
    \ string.len(substring))\n  end \n  return strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ohy_fnx.lua:7:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp1ohy_fnx.lua:7: in local 'candidate'\n\t/tmp/tmp1ohy_fnx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_i2h3xjr.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_i2h3xjr.lua:9: in local 'candidate'\n\t/tmp/tmp_i2h3xjr.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) ~= 'table' or #strings == 0, 'strings should\
    \ be a table of strings')\n  assert(type(substring) == 'string', 'substring should\
    \ be a string')\n  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) ~= nil then\n      result[#result + 1]\
    \ = string\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7slmvk8q.lua:7:\
    \ strings should be a table of strings\nstack traceback:\n\t/tmp/tmp7slmvk8q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7slmvk8q.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for i = 1, #strings do\n    if strings[i]:find(substring) ~= nil\
    \ then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4k351y2.lua:18:\
    \ expected: {}\nactual: false\nstack traceback:\n\t/tmp/tmpx4k351y2.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_table = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring, 1, true) ~= nil then\n            table.insert(filtered_table,\
    \ string)\n        end\n    end\n    return filtered_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzex8_tr.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpdzex8_tr.lua:9: in local 'candidate'\n\t/tmp/tmpdzex8_tr.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, v in ipairs(strings) do\n    if v:find(substring) then\n\
    \      table.remove(strings, v)\n    end\n  end\n  return strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfr6srt7g.lua:9:\
    \ bad argument #2 to 'remove' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpfr6srt7g.lua:9: in local 'candidate'\n\t/tmp/tmpfr6srt7g.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _,str in pairs(strings) do\n\
    \    if string.sub(str,1,#substring) == substring then\n      table.insert(filtered_strings,\
    \ str)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai_9so6f.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpai_9so6f.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) == 1 then result[#result+1] = str end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbsgebdv.lua:19:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpdbsgebdv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if type(strings) ~= 'table' then return end\n    if type(substring)\
    \ ~= 'string' then return end\n    for i = 1, #strings do\n        if string.find(strings[i],\
    \ substring, 1, true) then\n            table.remove(strings, i)\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9ccaxzq.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpc9ccaxzq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if v:sub(1,\
    \ #substring) == substring then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\n</cell>\n<text>\nfilter_by_word\nFilter an input table\
    \ of strings only for ones that have a given word. Punctuation marks such as '.'\
    \ and '-' are ignored.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphebzota4.lua:15: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('strings should be\
    \ a table')\n  end\n  local out = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring) == 1 then\n      table.insert(out, string)\n  \
    \  end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4pshr7l.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpj4pshr7l.lua:12: in local 'candidate'\n\t/tmp/tmpj4pshr7l.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in ipairs(strings) do\n    if\
    \ string.find(value, substring) then\n      result[#result +1] = value\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result +1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2klgvt_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpq2klgvt_.lua:9: in local 'candidate'\n\t/tmp/tmpq2klgvt_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for k, v in pairs(strings) do\n    if string.find(v, substring)\
    \ then\n      table.remove(strings, k)\n    end\n  end\n  return strings\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoe3d5ks.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpmoe3d5ks.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, false) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3bnp6aqw.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3bnp6aqw.lua:9: in local 'candidate'\n\t/tmp/tmp3bnp6aqw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in pairs(strings) do\n    if\
    \ value:find(substring) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered = {}\n  for i = 1, #strings do\n    local found\
    \ = true\n    for _, substr in pairs(strings) do\n      if string.find(substr,\
    \ strings[i], 1, true) == nil then\n        found = false\n        break\n   \
    \   end\n    end\n    if found and string.find(substring, strings[i], 1, true)\
    \ then\n      table.insert(filtered, strings[i])\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j1wdmy_.lua:27:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6j1wdmy_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, string in pairs(strings) do\n\
    \        for _, char in pairs(string) do\n            if char == substring then\n\
    \                table.insert(result, string)\n                break\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlm2o46z.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmptlm2o46z.lua:9: in local 'candidate'\n\t/tmp/tmptlm2o46z.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if not strings or type(strings) ~= 'table' then\n        return\
    \ strings\n    end\n    local new_strings = {}\n    for _, v in ipairs(strings)\
    \ do\n        if string.find(v, substring, 1, true) ~= nil then\n            new_strings[#new_strings\
    \ + 1] = v\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    local count = 0\n    for _, item\
    \ in ipairs(strings) do\n        if string.find(item, substring) ~= nil then\n\
    \            new_strings[count] = item\n            count = count + 1\n      \
    \  end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu03tmp40.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {0=\"xxx\", \"xxxAAA\", \"\
    xxx\"}\nstack traceback:\n\t/tmp/tmpu03tmp40.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type.islist(strings), 'strings argument must be a list')\n\
    \  assert(type(substring) == 'string', 'substring argument must be a string')\n\
    \  local result = {}\n  for _, v in pairs(strings) do\n    if string.find(v, substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sdc1a82.lua:7:\
    \ attempt to index a function value (global 'type')\nstack traceback:\n\t/tmp/tmp2sdc1a82.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2sdc1a82.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      filtered_strings[#filtered_strings\
    \ + 1] = string\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77gq_cjb.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp77gq_cjb.lua:9: in local 'candidate'\n\t/tmp/tmp77gq_cjb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i, string in ipairs(strings) do\n   \
    \ if string.find(string, '^' .. substring .. '$') then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefatof6f.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmpefatof6f.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(output, str)\n    end\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- if strings is nil, return nil\n  -- if substring is not in\
    \ strings, return strings\n  local keys = {}\n  for k, v in pairs(strings) do\n\
    \    if v:find(substring) then\n      keys[k] = true\n    end\n  end\n  return\
    \ keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hd61tvl.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {true, 5=true, 6=true}\nstack\
    \ traceback:\n\t/tmp/tmp3hd61tvl.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if #s\
    \ > 0 and string.sub(s, 1, string.len(substring)) ~= substring then\n      result[#result\
    \ + 1] = s\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9wfxf78.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmp_9wfxf78.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    for _, value in ipairs(strings) do\n        if string.find(value,\
    \ substring) ~= nil then\n            table.remove(strings, value)\n        end\n\
    \    end\n    return strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhuxau0f.lua:9:\
    \ bad argument #2 to 'remove' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpwhuxau0f.lua:9: in local 'candidate'\n\t/tmp/tmpwhuxau0f.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for _, string in pairs(strings) do\n\
    \    local idx = string.find(substring)\n    if idx then\n      table.insert(new_strings,\
    \ string)\n    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgidwlwh8.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgidwlwh8.lua:9: in local 'candidate'\n\t/tmp/tmpgidwlwh8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, string in pairs(strings) do\n    if\
    \ string.find(substring) ~= nil then\n      result[#result + 1] = string\n   \
    \ end\n  end\n  return result\nend\nfilter_table = filter_by_substring\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu45vszh_.lua:11:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpu45vszh_.lua:11: in function 'filter_table'\n\t/tmp/tmpu45vszh_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == \"table\", \"strings should be a table\"\
    )\n  assert(type(substring) == \"string\", \"substring should be a string\")\n\
    \  local result = {}\n  for _, string in ipairs(strings) do\n    local index =\
    \ string.find(substring, 1, true)\n    if index == nil then\n      result[#result\
    \ + 1] = string\n    else\n      result[#result + 1] = {\n        string = string,\n\
    \        start = index,\n      }\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mf3frop.lua:11:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4mf3frop.lua:11: in local 'candidate'\n\t/tmp/tmp4mf3frop.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]:find(substring)\
    \ ~= nil then\n      table.insert(result, strings[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('Expected a table\
    \ for argument', 2)\n  end\n  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      result[#result + 1] =\
    \ string\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz0gmi9i.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptz0gmi9i.lua:12: in local 'candidate'\n\t/tmp/tmptz0gmi9i.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local ret = {}\n  for i, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) ~= nil then\n      table.insert(ret, s)\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, value in pairs(strings) do\n    if\
    \ value:find(substring) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if not strings then\n    return {}\n  end\n  local output = {}\n\
    \  for _, value in ipairs(strings) do\n    if value:find(substring) ~= nil then\n\
    \      table.insert(output, value)\n    end\n  end\n  return output\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local substring = substring or ''\n  local filtered_table = {}\n\
    \  for i = 1, #strings do\n    if not string.find(strings[i], substring) then\n\
    \      table.insert(filtered_table, strings[i])\n    end\n  end\n  return filtered_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthhj4qhn.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpthhj4qhn.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if strings == nil then return end -- nothing to filter\n  return\
    \ setmetatable({}, {\n    __index = function(t, k)\n      if t[k] ~= substring\
    \ then\n        return t[k]\n      else\n        return nil\n      end\n    end,\n\
    \    __newindex = function() end,\n  })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rgh26kh.lua:10:\
    \ C stack overflow\nstack traceback:\n\t/tmp/tmp1rgh26kh.lua:10: in metamethod\
    \ 'index'\n\t/tmp/tmp1rgh26kh.lua:10: in metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10:\
    \ in metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10: in metamethod 'index'\n\t\
    /tmp/tmp1rgh26kh.lua:10: in metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10: in\
    \ metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10: in metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10:\
    \ in metamethod 'index'\n\t/tmp/tmp1rgh26kh.lua:10: in metamethod 'index'\n\t\
    ...\t(skipping 190 levels)\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local function container(s)\n    return s:find(substring)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi58nb1o1.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered_strings = {}\n    for _, string in ipairs(strings)\
    \ do\n        local i = string.find(substring)\n        if i == 1 then\n     \
    \       filtered_strings[#filtered_strings + 1] = string\n        end\n    end\n\
    \    return filtered_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7mv4j_q.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpc7mv4j_q.lua:9: in local 'candidate'\n\t/tmp/tmpc7mv4j_q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, value in pairs(strings) do\n    if string.find(value, substring)\
    \ then\n      table.remove(strings, value)\n    end\n  end\n  return strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1hthsqgu.lua:9:\
    \ bad argument #2 to 'remove' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp1hthsqgu.lua:9: in local 'candidate'\n\t/tmp/tmp1hthsqgu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if #strings == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92nkvf3t.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(substring) == 'string' then\n    substring = {substring}\n\
    \  end\n  local result = {}\n  for _, v in pairs(strings) do\n    for _, substring\
    \ in ipairs(substring) do\n      if v:find(substring) then\n        result[#result\
    \ + 1] = v\n        break\n      end\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if strings == nil then return nil end\n    local filtered_strings\
    \ = {}\n    for _, value in pairs(strings) do\n        if string.sub(value, 1,\
    \ string.len(substring)) ~= substring then\n            table.insert(filtered_strings,\
    \ value)\n        end\n    end\n    return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91nbau1m.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmp91nbau1m.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local function match_function(item)\n    return string.match(item,\
    \ substring, 1, 'b') ~= nil\n  end\n  return filter_by_filter(strings, match_function)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpor5wmoor.lua:10:\
    \ attempt to call a nil value (global 'filter_by_filter')\nstack traceback:\n\t\
    /tmp/tmpor5wmoor.lua:10: in local 'candidate'\n\t/tmp/tmpor5wmoor.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == \"table\")\n  assert(type(substring) ==\
    \ \"string\")\n  local result = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(v,\
    \ substring) == 1 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu3_xhvb.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpyu3_xhvb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result +1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2klgvt_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpq2klgvt_.lua:9: in local 'candidate'\n\t/tmp/tmpq2klgvt_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = terralib.newlist()\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      new_strings:insert(str)\n\
    \    end\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3_086tw.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpe3_086tw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe3_086tw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if strings == nil then\n    return {}\n  end\n  local results\
    \ = {}\n  for _, string in ipairs(strings) do\n    local index = string.find(substring,\
    \ 1, true)\n    if index ~= nil then\n      results[#results + 1] = string\n \
    \   end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6z06ouvd.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp6z06ouvd.lua:12: in local 'candidate'\n\t/tmp/tmp6z06ouvd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   if not strings then return end\n   if type(strings) ~= 'table'\
    \ then strings = {} end\n   for _, v in ipairs(strings) do\n      if v:find(substring)\
    \ == 1 then\n         return strings[v]\n      end\n   end\n   return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd2lq9mg.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: nil\nstack traceback:\n\t\
    /tmp/tmpnd2lq9mg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  local index = 1\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, index) == index then\n      table.insert(result,\
    \ string)\n    end\n    index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65xul2z5.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp65xul2z5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return function(string)\n    return string.find(substring, 1,\
    \ true) ~= nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmjki28g.lua:15:\
    \ expected: {}\nactual: function: 0x5641b7d22950\nstack traceback:\n\t/tmp/tmpdmjki28g.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      result[#result + 1] = str\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- Make a copy so we don't mutate the input.\n  strings = setmetatable({},\
    \ strings)\n  local result = {}\n  for k, v in pairs(strings) do\n    if v:find(substring)\
    \ == 1 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfy7vz3o.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvfy7vz3o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for i = 1, #strings do\n    if strings[i] then\n      if string.find(strings[i],\
    \ substring) ~= nil then\n        table.insert(strings, strings[i])\n      end\n\
    \    end\n  end\n  return strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxr14zls.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\", \"xxx\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\
    \t/tmp/tmpnxr14zls.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   for _, s in ipairs(strings) do\n      if string.find(s, substring)\
    \ then\n         return s\n      end\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu9encv3r.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.concat(table.filter(\n    table.to_table(strings),\n\
    \    function (string) string.find(substring, 1, true) ~= nil end,\n  ))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpfboj9u.lua:9: unexpected symbol near ''~=''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _,s in ipairs(strings) do\n     \
    \   if string.find(s, substring) ~= nil then\n            result[#result + 1]\
    \ = s\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = {}\n  for k, v in pairs(strings) do\n    if\
    \ string.find(k, substring) then\n      table.insert(new_strings, v)\n    end\n\
    \  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqnqsh3c.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvqnqsh3c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, value in ipairs(strings) do\n\
    \        if value == substring then\n            result[#result + 1] = value\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39ylfhk0.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmp39ylfhk0.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if v:sub(1,\
    \ #substring) == substring then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0sbhfuc.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpe0sbhfuc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result +1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2klgvt_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpq2klgvt_.lua:9: in local 'candidate'\n\t/tmp/tmpq2klgvt_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.find(str, substring, 1, true) then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if substring == '' or substring == nil then\n    return strings\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2jzw8ea3.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    for _, string in pairs(strings) do\n\
    \        if string.find(substring) ~= nil then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvd3y7jpq.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpvd3y7jpq.lua:9: in local 'candidate'\n\t/tmp/tmpvd3y7jpq.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(k,\
    \ substring) ~= nil then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkxtiqyk.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprkxtiqyk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for i = 1, #strings do\n    if string.find(strings[i],\
    \ substring) ~= nil then\n      table.insert(result, strings[i])\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, string in pairs(strings) do\n    table.insert(result,\
    \ string)\n  end\n  table.sort(result)\n  for i = 1, #result do\n    if string.find(result[i],\
    \ substring) then\n      table.remove(result,i)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6r2zhbos.lua:15:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp6r2zhbos.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6r2zhbos.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local new_strings = setmetatable({}, {\n    __index = function(t,\
    \ key)\n      local new_key = strings[key]\n      if new_key and new_key:sub(1,\
    \ #substring) == substring then\n        t[key] = new_key\n      end\n      return\
    \ new_key\n    end\n  })\n  for k, v in pairs(strings) do\n    new_strings[k]\
    \ = v\n  end\n  return new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuksj_hyw.lua:26:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpuksj_hyw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local function helper(list, substring)\n    local result = {}\n\
    \    for _, value in pairs(list) do\n      if string.find(value, substring) then\n\
    \        result[#result + 1] = value\n      end\n    end\n    return result\n\
    \  end\n  if type(strings) == 'table' then\n    if string.len(strings) == 0 then\n\
    \      return {}\n    end\n    local list = helper(strings, substring)\n    return\
    \ list\n  elseif type(strings) == 'string' then\n    return helper(strings, substring)\n\
    \  end\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewssaewc.lua:17:\
    \ bad argument #1 to 'len' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpewssaewc.lua:17: in local 'candidate'\n\t/tmp/tmpewssaewc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   for _, str in ipairs(strings) do\n      if string.find(str, substring)\
    \ then\n         return strings\n      end\n   end\n   return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2esz_hz.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmpe2esz_hz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n   for k, v in pairs(strings) do\n      if k:find(substring, 1,\
    \ true) then \n         table.remove(v, 1)\n      end\n   end\n   return strings\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nFor those who don't know what a table\
    \ in Lua is, `table.remove` removes an element from the table. Here is an example\
    \ https://stackoverflow.com/a/43946682/44522\n<|/ c |>\n<| a tags=lua-table,lua\
    \ |>\nHere is a function which works for both strings and tables:\n<code>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjggms8fd.lua:14: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(substring) == 'string', '`substring` must be string')\n\
    \  return table.concat(strings):gsub('[^' .. substring .. ']', '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e44klyk.lua:14:\
    \ expected: {}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0e44klyk.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    local\
    \ index = string.find(s, substring)\n    if index ~= nil then\n      result[#result\
    \ + 1] = s\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table', 'First argument must be a table.')\n\
    \  assert(type(substring) == 'string', 'Second argument must be a string')\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbiskazgv.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(v,\
    \ substring, 1, true) ~= nil then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for k, v in pairs(strings) do\n    if string.find(v,\
    \ substring, 1, true) then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tlocal result = {}\n\tfor _, string in ipairs(strings) do\n\t\t\
    if string.find(substring) then\n\t\t\ttable.insert(result, string)\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnqxefqlb.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpnqxefqlb.lua:9: in local 'candidate'\n\t/tmp/tmpnqxefqlb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local new_strings = {}\n    for _, v in pairs(strings) do\n\
    \        if string.find(v, substring) then\n            new_strings[#new_strings\
    \ + 1] = v\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  assert(type(strings) == 'table')\n  assert(type(substring) ==\
    \ 'string')\n  local result = {}\n  for _, value in pairs(strings) do\n    if\
    \ string.find(value, substring) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) == 1 then result[#result + 1] = s end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u06zbm4.lua:19:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmp2u06zbm4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- return early if there are no substrings in strings\n  if not\
    \ substring or not string.sub(substring, 1, #substring) then\n    return strings\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp39pdij3h.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local filtered = {}\n    local index = 1\n    for _,value in\
    \ ipairs(strings) do\n        if value:find(substring) ~= nil then\n         \
    \   table.insert(filtered, value)\n        end\n        index = index + 1\n  \
    \  end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- Find first occurrence of substring in each string in input\
    \ list\n  -- >>> list(filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a'))\n\
    \  -- ['a', 'b', 'c', 'd']\n  for k,v in pairs(strings) do\n    if not string.find(v,\
    \ substring, 1, true) then\n      table.remove(strings, k)\n    end\n  end\n \
    \ return strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcyqi5rg.lua:22:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxy\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpgcyqi5rg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l2q8qk9.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7l2q8qk9.lua:9: in local 'candidate'\n\t/tmp/tmp7l2q8qk9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  -- If an empty string is passed in to the substring argument then\
    \ return nil\n  return function(x)\n    if type(x) == 'string' then\n      return\
    \ x:find(substring) ~= nil and\n             x:find(substring, 1, true) ~= nil\n\
    \    else\n      return false\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xcasnmz.lua:21:\
    \ expected: {}\nactual: function: 0x55819ea48620\nstack traceback:\n\t/tmp/tmp6xcasnmz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  for _, str in ipairs(strings) do\n    if substring == str then\n\
    \      table.remove(strings, str)\n    end\n  end\n  return strings\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvf6o3bk.lua:9:\
    \ bad argument #2 to 'remove' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpsvf6o3bk.lua:9: in local 'candidate'\n\t/tmp/tmpsvf6o3bk.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('argument 1 must be\
    \ table (got %s)', type(strings))\n  end\n  local result = {}\n  for _, string\
    \ in pairs(strings) do\n    if string.find(substring, 1, true) then\n      result[#result\
    \ + 1] = string\n    end\n  end\n  if #result == 0 then\n    return nil\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1qzyogf.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1qzyogf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring, 1, true) then\n      result[#result + 1] = str\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  -- TODO: Do this in parallel\n  -- http://lua-users.org/wiki/SplitJoinParallel\n\
    \  for _, value in pairs(strings) do\n    if value:find(substring) then\n    \
    \  table.insert(result, value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    local result = {}\n    for key, value in pairs(strings) do\n\
    \        if string.sub(key, 1, string.len(substring))==substring then\n      \
    \      result[#result+1] = value\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
    \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86ag8n4c.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp86ag8n4c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n    if substring == nil then\n        return {}\n    end\n    local\
    \ table = {}\n    for _, string in pairs(strings) do\n        if string.find(substring)\
    \ ~= nil then\n            table.insert(table, string)\n        end\n    end\n\
    \    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjou5wh6.lua:12:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpzjou5wh6.lua:12: in local 'candidate'\n\t/tmp/tmpzjou5wh6.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local t = {}\n  for _, s in ipairs(strings) do\n    if substring\
    \ == s then\n      table.insert(t, s)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpsrers8.lua:20:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmpxpsrers8.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return filter_by_function(function(string)\n    return string.find(substring,\
    \ '') ~= nil\n  end, strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9s3d6ch.lua:7:\
    \ attempt to call a nil value (global 'filter_by_function')\nstack traceback:\n\
    \t/tmp/tmpk9s3d6ch.lua:7: in local 'candidate'\n\t/tmp/tmpk9s3d6ch.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  return table.filter(\n    strings,\n    function(string) return\
    \ string.find(substring) == 1 end\n  )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmvk5idi.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmptmvk5idi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptmvk5idi.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return end\n  local result =\
    \ {}\n  for k in pairs(strings) do\n    if string.find(k, substring) ~= nil then\n\
    \      table.insert(result, k)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwxb53i.lua:21:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3gwxb53i.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n\tassert(type(strings) == 'table', 'strings should be a table type')\n\
    \tassert(type(substring) == 'string', 'substring should be a string')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp79qcnltx.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, item in ipairs(strings) do\n    if\
    \ item :sub(1, #substring) == substring then\n      result[#result + 1] = item\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf03qnr_k.lua:21:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmpf03qnr_k.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 0
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then return strings end\n  local new_table\
    \ = {}\n  for k, v in pairs(strings) do\n    if v:find(substring) then\n     \
    \ table.insert(new_table, v)\n    end\n  end\n  return new_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  if type(strings) ~= 'table' then\n    error('Expected a table')\n\
    \  end\n  local result = {}\n  for _, value in pairs(strings) do\n    if value:sub(1,\
    \ #substring) == substring then\n      result[#result + 1] = value\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw4nda5x.lua:24:\
    \ expected: {\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\"\
    , \"xxx\"}\nstack traceback:\n\t/tmp/tmppw4nda5x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local output = { }\n  for index, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      output[#output + 1] = string\n\
    \    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuari5i0v.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpuari5i0v.lua:9: in local 'candidate'\n\t/tmp/tmpuari5i0v.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
- exit_code: 1
  program: "-- Filter an input table of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc',\
    \ 'bacd', 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hh6dl6f.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4hh6dl6f.lua:9: in local 'candidate'\n\t/tmp/tmp4hh6dl6f.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979989
