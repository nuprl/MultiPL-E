language: lua
name: HumanEval_53_add
results:
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  -- The addition operation is commutative.\n\
    \  return x + y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if x == nil then return y end\n  if y == nil\
    \ then return x end\n  return x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1),\
    \ 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\nLoops\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0),\
    \ 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_30iaxtj.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if type(x) == 'number' then\n    return x +\
    \ y\n  end\n  if type(x) == 'table' then\n    if #x == 2 then\n      local first\
    \ = x[1]\n      local second = x[1]\n      x[1] = x + y\n      return first\n\
    \    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local a, b = unpack(args)\n  return a + b\n\
    end\nvim.api.nvim_set_keymap(add, \"<Plug>(add)\", nvim_map)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpybp12vil.lua:10: attempt to index a nil value (global 'vim')\n\
    stack traceback:\n\t/tmp/tmpybp12vil.lua:10: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if x ~= nil and y ~= nil then\n    return x\
    \ + y\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1),\
    \ 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    local x_int = x\n    local x_frac = x:sub(1,4)\n\
    \    local y_int = y\n    local y_frac = y:sub(1,4)\n    local add_int = x_int\
    \ + y_int\n    local add_frac = x_frac + y_frac\n    return add_int:round(4):mul(10\
    \ + add_frac:round(4))\nend\n</cell>\n<text>\nHere we define the add function\n\
    and use the function add for mathematical operation\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiendkz0a.lua:15: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</code>\nNow you can just\
    \ type \"lua myscript.lua\" at the command line and it will run. :)\n<|/ a tags=lua\
    \ dscore=5 |>\n<| a dscore=4 |>\n<code>\nlua\n</code>\nThen type your script as\
    \ usual.\n<|/ a tags=lua |>\n<| a dscore=4 |>\nJust type lua myscript.lua at the\
    \ command line.\n<|/ a tags=lua |>\n<| a tags=lua dscore=4 |>\nLua is a command\
    \ line interpreter that works in Windows and Linux.\nIf you're just starting out\
    \ with Lua, I recommend taking a look at the Lua Introduction on www.lua.org.\
    \ It comes with a number of tutorials and examples to get you started with Lua.\
    \ \nYou can also find a number of Lua books that teach the basics from ground\
    \ up. In addition, there are many web sites with tutorials and examples. Some\
    \ of these examples are specific to Lua or are specific to certain languages (e.g.\
    \ C or Java). \nSome Lua programmers prefer to learn by doing. I prefer to learn\
    \ by doing and teach the basics from ground up. \nThere are many Lua resources\
    \ on Lua.org such as this one.\n<|/ a |>\n<| a |>\nLua is an interpreted language,\
    \ which means that you can input your commands into the interpreter, and it will\
    \ run them. \nTo do this you need to type something like:\n<code>\nlua myscript.lua\n\
    </code>\nwhere \"lua\" is the interpreter. After typing this command it will open\
    \ a new window and you can run your script inside that window. \nIf you just want\
    \ to test your script and see the output in a window, just type \n<code>\nlua\
    \ myscript.lua\n</code>\nIf you don't know the interpreter name, you can type\
    \ \"help\" and it will tell you the names (but be careful, some scripts will use\
    \ \"return\" or similar commands to end the script)\n<|/ a tags=lua dscore=4 |>\n\
    <| a tags=lua |>\nLua is an interpreted language, which means that you can input\
    \ your commands into the interpreter, and it will run them. \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpny_s_som.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\nExercise\n\
    Implement the function mul.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9p7xwlzb.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nreturn add\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnzcj6ytm.lua:10: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    local _x = tonumber(x) or 0\n    local _y\
    \ = tonumber(y) or 0\n    return x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1),\
    \ 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  x = tonumber(x)\n  y = tonumber(y)\n  if x\
    \ ~= nil and y ~= nil then\n    return x + y\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if x ~= nil and y ~= nil then\n    return x\
    \ + y\n  else\n    error('One or more arguments are nil')\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n_G.do = add\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzdje59uv.lua:9: <name> expected near ''do''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local a, b = x - y, x + y\n  if b >= 0 then\n\
    \    return b\n  else\n    return a + y\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\n3.5 Functions\
    \ inside functions\nFunctions inside functions are also called nested functions.\
    \ In Python, we can define nested functions like this:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqk9obxm.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local r, s = x ~= nil and x + y or 0, x ~=\
    \ nil and -x or 0\n  return r + s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12jp9fmo.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp12jp9fmo.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  assert(x >= 1, 'The x parameter must be >=\
    \ 1')\n  assert(y >= 1, 'The y parameter must be >= 1')\n  assert(x <= 11, 'The\
    \ x parameter must be <= 11')\n  assert(y <= 11, 'The y parameter must be <= 11')\n\
    \  return x + y\nend\n</cell>\n<text>\nLet's look at the documentation for add.\
    \  It's very easy to read:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpazz_drja.lua:13: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    local add_one\n    if x < 0 then\n      \
    \  add_one = function(v)\n            v = -v\n            return v + x\n     \
    \   end\n    else\n        add_one = function(v)\n            return v + y\n \
    \       end\n    end\n    return function(v)\n        v = v or 0\n        return\
    \ x + add_one(v) - y\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75dpxm4g.lua:27:\
    \ expected: 1, actual: function: 0x5603f75e94f0\nstack traceback:\n\t/tmp/tmp75dpxm4g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x+y\nend\n</code>\nThe function add\
    \ does what is says on the tin. Just put your function in front of the call and\
    \ voila\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8i9tbn5a.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local ret\n  if type(y) ~= 'number' then\n\
    \    error(\"Second argument must be a number\", 2)\n  end\n  if x ~= nil then\n\
    \    if type(y) ~= 'number' then\n      error(\"Second argument must be a number\"\
    , 2)\n    end\n    ret = x + y\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n```\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk568ai2c.lua:9: unexpected symbol near ''`''

    '
  stdout: ''
  timestamp: 1659978383
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n</cell>\n<text>\nWe will\
    \ now look at the functions we wrote for our adder function. First, lets create\
    \ a function that will add two numbers together.\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_kgvxo9c.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local sum = x + y\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n\
    \    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5, 7),\
    \ 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978383
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\nreturn add\nend\nreturn\
    \ function(x)\n   -- Add two numbers x and y\n   -- >>> add(2, 3)\n   -- 5\n \
    \  -- >>> add(5, 7)\n   -- 12\n   local function add(x, y)\n      return x + y\n\
    \   end\n   return add\nend\nend\nreturn function(x)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4070m6zq.lua:10: <eof> expected near ''end''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if type(x) == \"table\" and type(y) == \"table\"\
    \ then\n    local table = {}\n    for k, v in pairs(x) do\n      table.insert(y,\
    \ v)\n    end\n    return table\n  else\n    return x + y\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x+y\nend\n</cell>\n<text>\nFor loop\n\
    The for loop runs through a list of data values, executing the statement once\
    \ for each value in the list. You can also specify a start value for the loop\
    \ (default is 1), and a step size for the loop (default is 1). In the following\
    \ example the variable count is used to keep track of the number of times through\
    \ the loop:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm23_jbh5.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local z = x + y\n  return z + (z == 0 and 0\
    \ and 1 or z) -- Round towards zero\nend\n</code>\nTo test this in Lua, do this:\n\
    <code>\nlua -e \"local a = add(2, 3); print(a + 1)\"\n</code>\n<|/ a tags=lua,lua-table\
    \ |>\n<| c |>\nThanks for the suggestion but I cannot use any lua libraries.\n\
    <|/ c |>\n<| c |>\n: I see. Then you can only make your function recursive, or\
    \ use `math`, as suggests.\n<|/ c |>\n<| a tags=lua,lua-table |>\nSince Lua 5.0\
    \ the standard library contains tonumber function that converts any object to\
    \ an integral number and returns it.\nThis function is not recursive, so the answer\
    \ is no, it cannot be done without recursion.\n<|/ a dscore=0 |>\n<| c |>\n`tonumber`\
    \ is not recursive: `tonumber(tonumber(\"42\"))` returns `42`.\n<|/ c |>\n<| c\
    \ |>\nOh, indeed. It appears that I got it wrong. Lua 5.2 has now [`math.floor`](http://www.lua.org/manual/5.2/manual.html#pdf-math.floor).\n\
    <|/ c |>\n<| c |>\nAh, but that doesn't give the same results as the OP's implementation.\
    \ `math.floor` rounds up towards zero.\n<|/ c |>\n<| c |>\nWell, no, it rounds\
    \ down. `math.floor` is for integer numbers, `math.ceil` is for floating-point\
    \ numbers.\n<|/ c |>\n<| c |>\nOh, right, I've been doing integer division all\
    \ day and I somehow assumed `floor` rounds towards zero.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI solved this problem using the lua.math library. Here is the solution:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsfdczqc2.lua:10: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nadd = onmt.utils.Registry.register_module(\n\
    \    'onmt.utils.Tensor', add, 150)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpmwuxhvli.lua:9: attempt to index a nil value (global 'onmt')\n\
    stack traceback:\n\t/tmp/tmpmwuxhvli.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x+y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\nWrite\
    \ a function called is_even that takes a number and returns True if x is even,\
    \ and False otherwise. Test it on every even integer between 2 and 20.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu6_332f6.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local ret\n  ret = x or 0\n  ret = ret + y\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that takes two strings as input and returns the number of\
    \ times the second string appears in the first string. Case insensitive and ignore\
    \ case.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_sgdu8gl.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n</cell>\n<text>\nFunctions\
    \ are first class objects in Lua, which means that they are first class citizens.\n\
    When you pass them to a function, you are actually passing those citizens the\
    \ value of the function.\nYou can then use that function just like you would any\
    \ value returned by that function.\nHere is an example:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp45opo5gb.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    local c = x + y\n    return c\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n\
    \    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5, 7),\
    \ 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if type(y) == 'table' then\n    local function\
    \ iadd(x, value)\n      if type(value) ~= 'table' then\n        error('not a table',\
    \ 2)\n      end\n      local ret = {}\n      for k, v in pairs(x) do\n       \
    \ ret[k] = iadd(v, value[k])\n      end\n      return ret\n    end\n    local\
    \ ret = iadd(x, y)\n    return ret\n  elseif type(y) == 'number' then\n    return\
    \ x + y\n  else\n    error('not a number', 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  x = tonumber(x) or 0\n  y = tonumber(y) or\
    \ 0\n  return x + y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if x > y and x ~= nil then\n    return x +\
    \ y\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44d6pstb.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp44d6pstb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local newX = x + y\n  local newY = x + y\n\
    \  return newX, newY\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  local function addInternal(x, y)\n    local\
    \ function addInternalInternal(x, y)\n      return x + y\n    end\n    return\
    \ addInternalInternal(x, y)\n  end\n  return addInternal(x, y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n   return x + y\nend\n</cell>\n<text>\nThe return\
    \ value of a function can be stored using the keyword return:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp990xn4qw.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  if x > y then return x + y end\n  return y\
    \ + x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  assert(type(x) == \"number\")\n  assert(type(y)\
    \ == \"number\")\n  return x + y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 tags=lua-table,lua |>\n<code>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbu0k7gxj.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\n</cell>\n<text>\n2.5.2 Functions\
    \ return values\nFunctions are similar to procedures, but instead of return values\
    \ they return values as well as exit codes. These codes allow the calling program\
    \ to determine what happened with the function.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1),\
    \ 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf84zayrt.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\nFunctions\
    \ used in a program\nIn a program, a function can call another function by using\
    \ the function name followed by the function call. Functions are first class objects\
    \ in Lua.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1,\
    \ 0), 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi9ym9_ki.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\n</cell>\n<text>\nTo call\
    \ the function above we simply call add(2, 3)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0, 1),\
    \ 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ag1edyg.lua:9: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nprint(add(5, 7)) -- 12\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate(0, 1), 1)\n    lu.assertEquals(candidate(1, 0),\
    \ 1)\n    lu.assertEquals(candidate(2, 3), 5)\n    lu.assertEquals(candidate(5,\
    \ 7), 12)\n    lu.assertEquals(candidate(7, 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '12

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978399
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n\treturn x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n  return x + y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Add two numbers x and y\n-- >>> add(2, 3)\n-- 5\n-- >>> add(5, 7)\n\
    -- 12\nlocal function add(x, y)\n    return x + y\nend\nreturn add\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate(0,\
    \ 1), 1)\n    lu.assertEquals(candidate(1, 0), 1)\n    lu.assertEquals(candidate(2,\
    \ 3), 5)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7,\
    \ 5), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptxr_vsol.lua:10: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978399
