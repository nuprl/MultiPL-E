name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n-- true\n-- >>> is_prime(13441)\n\
  -- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n-- false\n-- >>> is_prime(1)\n\
  -- false\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Base case: any prime number will do, since 2 is the only even\
    \ prime number.\n  -- We do not need to check anything smaller than 2.\n  if n\
    \ < 2 then\n    return false\n  end\n  -- Use Fermat's little theorem to check\
    \ our candidates.\n  return n % 2 ~= 0\nend", "  -- http://en.wikipedia.org/wiki/Primality_test#Naive\n\
    \  -- The naive prime test (i.e. all odd numbers except 2) is enough to test for\
    \ primality.\n  return n % 2 == 0 or n % 4 == 0 or n % 8 == 0 or n % 16 == 0 or\
    \ n % 32 == 0 or n % 64 == 0 or n % 128 == 0\nend", "\t-- If n is 1 or 0 then\
    \ return true\n\tif n == 1 or n == 0 then\n\t\treturn true\n\tend", "    -- The\
    \ naive prime test. Slow, but works.\n    -- return math.sqrt(n) % 1 == 0\n  \
    \  -- Note: This implementation is incorrect for 2 and 3.\n    -- See https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \    local function factor(n)\n        -- The prime factors of n are 1, 2, and\
    \ so on...\n        if n < 2 then return end\n        if n <= 1 then return 1\
    \ end\n        -- We try dividing n by prime factors.\n        -- If this gives\
    \ a number greater than 1, we know n is prime.\n        for i=1, n do\n      \
    \      -- If the remainder is a factor of n, we know the number is prime.\n  \
    \          if n % i == 0 then\n                return false\n            end\n\
    \        end\n        -- If we reach this point, then n is not prime.\n      \
    \  return true\n    end\n    local function next_prime()\n        -- Get the first\
    \ prime larger than n.\n        -- This algorithm will work for 2, 3, and even\
    \ numbers.\n        -- It has better worst case performance than the Sieve of\
    \ Eratosthenes.\n        -- See: http://www.artima.com/weblogs/viewpost.jsp?thread=98196\n\
    \        for i=2, n do\n            if n % i == 0 then\n                return\
    \ i\n            end\n        end\n    end\n    return next_prime()\nend", " \
    \ if n ~= 0 then\n    for i=2,n do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\nend", "  if n <= 1 then\n    return\
    \ false\n  else\n    for i = 2, n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\nend", "  -- Based on https://www.geeksforgeeks.org/prime-numbers-in-range/\n\
    \  local function f(n, max_divisor)\n    if max_divisor < 2 then return false\
    \ end\n    for _ = 3, max_divisor * 2 do\n      if n % _ == 0 then return false\
    \ end\n    end\n    return true\n  end\n  -- Check if n equals 1, because 1 is\
    \ prime\n  if n ~= 1 then return false\n  else\n    for max_divisor = 2, n do\n\
    \      if f(max_divisor, 1) then return false end\n    end\n  end\n  return true\n\
    end", "  if n < 2 then return false end\n  local sqrtn = math.sqrt(n)\n  for i\
    \ = 2, sqrtn do\n    if n % i == 0 then return false end\n  end\n  return true\n\
    end", "  -- Base case\n  if n < 2 then\n    return false\n  end\n  -- If n is\
    \ even, then\n  if n % 2 == 0 then\n    -- If n is even, then return false.\n\
    \    return false\n  end\n  -- Otherwise, loop through every odd number from 3\
    \ to n and see if n\n  -- is divisible by that number.\n  for i = 3, n, 2 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks everyone for the fast answers. I will\
    \ try to implement your solutions. ", "  -- Special case: one is not prime\n \
    \ if n == 1 then return false end", "\t-- Check all primes <= n before we start\
    \ testing divisibility by 2.\n\tlocal function isprime(n)\n\t\tif n < 2 then return\
    \ false end\n\t\t-- Test all even numbers up to the square root of n.\n\t\tfor\
    \ i=2, math.sqrt(n) do\n\t\t\tif n % i == 0 then return false end\n\t\tend\n\t\
    \treturn true\n\tend\n\t-- Test divisibility by 2.\n\tif n <= 1 then return false\
    \ end\n\tif isprime(n) then return true end\n\t-- Use Euler's Sieve of Eratosthenes\
    \ when n is prime.\n\tlocal function factor(n)\n\t\tlocal i = 1\n\t\twhile i*i\
    \ <= n do\n\t\t\ti = i + 1\n\t\t\tif n % i == 0 then\n\t\t\t\t-- Divide out everything\
    \ except i and n.\n\t\t\t\tlocal f = n / i\n\t\t\t\tfor j=1, i do\n\t\t\t\t\t\
    n = n - 1\n\t\t\t\tend\n\t\t\t\treturn f, n, n\n\t\t\tend\n\t\tend\n\t\treturn\
    \ n, n, n\n\tend\n\tlocal factors = {}\n\t-- Start with the highest prime > n.\n\
    \tfor i=2, math.floor(n) do\n\t\tlocal f, f, n = factor(i)\n\t\tif f ~= n then\n\
    \t\t\ttable.insert(factors, f)\n\t\tend\n\tend\n\tfor _, f in ipairs(factors)\
    \ do\n\t\tif not isprime(f) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", '  if n % 2 == 0 or n % 3 == 0 then return false end', "  -- Base\
    \ cases\n  if n == 1 then\n    return true\n  elseif n == 2 then\n    return false\n\
    \  end\n  -- Check for small factors\n  if n < 2 then\n    return false\n  end\n\
    \  if n % 2 == 0 then\n    return false\n  end\n  -- Calculate and check all odd\
    \ factors\n  for i = 3, math.sqrt(n), 2 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if n < 2 then\n    return false\n\
    \  end", "  assert(n ~= nil)\n  assert(n >= 2)", "  -- Primitive case.\n  if n\
    \ <= 1 then\n    return false\n  end", "  -- Prime numbers are greater than 1.\n\
    \  if n <= 1 then return false end", "  if n == 1 then return false end\n  --\
    \ Check for even numbers first\n  if n % 2 == 0 then return false end\n  -- Divide\
    \ by any number between 2 and n-1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  -- Based on the prime-tester\
    \ by Oleg Vorontsov.\n  -- https://blog.oeis.org/2009/08/24/fast-prime-tests-with-openmp/\n\
    \  -- https://codereview.stackexchange.com/questions/71277/checking-if-a-number-is-prime-with-omp-on-iphone\n\
    \  -- http://stackoverflow.com/questions/902363/prime-number-check-in-omp-parallel-for",
  '  assert(n > 0)', "  -- Sieve of Eratosthenes\n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Lua\n  if n <= 1 then\
    \ return false end\n  for i, prime in pairs(primes) do\n    if n % prime == 0\
    \ then\n      local square = math.pow(prime, 2)\n      if square > n then return\
    \ false end\n      primes[#primes + 1] = square\n    end\n  end\n  return true\n\
    end", "   -- The Sieve of Eratosthenes is slightly faster than the Miller-Rabin\
    \ primality test.\n   -- Miller-Rabin tests up to n^2/2, but Sieve tests up to\
    \ (2^n)-1.\n   -- This gives a big speed improvement (factor 2-3 smaller) over\
    \ is_prime(n)==1\n   -- which uses the Sieve of Atkin, even though it is not as\
    \ precise\n   -- This Sieve is also more efficient (only sieve up to sqrt(n)),\
    \ which makes\n   -- is_prime(61) return true.\n   -- However, it might be faster\
    \ to use Miller-Rabin, as long as we also\n   -- test up to sqrt(n) separately,\
    \ since that is the largest value\n   -- that has less primes.\n   -- We only\
    \ need to test up to sqrt(n) in the Sieve of Eratosthenes.\n   -- This makes it\
    \ fast for small values of n, but doesn't seem to help much\n   -- for large values\
    \ of n (like 61) which still seem to take a long time.\n   -- In fact, we might\
    \ even want to use both Sieve and Miller-Rabin\n   -- at once (up to sqrt(n))\
    \ depending on how slow the Sieve of Eratosthenes\n   -- is and whether we also\
    \ need up to sqrt(n) in the Miller-Rabin primality\n   -- test. The latter seems\
    \ necessary for larger n.\n   -- For this problem, a better improvement on is_prime(n)\
    \ is implemented\n   -- below, which finds up to sqrt(n).", "  -- First we check\
    \ if the number is 1 or not.\n  if n == 1 then\n    return false\n  end", "  \
    \ if n == 1 then return true end\n   if n < 2 then return false end\n   for i\
    \ = 2, n do\n      if n % i == 0 then\n         return false\n      end\n   end\n\
    \   return true\nend", "  assert(n > 1)\n  local i\n  for i = 2, n do\n    if\
    \ n % i == 0 then return false end\n  end\n  return true\nend", "  if n <= 1 then\
    \ return false end\n  local d = n - 1\n  while d % 2 == 0 do d = d / 2 end\n \
    \ local i = 3\n  while i <= d do if n % i == 0 then return false end i=i+2 end\n\
    \  return true\nend", "  if n == 0 then return false end\n  local d = 2\n  while\
    \ d <= n do\n    if n % d == 0 then\n      return false\n    end\n    d, n = d,\
    \ d+d\n  end\n  return true\nend", "    local root\n    for root = 3, (n/2) do\n\
    \        if n % root == 0 then\n            return false\n        end\n    end\n\
    \    return not n > 1\nend", "    if n == 1 then\n        return false\n    end\n\
    \    if n == 2 then\n        return true\n    end", "  if n == 0 then\n    return\
    \ false\n  end\n  if n == 1 then\n    return true\n  end\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- Check for small factors.\n  local f = math.floor(math.sqrt(n))\n\
    \  while f ~= 0 do\n    if n % f == 0 then\n      return false\n    end\n    f\
    \ = f - 1\n  end\n  -- Check whether it's composite by checking whether\n  --\
    \ n-1 is factor. First we check if n-1 is prime, then\n  -- we check if n is a\
    \ factor of n-1\n  if is_prime(n-1) then\n    local f = 1\n    while f <= n do\n\
    \      if n % f == 0 then\n        return false\n      end\n      f = f + 1\n\
    \    end\n  end\n  return true\nend", "  -- https://en.wikipedia.org/wiki/Primality_test\n\
    \  -- https://stackoverflow.com/questions/13542712/how-is-a-number-prime\n  --\
    \ https://primes.utm.edu/notes/faq/faq.shtml\n  -- https://www.utm.edu/~rforsyth/more/num-prime/\n\
    \  if n <= 1 then return false end\n  -- Check for perfect powers\n  local i =\
    \ 1\n  while i * i <= n do\n    if n % i == 0 then return false end\n    i = i\
    \ + 1\n  end", "\t-- Return true if n is prime, and false otherwise.\n\t-- >>>\
    \ is_prime(3)\n\t-- false\n\t-- >>> is_prime(8)\n\t-- true\n\t-- >>> is_prime(50)\n\
    \t-- true\n\t-- >>> is_prime(25)\n\t-- true\n\t-- >>> is_prime(61)\n\t-- true\n\
    \t-- >>> is_prime(61)\n\t-- true\n\t-- >>> is_prime(13441)\n\t-- true\n\t-- >>>\
    \ is_prime(61)\n\t-- true\n\t-- >>> is_prime(6)\n\t-- true\n\t-- >>> is_prime(9)\n\
    \t-- true\n\t-- >>> is_prime(11)\n\t-- true\n\t-- >>> is_prime(13)\n\t-- true\n\
    \t-- >>> is_prime(17)\n\t-- true\n\t-- >>> is_prime(19)\n\t-- true\n\t-- >>> is_prime(25)\n\
    \t-- true\n\t-- >>> is_prime(49)\n\t-- true\n\t-- >>> is_prime(579)\n\t-- true\n\
    \t-- >>> is_prime(591)\n\t-- true\n\t-- >>> is_prime(601)\n\t-- true\n\t-- >>>\
    \ is_prime(607)\n\t-- true\n\t-- >>> is_prime(613)\n\t-- true\n\t-- >>> is_prime(620)\n\
    \t-- true\n\t-- >>> is_prime(627)\n\t-- true\n\t-- >>> is_prime(631)\n\t-- true\n\
    \t-- >>> is_prime(649)\n\t-- true\n\t-- >>> is_prime(654)\n\t-- true\n\t-- >>>\
    \ is_prime(659)\n\t-- true\n\t-- >>> is_prime(661)\n\t-- true\n\t-- >>> is_prime(673)\n\
    \t-- true\n\t-- >>> is_prime(677)\n\t-- true\n\t-- >>> is_prime(681)\n\t-- true\n\
    \t-- >>> is_prime(7)\n\t-- true\n\t-- >>> is_prime(8)\n\t-- true\n\t-- >>> is_prime(9)\n\
    \t-- true\n\t-- >>> is_prime(10)\n\t-- true\n\t-- >>> is_prime(11)\n\t-- true\n\
    \t-- >>> is_prime(12)\n\t-- true\n\t-- >>> is_prime(13)\n\t-- true\n\t-- >>> is_prime(14)\n\
    \t-- true\n\t-- >>> is_prime(15)\n\t-- true", "  if n % 2 == 1 then return false\
    \ end\n  if n == 2 then return true end\n  if n == 3 then return true end", " \
    \ if n % 2 == 0 then return false end\n  -- This is not the most efficient, but\
    \ it is correct and relatively easy to understand.\n  -- It iterates through all\
    \ possible factors until it finds one that's not evenly divisible.\n  for f =\
    \ 2, n div 2 do\n    if n % f == 0 then return false end\n  end\n  return true\n\
    end", "\t-- If the number is 1 or more.\n\tif n <= 1 then\n\t\treturn false\n\t\
    end\n\t-- Use Fermat's theorem.\n\tlocal m = math.floor(math.log(math.abs(n))\
    \ / math.log(2))\n\treturn math.abs(n - (2 ** m)) < 2\nend", "  if n == 1 then\
    \ return false end\n  local function isprime(n)\n    if n == 2 then return true\
    \ end\n    if n == 3 then return true end\n    -- Only odd numbers are prime (even\
    \ numbers are not).\n    local function even(n)\n      if n % 2 == 0 then return\
    \ false end\n      local isprime = isprime(n - 2)\n      return isprime and even(n\
    \ / 2)\n    end\n    return even(n - 1)\n  end\n  return isprime(n)\nend", "\t\
    -- https://stackoverflow.com/a/20807/640049\n\t-- https://stackoverflow.com/a/193517/640049\n\
    \t-- https://stackoverflow.com/a/1290271/640049\n\tif n % 2 == 0 then\n\t\treturn\
    \ false\n\tend\n\tlocal i = 3\n\twhile i * i <= n do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend", "  --\
    \ The naive algorithm is not very efficient.\n  -- Use Miller-Rabin to check primality\
    \ quickly.\n  for i = 2, n do\n    -- We only need to check up to sqrt(n).\n \
    \   if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  if n <= 1 then return false end\n  if n <= 3 then return n == 1 or n == 2 end\n\
    \  for i = 2, 3 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nreturn is_prime", "  -- Check if n is prime\n  -- http://www.geeksforgeeks.org/program-for-n-prime/\n\
    \  -- http://www.robertgamble.net/2012/01/python-program-for-prime-numbers.html\n\
    \  -- http://www.geeksforgeeks.org/check-if-a-number-is-prime/", "  if n == 1\
    \ then return false end\n  -- The number cannot be evenly divided by any of the\
    \ numbers\n  -- between 1 and the given number.\n  for i = 2, n do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend", "\tif n % 2 == 0 and\
    \ n ~= 1 then\n\t\treturn false\n\telse\n\t\tfor i=3,n,2 do\n\t\t\tif n % i ==\
    \ 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend",
  "  return #primes == 0 and n % 2 == 0 or n < primes[1] and n <= primes[#primes]\
    \ and n % primes[#primes] == 0\nend", "  -- http://stackoverflow.com/questions/3917574/algorithm-to-determine-if-a-number-is-prime\n\
    \  if n <= 2 then return false end\n  local m\n  for m = 2, n do\n    if n % m\
    \ == 0 then return false end\n  end\n  return true\nend", "    if n == 1 then\
    \ return false end\n    if n < 2 then return false end\n    -- See if n is evenly\
    \ divisible by all numbers 2 to sqrt(n)\n    for i = 2, n do\n        if n % i\
    \ == 0 then return false end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise\nDefine a function that takes in a number and returns true if the number\
    \ is divisible by 7 and false otherwise.  For instance, is_divisible(7) is true,\
    \ but is_divisible(8) is false.  Hint: You will need to use a loop.", "  if n\
    \ < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n  end\n\
    \  if n < 4 then\n    return false\n  end", "    if n == 0 then\n        return\
    \ false\n    end", "  if n <= 1 then return false end\n  local factors = {}\n\
    \  local i = 1\n  while i <= math.sqrt(n) do\n    if not factors[i] then\n   \
    \   factors[i] = 1\n      i = 1\n    else\n      i = i + 1\n    end\n  end\n \
    \ return true -- n is prime!\nend\n</cell>\n<text>\nExercise: Check if a number\
    \ is prime", "  if n == 2 then return false end\n  if n % 2 == 0 then return false\
    \ end\n  local m = math.ceil(sqrt(n)) + 2\n  for i = 2, m do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    if n <\
    \ 2 then return false end\n    if n == 1 then return true end\n    if n == 2 then\
    \ return true end\n    if n % 2 == 0 then return false end\n    for i=3,n,2 do\n\
    \        if n % i == 0 then return false end\n    end\n    return true\nend",
  "  if n < 2 then\n    return false\n  elseif n == 1 then\n    return true\n  end\n\
    \  local isprime = true\n  -- Check if n is a prime\n  for i = 2, n do\n    --\
    \ Check if n is evenly divisible by i\n    if n % i == 0 then\n      isprime =\
    \ false\n      break\n    end\n  end\n  return isprime\nend", "    return not\
    \ not math.gcd(n, 1)\nend", "  if n < 2 then return false end\n  if n < 4 then\
    \ return n == 2 end\n  local m = math.tointeger(math.sqrt(n))\n  if m < 2 then\
    \ return false end\n  for i = 2, m do\n    if n % i == 0 then return false end\n\
    \  end\n  return true\nend", "  if n <= 1 then return false end\n  if n == 2 then\
    \ return true end", "\tif n < 1 then\n\t\treturn false\n\tend\n\tif n <= 0 then\n\
    \t\treturn false\n\tend", "  if n < 2 then return false end\n  if n % 2 == 0 then\
    \ return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n % i == 0 then\
    \ return false end\n  end\n  return true\nend", "  if n % 2 == 0 then return false\
    \ end\n  for i = 5, math.sqrt(n), 2 do\n    if n % i == 0 then return false end\n\
    \  end\n  return true\nend", "    local d = n - 1\n    local i = 1\n    while\
    \ i <= d do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "  if n < 2 then return false\
    \ end\n  if n == 2 then return true end\n  if n == 3 then return true end\n  if\
    \ n % 2==1 then return false end\n  if n % 3 == 0 then return false end\n  if\
    \ n % 5 == 0 then return false end\n  local d = div(n, 2)\n  if d == 0 then return\
    \ false end\n  if n % d == 0 then return false end\n  while d*d <= n do\n    if\
    \ n % d == 0 then return false end\n    d, n = d, d + d\n  end\n  return true\n\
    end\nreturn is_prime", "  -- Special case 2\n  if n == 2 then return false end\n\
    \  -- Special case 3\n  if n == 3 then return true end\n  -- Check until square\
    \ root of n\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend", "    local function check(x)\n        if x\
    \ == 1 or x == n then\n            return true\n        end\n        for i = 2,\
    \ n do\n            if x % i == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    if n <= 1 then\n   \
    \     return false\n    end\n    if n == 2 then\n        return true\n    end\n\
    \    if n % 2 == 0 then\n        return false\n    end\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  -- If the number is evenly divisible by any smaller\
    \ prime,\n  -- it's composite.\n  for i = 2, n do\n    if n % i == 0 then\n  \
    \    return false\n    end\n  end", "  if n == 1 or n == 2 then return true end\n\
    \  if n % 2 == 0 and n > 1 then return false end\n  local i = 3\n  while i < n\
    \ do\n    -- If i divides n, then it is not prime.\n    if n % i == 0 then return\
    \ false end\n    -- Increment i by 2.\n    i = i + 2\n  end\n  return true\nend",
  "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n \
    \ end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- Assume all numbers are primes\n    if n < 2 then\n        return\
    \ false\n    end", "  if n < 2 then\n    return false\n  elseif n <= 1 then\n\
    \    return true\n  else\n    if n % 2 == 0 then\n      return false\n    end\n\
    \  end\n  -- Now we know n is not a prime, and n >= 2\n  for i = 2, n - 1 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  if n < 2 then return false end\n  local d = 2\n  while d <= math.sqrt(n) do\n\
    \    local r\n    local m = n / d\n    local mod\n    do -- Repeat until r = d\n\
    \      r = d - 1\n      mod = n % r\n      n = r\n      d = r + 1\n    until m\
    \ == 1 and mod == 0\n    if d <= 1 then break end\n  end\n  return n == 1 and\
    \ d == n\nend", "    -- The number is odd, or even.\n    if n <= 0 then return\
    \ false end\n    -- If the number is 1, then we know it cannot be prime, since\
    \ the only\n    -- number that can occur is the first one.\n    if n == 1 then\
    \ return false end\n    -- If the number is even, then its square root cannot\
    \ be a prime, since a\n    -- number that is not even cannot be even.\n    if\
    \ n % 2 == 0 then return false end\n    -- If the number is odd, then we can check\
    \ all of the odd numbers for primeness.\n    return true\nend", "  if n <= 1 then\n\
    \    return false\n  end\n  if n == 2 then\n    return true\n  end\n  for i =\
    \ 2, n do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- If n is 1 or n, then it isn't prime\n  if n == 1 then return\
    \ false end", "  -- Return false if n is 0 or 1.\n  return n == 0 or (n == 1 and\
    \ true or false)", "    if n == 1 then return false end\n    -- Check odd and\
    \ even.\n    if n % 2 == 0 or n % 3 == 0 then return false end\n    for i = 5,\
    \ math.floor(n/2), 2 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "   if n < 2 then\n      return\
    \ false\n   end", "    if n % 2 == 0 then\n        return false\n    end\n   \
    \ for i = 2, n do\n        if n % i == 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "    if n == 2 or n == 3 then\n    \
    \    return true\n    end\n    for i = 2, math.floor(n/2) do\n        if n % i\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  if n <= 1 then return false end\n  if n <= 3 then return true end\n \
    \ for i = 2, 3 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  -- Trivial cases\n  if n < 1 then return false end\n\
    \  if n == 1 then return true end", "    return not ((n <= 1) or (n < 2))\nend",
  "\tif n <= 1 then return false end\n\tif n == 2 then return true end\n\tif n % 2\
    \ == 0 then return false end\n\t-- If n is even, then the number can only be prime\
    \ if less than or equal to 3.\n\tif n % 2 == 1 then\n\t\tlocal i = 3\n\t\twhile\
    \ i * i <= n do\n\t\t\tif n % i == 0 then return false end\n\t\t\ti = i + 2\n\t\
    \tend\n\tend\n\t-- If n is odd, then there can only be a prime if n is odd. So\
    \ we need\n\t-- to check the first one to see if the last one is odd.\n\tlocal\
    \ i = 3\n\twhile i * i <= n do\n\t\tif n % i == 0 then return false end\n\t\t\
    i = i + 2\n\tend\n\treturn true\nend", "   if n <= 1 then return false end\n \
    \  if n < 3 then return false end", "  return math.sqrt(n) == math.floor(math.sqrt(n))\n\
    end", "\t-- Even and odd numbers are composites, odd numbers are prime and evens\
    \ are prime.\n\t-- https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_number\n\
    \tif n < 2 then return false end\n\tif n == 2 then return true end\n\tif n ==\
    \ 1 then return false end", "  if n < 2 then return false end\n  if n == 2 then\
    \ return true end\n  if n % 2 == 0 then return false end\n  -- TODO: Use Eratosthenes'\
    \ formula\n  local d = n - 1\n  while d % 2 == 0 do\n    d /= 2\n  end\n  while\
    \ d % 3 == 0 do\n    d /= 3\n  end\n  return d == 1\nend", "  if n < 2 then\n\
    \    return false\n  elseif n == 2 then\n    return true\n  else\n    for i =\
    \ 2, math.floor(n/2) - 1 do\n      if not (n % i) then\n        return false\n\
    \      end\n    end\n    return true\n  end\nend", "  if n <= 2 then\n    return\
    \ false\n  end\n  local m = math.ceil(math.sqrt(n))\n  for i=3,m,1 do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \  if n < 2 then\n      return false\n   end\n   if n == 2 then\n      return\
    \ true\n   end\n   if n % 2 == 0 then\n      return false\n   end\n   if n ==\
    \ 3 then\n      return true\n   end\n   if n % 3 == 0 then\n      return false\n\
    \   end\n   for i = 4, math.floor(n/2), 2 do\n      if n % i == 0 then\n     \
    \    return false\n      end\n   end\n   return true\nend", "\t-- If n is 1 or\
    \ 0, then return true\n\tif n == 1 or n == 0 then return true end", "  if n ==\
    \ 2 then\n    return true\n  end\n  if n < 2 then\n    return false\n  end\n \
    \ local m = math.sqrt(math.abs(n))\n  for i = 1, m, 2 do\n    if not n % i then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local i\n    if\
    \ n < 2 then\n        return false\n    end\n    -- Trial divisors are all the\
    \ odd numbers other than 2 and 3.\n    -- We take advantage of this to speed up\
    \ the algorithm significantly.\n    local divs = math.range(2, n / 2 + 1, 2)\n\
    \    for i = 2, n / 2 do\n        if divs[i] ~= n / i then\n            divs[i]\
    \ = nil\n        end\n    end\n    for i = 1, n / 2 + 1 do\n        if divs[i]\
    \ == nil then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- Use Euclid's algorithm to determine if a number is prime.\n  -- If\
    \ n <= 1, then there is no need to check anything in the range.\n  if n <= 1 then\
    \ return false end", "\tif n % 2 == 0 and n > 1 then\n\t\treturn\n\tend", "\t\
    -- Returns true if n is prime and false otherwise.\n\t-- >>> is_prime(6)\n\t--\
    \ false\n\t-- >>> is_prime(101)\n\t-- true\n\t-- >>> is_prime(11)\n\t-- true\n\
    \t-- >>> is_prime(13441)\n\t-- true\n\t-- >>> is_prime(61)\n\t-- true\n\t-- >>>\
    \ is_prime(4)\n\t-- false\n\t-- >>> is_prime(1)\n\t-- false\n\tif n < 2 then return\
    \ false end\n\tlocal p2, p3 = 2, 3\n\twhile p3 <= math.sqrt(n) do\n\t\tif n %\
    \ p3 == 0 then\n\t\t\tp2 = p3\n\t\telse\n\t\t\tp3 = p3 + 2\n\t\tend\n\tend\n\t\
    return not p2 % n\nend", "   -- A prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\n   -- http://www.wolframalpha.com/input/?i=primenumber+prime\n\
    \   return n <= 1 or (n > 1 and math.fmod(n, 1) == 0)\nend", "  if n < 2 then\
    \ return false end\n  local factors = {}\n  repeat\n    table.insert(factors,\
    \ math.floor(n/2))\n    n = math.floor(n/2)\n  until n <= 1 or n % 2 == 0\n  for\
    \ i = 1, #factors do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend", "    if n < 2 then return false end\n    if n == 2 then return true\
    \ end\n    if n <= 2 then return false end\n    for i = 2, n - 1 do\n        if\
    \ n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if n <= 1 then\n    return false\n  end", "  if n <= 1 then return\
    \ false end\n  if n == 2 then return true end\n  if n % 2 == 0 then return false\
    \ end\n  if n < 3 then return true end\n  for d = 3, floor(n/3)+1, 2 do\n    if\
    \ n % d == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \ -- Trial division with primes less than or equal to n takes about\n  -- n^0.5\
    \ seconds. The following implementation is about n*log(n) in\n  -- time so it\
    \ would take about n^(log(n))/3 seconds for a\n  -- million-digit number.\n  --\
    \ It is not hard to see that if n is prime, then is_prime should\n  -- have time\
    \ complexity of nlogn, and if n is not prime, the\n  -- time complexity should\
    \ be about log(n).\n  -- -- http://en.wikipedia.org/wiki/Trial_division\n  --\
    \ -- http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.PDF\n  --\
    \ -- http://stackoverflow.com/questions/1279582/\n  -- -- https://math.stackexchange.com/questions/11227/how-can-i-check-if-a-number-is-prime-at-most-6-numbers-faster-than-tri",
  "    -- The prime number theorem states that any positive integer greater than 1\
    \ is either prime or composite\n    -- which means any number greater than 1 is\
    \ either prime or composite but not both.\n    -- http://en.wikipedia.org/wiki/Prime_number\n\
    \    -- http://rosettacode.org/wiki/Primality_test#Lua\n    return math.sqrt(math.abs(n))\
    \ == math.abs(math.floor(n))\nend", "\tif n < 1 then\n\t\treturn false\n\telseif\
    \ n < 3 then\n\t\treturn n == 2 or n == 1 -- 1 and 2 are primes\n\telseif n <=\
    \ 3 or n % 2==0 then\n\t\treturn false\n\telseif n <= 5 then\n\t\treturn true\n\
    \telse\n\t\treturn not isprime(n - 2)\n\tend\nend", "  -- TODO: make this work\
    \ using only Sieve of Eratosthenes\n  if n < 2 then return false end\n  if n ==\
    \ 1 then return false end\n  if n == 2 then return true end\n  if n % 2 == 0 then\
    \ return false end\n  local m = math.floor(math.sqrt(n)) -- Find next highest\
    \ factor\n  local a = 3\n  for i = 2, m do\n    if n % i == 0 then\n      a =\
    \ i+a\n    else\n      break\n    end\n  end\n  return false -- n is not prime\n\
    end\nreturn is_prime", "    if n == 1 or n == 2 then\n        return true\n  \
    \  end", "  -- Return true if a given number is prime, and false otherwise.\n\
    \  -- >>> is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>>\
    \ is_prime(11)\n  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n\
    \  -- true\n  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n\
    \  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,20)))+1)\n  -- true\n  --\
    \ >>> is_prime(math.floor(math.sqrt(math.pow(10,19)))+1)\n  -- true\n  -- >>>\
    \ is_prime(math.floor(math.sqrt(math.pow(10,18)))+1)\n  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,17)))+1)\n\
    \  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,16)))+1)\n  --\
    \ true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,15)))+1)\n  -- true\n\
    \  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,14)))+1)\n  -- true\n  --\
    \ >>> is_prime(math.floor(math.sqrt(math.pow(10,13)))+1)\n  -- true\n  -- >>>\
    \ is_prime(math.floor(math.sqrt(math.pow(10,12)))+1)\n  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,11)))+1)\n\
    \  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,10)))+1)\n  --\
    \ true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,9)))+1)\n  -- true\n\
    \  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,8)))+1)\n  -- true\n  -- >>>\
    \ is_prime(math.floor(math.sqrt(math.pow(10,7)))+1)\n  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,6)))+1)\n\
    \  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,5)))+1)\n  -- true\n\
    \  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,4)))+1)\n  -- true\n  -- >>>\
    \ is_prime(math.floor(math.sqrt(math.pow(10,3)))+1)\n  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,2)))+1)\n\
    \  -- true\n  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,1)))+1)\n  -- true\n\
    \  -- >>> is_prime(math.floor(math.sqrt(math.pow(10,0)))+1)\n  -- ", "  if n <\
    \ 2 then return false end\n  local sq = math.floor(n/2)\n  for i = 2, sq do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  if n < 2 then\n    return false\n  elseif n <= 1 then\n    return true\n  end\n\
    \  local p = 3\n  while p*p <= n do\n    if n % p == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i <= p do\n      if n % i == 0 then\n   \
    \     return false\n      end\n      i = i + 2\n    end\n    p = p + 1\n  end\n\
    \  return true\nend\nreturn {\n  is_prime = is_prime\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=lua |>\nThis simple python function checks if a number is prime\
    \ or not:\n<code>\ndef isprime(n):\n  if n == 2:\n    return True\n  elif n<2:\n\
    \    return False\n  elif n%2==0:\n    return False\n  else:\n    for x in range(3,n,2):\n\
    \      if n%x==0:\n        return False\n    return True\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nPlease format your code to look readable. Thanks.\n<|/ c |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it.\n<|/ c |>\n<| a |>\n<code>", "    if n == 2 or n == 3 then\n      \
    \  return true\n    end\n    -- Test for factors up to sqrt(n)\n    local i, limit\
    \ = #n, math.floor(math.sqrt(n)) + 1\n    for i = 2, limit do\n        if n %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- Fast prime check\n  if n > 2187 then\n    return not (math.mod(n,\
    \ 2187) == 0 or math.mod(n, 3) == 1\n             and is_prime(math.mod(n, 5)\
    \ + 1))\n  end", "    if n <= 2 then\n        return false\n    end\n    if n\
    \ == 1 or n == 0 then\n        return false\n    end\n    for i = 2, math.floor(n/2)\
    \ - 1 do\n        if n % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  if n < 2 then\n    return false\n  end\n \
    \ local m = math.sqrt(math.floor(n))\n  -- Use a sieve of Eratosthenes to save\
    \ time.\n  local function is_factor(a, p, n)\n    if a == n then return false\
    \ end\n    if a % p then return false end\n    local r = p + 1\n    local m =\
    \ math.sqrt(math.floor(a/p))\n    repeat\n      m = m + p\n      a = a / m\n \
    \     r = r * m\n    until not (n % m)\n    return r == n\n  end\n  local i =\
    \ 1\n  repeat\n    i = i + 2\n  until is_factor(m, i, n)\n  return true\nend",
  "  if n == 0 then\n    return false\n  elseif n <= 1 then\n    return true\n  elseif\
    \ n % 2 == 0 then\n    return false\n  end\n  local prime = 1\n  local i = 3\n\
    \  while i <= math.sqrt(n) do\n    local m = math.sqrt(n)\n    prime = prime and\
    \ ((n % i) == 0 or n % m == 0)\n    if prime then\n      i = i + (m << 1)\n  \
    \  else\n      i = i + (m >> 1)\n    end\n  end\n  return prime\nend", "  if n\
    \ < 1 then return false end\n  if n == 1 then return true end\n  if n == 2 then\
    \ return true end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then\
    \ return false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then\
    \ return false end\n  if n % 11 == 0 then return false end\n  if n % 13 == 0 then\
    \ return false end\n  if n % 17 == 0 then return false end\n  if n % 19 == 0 then\
    \ return false end\n  if n % 23 == 0 then return false end\n  if n % 29 == 0 then\
    \ return false end\n  if n % 31 == 0 then return false end\n  if n % 37 == 0 then\
    \ return false end\n  if n % 41 == 0 then return false end\n  if n % 43 == 0 then\
    \ return false end\n  if n % 47 == 0 then return false end\n  if n % 53 == 0 then\
    \ return false end\n  if n % 59 == 0 then return false end\n  if n % 61 == 0 then\
    \ return false end\n  if n % 67 == 0 then return false end\n  if n % 71 == 0 then\
    \ return false end\n  if n % 73 == 0 then return false end\n  if n % 79 == 0 then\
    \ return false end\n  if n % 83 == 0 then return false end\n  if n % 89 == 0 then\
    \ return false end\n  if n % 97 == 0 then return false end\n  return true\nend",
  "  if n < 2 then return false end\n  if n == 2 then return true end\n  if n % 2\
    \ == 0 then return false end\n  if n % 3 == 0 then return false end\n  for i=4,8,1\
    \ do\n    if (n % i == 0) == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    -- Special case: 1 or 0 are primes.\n    if n == 1 then return\
    \ true end\n    if n < 2 then return false end", "  if n < 2 then return false\
    \ end\n  if n == 2 then return true end\n  if n % 2 == 0 then return false end\n\
    \  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n\
    \  if n % 7 == 0 then return false end\n  if n == sqrt(n) then return true end\n\
    \  if n > math.sqrt(n) then return false end", "   -- Implements the Miller-Rabin\
    \ primality test for the specified number.\n   -- http://en.wikipedia.org/wiki/Miller-Rabin_primality_test#Rabin_primality_test\n\
    \   -- @param n a positive integer\n   -- @return true if the number n is prime,\
    \ false otherwise\n   if n == 2 then\n      return true\n   end\n   if n < 2 then\n\
    \      return false\n   end\n   if n == 1 then\n      return true\n   end\n  \
    \ if n < 6 then\n      return false\n   end\n   if n <= 3 then\n      return true\n\
    \   end\n   if n % 2 = 0 then\n      return false\n   end\n   if n % 3 = 0 then\n\
    \      return false\n   end\n   if n <= 5 then\n      return true\n   end\n  \
    \ if n % 5 = 0 then\n      return false\n   end\n   if n <= 13 then\n      return\
    \ true\n   end\n   if n % 13 = 0 then\n      return false\n   end\n   if n <=\
    \ 55 then\n      return true\n   end\n   if n % 55 = 0 then\n      return false\n\
    \   end\n   if n <= 999 then\n      return true\n   end\n   if n % 999 = 0 then\n\
    \      return false\n   end\n   if n <= 10000000001 then\n      return true\n\
    \   end\n   if n % 10000000001 ~= 0 then\n      return false\n   end\n   return\
    \ true\nend", "  if n ~= 1 then\n    for i=2,n do\n      if n % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  else\n    return\
    \ false\n  end\nend", "  -- This algorithm is adapted from the Miller-Rabin primality\
    \ test.\n  -- See https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Testing_that_the_two_numbers_are_inside_the_Square\n\
    \  -- See also: https://rosettacode.org/wiki/Primality_test#Lua\n  -- https://github.com/robertoprevato/lua-prime/\n\
    \  -- The idea is to use LuaJIT library to call the C library function from\n\
    \  -- Lua to improve speed.\n  -- https://github.com/robertoprevato/lua-prime/blob/master/libluaJIT/test/test_math.c#L343\n\
    \  --\n  -- The algorithm is based on the sieve of Eratosthenes. The idea is to\n\
    \  -- prime the number by testing all odd numbers (except the number itself) and\n\
    \  -- all even numbers (except the number itself).\n  -- The sieve is then constructed\
    \ by marking the numbers as not prime by\n  -- setting the corresponding bit to\
    \ zero.\n  --\n  --      2\n  -- 0100  0100  0100  0100  0100  0100  0100\n  --\
    \      ^      ^      ^      ^      ^      ^      ^\n  --      |      |      |\
    \      |      |      |\n  --      5      5      5      5      5      5      5\n\
    \  --\n  -- The numbers are marked such that no prime number is a factor of the\n\
    \  -- other (except for two).\n  --\n  -- The complexity of the algorithm is O(n\
    \ log n) but in practice it will\n  -- be much faster than the O(n\xB2) algorithm\
    \ due to caching.\n  -- The algorithm will work for any positive integer as long\
    \ as it is\n  -- in the range [2^32, 2^32 + 2^64 - 1].\n  --\n  -- A faster algorithm\
    \ exists as well, which is based on a prime\n  -- number sieve, which is of complexity\
    \ O(n\xB2 / log log n). It is\n  -- implemented in the primesieve library by Roberto\
    \ Prevato. See also:\n  -- https://rosettacode.org/wiki/Prime_Sieve_of_Eratosthenes#Lua",
  "  for i = 2,n do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local factors = table.new()\n    for i = 2, n do\n\
    \        table.insert(factors, false)\n    end\n    for i = 2, n do\n        for\
    \ _, f in ipairs(factors) do\n            factors[f] = (n % i == 0 and i ~= n)\
    \ and true\n        end\n    end\n    return not next(factors)\nend", "  -- http://www.hackerfactor.com/blog/archives/faster-prime-number-theoretic-approaches/\n\
    \  -- https://primes.utm.edu/lists/small/1000.txt\n  -- http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.pdf",
  "  if n <= 1 then\n    return false\n  end\n  if n % 2 == 1 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 3 == 0 then\n    return\
    \ false\n  end", "  if n < 2 then\n    return false\n  end\n  local d = n - 1\n\
    \  while d % 2 == 0 do\n    -- This could probably be optimized to speed things\
    \ up, but it's fine for now\n    -- since it's a one-off thing.\n    local t =\
    \ d / 2\n    if t % 2 == 1 then\n      return false\n    end\n    -- If we haven't\
    \ gotten this far, try again.\n    d = t\n  end", "   -- The magic number 2.\n\
    \   -- See http://en.wikipedia.org/wiki/Primality_test#Primality_test_as_a_function\n\
    \   return ((n > 1) and ((n % 2) == 0))\nend", "  -- https://math.stackexchange.com/questions/109713/fast-prime-number-test\n\
    \  return n > 1 and n <= math.sqrt(n)\nend", "  for i = 2,n do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "  if n <=\
    \ 1 then return false end\n  local m = tonumber(math.floor(n))\n  -- prime numbers\
    \ cannot start with 0, nor can they be evenly divided by themselves\n  if m ==\
    \ 0 then\n    -- prime numbers can have only even factors\n    return n % 2 ==\
    \ 0\n  end\n  -- only odd numbers can be primes\n  if m == 1 then return false\
    \ end\n  -- if number can't be evenly divided by anything other than itself and\
    \ 1 then it's not a prime\n  if m % m == 0 then return false end\n  -- otherwise\
    \ we know it's prime\n  return true\nend", "   -- A prime number, or prime, or\
    \ nothing.\n   -- Primes are numbered starting at 2, and are greater than 1 and\
    \ divisible only by themselves.\n   -- They only have divisors up to sqrt(n).\n\
    \   -- >>> is_prime(6)\n   -- true\n   -- >>> is_prime(8)\n   -- true\n   -- >>>\
    \ is_prime(9)\n   -- false\n   -- >>> is_prime(101)\n   -- true\n   -- >>> is_prime(11)\n\
    \   -- true\n   -- >>> is_prime(13441)\n   -- true\n   -- >>> is_prime(61)\n \
    \  -- true\n   -- >>> is_prime(4)\n   -- false\n   -- >>> is_prime(1)\n   -- false\n\
    \   -- >>> is_prime(-1)\n   -- false\n   if n == 0 then\n      return false\n\
    \   elseif n == 2 or n > 2 then\n      return true\n   elseif n == 1 or n < 2\
    \ then\n      return false\n   end\n   -- Test if n is a prime.\n   -- Primes\
    \ are numbered starting at 2, and are greater than 1 and divisible only by themselves.\n\
    \   -- They only have divisors up to sqrt(n).\n   if math.floor(math.sqrt(n))\
    \ == n then\n      return true\n   else\n      -- Test if n is even and less than\
    \ it's square.\n      -- If so, it's not prime.\n      if n % 2 == 0 then\n  \
    \       return false\n      end\n      -- Test if n is even and greater than it's\
    \ square minus 1.\n      -- If so, it's not prime.\n      if n % 2 == 0 then\n\
    \         return false\n      end\n      -- If n is odd and is greater than it's\
    \ square minus 1, it's prime.\n      else\n         return true\n      end\n \
    \  end\nend", "   -- Make sure n is not zero\n   if n == 0 then return false end\n\
    \   -- Make sure n is not a negative number\n   if n < 0 then return false end\n\
    \   -- Make sure n does not exceed the maximum allowed positive integer\n   if\
    \ n > 0x100000000 then return false end\n   -- The prime number theorem states\
    \ that every positive integer greater than 2 can be expressed as the sum of two\
    \ primes.\n   -- Thus, to find the sum of two prime numbers, we can just add the\
    \ two primes together, and if the sum is greater than or\n   -- equal to the square\
    \ of the number, then we have found the sum of two primes.\n   -- A number is\
    \ said to be prime if there is no positive integer which divides it evenly.\n\
    \   -- Thus, to check for a prime number, we must have a factor other than 1.\n\
    \   -- To test whether a number is prime, we can use Fermat's little theorem.\n\
    \   -- Fermat's little theorem states that there is no positive integer k such\
    \ that k + 1 divides the given number n without remainder.\n   -- Thus, to test\
    \ whether a number n is prime, we have to find an integer k where k + 1 divides\
    \ n, and test whether k is prime or not by using\n   -- Fermat's little theorem.\n\
    \   -- It turns out that there is such a number k for which k + 1 divides n without\
    \ remainder.\n   -- If k + 1 divides n without remainder in one iteration, then\
    \ we have found a factor for k without remainder, and hence k must divide n without\
    \ remainder.\n   -- Thus, to check for a prime number, we can just add 1 and test\
    \ whether it divides the number.\n   -- The sum of a prime and the next prime\
    \ equals the original number, and so the number is prime if and only if its sum\
    \ is the original number.\n   -- For instance, adding 1 and 2 together produces\
    \ 3, and 3 is divisible by 2, and so is 3.\n   -- Since we only need to check\
    \ for factors other than 1, we can just add 1 and test whether it divides the\
    \ number.\n   -- If it divides, then the number is prime, and if not, it is composite.\n\
    \   -- Since we only need to check for factors other than 1, we can just add 1\
    \ and test whether it divides the number.\n   -- If it divides, then the number\
    \ is prime, and if not, it is composite.\n   -- Since we only need to check for\
    \ factors other than 1, we can just add 1 and test whether it divides the number.\n\
    \   -- If it divides, then the number is prime, and if not, it is composite.\n\
    \   -- Since we only need to check for factors other than 1, we can just add 1\
    \ and test whether it ", "  if n == 1 then return false end\n  if n == 2 then\
    \ return true end\n  if n <= 2 or n % 2==0 then return false end\n  if n < 10\
    \ then\n    for i=3,math.pow(10,n)-1,2 do\n      if n % i==0 then return false\
    \ end\n    end\n  else\n    for i=1,n,2 do\n      if n % i==0 then return false\
    \ end\n    end\n  end\n  return true\nend", "  -- Even numbers are composite\n\
    \  if n % 2 == 0 then\n    -- Check oddity by dividing and checking if that's\
    \ not even\n    -- (which means it's a composite number)\n    if n % 2 == 1 then\n\
    \      -- If it is, return false\n      return false\n    end\n    -- Otherwise,\
    \ check the division\n    return not n % is_prime(math.floor(n/2))\n  end\n  --\
    \ If it hits here, it's prime\n  return true\nend", "  if n <= 1 then return false\
    \ end\n  if n <= 3 then return n == 1 end\n  if n % 2==0 then return false end\n\
    \  if n % 3==0 then return false end\n  local i\n  for i=3,n do\n    if n % i\
    \ == 0 then return false end\n  end\n  return true\nend", "\t-- A number greater\
    \ than 1 is considered to be prime if it\n\t-- has at least one prime factor.\n\
    \tif n <= 1 then return false end", "\tif n < 2 then return false end\n\tif n\
    \ == 1 then return false end\n\tif n % 2 == 0 then return false end\n\tif n <=\
    \ 3 then return true end\n\t-- for i=3, divs(n)>1 do\n\tfor i = 4, n-1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \   -- TODO: Rewrite the code to be more efficient by using the Sieve of Eratosthenes.\n\
    \    -- The Python version is way too slow.\n    if n == 1 then\n        return\
    \ false\n    end\n    if n < 2 or n % 2 == 0 then\n        return false\n    end\n\
    \    if n < 6 then\n        return true\n    end\n    local prime = #primes\n\
    \    for i = 2, n do\n        if prime[i - 1] == n then\n            prime[i -\
    \ 1] = nil\n            break\n        end\n    end\n    for i = 2, #prime do\n\
    \        if prime[i] == n then\n            return true\n        end\n    end\n\
    \    return false\nend", "  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Sieve_of_Eratosthenes\n  --\
    \ http://www.jstor.org/stable/2517691\n  -- http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\n\
    \  -- http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD851.html\n\
    \  -- http://primes.utm.edu/notes/faq/faq.shtml#isPrime\n  -- http://primes.utm.edu/notes/faq/faq.shtml#SieveOfEratosthenes\n\
    \  -- http://prime.utm.edu/wiki/Sieve_of_Eratosthenes\n  -- http://prime.utm.edu/wiki/Primality_test#Sieve_of_Eratosthenes\n\
    \  -- http://math.about.com/od/primetesting/a/primetest.htm\n  -- http://mathworld.wolfram.com/PrimeCountingProblem.html\n\
    \  -- http://en.wikipedia.org/wiki/Eratosthenes\n  -- for i, prime in ipairs(primes)\
    \ do\n  --     if n % prime == 0 then\n  --         return false\n  --     end\n\
    \  --  end\n  --  return true\n  --end", "  -- If n is less than or equal to 1,\
    \ then it isn't prime.\n  if n <= 1 then\n    return false\n  end", "  if n <\
    \ 2 then return false end\n  local i = 3\n  while i < n do i = i + 2 end\n  n\
    \ = i\n  i = 3\n  while i < n do i = i + 2 end\n  if n == n then return true end\n\
    \  return false\nend", "  if n < 2 then return false end\n  -- Test for primeness\
    \ only if n is prime and larger than 2.\n  -- That way, a prime number's factor\
    \ will have at least two divisors.\n  if n < 2 then return false end\n  if n <\
    \ 4 and n % 2 ~= 0 then return false end\n  -- Use quadratic sieve to check for\
    \ primes up to sqrt(n).\n  for i = 2, floor(sqrt(n)) + 1 do\n    if n % i == 0\
    \ then\n      return false\n    end\n  end\n  return true\nend\n</cell>\n<text>\n\
    Exercise: Given an integer, find all prime numbers up to and including that integer.\
    \ Remember: only prime numbers less than 10^3 can be factored into prime numbers.",
  "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n == 1 or n % 2 == 0 or n % 3 ==\
    \ 0 then\n\t\treturn false\n\tend", "\t-- Test for divisibility by primes up to\
    \ sqrt(n).\n\t-- Use only odd numbers.\n\tfor i = 2, math.sqrt(n) + 1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \ if n == 2 then\n    return true\n  end\n  if n == 1 then\n    return false\n\
    \  end\n  if n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "    if\
    \ n < 2 then\n        return false\n    end", "  if n == 1 then\n    return false\n\
    \  else\n    local i = 2\n    local c = math.floor(math.sqrt(n))\n    while i\
    \ <= c do\n      if n % i == 0 then\n        return false\n      end\n      i\
    \ = i + 1\n    end\n    return true\n  end\nend", "  local i = 1\n  while i <=\
    \ math.sqrt(n) do\n    -- If n is divisible by i, then i must be prime.\n    if\
    \ n % i == 0 then\n      return false\n    end\n    -- Advance to the next square\
    \ of i.\n    i = i * 2\n  end\n  return true\nend", "    -- Prime numbers are\
    \ greater than 1.\n    if n <= 1 then\n        return false\n    end", "  local\
    \ i = 2\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "   -- http://en.wikipedia.org/wiki/Primality_test\n\
    \   -- Algorithm: is_prime(n) = (n is prime, if n is odd)\n   -- If n is prime\
    \ then there is no need to check divisors.\n   -- Therefore, return false if n\
    \ is even and true otherwise.", "  -- Primality Testing\n  -- http://en.wikipedia.org/wiki/Primality_test\n\
    \  if n < 2 then\n    return false\n  elseif n <= 1 then\n    return true\n  end\n\
    \  -- End of Primality Testing\n  -- Sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    \  local sieve = {}\n  local i, j, k, num\n  for i = 2, n do\n    sieve[i] = 1\n\
    \  end\n  i = 2\n  while i <= n do\n    num = i\n    for j = 1, i do\n      if\
    \ sieve[j] == 1 then\n        sieve[j] = -1\n        num = num * i + j\n     \
    \ end\n    end\n    sieve[i] = num\n    i = num + 1\n  end\n  -- End of Sieve\
    \ of Eratosthenes\n  -- Divisors of p\n  local divs = {}\n  local p, q, r, s,\
    \ t, u, v\n  for i = 2, n do\n    divs[i] = 1\n  end\n  -- While there are still\
    \ primes left in sieve\n  while #sieve > 0 do\n    -- Divide p by first prime\n\
    \    local q = sieve[2]\n    divs[q] = divs[q] + 1\n    for i = 2, n do\n    \
    \  if divs[i] <= 0 then\n        p = p * q\n        divs[i] = 1\n      else\n\
    \        break\n      end\n    end\n    sieve[i] = divs[p]\n    divs[p] = -1\n\
    \    -- Divide next prime by p\n    q = sieve[2]\n    for i = 2, n do\n      if\
    \ divs[i] <= 0 then\n        q = q * p\n        divs[i] = 1\n      else\n    \
    \    break\n      end\n    end\n    sieve[i] = divs[q]\n    divs[q] = -1\n   \
    \ -- Keep doing this until no more prime left in sieve\n  end\n  return #sieve[#sieve]\
    \ == 0\nend", '  assert(n > 1)', "\tif n <= 1 then return false end\n\tif n <=\
    \ 3 then return n == 1 or n == 3 end\n\tlocal isprime\n\tif n == 2 then isprime\
    \ = true else isprime = false end\n\tlocal i = 2\n\twhile i <= math.sqrt(n) do\n\
    \t\tif n % i == 0 then isprime = false end\n\t\ti = i + 1\n\tend\n\treturn isprime\n\
    end", "    local primes = math.random(1, math.ceil(math.sqrt(n)) + 2)\n    for\
    \ i=1,primes do\n        if n % i == 0 then\n            return false\n      \
    \  end\n    end\n    return true\nend", "\tif n <= 1 then return false end", " \
    \   return n <= 1 or (n > 1 and (n % math.floor(n) == 0))\nend", "  return n >\
    \ 1 and not (math.mod(n, 2) == 0 and n <= 3)\nend", "    -- Base cases\n    if\
    \ n == 0 then return false end\n    if n < 2 then return false end", "  if n ==\
    \ 1 then\n    return false\n  end\n  local root\n  for root = 2, n do\n    if\
    \ n % root == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  -- Based on the is_prime function from http://rosettacode.org/wiki/Primality_test#Lua\n\
    \  -- >>> is_prime(25)\n  -- true\n  -- >>> is_prime(24)\n  -- false\n  -- >>>\
    \ is_prime(26)\n  -- true\n  -- >>> is_prime(29)\n  -- false\n  -- >>> is_prime(30)\n\
    \  -- true", "  if n < 2 then\n    return false\n  else\n    if n % 2 == 0 or\
    \ n < 3 then\n      return false\n    end\n    if n > 1 then\n      return n %\
    \ 6 == 1 or (n % 6 == 0 and (n % 9 == 1 or n % 9 == 7))\n    end\n  end\nend",
  "\tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.floor(n*sqrt(n))+1\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  if n < 2 then\n    return false\n  end", "\tlocal function is_divisibleby(n)\n\
    \t\treturn (n*2 <= math.sqrt(n))\n\tend\n\t\n\tif n == 2 then\n\t\treturn true\n\
    \telseif n < 2 then\n\t\treturn false\n\telseif n < 4 then\n\t\treturn false\n\
    \tend\n\t\n\t-- We are only testing up to sqrt(n), but we know n > 2 here.\n\t\
    \n\tif is_divisibleby(n-1) then\n\t\treturn is_prime(n-1)\n\tend\n\t\n\t-- This\
    \ should only happen for odd numbers\n\t\n\tif n % 2 == 1 then\n\t\treturn false\n\
    \tend\n\t\n\treturn is_prime(math.floor(n/2))\nend", "    if n < 2 then\n    \
    \    return false\n    end", "  -- Based on the algorithm by Dean Miller: http://www.deanmiller.com/testing/numbers/primes/\n\
    \  -- The algorithm tests ALL even numbers as a special case\n  -- If n is even,\
    \ just divide it by 2\n  -- If n is odd, skip even numbers except for 2\n  --\
    \ If n is even, and not divisible by 2, return false\n  -- If n is odd and divisible\
    \ by 2, return true\n  -- Otherwise, it is divisible by 3 and so on...\n  -- If\
    \ we end up dividing by 3 after checking all the numbers,\n  -- we can return\
    \ true since it is a prime number", "  if n < 2 then\n    return false\n  elseif\
    \ n == 2 then\n    return true\n  else\n    for a = 2, n do\n      if n % a ==\
    \ 0 then\n        return false\n      end\n    end\n  end\nend", "  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  -- Implementation from https://github.com/chrismurphy/modular-arithmetic/blob/master/is_prime.lua\n\
    \  if n < 2 then\n    return false\n  end\n  if n <= 1 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i=3,math.floor(n/2),2\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "   if n < 2 then\n      return false\n   end", "\t-- Based on http://rosettacode.org/wiki/Primality_test#Lua\n\
    \t-- Copyright 2006 by Gavin King <removed@example.com>\n\t-- Licensed to PSF\
    \ under a Contributor Agreement.", "  if n == 1 then return false end\n  if n\
    \ == 2 then return true end\n  if n % 2==0 then return false end\n  if n % 3==0\
    \ then return false end\n  -- Assume that n != 1\n  -- for i = 4, 8, 12, 16, 25,\
    \ 36, 49, 64, 81, 100, 129, 196, 353, 512, 625, 1024, 1520, 2047, 3072, 4096,\
    \ 6144, 8192, 12288, 16384, 24576, 32768, 49152, 65536, 98304, 131072, 262144,\
    \ 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728,\
    \ 268435456, 536870912, 1073741824\n  -- 2^(i-1) = 2, 2**(i) = 6\n  -- Thus we\
    \ only need to test odd numbers.\n  for i=3,n,2 do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend", "  if n==1 or n==2 then\n    return true\n\
    \  end\n  if n <= 1 then return false end\n  if n == 2 then return true end\n\
    \  if n%2 == 0 then return false end\n  if n % 3 == 0 then return false end\n\
    \  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n\
    \  return true\nend", "  -- TODO: Implement this as part of the solution.\n  return\
    \ n == 2 or n % 2 == 0\nend", "  -- Based on: http://www.tech-faq.com/a-program-to-check-if-a-number-is-prime/\n\
    \  if n == 1 then return false end\n  -- Start with the numbers 2, 3, 5 and 7\
    \ to begin with.\n  for i=3,8,2 do\n    if n%i==0 then return false end\n  end\n\
    \  -- If we get here n is prime.\n  return true\nend", "  if n == 1 then return\
    \ false end\n  if n <= 1 then return true end\n  if n % 2 == 0 then return false\
    \ end\n  for i = 5, n do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend", "  -- Make sure n is not 0\n  if n == 0 then return false end",
  "  if n < 2 then\n    return false\n  end\n  for i = 2, math.floor(n/2) do\n   \
    \ if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    -- Find prime number\n    for a = 2, n do\n        if n % a == 0 then\n   \
    \         return false\n        end\n    end\n    return true\nend", "  if n <\
    \ 2 then\n    return false\n  end\n  -- Check divisibility by 2\n  if n % 2 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd factors\n  local m = math.floor(n/2)\n\
    \  if m == 0 then\n    return n == 1\n  end\n  for i = 2, m do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "  -- First,\
    \ check if n is even.\n  if n ~= 0 and not (n%2) then\n    return false\n  end\n\
    \  -- Then check if n is prime.\n  -- Check all odd numbers starting from 3 upwards.\n\
    \  for i=3,math.sqrt(n),2 do\n    -- If n is divisible by i, then n is not prime.\n\
    \    if n ~= 0 and not n%i then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if n <= 1 then\n    return false\n  end\n  if n < 3 then\n  \
    \  return n == 1\n  end\n  if math.floor(n/2) == n then\n    return false\n  end\n\
    \  for d = 2, n do\n    if n % d == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    -- If the given number is prime, return true; otherwise\
    \ return false.\n    if n == 1 or n == 2 then return true end\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "\t-- Prime numbers are greater than 1 and strictly\
    \ smaller than a prime\n\t-- number.  See: https://en.wikipedia.org/wiki/Prime_number\n\
    \t-- Prime numbers are also not divisible by certain numbers.  For\n\t-- example,\
    \ 61 is not divisible by 5, and is not divisible by 7.\n\t-- For this reason,\
    \ we do not use the prime number checker from LuaJIT\n\t-- here but instead use\
    \ the following simple rule: if a number is\n\t-- divisible by 2 or 3, then it\
    \ is not a prime number.\n\t-- This does not mean that 61 is not a prime number;\
    \ it just means\n\t-- that it is unlikely that any prime number greater than 6\
    \ can be\n\t-- written as a multiple of 2 or 3.\n\t-- See https://github.com/LuaJIT/LuaJIT/issues/1267\
    \ for more discussion\n\t-- and references to the original prime number checker.\n\
    \t-- >>> print(is_prime(61))\n\t-- false\n\t-- >>> print(is_prime(6*6*6*6))\n\t\
    -- true\n\t-- >>> print(is_prime(6))\n\t-- true\n\t-- >>> print(is_prime(6*6*6))\n\
    \t-- false", "  if n <= 1 then return false end\n  if n == 2 then return true\
    \ end\n  if n % 2 == 0 then return false end\n  for i = 1, n - 1 do\n    if n\
    \ % i == 0 then return false end\n  end\n  return true\nend", "\tassert(n > 1)\n\
    \tlocal isprime = true\n\tlocal i = 1\n\twhile i <= math.sqrt(n) do\n\t\tif n\
    \ % i == 0 then\n\t\t\tisprime = false\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn isprime\nend", "  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 1 end\n  if n % 2 == 0 or n % 3 == 0 then return false end\n  local i\n\
    \  for i = 5, math.floor(math.sqrt(n)) + 1, 2 do\n    if n % i == 0 or n % (i\
    \ + 2) == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \   local root, factors = 4, {}\n    for _, f in ipairs(factorization(n)) do\n\
    \        if f > root then\n            factors[root] = f\n            root = math.floor(math.pow(math.floor(n\
    \ / f), f)) + 1\n        end\n    end\n    return n == root\nend", "  if n < 2\
    \ then return false end\n  if n == 2 then return true end\n  if n == 1 then return\
    \ false end\n  local limit = math.ceil(math.sqrt(n))\n  for i = 2, limit do\n\
    \    if n % i == 0 then return false end\n  end\n  return true\nend", "  if n\
    \ <= 1 then return false end\n  local d = 2\n  while d <= n do\n    if n % d ==\
    \ 0 then\n      return false\n    end\n    d, n = d, n + d\n  end\n  return true\n\
    end", "  if n == 2 then\n    return true\n  elseif n == 2 or n % 2 == 0 then\n\
    \    return false\n  elseif n % 3 == 0 then\n    return false\n  elseif n % 5\
    \ == 0 then\n    return false\n  elseif n % 7 == 0 then\n    return false\n  else\n\
    \    return true\n  end\nend", "    -- Trial division says it is sufficient to\
    \ check only odd numbers,\n    -- no number evenly divisible by 2 is prime.\n\
    \    -- This is not enough as trial division approaches 1\n    if n % 2 == 0 then\
    \ return false end\n    -- Test the odd numbers up to the square root of n\n \
    \   for x = 2, math.sqrt(n) do\n        if n % x == 0 then return false end\n\
    \    end\n    return true\nend", "  -- See \"Introduction To The Power Of 2\"\
    \ by Dan Berg.\n  -- https://cs.utk.edu/~dm/cs321/handouts/power.pdf\n  --\n \
    \ -- If n is even then it is composite.\n  -- If n is odd then any odd integer\
    \ is a composite number.\n  -- For composite numbers we can use the fact that\
    \ if n is even,\n  -- and if we take the difference of two squares whose difference\
    \ is n,\n  -- the difference of the squares is a square.\n  -- >>> is_prime(7)\n\
    \  -- true\n  -- >>> is_prime(13)\n  -- true\n  -- >>> is_prime(101)\n  -- false\n\
    \  -- >>> is_prime(121)\n  -- false\n  -- >>> is_prime(112)\n  -- true\n  -- >>>\
    \ is_prime(1312)\n  -- true\n  -- >>> is_prime(174)\n  -- false\n  -- >>> is_prime(228)\n\
    \  -- false\n  -- >>> is_prime(262143)\n  -- true\n  -- >>> is_prime(13121)\n\
    \  -- true", "   if n <= 1 then\n      return false\n   else\n      local div\
    \ = 2\n      while div <= n do\n         if n % div == 0 then\n            return\
    \ false\n         end\n         div = div * 2\n      end\n      return true\n\
    \   end\nend", "  if n < 2 then return false end\n  if n == 2 then return true\
    \ end\n  if n % 2 == 0 then return false end\n  local m = 3\n  while m <= math.sqrt(n)\
    \ do\n    if n % m == 0 then return false end\n    local i = 3\n    while i <=\
    \ m do i = i + 2 end\n    m = m + (n / i) / 2\n  end\n  return true\nend", " \
    \ if n < 2 then return false end\n  local limit = Math.sqrt(n)\n  for i = 2, limit\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  if n < 2 then return false end\n  if n == 2 then return true end\n  if\
    \ n < 7 then return false end\n  if math.mod(n, 2) == 1 then return false end\n\
    \  if math.mod(n, 3) == 0 then return false end\n  if math.mod(n, 5) == 0 then\
    \ return false end\n  -- This test is fast and simple, but it's easy to get wrong.\n\
    \  -- It only works for odd numbers; for example, 5 is a\n  -- prime while 5 \u2260\
    \ 2\xB9\xB9\xB2, \xB2\xB2\xB2\u22C55 = 125.\n  for i = 6, 1, -1 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend", "\tif n <= 1 then\n\
    \t\treturn false\n\tend\n\tif n < 2 then\n\t\treturn true\n\tend\n\tif n == 2\
    \ then\n\t\treturn true\n\tend", "  local p = primes[n]\n  if not p then\n   \
    \ for i = 1, n do\n      local r = n % i\n      if r == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  else\n    return p\n  end\nend",
  "  -- prime numbers\n  -- http://en.wikipedia.org/wiki/Prime_number\n  return not\
    \ n or n % 2 == 0 or n % 3 == 0 or n == 1", "  return n % 2 == 0 and n ~= 1 or\
    \ n % 2 ~= 0 and n ~= -1\nend", "   -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \   -- http://mathworld.wolfram.com/Primality.html", "  if n <= 1 then return\
    \ false end\n  if n < 3 then return true end\n  if n % 2 == 0 then return false\
    \ end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false\
    \ end\n  if n % 7 == 0 then return false end\n  local max_i = math.ceil(math.sqrt(n)\
    \ + 1)\n  for i = 1, max_i do\n    if n % i == 0 then return false end\n  end\n\
    \  return true\nend", "  if n < 2 then return false end\n  if n == 2 then return\
    \ true end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then return\
    \ false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return\
    \ false end\n  -- If we get this far, then n is prime.\n  -- Advance to the first\
    \ factor greater than n.\n  for i = 5, n / i^2 do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
