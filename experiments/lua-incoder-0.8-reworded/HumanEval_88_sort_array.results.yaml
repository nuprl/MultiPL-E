language: lua
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array == 0 then\n        return\
    \ {}\n    end\n    if #array % 2 == 1 then\n        array = {{array[1], array[#array]}};\n\
    \    end\n    for index = 2, #array do\n        if array[index][1] > array[index-1]\
    \ then\n            array[index], array[index-1] = array[index-1], array[index];\n\
    \        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgwleifm.lua:34:\
    \ expected: {5}\nactual: {{5, 5}}\nstack traceback:\n\t/tmp/tmpfgwleifm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() > 0 then\n    local\
    \ results = {}\n    local sum = 0\n    for _, val in ipairs(array) do\n      sum\
    \ = sum + val\n      table.insert(results, val)\n    end\n    if sum%2 ~= 0 then\n\
    \      table.sort(results)\n    else\n      table.reverse(results)\n    end\n\
    \    table.insert(results, 0)\n    return results\n  else\n    return {}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll14ukh4.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpll14ukh4.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpll14ukh4.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local temp = {}\n  for i = 1, #array\
    \ do\n    table.insert(temp, array[i])\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk_doj859.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif is_pair(array) then\n\t\tlocal\
    \ result = {}\n\t\tlocal size = table.len(array)\n\t\tif size == 0 then\n\t\t\t\
    return result\n\t\tend\n\t\ttable.sort(array)\n\t\tfor i = 1, #array do\n\t\t\t\
    local val = array[i]\n\t\t\tif val ~= 0 then\n\t\t\t\tresult[i] = val\n\t\t\t\
    end\n\t\tend\n\t\treturn result\n\tend\n\treturn array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8mhbzy2.lua:16:\
    \ attempt to call a nil value (global 'is_pair')\nstack traceback:\n\t/tmp/tmpg8mhbzy2.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpg8mhbzy2.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    assert(type(array) == \"table\"\
    )\n    local result = {}\n    local n = #array\n    local sum\n    if n % 2 ==\
    \ 1 then\n        -- Even\n        sum = 0\n        for i = 1, n, 2 do\n     \
    \       sum = sum + array[i]\n        end\n        if sum % 2 == 0 then\n    \
    \        -- Descending\n            for i = 1, n, 2 do\n                result[#result\
    \ + i] = array[n + i - 1]\n            end\n        else\n            -- Ascending\n\
    \            for i = 1, n, 2 do\n                result[#result + i] = array[n\
    \ + i - 1]\n            end\n        end\n    else\n        -- Odd\n        sum\
    \ = 0\n        for i = 1, n, 2 do\n            sum = sum + array[i]\n        end\n\
    \        if sum % 2 == 1 then\n            -- Descending\n            for i =\
    \ 1, n, 2 do\n                result[#result + i] = array[n + i - 1]\n       \
    \     end\n        else\n            -- Ascending\n            for i = 1, n, 2\
    \ do\n                result[#result + i] = array[n + i - 1]\n            end\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgptlpg_o.lua:63:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpgptlpg_o.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local max_sum = max_array_sum(array)\n\
    \  if max_sum % 2 == 0 then\n    for i = 1, #array do\n      array[i], array[#array\
    \ + i] = array[#array + i], array[i]\n    end\n  else\n    for i = 1, #array do\n\
    \      array[i], array[#array + i] = array[#array + i], array[#array + i - 1]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9ncisbg.lua:16:\
    \ attempt to call a nil value (global 'max_array_sum')\nstack traceback:\n\t/tmp/tmpg9ncisbg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpg9ncisbg.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, val in ipairs(array)\
    \ do\n    sum = sum + val\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4uixfav.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmph4uixfav.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = {}\n    local temp\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0i71zthh.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local first_index, last_index =\
    \ 1, #array\n   while first_index <= last_index do\n      local sum_value = array[first_index]\
    \ + array[last_index]\n      if sum_value % 2 == 1 then\n         array[last_index],\
    \ array[first_index] = array[first_index], array[last_index]\n      else\n   \
    \      array[first_index], array[last_index] = array[last_index], array[first_index]\n\
    \      end\n      first_index = first_index + 1\n      last_index = last_index\
    \ - 1\n   end\n   return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9w7ym9a.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 1, 0, 3, 4, 2}\nstack traceback:\n\
    \t/tmp/tmp_9w7ym9a.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sorted_array = array\n  \
    \  local sum_1, sum_2, sum_3 = 0\n    for _, i in ipairs(array) do\n        sum_1\
    \ = sum_1 + i\n    end\n    for _, i in ipairs(array) do\n        sum_2 = sum_2\
    \ + i\n    end\n    for _, i in ipairs(array) do\n        sum_3 = sum_3 + i\n\
    \    end\n    if sum_2 % 2 == 1 then\n        sorted_array = table.sort(sorted_array,\
    \ function(a, b) return a < b end)\n    else\n        sorted_array = table.sort(sorted_array,\
    \ function(a, b) return a > b end)\n    end\n    if sum_3 % 2 == 1 then\n    \
    \    sorted_array = table.sort(sorted_array, function(a, b) return a < b end)\n\
    \    else\n        sorted_array = table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n    end\n    return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_lk5ybu.lua:27:\
    \ attempt to perform arithmetic on a nil value (local 'sum_2')\nstack traceback:\n\
    \t/tmp/tmpa_lk5ybu.lua:27: in local 'candidate'\n\t/tmp/tmpa_lk5ybu.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(#array ~= 0, \"The given array\
    \ cannot be empty.\")\n  local i\n  local sum\n  local last_index_value\n  local\
    \ first_index_value\n  local temp\n  local values = {}\n  -- Calculate the sum\
    \ of the array and check whether it is odd or even.\n  sum = array[1]\n  for i\
    \ = 2, #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n  \
    \  -- The sum is odd, sort the array in ascending order.\n    for i = 2, #array\
    \ do\n      array[i] = array[i] + 1\n    end\n    return table.tolist(array)\n\
    \  else\n    -- The sum is even, sort the array in descending order.\n    for\
    \ i = 2, #array do\n      array[i] = array[i - 1] + 1\n    end\n    return table.tolist(array)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5_ohs4s.lua:16:\
    \ The given array cannot be empty.\nstack traceback:\n\t/tmp/tmpz5_ohs4s.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpz5_ohs4s.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local results = {}\n  local count\
    \ = 0\n  for _, v in ipairs(array) do\n    table.insert(results, v)\n    count\
    \ = count + 1\n    if count > 1 then\n      local k = array\n      local temp\
    \ = {}\n      local tsum = 0\n      for i = 1, #k - 1 do\n        if k [i] > k\
    \ [i + 1] then\n          k = temp\n          table.insert(k, k [i + 1])\n   \
    \       tsum = tsum + array[i]\n        else\n          k = temp\n        end\n\
    \      end\n      local psum = array[i]\n      if tsum % 2 == 0 then\n       \
    \ for i = #k + 1, #temp + 1 do\n          table.insert(k, temp [i])\n        end\n\
    \      else\n        for i = #temp + 1 do\n          table.insert(k, temp [i])\n\
    \        end\n      end\n      local j = #temp + 1\n      for i = #temp, #k +\
    \ 1 do\n        local p = array[j]\n        array[j] = array [i]\n        array\
    \ [i] = p\n        j = j - 1\n      end\n      table.insert(results, array [i\
    \ + 1])\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp36z8wafi.lua:40: '','' expected near ''do''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local len = #array\n  local sum =\
    \ 0\n  for i = 1, len do\n    sum = sum + array[i]\n  end\n  local odd\n  if sum\
    \ % 2 ~= 0 then\n    odd = false\n  else\n    odd = true\n  end\n  local i, j,\
    \ temp\n  local ret = {}\n  for i = 1, len do\n    j = i - 1\n    while j >= 0\
    \ do\n      temp = array[j]\n      if temp <= array[i] + j then\n        break\n\
    \      elseif temp <= array[j] then\n        array[j], array[i] = array[i], array[j]\n\
    \      else\n        if odd then\n          array[j], array[i] = array[j], array[i]\n\
    \        end\n        array[j], array[i] = temp, array[i]\n        break\n   \
    \   end\n      j = j - 1\n    end\n    ret[#ret + 1] = array[i]\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowwxvy76.lua:33:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpowwxvy76.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpowwxvy76.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  else\n    local result = {}\n    local odd = #array % 2 == 1\n    local last_index_value\
    \ = 1\n    local index_value = 1\n    local first_index_value = #array + 1\n \
    \   if odd then\n      while index_value < first_index_value do\n        result[index_value]\
    \ = array[index_value]\n        index_value = index_value + 1\n      end\n   \
    \   while index_value < first_index_value do\n        array[index_value] = array[index_value\
    \ - 1]\n        index_value = index_value + 1\n      end\n      while index_value\
    \ > first_index_value do\n        result[index_value] = array[index_value]\n \
    \       index_value = index_value + 1\n      end\n    else\n      while index_value\
    \ < first_index_value do\n        result[index_value] = array[index_value]\n \
    \       index_value = index_value + 1\n      end\n      while index_value > first_index_value\
    \ do\n        result[index_value] = array[index_value]\n        index_value =\
    \ index_value + 1\n      end\n    end\n    return result\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7ldpk8m.lua:56:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpx7ldpk8m.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return {}\n\
    \  else\n    local sum = 0\n    for _, v in ipairs(array) do\n      sum = sum\
    \ + v\n    end\n    if sum % 2 == 1 then\n      table.sort(array, function (x,\
    \ y)\n        return x < y\n      end)\n    else\n      table.sort(array, function\
    \ (x, y)\n        return x > y\n      end)\n    end\n    return array\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx02aqxw3.lua:42:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpx02aqxw3.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local array2 = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    array2[i] = array[i]\n\
    \  end\n  table.sort(array2, function(a, b) return sum - b end)\n  table.sort(array2,\
    \ function(a, b) return sum - a end)\n  return array2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty0k202s.lua:22:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpty0k202s.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpty0k202s.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- We sort in place the given array.\n\
    \  -- This means that we cannot use recursion.\n  local index = 0\n  while index\
    \ < array:len() do\n    if index == 0 then\n      array[index] = array:get(index)\
    \ -- We always swap the first element with the element at\n                  \
    \                   -- index 0 and we always swap the last element with the element\
    \ at\n                                     -- index array:len() so we don't need\
    \ to care about the last index.\n    else\n      if array[index]:isNumber() then\n\
    \        -- We sort the current element with the element at index 0.\n       \
    \ -- The sum of the first and last element must be even.\n        if array[index\
    \ - 1]:isNumber() and array[index]:isNumber() then\n          array[index] = array[index]\
    \ + array[index - 1]\n          array[index - 1] = 0\n        else\n         \
    \ array[index] = array[index] + array[index - 1]\n          array[index - 1] =\
    \ array[index - 1]\n        end\n      else\n        -- We sort the current element\
    \ with the element at index array:lenght.\n        -- The sum of the first and\
    \ last element must be odd.\n        if array[index - 1]:isNumber() and array[index]:isNumber()\
    \ then\n          array[index] = array[index - 1] + array[index]\n          array[index\
    \ - 1] = 0\n        else\n          array[index] = array[index - 1] + array[index]\n\
    \          array[index - 1] = array[index - 1]\n        end\n      end\n    end\n\
    \    index = index + 1\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1ufztlb.lua:19:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpn1ufztlb.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpn1ufztlb.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   for i = 1, #array do\n      local\
    \ sum = 0\n      for j = 1, #array do\n         sum = sum + array[j]\n      end\n\
    \      if sum < i then\n         local temp = array[i]\n         array[i] = array[sum]\n\
    \         array[sum] = temp\n      end\n   end\n   return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh6p12xq.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpbh6p12xq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array == nil then return nil end\n\
    \  local sum = table.unpack(array)\n  if #sum == 0 then return array end\n  local\
    \ sum1 = table.unpack(sum, 1)\n  local sum2 = table.unpack(sum, #sum)\n  if #sum1\
    \ == 0 then return array end\n  local is_odd = sum1[1] % 2 == 1\n  if is_odd then\n\
    \    return table.sort.apply(array,\n      function(i, j)\n        if i ~= j then\n\
    \          return i\n        else\n          return j\n        end\n      end)\n\
    \  else\n    return table.sort.apply(array,\n      function(i, j)\n        if\
    \ i ~= j then\n          return j\n        else\n          return i\n        end\n\
    \      end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpint5_v04.lua:18:\
    \ attempt to get length of a nil value (local 'sum')\nstack traceback:\n\t/tmp/tmpint5_v04.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpint5_v04.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() ~= 0 then\n    local\
    \ sum = 0\n    for i = 1, array:len() do\n      sum = sum + array[i]\n    end\n\
    \    if sum ~= 0 and sum % 2 == 1 then\n      table.sort(array)\n      return\n\
    \    end\n    table.sort(function(a, b) return a < b end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpui5rodwt.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpui5rodwt.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpui5rodwt.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = {}\n  local count = 0\n\
    \  local index = 0\n  local flag = true\n  local new_array = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoklukwk0.lua:34: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array == 1 then\n\t\treturn {array[1]}\n\
    \telse\n\t\tlocal first_index = math.random(1, #array - 1)\n\t\tlocal last_index\
    \ = math.random(1, #array - 1)\n\t\tlocal sum_array = #array * {array[1]}\n\t\t\
    local sum, i, carry\n\t\tfor i = 2, #array do\n\t\t\tsum = array[i] + sum_array[i\
    \ + 1] + carry\n\t\t\tif sum > sum_array[i] then\n\t\t\t\tcarry = 1\n\t\t\t\t\
    sum = sum - sum_array[i]\n\t\t\telse\n\t\t\t\tcarry = 0\n\t\t\t\tsum = sum - sum_array[i]\n\
    \t\t\tend\n\t\t\ttable.insert(array, sum)\n\t\tend\n\t\tif sum < sum_array[last_index]\
    \ then\n\t\t\ttable.insert(array, sum_array[last_index])\n\t\tend\n\t\treturn\
    \ array\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzuzj1t9.lua:19:\
    \ bad argument #1 to 'random' (interval is empty)\nstack traceback:\n\t/tmp/tmpqzuzj1t9.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpqzuzj1t9.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if type(array) ~= 'table' then\n\
    \    error('sort_array: given array is not table!')\n  end\n  local sum = 0\n\
    \  -- Initialize sum to the first index\n  for i = 1, #array do\n    sum = sum\
    \ + array[i]\n  end\n  -- If sum is odd, sort it in ascending order\n  if sum\
    \ % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array, function(v1,\
    \ v2) return v1 > v2 end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41j85f6o.lua:39:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp41j85f6o.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result\n  if sum(value(array))\
    \ % 2 ~= 0 then\n    result = tablex.merge(\n      tablex.sort(array),\n     \
    \ tablex.reverse(value(array)),\n    )\n  else\n    result = tablex.merge(\n \
    \     tablex.sort(value(value(array))),\n      tablex.reverse(value(value(array))),\n\
    \    )\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv0y9sz69.lua:21: unexpected symbol near '')''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local total = 0\n  for _, value in\
    \ ipairs(array) do\n    total = total + value\n  end\n  if total % 2 == 1 then\n\
    \    return table.sort(array)\n  else\n    return table.sort(array, function(_,\
    \ v)\n      return v - array[1]\n    end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpald8xmop.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpald8xmop.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporqvg3gq.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmporqvg3gq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009101
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array > 1 then\n\t\ttable.sort(array)\n\
    \telse\n\t\treturn array\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpty17s3ac.lua:34: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = table.sum(array)\n  if\
    \ math.mod(sum, 2) == 1 then\n    table.sort(array, function(first, second)\n\
    \      return first > second\n    end)\n  else\n    table.sort(array, function(first,\
    \ second)\n      return first < second\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8q555ok.lua:16:\
    \ attempt to call a nil value (field 'sum')\nstack traceback:\n\t/tmp/tmpe8q555ok.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpe8q555ok.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = tablex.create()\n\
    \  local index = 0\n  local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjygvhk_1.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Sum all values\n  local sum_array\
    \ = { }\n  for _, value in pairs(array) do\n    sum_array[value] = true\n  end\n\
    \  -- Create a list of sorted array values\n  local sorted = {}\n  -- Sort first\
    \ index\n  sorted[#sorted + 1] = sum_array[array[#array]]\n  -- Repeat until all\
    \ values sorted in the array\n  while true do\n    local next_index = #sorted\
    \ + 1\n    local sum = 0\n    -- Find sum of current values\n    for _, value\
    \ in pairs(sorted) do\n      sum = sum + value\n    end\n    -- If sum is even\
    \ -> Sort\n    if sum %% 2 == 0 then\n      table.sort(sorted)\n      break\n\
    \    end\n    -- If sum is odd, reverse sort\n    if sum %% 2 == 1 then\n    \
    \  table.sort(sorted, function(a, b)\n        -- Return negative if first\n  \
    \      if a < b then return a else return b end\n      end)\n      break\n   \
    \ end\n  end\n  -- Return the sorted array\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5784hte8.lua:34: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\n  local i, tmp_sum\n  local results = {}\n  for i = 1, #array do\n   \
    \ tmp_sum = 0\n    for j = i, #array do\n      tmp_sum = tmp_sum + array[j]\n\
    \    end\n    if i % 2 == 1 then\n      results[#results+1] = array[i - 1]\n \
    \   elseif tmp_sum % 2 == 1 then\n      results[#results+1] = array[i - 1]\n \
    \     results[#results+1] = array[j - 1]\n    else\n      results[#results+1]\
    \ = array[i - 1]\n      results[#results+1] = array[j - 2]\n    end\n  end\n \
    \ return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp963u9f9y.lua:30:\
    \ attempt to perform arithmetic on a nil value (global 'j')\nstack traceback:\n\
    \t/tmp/tmp963u9f9y.lua:30: in local 'candidate'\n\t/tmp/tmp963u9f9y.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function helper(array, sum)\n\
    \    local t = {}\n    for _, v in ipairs(array) do\n      t[#t+1] = v\n    end\n\
    \    table.sort(t)\n    local results = {}\n    for _, v in ipairs(t) do\n   \
    \   if sum % 2 == 0 then\n        results[#results+1] = v\n      else\n      \
    \  results[#results+2] = v\n      end\n      sum = sum + v\n    end\n    if sum\
    \ % 2 == 0 then\n      table.sort(results)\n    else\n      table.sort(results,\
    \ function(a, b)\n        return a > b\n      end)\n    end\n    return results\n\
    \  end\n  if type(array) ~= 'table' then\n    array = tolist(array)\n  end\n \
    \ local sum = 0\n  local results = {}\n  for _, v in ipairs(array) do\n    results[#results+1]\
    \ = helper(v, sum)\n    sum = sum + v\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a number value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array[1] == nil then return\
    \ array end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbbkeblpy.lua:30: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local index = 0\n\
    \  for index, v in ipairs(array) do\n    sum = sum + v\n    if sum > 0 then\n\
    \      if index <= (array:size() - 1) then\n        if sum % 2 == 1 then\n   \
    \       array:sort(function(a, b) return a < b end)\n        else\n          array:sort(function(a,\
    \ b) return a > b end)\n        end\n      end\n    end\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48ib2176.lua:21:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmp48ib2176.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp48ib2176.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function helper(array, first,\
    \ last)\n    local results = {}\n    if first == nil then\n      for i = first,last,1\
    \ do\n        results[i] = array[i]\n      end\n      table.sort(results)\n  \
    \  else\n      for i = first,last,1 do\n        if array[i] > array[last] then\n\
    \          table.insert(results, array[i])\n        else\n          table.insert(results,\
    \ array[last])\n          table.insert(results, array[i])\n        end\n     \
    \ end\n      table.sort(results)\n    end\n    return results\n  end\n  return\
    \ helper(array, 0, #array)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxqrb01e.lua:25:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpdxqrb01e.lua:25:\
    \ in function </tmp/tmpdxqrb01e.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpdxqrb01e.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal sorted_array = {}\n\tfor _,\
    \ element in ipairs(array) do\n\t\tsorted_array[element] = element\n\tend\n\t\
    table.sort(sorted_array)\n\treturn sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_crvszjs.lua:28:\
    \ expected: {5}\nactual: {5=5}\nstack traceback:\n\t/tmp/tmp_crvszjs.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Base case\n  local sum, i, last\
    \ = 0, #array, 0\n  for i = 1, #array do\n    sum = array[i] + last\n    if sum\
    \ % 2 == 0 then\n      last = array[i]\n    else\n      last = array[i - 1] --\
    \ Swap\n      array[i], array[i - 1] = last, array[i]\n    end\n  end\n  -- Recursive\
    \ case\n  if last == 0 then\n    return array\n  else\n    local new_array = sort_array(array):reverse()\n\
    \    local new_last = last - 1\n    for i = 1, #new_array do\n      local tmp\
    \ = new_array[i] + new_last\n      new_array[i] = new_last + new_array[i]\n  \
    \    new_last = tmp\n    end\n    return new_array\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72kwajvy.lua:31:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp72kwajvy.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp72kwajvy.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local num_elem = #array\n    if\
    \ num_elem < 2 then\n        return array\n    end\n    local i = 0\n    local\
    \ j = 1\n    local total = 0\n    while i < num_elem do\n        total = total\
    \ + array[i]\n        if total % 2 == 0 then\n            array[j], array[i] =\
    \ array[i], array[j]\n            j = j + 1\n        elseif total % 2 == 1 then\n\
    \            array[j], array[i] = array[i], array[j]\n            i = i + 1\n\
    \        else\n            total = total - 1\n        end\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb131lrxs.lua:24:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpb131lrxs.lua:24: in local 'candidate'\n\t/tmp/tmpb131lrxs.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() == 1 then\n    return\
    \ array\n  end\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(array, function (a, b)\n      return\
    \ a < b\n    end)\n  else\n    table.sort(array, function (a, b)\n      return\
    \ a > b\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3eckxy8j.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp3eckxy8j.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp3eckxy8j.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local result = {}\n   for i = #array,\
    \ 1, -1 do\n      table.insert(result, array[i - 1] + array[i])\n   end\n   return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpazjx9r2n.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpazjx9r2n.lua:18: in local 'candidate'\n\t/tmp/tmpazjx9r2n.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return {}\n\
    \  end\n  local sums = {}\n  for i = 1, #array do\n    sums[i] = array[i] + array[i-1]\n\
    \  end\n  if sums[#sums] % 2 ~= 0 then\n    for i = 1, #array do\n      array[i]\
    \ = array[#array]\n      array[i] = sums[#sums]\n      sums[#sums] = sums[#sums]\n\
    \    end\n  else\n    for i = 1, #array do\n      array[i] = array[#array]\n \
    \     sums[#sums] = sums[#sums]\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9vk9fr7.lua:21:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpj9vk9fr7.lua:21: in local 'candidate'\n\t/tmp/tmpj9vk9fr7.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Write your code here.\n  -- Your\
    \ code here\n  -- print(array.keys)\n  -- print(array.vals)\n  local new_table\
    \ = {}\n  local index_1 = 0\n  local index_2 = #array\n  while index_1 <= index_2\
    \ do\n    local val = array:sub(index_1, index_2)\n    local val_sum = array:sub(index_1,\
    \ index_2 + 1)\n    if val_sum == 0 then\n      table.insert(new_table, val)\n\
    \      index_1 = index_2 + 1\n    else\n      -- val < array[index_1 + 1]\n  \
    \    if val_sum % 2 == 0 then\n        table.insert(new_table, val)\n        index_2\
    \ = index_2 + 1\n      else\n        table.insert(new_table, array[index_2])\n\
    \        index_2 = index_2 + 1\n      end\n    end\n  end\n  return new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppbxshy0h.lua:24:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmppbxshy0h.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmppbxshy0h.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: -1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local t = {}\n    local n = 1\n\
    \    for i = 1, #array do\n        t[#t+1] = array[i]\n    end\n    if #t > 1\
    \ then\n        while 1 do\n            local m, n = 0, 0\n            local sum\
    \ = 0\n            for i = 1, #t do\n                sum = (sum + t[i]) or 1\n\
    \                if sum > n then\n                    n = sum\n              \
    \      m = i\n                end\n            end\n            if n % 2 ~= 0\
    \ then\n                t[#t+1] = t[m]\n                table.sort(t, function(a,b)\
    \ return a<b end)\n            else\n                t[#t+1] = t[m]\n        \
    \        table.sort(t, function(a,b) return a>b end)\n            end\n      \
    \  end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009143
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for i = 1, #array do\n    if i %\
    \ 2 == 1 then\n      table.remove(array, i)\n      table.remove(array, i)\n  \
    \  end\n  end\n  table.sort(array)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla2hcpls.lua:30:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpla2hcpls.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function helper(array, i,\
    \ j, k) \n        local value = array[k]\n        array[k] = value\n        return\
    \ j\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm435wcy_.lua:34: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result = {}\n  local index\
    \ = 0\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n   \
    \ table.insert(result, array[i])\n    index = index + 1\n    if sum % 2 == 1 then\n\
    \      table.insert(result, array[#array - 1 - i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxubjy62v.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 4, 0, 2, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpxubjy62v.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- sort it using bubble sort algorithm\n\
    \  local function bubble_sort(array_size, array)\n    local i, temp\n    for i\
    \ = 1, array_size do\n      local sum = 0\n      local index = i\n      while\
    \ index do\n        sum = sum + array[index][3]\n        index = index - 1\n \
    \     end\n      if sum % 2 == 0 then\n        for j = i, 1, -1 do\n         \
    \ temp = array[j]\n          array[j] = array[i]\n          array[i] = temp\n\
    \        end\n      end\n    end\n  end\n  -- check if the given array is sorted\
    \ in ascending order\n  local ascending_flag = false\n  local temp = array[#array]\n\
    \  while temp[3] do\n    temp = temp[2]\n  end\n  if temp[1] ~= temp[2] then\n\
    \    ascending_flag = true\n  end\n  if #array == 1 then\n    if ascending_flag\
    \ then\n      return temp[1]\n    end\n    return nil\n  end\n  local array_size\
    \ = #array\n  bubble_sort(array_size, array)\n  if ascending_flag then\n    local\
    \ index_start = 1\n    local index_end = array_size - 1\n    while index_end >\
    \ index_start do\n      local temp = array[index_start][1]\n      array[index_start][1]\
    \ =\n        array[index_end - 1][1]\n      array[index_end - 1][1] = temp\n \
    \     index_start = index_start + 1\n      index_end = index_end - 1\n    end\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxf51oj61.lua:38:\
    \ attempt to index a nil value (local 'temp')\nstack traceback:\n\t/tmp/tmpxf51oj61.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmpxf51oj61.lua:70: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array.n then\n    local sum =\
    \ 0\n    for _, x in ipairs(array) do\n      sum = sum + x\n    end\n    if sum\
    \ %2 == 0 then\n      for i, x in ipairs(array) do\n        array[i] = x\n   \
    \   end\n      table.sort(array, nil, function(a,b) return a < b end)\n    end\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6mj84_d.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpq6mj84_d.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local new_array = {}\n  local n =\
    \ 0\n  local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvhhm6owx.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function compare(a1, a2)\n\
    \    if a1 < a2 then\n      return 1\n    elseif a1 > a2 then\n      return -1\n\
    \    else\n      return 0\n    end\n  end\n  if array.n <= 1 then\n    return\
    \ array\n  end\n  table.sort(array, compare)\n  if array[array.n] == array[1]\
    \ then\n    return array\n  else\n    return array:reverse()\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpef6o8zf_.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpef6o8zf_.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpef6o8zf_.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum_ = #array * array[1]\n\
    \  local i = 0\n  for index = 1, #array do\n    array[index] = index\n    sum_\
    \ = sum_ - array[i]\n    i = i + 1\n  end\n  if sum_ % 2 == 1 then\n    return\
    \ table.remove(array, i - 1)\n  else\n    return table.remove(array, i + 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12z4r6tg.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp12z4r6tg.lua:16: in local 'candidate'\n\t/tmp/tmp12z4r6tg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do sum = sum + array[i]; end\n  local odd = math.floor( sum/2 )\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwufjf7dl.lua:27:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpwufjf7dl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local length\
    \ = 0\n    local index = 0\n    local temp\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdx15gwk0.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqiry_675.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal n = 1\n\tlocal sum = 1\n\t\
    for k, v in pairs(array) do\n\t\tif v then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\
    \tif sum % 2 == 1 then\n\t\ttable.sort(array)\n\telse\n\t\ttable.sort(array, function(a,\
    \ b)\n\t\t\tif b then\n\t\t\t\treturn a < b\n\t\t\telse\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend)\n\tend\n\treturn array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g49dfvb.lua:43:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2g49dfvb.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local last_index,\
    \ first_index = 1, 1\n  for i, v in ipairs(array) do\n    sum = sum + v\n    if\
    \ sum < first_index then\n      first_index = sum\n      last_index = i\n    end\n\
    \  end\n  local temp = {}\n  local i\n  -- if odd then sort\n  if first_index\
    \ % 2 == 1 then\n    for i = first_index + 1, last_index do\n      table.insert(temp,\
    \ array[i])\n    end\n    table.insert(temp, array[last_index])\n    local k,\
    \ v = last_index, last_index\n    for i = first_index, last_index - 1, -1 do\n\
    \      k = k - 1\n      v = v - 1\n      temp[k] = temp[v]\n    end\n    for i\
    \ = first_index + 1, last_index do\n      array[i] = temp[i]\n    end\n  else\n\
    \    -- if even then reverse\n    for i = first_index + 1, last_index do\n   \
    \   table.insert(temp, array[i])\n    end\n    table.insert(temp, array[last_index])\n\
    \    local k, v = last_index, last_index\n    for i = first_index, last_index\
    \ - 1, -1 do\n      k = k - 1\n      v = v - 1\n      temp[k] = temp[v]\n    end\n\
    \    for i = first_index, last_index + 1, -1 do\n      array[i] = temp[i]\n  \
    \  end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9y3mmib.lua:66:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpd9y3mmib.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if type(array) == \"table\" then\n\
    \    for i = 1, #array do\n      local index_i = array[i]\n      local value_i\
    \ = array[i]\n      array[i] = table.remove_by_index(array, i)\n      local new_array\
    \ = array\n      -- ascending sort\n      if index_i % 2 == 1 then\n        new_array\
    \ = table.remove_by_index(new_array, index_i)\n      -- descending sort\n    \
    \  elseif index_i % 2 == 0 then\n        new_array = table.remove_by_index(new_array,\
    \ index_i - 1)\n      end\n      table.insert(new_array, value_i)\n      -- ascending\
    \ sort\n      if index_i % 2 == 1 then\n        local index_i_new = array[i]\n\
    \        local value_i_new = array[i]\n        array[i] = table.remove_by_index(array,\
    \ i)\n        new_array = table.remove_by_index(new_array, i)\n        table.insert(new_array,\
    \ value_i_new)\n        -- descending sort\n      elseif index_i % 2 == 0 then\n\
    \        local index_i_new = array[i]\n        local value_i_new = array[i]\n\
    \        array[i] = table.remove_by_index(array, i - 1)\n        new_array = table.remove_by_index(new_array,\
    \ i - 1)\n        table.insert(new_array, value_i_new)\n      end\n    end\n \
    \ else\n    return array\n  end\n  return new_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0cr9r3h.lua:55:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpf0cr9r3h.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local result = {} -- the resulting\
    \ sorted list\n   local sum = 0 -- summation of all elements\n   for _, i in pairs(array)\
    \ do\n      sum = sum + i\n   end\n   if sum % 2 == 0 then -- if the sum is odd,\
    \ sort it in ascending order\n      for _, i in pairs(array) do\n         table.insert(result,\
    \ i)\n      end\n   else -- if the sum is even, sort it in descending order\n\
    \      for _, i in pairs(array) do\n         table.insert(result, i)\n      end\n\
    \   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprugbovrj.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmprugbovrj.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(type(array) == \"table\")\n\
    \  local sum = 0\n  local odd = 1\n  for key, value in pairs(array) do\n    sum\
    \ = sum + value\n    if odd and sum % 2 == 1 then\n      table.insert(array, value)\n\
    \    end\n    odd = not odd\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr73grcb4.lua:33:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpr73grcb4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local size = #array\n    local\
    \ first = 0\n    local last  = size - 1\n    local sorted\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92hcf92i.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum, last_sum, i = 0, 0, 0\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    if sum > 0 then\n    \
    \  last_sum = sum\n      i = i + 1\n    end\n  end\n  if last_sum % 2 then\n \
    \   table.sort(array, function(a, b)\n      return last_sum > a and 1 or -1\n\
    \    end)\n  else\n    table.sort(array, function(a, b)\n      return last_sum\
    \ < b and -1 or 1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpczb2yehs.lua:25:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpczb2yehs.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpczb2yehs.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local results\
    \ = {}\n    for i, v in ipairs(array) do\n        sum = sum + v\n        table.insert(results,\
    \ v)\n    end\n    table.sort(results, function(a, b) return a < b end)\n    local\
    \ ret = {}\n    for i, v in ipairs(results) do\n        table.insert(ret, v)\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylqsqna7.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpylqsqna7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array:len() < 2 then\n     \
    \   return array\n    end\n    local sum = 0\n    for _ = 1, array:len() do\n\
    \        sum = sum + array:index(_, 1)\n    end\n    if sum % 2 == 1 then\n  \
    \      return table.reverse(array)\n    else\n        return array\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclnxd652.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpclnxd652.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpclnxd652.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local total = 0\n    for index,\
    \ value in ipairs(array) do\n        total = total + value\n    end\n    local\
    \ odd = (total % 2) == 1 or total % 2 == 0\n    if odd then\n        table.sort(array,\
    \ nil, function(a, b) return a < b end)\n    else\n        table.sort(array, nil,\
    \ function(a, b) return a > b end)\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplesrskhc.lua:31:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplesrskhc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif array.size == 1 then\n\t\treturn\
    \ array\n\tend\n\tlocal first_index_value = array[i]\n\tlocal last_index_value\
    \ = array[#array]\n\tif first_index_value > last_index_value then\n\t\ttable.sort(array,\
    \ function(index_value, _, _) \n\t\t\tif index_value == first_index_value then\n\
    \t\t\t\treturn 1\n\t\t\telseif index_value == last_index_value then\n\t\t\t\t\
    return -1\n\t\t\tend\n\t\t\treturn index_value < first_index_value and -1 or 1\n\
    \t\tend)\n\tend\n\treturn array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41tn0qyi.lua:21:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp41tn0qyi.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp41tn0qyi.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif array.size == 0 then\n\t\treturn\
    \ array\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1cadtfbt.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  table.sort(array, function(a, b) return a < b end)\n  for index, value\
    \ in ipairs(array) do\n    sum = sum + value\n    if sum > 0 then\n      sorted_array[index]\
    \ = value\n    end\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_hyj00z.lua:33:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2=1, 3=2, 4=3, 5=4, 6=5}\nstack traceback:\n\
    \t/tmp/tmpc_hyj00z.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local last_index\
    \ = 1\n  for index = 1, #array do\n    sum = sum + array[index]\n    if last_index\
    \ > index then\n      if sum % 2 ~= 0 then\n        table.sort(array, function(i,\
    \ j) return i < j end)\n      else\n        table.sort(array, function(i, j) return\
    \ i > j end)\n      end\n    end\n    last_index = index\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks52_gmc.lua:37:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpks52_gmc.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array < 1 then\n\t\treturn array\n\
    \tend\n\tlocal size = math.max(table.getn(array))\n\tlocal t = {}\n\tlocal index\
    \ = 0\n\tlocal tmp\n\t\n\twhile index < size do\n\t\ttmp = index\n\t\tindex =\
    \ index + 1\n\t\tif sum(t[tmp], t[index]) % 2 > 0 then\n\t\t\tt[tmp], t[index]\
    \ = t[index], t[tmp]\n\t\tend\n\tend\n\t\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgkptki4m.lua:19:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpgkptki4m.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpgkptki4m.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array == nil then return nil end\n\
    \  local a = {}\n  local sum = 0\n  for i, v in ipairs(array) do\n    table.insert(a,\
    \ v)\n    sum = sum + v\n  end\n  table.sort(a)\n  local size = #a\n  local new_a\
    \ = {}\n  if sum % 2 == 0 then\n    for i = 1, size, 1 do\n      table.insert(new_a,\
    \ a[i])\n    end\n  else\n    for i = size - 1, 1, -1 do\n      table.insert(new_a,\
    \ a[i])\n    end\n  end\n  return new_a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4f408y0.lua:42:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpz4f408y0.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local last_value = 0\n    local\
    \ last_index = 0\n    local sum = 0\n    local i = 0\n    while i < #array do\n\
    \        sum = array[i]\n        i = i + 1\n        if sum < 0 then\n        \
    \    array[i] = 0\n        elseif sum > 0 then\n            array[i] = array[#array]\n\
    \            array[i] = sum\n            last_value = array[#array - 1]\n    \
    \        last_index = i\n        else\n            array[i] = last_value\n   \
    \         array[i] = last_index\n            break\n        end\n    end\n   \
    \ return table.remove(array, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4c23hob.lua:42:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpx4c23hob.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  local odd = sum % 2 ~= 0\n\
    \  table.sort(array, function(_, value) return odd and value or -valueend)\n \
    \ return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv5s7vtw6.lua:21: ''end'' expected near '')''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() == 0 then\n    return\
    \ array\n  else\n    local key_val = {}\n    for i = 1, array:len() do\n     \
    \ local value = array[i]\n      table.insert(key_val, value)\n    end\n    table.sort(key_val)\n\
    \    local new_array = {}\n    for _, value in pairs(key_val) do\n      table.insert(new_array,\
    \ value)\n    end\n    return new_array\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd31cfpg4.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpd31cfpg4.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpd31cfpg4.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result = {}\n  local max_index\
    \ = 1\n  for i = 1, #array do\n    if max_index <= array[i] then\n      max_index\
    \ = array[i]\n    end\n  end\n  for i = 1, #array do\n    local index = array[i]\n\
    \    table.insert(result, index)\n    if max_index - index <= 1 then\n      table.insert(result,\
    \ max_index)\n      max_index = max_index + 1\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjy5r8se.lua:38:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpjjy5r8se.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum1 = 0\n  local sum2 = 0\n\
    \  local max_index = nil\n  local max_val = nil\n  for i = 1, #array do\n    local\
    \ v = array[i]\n    sum1 = sum1 + v\n    sum2 = sum2 + v\n    if max_val == nil\
    \ or max_index == nil or max_index > i then\n      max_index = i\n      max_val\
    \ = v\n    end\n  end\n  if max_index == nil then return array end\n  table.sort(array,\
    \ function(a, b)\n    local v_a = a\n    local v_b = b\n    if v_a < v_b then\n\
    \      return true\n    elseif v_a > v_b then\n      return false\n    else\n\
    \      if sum1 % 2 == 1 then\n        return true\n      else\n        return\
    \ false\n      end\n    end\n  end)\n  return max_index, max_val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6od62zc.lua:52:\
    \ expected: {5}\nactual: 1\nstack traceback:\n\t/tmp/tmpl6od62zc.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif type(array) ~= 'table' then\n\t\
    \treturn array\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg2ryg9tp.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local results = {}\n    local sum\
    \ = 0\n    for i=1, #array do\n        sum = sum + array[i]\n        if sum then\n\
    \            results[#results+1] = array[i]\n        end\n    end\n    if sum\
    \ and sum % 2 then\n        table.sort(results, function(x,y) return x > y end)\n\
    \    else\n        table.sort(results, function(x,y) return x < y end)\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9xbo_hu.lua:37:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpg9xbo_hu.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local result = {}\n    for _, elem\
    \ in ipairs(array) do\n        table.insert(result, elem)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd_lg9ciw.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(type(array) == \"table\")\n\
    \  local odd = true\n  local index1, index2, index3 = 0, 0, 0\n  local results\
    \ = {}\n  while true do\n    if index1 < #array and index2 < #array then\n   \
    \   local value = array[index1]\n      index1 = index1 + 1\n      local value1\
    \ = array[index2]\n      index2 = index2 + 1\n      local value2 = array[index3]\n\
    \      index3 = index3 + 1\n      if odd then\n        if value1 < value2 then\n\
    \          odd = false\n        else\n          results[index1] = value\n    \
    \      index1 = index1 + 1\n        end\n      else\n        if value1 < value2\
    \ then\n          results[index1] = value\n          index1 = index1 + 1\n   \
    \     else\n          results[index2] = value\n          index2 = index2 + 1\n\
    \        end\n      end\n    else\n      break\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59kudpv1.lua:29:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp59kudpv1.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp59kudpv1.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local new_array = {}\n  for i = 1,\
    \ #array do\n    local index = array[i]\n    if index then\n      if index > #new_array\
    \ then\n        new_array[index] = true\n      else\n        new_array[index]\
    \ = new_array[index] or true\n      end\n    end\n  end\n  -- Sort the result\n\
    \  table.sort(new_array)\n  -- Return the results\n  -- if sum is odd, return\
    \ sorted array\n  if #new_array % 2 then\n    return new_array\n  -- else return\
    \ the reverse sorted array\n  else\n    return table.concat(reverse(new_array))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5onydvg0.lua:43:\
    \ expected: {5}\nactual: {5=true}\nstack traceback:\n\t/tmp/tmp5onydvg0.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array[1] == nil then\n     \
    \   return\n    end\n    local last_item = array[1]\n    local first_item = nil\n\
    \    for i = 2, #array do\n        if array[i] > last_item then\n            last_item\
    \ = array[i]\n            first_item = i - 1\n        end\n    end\n    if first_item\
    \ ~= nil and last_item == nil then\n        if first_item > 0 then\n         \
    \   array[1]\n        end\n        return\n    end\n    if first_item == nil then\n\
    \        if last_item > 0 then\n            array[1]\n        end\n        return\n\
    \    end\n    if last_item == nil then\n        local temp = array[1]\n      \
    \  array[1] = array[#array]\n        array[#array] = temp\n        return\n  \
    \  end\n    if last_item > first_item then\n        local temp = array[first_item]\n\
    \        array[first_item] = last_item\n        array[last_item] = temp\n    \
    \    return\n    end\n    if last_item < first_item then\n        local temp =\
    \ array[first_item]\n        array[first_item] = last_item\n        array[last_item]\
    \ = temp\n        return\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjfubbjhz.lua:30: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    assert(type(array) == \"table\"\
    , \"sort_array: array should be a table.\")\n    local index = 1\n    local sum\n\
    \    while index <= #array do\n        sum = sum + array[index - 1]\n        index\
    \ = index + 1\n    end\n    if sum % 2 == 1 then\n        table.sort(array)\n\
    \    else\n        table.sort(array, function(v1, v2)\n            return v1 >\
    \ v2\n        end)\n    end\n    return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjtqoiy0.lua:23:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpyjtqoiy0.lua:23: in local 'candidate'\n\t/tmp/tmpyjtqoiy0.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for i = #array, 1, -1 do\n    local\
    \ key = array[i]\n    if i ~= #array then key = key .. \",\" end\n    table.insert(array,\
    \ key)\n  end\n  table.sort(array)\n  for i = 1, #array do array[i] = array[i]-1\
    \ end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6k6fnk0.lua:30:\
    \ expected: {5}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpy6k6fnk0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() == 1 then\n    return\
    \ array\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnsf9mvqa.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local keys = {\n    first = {},\n\
    \    last = {}\n  }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9frq0jkl.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local len = #array\n    local even,\
    \ odd = true, false\n    local last_sum = array[1] + array[len]\n    local cur,\
    \ i = 1, 1\n    while i < len do\n        local tmp = array[i]\n        array[i]\
    \ = array[cur]\n        array[cur] = tmp\n        cur = i\n        if odd ~= not\
    \ (last_sum % 2) then odd = not odd end\n        last_sum = array[i] + array[cur]\n\
    \        i = i + 1\n    end\n    return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq010bybd.lua:18:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpq010bybd.lua:18: in local 'candidate'\n\t/tmp/tmpq010bybd.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if type(array) ~= 'table' then return\
    \ array end\n  local n = #array\n  if n == 0 then return array end\n  local m\
    \ = math.floor(n/2)\n  local sorted = {}\n  local swap\n  if n % 2 then\n    sorted\
    \ = table.copy(array)\n    table.sort(sorted)\n    swap = function(x, y) sorted[#sorted\
    \ + 1] = x; sorted[#sorted] = y end\n  else\n    sorted = table.copy(array)\n\
    \    table.sort(sorted, function(a, b) return a < b end)\n    swap = function(x,\
    \ y) return sorted[#sorted + 1] < sorted[#sorted] end\n  end\n  local first =\
    \ true\n  for i = 1, m do\n    if first then\n      first = not first\n    else\n\
    \      local tmp = sorted[#sorted]\n      sorted[#sorted] = sorted[#sorted+1]\n\
    \      sorted[#sorted + 1] = tmp\n    end\n    local last = n - i\n    for j =\
    \ 1, #sorted - #sorted + 1 do\n      if i == j then break\n    end\n      local\
    \ t = sorted[j]\n      sorted[j] = sorted[j+1]\n      sorted[j+1] = t\n    end\n\
    \  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkontbejj.lua:23:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpkontbejj.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpkontbejj.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local results = {}\n    local length\
    \ = array:size()\n    for i = 1, length do\n        local sum = 0\n        for\
    \ index = 1, i do\n            sum = sum + array:get(index)\n        end\n   \
    \     if sum % 2 == 0 then\n            results[i] = array:get(length - i - 1)\n\
    \        else\n            results[i] = array:get(length - i - 2)\n        end\n\
    \    end\n    return table.concat(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzk6u6c7.lua:17:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmpuzk6u6c7.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpuzk6u6c7.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    assert(type(array) == \"table\"\
    )\n    local temp = {}\n    table.insert(temp, 0)\n    local index = 1\n    for\
    \ element in pairs(array) do\n        if index == 1 or element+temp[index-1] <\
    \ element then\n            table.insert(temp, element)\n        end\n       \
    \ index = index + 1\n    end\n    local sorted_array = {}\n    for i = 2, #temp\
    \ + 1 do\n        table.insert(sorted_array, temp[i-1])\n    end\n    if index\
    \ == 1 or temp[index-1] + 1 < temp[index] then\n        table.insert(sorted_array,\
    \ temp[index])\n    end\n    return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlh97ekn.lua:39:\
    \ expected: {}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpjlh97ekn.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local results = {}\n    local sum\
    \ = 0\n    for _, value in pairs(array) do\n        sum = sum + value\n      \
    \  results[#results + 1] = value\n    end\n    if math.fmod(sum, 2) ~= 0 then\n\
    \        table.sort(results, function(x, y)\n            return x < y\n      \
    \  end)\n    else\n        table.sort(results, function(x, y)\n            return\
    \ x > y\n        end)\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gndpdue.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2gndpdue.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum, last_index\n  local len\
    \ = #array\n  if len == 0 then\n    return {}\n  elseif len == 1 then\n    sum\
    \ = array[1]\n    last_index = true\n  else\n    sum = array[1]\n    last_index\
    \ = false\n  end\n  for i = 2, len do\n    sum = sum + array[i]\n    if sum >\
    \ 0 then\n      if last_index then\n        return array\n      else\n       \
    \ array[1] = array[i]\n        array[i] = 0\n        return array\n      end\n\
    \    end\n  end\n  if last_index then\n    return array\n  else\n    array[1]\
    \ = array[len]\n    array[len] = 0\n    return array\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicpdfyrb.lua:53:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 0, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpicpdfyrb.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local index_1, index_2 = 1, 1\n\
    \    local last_index_1, last_index_2 = #array, #array\n    local flag, odd_sum,\
    \ even_sum = 0, #array, 0\n    while index_1 <= last_index_1 do\n        odd_sum\
    \ = odd_sum + array[index_1]\n        even_sum = even_sum + array[index_2]\n \
    \       if odd_sum >= #array then\n            array[index_1], array[odd_sum]\
    \ = array[odd_sum], array[index_1]\n            odd_sum = 0\n            index_1\
    \ = index_1 + 1\n        elseif even_sum >= #array then\n            array[index_2],\
    \ array[even_sum] = array[even_sum], array[index_2]\n            even_sum = 0\n\
    \            index_2 = index_2 + 1\n        else\n            odd_sum, even_sum\
    \ = odd_sum + array[index_1], even_sum + array[index_2]\n        end\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wjx6fjy.lua:41:\
    \ expected: {5}\nactual: {6=5}\nstack traceback:\n\t/tmp/tmp2wjx6fjy.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal sum = 0\n\tlocal index = 0\n\
    \tfor i, elem in ipairs(array) do\n\t\tsum = sum + i\n\t\tif sum % 2 == 1 then\n\
    \t\t\tindex = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif index == 1 then\n\t\treturn\
    \ array\n\tend\n\ttable.sort(array, function(a, b)\n\t\treturn math.abs(a - b)\
    \ < math.abs(index - b) or math.abs(a - b) < math.abs(index - a)\n\tend)\n\treturn\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp103jjipt.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp103jjipt.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   -- write your code here\n   local\
    \ i, total = 0, 0\n   for i = 1, #array do\n      total = total + array[i]\n \
    \     if total % 2 then\n         array[i], array[#array] = array[#array], array[i]\n\
    \      end\n   end\n   return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_cn47c_.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 2, 4, 3, 0, 1}\nstack traceback:\n\
    \t/tmp/tmpq_cn47c_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.reverse(array)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7h61rp8s.lua:23:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp7h61rp8s.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp7h61rp8s.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result = {}\n  table.sort(array,\
    \ function (a, b)\n    if a < b then\n      return a\n    else\n      return b\n\
    \    end\n  end)\n  for i = 1, #array do\n    result[#result + 1] = array[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiaeorpav.lua:17:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpiaeorpav.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpiaeorpav.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  else\n    local first = array[1]\n    local last = array[#array]\n    if last\
    \ == first then\n      return array\n    elseif last % 2 == 0 then\n      array[1]\
    \ = last + 1\n      return array\n    else\n      array[1] = last - 1\n      return\
    \ array\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cfuai3p.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp4cfuai3p.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local t = {}\n  local sum = 0\n \
    \ local function compare(x, y)\n    if x > y then return 1 end\n    if x < y then\
    \ return -1 end\n    return 0\n  end\n  for i = 1, #array do\n    sum = sum +\
    \ array[i]\n    if sum == 0 then return array end\n    table.insert(t, array[i])\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(t, compare)\n  else\n    table.sort(t,\
    \ compare)\n    table.sort(t, compare)\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzad_95n.lua:29:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpkzad_95n.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpkzad_95n.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local results = {}\n    local sum\
    \ = array[1]\n    for i = 2, #array do\n        sum = sum + array[i]\n       \
    \ results[i] = array[i]\n    end\n    if sum % 2 == 1 then\n        table.sort(results,\
    \ function(a, b)\n            return a < b\n        end)\n    else\n        table.sort(results,\
    \ function(a, b)\n            return a > b\n        end)\n    end\n    return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqn4z6m2.lua:22:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmppqn4z6m2.lua:22: in local 'candidate'\n\t/tmp/tmppqn4z6m2.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- base case\n  if not array then\
    \ return array end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_wh5g2b6.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcw1f5ruc.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local key = nil\n  if #array > 1\
    \ then\n    local last_element = array[#array]\n    local last_element_sum = math.abs(last_element)\n\
    \    local last_element_index = 1\n    local key_sum = 0\n    while last_element_index\
    \ < #array do\n      local element = array[last_element_index]\n      key_sum\
    \ = key_sum + element\n      if key_sum == last_element_sum then\n        local\
    \ tmp = array[last_element_index]\n        array[last_element_index] = array[last_element_index\
    \ - 1]\n        array[last_element_index - 1] = tmp\n      else\n        local\
    \ tmp = array[last_element_index]\n        array[last_element_index] = key_sum\n\
    \        key_sum = key_sum + last_element_sum\n        last_element_index = last_element_index\
    \ + 1\n      end\n    end\n    if last_element_sum % 2 == 0 then\n      table.sort(array,\
    \ function(a, b) return a < b end)\n    else\n      table.sort(array, function(a,\
    \ b) return a > b end)\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy9f9z_b.lua:50:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {30, 24, 19, 11, 5, 2}\nstack traceback:\n\
    \t/tmp/tmpxy9f9z_b.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local total = 0\n    local temp\
    \ = 0\n    for _, index in ipairs(array) do\n        total = total + index\n \
    \   end\n    if total % 2 == 1 then\n        table.sort(array, function(firstIndex,\
    \ lastIndex)\n            return firstIndex .. lastIndex\n        end)\n    else\n\
    \        table.sort(array, function(firstIndex, lastIndex)\n            return\
    \ lastIndex .. firstIndex\n        end)\n    end\n    return array\nend\nreturn\
    \ sort_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo8d6wsec.lua:33: <eof> expected near ''end''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum\n  if type(array[1]) ~=\
    \ 'number' then\n    return array\n  else\n    sum = 0\n    for i = 2, #array\
    \ do\n      sum = sum + array[i]\n    end\n    if sum % 2 > 0 then\n      table.sort(array)\n\
    \    else\n      table.sort(array, function(x, y)\n        return y > x\n    \
    \  end)\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom03yj73.lua:41:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpom03yj73.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local temp = {}\n    for _, value\
    \ in ipairs(array) do\n        temp[value] = true\n    end\n    local result =\
    \ {}\n    for _, value in ipairs(temp) do\n        table.insert(result, value)\n\
    \    end\n    table.sort(result)\n    return table.remove(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqxm4ykf.lua:31:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsqxm4ykf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    -- preprocess\n    if #array ==\
    \ 0 then return end\n    local last_value = array[1]\n    array[1] = array[1]\
    \ - 1\n    local index = 2\n    local first_value = last_value + 1\n    while\
    \ index<#array do\n        local value = array[index]\n        if value==last_value\
    \ then\n            last_value = last_value-1\n        end\n        array[index]\
    \ = value\n        index = index + 1\n        array[index] = first_value\n   \
    \     first_value = first_value + 1\n    end\n    -- postprocess\n    for index=1,#array\
    \ do\n        array[index] = array[index] - (first_value-1)\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4pqtf5_.lua:42:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpq4pqtf5_.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if type(array) ~= \"table\" then\n\
    \        error(\"argument is not table or array\", 2)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuo_ul5kl.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array <= 0 then\n\t\treturn array\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3o60hhuz.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if #array <= 1 then return array\
    \ end\n    local pivot = math.floor((#array) / 2)\n    local less = {}\n    local\
    \ equal = {}\n    local greater = {}\n    for idx = 1, #array do\n        if array[pivot]\
    \ < array[idx] then less[#less + 1] = array[idx] end\n        if array[pivot]\
    \ == array[idx] then equal[#equal] = array[idx] end\n        if array[pivot] >\
    \ array[idx] then greater[#greater + 1] = array[idx] end\n    end\n    if math.fmod(#less,\
    \ 2) ~= 0 then\n        local t = less\n        less = greater\n        greater\
    \ = t\n    end\n    local new_less = {}\n    for idx = 1, #less do\n        new_less[#new_less\
    \ + 1] = less[idx]\n    end\n    local new_equal = {}\n    for idx = 1, #equal\
    \ do\n        new_equal[#new_equal + 1] = equal[idx]\n    end\n    local new_greater\
    \ = {}\n    for idx = 1, #greater do\n        new_greater[#new_greater + 1] =\
    \ greater[idx]\n    end\n    if math.fmod(#new_less, 2) ~= 0 then\n        return\
    \ sort_array(new_less) or sort_array(new_equal) or sort_array(new_greater)\n \
    \   else\n        return sort_array(new_greater)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40wfj1rh.lua:55:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {1}\nstack traceback:\n\t/tmp/tmp40wfj1rh.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local is_even = math.abs(array[#array])\
    \ % 2 == 0\n  table.sort(array)\n  if is_even then\n    for i = 1, #array do\n\
    \      local j = i - 1\n      local first_index = array[i]\n      local last_index\
    \ = array[j]\n      while j > 0 and array[j] > last_index do\n        array[j]\
    \ = array[j - 1]\n        j = j - 1\n      end\n      array[j] = first_index\n\
    \    end\n  else\n    for i = 1, #array do\n      local j = i\n      local first_index\
    \ = array[i]\n      local last_index = array[j]\n      while j < #array and array[j]\
    \ < first_index do\n        j = j + 1\n      end\n      array[j] = last_index\n\
    \    end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmyqccypg.lua:16:\
    \ bad argument #1 to 'abs' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpmyqccypg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmyqccypg.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local n = 1\n    local results\
    \ = {}\n    for i = 1, #array do\n        local n = n + 1\n        results[n]\
    \ = array[i]\n    end\n    table.sort(results, function (a, b)\n        if a +\
    \ b < 1 then\n            return -1\n        end\n        if a + b > n then\n\
    \            return 1\n        end\n        if a - b < 1 then\n            return\
    \ 1\n        end\n        if a - b > n then\n            return -1\n        end\n\
    \        return nil\n    end)\n    for i = 1, #array do\n        array[i] = results[i]\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq3sy5q2.lua:47:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpgq3sy5q2.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if type(array) == \"table\" then\n\
    \    local sum = 0\n    local sortedTable = {}\n    for i = 1, #array do\n   \
    \   sum = sum + array[i]\n      sortedTable[#sortedTable + 1] = array[i]\n   \
    \ end\n    if sum % 2 == 1 then\n      table.sort(sortedTable, function(a, b)\
    \ return a - b end)\n    else\n      table.sort(sortedTable, function(a, b) return\
    \ b - a end)\n    end\n    local sum = 0\n    for i = 1, #sortedTable do\n   \
    \   sum = sum + sortedTable[i]\n    end\n    if sum % 2 == 1 then\n      return\
    \ #sortedTable + 1\n    else\n      return #sortedTable\n    end\n  else\n   \
    \ return array\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpff7lwxwg.lua:45:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpff7lwxwg.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local new_array = setmetatable({},\
    \ {__index = table})\n  -- sort by sum of the first two elements\n  local sum\
    \ = 0\n  for _, v in pairs(array) do\n    sum = sum + v\n    new_array[sum] =\
    \ v\n  end\n  -- if sum is even, sort by sum of the last two elements\n  if sum\
    \ % 2 == 0 then\n    sum = 0\n    for _, v in pairs(array) do\n      sum = sum\
    \ + v\n      new_array[sum] = v\n    end\n  end\n  return new_array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uvs8wt3.lua:38:\
    \ expected: {5}\nactual: {5=5}\nstack traceback:\n\t/tmp/tmp0uvs8wt3.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum_ = math.fsum(array:gsub(\"\
    [^-]\", \"\"))\n  if sum_ % 2 > 0 then\n    table.sort(array,\n      function(a,\
    \ b)\n        return math.fabs(a - b) or math.fabs(b - a)\n      end\n    )\n\
    \  else\n    table.sort(array,\n      function(a, b)\n        return math.fabs(a\
    \ - b) or math.fabs(b - a)\n      end\n    )\n  end\n  return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlzrmrog.lua:16:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpmlzrmrog.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmlzrmrog.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() < 2 then\n    return\
    \ array\n  end\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhlnz6hd.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpxhlnz6hd.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpxhlnz6hd.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = array[#array]\n  local\
    \ is_odd = (sum % 2 == 1)\n  if is_odd then\n    for i = 1, #array do\n      if\
    \ is_even then\n        table.remove(array, i)\n      else\n        array[i],\
    \ array[#array] = array[#array], array[i]\n      end\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_ekjkze.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpq_ekjkze.lua:17: in local 'candidate'\n\t/tmp/tmpq_ekjkze.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if b\
    \ < a then return 1 end\n      if b > a then return -1 end\n      return 0\n \
    \   end)\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9xeycr2.lua:35:\
    \ expected: \n{}\nactual: \n{\n    concat=function: 0x561ef9eab430,\n    insert=function:\
    \ 0x561ef9eab340,\n    move=function: 0x561ef9eab070,\n    pack=function: 0x561ef9eaae30,\n\
    \    remove=function: 0x561ef9eab240,\n    sort=function: 0x561ef9eab9e0,\n  \
    \  unpack=function: 0x561ef9eaad20\n}\nstack traceback:\n\t/tmp/tmpz9xeycr2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 1 then\n    return table()\n\
    \  elseif #array < 2 then\n    return array\n  else\n    local sum = 0\n    local\
    \ is_odd = true\n    for i = 2, #array do\n      sum = sum + array[i]\n      if\
    \ is_odd then\n        is_odd = false\n      else\n        is_odd = true\n   \
    \   end\n    end\n    table.sort(array, function(a, b)\n      return a > b and\
    \ is_odd and sum - a or b <= a and is_odd and sum - b\n    end)\n    return array\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl2tnfie.lua:17:\
    \ attempt to call a table value (global 'table')\nstack traceback:\n\t/tmp/tmpgl2tnfie.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpgl2tnfie.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal tmp = {}\n\tlocal n = 0\n\t\
    for i, ele in pairs(array) do\n\t\tif i > n then n = i end\n\t\ttmp[#tmp + 1]\
    \ = ele\n\tend\n\ttable.sort(tmp)\n\t\n\tlocal i = 1\n\tlocal j = 1\n\twhile i\
    \ <= n do\n\t\tif j > n then j = i end\n\t\tif i == n then return tmp[j] end\n\
    \t\tif j == n then return tmp[i] end\n\t\tif tmp[i] + tmp[j] == 0 then\n\t\t\t\
    tmp[i], tmp[j] = tmp[j], tmp[i]\n\t\telse\n\t\t\ttable.insert(tmp, i, j)\n\t\t\
    \ti, j = i + 1, j + 1\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l0takyr.lua:43:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9l0takyr.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for i = 1, #array do\n    local num\
    \ = array[i]\n    local sum = 0\n    for j = 1, i do\n      sum = sum + array[j]\n\
    \    end\n    if sum % 2 == 0 then\n      table[i] = num\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbat4wub.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmppbat4wub.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal length = #array\n\tlocal firstIndex\
    \ = math.floor(length / 2)\n\tlocal lastIndex = firstIndex + length - 1\n\tlocal\
    \ sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjmw3_cq7.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local function sum_func(key, value)\n\
    \        local first_value, last_value = unpack(array)\n        local sum_value\
    \ = first_value + last_value\n        -- If the sum of the first and last element\
    \ of the array is odd\n        -- then reverse the order of the two elements\n\
    \        return sum_value % 2 == 0 and last_value or first_value\n    end\n  \
    \  table.sort(array, sum_func)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvkvst94.lua:17:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkvkvst94.lua:17:\
    \ in function </tmp/tmpkvkvst94.lua:16>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpkvkvst94.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpkvkvst94.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Your code here\n  assert(array:len()\
    \ == 0) -- No more element\n  -- Your code here\n  assert(array:len() == 1) --\
    \ Single element\n  -- Your code here\n  assert(array:len() ~= 0) -- Array is\
    \ empty\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  return table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8eyxq75j.lua:17:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp8eyxq75j.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp8eyxq75j.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    assert(type(array) == \"table\"\
    )\n    for _, v in ipairs(array) do\n        assert(type(v) == \"number\")\n \
    \   end\n    local odd = 1\n    local even = #array + 1\n    for _, v in ipairs(array)\
    \ do\n        odd = odd + 1\n        even = even - 1\n    end\n    if odd == #array\
    \ then\n        return array\n    end\n    local table = {}\n    local index =\
    \ 1\n    local last_index = #array + 1\n    for _, v in ipairs(array) do\n   \
    \     table.insert(table, v)\n        while index > 0 and array[index] <= v do\n\
    \            table[index] = array[last_index]\n            last_index = last_index\
    \ - 1\n            index = index - 1\n        end\n        table[index] = v\n\
    \        index = index + 1\n    end\n    table.insert(table, array[index])\n \
    \   return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22vqmulk.lua:42:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp22vqmulk.lua:42:\
    \ in local 'candidate'\n\t/tmp/tmp22vqmulk.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif type(array) ~= \"table\" then\n\
    \t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpswfu1ghc.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0 -- sum of the first\
    \ and last value of a given array \n  local function is_odd(v)\n    return sum\
    \ % 2 == 1\n  end\n  local function is_even(v)\n    return sum % 2 == 0\n  end\n\
    \  local function sort_pair(array)\n    sum = 0\n    table.sort(array)\n    for\
    \ i,v in ipairs(array) do\n      sum = sum + v\n      if is_odd(sum) then\n  \
    \      array[i], array[#array] = v, array[i]\n      elseif is_even(sum) then\n\
    \        array[i], array[#array] = array[#array], array[i]\n      end\n    end\n\
    \    return array\n  end\n  local function sort_array(array)\n    if #array ==\
    \ 0 then\n      return {}\n    else\n      if type(array[1]) == \"table\" then\n\
    \        return table.concat(sort_pair(sort_array(array[1])), table.concat(sort_pair(sort_array(array[2]))))\n\
    \      else\n        return table.concat(sort_pair(sort_array(array[1])), table.concat(sort_pair(sort_array(array[2]))))\n\
    \      end\n    end\n  end\n  return sort_array(array)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_pv1wdps.lua:37:\
    \ attempt to get length of a number value (local 'array')\nstack traceback:\n\t\
    /tmp/tmp_pv1wdps.lua:37: in upvalue 'sort_array'\n\t/tmp/tmp_pv1wdps.lua:43: in\
    \ function </tmp/tmp_pv1wdps.lua:36>\n\t(...tail calls...)\n\t/tmp/tmp_pv1wdps.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if not array or #array == 0 then\n\
    \        return {}\n    end\n    local sum = 0\n    local first = {}\n    local\
    \ last = {}\n    for i = 1, #array do\n        sum = sum + array[i]\n        table.insert(first,\
    \ array[i])\n        table.insert(last, sum)\n    end\n    table.sort(first)\n\
    \    table.sort(last)\n    local i = 0\n    local output = {}\n    for i = 1,\
    \ #first do\n        if last[i] % 2 ~= 0 then\n            table.insert(output,\
    \ first[i])\n        else\n            table.insert(output, last[i])\n       \
    \ end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i9ayg0s.lua:46:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 6, 2, 3, 10, 5}\nstack traceback:\n\
    \t/tmp/tmp9i9ayg0s.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local table = {}\n  for i = 1, #array\
    \ do\n    table[i] = array[i]\n  end\n  table.sort(function(a,b) return a > b\
    \ end)\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqx49lzp.lua:20:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpfqx49lzp.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpfqx49lzp.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\t-- Create a copy of the given table.\n\
    \tlocal new_table = table:copy()\n\t-- Iterate through the given table.\n\tfor\
    \ i, value in ipairs(array) do\n\t\t-- Keep adding values to the new table until\
    \ we find an odd sum or an even sum.\n\t\twhile new_table:is_empty() do\n\t\t\t\
    if new_table:add(value) then\n\t\t\t\t-- If sum is odd, keep adding values.\n\t\
    \t\t\tif value:isodd() then\n\t\t\t\t\tfor _, val in ipairs(array) do\n\t\t\t\t\
    \t\tnew_table:add(val)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tfor _, val in ipairs(array)\
    \ do\n\t\t\t\t\t\tnew_table:add(-val)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn new_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_8wh6kb.lua:17:\
    \ attempt to call a nil value (method 'copy')\nstack traceback:\n\t/tmp/tmpv_8wh6kb.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpv_8wh6kb.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg3p704ef.lua:33: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function helper(pos, length)\n\
    \    local first_value = array[pos]\n    local last_value = array[pos - 1]\n \
    \   if last_value > first_value then\n      array[pos], array[pos - 1] = array[pos\
    \ - 1], array[pos]\n      helper(pos + 1, length)\n    end\n  end\n  helper(1,\
    \ #array)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprx4ftqfp.lua:19:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmprx4ftqfp.lua:19:\
    \ in local 'helper'\n\t/tmp/tmprx4ftqfp.lua:24: in local 'candidate'\n\t/tmp/tmprx4ftqfp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(type(array) == \"table\")\n\
    \  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if\
    \ sum % 2 ~= 0 then\n    return #array - 1, array\n  else\n    return #array,\
    \ array\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv45ezbt.lua:31:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmplv45ezbt.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then return {} end\n\
    \  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  local\
    \ last_sum = sum\n  local temp_array = array\n  local result = {}\n  local temp_index\
    \ = 1\n  while #temp_array > 0 do\n    local first = temp_array[1]\n    local\
    \ last = temp_array[#temp_array]\n    if last_sum % 2 ~= 0 then\n      result[temp_index]\
    \ = last\n      temp_index = temp_index + 1\n      last_sum = last_sum - first\n\
    \    else\n      result[temp_index] = first\n      temp_index = temp_index + 1\n\
    \      last_sum = last_sum + last\n    end\n    temp_array = temp_array[#temp_array:]\n\
    \  end\n  if last_sum % 2 ~= 0 then\n    while #result > 0 do\n      result[#result]\
    \ = result[#result] .. result[#result-1]\n      result = result[#result]\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphi5ra01w.lua:37: <name> expected near '']''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local tmp = {}\n   for i = 1, #array\
    \ do\n      tmp[i] = array[i-1]\n   end\n   table.sort(tmp)\n   local result =\
    \ {}\n   for i = 1, #array do\n      result[i] = array[i]\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local current_index = 1\n  local\
    \ current_value = array[current_index]\n  while current_index < #array do\n  \
    \  local next_value = array[current_index + 1]\n    if (next_value and current_value\
    \ + next_value < current_value + next_value) then\n      array[current_index],\
    \ array[current_index + 1] = array[current_index + 1], array[current_index]\n\
    \    end\n    current_index = current_index + 1\n    current_value = current_value\
    \ + next_value\n  end\n  -- Return the last value\n  array[#array + 1] = 0\n \
    \ return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcjc1hpg.lua:34:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpwcjc1hpg.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local index = 1\n   for i = 1, #array\
    \ do\n      local sum = 0\n      for j = 1, i do\n         sum = sum + array[j]\n\
    \      end\n      if sum % 2 ~= 0 then\n         return table.concat(array, index)\n\
    \      else\n         index = index + 1\n      end\n   end\n   return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyzbro8t.lua:35:\
    \ expected: {5}\nactual: \"5\"\nstack traceback:\n\t/tmp/tmptyzbro8t.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local table = {}\n    for i = 1,\
    \ #array do\n        local index = array[i]\n        if i > 1 then\n         \
    \   table[index] = table[index] ~= array[i - 1] and array[i - 1] or array[index]\n\
    \        else\n            table[index] = array[i]\n        end\n    end\n   \
    \ return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_h4hez3.lua:32:\
    \ expected: {5}\nactual: {5=5}\nstack traceback:\n\t/tmp/tmpa_h4hez3.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local index\
    \ = 1\n    while index <= #array do\n        sum = sum + array[index]\n      \
    \  table.insert(array, index, sum)\n        index = index + 1\n    end\n    table.sort(array)\n\
    \    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnh_37exv.lua:30:\
    \ expected: \n{}\nactual: \n{\n    concat=function: 0x55b843a23430,\n    insert=function:\
    \ 0x55b843a23340,\n    move=function: 0x55b843a23070,\n    pack=function: 0x55b843a22e30,\n\
    \    remove=function: 0x55b843a23240,\n    sort=function: 0x55b843a239e0,\n  \
    \  unpack=function: 0x55b843a22d20\n}\nstack traceback:\n\t/tmp/tmpnh_37exv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() == 0 then\n    return\
    \ nil\n  end\n  local results = {}\n  local sum = 0\n  for i = 1, #array do\n\
    \    sum = sum + array[i]\n    results[#results + 1] = array[i]\n  end\n  local\
    \ sum2 = sum * 2\n  local isEven = sum2 % 2 == 0\n  if isEven then\n    for i\
    \ = 1, #array do\n      table.insert(results, array[i] + array[i])\n    end\n\
    \  else\n    for i = 1, #array do\n      table.insert(results, array[i] + (#results\
    \ + 1))\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptto75aof.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmptto75aof.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmptto75aof.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local key_sum = 0\n    local key_min\
    \ = math.min(array[1], array[#array])\n    local key_max = math.max(array[1],\
    \ array[#array])\n    while key_sum < key_min or key_sum > key_max do\n      \
    \  local pivot = math.random(key_min, key_max)\n        table.insert(array, pivot)\n\
    \        local temp = key_sum\n        key_sum = key_sum + pivot\n        key_min\
    \ = pivot + math.min(array[1], array[#array])\n        key_max = pivot - math.max(array[1],\
    \ array[#array])\n        array[#array] = temp\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two nil values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local size = #array\n   local is_odd\
    \ = true\n   if size == 0 then return array end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsxxzri9.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local count\
    \ = 0\n    for k, v in pairs(array) do\n        sum = sum + v\n        if sum\
    \ == 0 then\n            count = count + 1\n            table.remove(array)\n\
    \        elseif count > 1 then\n            table.remove(array)\n        else\n\
    \            count = count + 1\n        end\n    end\n    if count % 2 == 1 then\n\
    \        table.sort(array) -- ascending sort\n    else\n        table.sort(array,\
    \ function(a, b) return a > b end) -- descending sort\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6m8f2np.lua:42:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 3, 2, 0}\nstack traceback:\n\t/tmp/tmpc6m8f2np.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array[1] < array[#array] then\n\
    \        table.sort(array, function(left, right)\n            return left - right\n\
    \        end)\n    else\n        table.sort(array, function(left, right)\n   \
    \         return right - left\n        end)\n    end\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_vjor6w.lua:16:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpg_vjor6w.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpg_vjor6w.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for i = #array, 2, -1 do\n    local\
    \ j = i - 1\n    if array[i] > array[j] then\n      table.resize(array, i)\n \
    \     table.append(array, array[j])\n      table.resize(array, i + 1)\n    end\n\
    \  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncaig3a7.lua:30:\
    \ expected: \n{}\nactual: \n{\n    concat=function: 0x55c0a49b0430,\n    insert=function:\
    \ 0x55c0a49b0340,\n    move=function: 0x55c0a49b0070,\n    pack=function: 0x55c0a49afe30,\n\
    \    remove=function: 0x55c0a49b0240,\n    sort=function: 0x55c0a49b09e0,\n  \
    \  unpack=function: 0x55c0a49afd20\n}\nstack traceback:\n\t/tmp/tmpncaig3a7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal newArray = {}\n\tlocal sum\
    \ = 0\n\tfor index = 1, #array do sum = sum + array[index] end\n\tif sum % 2 ==\
    \ 0 then\n\t\tfor index = 1, #array do newArray[index] = array[index] end\n\t\t\
    for index = #array, 1, -1 do newArray[index] = array[index-1] end\n\telse\n\t\t\
    for index = 1, #array do newArray[index] = array[index] end\n\t\tfor index = #array,\
    \ 1, -1 do newArray[index] = array[index-1] end\n\tend\n\treturn newArray\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqsv_h4v.lua:33:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpcqsv_h4v.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  local sorted = {}\n  for i = 1, #array do\n    sorted[i] = i\n  end\n\
    \  table.sort(sorted, function(a, b) return sorted[b] - sorted[a] end)\n  local\
    \ reverse\n  if #array % 2 == 0 then\n    reverse = true\n    for i = #sorted\
    \ - 1, 1, -1 do\n      sorted[i] = sorted[i + 1]\n    end\n  else\n    reverse\
    \ = false\n    for i = #sorted - 1, 1, -1 do\n      sorted[i] = sorted[i - 1]\
    \ + 1\n    end\n  end\n  table.copy(array, reverse, sorted)\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yj3yrfn.lua:36:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp3yj3yrfn.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmp3yj3yrfn.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array==nil then\n    return nil\n\
    \  end\n  if #array==0 then\n    return table()\n  end\n  local max,first,last=0,0,-1\n\
    \  for k,v in ipairs(array) do\n    if first==-1 then\n      first,last=v,k\n\
    \    else\n      if v>max then\n        first,last=v,k\n      elseif v<max then\n\
    \        max=v\n      end\n    end\n  end\n  if first == last then\n    return\
    \ array\n  end\n  if first>last then\n    table.sort(array,function(a,b) return\
    \ a < b end)\n  else\n    table.sort(array,function(a,b) return a > b end)\n \
    \ end\n  local res={}\n  for i=first,last,1 do\n    table.insert(res,array[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5huztpg.lua:20:\
    \ attempt to call a table value (global 'table')\nstack traceback:\n\t/tmp/tmpz5huztpg.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpz5huztpg.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- base case\n  if #array == 1 then\
    \ return array end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjzlq3j60.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   local function cmp(x, y)\n     \
    \ if x < y then return 1 end\n      if x > y then return -1 end\n      return\
    \ 0\n   end\n   if #array == 0 then return array end\n   local tmp = array[1]\n\
    \   for i = 2, #array do\n      tmp, array[i - 1] = array[i - 1], tmp\n   end\n\
    \   return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9qrx2g5.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 3, 0, 5}\nstack traceback:\n\
    \t/tmp/tmpt9qrx2g5.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local table\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsw1zo9fj.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array > 0 then\n    local i,\
    \ j, k = 1, #array + 2, {}\n    for i = 2, #array do\n      local t = array[i]\n\
    \      table.insert(k, t)\n      j = i - 1\n      while j > 0 and t - array[j]\
    \ > 0 do\n        array[j + 1] = array[j]\n        j = j - 1\n      end\n    \
    \  array[j + 1] = t\n    end\n    if k[1] ~= #array and k[1] % 2 ~= 1 then\n \
    \     table.insert(k, 0.0)\n    end\n    for i = 1, #array do array[i] = k[i]\
    \ end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpju212vq4.lua:28:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpju212vq4.lua:28: in local 'candidate'\n\t/tmp/tmpju212vq4.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  local sum1 = (math.floor(sum / 2) + 1)\n\
    \  local sum2 = (math.floor(sum / 2) - 1)\n  for i = 1, #array do\n    if array[i]\
    \ > array[i - 1] or array[i] < array[i + 1] then\n      table.insert(array, i,\
    \ array[sum1])\n      sum1 = sum1 + 1\n    else\n      table.insert(array, i,\
    \ array[sum2])\n      sum2 = sum2 - 1\n    end\n  end\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ks4bisr.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6ks4bisr.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp6ks4bisr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tif #array < 2 then\n\t\treturn array\n\
    \tend\n\tlocal sum = 0\n\tfor i = 1, #array do\n\t\tsum = sum + array[i]\n\tend\n\
    \tif sum % 2 == 0 then\n\t\ttable.sort(array)\n\t\treturn array\n\telse\n\t\t\
    table.sort(array, function(x, y)\n\t\t\tif x < y then return -1 else return 1\
    \ end\n\t\tend)\n\t\treturn array\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqb7vntdk.lua:27:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpqb7vntdk.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpqb7vntdk.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 1 then\n    return nil\n\
    \  end\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n  end\n\
    \  local even = sum % 2 == 0\n  local odd = not even\n  if even then\n    table.sort(array)\n\
    \  else\n    table.sort(table, function(a,b) return b - a  end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vn2ll5u.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7vn2ll5u.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local index_sum = 0 -- Sum first\
    \ and last element of given array\n  for i = 1, #array do -- Sum first and last\
    \ element of given array\n    index_sum = index_sum + array[i]\n  end\n  if index_sum\
    \ % 2 == 0 then -- If the sum is even\n    for i = 1, #array do\n      table.insert(array,\
    \ array[i])\n    end\n  else -- If the sum is odd\n    for i = #array - 1, 1,\
    \ -1 do\n      table.insert(array, array[i])\n    end\n  end\n  return array --\
    \ Return the given array.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk88kbtnz.lua:37:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5, 1, 0, 3, 4, 2}\nstack\
    \ traceback:\n\t/tmp/tmpk88kbtnz.lua:37: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = {}\n  local\
    \ temp_sum = 0\n  local last_index = #array\n  for index=1,last_index do\n   \
    \ temp_sum=temp_sum+array[index]\n    if temp_sum%2 ~= 0 then\n      table.insert(sorted_array,array[#sorted_array])\n\
    \      table.insert(sorted_array,array[index])\n      temp_sum=temp_sum-array[index]\n\
    \    else\n      table.insert(sorted_array,array[index])\n      table.insert(sorted_array,array[#sorted_array])\n\
    \      temp_sum=temp_sum-array[index]\n    end\n  end\n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu11z5n5p.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 3, 0, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpu11z5n5p.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for i = 1, #array do\n    local m\
    \ = array[i-1]\n    local n = array[i]\n    if m > n then\n      array[i], array[#array]\
    \ = n, m\n      array[i-1], array[#array] = m - n, m\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzovr4jpt.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzovr4jpt.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpzovr4jpt.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = table.new(#array)\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[#sorted_array\
    \ + i] = (sum % 2 == 0 and 1 or -1)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvtem_0v.lua:17:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpbvtem_0v.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpbvtem_0v.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum1, sum2 = 0, 0\n  for i\
    \ = 1, #array do\n    sum1 = sum1 + array[i]\n    sum2 = sum2 + array[i]\n  end\n\
    \  if sum1 ~= 0 then\n    table.sort(array)\n    for i = 1, #array do\n      array[i]\
    \ = array[#array]\n    end\n  elseif sum2 ~= 0 then\n    table.sort(array, function(x,\
    \ y)\n      return x > y\n    end)\n    for i = 1, #array do\n      array[i] =\
    \ array[#array]\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bk6h2jx.lua:42:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 5, 5, 5, 5, 5}\nstack traceback:\n\
    \t/tmp/tmp8bk6h2jx.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array <= 1 then\n    return array\n\
    \  end\n  local total = 0\n  local temp = {}\n  for i = 1, #array do\n    total\
    \ = total + array[i]\n    table.insert(temp, array[i])\n  end\n  if total % 2\
    \ == 0 then\n    return temp\n  else\n    table.sort(temp)\n  end\n  return temp\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67somgm_.lua:39:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp67somgm_.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(array and #array > 0, \"array\
    \ cannot be empty\")\n  local result = {}\n  local total = 0\n  for i = 0, #array\
    \ do total = total + array[i]\n    result[i] = array[i]\n  end\n  if total % 2\
    \ == 1 then\n    for i = 1, #array do result[i] = array[i] + 1 end\n  else\n \
    \   for i = 1, #array do result[i] = array[i] end\n  end\n  table.sort(result,\
    \ function (a,b) return a < b end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprrbv_lob.lua:16:\
    \ array cannot be empty\nstack traceback:\n\t/tmp/tmprrbv_lob.lua:16: in local\
    \ 'candidate'\n\t/tmp/tmprrbv_lob.lua:34: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- sort descending if the sum of\
    \ the first two elements is odd\n  -- otherwise, sort ascending\n  if array[1]\
    \ > array[2] then\n    array.swap(0, 1)\n  else\n    table.sort(array, nil, nil,\n\
    \      function(i, j) return i - j end)\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1v84zp7c.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local num_elem = #array\n  local\
    \ tmp = nil\n  if num_elem % 2 == 1 then\n    -- if the length of the array is\
    \ odd\n    tmp = num_elem / 2\n    table.sort(array, function(a, b) return a >\
    \ b end)\n    table.sort(array, function(a, b) return a < b end)\n    table.insert(array,\
    \ array[tmp], num_elem - 1)\n  else\n    -- if the length of the array is even\n\
    \    tmp = num_elem / 2\n    table.sort(array, function(a, b) return a < b end)\n\
    \    table.sort(array, function(a, b) return a > b end)\n    table.insert(array,\
    \ array[tmp], num_elem - 1)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkp02mjcj.lua:29:\
    \ bad argument #2 to 'insert' (number expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpkp02mjcj.lua:29: in local 'candidate'\n\t/tmp/tmpkp02mjcj.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local new_array = {}\n    local\
    \ sum = 0\n    for i, v in pairs(array) do\n        sum = sum + v\n        new_array[i]\
    \ = v\n    end\n    if sum%2 ~= 0 then\n        table.sort(new_array) -- sort\
    \ in descending order\n    else\n        table.sort(new_array) -- sort in ascending\
    \ order\n    end\n    return new_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2ma91cb.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpv2ma91cb.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local index = 0\n  local sum = 0\n\
    \  while index < #array do\n    sum = sum + array[index]\n    if sum % 2 ~= 0\
    \ then\n      table.sort(array, index, index)\n    end\n    index = index + 1\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3n3xrcf0.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp3n3xrcf0.lua:19: in local 'candidate'\n\t/tmp/tmp3n3xrcf0.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if table.getn(array) == 0 then\n\
    \    return table.totable()\n  end\n  local is_even = math.floor((table.getn(array)\
    \ + 1):pow(2) / 2)\n  return table.concat(\n      table.sort(\n        array,\n\
    \        function(a, b)\n          if is_even then\n            if a > b then\n\
    \              return -1\n            elseif a = b then\n              return\
    \ 1\n            else\n              return 0\n            end\n          else\n\
    \            if a < b then\n              return -1\n            elseif a = b\
    \ then\n              return 1\n            else\n              return 0\n   \
    \         end\n          end\n        end\n      ),\n      \" \"\n  )\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy2k3f1_1.lua:27: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local results = {}\n  local sum =\
    \ 0\n  local length = #array\n  for i = 1, length do\n    sum = array[i] + sum\n\
    \    table.insert(results, sum)\n  end\n  if sum % 2 then\n    table.sort(results,\
    \ function(a, b) return a < b end)\n  else\n    table.sort(results, function(a,\
    \ b) return a > b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q21qpma.lua:36:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 6, 9, 9, 10, 15}\nstack traceback:\n\
    \t/tmp/tmp2q21qpma.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   assert(type(array) == \"table\"\
    , \"sort_array expects a table.\") -- todo: check array type\n   local sorted_array\
    \ = array\n   if array[1] > array[2] then\n      table.sort(array, function(x,\
    \ y) return x < y end)\n   else\n      table.sort(array, function(x, y) return\
    \ x > y end)\n   end\n   return sorted_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxsqh8i3_.lua:18:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxsqh8i3_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpxsqh8i3_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    if array.size <= 1 then\n     \
    \   return array\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ntgvfmk.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  assert(type(array) == \"table\")\n\
    \  local length\n  if array:len() == 0 then\n    return array\n  end\n  length\
    \ = array:len()\n  local sum = 0\n  for i = 1, length do\n    sum = sum + array[i]\n\
    \  end\n  if sum%2 == 1 then\n    return array:sortedAscending()\n  else\n   \
    \ return array:sortedDescending()\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpajy4v09t.lua:18:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpajy4v09t.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpajy4v09t.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array.n <= 1 then\n    return\
    \ array\n  else\n    local start = 0\n    local last = 0\n    local temp\n   \
    \ local i = array.n - 1\n    while i > 0 do\n      last = array[start].k\n   \
    \   if last > 0 then\n        array[start].k = last\n      end\n      temp = array[start]\n\
    \      array[start] = array[i]\n      array[i] = temp\n      start = start + 1\n\
    \      i = i - 1\n    end\n    return array\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2yruop0.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpw2yruop0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpw2yruop0.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array.size == 0 then\n    return\
    \ {}\n  elseif array:sum() == 1 then\n    return table.remove(array, 1)\n  elseif\
    \ array:sum() == 2 then\n    if array[#array]:sum() == 1 then\n      return table.remove(array,\
    \ 1)\n    elseif array[#array]:sum() == 0 then\n      return table.remove(array,\
    \ 1)\n    end\n  else\n    -- sort descending\n    if array[#array]:sum() % 2\
    \ == 1 then\n      table.sort(array)\n      local tmp1 = array[1]\n      local\
    \ tmp2 = array[2]\n      array[1] = tmp2\n      array[2] = tmp1\n    end\n   \
    \ return array\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8e_sag6.lua:18:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpj8e_sag6.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpj8e_sag6.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local function sort(a, b)\n    local\
    \ sum_a = a[1] + a[2] \n    local sum_b = b[1] + b[2] \n    if sum_a > sum_b then\n\
    \      return 1\n    elseif sum_a < sum_b then\n      return -1\n    end\n   \
    \ return a[1] + b[1]\n  end\n  return table.sort(array, sort)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyw8_xt7.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvyw8_xt7.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array == 0 then\n    return array\n\
    \  end\n  local last = array[1]\n  local tmp = {}\n  table.insert(tmp, array[1])\n\
    \  for i = 2, #array do\n    local value = array[i]\n    if value > last then\n\
    \      if value % 2 == 1 then\n        table.insert(tmp, value)\n      else\n\
    \        table.insert(tmp, last)\n      end\n    else\n      if value % 2 == 0\
    \ then\n        table.insert(tmp, value)\n      else\n        last = value\n \
    \     end\n    end\n  end\n  table.insert(tmp, last)\n  return tmp\nend\nreturn\
    \ {\n  max_array,\n  sum_array,\n  sort_array\n}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3t_mkdmh.lua:46: <eof> expected near ''end''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if array:len() == 0 then return array\
    \ end\n  local sum = array[1]:sum()\n  if sum > 0 then\n    local index_of_0\n\
    \    for index_of_0 = 2, array:len() do\n      if array[index_of_0] == 0 then\
    \ break end\n    end\n  end\n  if sum < 0 then\n    local index_of_0\n    for\
    \ index_of_0 = 2, array:len() do\n      if array[index_of_0] == 0 then\n     \
    \   if index_of_0 > 1 then\n          array[index_of_0 - 1], array[index_of_0]\
    \ = array[index_of_0], array[index_of_0 - 1]\n        else\n          array[1],\
    \ array[0] = array[0], array[1]\n        end\n      end\n    end\n  end\n  for\
    \ index_of_0 = 2, array:len() do\n    array[index_of_0], array[index_of_0 - 1]\
    \ = array[index_of_0 - 1], array[index_of_0]\n  end\n  return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3po87j_i.lua:16:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp3po87j_i.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp3po87j_i.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local t = {}\n    for i = 1, #array\
    \ do\n        t[array[i]] = i\n    end\n    t = table.sort(t)\n    local new_array\
    \ = {}\n    for i = 1, #array do\n        new_array[t[array[i]]] = array[i]\n\
    \    end\n    return new_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0aeu44l0.lua:23:\
    \ attempt to index a nil value (local 't')\nstack traceback:\n\t/tmp/tmp0aeu44l0.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp0aeu44l0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    for _, value\
    \ in ipairs(array) do\n        sum = sum + value\n    end\n    if sum % 2 == 1\
    \ then\n        table.sort(array)\n    else\n        table.sort(array, function(_,\
    \ value2)\n            return value2 > value\n        end)\n    end\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hvpo3wh.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp7hvpo3wh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local key\n  local sum = 0\n  for\
    \ key, _ in pairs(array) do\n    sum = sum + key\n  end\n  local is_even = sum\
    \ % 2 == 0\n  if is_even then\n    return table.sort(array, function(first_index,\
    \ last_index)\n      return array[last_index] - array[first_index]\n    end)\n\
    \  else\n    return table.sort(array, function(first_index, last_index)\n    \
    \  return -table[last_index] - table[first_index]\n    end)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ct7aoe2.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp4ct7aoe2.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqiry_675.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if #array < 2 then\n    return array\n\
    \  end\n  local num_sorted = {}\n  local prev_i\n  local prev_j\n  for i = 2,\
    \ #array do\n    local num_i = array[i]\n    local num_j = array[i-1]\n    local\
    \ sum = num_i + num_j\n    if (sum % 2) == 1 then\n      num_sorted[#num_sorted\
    \ + 1] = num_i\n    else\n      num_sorted[#num_sorted + 1] = num_j\n    end\n\
    \  end\n  table.sort(num_sorted)\n  local result = {}\n  local num_i = num_sorted[1]\n\
    \  for i = 1, #num_sorted do\n    if num_i == num_sorted[i] then\n      result[#result\
    \ + 1] = num_i\n      num_i = num_sorted[i + 1]\n    else\n      result[#result\
    \ + 1] = num_sorted[i]\n      num_i = num_sorted[i + 1]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde21ac7u.lua:52:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {0, 1, 1, 2, 3}\nstack traceback:\n\t\
    /tmp/tmpde21ac7u.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local tmp = {}\n  -- get the max\
    \ value in an array\n  local max_value = tonumber( array[1] )\n  -- get the min\
    \ value in an array\n  local min_value = tonumber( array[2] )\n  -- iterate over\
    \ the sorted array\n  for idx, value in ipairs( array ) do\n    -- if the current\
    \ value is greater or equal to the max value, append it to the tmp table\n   \
    \ if value >= max_value then\n      table.insert( tmp, value )\n      -- if the\
    \ current value is smaller than or equal to the min value, append it to the tmp\
    \ table\n    else if value <= min_value then\n      table.insert( tmp, value )\n\
    \      -- if the current value is between the min and the max, append to the tmp\
    \ table\n    else\n      -- if the current value is between the min and the max,\
    \ append it to the tmp table\n      table.insert( tmp, value )\n      -- else\
    \ update the max_value and min_value\n    end\n    -- update the max_value and\
    \ min_value\n    if idx == 2 then\n      -- if the current value is greater than\
    \ the max value, update the max value\n      if tonumber( array[1] ) > max_value\
    \ then\n        max_value = tonumber( array[1] )\n      -- else if the current\
    \ value is smaller than the min value, update the min value\n      elseif tonumber(\
    \ array[2] ) < min_value then\n        min_value = tonumber( array[2] )\n    \
    \  end\n    end\n  end\n  -- return the sorted array\n  return tmp\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfw_tnd2j.lua:62: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local total_sum = #array\n    local\
    \ sort_array = { }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx525ep7g.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local result = {}\n  local i, last\
    \ = 0, 1\n  for i, v in ipairs(array) do\n    local cur_val = v + last\n    last\
    \ = cur_val\n    table.insert(result, v)\n  end\n  if last % 2 then\n    table.sort(result)\n\
    \  else\n    table.sort(result, function(x, y)\n      return x >= y\n    end)\n\
    \  end\n  -- return result\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxw70fyc.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfxw70fyc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local last_index, last_sum = 0, 0\n\
    \  local ret = {}\n  local function add_index(index)\n    last_sum = last_sum\
    \ + index\n    if last_sum % 2 == 0 then\n      ret[#ret + 1] = index\n    end\n\
    \  end\n  for i = 1, #array do\n    add_index(array[i]); add_index(array[i + 1])\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafi6de26.lua:19:\
    \ attempt to perform arithmetic on a nil value (local 'index')\nstack traceback:\n\
    \t/tmp/tmpafi6de26.lua:19: in local 'add_index'\n\t/tmp/tmpafi6de26.lua:25: in\
    \ local 'candidate'\n\t/tmp/tmpafi6de26.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local array_copy = table.remove(array)\n\
    \  table.sort(array_copy)\n  local sum = 0\n  for i=1,#array_copy do\n    sum\
    \ = sum + array_copy[i]\n  end\n  if ((sum & 1) == 1) then\n    return array_copy\n\
    \  else\n    return array_copy:reverse()\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxamsljdx.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got nil)\nstack traceback:\n\t/tmp/tmpxamsljdx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpxamsljdx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  -- Sum all indices to find out the\
    \ highest index\n  local sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n\
    \  end\n  -- If the sum is odd, then sort in descending order\n  if sum%2 == 1\
    \ then\n    return table.sort(table, function(x, y) return x-y end)\n  -- If the\
    \ sum is even, then sort in ascending order\n  else\n    return table.sort(table,\
    \ function(x, y) return y-x end)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36pxc5ep.lua:33:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp36pxc5ep.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local temp = {}\n  local last_index\
    \ = 0\n  for _, item in ipairs(array) do\n    local sum = item\n    if item >\
    \ last_index then\n      table.insert(temp, item)\n    end\n    last_index = item\n\
    \  end\n  table.sort(temp)\n  for _, item in ipairs(temp) do\n    table.insert(array,\
    \ item)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhm31s33.lua:36:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpdhm31s33.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczx18qkb.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpczx18qkb.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local i = 1\n  local j = 1\n  local\
    \ temp\n  local flag = false\n  while i <= #array do\n    if array[i] == i then\n\
    \      flag = false\n      temp   = i\n      while i <= #array and array[i] ~=\
    \ temp do\n        i += 1\n      end\n      array[i], array[temp] = array[temp],\
    \ array[i]\n      i = temp + 1\n    else\n      if flag == false then\n      \
    \  array[i], array[i - 1] = array[i - 1], array[i]\n      else\n        if i +\
    \ 1 ~= #array then\n          array[i], array[i + 1] = array[i + 1], array[i]\n\
    \        end\n      end\n      flag = not flag\n    end\n    i += 1\n  end\n \
    \ return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphts3z037.lua:25: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    assert(type(array) == \"table\"\
    )\n    local length = #array\n    if length > 1 then\n        local even\n   \
    \     if length % 2 == 0 then\n            even = true\n        else\n       \
    \     even = false\n        end\n        if even then\n            table.sort(array)\n\
    \        else\n            table.sort(array, function(x, y) return -y)\n     \
    \   end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0nu8_p2k.lua:28: ''end'' expected near '')''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local i = 0\n  local\
    \ j = 1\n  while i < (#array) do\n    sum = sum + array[i]\n    i = i + 1\n  \
    \  local k = i\n    while j < k do\n      if array[i] + array[j] > sum then\n\
    \        array[j] = array[i] + array[j]\n        array[i] = array[i]\n      else\n\
    \        array[j] = array[j]\n      end\n      j = j + 1\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwenm8eic.lua:20:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwenm8eic.lua:20: in local 'candidate'\n\t/tmp/tmpwenm8eic.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local sum = 0\n    local results\
    \ = {}\n    for i = 1, #array do\n        sum = sum + array[i]\n        table.insert(results,\
    \ array)\n    end\n    table.sort(results)\n    if math.floor((sum + array[#array])\
    \ / 2) ~= math.floor((sum + array[#array]) / 2) then\n        table.sort(results,\
    \ function(a, b) return a < b end)\n    end\n    return unpack(results)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq1nycq6.lua:23:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwq1nycq6.lua:23: in local 'candidate'\n\t/tmp/tmpwq1nycq6.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local keys = {}\n  for i = 1, #array\
    \ do keys[array[i]] = i end\n  table.sort(keys, function(first, second) return\
    \ first > second end)\n  local result = {}\n  for i = 1, #array do result[i] =\
    \ keys[array[i]] end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkp3y9l3j.lua:28:\
    \ expected: {5}\nactual: {1}\nstack traceback:\n\t/tmp/tmpkp3y9l3j.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  if type(array) ~= 'table' then\n\
    \    return nil\n  end\n  local key_sum = 0\n  local keys_array = table.sort(array,\
    \ \"asc\")\n  for i, v in ipairs(keys_array) do\n    key_sum = key_sum + v\n \
    \ end\n  if key_sum ~= (key_sum mod 2) then\n    table.sort(keys_array, \"desc\"\
    )\n  end\n  return keys_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1raulgz7.lua:24: '')'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal result = {}\n\tfor i, v in\
    \ ipairs(array) do\n\t\tif v then\n\t\t\tresult[i] = v\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \tfor i, v in ipairs(array) do\n\t\tif v then\n\t\t\tarray[i] = v\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xjzg5ku.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2xjzg5ku.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n   if type(array) ~= 'table' then\n\
    \      return array\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsj244ril.lua:32: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  for index = 1, #array do\n    if\
    \ array[index] == 0 then\n      array[index] = nil\n      continue\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo82zz26o.lua:20: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum, last_sum, last_index,\
    \ first, last, i, j, tmp, index\n  sum = array[1]\n  last_sum = sum\n  last_index\
    \ = #array\n  index = 1\n  for i = 1, #array do\n    sum = sum + array[i]\n  \
    \  if sum > last_sum then\n      index = index + 1\n      last_sum = sum\n   \
    \   last_index = index\n    end\n  end\n  if last_sum % 2 then\n    tmp = last_index\n\
    \    last_index = last\n    last = tmp\n  end\n  table.sort(array, function(first,\
    \ last)\n    return first > last\n  end)\n  for i = last_index, index, 1 do\n\
    \    array[i] = array[i - 1]\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjf1ie0de.lua:29:\
    \ attempt to perform arithmetic on a nil value (local 'last_sum')\nstack traceback:\n\
    \t/tmp/tmpjf1ie0de.lua:29: in local 'candidate'\n\t/tmp/tmpjf1ie0de.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n\tlocal sum = 0\n\tlocal length = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_10te4xm.lua:31: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1660009138
- exit_code: 1
  program: "-- Given a table of non-negative integers, return a colua of the given\
    \ table after sorting,\n-- you will sort the given table in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n    local is_odd = function(array)\n\
    \        if next(array) == nil then return nil end\n        local first, last\
    \ = next(array), next(array)\n        for i = first, last do\n            if i\
    \ ~= last and i % 2 ~= 0 then return false end\n        end\n        return true\n\
    \    end\n    return is_odd and array[#array] or array[#array]:reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkjir_nc.lua:24:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpjkjir_nc.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpjkjir_nc.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009138
