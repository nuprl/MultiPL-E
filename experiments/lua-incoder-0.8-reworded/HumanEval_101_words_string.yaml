name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return a table of the words.\n\
  -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
  \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
  \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = s:gsub(\"%w+\", \" \"):gsub(\"%s+\", \" \")\n  return\
    \ words:gsub(\"(%s+)\", function(c) return c == \"\\n\" ? '' : c end)\nend", " \
    \ s = s:gsub('%w+',':')\n  return s:gsub('%w*',function(c)\n    return table.concat({c})\n\
    \  end)\nend", "  assert(s ~= nil, 'Input string should be non-nil')", "\tlocal\
    \ words = s.split(', ')\n\tfor i = 1, #words do\n\t\twords[i] = words[i]\n\tend\n\
    \treturn words\nend", "  s = s:gsub('[ ,]+', ',')\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub('(^,*)(%b)(%b)(.*$)',\
    \ function(t)\n    return t[2]..' '..t[3]:trim()\n  end)\n  s = s:gsub", "   --\
    \ Split each word and store the result in a table.\n   local words = {}\n   for\
    \ word in string.gmatch(s, ' ') do\n      words[#words + 1] = word\n   end\n \
    \  -- Return the table.\n   return words\nend", "  local function split(s)\n \
    \   local i = 1\n    local table = {}\n    while true do\n      local c, i = getchar(),\
    \ i + 1\n      if c == ',' then table.insert(s, c) end\n      elseif c == ' '\
    \ then\n        table.insert(s, c)\n        table.insert(table, split(s))\n  \
    \    end\n      if i == #s then return table end\n    end\n  end\n  return split(s)\n\
    end", "  -- Split string by space, comma, or semicolon\n  -- Split the string\
    \ into a table\n  -- Create a table of words and add each word to a table\n  --\
    \ Return table\n  local words = s:gsub(\" ,;\", function (c)\n    return string.lower(c)\n\
    \  end):gsub(\"^ \", \"\"):gsub(\" $\", \"\"):gsub(\"^%+%+\", \"\")\n  local tbl\
    \ = {}\n  for word in words:gmatch(\"([^,]+)\") do\n    tbl[word] = tbl[word]\
    \ or {}\n    tbl[word][#tbl[word] + 1]\n  end\n  return tbl\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = string.split(s)\n   \
    \ local new_words = terralib.newlist()\n    for _, word in ipairs(words) do\n\
    \        table.insert(new_words, word)\n    end\n    return new_words\nend", " \
    \   local words = string.split(s, ',')\n    local res = {}\n    for _, word in\
    \ ipairs(words) do\n        res[#res + 1] = {word}\n    end\n    return res\n\
    end", "  local words = {}\n  local last_word\n  local i = 1\n  for word in string.gmatch(s,\
    \ '([^,]*)') do\n    if last_word and last_word ~= word then\n      table.insert(words,\
    \ last_word)\n      last_word = nil\n    end\n    table.insert(words, word)\n\
    \    last_word = word\n  end\n  return words\nend", "   assert(type(s) == 'string',\
    \ 'Argument is not a string')\n   s = string.gsub(s, '[,\\\\s]+', ',')\n   s =\
    \ string.gsub(s, '[\\\\s,]+', ',')\n   local words = { }\n   for word in string.gmatch(s,\
    \ '([^,]+)') do\n      table.insert(words, word)\n   end\n   return words\nend",
  "  return string.gmatch(s, '([^,]+)')\nend", "  return {}\nend", "  local words\
    \ = split(s, ',')\n  local result = {}\n  for i = 1, #words do\n    result[#result\
    \ + 1] = words[i]\n  end\n  return result\nend", "   -- Write your function here\n\
    \   \n   return table.unpack(s:gmatch('([a-z]*(,|\\s|\\.)[a-z]*):(\\\n       \
    \                 [\\1,\\2,\\3]:(\\\n                            [\\4,\\5,\\6,\\\
    7]:(\\\n                                [\\8,\\9,\\10,\\11,\\12]:(\\\n       \
    \                             [\\13,\\14,\\15,\\16,\\17,\\18,\\19,\\20]:(\\\n\
    \                                        [\\21,\\22,\\23,\\24,\\25,\\26,\\27,\\\
    30]:(\\\n                                            [\\31,\\32,\\33\\34\\35\\\
    36,\\37,\\38,\\39,\\40,\\41]:(\\\n                                           \
    \     [\\42,\\43,\\44,\\45,\\46,\\47,\\48,\\49,\\50,\\51]:(\\\n              \
    \                                      [\\52,\\53,\\54\\55\\56\\57,\\58,\\59,\\\
    60,\\61,\\62]:(\\\n                                                        [\\\
    63,\\64,\\65,\\66,\\67,\\68,\\69,\\70,\\71]:(\\\n                            \
    \                                [\\72,\\73,\\74,\\75,\\76,\\77,\\78,\\79,\\80,\\\
    81]:(\\\n                                                                [\\82,\\\
    83,\\84,\\85,\\86,\\87,\\88,\\89,\\90,\\91]:(\\\n                            \
    \                                        [\\92,\\93,\\94,\\95,\\96,\\97,\\98,\\\
    99,\\100,\\101]:(\\\n                                                        \
    \                [\\102,\\103,\\104,\\105,\\106,\\107,\\108,\\109,\\110,\\111]:(\\\
    \n                                                                           \
    \ [\\112,\\113,\\114,\\115,\\116,\\117,\\118,\\119,\\120,\\121,\\122]:(\\\n  \
    \                                                                            \
    \  \\123:([a-zA-Z]+)')))))))))\nend", "  s = string.gsub(s, '[,.]+', ' ')", " \
    \ s = s:gsub('([^A-Za-z0-9_])', \"'\\\\1'\")\n  s = s:gsub('(^|[^A-Za-z0-9_])',\
    \ \"'\\\\1'\")\n  s = s:gsub('([^a-z])', \"'\\\\1'\")\n  s = s:gsub('(^|[^a-z])',\
    \ \"'\\\\1'\")\n  s = s:gsub('(^|[A-Z]|[a-z])([^A-Za-z])', \"'\\\\1\\\\3'\")\n\
    \  s = s:gsub('(^|[A-Z]|[a-z])([^A-Za-z])', \"'\\\\1\\\\2'\")\n  s = s:gsub('(^|[A-Z]|[a-z])([^A-Za-z])',\
    \ \"'\\\\1\\\\3'\")\n  s = s:gsub('(^|[^A-Za-z0-9_])([^A-Za-z0-9_])', \"'\\\\\
    2'\")\n  s = s:gsub('(^|[^A-Za-z0-9_])([^A-Za-z0-9_])', \"'\\\\2'\")\n  s = s:gsub('(^|[^A-Za-z0-9_])([^A-Za-z0-9_])',\
    \ \"'\\\\3'\")\n  s = s:gsub('(^|[^A-Za-z0-9_])([^A-Za-z0-9_])', \"'\\\\3'\")\n\
    \  s = s:gsub('([A-Z])', \"'\\\\1'\")\n  s = s:gsub('([a-z])', \"'\\\\1'\")\n\
    \  s = s:gsub('([A-Z])', \"'\\\\1'\")\n  s = s:gsub('([a-z])', \"'\\\\1'\")\n\
    \  s = s:gsub('([A-Z])', \"'\\\\1'\")\n  s = s:gsub('([a-z])', \"'\\\\1'\")\n\
    \  s = s:gsub('([^A-Za-z0-9_])([A-Z])', \"'\\\\1\\\\2'\")\n  s = s:gsub('([^A-Za-z0-9_])([A-Z])',\
    \ \"'\\\\1\\\\2'\")\n  s = s:gsub('([^A-Za-z0-9_])([A-Z])', \"'\\\\1\\\\3'\")\n\
    \  s = s:gsub('([^A-Za-z0-9_])([A-Z])', \"'\\\\1\\\\4'\")\n  s = s:gsub('([^A-Za-z0-9_])([A-Z])',\
    \ \"'\\\\1\\\\5'\")\n  s = s:gsub('([^A-Za-z0-9_])([A-Z])', \"'\\\\1\\\\6'\")\n\
    \  s = s:gsub('([^A-Za-z0-9_])([A-Z])', \"'\\\\1\\\\7'\")\n  s = s:gsub('([^A-Za-z0-9_])([A-Z])',\
    \ \"'\\\\1\\\\8'\")\n  s = s:gsub('([^", "    local t = {}\n    for word in string.gmatch(s,\
    \ '[,;]') do\n        table.insert(t, word)\n    end\n    return t\nend", "\t\
    local tbl = {}\n\tfor w in s:gmatch(\"[^,]+\") do tbl[#tbl + 1]=w end\n\treturn\
    \ tbl\nend", "  -- Write your implementation here.\n  return {}\nend", "   local\
    \ words = string.gmatch(s, '([^,]+)')\n   return setmetatable(words, {__index\
    \ = function() return words end})\nend", "\t-- Your code here!\nend", "  -- Write\
    \ your code here!\n  local token = {}\n  local str_list = s:gsub(\"([^,]+),?\"\
    , function (x)\n    token[#token+1] = x\n    \n  end)\n  str_list = str_list:gsub(\"\
    ^%s*(.+)\", function (x)\n    token[#token+1] = x\n    \n  end)\n  \n  return\
    \ token\nend\nprint(words_string('One, two, three, four, five, six'))\nprint(words_string('Hi,\
    \ my name is John'))\nprint(words_string('Hi, my name is John,'))\nprint(words_string('Hi,\
    \ my name is John,,'))\nprint(words_string('Hi, my name is John,,,,'))\nprint(words_string('Hi,\
    \ my name is John,,,,,,,,'))\n</cell>\n<text>\nPart C - Counting vowels, consonants,\
    \ and other symbols\nPart C requires you to do the following:", "\t-- Write your\
    \ implementation here.\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ \"([^,]+)\") do table.insert(words, w) end\n  return words\nend", "  return\
    \ setmetatable({},{__index=function(t,i)\n    local x = {}\n    for w in s:gmatch(\"\
    %w+\") do table.insert(x,w) end\n    return x\n  end})\nend", "  return {}\nend",
  "    local t = {}\n    for w in string.gmatch(s, \",?(%w+)\") do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend", "    -- Your code here\nend", "\t-- Return\
    \ an empty table\n\tif s == nil then\n\t\treturn {}\n\tend\n\t\n\t-- Return a\
    \ table of words from the string\n\treturn s:gmatch('%w+')\nend", "  assert(type(s)\
    \ ~= 'string')\n  assert(type(s) ~= 'table')", "  local result = {}\n  s = string.gsub(s,\
    \ \"[%^,]\", \"\")\n  for w in string.gmatch(s, \"([^,]+)\") do\n    result[#result+1]\
    \ = w\n  end\n  return result\nend", "  assert(type(s) ~= 'string', 'Input must\
    \ be a string')\n  return s:gsub('([%s]+)' % ','..' ', ''):gsub(' ', ',')\n  \
    \    :gsub(',{2,}', ' ')\n      :gsub(',%s*$', '')\n      :gsub(',%s*,', ' ')\n\
    \      :gsub('[%s]+', ' ')\n      :gsub('(%s+)', ' ')\n      :gsub('%s+', ' ')\n\
    \      :gsub('%s*([%z]+)', '%d+')\n      :gsub('([%z]+)', '%d+')\n      :gsub('%s+',\
    \ ' ')\n      :gsub('(%s*)', ' ')\n      :gsub('(%s)', ' ')\n      :gsub('([%d]+)',\
    \ '%d+')\n      :gsub('(%s)', ' ')\n      :gsub('(%z)', '%d+')\n      :gsub('([%d]+),(%d+)',\
    \ '%d+')\n      :gsub('([%d]+),%s+', '%d+')\n      :gsub('(%d+)%s+', '%d+')\n\
    \      :gsub('%s+,', ' ')\n      :gsub('(%z)', '%d+')\n      :gsub('(%z)%s+',\
    \ '%d+')\n      :gsub('(%z)%s+', '%d+')\n      :gsub('%s+,', ' ')\n      :gsub('([%z]+),',\
    \ '%d+')\n      :gsub('([%z]+)%s+', '%d+')\n      :gsub('(%z)%s+', '%d+')\n  \
    \    :gsub('(%z)%s+', '%d+')\n      :gsub('%s+,', ' ')\n      :gsub('(%z),', '%d+')\n\
    \      :gsub('(%z)%s+', '%d+')\n      :gsub('%s+,', ' ')\n      :gsub('(%z),',\
    \ '%d+')\n      :gsub('(%z)%s+', '%d+')\n      :gsub('(%z)%s+', '%d+')\n     \
    \ :gsub('%s+,', ' ')\n      :gsub('([%z]+),', '%d+')\n      :gsub('([%z]+)%s+',\
    \ '%d+')\n      :gsub", "    local words = s:gmatch('([^,]+)')\n    return words\n\
    end", "\ts = string.gsub(s, \"[%c]+\", ' ');\n\ts = s:gsub(\"([^,]+)\", ' ');\n\
    \ts = s:gsub(\"^[ ]\", \"\");\n\ts = s:gsub(\"[ ]+$\", \"\");\n\treturn string.gsub(s,\
    \ \"[ ]+\", ',');\nend", "  -- Your code here\n  local words = string.gsub(s,\
    \ '[^a-zA-Z0-9 ]+', '')\n  words = string.gsub(words, ',', ' ')\n  return words\n\
    end", "  assert(type(s) ~= 'string')\n  return {}\nend", "\tlocal words = {}\n\
    \tfor _, word in string.gmatch(s, '([^,]+) ') do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend", "    local words = cjson.decode(s):gmatch('([^,]+)')\n\
    \    return words\nend", "  s = string.gsub(s, '[^a-zA-Z0-9]+', '')\n  s = string.gsub(s,\
    \ '[,.]+', ',')\n  return string.gsub(s, '[,]+', ' ')\nend", "  -- Write your\
    \ implementation here.\n  return nil\nend", "  return string.gmatch(s, '([^,]+)',\
    \ 1, '%w') -- Split string\nend", "  -- Your code here!\nend", "  -- Return table\
    \ with empty values\n  local t = {}\n  for w in s:gmatch(\"([^,]+)?,*\") do t[#t+1]\
    \ = w end\n  return t\nend", "    local words = s:gsub(' ', ''):match('%w+')\n\
    \    return words\nend", "  -- Split the string into words.\n  local words = string.gsub(s,',\
    \ *','')\n  -- Split the words into table.\n  local wordtable = string.gsub(words,'\
    \ ','\\n')\n  -- Return the table.\n  return wordtable\nend", "  local words =\
    \ {}\n  s = s.gsub(\"([^,]+)\", function (n)\n    words[#words + 1] = n\n  end)\n\
    \  return words\nend", "    local word_table = {}\n    for w in s:gmatch(\"[^,]+\"\
    ) do\n        word_table[#word_table + 1] = tostring(w)\n    end\n    return word_table\n\
    end", "  local words = string.gmatch(s, '%w+')\n  if words == nil then\n    words\
    \ = {}\n  end\n  return words\nend", "  -- Split string into individual words\
    \ separated by spaces.\n  local result = {}\n  for s in string.gmatch(s, '([^,]+)\
    \ ?') do\n    result[#result + 1] = s\n  end\n  return result\nend", "\tlocal\
    \ str = {}\n\tstring.gsub(s, '[%w ]+', function(x)\n\t\ttable.insert(str, x)\n\
    \tend)\n\treturn str\nend", "  local words = string.gmatch(s, \"([^,]+)\") --\
    \ split the string into words\n  return { words = words[1], table.concat(words[#words])\
    \ } -- concat them back together\nend", "  -- Split the string on commas and spaces.\n\
    \  -- See [http://lua-users.org/wiki/PatternsTutorial](http://lua-users.org/wiki/PatternsTutorial)\n\
    \  -- See [http://www.lua.org/pil/14.2.1.html](http://www.lua.org/pil/14.2.1.html)\
    \ for more\n  -- information about string patterns in Lua.\n  -- See [http://www.lua.org/pil/14.2.2.html](http://www.lua.org/pil/14.2.2.html)\
    \ for more\n  -- about [Patterns](http://www.lua.org/pil/14.2.1.html) and [Patterns](http://www.lua.org/pil/14.2.2.html).\n\
    \  return string.gmatch(s, '([^,]+)') -- Splits the string on commas and spaces.\n\
    end", "  return {}\nend", "  local words = { }\n  for word in s:gmatch(\"%w+\"\
    ) do\n    table.insert(words, word)\n  end\n  return words\nend", "  local result\
    \ = {}\n  for word in string.gmatch(s, '([^,]+)', \"i\") do\n    table.insert(result,\
    \ word)\n  end\n  return result\nend", "  -- Your code here!\n  local splitted\
    \ = string.gmatch(s, \".*,\")\n  local dict = {}\n  for _, value in ipairs(splitted)\
    \ do\n    dict[#dict + 1] = value\n  end\n  return dict\nend", "  assert(s ~=\
    \ '')\n  local words = string.gmatch(s, '([^,]+)') -- Returns a table of all the\
    \ words\n  assert(words[1] == nil) -- The first word is always the empty string\n\
    \  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n  if #words\
    \ == 0 then\n    words = string.gmatch(s, '([^ ]+)')\n  end\n  return words\n\
    end", "  local t = {}\n  for i = 1, #s do\n    t[#t+1] = s[i]\n  end\n  return\
    \ t\nend", "  local words = string.gmatch(s, '[^,]+') -- Split string into array\
    \ of words\n  local words_list = {}\n  for i = 0, #words do\n    words_list[i]\
    \ = words[i]\n  end\n  return words_list\nend\n</cell>\n<text>\nRun the following\
    \ cell to test your code:", "  local words = string.gmatch(s, ',[ ]*[%z%s]*')\n\
    \  assert(#words == #s or #words == 0, 'Invalid string')\n  return words\nend",
  "  -- Write your function here\nend", "  -- Write your code here!\n  local words\
    \ = s.split(\" \")\n  local table = {}\n  for i = 1, #words do\n    table[i] =\
    \ words[i]\n  end\n  return table\nend", "  -- The words function should handle\
    \ a nil input and return a table of the empty string.\n  if s == nil then return\
    \ {''}\n  else\n    local function words(s)\n      local words = {}\n      local\
    \ index = 1\n      local delim = ', '\n      while true do\n        local _, c\
    \ = s:find(delim)\n        if not c then break end\n        words = words or {}\n\
    \        words[index] = s:sub(1, c)\n        s = s:sub(c+2)\n        index = index\
    \ + 1\n      end\n      return words\n    end\n    return words(s)\n  end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis code returns nil if no match is found. `words_string('One,\
    \ two, three, four, five, six')` returns `nil`.\n<|/ c |>\n<| a |>\nA short and\
    \ concise answer is\n<code>", "    local result = {}\n    for word in string.gmatch(s,\
    \ '([^ ]+) *') do\n        table.insert(result, word)\n    end\n    return result\n\
    end", "  local words = { }\n  for _, v in gmatch(s, '([^,]+)', 1, 'g') do\n  \
    \  table.insert(words, v)\n  end\n  return words\nend", "  local words = s:gmatch('([^,]+)(,?)(.*)')\n\
    \  return table.remove_by_ref(words, 1)\nend\nwords_string.description = \"Split\
    \ the string into words and return them\"", "  if s == nil then\n    return {}\n\
    \  end", "  s = string.gsub(s, \"[, ]+\", \" \")\n  local words = string.gmatch(s,\
    \ \"([^ ]+)\")\n  return words\nend", "    local ws = { }\n    local w = ''\n\
    \    for word in string.gmatch(s, ',') do\n        word = string.gsub(word, '^%s+',\
    \ '') -- remove leading space\n        word = string.gsub(word, '%s+$', '') --\
    \ remove trailing space\n        table.insert(ws, word)\n    end\n    return ws\n\
    end", "  local words = {}\n  local delim = ','\n  for _ in string.gmatch(s, '%S+')\
    \ do\n    table.insert(words, _)\n  end\n  if string.find(s, delim) == 1 then\n\
    \    delim = ' '\n  end\n  for _ in string.gmatch(s, ('[^' .. delim .. ']+'))\
    \ do\n    table.insert(words, _)\n  end\n  return words\nend", "   -- Write your\
    \ solution here\nend", "  local words = s:gmatch('([%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^%s]+)'):gmatch('([^",
  "  local words = { }\n  for w in string.gmatch(s, '[,%s]+') do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "\tlocal words = s:gmatch(\"[%w\\s]+\")\n\t\
    local ret = {}\n\tfor _, word in pairs(words) do\n\t\ttable.insert(ret, word)\n\
    \tend\n\treturn ret\nend", "  local words = s:match('^%w+,?[\\n\\r]') -- match\
    \ at least one word and capture everything before comma\n  if words == nil then\
    \ return nil end\n  return words:gsub('([^,]+),?', function(w) return w:gsub(',+',\
    \ '') end)\nend", "  local tbl = {}\n  for w in string.gmatch(s, \",?\") do tbl[#tbl+1]\
    \ = w end\n  return tbl\nend", "    local words = string.split(s, '%w+')\n   \
    \ local index = 1\n    local table = {}\n    while true do\n        table.insert(table,\
    \ words[index])\n        local _, next = string.find(s, ',', index)\n        if\
    \ next == nil then\n            break\n        end\n        index = next + 1\n\
    \    end\n    return table\nend", "  assert(type(s) == 'string')\n  s = s:gsub('[\
    \ ,]+', ' ')\n  return s:gsub('([^a-z ])', \"'\\\\1'\"):gsub('([^a-z])', \"'\\\
    1'\")\nend", "  -- Your code here\nend", "  local words = s:gsub(\"([^ ,]+)\"\
    , function (x)\n    table.insert(words, x)\n  end)\n  table.sort(words)\n  return\
    \ words\nend", "\t-- Only change code below this line\n\t-- This may require additional\
    \ code that you have to finish\n\t-- --------------------------------------------------------------\n\
    \t-- Note: The code you submit as part of this exercise may not be\n\t-- exactly\
    \ like this example. Don't worry if you're struggling or\n\t-- -- have trouble\
    \ understanding it.\n\t-- Write your code here!\n\t-- --------------------------------------------------------------\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\treturn words\nend", "  -- Note: This pattern does\
    \ not use grouping or non-capturing groups\n  -- to keep the answer simple and\
    \ fast\n  -- We are looking for one or more occurrences of one or more letters\n\
    \  -- preceded by a space or comma\n  local words = { }\n  for word in s:gmatch('([,%s]+)')\
    \ do\n    -- We use gmatch here to get the whole word\n    -- If there is more\
    \ than one occurrence it will be saved in the first index of the array\n    --\
    \ We then remove that index by doing an array_remove\n    words = array_remove(words,\
    \ 1, word)\n  end\n  return words\nend", "  local t = {}\n  for w in string.gmatch(s,\
    \ '%w+') do\n    table.insert(t, w)\n  end\n  return t\nend", "  return { _G._split(s)\
    \ }\nend", "\tlocal t = (s == '' or\n\t\ts ~= nil and string.gsub(s, '[,.]+',\
    \ function(a) return a end)\n\t)\n\tif t then\n\t\treturn t\n\tend", "    -- Remove\
    \ leading and trailing whitespace.\n    s = string.gsub(s, '^%s*', '')\n    s\
    \ = string.gsub(s, '%s*$', '')\n    s = string.gsub(s, '%s, %s', '%s+')", "  local\
    \ words = {}\n  local words = split(s, ',')\n  for i = 1, #words do\n    table.insert(words,\
    \ words[i])\n  end\n  return words\nend", "  -- Write your logic here\n  local\
    \ words = { }\n  for _, _, v in string.gmatch(s, \",(%w+)\") do\n    table.insert(words,\
    \ v)\n  end\n  return words\nend", "  -- Write your function here (without modifying\
    \ the input string s)\n  \n  local words = {}\n  \n  local index = 1\n  \n  while\
    \ (true do\n    local letter = string.sub(s, index, index)\n    if letter ~= \"\
    ,\" and letter ~= \" \" then\n      index = index + 1\n      table.insert(words,\
    \ letter)\n    elseif letter == \",\" then\n      index = index + 1\n      if\
    \ not index then\n        break\n      else\n        table.insert(words, \"\"\
    )\n      end\n    elseif letter == \" \" then\n      index = index + 1\n     \
    \ if not index then\n        break\n      else\n        table.insert(words, \"\
    \")\n      end\n    end\n  end)\n  \n  return words\nend", "  -- Split by commas\
    \ or spaces.\n  local words = string.gmatch(s, '.+?(,|$)')\n  -- Return a table\
    \ of words.\n  return setmetatable(words, {__mode = 'kv'})\nend", "  local words\
    \ = string.gmatch(s, '[^,]+')\n  if words then\n    table.sort(words)\n  else\n\
    \    words = {}\n  end\n  return words\nend", "  local words = nil\n  for w in\
    \ s:gmatch('(%w+)(%w+)') do\n    words = words or {}\n    table.insert(words,\
    \ w[1])\n    table.insert(words, w[2])\n  end\n  return words\nend", "\t-- Initialize\
    \ a table of words.\n\tlocal words = {}", "  -- TODO\nend", '  local words = {
    }', "  local words = string.gsub(s, '[^a-zA-Z0-9]+', '') -- Remove punctuation\n\
    \  local words = string.gsub(words, '\\s+', '') -- Replace multiple whitespaces\
    \ with single whitespace\n  local words = string.gsub(words, '%+{2,}', '') --\
    \ Remove double whitespace\n  words = words:gsub(',+', ',') -- Join commas\n \
    \ return words:gsub(',+$', '') -- Strip trailing commas\nend", "  local words\
    \ = { }\n  s = s:gsub(',', ' ', 'g')\n  s:gsub(' ', '', 'g')\n  s:gsub('[^ ]+',\
    \ function ()\n    table.insert(words, string.sub(argument, 2))\n  end)\n  return\
    \ words\nend", "  local words = s:gsub('([,.])', function(c) return c == '.' ?\
    \ '' : c:lower() end)\n  words = words:gsub('%w+', function(w) return w:gsub('%u+',\
    \ function(c) return string.char(tonumber(c, 16)) end) end)\n  return table.concat(words:gmatch('%w+')))\n\
    end", "  local words = string.gmatch(s, '(%a+)()')\n  if words == nil then\n \
    \   return nil\n  end\n  -- Remove empty elements from the list\n  table.sort(words)\
    \ -- Sort words alphabetically\n  words[1] = words[1] .. '()'\n  return words\n\
    end\n</code>\nAnd then you would use it as follows:\n<code>", "  local words =\
    \ {}\n  while true do\n    local word = s:match('[^,]+')\n    if word then\n \
    \     table.insert(words, word)\n    end\n    if s == '' then break end\n    s\
    \ = s:gsub(',$', '')\n  end\n  return words\nend", "  s = string.gsub(s, '[%[(]',\
    \ '')\n  s = string.gsub(s, '[%)]]', '')\n  s = string.gsub(s, '[%[%]', ' ')\n\
    \  s = string.gsub(s, '[%]%', ' ')\n  return string.gsub(s, '[,%]', ' ')\nend",
  "  -- Your code here\n  \nend", "  local result = {}\n  for _ in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(result, string.sub(_, 1, string.len))\n  end\n\
    \  return result\nend", "  local w = {}\n  for _, word in string.gmatch(s, ',+')\
    \ do\n    w[#w + 1] = word\n  end\n  return w\nend", "  -- Initialize a new table\
    \ that will hold words.\n  local words = {}", "  -- Initialize local variables.\n\
    \  local words = {}\n  -- Split the given string into words.\n  for w in string.gmatch(s,\
    \ '([^,]+)') do table.insert(words, w) end\n  -- Return the words table.\n  return\
    \ words\nend", "  local words = { }\n  for w in string.gmatch(s, ',?([^,]*)')\
    \ do\n    table.insert(words, w)\n  end\n  for w in string.gmatch(s, ' ') do\n\
    \    table.insert(words, w)\n  end\n  return words\nend", "  local t = {}\n  for\
    \ word in string.gmatch(s, '([^,]+) ') do\n    table.insert(t, word)\n  end\n\
    \  return t\nend", "    local words = string.split(s, '[^%s]+')\n    for i, word\
    \ in ipairs(words) do\n        words[i] = word:lower()\n    end\n    return words\n\
    end", "   local w, table = {}, {}\n   for word in string.gmatch(s, '[^,]+') do\n\
    \      w = w or {}\n      table.insert(w, word)\n   end\n   return table\nend",
  "  local words = {}\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local t = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    t[#t+1] = word\n  end\n  return t\nend", "   s = string.gsub(s,\
    \ ',', ' ')\n   s = string.gsub(s, ' ', '\\n')\n   local words = string.gmatch(s,\
    \ '([^,]+)') -- Split the string on commas.\n   if #words < 1 then\n      return\
    \ {}\n   end\n   local result = {}\n   for i, word in ipairs(words) do\n     \
    \ result[i] = word\n   end\n   return result\nend", "    local t = {}\n    for\
    \ w in string.gmatch(s, \"([^,]*)\") do\n        table.insert(t, w)\n    end\n\
    \    return t\nend\n</cell>\n<text>\nWrite a function called count_words that\
    \ takes a string as its argument, and returns a table\nof the counts of how many\
    \ times each word appears in that string.\nThe function should work like so:",
  "  local words = {}\n  for _, word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.split(s, ', ')\n\
    \  for _, word in ipairs(words) do\n    words[#words + 1] = word\n  end\n  return\
    \ words\nend", "\tlocal words = string.gmatch(s, \".-\"):gsub(\"^%s*(.-)%s*$\"\
    , \"%1\")\n\treturn words or {}\nend", "  -- Your code here!\n  local words_table\
    \ = {}\n  for word in string.gmatch(s, '([^,]+)')do\n    table.insert(words_table,\
    \ word)\n  end\n  return words_table\nend", "    local words = {}\n    local words\
    \ = s:gsub('([^,]+)(%S+)', function (word, token)\n        words[#words + 1] \
    \ = word\n    end)\n    return words\nend", "  -- Return an empty table if an\
    \ empty string is passed.\n  if not s then return end\n  -- Return the table of\
    \ words if no commas or spaces are found.\n  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)($|,|$)') do table.insert(words, w) end\n  return words\nend", "  assert(type(s)\
    \ ~= 'string')\n  local words = { }\n  for word in string.gmatch(s, '[^,]+') do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  return s:gsub(\"\
    [^a-zA-Z ]\", function (x)\n    return string.lower(x)\n  end)\nend\nreturn words_string\n\
    end", "  local t   = {}\n  local c   = 1", "  return table.pack(unpack(s:gmatch(\"\
    %w+\")), unpack(s:gmatch(\"%w+,%w+\")))\nend", "    local words, i, word = {},\
    \ {}, {}\n    local function push()\n        table.insert(words, table.concat(word))\n\
    \        table.insert(i, 0)\n    end\n    for w in s:gmatch(\"%w+\") do\n    \
    \    table.insert(word, w)\n    end\n    table.sort(word)\n    local n = #word\n\
    \    for i = 1, n do\n        push()\n    end\n    return table.concat(words)\n\
    end\n</cell>\n<cell>", "  -- YOUR CODE HERE\n  return s\nend", "\t-- Split string\
    \ into words by comma space.\n\ts = string.gsub(s, \"[, ]\", \"\")\n\t-- Split\
    \ words by spaces.\n\ts = string.gsub(s, \" \", \"\")\n\t-- Remove leading space.\n\
    \ts = string.gsub(s, \"^%s\", \"\")\n\t-- Remove trailing space.\n\ts = string.gsub(s,\
    \ \"%s$\", \"\")\n\t-- Convert multiple spaces to one space.\n\ts = string.gsub(s,\
    \ \"[  ]+\", \" \")\n\t-- Split the words into an array.\n\treturn string.gsub(s,\
    \ \"[,]\", function (x)\n\t\treturn x:gsub(\"%%\", \"%%%0\")\n\tend)\nend", " \
    \ local w = {}\n  for s in string.gmatch(s, '([^,]+)', 1) do table.insert(w, s)\
    \ end\n  return w\nend", "    -- Handle empty string\n    if s == '' then\n  \
    \      return {s}\n    end", "  if s == nil then\n    return nil\n  end\n  local\
    \ words = { }\n  local words = s:gmatch(\"(%S+)\")\n  if words then\n    for _,\
    \ v in pairs(words) do\n      words[#words+1] = v\n    end\n  end\n  return words\n\
    end", "  -- Write your implementation here.\n  return {}\nend", "\t-- Your code\
    \ here\nend", "  assert(type(s) == 'string')\n  local words = s:gmatch('[^,]+')\n\
    \  assert(#words > 0)\n  return words\nend", "    -- Your code here\nend", " \
    \ local w = {}\n  for w in string.gmatch(s, \"([^,]+), ?\") do\n    w = w:gsub(\"\
    ,+\", \" \")\n  end\n  return w\nend", "    -- Remove any extra spaces from the\
    \ string\n    s = string.gsub(s, \" \", \"\")", "    local words = {}\n    for\
    \ word in string.gmatch(s, \"([^,]+)\") do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "    local words = { }\n    local tokens = string.gmatch(s,\
    \ '.-') -- Split on single dots\n    for _, v in pairs(tokens) do\n        v =\
    \ string.gsub(v, '^%s+', '') -- remove leading space\n        table.insert(words,\
    \ v)\n    end\n    return words\nend", "  return { }\nend", "  assert(type(s)\
    \ ~= 'string')\n  assert(type(s) == 'table')\n  -- Return the words from the input\
    \ string in alphabetical order.\n  return setmetatable({ _words = s }, { __index\
    \ = words })\nend", "  local words = s:gsub('([^' .. string.split(string.upper(s))[1]\
    \ .. string.upper(s))',\n                       '%%%1'):gsub('%%%1([^' .. string.split(string.upper(s))[1]\
    \ .. string.upper(s))', '%%%1 %%%2'):gsub('%%%2 %%%1',\n                     \
    \                                                                            \
    \          '%%%1'):gsub('%%%1 %%%2',\n                                       \
    \                                                                            \
    \        '%%%1')\n  return { words = words }\nend", "\ts = string.gsub(s, '[,;:]',\
    \ ' ')", "\tlocal t = {}\n\tfor w in string.gmatch(s, '[^ ]+') do\n\t\ttable.insert(t,\
    \ w)\n\tend\n\treturn t\nend", "  -- Write your function here\nend", "   local\
    \ words = s:gmatch(\"%w+|[^,]+\")\n   return table.sort((words or {}))\nend",
  "  local words = nil\n  -- Your code goes here\n  words = string.gmatch(s, '(%w+)')\
    \ -- Your code goes here\n  return words\nend", "  local words = nil\n  if s:sub(1,\
    \ 1):find(',') then\n    words = s:sub(1, -2)\n  else\n    words = s\n  end\n\
    \  local words_list = {}\n  for w in string.gmatch(words, '([^,]+)'..',') do\n\
    \    table.insert(words_list, w)\n  end\n  return words_list\nend", "  return\
    \ { }\nend", "  assert(type(s) ~= 'string')\n  assert(s:match(', ') or s:match(',\
    \ ') or s:match(' '))\n  local words = {}\n  for word in s:gmatch('([^,]*)') do\
    \ table.insert(words, word) end\n  return words\nend", "   if s == nil then return\
    \ end\n   s = string.gsub(s, '[, ]+', ' ', 1)\n   return string.gmatch(s, '(%w+)')\
    \ end\n   \n   ", "  return function()\n    local word_table = {}\n    for w in\
    \ string.gmatch(s, '(%w+),?') do\n      word_table[#word_table + 1] = w\n    end\n\
    \    return word_table\n  end\nend", "    local words = { }\n    for s in string.gmatch(s,\
    \ '[^,]+') do\n        table.insert(words, s)\n    end\n    return words\nend",
  "  return s..split(',')\nend", "  local words = s:gmatch(\"([^,]+)\") -- split on\
    \ commas\n  return setmetatable(words, { __index = function(t, w)\n    local newword\
    \ = w:gsub(\"%W\",'')\n    if words[newword] then -- if there is a duplicate in\
    \ the table, append a number to the end of the word\n      while words[newword]\
    \ do -- keep appending unique words\n        newword = newword .. \"_\" .. words[newword]\n\
    \      end\n    end\n    words[newword] = w\n    return newword\n  end})\nend",
  "  if s == nil then\n    return {}\n  else\n    local words = s:match('[^,]+')\n\
    \    if words then\n      return words\n    else\n      return {}\n    end\n \
    \ end\nend", "  local words = { }\n  s:gsub('([%a\xD1%A\xF1%n%o\xD1%O\xF1%n%I%u%y%U%y%a%A%o%O%I%u%y%U%y]+)\
    \ *', '%1, '):gsub(',{2,}', ', '):gsub(' +', ' ', s)\n  return words\nend", " \
    \ local words = { }\n  for w in string.gmatch(s, '([^,]+)?([^,]+)?([^,]+)?') do\n\
    \    table.insert(words, w)\n  end\n  return words\nend", "  local words = {}\n\
    \  for w in string.gmatch(s, '[^,]+') do\n    table.insert(words, string.lower(w))\n\
    \  end\n  return words\nend", "    local words = {}\n    for w in s:gmatch('[^,]+')\
    \ do\n        table.insert(words, w)\n    end\n    return words\nend", "\tlocal\
    \ result = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tresult[#result + 1] = tostring(word)\n\
    \tend\n\treturn result\nend", "  local words  = {}\n  for word in string.gmatch(s,\
    \ '([^,]+)') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in s:gmatch('[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  s = s:gsub(',', ' ', 'g')\n  s = s:gsub('\
    \ +', ' ', 'g')\n  return s:trim():gmatch('(%S+)') end", "  -- initialize an empty\
    \ table\n  local table = {}\n  \n  -- split each word in the string by commas\
    \ or spaces\n  for word in string.gmatch(s, '[^ ,]+') do\n    -- append each word\
    \ to the table\n    table.insert(table, word)\n  end\n  \n  return table\nend",
  "    local words, rest = s:match('([^,]*)')\n    return table.remove({words = words\
    \ or '', rest = rest, words = words or ''}, 1)\nend", "  -- Write your function\
    \ here!\nend", "  s = string.gsub(s, \"%w+\", \" \")\n  return table.concat(string.gmatch(s,\
    \ \"(%w+)\"))\nend", "  local w = {}\n  for w in string.gmatch(s, '([^,]+)(,|$)')\
    \ do\n    w[#w + 1] = tostring(w)\n  end\n  return w\nend", "  local words = {\
    \ }\n  for w in string.gmatch(s, '%w+') do\n    table.insert(words, w)\n  end\n\
    \  return words\nend", "    local w = {}\n    for w in string.gmatch(s, \",?([^,]*)\"\
    ) do\n        w[#w+1] = w\n    end\n    return w\nend", "   -- This version returns\
    \ table of strings\n   -- return s.split(', ')\n   -- This version returns table\
    \ of integers\n   return s.gsub('[^' .. string.gsub(',', '[^,]+', '') .. ']',\
    \ '').gsub(',+', ' ').gsub(' ,+', ' ')\nend", "  s = string.gsub(s, \", \", \"\
    \ \")\n  s = string.gsub(s, \"\\n\", \" \")\n  s = string.gsub(s, \"[%z\\%-]\"\
    , \"\")\n  local words = {}\n  for word in string.gmatch(s, \"[^ ]+\") do\n  \
    \  table.insert(words, word)\n  end\n  return words\nend", "  return s:gsub('%w',\
    \ string.lower):gsub(',', ' '):gsub(' %.$', '')\nend", "  local words = { }\n\
    \  local w = nil\n  for w in string.gmatch(s, '([^,]+?)') do table.insert(words,\
    \ w) end\n  return words\nend", "    local w = {}\n    s:gsub(' ', function(a)\n\
    \        table.insert(w, a)\n    end)\n    return w\nend\n</cell>\n<cell>", " \
    \ local words\n  local sep\n  sep = (s == nil) and ' ' or s\n  words = string.gmatch(s,\
    \ '([^'..sep..']+)') -- match all words except separator\n  -- if there's only\
    \ one word, then replace it with empty string\n  if #words <= 1 then\n    words\
    \ = {''}\n  else\n    table.sort(words) -- sort the words\n  end\n  return words\n\
    end", "  -- Your code here\n  return nil\nend", "  local words = { }\n  for word\
    \ in string.gmatch(s, \",(%S+)\") do table.insert(words, word) end\n  return words\n\
    end", "  local words\n  \n  -- This first line is an idiom. We'll be modifying\
    \ words to add words.\n  words = { }\n  \n  -- Now we'll iterate through every\
    \ character in the string.\n  for i = 1, #s do\n    -- This line is the only change\
    \ from what you were doing.\n    table.insert(words, string.sub(s,i,i))\n  end\n\
    \  \n  return words\nend", "\tlocal result = {}\n\tfor s in string.gmatch(s, '([^,]+)',\
    \ nil) do\n\t\ttable.insert(result, s)\n\tend\n\treturn result\nend", "  local\
    \ words, _, wordpos = split(s, '[,]')\n  local result = {}\n  for _, v in pairs(words)\
    \ do\n    if wordpos == 0 then\n      table.insert(result, v)\n    else\n    \
    \  table.insert(result, words[wordpos])\n    end\n  end\n  return result\nend",
  "  -- Remove whitespace and split string into words.\n  local words = {}\n  for\
    \ w in string.gmatch(s, '[^,]+') do\n    table.insert(words, w)\n  end", "  s\
    \ = s:gsub('%w+', function(w) return w end)\n  s = s:gsub('%d+', function(d) return\
    \ tonumber(d) end)\n  s = s:gsub('%w+', string)\n  return s:gmatch('(%S+)[^,]+')\n\
    end", "  -- Remove commas and spaces from string s\n  s = s:gsub(',+', ''):gsub('\
    \ ', '');", "    local words = s:gsub(\"([^,]+)\", \" \")\n    words = words and\
    \ words:gsub(\"(%w+%d)\", function(w)\n        return w:gsub(\"%w\", function(w)\n\
    \            return w\n        end)\n    end)\n    return words or {}\nend", " \
    \ -- TODO: Write your code in terms of string.split\n  return {}\nend", "  --\
    \ TODO: Your code here\nend\n</cell>\n<text>\nExercise 3\nWrite a function definition\
    \ called word_counts that accepts a string as input and returns a table\nwhere\
    \ the keys of the table are the words and the values are the number of times the\
    \ word occurs in the string.\nFor example, given the input string 'Hello, my name\
    \ is John', your function should return the following table:\n{'Hello': 1, 'my':\
    \ 1, 'is': 1, 'name': 2, 'John': 1}\nHint: You may want to use the split() function\
    \ from the string library to help you split your string by words.", "  local table\
    \ = {}\n  local words = string.gmatch(s, '.-?([^%s]+)') -- match a series of non-space\
    \ characters and put it into a table\n  for i = 1, #words do\n    table.insert(table,\
    \ words[i])\n  end\n  return table\nend", "  local result = {}\n  for w in string.gmatch(s,\
    \ '(%S+)') do\n    table.insert(result, w)\n  end\n  return result\nend", "  \
    \  local words = { }\n    for word in string.gmatch(s, \"[%w'-]+\") do\n     \
    \   table.insert(words, word)\n    end\n    return words\nend", "  s = string.gsub(s,\
    \ '%s+', function(c) return c; end)\n  s = string.gsub(s, '([^%s]+)', function(c)\
    \ return '<UNK>'; end)\n  s = string.gsub(s, '%s', function(c) return c; end)\n\
    \  s = string.gsub(s, '<UNK>', function(c) return c; end)\n  local words = { }\n\
    \  for i = 1, #s do\n    table.insert(words, string.sub(s,i,i))\n  end\n  return\
    \ words\nend", "    local words = s.split(\",\")\n    local result = {}\n    for\
    \ i=1,#words do\n        result[#result + 1] = words[i]\n    end\n    return result\n\
    end", "\t-- Initialize table of words\n\tlocal words = {}\n\t-- Initialize counter\n\
    \tlocal counter = 0\n\t-- Split words based on space\n\tfor word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n\t\t-- Append word to list\n\t\twords[counter] = word\n\t\t\
    -- Increment counter\n\t\tcounter = counter + 1\n\tend\n\t-- Return table\n\t\
    return words\nend", "  assert(type(s) == 'string', 'Expected a string')\n  assert(s:match('(^|,)%s*(,|$)')\
    \ ~= nil, 'String does not contain commas')\n  -- Split the string into words\n\
    \  local words = s:gsub('(^|,)%s*(,|$)','%1,%2')\n  -- Split the words into pairs\n\
    \  return words:gsub('([^,]+)','%1,%2'):gsub('(^,)','%1,'):gsub('(,$)','%1,')\n\
    end", "  local w = {}\n  for _, str in ipairs(s:gmatch('[^,]+')) do\n    table.insert(w,\
    \ str)\n  end\n  return w\nend", "  assert(type(s) == 'string')\n  return string.gmatch(s,\
    \ '([^,]+)')\nend\n</cell>\n<text>\nTests"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
