name: HumanEval_142_sum_squares
language: lua
prompt: "-- \"\n-- This function will take a table of integers. For all entries in\
  \ the table, the function shall square the integer entry if its index is a \n--\
  \ multiple of 3 and will cube the integer entry if its index is a multiple of 4\
  \ and not a multiple of 3. The function will not \n-- change the entries in the\
  \ table whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n-- Examples:\n-- >>> lst\n-- {1, 2, 3}\n-- >>> lst\n\
  -- {}\n-- >>> lst\n-- {-1, -5, 2, -1, -5}\nlocal function sum_squares(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({1,\
  \ 4, 9}), 14)\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({1,\
  \ 1, 1, 1, 1, 1, 1, 1, 1}), 9)\n    lu.assertEquals(candidate({-1, -1, -1, -1, -1,\
  \ -1, -1, -1, -1}), -3)\n    lu.assertEquals(candidate({0}), 0)\n    lu.assertEquals(candidate({-1,\
  \ -5, 2, -1, -5}), -126)\n    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)\n\
  \    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)\n    lu.assertEquals(candidate({-16,\
  \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)\n    lu.assertEquals(candidate({-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
  \ -1448)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for i = 1, #lst do\n        local value = lst[i]\n\
    \        if i%3 == 0 and i%4 == 0 then\n            sum = (sum + value) ^ 3\n\
    \        elseif i%3 == 0 then\n            sum = (sum + value) ^ 3\n        elseif\
    \ i%4 == 0 then\n            sum = (sum + value) ^ 4\n        else\n         \
    \   sum = sum + value\n        end\n    end\n    return sum\nend", "    local\
    \ sum = 0\n    \n    for i = 1, #lst do\n        if ((i % 3) == 0) then\n    \
    \        sum = sum + lst[i] * lst[i]\n        else\n            if ((i % 4) ==\
    \ 0) then\n                sum = sum + lst[i] * lst[i]\n            else\n   \
    \             sum = sum + lst[i]\n            end\n        end\n    end\n    \n\
    \    return sum\nend", "   -- Handle empty list\n   if not lst then return 0 end",
  "  local ret = 0\n  for i = 1, #lst do\n    if i % 3 == 0 then\n      ret = ret\
    \ + lst[i]\n    end\n    if i % 4 == 0 then\n      ret = ret + lst[i]\n    end\n\
    \    if i % 3 == 0 and i % 4 == 0 then\n      ret = ret + lst[i]\n    end\n  end\n\
    \  return ret\nend", "  -- This if statement is to catch the case where the user\
    \ passes in a table of strings. This happens when\n  -- we pass in the result\
    \ of a SQL query and one of the columns contains strings.\n  if type(lst) == \"\
    table\" then\n    lst = {}\n    for _,x in pairs(lst) do\n      lst[x] = x^2\n\
    \    end\n  end\n  local sum = 0\n  for _,x in pairs(lst) do\n    if mod(x,3)\
    \ == 0 then sum = sum + x\n    else if mod(x,4) == 0 then sum = sum + x*x\n  \
    \  end\n  end\n  return sum\nend", "   \n   -- Return the sum of all squares made\
    \ from numbers whose indexes are a multiple of 3 or 4\n   local function square(n)\
    \ \n      return n ^ 3\n   end\n   \n   -- Return the sum of all cubes made from\
    \ numbers whose indexes are a multiple of 4\n   local function cube(n) \n    \
    \  return n ^ 4\n   end\n   \n   -- Return the sum of all entries in the given\
    \ table.\n   local function sum_entries(lst) \n      return lst[1]\n   end\n \
    \  \n   -- For each entry in the given table, calculate the sum of squares and\
    \ cubes of the entry and add to return sum.\n   local sum = 0\n   for i = 1, #lst\
    \ - 1 do\n      sum = sum + square(lst[i]) + cube(lst[i])\n   end\n   return sum\
    \ + sum_entries(lst)\nend\n \nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({}))\n\
    print(sum_squares({-1, -5, 2, -1, -5}))\nprint(sum_squares({-5, 2, -1, -5}))",
  "  if #lst == 0 then\n    return 0\n  elseif #lst == 1 then\n    return lst[1]\n\
    \  else\n    local total = 0\n    local index = 1\n    while index <= #lst do\n\
    \      if index % 3 == 0 then\n        total = total + lst[index]\n      elseif\
    \ index % 4 == 0 then\n        total = total + lst[index] * lst[index]\n     \
    \ else\n        total = total + lst[index]\n      end\n      index = index + 1\n\
    \    end\n    return total\n  end\nend", "    local count = 0\n    local result\
    \ = {}\n    for index, value in ipairs(lst) do\n        if index % 3 == 0 then\n\
    \            count = count + value\n        elseif index % 4 == 0 then\n     \
    \       count = count + value * value\n        else\n            result[#result\
    \ + 1] = count\n            count = 0\n        end\n    end\n    result[#result\
    \ + 1] = count\n    return result\nend", "    if lst[1] == nil then return {}\
    \ end\n    local result = {}\n    for k, v in pairs(lst) do\n        if v % 3\
    \ == 0 and v % 4 == 0 then\n            result[k] = v * v\n        else\n    \
    \        result[k] = v\n        end\n    end\n    return result\nend", "\tlocal\
    \ total = 0\n\tfor i = 1, #lst do\n\t\tif i % 3 == 0 then\n\t\t\ttotal = total\
    \ + lst[i] * lst[i]\n\t\tend\n\t\tif i % 4 == 0 then\n\t\t\ttotal = total + lst[i]\
    \ * lst[i] * lst[i]\n\t\tend\n\tend\n\treturn total\nend", "\tlocal sum = 0\n\t\
    table.foreach(lst,\n\t\tfunction(i)\n\t\t\tlocal index = table.find(lst, i)\n\t\
    \t\tif index then\n\t\t\t\tindex = index - 1\n\t\t\t\tif index%3 == 0 then\n\t\
    \t\t\t\tsum = sum + i*i\n\t\t\t\telseif index%4 == 0 then\n\t\t\t\t\tsum = sum\
    \ + i*i*i\n\t\t\t\telse\n\t\t\t\t\tsum = sum + i\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\t)\n\treturn sum\nend", "  local count = 0\n  for _, v in ipairs(lst) do\n\
    \    if v % 3 == 0 then\n      count = count + v\n    elseif v % 4 == 0 then\n\
    \      count = count + v * v\n    else\n      count = count + v * v * v\n    end\n\
    \  end\n  return count\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    sum = sum + v * v\n  end\n  return sum\nend", "\tlocal sum = 0\n\tfor i,\
    \ v in pairs(lst) do\n\t\tif (i % 3) == 0\n\t\t\tor (i % 4) == 0\n\t\tthen\n\t\
    \t\tsum = (sum + v) * v\n\t\telse\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "    local ret = 0\n    for i = 1, #lst do\n        if i % 3 == 0\
    \ then\n            ret += lst[i] * lst[i]\n        elseif i % 4 == 0 then\n \
    \           ret += lst[i] * lst[i]\n        else\n            ret = ret + (lst[i]\
    \ * lst[i])\n        end\n    end\n    return ret\nend", "  local s = 0\n  for\
    \ i = 1, #lst do\n    if i % 3 == 0 then\n      s = s + lst[i]\n    elseif i %\
    \ 4 == 0 then\n      s = s * lst[i]\n    end\n  end\n  return s\nend", "  local\
    \ sum = 0\n  for i, v in ipairs(lst) do\n    sum = sum + math.pow(v,2)\n    if\
    \ i%4 == 0 then\n      sum = sum + math.pow(v,4)\n    end\n  end\n  return sum\n\
    end", "   local sum = 0\n   for i = 1,#lst do\n      if i % 3 == 0 then\n    \
    \     sum = sum + lst[i]\n      elseif i % 4 == 0 then\n         sum = sum + lst[i]*lst[i]\n\
    \      end\n   end\n   return sum\nend\n</cell>\n<text>\nQuestion 5\nWrite a program\
    \ which takes the following input from the user as a table of strings:\n{1, 2,\
    \ 3, 'a', 'b', 'c', 'd', 'e'}\n Your program should then return a table of:\n\
    {1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e'}\n Your program should also take a boolean\
    \ value (true/false) and return the boolean value with the strings in the table\
    \ converted to the string \"True\" or\n \"False\"", "    local result = {}\n \
    \   \n    for _, v in pairs(lst) do\n        if v % 3 == 0 then\n            v\
    \ = v * v\n        elseif v % 4 == 0 then\n            v = v * v * v\n       \
    \ else\n            v = v * v * v * v\n        end\n        result[#result + 1]\
    \ = v\n    end", "  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]\n\
    \    if ((i % 3) == 0 and (i % 4) == 0) or ((i % 3) == 0 and not (i % 4)) or ((i\
    \ % 3) and not (i % 4)) then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0\
    \ then\n            sum = sum + lst[i]\n        elseif i % 4 == 0 then\n     \
    \       sum = sum + lst[i] * lst[i]\n        else\n            sum = sum + lst[i]\
    \ * lst[i] * lst[i]\n        end\n    end\n    return sum\nend", "\tlocal sum\
    \ = 0 \n\tfor i, v in pairs(lst) do \n\t\tsum = sum + v * v \n\t\tif i %% 3 ==\
    \ 0 then \n\t\t\tsum = sum + v \n\t\telse \n\t\t\tsum = sum + v * v \n\t\tend\n\
    \tend \n\treturn sum \nend", "  local n = 1\n  local sum = 0\n  local len = #lst",
  "  local n = 1\n  for i = 1, #lst do\n    n = n * lst[i]\n    if i % 4 == 0 then\n\
    \      n = n * lst[i]\n    end\n  end\n  return n\nend", "    local sum = 0\n\
    \    for i = 1, #lst do\n        if i % 3 == 0 then\n            sum = sum + lst[i]\n\
    \        elseif i % 4 == 0 then\n            sum = sum + lst[i]\n        else\n\
    \            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for _, val in pairs(lst) do\n        if val % 3\
    \ == 0 then\n            sum = sum + val\n        elseif val % 4 == 0 then\n \
    \           sum = sum + val\n        else\n            sum = sum + val * val\n\
    \        end\n    end\n    return sum\nend", "   local sum = 0\n   for i=1,#lst\
    \ do\n      sum = sum + lst[i]\n      if ((i%3)==0) and ((i%4)==0) then\n    \
    \     sum = sum * i\n      else\n         sum = sum + i\n      end\n   end\n \
    \  return sum\nend", "  local sum=0\n  for i=1,#lst do\n    if i%3 ~= 0 then\n\
    \      sum = sum + lst[i]\n    elseif i%4 ~= 0 and i%4 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend", "   local sum = 0\n   for\
    \ i = 1, #lst do\n      if not i % 3 then\n         sum = sum + lst[i]\n     \
    \ else\n         sum = sum + lst[i] * lst[i]\n      end\n   end\n   return sum\n\
    end", "   local sum_ = 0\n   local i = 0\n   \n   -- Loop through each element\
    \ in the table\n   while i < #lst do\n      -- Check if the index is a multiple\
    \ of 3 or 4\n      if i % 3 == 0 then\n         -- Square the index\n        \
    \ sum_ = sum_ + lst[i] * lst[i]\n      elseif i % 4 == 0 then\n         -- Cube\
    \ the index\n         sum_ = sum_ + lst[i] * lst[i] * lst[i]\n      else\n   \
    \      -- Add the index to the sum\n         sum_ = sum_ + lst[i]\n      end\n\
    \      i = i + 1\n   end\n   \n   return sum_\nend", "    local new_lst = {}\n\
    \    for i = 1, #lst do\n        if i % 3 == 0 then\n            new_lst[#new_lst\
    \ + 1] = i * i\n        elseif i % 4 == 0 then\n            new_lst[#new_lst +\
    \ 1] = i * i * i\n        else\n            new_lst[#new_lst + 1] = lst[i]\n \
    \       end\n    end\n    local sum = #new_lst\n    return sum, new_lst\nend",
  "    local total_sum = 0\n    for i = 1, #lst do\n        local n = lst[i]\n   \
    \     if n % 3 == 0 then\n            n = n * n\n        elseif n % 4 == 0 then\n\
    \            n = n * n\n        else\n            n = n * n\n        end\n   \
    \     total_sum = total_sum + n\n    end\n    return total_sum\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n            sum\
    \ = sum + lst[i] * lst[i]\n        elseif i % 4 == 0 then\n            sum = sum\
    \ + lst[i] * lst[i]\n        else\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "\tlocal sum_of_squares = 0\n\tfor _, entry in\
    \ ipairs(lst) do\n\t\tif entry % 3 == 0 then\n\t\t\tentry = 3 * entry\n\t\telseif\
    \ entry % 4 == 0 then\n\t\t\tentry = 4 * entry\n\t\telse\n\t\t\tentry = entry\
    \ ^ 3\n\t\tend\n\t\tsum_of_squares = sum_of_squares + entry\n\tend\n\treturn sum_of_squares\n\
    end", "  for i = 1, #lst do\n    if (i %% 3) == 0 then\n      lst[i] = lst[i]*lst[i]\n\
    \    end\n    if (i %% 4) == 0 then\n      lst[i] = lst[i]*lst[i]\n    end\n \
    \ end\n  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]\n  end\n\
    \  return sum\nend", "    local sum = 0\n    for i = 1, #lst, 1 do\n        if\
    \ ((i %% 3) == 0) then\n            sum = sum + lst[i] * lst[i]\n        elseif\
    \ ((i %% 4) == 0) then\n            sum = sum + lst[i] * lst[i] * lst[i]\n   \
    \     else\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end", "    if #lst == 0 then\n        return 0\n    end\n    local sum = 0\n \
    \   for i = 1, #lst do\n        if ((i % 3) == 0) and ((i % 4) == 0) then\n  \
    \          sum = sum + lst[i]\n        elseif ((i % 3) == 0) then\n          \
    \  sum = sum + lst[i] * lst[i]\n        elseif ((i % 4) == 0) then\n         \
    \   sum = sum + lst[i] * lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", "  local sum = 0\n  for i = 1, #lst do\n    if i % 3 == 0 then\n      sum\
    \ = sum + lst[i] * lst[i]\n    end\n    if i % 4 == 0 then\n      sum = sum +\
    \ lst[i] * lst[i]\n    end\n  end\n  return sum\nend", "   if #lst == 0 then\n\
    \      return 0\n   elseif #lst == 1 then\n      return lst[1]\n   elseif #lst\
    \ == 2 then\n      return lst[1] * lst[1]\n   elseif #lst % 3 == 0 then\n    \
    \  local sum = 0\n      for i in lst:gmatch(\"%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) do\n         sum = sum + i\n      end\n      return sum\n   elseif #lst % 4\
    \ == 0 then\n      local sum = 0\n      for i in lst:gmatch(\"%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\"\
    ) do\n         sum = sum + i\n      end\n      return sum\n   else\n      return\
    \ 0\n   end\nend\n</cell>\n<text>\nProblem 3.7\nWrite a function that takes the\
    \ following parameters:", "  -- Check whether list is empty\n  if not lst then\n\
    \    return 0\n  end\n  -- Return sum of squares of lst entries that meet condition\n\
    \  local sum = 0\n  for i, v in pairs(lst) do\n    if i % 3 == 0 and i % 4 ==\
    \ 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend", "    local\
    \ new_lst = {}\n    for i, v in pairs(lst) do\n        if i % 3 == 0 then\n  \
    \          v = v * v\n        elseif i % 4 == 0 then\n            v = v * v *\
    \ v\n        end\n        new_lst[i] = v\n    end\n    return new_lst\nend", " \
    \   local count = 0\n    for idx, v in ipairs(lst) do\n        if idx%3 == 0 then\n\
    \            v = v * v\n        elseif idx%4 == 0 then\n            v = v * v\
    \ * v\n        else\n            count = count + v\n        end\n    end\n   \
    \ return count\nend", "   for i = 1, #lst do\n      if ((i % 3) == 0) then\n \
    \        lst[i] = lst[i] * lst[i]\n      end", "  for i = 1, #lst do\n    if i\
    \ % 3 == 0 then\n      lst[i] = lst[i] * lst[i]\n    end\n    if i % 4 == 0 then\n\
    \      lst[i] = lst[i] * lst[i]\n    end\n  end\n  local sum = 0\n  for _, v in\
    \ ipairs(lst) do\n    sum = sum + v\n  end\n  return sum\nend", "\t-- Write your\
    \ code here\n\tlocal sum = 0\n\t\n\tfor idx, _ in ipairs(lst) do\n\t\tif idx %\
    \ 3 == 0 then\n\t\t\tsum = sum + idx\n\t\telseif idx % 4 == 0 then\n\t\t\tsum\
    \ = sum + idx\n\t\telse\n\t\t\tsum = sum + idx * idx\n\t\tend\n\tend\n\t\n\treturn\
    \ sum\nend", "\tlocal sum_ = 0\n\tfor i = 1, #lst do\n\t\tif i % 3 == 0 then\n\
    \t\t\tsum_ = sum_ + lst[i]\n\t\tend\n\t\tif i % 4 == 0 then\n\t\t\tsum_ = sum_\
    \ + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn sum_\nend", "\tlocal sum = 0\n\t\
    for i = 1, #lst do\n\t\tif i % 3 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\telseif\
    \ i % 4 == 0 then\n\t\t\tsum = sum + lst[i] * lst[i]\n\t\telse\n\t\t\tsum = sum\
    \ + lst[i]\n\t\tend\n\tend\n\treturn sum\nend", "\tlocal count = 0\n\tfor index,\
    \ value in ipairs(lst) do\n\t\tif index == 0 then \n\t\t\tcount = count + 1\n\t\
    \telse\n\t\t\tcount = count + ((index * index) % 4 == 0 and index * index or index\
    \ * index * index)\n\t\tend\n\tend\n\treturn count\nend", "  local sum = 0\n \
    \ for _, elt in ipairs(lst) do\n    if elt % 3 == 0 then\n      sum = (sum + elt)\
    \ * (elt / 3)\n    elseif elt % 4 == 0 then\n      sum = (sum + elt) * (elt /\
    \ 4)\n    else\n      sum = sum + elt\n    end\n  end\n  return sum\nend", " \
    \   local i = 0\n    while i < #lst do -- While i is less than the length of lst\n\
    \        if lst[i] % 3 == 0 then -- If the index is a multiple of 3\n        \
    \    lst[i] = lst[i] * lst[i]\n        elseif lst[i] % 4 == 0 then -- If the index\
    \ is a multiple of 4\n            lst[i] = lst[i] * lst[i]\n        else\n   \
    \         i = i -- If the index is not a multiple of 3 or 4\n        end\n   \
    \     i = i + 1\n    end\n    local sum = 0\n    for k = 1, #lst do -- For each\
    \ index from 1 to (length of lst)\n        sum = sum + lst[k]\n    end\n    return\
    \ sum\nend", "    local sum = 0 \n    for i = 1, #lst do\n        if i % 3 ==\
    \ 0 then\n            sum = sum + lst[i]\n        elseif i % 4 == 0 then\n   \
    \         sum = sum + lst[i] * lst[i]\n        else\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "  local sum = 0\n  for _, value\
    \ in ipairs(lst) do\n    sum = sum + value\n  end\n  for _, value in ipairs(lst)\
    \ do\n    if math.mod(value, 3) == 0 then\n      sum = sum + value * value\n \
    \   elseif math.mod(value, 4) == 0 then\n      sum = sum + value * value * value\n\
    \    end\n  end\n  return sum\nend", "    local sum_ = 0\n    for i = 1, #lst\
    \ do\n        if i % 3 == 0 then\n            sum_ = sum_ + lst[i]\n        elseif\
    \ i % 4 == 0 then\n            sum_ = sum_ + lst[i]\n        else\n          \
    \  sum_ = sum_ + lst[i] * lst[i]\n        end\n    end\n    return sum_\nend",
  "\tlocal res\n\tfor i = 1, #lst do\n\t\tif i % 3 == 0 then\n\t\t\tres = res + lst[i]\n\
    \t\telseif i % 4 == 0 then\n\t\t\tres = res + lst[i] * lst[i]\n\t\telse\n\t\t\t\
    res = res + lst[i] * lst[i] * lst[i]\n\t\tend\n\tend\n\treturn res\nend", "  \
    \  local result = 0\n    for index, value in ipairs(lst) do\n        if index%3\
    \ == 0 then\n            index = index / 3\n            result = result + index\
    \ * index\n        elseif index%4 == 0 then\n            index = index / 4\n \
    \           result = result + index * index\n        else\n            result\
    \ = result + value\n        end\n    end\n    return result\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]\n        if ((i\
    \ % 3) == 0) or ((i % 4) == 0) or ((i % 5) == 0) then\n            lst[i] = lst[i]\
    \ * lst[i]\n        end\n    end\n    return sum\nend", "  local function is_3(n)\n\
    \    return n % 3 == 0\n  end\n  local function is_4(n)\n    return n % 4 == 0\n\
    \  end\n  local function is_multiple(lst)\n    local multiple = 0\n    for _,\
    \ v in ipairs(lst) do\n      multiple = multiple + v\n    end\n    return multiple\
    \ > 1\n  end\n  local function mult_3(lst)\n    local newlst = {}\n    for _,\
    \ v in ipairs(lst) do\n      newlst[math.floor(v / 3)] = v * 3\n    end\n    return\
    \ newlst\n  end\n  local function mult_4(lst)\n    local newlst = {}\n    for\
    \ _, v in ipairs(lst) do\n      newlst[math.floor(v / 4)] = v * 4\n    end\n \
    \   return newlst\n  end\n  local function add_5(lst)\n    local newlst = {}\n\
    \    for _, v in ipairs(lst) do\n      newlst[math.floor(v / 5)] = v * 5\n   \
    \ end\n    return newlst\n  end\n  local function add_7(lst)\n    local newlst\
    \ = {}\n    for _, v in ipairs(lst) do\n      newlst[math.floor(v / 7)] = v *\
    \ 7\n    end\n    return newlst\n  end\n  local function sum_all(lst)\n    local\
    \ total = 0\n    for _, v in ipairs(lst) do\n      total = total + v\n    end\n\
    \    return total\n  end\n  if #lst == 0 then\n    return 0\n  end\n  if is_multiple(lst)\
    \ then\n    return add_5(add_7(lst))\n  end\n  if is_3(lst) then\n    return mult_3(lst)\n\
    \  end\n  if is_4(lst) then\n    return mult_4(lst)\n  end\n  return sum_all(lst)\n\
    end\nreturn sum_squares", "  local sum = 0\n  for i, v in pairs(lst) do\n    if\
    \ i % 3 == 0 then\n      sum = sum + v\n    elseif i % 4 == 0 then\n      sum\
    \ = sum + v*v\n    end\n  end\n  return sum\nend", "   local s = 0\n   for _,\
    \ i in ipairs(lst) do\n      s = s + i * i\n   end\n   return s\nend", "  local\
    \ function is_multiple_by_3(idx)\n    return (idx % 3) == 0 and idx or nil\n \
    \ end\n  local function is_multiple_by_4(idx)\n    return (idx % 4) == 0 and idx\
    \ or nil\n  end\n  local function not_multiple_by_3(idx)\n    return idx and idx\
    \ % 3 ~= 0 and idx or nil\n  end\n  local function not_multiple_by_4(idx)\n  \
    \  return idx and idx % 4 ~= 0 and idx or nil\n  end\n  local sum = 0\n  for i=1,\
    \ #lst do\n    sum = sum + lst[i]\n    local idx = lst[i]\n    if is_multiple_by_3(idx)\
    \ then\n      lst[i] = idx^2\n    else if is_multiple_by_4(idx) then\n      lst[i]\
    \ = idx^3\n    elseif not_multiple_by_3(idx) then\n      lst[i] = idx\n    elseif\
    \ not_multiple_by_4(idx) then\n      lst[i] = idx^4\n    end\n  end\n  return\
    \ sum\nend", "  local n = 0\n  for _, i in pairs(lst) do\n    if i%3 == 0 then\n\
    \      i = i*i\n    elseif i%4 == 0 then\n      i = i*i\n      n = n + i\n   \
    \ else\n      n = n + i\n    end\n  end\n  return n\nend", "  local s = 0\n  for\
    \ i = 1, #lst do\n    if i % 3 == 0 then\n      s = s + lst[i]\n    end\n    if\
    \ i % 4 == 0 then\n      s = s + lst[i] * lst[i]\n    end\n  end\n  return s\n\
    end", "  -- First we get the indexes.\n  local squares = { }\n  local cubes =\
    \ { }\n  for idx = 1, #lst do\n    if idx % 3 == 0 then\n      table.insert(squares,\
    \ idx)\n    elseif idx % 4 == 0 then\n      table.insert(cubes, idx)\n    end\n\
    \  end\n  -- Then we sum the squares and cubes.\n  local sum = 0\n  local i =\
    \ 1\n  local size = #lst\n  while i <= size do\n    sum = sum + lst[i]\n    i\
    \ = i + 1\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1,#lst do\n\
    \    if lst[i] % 3 == 0 then\n      sum = sum + lst[i]\n    elseif lst[i] % 4\
    \ == 0 then\n      sum = sum + lst[i]*lst[i]\n    else\n      sum = sum + lst[i]*lst[i]*lst[i]\n\
    \    end\n  end\n  return sum\nend", "\tlocal res = 0;\n\tfor i, v in ipairs(lst)\
    \ do\n\t\tres += v * v;\n\t\tif i mod 3 == 0 then\n\t\t\tres += v * v;\n\t\tend\n\
    \t\tif i mod 4 == 0 then\n\t\t\tres += v * v;\n\t\tend\n\tend\n\treturn res;\n\
    end", "    local ret = 0\n    for i = 1,#lst do\n        if lst[i]%3 ~= 0 then\n\
    \            ret += lst[i]*lst[i]\n        elseif lst[i]%4 ~= 0 then\n       \
    \     ret += lst[i]*lst[i]\n        else\n            ret = ret +  lst[i]\n  \
    \      end\n    end\n    return ret\nend\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nWrite a function sum_of_squares_recur that takes a list of integers\
    \ and a callback function. The function shall call the callback function for every\
    \ integer in the list except for the last \ninteger. Use the callback function\
    \ to calculate the sum of the squares of the integers except for the last one.\
    \ The function shall return the sum of\nthe squares of the integers. Example:",
  "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n       \
    \     sum = sum + lst[i]\n        end\n        if i % 4 == 0 then\n          \
    \  sum = sum + lst[i]\n        end\n    end\n    return sum\nend", "  local function\
    \ is_multiple()\n    local function is_multiple_3()\n      return function(i)\n\
    \        return i % 3 == 0\n      end\n    end\n    local function is_multiple_4()\n\
    \      return function(i)\n        return i % 4 == 0\n      end\n    end\n   \
    \ return function(i)\n      if is_multiple_3(i) then\n        return is_multiple_4(i)\n\
    \      else\n        return false\n      end\n    end\n  end", "  local total\
    \ = 0\n  for _, entry in ipairs(lst) do\n    if ((entry % 3 == 0) and ((entry\
    \ % 4 == 0)) or\n        (entry % 3 == 0)) then\n      total = total + entry\n\
    \    end\n  end\n  return total\nend", "  local result = {}\n  for i,v in ipairs(lst)\
    \ do\n    if i % 3 == 0 then\n      result[i] = v * v\n    elseif i % 4 == 0 then\n\
    \      result[i] = v * v * v\n    else\n      result[i] = v\n    end\n  end\n\
    \  return result\nend", "  local sum = 0 \n  for i = 1, #lst do \n    sum = sum\
    \ + lst[i]*lst[i]\n  end\n  return sum\nend", "    local new_lst = table.copy(lst)\n\
    \    \n    for i, v in pairs(new_lst) do\n        if i % 3 == 0 then\n       \
    \     new_lst[i] = v * v\n        end\n        if i % 4 == 0 then\n          \
    \  new_lst[i] = v * v * v\n        end\n    end\n    \n    return #new_lst + 0\n\
    end\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n6. Write a procedure\
    \ which calculates the sum of all entries of a table which satisfy the predicate\
    \ function given in its argument.", "  local sum = 0\n  for i = 1, #lst do\n \
    \   if i % 3 == 0 then\n      sum = sum + lst[i]\n    elseif i % 4 == 0 then\n\
    \      sum = sum + lst[i] * lst[i]\n    end\n  end\n  return sum\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n            sum\
    \ = sum + lst[i]\n        end\n        if i % 4 == 0 then\n            sum = sum\
    \ + lst[i]\n        end\n    end\n    return sum\nend", "    local count = 0\n\
    \    for _, v in pairs(lst) do\n        if v:mod(3) == 0 then\n            count\
    \ = count + 1\n            lst[v:rem(v):mul(v)] = v\n        end\n        if v:mod(4)\
    \ == 0 then\n            count = count + 1\n            lst[v:rem(v):mul(3):mul(v)]\
    \ = v\n        end\n    end\n    return count\nend", "  local s = 0\n  for i =\
    \ 1, #lst do\n    s = s + lst[i]\n    if i % 3 == 0 then\n      s = s * lst[i]\n\
    \    end\n    if i % 4 == 0 then\n      s = s * lst[i]\n    end\n  end\n  return\
    \ s\nend", "  -- Use for ... next as we need index of the current element in the\
    \ for loop.\n  for _, entry in ipairs(lst) do\n    -- If entry is multiple of\
    \ 3 we square it.\n    if entry % 3 == 0 then\n      lst[#lst+1] = entry * entry\n\
    \    -- If entry is multiple of 4 we cube it.\n    else if entry % 4 == 0 then\n\
    \      lst[#lst+1] = entry * entry\n    -- If entry is not a multiple of 4 or\
    \ 3 we ignore it \n    else \n      -- Do nothing, leave the table as is.\n  \
    \  end\n  end\n  -- Return the sum of all entries.\n  return #lst\nend", "   \
    \ local n = 0\n    for i = 1, #lst do\n        if i %% 3 == 0 then\n         \
    \   n = n + lst[i]\n        elseif i %% 4 == 0 then\n            n = n + lst[i]\n\
    \        else\n            n = n + 1\n        end\n    end\n    return n\nend",
  "\tlocal total = 0 \n\t\n\tfor i = 1, #lst do\n\t\tif i % 3 == 0 then\n\t\t\ttotal\
    \ = total + lst[i] * lst[i]\n\t\telseif i % 4 == 0 then\n\t\t\ttotal = total +\
    \ lst[i] * lst[i]\n\t\telse\n\t\t\ttotal = total + lst[i]\n\t\tend\n\tend\n\t\n\
    \treturn total\nend", "  local sum = 0\n  for i,v in ipairs(lst) do\n    sum =\
    \ sum + v\n    if i % 3 == 0 then\n      sum = sum * v\n    end\n    if i % 4\
    \ == 0 then\n      sum = sum * v\n    end\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  for i, v in pairs(lst) do\n    if i % 3 == 0 then\n      sum = sum\
    \ + v\n    elseif i % 4 == 0 then\n      sum = sum + v * v\n    end\n  end\n \
    \ return sum\nend\nprint(sum_squares(lst))", "    local sum = 0\n    for i,v in\
    \ pairs(lst) do\n        if i % 3 == 0 and i % 4 == 0 then\n            sum =\
    \ sum + v\n        else\n            sum = sum + v^2\n        end\n    end\n \
    \   return sum\nend", "    local s = 0\n    for i=1, #lst do\n        if i % 3\
    \ == 0 then\n            s = s + lst[i]\n        elseif i % 4 == 0 then\n    \
    \        s = s + lst[i] * lst[i]\n        end\n    end\n    return s\nend", "\t\
    local sum = 0\n\tlocal m = #lst\n\tfor i=1,m do\n\t\tif i % 3 == 0 then\n\t\t\t\
    sum = sum + lst[i]\n\t\telseif i % 4 == 0 then\n\t\t\tsum = sum + lst[i]*lst[i]\n\
    \t\telse\n\t\t\tsum = sum + lst[i]*lst[i]*lst[i]\n\t\tend\n\tend\n\treturn sum\n\
    end", "  -- Initializing a variable 'sum' to zero and adding 1 to each value in\
    \ the table 'lst'\n  local sum = 0\n  for i, v in ipairs(lst) do\n    -- Checking\
    \ if the 'i' integer is a multiple of 3 or 4\n    if i % 3 == 0 or i % 4 == 0\
    \ then\n      -- Squaring 'i'\n      sum = sum + v * v\n    else\n      -- Cubing\
    \ 'i'\n      sum = sum + v * v * v\n    end\n  end\n  return sum\nend", "   local\
    \ result = 0\n   for i = 1, #lst do\n      result = result + lst[i]^3\n      result\
    \ = result + lst[i]^4\n   end\n   return result\nend\nprint(\"Sum of squares of\
    \ integers up to \" .. tostring(N) .. \" is\" .. tostring(sum_squares(lst)))\n\
    print(\"\")", "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 ==\
    \ 0 then\n            sum = sum + lst[i]\n        elseif i % 4 == 0 then\n   \
    \         sum = sum + lst[i] * 4\n        else\n            sum = sum + lst[i]\
    \ * lst[i]\n        end\n    end\n    return sum\nend", "  -- The function below\
    \ will help us determine whether an index has multiple factors. We will use it\
    \ to determine whether \n  -- a number is divisible by 3 or 4.\n  local function\
    \ mult3or4(n)\n    return (n % 3 == 0 and n % 4 == 0) or n % 3 == 0 and n % 4\
    \ == 0\n  end", "    if lst == nil then return {} end\n    local l = {} \n   \
    \ for i, v in pairs(lst) do\n        if v % 3 == 0 then l[v] = v^2 end\n     \
    \   if v % 4 == 0 then l[v] = v^3 end\n    end\n    local total = 0\n    for i\
    \ = 1, #l do\n        total = total + l[i]\n    end\n    return total\nend", " \
    \   local sum = 0\n    for _, value in ipairs(lst) do\n        if ((value % 3)\
    \ == 0) or ((value % 4) == 0) then\n            sum = (sum + value)\n        else\n\
    \            sum = (sum + value) * (value % 4)\n        end\n    end\n    return\
    \ sum\nend\nprint(sum_squares(lst))", "    if lst:len() == 0 then\n        return\
    \ 0\n    end\n    local n = 0\n    for _, entry in ipairs(lst) do\n        n =\
    \ n + 1\n        if n % 3 == 0 and n % 4 == 0 then\n            lst[n] = n * n\n\
    \        end\n    end\n    return n + sum_squares(lst)\nend", "  local result\
    \ = 0\n  for i = 1, #lst do\n    if i % 3 == 0 then\n      result = result + lst[i]\
    \ * lst[i]\n    elseif i % 4 == 0 then\n      result = result + lst[i] * lst[i]\n\
    \    else\n      result = result + lst[i] * lst[i]\n    end\n  end\n  return result\n\
    end", "    local result = 0\n    for _, value in ipairs(lst) do\n        if ((value\
    \ % 3 == 0) and (value % 4 == 0)) then\n            result = result + value\n\
    \        end\n    end\n    return result\nend", "    local sum = 0\n    for i\
    \ = 1, #lst do -- We only need to iterate through the list once.\n        if ((i\
    \ %% 3) == 0) then\n            sum = sum + lst[i]\n        elseif ((i %% 4) ==\
    \ 0) then\n            sum = sum + lst[i]\n        else\n            sum = sum\
    \ + lst[i] * lst[i]\n        end\n    end\n    return sum\nend", "  local squares\
    \ = {}\n  local sum_ = 0\n  for i = 1, #lst do\n    if i % 3 == 0 then\n     \
    \ squares[i] = i * i\n      sum_ = squares[i] + sum_\n    elseif i % 4 == 0 then\n\
    \      squares[i] = i * i * i\n      sum_ = squares[i] + sum_\n    else\n    \
    \  squares[i] = 0\n    end\n  end\n  return sum_\nend\nprint(sum_squares({1, 2,\
    \ 3}))\nprint(sum_squares({}))\nprint(sum_squares({-1, -5, 2, -1, -5}))", "  local\
    \ sum = 0\n  for i = 1, #lst do\n    if i%3 == 0 then\n      sum = sum + lst[i]\n\
    \    end\n    if i%4 == 0 then\n      sum = sum + lst[i]*lst[i]\n    end\n  end\n\
    \  return sum\nend", "    -- Base Case\n    if #lst == 0 then\n        return\
    \ 0\n    end\n    \n    -- Recursive Case\n    local total = 0\n    for i = 1,\
    \ #lst do\n        if i %% 3 == 0 then\n            total = total + lst[i]\n \
    \       end\n        if i %% 4 == 0 then\n            total = total + lst[i] *\
    \ lst[i]\n        end\n    end\n    return total\nend", "  local sum = 0\n  for\
    \ i = 1, #lst do\n    if i % 3 == 0 then\n      sum = sum + lst[i]\n    elseif\
    \ i % 4 == 0 then\n      sum = sum + lst[i]*lst[i]\n    else\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for i\
    \ = 1, #lst do\n        if i % 3 == 0 then\n            sum = sum + lst[i] * lst[i]\n\
    \        elseif i % 4 == 0 then\n            sum = sum + lst[i] * lst[i] * lst[i]\n\
    \        else\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for _, v in pairs(lst) do\n        -- If\
    \ this is not a multiple of 3 or 4 square the entry\n        if v mod 3 ~= 0 or\
    \ (v mod 4 == 0 and v ~= 0) then\n            sum = sum + v^2\n        end\n \
    \   end\n    return sum\nend", "\tlocal sum = 0\n\tfor _, entry in ipairs(lst)\
    \ do\n\t\tif ((entry % 3) == 0) then\n\t\t\tsum = (sum + entry * entry)\n\t\t\
    elseif ((entry % 4) == 0) then\n\t\t\tsum = (sum + entry * entry)\n\t\telse\n\t\
    \t\tsum = (sum + entry)\n\t\tend\n\tend\n\treturn sum\nend", "  if lst == nil\
    \ then\n    return 0\n  end", "  -- A local variable \"sum\" will store the sum\
    \ of all squares.\n  local sum = 0\n  -- A local variable \"i\" will count the\
    \ number of entries in the table. \n  local i = 0\n  -- A local variable \"j\"\
    \ will count the number of entries in the table that are not multiples of 3 and\
    \ are not multiples of 4. The condition\n  -- will thus be true for all entries\
    \ in the table. \n  local j = 0\n  -- An index \"k\" will count the number of\
    \ entries in the table that are not multiples of 3.\n  local k = 0\n  -- For all\
    \ entries in the table \"lst\", if the entry is a multiple of 4, the function\
    \ shall cube the entry. If it is a multiple of 3, the function will square\n \
    \ -- it and add it to \"sum\".\n  for i, v in pairs(lst) do\n    local v = v\n\
    \    if i % 4 == 0 then\n      v = v*v\n      sum = sum + v\n      j = j + 1\n\
    \    elseif i % 3 == 0 then\n      v = v*v\n      sum = sum + v\n      k = k +\
    \ 1\n    end\n  end\n  -- Return the sum of all squares.\n  return sum\nend",
  "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n       \
    \     sum = sum + lst[i]\n        elseif i % 4 == 0 then\n            sum = sum\
    \ + lst[i]*lst[i]\n        else\n            sum = sum + lst[i]*lst[i]*lst[i]\n\
    \        end\n    end\n    return sum\nend", "    local count = 0\n    for _,\
    \ val in pairs(lst) do\n        if val % 3 == 0 then\n            count = count\
    \ + val\n        elseif val % 4 == 0 then\n            count = count + val * val\n\
    \        end\n    end\n    return count\nend\n</cell>\n<cell>\n%%time", "    local\
    \ result = 0\n    for i = 1, #lst do\n        if (i % 3 == 0) then\n         \
    \   result = result + lst[i]\n        end\n        if (i % 4 == 0) then\n    \
    \        result = result + lst[i]\n        end\n    end\n    return result\nend",
  "   for i,v in ipairs(lst) do\n      if i % 3 == 0 then\n         lst[i] = v * v\n\
    \      elseif i % 4 == 0 then\n         lst[i] = v * v * v\n      else\n     \
    \    -- do nothing\n      end\n   end\n   return table.aggregate(lst,0,function(x,y)\n\
    \      return x+y\n   end)\nend", "  if #lst == 0 then\n    return 0\n  else\n\
    \    local sum = 0\n    for i = 1, #lst do\n      local index = i\n      if index\
    \ % 3 == 0 then\n        index = index / 3\n      elseif index % 4 == 0 then\n\
    \        index = index / 4\n      else\n        index = index / 3\n      end\n\
    \      sum = sum + index * index\n    end\n    return sum\n  end\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n            sum\
    \ = sum + lst[i]\n        elseif i % 4 == 0 then\n            sum = sum + lst[i]\n\
    \        elseif i % 3 == 0 and i % 4 == 0 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "    local n = #lst\n    local sum\
    \ = 0\n    for i=1,n,1 do\n        if i % 3 == 0 then\n            sum = sum +\
    \ lst[i]\n        end\n        if i % 4 == 0 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "    local sum = 0\n    for idx,\
    \ v in ipairs(lst) do\n        if idx % 3 == 0 then \n            sum = sum +\
    \ v*v\n        end\n        if idx % 4 == 0 then \n            sum = sum + v*v*v\n\
    \        end\n    end\n    return sum\nend", "  assert(type(lst) == \"table\"\
    \ and \"length\" in lst and #lst > 0, \"Invalid input in sum_squares\")\n  local\
    \ total = 0\n  for i = 1, #lst do\n    local idx = i - 1\n    if idx % 3 == 0\
    \ then\n      total = total + idx * idx\n    elseif idx % 4 == 0 then\n      total\
    \ = total + idx * idx * idx\n    else\n      total = total + idx\n    end\n  end\n\
    \  return total\nend\nprint(\"Sum of all values at multiples of 3: \" .. sum_squares(lst))",
  "    local sum = 0\n    for index, value in pairs(lst) do\n        if index % 3\
    \ == 0 and index % 4 == 0 then\n            sum = sum + value\n        else\n\
    \            lst[index] = value * value\n        end\n    end\n    return sum\n\
    end", "    if not lst or #lst == 0 then\n        return 0 -- List is empty\n \
    \   end\n    local squares = 1 -- This should always be 1\n    for i = 2, #lst\
    \ do\n        if i%%3 == 0 or i%%4 == 0 then\n            squares*=i -- Square\
    \ all even indexes\n        else\n            squares*=i -- Cube all odd indexes\n\
    \        end\n    end\n    return squares\nend", "\tlocal sum = 0 \n\tfor i =\
    \ 1, #lst do\n\t\tif i %  3 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\telseif i\
    \ %  4 == 0 then\n\t\t\tsum = sum + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0\
    \ and i % 4 == 0 then\n            sum = sum + lst[i]\n        else\n        \
    \    sum = sum * lst[i]\n        end\n    end\n    return sum\nend", "\t-- Initialize\
    \ the result with the first entry.\n\tlocal result = lst[1]\n\t-- Iterate over\
    \ all entries in the list.\n\tfor i = 2, #lst do\n\t\t-- Square the entry if it\
    \ is divisible by 3 and cube the entry if it is divisible by 4.\n\t\t-- In either\
    \ case, the index is not a multiple of 3 and 4 so it does not need to be changed.\n\
    \t\tif i % 3 == 0 then\n\t\t\tresult = result + lst[i]\n\t\telseif i % 4 == 0\
    \ then\n\t\t\tresult = result * lst[i]\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 3 == 0 then\n\t\t\tsum\
    \ = sum + v * v\n\t\telseif i % 4 == 0 then\n\t\t\tsum = sum + v * v * v\n\t\t\
    else\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nprint(\"Sum of squares\
    \ :\", sum_squares(lst))", "    local sum = 0\n    for _, v in pairs(lst) do\n\
    \        if v mod 3 == 0 then\n            sum = sum + v\n        elseif v mod\
    \ 4 == 0 then\n            sum = sum + v\n        else\n            sum = sum\
    \ + v * v\n        end\n    end\n    return sum\nend", "  local sum = 0\n  for\
    \ i, x in ipairs(lst) do\n    if (i % 3 == 0) and (i % 4 == 0) then\n      sum\
    \ = sum + x\n    else\n      sum = sum * x + x\n    end\n  end\n  return sum\n\
    end", "\tlocal total = 0\n\tfor idx, value in pairs(lst) do\n\t\tlocal mod = math.mod(idx,\
    \ 3)\n\t\tif mod then\n\t\t\ttotal = total + value * math.pow(idx, 2)\n\t\telse\n\
    \t\t\ttotal = total + value * math.pow(idx, 4)\n\t\tend\n\tend\n\treturn total\n\
    end", "    local sum = 0\n    for _, v in pairs(lst) do\n        if v ~= 0 and\
    \ v % 3 == 0 then\n            sum = sum + v\n        elseif v ~= 0 and v % 4\
    \ == 0 then\n            sum = sum + v\n        else\n            sum = sum +\
    \ v * v\n        end\n    end\n    return sum\nend\n</code>\n<|/ q |>\n<| c |>\n\
    Just to clarify, do you want to change the table itself, or just the values of\
    \ the table (which you seem to be able to do already)?\n<|/ c |>\n<| c |>\nI'd\
    \ say this question is not really answerable as is, but there are two things that\
    \ I think you should do. First I would go through your code and try to find places\
    \ where you might have made a mistake. Second, I would try to explain to you why\
    \ this algorithm works. It's not a very efficient way of doing things, in particular\
    \ it would be very inefficient if you have large numbers (i.e. bigger prime numbers\
    \ than `2^31`).\n<|/ c |>\n<| a tags=lua,lua-table |>\nThere are several problems\
    \ with this question, I'll try to address them one at a time:", "   local sum\
    \ = 0 \n   for i = 1, #lst do\n      if ((i % 3) == 0) then\n         sum = sum\
    \ + lst[i]*lst[i]\n      elseif ((i % 4) == 0) then\n         sum = sum + lst[i]*lst[i]*lst[i]\n\
    \      else\n         sum = sum + lst[i]*lst[i]*lst[i]\n      end\n   end\n  \
    \ return sum\nend", "  local i = 0\n  local sum = 0\n  local m = #lst\n  while\
    \ i < m do\n    if i % 3 == 0 then\n      sum = sum + lst[i] * lst[i]\n    elseif\
    \ i % 4 == 0 then\n      sum = sum + lst[i] * lst[i]\n    else\n      sum = sum\
    \ + lst[i]\n    end\n    i = i + 1\n  end\n  return sum\nend", "  for i = 1, #lst\
    \ do\n    if i % 3 == 0 then\n      lst[i] = lst[i] * lst[i]\n    end\n    if\
    \ i % 4 == 0 then\n      lst[i] = lst[i] * lst[i]\n    end\n  end\n  return #lst\
    \ + #lst\nend", "    local sum = 0\n    for k, v in pairs(lst) do\n        if\
    \ ((k%3)==0) and ((k%4)==0) then\n            sum = sum + v\n        elseif ((k%3)==1)\
    \ then\n            sum = sum + v*v\n        elseif ((k%4)==1) then\n        \
    \    sum = sum + v*v*v\n        end\n    end\n    return sum\nend\nprint(sum_squares(lst))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer and your time but\
    \ unfortunately i need a function in order to use it with other codes as well.\n\
    <|/ c |>\n<| c |>\nThe answer to your problem has been given by others so why\
    \ bother?\n<|/ c |>\n<| c |>\nI didnt saw your answer but i need this function\
    \ to be used in another code. Your code is correct but i need to use the function\
    \ in another code i dont know how can i do that\n<|/ c |>\n<| c |>\nYou already\
    \ have this function and you just need to call it.\n<|/ c |>\n<| a tags=lua,coronasdk,android,lua-table,function\
    \ |>\n<code>", "\tlocal count = 0\n\tlocal squares = setmetatable({}, {__index\
    \ = setmetatable({}, {__index = function(t, k)\n\t\treturn t.v[count] or 0\n\t\
    end})})\n\twhile #lst > 0 do\n\t\tif squares[#squares + 1] % 3 == 0 and squares[#squares\
    \ + 1] % 4 == 0 then\n\t\t\tsquares[#squares + 1] = (squares[#squares + 1] * squares[#squares\
    \ + 1]) + squares[#squares + 1]\n\t\telseif squares[#squares + 1] % 3 == 2 then\n\
    \t\t\tsquares[#squares + 1] = (squares[#squares + 1] * squares[#squares + 1])\
    \ + squares[#squares + 1]\n\t\telseif squares[#squares + 1] % 4 == 1 then\n\t\t\
    \tsquares[#squares + 1] = (squares[#squares + 1] * squares[#squares + 1]) + squares[#squares\
    \ + 1]\n\t\telse\n\t\t\tcount = count + 1\n\t\t\tsquares[#squares + 1] = squares[#squares\
    \ + 1] + 1\n\t\tend\n\t\tlst = lst:sub(1)\n\tend\n\tlocal sum_of_squares = 0\n\
    \tfor i = 1, #squares do\n\t\tsum_of_squares = sum_of_squares + squares[i]\n\t\
    end\n\treturn sum_of_squares\nend", "  for k, v in pairs(lst) do\n    if v then\n\
    \      if k % 3 == 0 then\n        v = v * v\n      elseif k % 4 == 0 then\n \
    \       v = v * v\n      else\n        v = v * v\n      end\n    end\n    lst[k]\
    \ = v\n  end\n  return table.unpack(lst)\nend", "   local sum = 0\n   for i =\
    \ 1, #lst do\n      local mult = 1\n      local val = lst[i]\n      if val %%\
    \ 3 == 0 then\n         mult = 3\n      elseif val %% 4 == 0 then\n         mult\
    \ = 4\n      else\n         mult = 1\n      end\n      sum = sum + val * val *\
    \ mult\n   end\n   return sum\nend", "\tlocal sum = 0\n\tlocal last_element =\
    \ 0\n\t-- For each index, find the index and value that divide it\n\tfor i, element\
    \ in pairs(lst) do\n\t\tif i%3 ~= 0 and i%4 ~= 0 then\n\t\t\t-- We want the squares\
    \ so just square\n\t\t\tsum = sum + element*element\n\t\telseif i%3 ~= 0 and i%4\
    \ ~= 0 then\n\t\t\t-- We want the cubes so just cube\n\t\t\tsum = sum + element*element*element\n\
    \t\telseif i%3 ~= 0 then\n\t\t\t-- We want the cubes\n\t\t\tsum = sum + element*element*element*element\n\
    \t\telseif i%4 ~= 0 then\n\t\t\t-- We want the squares\n\t\t\tsum = sum + element*element\n\
    \t\tend\n\tend\n\t-- Return the sum of the elements\n\treturn sum\nend", "   \
    \ local ret = 0\n    for i = 1, #lst do\n        if lst[i] % 3 == 0 then\n   \
    \         ret = ret + lst[i]\n        elseif lst[i] % 4 == 0 then\n          \
    \  ret = ret + lst[i]\n        else\n            ret = ret + lst[i] * lst[i]\n\
    \        end\n    end\n    return ret\nend", "   local sum = 0\n   for i = 1,\
    \ #lst do \n      if ((i % 3) == 0) or ((i % 4) == 0) then\n         sum = sum\
    \ + lst[i]\n      end\n   end\n   return sum\nend", "  for i, v in pairs(lst)\
    \ do\n    if i % 3 == 0 then\n      lst[i] = v * v\n    end\n    if i % 4 == 0\
    \ then\n      lst[i] = v * v * v\n    end\n  end\n  return sum(lst)\nend", " \
    \   local sum = 0\n    for k, v in pairs(lst) do\n        if mod(k, 3) == 0 then\n\
    \            sum = sum + v * v\n        elseif mod(k, 4) == 0 then\n         \
    \   sum = sum + v * v * v\n        end\n    end\n    return sum\nend", "  local\
    \ sum = 0\n  for k, v in pairs(lst) do\n    if k%3 == 0 and k%4 == 0 then\n  \
    \    sum = sum + v*v\n    else\n      sum = sum + v\n    end\n  end\n  return\
    \ sum\nend\n</cell>\n<text>\nLet's look at the output!", "  assert(type(lst) ==\
    \ \"table\")\n  local result = {}\n  local mult = 0\n  for k, v in pairs(lst)\
    \ do\n    if k == 1 then\n      table.insert(result, v)\n    elseif k == 2 then\n\
    \      table.insert(result, v*v)\n    elseif k == 3 then\n      table.insert(result,\
    \ v*v*v)\n    elseif k%4 == 0 then\n      table.insert(result, v*v*v*v)\n    else\n\
    \      mult = mult + 1\n      if mult % 3 == 0 then\n        table.insert(result,\
    \ v*v*v)\n      elseif mult % 4 == 0 then\n        table.insert(result, v*v*v*v)\n\
    \      end\n    end\n  end\n  return result\nend", "    local i = 1\n    local\
    \ sum = 0\n    while i < #lst do\n        if i % 3 == 0 then\n            sum\
    \ = sum + lst[i]\n        end\n        if i % 4 == 0 then\n            sum = sum\
    \ + lst[i]\n        end\n        i = i + 1\n    end\n    return sum\nend\nprint(sum_squares(lst))",
  "   local total = 0\n   for i, v in ipairs(lst) do\n      if i % 3 == 0 and i %\
    \ 4 == 0 then\n         total = total + v\n      end\n   end\n   return total\n\
    end", "    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 3 ==\
    \ 0 and v % 4 == 0 then\n            sum = sum + v\n        elseif v % 3 == 0\
    \ then\n            sum = sum + v*v\n        elseif v % 4 == 0 then\n        \
    \    sum = sum + v*v*v\n        else\n            sum = sum + v*v*v*v\n      \
    \  end\n    end\n    return sum\nend", "\t-- write your code here\nend", "\tlocal\
    \ function helper(index, sum)\n\t\tif index % 3 == 0 then\n\t\t\tsum = sum + index^2\n\
    \t\telseif index % 4 == 0 then\n\t\t\tsum = sum + index^3\n\t\telse\n\t\t\tsum\
    \ = sum + index^4\n\t\tend\n\tend\n\tlocal sum = 0\n\tfor i = 1, #lst, 1 do\n\t\
    \thelper(i, sum)\n\tend\n\treturn sum\nend\n</cell>\n<cell>", "\tlocal n = 0\n\
    \tfor k, v in pairs(lst) do\n\t\tn = n + v\n\t\tif v % 3 == 0 then n = n * v end\n\
    \t\tif v % 4 == 0 then n = n * v end\n\tend\n\treturn n\nend\nprint(sum_squares(lst))",
  "  if type(lst) == \"table\" then\n    local sum = 0\n    for _, _ in pairs(lst)\
    \ do\n      sum = sum + _\n    end\n    return sum\n  else\n    print(\"Bad argument\
    \ given.\")\n  end\nend\nsum_squares(lst)", "    local result = {}\n    for _,x\
    \ in ipairs(lst) do\n        if ((x % 3 == 0) and (x % 4 == 0)) then\n       \
    \     result[#result + 1] = x\n        else\n            result[#result + 1] =\
    \ x^2\n        end\n    end\n    return unpack(result)\nend", "  local sum = 0\n\
    \  \n  for i,v in ipairs(lst) do\n    if i % 3 == 0 and i % 4 == 0 then\n    \
    \  sum = sum + v\n    else\n      sum = sum_square(v, sum)\n    end\n  end\n \
    \ return sum\nend\n</cell>\n<cell>", "\tlocal total = 0\n\tfor i in lst:gmatch('%d*%d*%d*%d*')\
    \ do\n\t\tif i % 3 == 0 then\n\t\t\ttotal = total + i\n\t\telseif i % 4 == 0 then\n\
    \t\t\ttotal = total + i\n\t\telse\n\t\t\ttotal = total + i * i\n\t\tend\n\tend\n\
    \treturn total\nend", "    local sum = 0\n    for i = 1, #lst do\n        local\
    \ x = lst[i]\n        if ((x % 3) == 0) or ((x % 4) == 0) then\n            sum\
    \ = sum + x\n        else\n            sum = (x * x) + sum\n        end\n    end\n\
    \    return sum\nend", "    local sum_sq = 0\n    for _, entry in ipairs(lst)\
    \ do\n        if entry % 3 == 0 then\n            sum_sq = sum_sq + entry * entry\n\
    \        elseif entry % 4 == 0 then\n            sum_sq = sum_sq + entry * entry\
    \ * entry\n        else\n            sum_sq = sum_sq + entry\n        end\n  \
    \  end\n    return sum_sq\nend", "    local sum = 0\n    for i = 1, #lst, 1 do\n\
    \        if ((i % 3) == 0) or ((i % 4) == 0) then\n            sum = sum + lst[i]\n\
    \        else\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n \
    \   return sum\nend", "  if #lst > 0 then\n    local i = 1\n    while i <= #lst\
    \ do\n      if i % 3 == 0 then\n\tlst[i] = lst[i] * lst[i]\n      elseif i % 4\
    \ == 0 then\n\tlst[i] = lst[i] * lst[i]\n      else\n\tlst[i] = lst[i] + lst[i]\n\
    \      end\n      i = i + 1\n    end\n  end\n  return lst[1]\nend\nprint(\"The\
    \ sum of the squares of numbers from 1 to \", #lst, \"is\", sum_squares(lst))",
  "  for i, v in pairs(lst) do\n    if i % 3 == 0 then\n      lst[i] = v*v\n    elseif\
    \ i % 4 == 0 then\n      lst[i] = v*v*v\n    else\n      lst[i] = v\n    end\n\
    \  end\n  return sum(lst)\nend", "  local result = 0\n  for _, elt in ipairs(lst)\
    \ do\n    local index = math.floor(elt / 3)\n    if index == 0 then -- index ==\
    \ 0 is handled inside the for loop\n      result = result + elt\n    elseif index\
    \ == 1 then -- index == 1\n      result = result + elt\n    elseif index == 2\
    \ then -- index == 2\n      result = result + elt\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for index, value in pairs(lst) do\n    local divisor\
    \ = 3\n    if index % 3 == 0 then\n      divisor = 4\n    else \n      if index\
    \ % 4 == 0 then\n        divisor = nil\n      end\n    end\n    if divisor ==\
    \ nil then\n      result[#result + 1] = value * value\n    end\n  end\n  return\
    \ result\nend", "    local sum = 0\n    for _, i in ipairs(lst) do\n        if\
    \ i % 3 == 0 then\n            sum = sum + i * i\n        end\n        if i %\
    \ 4 == 0 then\n            sum = sum + i * i\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i=1, #lst do\n        if i%3 == 0 then\n\
    \            sum = sum + lst[i]\n        elseif i%4 == 0 then\n            sum\
    \ = sum + lst[i]*lst[i]\n        else\n            sum = sum + lst[i]\n      \
    \  end\n    end\n    return sum\nend", "    local cnt = 0\n    for i = 1, #lst\
    \ do \n        if i % 3 == 0 then\n            lst[i] = lst[i] * lst[i]\n    \
    \        cnt = cnt + 1\n        end\n        if i % 4 == 0 then\n            lst[i]\
    \ = lst[i] * lst[i]\n            cnt = cnt + 1\n        end\n        if cnt ==\
    \ 0 then\n            cnt = 1\n        end\n    end\n    local result = 1\n  \
    \  for i = 1, #lst do \n        result = result + lst[i]\n    end\n    return\
    \ result\nend", "    if #lst==0 then return 0 end\n    local sum=0\n    for i=1,#lst\
    \ do\n        if i%3==0 or i%4==0 then \n            sum=sum+lst[i]\n        end\n\
    \    end\n    return sum\nend", "  local sum = 0 \n  for i = 1,#lst do \n    if\
    \ math.mod(lst[i],3) == 0 then \n      sum = sum + lst[i]*lst[i] \n    elseif\
    \ math.mod(lst[i],4) == 0 then \n      sum = sum + lst[i]*lst[i]*lst[i] \n   \
    \ elseif lst[i] % 3 == 0 then \n      sum = sum + lst[i]*lst[i]*lst[i] \n    end\
    \ \n  end \n  return sum \nend ", "    if type(lst) == \"table\" then\n      \
    \  local sum = 0\n        for i,v in pairs(lst) do\n            if v % 3 == 0\
    \ and v % 4 == 0 then\n                sum = sum + v\n            end\n      \
    \  end\n        return sum\n    else\n        print(\"ERROR: Argument must be\
    \ a table\")\n    end\nend", "    local sum = 0\n    local counter = 0\n    for\
    \ i, x in ipairs(lst) do\n        local i2 = i / 3\n        local i4 = i / 4\n\
    \        if ((i % 3) == 0) or ((i % 4) == 0) then\n            if ((i2) % 3 ==\
    \ 0) or ((i2) % 4 == 0) then\n                sum = sum + x\n            end\n\
    \        else\n            if ((i2) % 3 == 0) then\n                sum = sum\
    \ + x\n            else\n                sum = sum + x * x\n            end\n\
    \        end\n        counter = counter + 1\n    end\n    return sum, counter\n\
    end\n</cell>\n<cell>\n%%time", "    if not lst or #lst == 0 then return end\n\
    \    local n = #lst\n    local sum = 0\n    for i = 1, n do\n        if i % 3\
    \ == 0 then\n            sum = sum + lst[i]\n        elseif i % 4 == 0 then\n\
    \            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for k, v in pairs(lst) do\n        if (k + 1) %\
    \ 3 == 0 and (k + 1) % 4 == 0 then\n            sum = sum + v\n        elseif\
    \ (k + 1) % 3 == 0 then\n            sum = sum + v * v\n        elseif (k + 1)\
    \ % 4 == 0 then\n            sum = sum + v * v * v\n        end\n    end\n   \
    \ return sum\nend", "    local sum = 0\n    for i = 1, #lst do \n        if i\
    \ % 3 == 0 and i % 4 == 0 then\n            sum = sum + lst[i]\n        elseif\
    \ i % 3 == 0 then\n            sum = sum + lst[i] * lst[i]\n        elseif i %\
    \ 4 == 0 then\n            sum = sum + lst[i] * lst[i] * lst[i]\n        end\n\
    \    end\n    return sum\nend", "  local res = 1\n  for i = 1, #lst do\n    if\
    \ i % 3 == 0 then\n      res = res * lst[i]\n    elseif i % 4 == 0 then\n    \
    \  res = res * lst[i]\n    end\n  end\n  return res\nend\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({-1, -5, 2, -1, -5}))\nprint(sum_squares({1, 2, 3,\
    \ 4, 5}))\nprint(sum_squares({1, 1, 1, 1, 1}))\nprint(sum_squares({1, 2, 3, 3,\
    \ 4}))\nprint(sum_squares({1, 3, 1}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({1,\
    \ 2, 3}))\nprint(sum_squares({1, 2, 3}))\nprint(sum_squares({", "\tlocal sum =\
    \ 0\n\tfor index, value in pairs(lst) do\n\t\tif index % 3 == 0 then\n\t\t\tsum\
    \ = sum + value\n\t\telseif index % 4 == 0 then\n\t\t\tsum = sum + value * value\n\
    \t\telse\n\t\t\tsum = sum + value * value * value\n\t\tend\n\tend\n\treturn sum\n\
    end", "    local sum_ = 0\n    for i=1,#lst do\n        sum_ = sum_ + lst[i]*lst[i]\n\
    \    end\n    return sum_\nend", "  local sum = 0\n  for i = 1, #lst do\n    sum\
    \ = sum + lst[i]\n    if i % 3 == 0 then\n      lst[i] = lst[i] * 3\n    end\n\
    \    if i % 4 == 0 then\n      lst[i] = lst[i] * 4\n    end\n  end\n  return sum\n\
    end", "  local function is_multiple(num, m)\n    return num % m == 0\n  end\n\
    \  local function cube(num)\n    return num * num * num\n  end\n  local sum =\
    \ 0\n  for _, value in pairs(lst) do\n    if is_multiple(value, 3) then\n    \
    \  sum = sum + value * value\n    elseif is_multiple(value, 4) then\n      sum\
    \ = sum + cube(value)\n    else\n      sum = sum + value\n    end\n  end\n  return\
    \ sum\nend", "\tlst:foreach(\n\t\tfunction(idx)\n\t\t\tif idx%3 ~= 0 then \n\t\
    \t\t\tlst[idx] = idx*idx\n\t\t\tend\n\t\t\tif idx%4 ~= 0 then\n\t\t\t\tlst[idx]\
    \ = idx*idx\n\t\t\tend\n\t\tend\n\t)\n\treturn lst:sum()\nend", '    if not lst
    then return 0 end', "  local acc = 0\n  for i in pairs(lst) do\n    acc = acc\
    \ + i * i\n  end\n  return acc\nend", "  local result = 0\n  for i = 1, #lst do\
    \ \n    if i % 3 == 0 then\n      result = result + lst[i] * lst[i]\n    elseif\
    \ i % 4 == 0 then\n      result = result + lst[i] * lst[i]\n    else\n      result\
    \ = result + lst[i] * lst[i]\n    end\n  end\n  return result\nend", "   local\
    \ sum = 0\n   for i = 1, #lst do\n      if ((i % 3) == 0) or ((i % 4) == 0) then\
    \ \n         sum = sum + lst[i]\n      end\n   end\n   return sum\nend", "   \
    \ local total = 0\n    for _, val in ipairs(lst) do\n        total = total + (val^2)\n\
    \    end\n    return total\nend", "    local sum = 0\n    for _, v in ipairs(lst)\
    \ do\n        if v mod 3 == 0 then\n            sum = sum + v\n        elseif\
    \ v mod 4 == 0 then\n            sum = sum + v\n        else\n            sum\
    \ = sum + v * v\n        end\n    end\n    return sum\nend", "\tlocal sum = 0\n\
    \tlocal i\n\tfor i = 1, #lst do\n\t\tif i % 3 == 0 then\n\t\t\tsum = sum + lst[i]\n\
    \t\telseif i % 4 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\telse\n\t\t\tsum = sum\
    \ + lst[i] * lst[i]\n\t\tend\n\tend\n\treturn sum\nend", "    local sum = 0\n\
    \    local count = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n   \
    \         count = count + 1\n            sum = sum + lst[i]\n        elseif i\
    \ % 4 == 0 then\n            count = count + 1\n            sum = sum + lst[i]\n\
    \        else\n            count = count + 1\n        end\n    end\n    return\
    \ sum * count * count\nend", "    local sum = 0\n    for i = 1, #lst do\n    \
    \    if ((i % 3 == 0) and ((i % 4 == 0)) or ((i % 4 == 0) and ((i % 3 == 0)))\
    \ then\n            sum = sum + lst[i]\n        elseif ((i % 3 == 0)) then\n \
    \           sum = sum + lst[i]*lst[i]\n        elseif ((i % 4 == 0)) then\n  \
    \          sum = sum + lst[i]*lst[i]*lst[i]\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for i = 1, #lst, 1 do\n        if i % 3 ==\
    \ 0 then\n            sum = sum + lst[i]\n        elseif i % 4 == 0 then\n   \
    \         sum = sum + lst[i] * lst[i]\n        else\n            sum = sum + lst[i]\
    \ * lst[i] * lst[i]\n        end\n    end\n    return sum\nend", "  assert(type(lst)\
    \ == \"table\")\n  -- This function will only work if the table is not empty.\
    \ If the table is empty the function will return a table with zero entries. \n\
    \  -- This function will not work if all entries in the table are negative.\n\
    \  assert(#lst ~= 0 and #lst ~= nil)\n  -- If the length of the table is even\
    \ then the function will return the sum of all its entries squared otherwise a\
    \ table with one entry \n  -- with the sum of all its entries squared.\n  if #lst\
    \ % 2 == 0 then\n    return lst:map(function(e) return e * e end)\n  else\n  \
    \  return { lst[1]:sum() + lst[2]:sum() }\n  end\nend", "   -- Create a local\
    \ list to store the results.\n   local results = {}\n   -- Loop from first element\
    \ to last\n   for idx = 1, #lst do\n      -- Square\n      results[idx] = lst[idx]\
    \ * lst[idx]\n      -- Cube\n      if idx % 4 == 0 then\n         results[idx]\
    \ = results[idx] * lst[idx]\n      end\n   end\n   -- Return the sum of all entries\
    \ in results list\n   return table.concat(results)\nend", "  if #lst == 0 then\
    \ \n    return 0 \n  else\n    local sum = 0\n    for i = 1, #lst do\n      if\
    \ i % 3 == 0 then\n        sum = sum + lst[i] * lst[i]\n      elseif i % 4 ==\
    \ 0 then\n        sum = sum + lst[i] * lst[i]\n      else\n        sum = sum +\
    \ lst[i]\n      end\n    end\n    return sum\n  end\nend", "  if #lst==0 then\n\
    \    return 0\n  end\n  local sum = 0\n  for _,v in ipairs(lst) do\n    if v%3\
    \ and v%4 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend",
  "    local sum = 0\n    for _, i in ipairs(lst) do\n        if i % 3 == 0 then\n\
    \            sum = sum + i\n        elseif i % 4 == 0 then\n            sum =\
    \ sum + i\n        else\n            sum = sum + i * i\n        end\n    end\n\
    \    return sum\nend\nprint(sum_squares(lst))", "    local sum = 0\n    for i\
    \ = 1, #lst do\n        sum = sum + lst[i]\n        if i ~= #lst and i % 3 ==\
    \ 0 then\n            sum = sum * lst[i]\n        end\n        if i ~= #lst and\
    \ i % 4 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend", "  -- Write your code here.\n  -- If you get stuck start with the\
    \ solution by Kevin\n  -- print(\"lst = \" .. tostring(lst))\n  local sum = 0\n\
    \  for idx, value in pairs(lst) do\n    -- print(\"idx = \" .. tostring(idx))\n\
    \    -- print(\"value = \" .. tostring(value))\n    if idx % 3 == 0 and idx %\
    \ 4 ~= 0 then\n      sum = tostring(sum) .. tostring(value)\n    else\n      --\
    \ print(\"idx not multiple of 3 or 4\")\n    end\n  end\n  return sum\nend", " \
    \   local results = {}\n    for i = 1, #lst do\n        local value = lst[i]\n\
    \        if i % 3 == 0 then\n            results[i] = value * value\n        elseif\
    \ i % 4 == 0 then\n            results[i] = value * value * value\n        else\n\
    \            results[i] = value\n        end\n    end\n    return table.sum(results)\n\
    end", "\tlocal s = 0\n\tfor i,v in pairs(lst) do\n\t\tv = v or 0\n\t\tif i%3 ==\
    \ 0 and i%4 ~= 0 then\n\t\t\tv = v * v\n\t\telseif i%3 == 0 and i%4 == 0 then\n\
    \t\t\tv = v * v * v\n\t\tend\n\t\ts = s + v\n\tend\n\treturn s\nend", "  local\
    \ s = 0\n  for i, v in ipairs(lst) do\n    if i % 3 == 0 then\n      s = s + v\n\
    \    elseif i % 4 == 0 then\n      s = s + v * v\n    else\n      s = s + v *\
    \ v * v\n    end\n  end\n  return s\nend", "    local total = 0\n    for i = 0,\
    \ #lst do\n        if i % 3 == 0 and i % 4 == 0 then\n            total = total\
    \ + lst[i]\n        elseif i % 4 == 0 then\n            total = total + lst[i]\n\
    \        elseif i % 3 == 0 then\n            total = total + lst[i]\n        end\n\
    \    end\n    return total\nend", "    local sum = 0\n    for i = 1, #lst do\n\
    \        if i %3 > 0 then\n            sum = sum + lst[i]\n        elseif i %4\
    \ > 0 then\n            sum = sum + lst[i]\n        else\n            sum = sum\
    \ + lst[i]*lst[i]\n        end\n    end\n    return sum\nend", "    local sum\
    \ = 0 \n    for i=1,#lst do \n        if ((i % 3) == 0) or ((i % 4) == 0) then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend", " \
    \  local total = 0\n   for _, value in pairs(lst) do\n      total = total + value\
    \ * value\n   end\n   return total\nend", "\tlocal ret = 0\n\tlst = lst.sorted()\n\
    \tfor i, v in ipairs(lst) do\n\t\tif i % 3 == 0 then\n\t\t\tret = ret + v\n\t\t\
    elseif i % 4 == 0 then\n\t\t\tret = ret * v\n\t\tend\n\tend\n\treturn ret\nend",
  "  local result = {}\n  for _, v in ipairs(lst) do\n    if v % 3 == 0 then\n   \
    \   result = result + v\n    elseif v % 4 == 0 then\n      result = result + v\n\
    \    end\n  end\n  return result\nend", "    local n = 1\n    for i = 1, #lst\
    \ do\n        if ( i % 3 == 0 and i % 4 == 0 ) then\n            n = n * lst[i]\n\
    \        else\n            n = n + lst[i]\n        end\n    end\n    return n\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 then\n\
    \            sum = sum + lst[i] * lst[i]\n        elseif i % 4 == 0 then\n   \
    \         sum = sum + lst[i] * lst[i]\n        else\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend", "   for i = 1, #lst do\n      if\
    \ i % 3 == 0 then\n         lst[i] = lst[i] * lst[i]\n      elseif i % 4 == 0\
    \ then\n         lst[i] = lst[i] * lst[i]\n      end\n   end\n   return lst[1]\n\
    end", "\tlocal count = 0\n\tfor i, v in ipairs(lst) do\n\t\tcount = count + v\
    \ * v\n\t\tif i % 3 == 0 then\n\t\t\tcount = count + v\n\t\tend\n\t\tif i % 4\
    \ == 0 then\n\t\t\tcount = count * v\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local sum = 0\n    for i = 1, #lst do\n        if ((i % 3) == 0) or ((i %\
    \ 4) == 0) then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
