name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local b_sqr = b * b\n   local c_sqr = c * c\n   local ab_squr =\
    \ a * b_sqr\n   local ac_squr = a * c_sqr\n   local cd_sqr = (c * d)\n   return\
    \ b_sqr + c_sqr + ab_sqr + ac_sqr + cd_sqr + b_sqr - c_sqr + ab_sqr + ac_sqr <\
    \ 0\nend", "\tlocal AB = c - b\n\tlocal AC = a - c\n\tlocal nABAB = AB * AB\n\t\
    local nACAC = AC * AC\n\tlocal nBCBC = b * b - c * c\n\tlocal nABBA = AB * BA\n\
    \tlocal nBACA = BA * AC\n\tlocal nACAB = AC * AB\n\t\n\treturn (nABAB + nACAC\
    \ - nBCBC - nABBA - nACAB + nBACA + nABBA - nBACA) > 0\nend", "\treturn (b^2)\
    \ + (c^2) - (a^2) <= 0\nend", "   -- Check whether a,b,c forms a right-angled\
    \ triangle \n   if b * c < a * c then\n      local d = 0\n      local e = b\n\
    \      local f = c\n      while a >= f do\n         d = d + 1 \n         e = e\
    \ - 1\n         f = f + 1\n      end\n      return d % 2 == 0 and a == b or a\
    \ == c\n   else\n      return false\n   end\nend", "\tlocal da = math.abs(a -\
    \ b)\n\tlocal dc = math.abs(c - a)\n\tlocal dab = math.abs(b - a)\n\tif da ==\
    \ dc then\n\t\treturn dab == 0 or dab == math.pi/2\n\telse\n\t\treturn da > dc\
    \ and dc > da\n\tend\nend", "    local is_right_angled = false\n    if math.abs(b\
    \ - a) > math.abs(c - b) then\n        if math.abs(b - a) < math.abs(c - b) then\n\
    \            if a > b then\n                is_right_angled = true\n         \
    \   elseif a < b then\n                is_right_angled = false\n            elseif\
    \ a == c then\n                is_right_angled = true\n            end\n     \
    \   elseif a > c then\n            is_right_angled = true\n        elseif a <\
    \ c then\n            is_right_angled = false\n        end\n    end\n    return\
    \ is_right_angled\nend", "\treturn ((b - c) ^ 2) < ((a * b) - (c * a))\nend",
  "\tlocal s = (a*a + b*b + c*c) / (a*a + b*b)\n\tlocal p = (b*b - a*c) / (b*b)\n\t\
    return (s + 1) / 2 >= 0 and (s + 1) / 2 <= 1 and\n\t   p >= 0 and p <= 1\nend",
  "  -- Return false if a or b or c is 0.\n  if a == 0 or b == 0 or c == 0 then\n\
    \    return false\n  end\n  -- If a + b > c, return false \n  if a + b > c then\n\
    \    return false\n  end\n  -- If a + c > b, return false\n  if a + c > b then\n\
    \    return false\n  end\n  -- If b + c > a, return false\n  if b + c > a then\n\
    \    return false\n  end\n  -- Return true\n  return true\nend", "\t-- If the\
    \ triangles are already not right angled then they do not form \n\t-- a right\
    \ angle triangle. \n\tif not (a <= b and b <= c and c <= a) then return false\
    \ end\n\t-- Formula for hypotenuse is sqrt(a^2 + b^2 + c^2)\n\t-- Solve for the\
    \ hypotenuse using the formula \n\t-- (Hypotenuse = sqrt(a^2 + b^2))^2 = b^2 +\
    \ c^2\n\tlocal h = math.pow(math.pow(b, 2) + math.pow(c, 2), 0.5)\n\treturn h\
    \ == b + c\nend", "\tif b == c then\n\t\treturn false\n\tend\n\tif a + b + c <=\
    \ 0 or a + c <= 0 or b + c <= 0 then\n\t\treturn false\n\tend", "  if a >= 0 and\
    \ b >= 0 and c >= 0 then\n    -- Check base cases\n    local is_right_angled =\
    \ b * b - 4 * a * c\n    if math.abs(a) < math.abs(b) and math.abs(a) < math.abs(c)\
    \ and is_right_angled > 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "\t-- Check validity of inputs\n\tassert(a ~= nil and b ~= nil and c ~=\
    \ nil)\n\t-- Check if all three sides are valid\n\tlocal sides = a, b, c\n\tassert(#sides\
    \ == 3)", "  local sign\n  if ((b == 0) or (c == 0)) then return false end\n \
    \ -- Check which side is the shortest.\n  sign = b/a\n  if (((b/c)%1) ~= 0) then\
    \ sign = -sign end\n  -- See which side is longer.\n  local length = (a^2 + b^2)^(1/2)\n\
    \  if ((length < b^2) or (length > c^2)) then return false end\n  -- Check which\
    \ side is the longer.\n  if ((length < a^2) or (length > c^2)) then return false\
    \ end\n  -- If we got this far we can conclude that both sides are equal.\n  return\
    \ true\nend", "\ta = math.abs(a)\n\tb = math.abs(b)\n\tc = math.abs(c)\n\tif a\
    \ + b > c then return false end\n\tif b + c > a then return false end\n\tif a\
    \ + c > b then return false end\n\treturn true\nend", "  return (b == c and ((a>=b)\
    \ and (a<=c) or (a==b and a>=c))) \nend", "   local s = (a*a + b*b + c*c - a*a*b\
    \ - a*a*c - b*b*c)/(2*b*c)\n   return s >= 0 and (s % 90) == 0\nend", "\tlocal\
    \ a_x, a_y, a_z = a:getN()\n\tlocal b_x, b_y, b_z = b:getN()\n\tlocal c_x, c_y,\
    \ c_z = c:getN()", "    if a > c then\n        a, c = c, a\n    end\n    return\
    \ ((b - a) * (c - b) > 0)\nend", "    return (math.fmod(a,b) == 0 and math.fmod(b,c)\
    \ == 0 and math.fmod(c,b) == 0)\nend", "  return math.abs(b - c) == math.abs(a\
    \ - b) \nend", "    if b < a then\n        return false\n    end\n    if c < a\
    \ then\n        return false\n    end\n    if b > c then\n        return false\n\
    \    end\n    if c > b then\n        return false\n    end", "  if abs(a) + abs(b)\
    \ + abs(c) > 180 then return false end\n  return ((a > b) and (b > c) and (c >\
    \ 0)) or ((a > c) and (b > c) and (c > 0)) or\n    ((a = 90) and (b = 90) and\
    \ (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and (b > c)\
    \ and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and (c >\
    \ b) and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((a = 90) and (c\
    \ > b) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((b = 90) and\
    \ (c = 90) and (c > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((b = 90)\
    \ and (c = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((c =\
    \ 90) and (b = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) or\n    ((c\
    \ = 90) and (b = 90) and (a > 0)) or ((a > c) and (b > c) and (a > 0)) \nend",
  "\tlocal side1, side2, side3 = a, b, c\n\tif side2 > side1 + side3 then\n\t\tside3,\
    \ side2, side1 = side1, side2, side3\n\tend\n\tif side1 == side2 then\n\t\treturn\
    \ side1 == side3\n\telseif side1 == side3 then\n\t\treturn side2 <= 180 and side3\
    \ <= 180\n\telseif side2 == side3 then\n\t\treturn side1 <= 180 and side3 <= 180\n\
    \telseif side1 <= side3 then\n\t\treturn side1 <= side2 and side2 <= 180\n\tend\n\
    \treturn false\nend", "\treturn b - a*(c-a)/c >= 0\nend", "  return (b <= c) or\
    \ (abs(b - c) <= math.pi/2)\nend", "   return ((b - a) * (c - a) == 0 and\n  \
    \        (b + c) * (a + b) == 0 )\nend", "\t-- Check triangle is valid\n\tif not\
    \ (a > 0 and b > 0 and c > 0) then\n\t\treturn false\n\tend\n\t-- Check triangle\
    \ is right angle\n\tif a > b and b > c then\n\t\treturn true\n\tend\n\t-- Check\
    \ triangle is right angle\n\tif a == b or a == c or b == c then\n\t\treturn false\n\
    \tend\n\t-- Check triangle is 90 degree\n\tlocal ab = a - b\n\tlocal bc = b -\
    \ c\n\tlocal ad = a - d\n\tlocal cd = c - d\n\tlocal ac = a + c - ab * cd\n\t\
    if ab * ac > 0 and ac > 0 and bc > 0 and bd > 0 then\n\t\treturn true\n\tend\n\
    \treturn false\nend", "    return ( math.abs( a - c ) <= math.abs(b - c) )\nend",
  "\treturn (a + b > c and b + c > a and c + a > b)\nend", "\t-- Return true if the\
    \ triangle is right-angled, false otherwise.\n\t-- A right-angled triangle is\
    \ a triangle in which one angle is right angle or \n\t-- 90 degree.\n\t-- Example:\n\
    \t-- >>> right_angle_triangle(3, 4, 5)\n\t-- true\n\t-- >>> right_angle_triangle(1,\
    \ 2, 3)\n\t-- false", "    local b1 = b - a \n    local c1 = c - a \n    local\
    \ b2 = b - c\n    local c2 = c - c\n    return b1 + c1 > b2 + c2 \nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  return ab == bc or ab\
    \ == 90 or\n         bc == 180 or\n         ab == bc\nend", "\treturn ((a*b +\
    \ c*b + a*c + c*c + a)*(a*a + b*b + c*c + a*b + b*c + c*a) >= 4)\nend", "    return\
    \ ((b - a) * (c - b) <= 0) and (\n          (a - b) * (c - b) >= 0 or\n      \
    \    (a - b) * (c - b) <= (a - b) * (b - c)\n      )\nend", "\treturn (b - a)\
    \ * (c - a) >= 0 and (b - c) * (a - c) >= 0\nend", "    local n1, n2, n3 = b -\
    \ a, c - b, a + b + c\n    return (n1 > 0 and n2 > 0 and n3 > 0 and n1 + n2 >\
    \ 0 and n1 + n3 > 0 and n2 + n3 > 0)\nend", "   -- Base cases.\n   if a == 0 and\
    \ b == 0 and c == 0\n   then return true\n   end\n   if a == 0\n   then return\
    \ false\n   end\n   if b == 0\n   then return false\n   end\n   if c == 0 \n \
    \  then return false\n   end", "\t-- Base cases\n\tif b == 0 then return false\
    \ end\n\tif c == 0 then return false end\n\tif a == 0 then return false end",
  "    local d1, d2, d3 = (b - c) ^ 2, (b - c) ^ 3, (a - b) ^ 2\n    return ((d2 <=\
    \ 0 and d3 <= 0 and d1 <= 0) or\n        (d2 <= 0 and d3 >= 0 and d1 >= 0) or\n\
    \        (d1 <= 0 and d2 <= 0 and d3 >= 0))\nend", "    local ra = math.sqrt(\
    \ math.pow( (b - c), 2 ) + math.pow(a, 2))\n    local rb = math.sqrt( math.pow(\
    \ (b - a), 2 ) + math.pow(c, 2))\n    local rc = math.sqrt( math.pow( (b - a),\
    \ 2 ) + math.pow(b, 2))\n    return ((ra >= rb) and (ra >= rc) and (ra >= rc +\
    \ 0.01))\nend", "    return (a+b>c and a>b) or (a+b<c and a>c)\nend", "\treturn\
    \ (a + b > c) and (a + c > b) and (a + c > b)\nend", "    local a1 = math.abs(b\
    \ - a)\n    local b1 = math.abs(c - b)\n    local c1 = math.abs(c - a)\n    return\
    \ a1 == b1 and a1 == c1\nend", "  local d = b - a\n  local e = c - b\n  local\
    \ s = math.sqrt(d ^ 2 + e ^ 2)\n  -- The formula for the length of an angled triangle\
    \ is \n  -- (a + b + c) / 2 = (a^2 + b^2 + c^2) / 2 = sqrt((a + b)^2 - (b + c)^2)\n\
    \  return ((s * s) - (e * d)) / (2 * (s + e))\nend", "  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local abc = math.pow(ab, 2) + math.pow(bc, 2)\n  return abc / (math.pow(a,\
    \ 2) + math.pow(b, c))\nend", "  return (a*b*c) ~= (a*c*b) and (a*c*b) ~= (b*a*c)\
    \ and (b*a*c) ~= (c*b*a) and (c*b*a) ~= (a*b*c)\nend", "    local d\n    local\
    \ e = math.sqrt((c*c - b*b)/2)\n    if b * e < c * d then return false end\n \
    \   local f = 0\n    if b > c then\n        f = b\n    else f = c\n    end\n \
    \   d = (c - f) / e\n    if f + d > b then return false end\n    if f > c then\n\
    \        d = c\n    else d = b\n    end\n    if f - d > b then return false end\n\
    \    if math.atan2(d - b, c - f) < 0 then return false end\n    return true\n\
    end", "    local a_length = calculate_length(a)\n    local b_length = calculate_length(b)\n\
    \    local c_length = calculate_length(c)\n    return a_length == b_length and\
    \ b_length == c_length\nend", "\tlocal da = math.abs(b - a) / 2;\n\tlocal dc =\
    \ math.abs(c - a) / 2;\n\tlocal ba = b - a; \n\tlocal bc = c - a;\n\treturn (ba\
    \ + bc) > da and ((bc + da) > (ba + bc));\nend", "    local bc, ac = math.abs(b-c),\
    \ math.abs(a-c)\n    local ab, bc = math.abs(a), math.abs(b)", "  return math.abs(math.atan2((c\
    \ - (b - a)) / math.sqrt((b - a) ^ 2), (b - a)) < math.pi / 2)\nend", "    return\
    \ (c-a) * (c-b) * (a-b) < 0\nend", "\tlocal a, b, c = math.abs(a), math.abs(b),\
    \ math.abs(c)\n\tlocal ab, bc, ac, ba\n\tif a < b and b < c then ab = bc else\
    \ ab = ac\n\tif a < c then ac = c else ba = a\n\tif ab - bc < ac - ba then return\
    \ b == c or ba == ab or bc <= ab or ba == ac\n\tend\nend", "  -- See if it's a\
    \ right angled triangle\n  return (c-a) > (b-a) and (c-b) > (a-b) and (c-a) ==\
    \ (b-a) and (c-b) == (a-b)\nend", "    if abs(a - b) < abs(a - c) then\n     \
    \   if abs(b - c) < abs(a - b) then\n            return false\n        else\n\
    \            return true\n        end\n    elseif abs(b - c) < abs(b - a) then\n\
    \        return true\n    else\n        return false\n    end\nend", "  local\
    \ abx = math.abs(b - a)\n  local bcx = math.abs(c - b)\n  if abx == bcx then return\
    \ true else return false end\n  if abx <= bcx then\n    local aby = math.abs(b\
    \ - c)\n    if aby <= abx then return true else return false end\n  else\n   \
    \ local bcy = math.abs(c - a)\n    if bcy <= abx then return true else return\
    \ false end\n  end\nend", "  local p = (a + b + c) / 2\n  return math.abs(p*(p\
    \ - a)*(p-b)*(p-c))^(1/3)\nend", "\tlocal a1 = math.abs(a); local b1 = math.abs(b);\n\
    \tlocal c1 = math.abs(c);\n\treturn (a1+b1+c1)==(a1*b1+c1)\nend", "\treturn ((a\
    \ + b > c) and (a + c > b) and (a + b > c))\nend", "  return b - a == c or c <\
    \ b and b < a \nend", "    return ( b + c  >= a + c ) and ( c >= b + a )\nend",
  "\tlocal ad = abs(a^2 + b^2)\n\tlocal bd = abs(b^2 + c^2)\n\tlocal cd = abs(c^2\
    \ + a^2)\n\treturn (ad + bd) * (ad + cd) > (bd + cd) * (bd + ad)\nend", "   return\
    \ (b > 0 and c > 0 and\n      (a+b>c) or (b+c>a) or (a+c>b))\nend", "\tlocal sides\
    \ = math.abs(a) + math.abs(b) + math.abs(c)\n\treturn sides == math.abs(a + b\
    \ + c) -- or sides == math.sqrt(sides) \nend", "\treturn (-b + math.sqrt((a *\
    \ b) - (c * a)))\n\t\t- (math.fabs(a * c) - (b * b)) >= 0\nend", "  if b < a then\n\
    \ta = b\n\tb = c\n\tc = a\n  end\n  if c <= a or c <= b then return false end\n\
    \  if a + b > c then return false end\n  if a + c > b then return false end\n\
    \  return true\nend", "   local b2 = b * b\n   local c2 = c * c\n   local det\
    \ = b2 * (b2 - c2) + 4 * (a * b * c2 - c * a2)\n   return det > 0\nend", "   \
    \ local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n    if a == b then\n\
    \        return false\n    end\n    if a == c then\n        return true\n    end\n\
    \    if b == c then\n        return true\n    end", "\tlocal d = b * b - 4 * a\
    \ * c\n\tif d < 0 then return false end\n\tlocal x = 0\n\tlocal y = b * b - a\
    \ * a * c\n\tlocal z = 0\n\tif d > 0 then\n\t\tx = -c / d\n\t\ty = z / d\n\tend\n\
    \tif x ** 2 + y ** 2 = z ** 2 then return true end\n\treturn false\nend", "\t\
    local side1 = b * b - a * c\n\tlocal side2 = c * c - a * b\n\treturn side1 ==\
    \ side2 or side1 == 0 or side2 == 0\nend", "  -- The equation of right-angle triangle\n\
    \  -- x^2 + y^2 + z^2 = 1\n  local x, y = {a, b}\n  local z = c", "\treturn (((math.acos((b\
    \ * b - c * c + a * a) / (b * b + c * c)) * 180 / math.pi) < 45)\n\t   or  (math.acos((a\
    \ * a * c - b * b + c * c) / (a * a + b * b))* 180 / math.pi) > 0)\nend", "  \
    \ local side1 = b - a\n   local side2 = c - a\n   local side3 = b - c", "  return\
    \ (b * b == c and a * a) or (b * b == c and a == c) or (a * b == c and a == b)\n\
    end", "\treturn ((a <= b and b <= c) or (a == b and c >= b)) and ((b >= a and\
    \ b <= c) or (b == a and c >= a)) and ((c >= a and c <= b) or (c == a and b >=\
    \ a))\nend", "\t-- Calculate the hypotenuse of right angle triangle side\n\tlocal\
    \ h = math.sqrt(a^2 + b^2 + c^2)\n\t-- Check if all sides are 90 degree\n\tif\
    \ h == 0 then\n\t\treturn false\n\tend\n\t-- Check if any three sides are equal\n\
    \tif a == b or b == c or c == a then\n\t\treturn false\n\tend\n\t-- Check if hypotenuse\
    \ is longer than the other two sides\n\tif h > a then\n\t\t-- If true, then triangle\
    \ is right angle\n\t\treturn true\n\telse\n\t\t-- If false, it is not\n\t\treturn\
    \ false\n\tend\nend", "\t-- Find Euclidean distance between two points.\n\tlocal\
    \ function distance(x1, y1, x2, y2)\n\t\treturn (x2 - x1)^2 + (y2 - y1)^2\n\t\
    end", "   return math.fmod(a + b + c, 2) == 0 or (math.fmod(a + b + c, 2) == math.sqrt(2)\
    \ and\n         math.fmod(c - a, 2) == math.sqrt(2))\nend", "    if a^2 + b^2\
    \ = c^2 then\n        -- Special Cases:\n        return a == b or a == c and b\
    \ == c\n    else\n        if b > c then\n            -- b > c\n            return\
    \ false\n        elseif b == c then\n            return b == a\n        else\n\
    \            -- b < c\n            return true\n        end\n    end\nend", " \
    \ return (b - a) ~= 0 and\n         b + c + a = b + a and\n         b - c + a\
    \ = b - a and\n         a - (b + c) >= 0 and\n         a - (b - c) >= 0 and\n\
    \         b + (c - a) >= 0 and\n         b + (c - a) >= 0\nend", "  local nab\
    \ = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local nac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n  local nac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \  local det = nab*nac\n  return det > 0 and abs(a - b)*det > 0 and abs(a - c)*det\
    \ > 0 and abs(b - c)*det > 0 \nend", "    local angle_a = math.atan2((a-b), (c-b))\n\
    \    local angle_b = math.atan2((a-c), (b-a))\n    local angle_c = math.atan2((c-a),\
    \ (b-a))", "\tlocal a = math.rad(a)\n\tlocal b = math.rad(b)\n\tlocal c = math.rad(c)\n\
    \treturn not ((b > 0 and a + b > c) or (c > 0 and a + c > b)) and\n\t\t((b > 0\
    \ and a + b > c) or (c > 0 and a + c > b)) and\n\t\t(b - a > 0 and b - c > 0 and\
    \ c - b > 0)\nend", "\tif (a + b > c) or (b + c > a) or (c + a > b)\n\tthen\n\t\
    \treturn false\n\tend\n\treturn true\nend", "  local b1 = b - a\n  local c1 =\
    \ c - a\n  local b2 = b - c\n  local c2 = c - b\n  return (((b1 * (b1 * b1) >\
    \ 0) and\n           (b2 * (b2 * b2) > 0)) and\n          ((c1 * (c1 * c1) > 0)\
    \ and\n           (c2 * (c2 * c2) > 0)) or\n          ((b2 * (b2 * b2) > 0) and\n\
    \           (c1 * (c1 * c1) > 0)) or\n          ((c1 * (c1 * c1) > 0) and\n  \
    \         (b2 * (b2 * b2) > 0)) or\n          ((b2 * (b2 * b2) > 0) and\n    \
    \       (c1 * (c1 * c1) > 0) and\n           (b2 * (b2 * b2) > 0)) or\n      \
    \    ((c1 * (c1 * c1) > 0) and\n           (b2 * (b2 * b2) > 0) and\n        \
    \   (c1 * (c1 * c1) > 0))\nend", "    return ((b - c) ^ 2) - ((a - b) ^ 2) ^ 0.5\
    \ > 0\nend", "    if b <= 0 then\n        -- A line with side 0.\n        return\
    \ false\n    elseif c <= 0 then\n        -- A line with side 1.\n        return\
    \ true\n    elseif b <= c then\n        -- One side is a perfect triangle or 180\
    \ degree triangle \n        return (b == c)\n    else\n        -- Compute area\
    \ of triangle using Heron's formula.\n        local s = (-b + math.sqrt((b**2)\
    \ - (4*a*c))) / (2*a)\n        return s >= 0 and s <= 1\n    end\nend", "\t--\
    \ Check two of the three sides first\n\tif a == b and b == c then return true\
    \ end\n\tif a > b and a > c then return false end\n\tif b > a and b > c then return\
    \ false end", "\tif a <= b then\n\t\treturn false\n\telseif b <= c then\n\t\t\
    return true\n\telseif b >= c then\n\t\treturn false\n\telseif a + b > c then\n\
    \t\treturn false\n\telse\n\t\tlocal ab = b - a\n\t\tlocal ac = c - a\n\t\tlocal\
    \ bc = (b + c) / 2\n\t\tlocal bc = bc - a\n\t\treturn ab >= (ac * bc) \n\tend\n\
    end", "    local angle_a = math.acos((b * b) - (4 * a * c))\n    local angle_b\
    \ = math.acos((b * b) - (2 * a * c))\n    local angle_c = math.acos((a * a) -\
    \ (2 * a * c))\n    \n    if (angle_a > math.pi / 2) or (angle_b > math.pi / 2)\
    \ or (angle_c > math.pi / 2) then\n        return false\n    end\n    \n    return\
    \ true\nend", "\t-- The three sides of an right angle triangle are\n\t--\t(a)\
    \ perpendicular to the three edges of an equilateral triangle\n\t--\t(b) perpendicular\
    \ to the three edges of an isosceles triangle\n\t--\t(c) perpendicular to the\
    \ three edges of an scalene triangle\n\treturn ((a + b < c) and (c + b < a))\n\
    end", "   local ad = math.abs(a - c)\n   local bc = math.abs(b - c)\n   if ad\
    \ > bc then\n      return false\n   else\n      return (math.abs(a - (a + c))\
    \ / ad) < 0.1 and (math.abs(b - (b + c)) / bc) < 0.1\n   end\nend", "  local a1\
    \ = math.abs(a/b)\n  local b1 = math.abs(b/c)\n  local a2 = math.abs(a/c)\n  return\
    \ (a1 + a2)/2 <= (b1 + b2)/2\nend", "  return ( b - a <= c and a <= c - b) or\
    \ ( b - c <= a and b <= c - a)\nend", "\tlocal a = a or 0\n\tlocal b = b or 0\n\
    \tlocal c = c or 0\n\tlocal isRight = true\n\tlocal ab = math.sqrt(math.pow(a\
    \ - b, 2) + math.pow(c - b, 2))\n\tlocal ac = math.sqrt(math.pow(a - c, 2) + math.pow(c\
    \ - c, 2))\n\tlocal bc = math.sqrt(math.pow(b - c, 2) + math.pow(c - c, 2))",
  "\tlocal side1 = math.sqrt((b * b) + (c * c))\n\tlocal side2 = math.sqrt((b * b)\
    \ - (c * c))\n\tlocal side3 = math.sqrt((a * a) - (b * b) - (c * c))\n\tlocal\
    \ side4 = math.sqrt((a * a) + (b * b) + (c * c))\n\tif side1 == side2 then\n\t\
    \tprint(side1 .. \" == \" .. side2)\n\t\treturn true\n\telseif side2 == side3\
    \ then\n\t\tprint(side2 .. \" == \" .. side3)\n\t\treturn true\n\telseif side3\
    \ == side4 then\n\t\tprint(side3 .. \" == \" .. side4)\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "    local ab, bc, cd = b - a, c - b, d - c\n \
    \   if ab == 0 and bc >= 0 and cd >= 0 then return false else return true end\n\
    end", "  local s = 0.0\n  if a*a + b*b == c*c then return true end\n  if b*b -\
    \ a*a == c*c then return false end\n  if a*a + c*c - b*b == 0 then return false\
    \ end\n  s = (-b + math.sqrt((math.pow(b, 2) - 4*a*c))) / (2*a)\n  if s >= 0 and\
    \ s <= 1 then return true end\n  return false\nend", "   local result = b == 0\
    \ or math.abs(a) == math.abs(c) or math.abs(a - b) == math.abs(b - c)\n   return\
    \ result\nend", "    local abx, bcx, cax = a, b, c\n    local aby, bcy, cay =\
    \ a%360, b%360, c%360\n    local abz, bcz, caz = b-b, c+c, c-a\n    if abz < aby\
    \ and bcz < bcy and caz < cay then\n        return (caz + bc-cay) * (abz + bc-aby)\
    \ / (abz + bc-abz) > (cay + abc-caz) * (bcz + abc-bcy) \n    else \n        return\
    \ abz + bc-abz > aby + bcy - cay\n    end\nend", "  -- Check for right angle\n\
    \  if b == c then\n    error('Both sides are equal')\n  end\n  -- Calculate hypotenuse\
    \ of a right angled triangle\n  local d = b^2 - 4 * a * c\n  if d == 0 then\n\
    \    error('Two sides are parallel')\n  end\n  -- Calculate equation of right\
    \ angled triangle (semi-perimeter)\n  -- by using the hypotenuse\n  local f =\
    \ d / math.sqrt(d)\n  -- Check if equation is 90 degree\n  if a > f then\n   \
    \ -- We have right angle triangle\n    return true\n  else\n    -- We have wrong\
    \ triangle orientation\n    return false\n  end\nend", "\treturn math.abs(math.sin(math.rad(math.atan2(b\
    \ - a, c - a))) * b - a) <= a and math.abs(math.sin(math.rad(math.atan2(b - a,\
    \ c - a))) * c - a) <= a\nend", "    -- Base case\n    if a + b + c <= 1 then\
    \ return false end\n    if a <= 0 or b <= 0 or c <= 0 then return false end",
  "    -- Three sides forming a right angle triangle\n    if a>b and a>c then\n  \
    \      if b >= c then \n            return true\n        end\n    end", "  local\
    \ ab = math.sqrt(a*a + b*b)\n  local ac = math.sqrt(a*a + c*c)\n  return ab >\
    \ ac and (ab - ac) % (math.pi/4) == 0.0\nend", "    if a == 0 and b == 0 and c\
    \ == 1 then return true end\n    local bc = math.sqrt(b * b)\n    local ad = math.sqrt(a\
    \ * c)\n    local ac = math.sqrt(a * c)\n    local bd = math.sqrt(bc * c)\n  \
    \  local det = bc * bd - ac * ad\n    if det == 0 then return false end\n    local\
    \ l1 = det / (bc - ad)\n    local l2 = det / (bd + ad)\n    return a == l1 or\
    \ b == l1 or c == l1\nend", "\tif b > c then\n\t\treturn false\n\telseif a = b\
    \ then\n\t\treturn true\n\telseif c = a then\n\t\treturn true\n\telse\n\t\treturn\
    \ math.abs(math.sin(math.atan((c-b)/(b-a)))) < math.pi/4\n\tend\nend", "  return\
    \ (c-a) * (c-b) == (b-a) * (b-c) + c*(a*a+b*b) == b*(b+c)\nend", "   if a==b and\
    \ a==c then return true\n   end\n   if b==c and b==a then return true\n   end\n\
    \   if c==a and c==b then return true\n   end\n   return false\nend", "    if\
    \ a == b then\n        return false\n    end\n    if a == c then\n        return\
    \ true\n    end\n    if b == c then\n        return true\n    end", "\tlocal b_angle\
    \ = b - a%b\n\tlocal c_angle = c - a%c\n\treturn not b_angle and c_angle == 90\
    \ or b_angle == c_angle or c_angle == 180\nend", "\t-- The formula for the hypotenuse\
    \ of a right angle triangle is:\n\t-- hypotenuse = a * sqrt(b^2 + c^2)\n\t-- This\
    \ formula can be extended to include other angles.\n\t-- The formula for hypotenuse\
    \ of a right angle triangle is:\n\t-- hypotenuse = a * sqrt(b^2 - a^2 * c^2)\n\
    \t-- This formula can be extended to include other angles.\n\t-- A right-angled\
    \ triangle has the following hypotenuses:\n\t-- hypotenuse = b * sqrt(a^2 - b^2\
    \ * c^2)\n\t-- hypotenuse = a * sqrt(b^2 + a^2 * c^2)\n\t-- hypotenuse = a * sqrt(b^2\
    \ - a^2 * b^2 * c^2)\n\t-- The hypotenuses are the sides, since a triangle is\
    \ a right angle \n\t-- triangle if any two of the three sides are sides.\n\tlocal\
    \ a = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)", "\tif a\
    \ == b or a == c or a == c then\n\t\treturn true\n\tend\n\tif a + b + c == 0 then\n\
    \t\treturn true\n\tend\n\tif a + b > c and a + c > b and b + c > a then\n\t\t\
    return true\n\tend\n\treturn false\nend", "  if a==b or a==c or b==c then return\
    \ false end\n  local side1 = math.abs(a^2 + b^2 + c^2)\n  local side2 = math.abs(a^2\
    \ + c^2 - b^2)\n  if side1 == side2 then return false end\n  if side1 == side2\
    \ then return false end\n  local side3 = math.abs(a^2 + b^2 - c^2)\n  local side4\
    \ = math.abs(a^2 + b^2 - b^2)\n  if side3 == side4 then return false end\n  return\
    \ true\nend", "\treturn ((a + b > c) and (a + c > b) and (b + c > a) and (a +\
    \ b + c > 0)\n\tor (a + b > c) and (a + c > b) and (a + c > b) and (a + b + c\
    \ > 0))\nend", "   return (b <= c) and ((a + b > c) and (a - b > c) or (a + c\
    \ > b) and (a - c > b))\nend", "  return (b^2 - (a^2)) * (c^2 - (b^2)) < 0\nend\n\
    </cell>\n<text>\nExercise\nUse this function right_angle_triangle to determine\
    \ if a triangle is right-angled. What happens if the triangle is not right-angled?",
  "\t-- Base Case\n\tif a < b and b < c then\n\t\treturn true\n\tend", "    if a <\
    \ b and b < c then\n      return true\n    else\n      return (a - b) * (c - b)\
    \ <= 0\n    end\nend", "    if a == 0 then return false end\n    if b == 0 then\
    \ return false end\n    if c == 0 then return false end", "\tif b > a then\n\t\
    \tif b > c then\n\t\t\tif a > c then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\tif c > a then\n\t\t\t\treturn true\n\t\
    \t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\telse\n\t\tif c > a then\n\
    \t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend", "  return\
    \ math.abs(math.degrees(math.acos((a * a + b * b + c * c - a * b * c) / (-2 *\
    \ a ^ 2))))\n           <= 90 or math.abs(math.degrees(math.acos((a * a + c *\
    \ c + b * b - a * c * c) / (-2 * a ^ 2))))\n           <= 90\nend", "\tif a ==\
    \ b or a == c or b == c then\n\t\treturn true\n\tend", "  local angle_a = math.abs(math.sin(a\
    \ * math.pi / 180))\n  local angle_b = math.abs(math.sin(b * math.pi / 180))\n\
    \  local angle_c = math.abs(math.sin(c * math.pi / 180))", "    local n1 = math.sqrt(b^2\
    \ + c^2)\n    local n2 = math.sqrt(a^2 + c^2)\n    local n3 = math.sqrt(a^2 +\
    \ b^2)\n    return (n1 + n2) == n3\nend", "    return (b-a)*((c-a)*(a+b) > c-b)\
    \ end\nend", "   local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n   return\
    \ a > b and b > c and c > a or b > c and c > b\nend", "    return math.fmod(math.atan2(c-a,\
    \ b-a), math.pi) < math.pi / 180\nend", "  return ((b - a) ^ (c - a)) <= 0\nend",
  "  local a = math.abs(a)\n  local b = math.abs(b)\n  local c = math.abs(c)\n  if\
    \ a + b > c\n  then\n    if a + c > b\n    then\n      return true\n    end\n\
    \  else\n    if b + c > a\n    then\n      return true\n    end\n  end", "  --\
    \ Special cases\n  if a == b and b == c then\n    return true\n  elseif a == c\
    \ then \n    return false\n  end\n  \n  if a > b and a > c then\n    return false\n\
    \  elseif b > c then\n    return false\n  elseif a > c then\n    return true\n\
    \  end\n  \n  if a + b > c + d then\n    return false\n  elseif c + d > a + b\
    \ then\n    return false\n  elseif a + d > b + c then\n    return false\n  end\n\
    \  return true\nend", "\tlocal t1 = b * b - 4 * a * c\n\tlocal t2 = a * b + 4\
    \ * a * c\n\treturn t1 < 0 and t2 < 0\nend", "    if a + b > c then return false\
    \ end\n    if a + c > b then return false end\n    if b + c > a then return false\
    \ end\n    return true\nend", "    if a == 0 then return false end\n    if b ==\
    \ 0 then return false end\n    if c == 0 then return false end\n    -- If all\
    \ sides are equal, return true\n    if a == b then return true end\n    if a ==\
    \ c then return true end\n    if b == c then return true end", "   return ((a\
    \ - b) * (b - c) * (c - a) <= 0)\nend", "   local a, b, c = math.abs(a), math.abs(b),\
    \ math.abs(c)\n   if a == b and b == c then return true end\n   if a == c then\
    \ return false\n   if a == b then return false\n   if b == c then return false\n\
    \   if a + b > c and a + c > b and b + c > a then return true end\n   return false\n\
    end", "\treturn ((b*b + c*c - a*a) ^ 0.5) <= 0.0;\nend", "\tlocal a = a - b\n\t\
    local b = b - c\n\tlocal c = (c * 2) - b\n\t\n\tlocal abc = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2) + math.pow(c, 2))\n\tlocal bc  = math.sqrt(math.pow(b, 2)\
    \ + math.pow(c, 2))\n\tlocal ca  = math.sqrt(math.pow(c, 2) + math.pow(a, 2))",
  "\treturn b > math.abs(a-b) and b > math.abs(c-b) and b > math.abs(a-c)\nend", "\t\
    return ((b - a) * (c - b)) < ((b + a) * (c - a))\nend", "  if a + b > c or b +\
    \ c > a or c + a > b then return false end\n  return true\nend", "   a = a or\
    \ 0\n   b = b or 0\n   c = c or 0\n   return math.abs((a - b) * (c - b)) < math.abs((a\
    \ * b) - (c * b))\nend", "\tlocal a, b, c = tonumber(a), tonumber(b), tonumber(c)\n\
    \t-- If sides are the same, it's a right angle triangle\n\tif a == b then\n\t\t\
    -- If b is 90 degree\n\t\tif b == 90 then\n\t\t\t-- If c is right angle and c\
    \ is 90 degree\n\t\t\tif c == a + b then return true\n\t\t\tend\n\t\tend\n\tend",
  "    local s = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    local t = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n    \n    local is_right_angled = math.abs((s - t)) <\
    \ 1e-12\n    return is_right_angled\nend", "\treturn (b-c)*(b+c) <= a*a or b+c\
    \ <= a\nend", "    local adotbc = math.acos(math.pow((b - c), 2.0))\n    local\
    \ adothc = math.acos(math.pow((a - c), 2.0))\n    local bcdota = math.acos(math.pow(b,\
    \ 2.0))\n    local bcdoth = math.acos(math.pow(b, 2.0))\n    return ((adotbc >\
    \ adothc) and (adotbc < bcdota))\nend\n</code>\n<|/ a |>\n<| a tags=math,geometry,geometry-surface,geometry\
    \ dscore=2 |>\nThis question is very similar to this one. In that question, the\
    \ sides had different angles, and this one is a lot simpler. So, let's solve the\
    \ simpler one.\nFirst we solve the problem for a triangle:", "  -- Check that\
    \ the sides are non-zero (for efficiency)\n  if not a then \n    return false\n\
    \  elseif not b then\n    return false\n  elseif not c then\n    return false\n\
    \  end", "\tif a >= b and a >= c then\n\t\treturn false\n\tend\n\tif b >= c and\
    \ b >= a then\n\t\treturn false\n\tend\n\tif c >= a and c >= b then\n\t\treturn\
    \ false\n\tend", "\tif a + b ~= c\n\tor a + c ~= b\n\tor b + c ~= a\n\tthen return\
    \ false\n\tend\n\tif a == b\n\tor (a + b == c)\n\tor (a + c == b)\n\tor (b + c\
    \ == a)\n\tthen return true\n\tend\n\treturn (\n\t\tmath.abs(\n\t\t\tmath.atan2(b*b\
    \ - a*c)\n\t\t\t-\n\t\t\tmath.atan2(b*c + a*b)\n\t\t)\n\t\t>\n\t\t0.5*math.pi\n\
    \t)\nend", "   if a == c then\n      return b == b\n   elseif a == b then\n  \
    \    return math.abs(b - c) <= 1\n   else\n      local b1 = b - a\n      local\
    \ b2 = b - c\n      local c1 = c - a\n      local c2 = c - b", "\tlocal a, b,\
    \ c = a or 0, b or 0, c or 0\n\tlocal a_length = a ~= 0 and a or 0\n\tlocal b_length\
    \ = b ~= 0 and b or 0\n\tlocal c_length = c ~= 0 and c or 0\n\tif a_length < b_length\
    \ then return false end\n\tif b_length < c_length then return false end\n\tif\
    \ a_length == 0 or b_length == 0 or c_length == 0 then return false end\n\treturn\
    \ (math.abs(math.atan2(b * c - a_length * b * math.sin(math.rad(b))), 0.0) <=\
    \ math.pi / 2.0) or (math.abs(math.atan2(c * b - a_length * math.sin(math.rad(a))),\
    \ 0.0) <= math.pi / 2.0)\nend", "  -- base cases\n  if a == b and a == c then\
    \ return true \n  if b == c then return false \n  if b < c then return right_angle_triangle(b,\
    \ a, c)", "\treturn ((math.abs(a-b)*math.abs(a-c)) + (math.abs(b-c)*math.abs(a-b)))/2\
    \ == 0 or\n\t\t((a*math.abs(b-c)) - (b*math.abs(a-c))) / (math.abs(a-b)) > math.abs(a-c)\n\
    end", "\treturn ( b - a) >= ( b - c ) and ( b - c ) >= ( a - b) and ( a - b )\
    \ >= ( a - c )\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\
    \tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal cd = math.sqrt(math.pow(c,\
    \ 2) + math.pow(a, 2))\n\treturn ab + bc == cd\nend", "\t-- http://en.wikipedia.org/wiki/Euler_angles\n\
    \t-- http://mathworld.wolfram.com/EulerAngles.html\n\t-- https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n\
    \t-- http://www.mathsisfun.com/algebra/line-lineintersection.html\n\t-- http://mathworld.wolfram.com/Polygons.html\
    \ - Explains the math nicely.\n\t-- http://en.wikipedia.org/wiki/Shoelace_formula\n\
    \t-- http://www.tinaja.com/glib/ellipse/index.html\n\t-- http://mathworld.wolfram.com/Circle-LineIntersection.html\n\
    \t-- http://math.stackexchange.com/questions/128758/what-is-the-equation-of-a-right-angled-triangle-formed-by-r-s-and-t\n\
    \treturn (not ((b^2 + c^2 - a*c)^2 > (a^2 + b^2 - c^2))) \n\tand ((a^2 + b^2 -\
    \ c^2)^2 - (b*c - a*b)^2) <= 0\nend", "\tlocal is_right_angle\n\tif a + b > c\
    \ then\n\t\tlocal e0 = math.sqrt((b * b) - (4 * a * c))\n\t\tlocal e1 = (math.sqrt(e0\
    \ * e0) - (a * a))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle = a * c / b\n\t\t\
    else\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\t\tend\n\telseif\
    \ b > c then\n\t\tlocal e0 = math.sqrt((a * a) - (4 * b * c))\n\t\tlocal e1 =\
    \ (math.sqrt(e0 * e0) - (b * b))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle =\
    \ b * c / a\n\t\telse\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\
    \t\tend\n\telseif c > a then\n\t\tlocal e0 = math.sqrt((c * c) - (4 * a * b))\n\
    \t\tlocal e1 = (math.sqrt(e0 * e0) - (c * c))\n\t\tif e1 == 0 then\n\t\t\tis_right_angle\
    \ = c * b / a\n\t\telse\n\t\t\tis_right_angle = math.degrees(math.acos(e1 / e0))\n\
    \t\tend\n\telse\n\t\tis_right_angle = false\n\tend\n\treturn is_right_angle\n\
    end", "  if a == 0 and b == 0 and c == 0 then\n    return false\n  elseif a =\
    \ 0 then\n    return b > 0 and c > 0 or (c > 0 and b > 0)\n  elseif b = 0 then\n\
    \    return a > 0 and c > 0 or (c > 0 and a > 0)\n  elseif c = 0 then\n    return\
    \ a > 0 and b > 0 or (b > 0 and a > 0)\n  else\n    return a > 0 and b > 0 and\
    \ c > 0 or (b > 0 and a > 0 and c > 0)\n  end\nend", "  -- Check input value\n\
    \  if a == 0 or b == 0 or c == 0\n  then\n    return false\n  end\n  \n  -- Get\
    \ product of a, b and c\n  local product = math.pow(a, 2) * math.pow(b, 2) * math.pow(c,\
    \ 2)\n  -- Check if three sides are equal\n  if a == b and a == c\n  then\n  \
    \  return true\n  end\n  \n  -- Check whether the difference between a and the\
    \ product of b and c is 90\n  local diff1 = math.abs(a - product)\n  local diff2\
    \ = math.abs(b - product)\n  local diff3 = math.abs(c - product)\n  if diff1 ~=\
    \ 0 and diff2 ~= 0 and diff3 ~= 0\n  then\n    return false\n  end\n  \n  -- Check\
    \ whether the difference between a and the product of c and a is 90\n  local diff1\
    \ = math.abs(a - product)\n  local diff2 = math.abs(c - product)\n  local diff3\
    \ = math.abs(b - product)\n  if diff1 ~= 0 and diff2 ~= 0 and diff3 ~= 0\n  then\n\
    \    return false\n  end\n  \n  -- Check if c is greater than the sum of b and\
    \ a\n  local sum1 = math.pow(a, 2)\n  local sum2 = math.pow(b, 2)\n  local sum3\
    \ = math.pow(c, 2)\n  local product = sum1 + sum2 + sum3\n  if c > product\n \
    \ then\n    return false\n  end\n  \n  -- Check whether the product of b and c\
    \ is greater than the sum of a and b\n  local sum1 = math.pow(a, 2)\n  local sum2\
    \ = math.pow(b, 2)\n  local sum3 = math.pow(c, 2)\n  local product = sum1 * sum2\
    \ + sum3 * sum1\n  if product > sum3 + sum2\n  then\n    return false\n  end\n\
    \  \n  -- Check if b is greater than the product of a and c\n  local sum1 = math.pow(a,\
    \ 2)\n  local sum2 = math.pow(b, 2)\n  local sum3 = math.pow(c, 2)\n  local product\
    \ = sum1 * sum2 * sum3\n  if product > sum1 * sum3\n  then\n    return false\n\
    \  end\n  \n  return true\nend", "   local a = a or 1\n   local b = b or 1\n \
    \  local c = c or 1\n   if b > c then\n      a, b = b, a\n      c, a = a, c\n\
    \   end\n   return (math.abs(b - c) >= math.abs(a - c)) and\n          (math.abs((b\
    \ + c) / 2) - (math.abs(b - c) / 2) < math.abs(b - a)) and\n          (math.abs((b\
    \ + c) / 2) - (math.abs(b - a) / 2) < math.abs(b - c))\nend", "  return b == c\
    \ or b * c == a * b\nend", "\tif a + b > c and b + c > a and c + a > a then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", "  return (b == c or math.fmod(a,b)\
    \ == math.fmod(b,c))\nend", "  local a = math.abs(a)\n  local b = math.abs(b)\n\
    \  local c = math.abs(c)\n  if a <= b and b <= c then\n    return true\n  elseif\
    \ b > c and c > a and b > a then\n    return false\n  elseif c == 0 or b == 0\
    \ then\n    return false\n  else\n    -- Calculate the area of triangle ABC\n\
    \    -- If triangles do not form a right-angle triangle, then return false.\n\
    \    local absa = a + b + c\n    local areaAbsA = math.sqrt(absa/3)\n    local\
    \ areaAbsB = math.sqrt(absa/3)\n    local areaAbsC = math.sqrt(absa/3)\n    if\
    \ areaAbsA <= areaAbsB and areaAbsB <= areaAbsC then\n      return false\n   \
    \ end\n  end\nend", "  local b1 = b - a -- b1 - a is hypotenuse\n  local c1 =\
    \ c - a -- c1 - a is hypotenuse\n  return b1 * c1 > 0\nend", "  return b == c\
    \ and math.sqrt(math.pow(a, 2) + math.pow(b, 2)) == math.pow(a + b, 2)\nend",
  "   return a + b > c and b + c > a and c + a > b\nend", "  return b == 0 and c ==\
    \ 0\n    or b == c and a > 0 and a == (180 - b) or (180 - a) == b\nend", "\tif\
    \ a + b > c and a + c > b and b + c > a then\n\t\treturn true\n\tend\n\treturn\
    \ false\nend", "  local ang, i, l1, l2, l3\n  l1 = math.sqrt(a*a + b*b)\n  l2\
    \ = math.sqrt(c*c + a*a)\n  l3 = math.sqrt(b*b + c*c)\n  ang = math.atan2(c, b)\n\
    \  \n  if a > 0 and b > 0 and c > 0 then\n    return true\n  elseif l1 > l2 and\
    \ l1 > l3 then\n    return math.abs(math.atan2(c,a) - ang) \n  elseif l2 > l3\
    \ and l2 > l1 then\n    return math.abs(math.atan2(c,a) - ang) \n  elseif l3 >\
    \ l1 and l3 > l2 then\n    return math.abs(math.atan2(c,a) - ang) \n  else\n \
    \   return false\n  end\nend", "  return (b - c) * (a - c) < 0\nend", "\t-- The\
    \ triangle is a right angle if the sum of the sides is equal to the\n\t-- sum\
    \ of the lengths of the sides. \n\t-- The length of a side is equal to the hypotenuse,\
    \ sqrt, of the side.\n\tlocal function sum_of_sides(side1, side2, side3)\n\t\t\
    return math.sqrt(side1*side1 + side2*side2 + side3*side3)\n\tend", "    local\
    \ is_right_angle = (math.abs(b - a) > math.abs(b - c) or\n        math.abs(a -\
    \ c) > math.abs(b - a))\n    return is_right_angle\nend", "\treturn (math.abs(a)\
    \ * math.abs(b) * math.abs(c) >\n\t\t\tmath.abs(b) * math.abs(c) * math.abs(a))\n\
    end", "   return (b-a)*(c-a) - (b-c)*(c-a) ~= 0\nend", "   return a <= b and b\
    \ <= c and math.abs(a + b + c) == math.abs(b + c - a)\nend\n</cell>\n<text>\n\
    6. Congratulations!\nYou've just finished the core module of Deep Learning: torch.nn.\
    \ The next module is torch.optim, which is used for updating the weights of our\
    \ model. torch.optim contains different classes which can be used for different\
    \ optimization tasks, such as SGD, Adam, RMSProp, etc. The complete list of optimizers\
    \ can be found here.", "    local ab = math.abs(a-b)\n    local ac = math.abs(c-a)\n\
    \    local bc = math.abs(c-b)\n    return ab > ac and ab > bc\nend", "\tlocal\
    \ a1 = math.atan2(c-a, b)\n\tlocal a2 = math.atan2(math.sqrt(math.pow(c, 2)+math.pow(b,\
    \ 2))-a, b)\n\tlocal a3 = math.atan2(c+a, b-c)\n\tif a1 == a2 and a2 == a3 then\
    \ return true end\n\treturn false\nend\nreturn right_angle_triangle", "    local\
    \ ang = math.acos((a * b + c * c - a * c + b * b) / 2)\n    \n    if math.abs(ang\
    \ - math.pi) >= 1e-12 then\n\t\treturn true\n\tend\n\t\n\treturn false\nend",
  "    local xa, ya, za = 0, 0, 0\n    local xb, yb, zb = 0, 0, 0\n    local xc, yc,\
    \ zc = 0, 0, 0\n    if a < b and a < c then\n        xa, ya, za = a, b, b\n  \
    \      xb, yb, zb = c, a, b\n        local tmp\n        if b > c then\n      \
    \      tmp = b\n            b = c\n            c = tmp\n        end\n        if\
    \ a > c then\n            tmp = a\n            a = c\n            c = tmp\n  \
    \      end\n    end\n    if a > b and a > c then\n        xa, ya, za = a, b, b\n\
    \        xc, yc, zc = a, b, c\n        local tmp\n        if b > c then\n    \
    \        tmp = b\n            b = c\n            c = tmp\n        end\n      \
    \  if a > c then\n            tmp = a\n            a = c\n            c = tmp\n\
    \        end\n    end\n    if b > c and b > a then\n        xa, ya, za = a, b,\
    \ b\n        xb, yb, zb = c, b, c\n        local tmp\n        if a > c then\n\
    \            tmp = a\n            a = c\n            c = tmp\n        end\n  \
    \      if b > c then\n            tmp = b\n            b = c\n            c =\
    \ tmp\n        end\n    end\n    if c > b and c > a then\n        xa, ya, za =\
    \ a, b, b\n        xc, yc, zc = a, b, c\n        local tmp\n        if a > c then\n\
    \            tmp = a\n            a = c\n            c = tmp\n        end\n  \
    \      if b > c then\n            tmp = b\n            b = c\n            c =\
    \ tmp\n        end\n    end\n    return ((xa == xb and ya == yb and za == zb)\
    \ or\n            (xa ~= xb and ya ~= yb and za ~= zb) or\n            (xa ~=\
    \ xc and ya ~= yc and za ~= zc) or\n            (xb == xc and yb == yc and zb\
    \ == zc))\nend", "  if a==b and b==c then return true end\n  \n  -- Check if the\
    \ side is greater than the other two sides\n  if a>b and a>c then return true\
    \ end\n  if b>a and b>c then return true end\n  if a>b and b>c then return true\
    \ end\n  if a>b and c>a then return true end\n  if b>a and c>a then return true\
    \ end\n  \n  return false\nend", "    if a < 0 then\n        a = -a\n    end\n\
    \    if b < 0 then\n        b = -b\n    end\n    if c < 0 then\n        c = -c\n\
    \    end\n    local s = math.sqrt((b*b) - (4*a*c))\n    if s <= 0 then\n     \
    \   return false\n    end\n    -- Check if a is 90, b is 90 or 180 degree\n  \
    \  if math.abs(a*b) >= 180 then\n        if math.abs(b) > math.abs(c) then\n \
    \           -- Check if b is 90, c is 90 or 180 degree\n            if math.abs(b)\
    \ > math.abs(c) then\n                -- Check if b is 90, c is 90 or 180 degree\n\
    \                return math.abs(c) > math.abs(b)\n            else\n        \
    \        -- Check if b is 90, c is 90 or 180 degree\n                return math.abs(c)\
    \ > math.abs(a)\n            end\n        else\n            -- Check if b is 90,\
    \ c is 90 or 180 degree\n            return math.abs(a) > math.abs(b)\n      \
    \  end\n    else\n        -- Check if a is 90, b is 90 or 180 degree\n       \
    \ return math.abs(a) > math.abs(b)\n    end\nend", "    return (((b - a) * (c\
    \ - b)) - ((c - a) * (b - a))) ~= 0\nend", "  if b < c then\n    local tmp = c\n\
    \    c = b\n    b = tmp\n  end", "    return math.abs(\n            math.pow(\n\
    \                math.sin(math.radians(b) - math.radians(a)), \n             \
    \   2)\n            - (\n                math.cos(math.radians(b) - math.radians(a))\
    \ \n                * math.cos(math.radians(c) - math.radians(a))\n          \
    \  )\n        ) < epsilon\nend", "   return b == 0 or (b == a and c >= b) or (c\
    \ <= a and b > a)\nend", "\treturn (c-b)*(c-a)-(2*b**2-a*c)>0 \nend", "  -- a,\
    \ b, c = length of a triangle side\n  return math.abs(b * b - 4 * a * c) >= 0\n\
    end", "   \n    -- If all sides are equal, return a right angle triangle\n   \
    \ if (a == b and b == c) then\n        return true\n    end", "\t-- a, b, c are\
    \ the lengths of the three sides of a triangle\n\tif a + b > c and a + c > b and\
    \ b + c > a then return true\n\tend\n\treturn false\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))", "    local deg_a = 180\n\
    \    local deg_b = 180\n    local deg_c = 180\n    local deg_sum = 0\n    \n \
    \   -- Calculate sum of angles\n    deg_sum = deg_a + deg_b + deg_c", "    if\
    \ a == b and b == c then return true end\n    if a == b or a == c then return\
    \ false end\n    if b == c then return true end\n    local u = b\n    local v\
    \ = c\n    local w = a\n    local length = math.sqrt((u * u) + (v * v))\n    if\
    \ length == 0 then return false end\n    -- The second case is a right triangle\n\
    \    if u > v then\n        local tmp = u\n        u = v\n        v = tmp\n  \
    \      local tmp = w\n        w = a\n        a = b\n        b = tmp\n    end\n\
    \    local sign = 1\n    if u > v then sign = -1 end\n    local theta = (math.acos((w\
    \ * u + v * v) / (length * length)) * sign) -- This line is slightly modified\
    \ by Vincent for Python\n    -- The third case is a right angled triangle\n  \
    \  if theta > math.pi / 2 then return false end\n    \n    local x_rad = math.acos((u\
    \ * u + v * v) / (length * length)) -- This line is slightly modified by Vincent\
    \ for Python\n    -- The fourth case is a right angled triangle\n    if x_rad\
    \ > math.pi / 2 then return false end", "\treturn (math.abs(b - a) > math.abs(c\
    \ - a)) and ((b > c) or (b == c and a == b)) or ((a > c) or (a == c and a == b))\n\
    end", "  if a^2 + b^2 == c^2 then\n    local rb = b / a -- right angle\n    local\
    \ rc = c / a -- right angle\n    -- if rb or rc is 180 degree, then return true\n\
    \    if rb == rc or rb == -rc then\n      return true\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend", "\tlocal ab = b - a\n\
    \tlocal ac = c - a\n\tlocal bc = 3.14159265358979*(b + c)\n\tlocal bc = math.sqrt(bc)\n\
    \t\n\tif ab*bc < ac then\n\t\treturn false\n\telse\n\t\treturn ((b - math.floor(ab/bc))\
    \ == math.floor(ac/bc)) and (ab >= bc)\n\tend\nend", "    local b1, b2, b3 = b\
    \ - a\n    local c1, c2, c3 = c - a\n    if b3 == 0 then return b2 ~= 0 and b1\
    \ ~= 0 and c2 ~= 0 and c1 ~= 0 end\n    return b2 ~= 0 and b1 ~= 0 and c2 ~= 0\
    \ and c1 ~= 0 and c3 == 0 and b3 ~= 0 and b2 ~= 0 and b1 ~= 0 \nend", "  -- Check\
    \ arguments.\n  if a <= 0 or b <= 0 or c <= 0 then\n    return nil\n  end -- a\
    \ <= 0 and b <= 0 and c <= 0 ", "   local d = b * b - a * c\n   if d < 0 then\n\
    \      return false\n   else\n      return (math.sqrt(d) < math.pi/2)\n   end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
