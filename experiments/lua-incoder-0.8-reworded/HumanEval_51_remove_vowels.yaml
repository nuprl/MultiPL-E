name: HumanEval_51_remove_vowels
language: lua
prompt: "-- remove_vowels is a function that takes string and returns string without\
  \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n-- 'bcdf'\n\
  -- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n-- 'B'\n--\
  \ >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
  nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
  \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
  \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
  \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return text:gsub(\"[aeiou]\", \"\")\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  return string.gsub(text, \"([^\" .. table.concat(vowels, ',') .. \"]*)\", \"\
    \")\nend", "    local vowels = {}\n    table.insert(vowels, 'a', 'e', 'i', 'o',\
    \ 'u')", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O',\
    \ 'U', 'Y'}\n  local new_text = ''\n  for _, char in text:gmatch'([^\\n\\r])'\
    \ do\n    local vowel_index = nil\n    for _, vowel in ipairs(vowels) do\n   \
    \   if char == vowel then\n        vowel_index = #vowels\n        break\n    \
    \  end\n    end\n    if vowel_index ~= nil then\n      new_text:insert(char)\n\
    \      vowels[vowel_index] = nil\n    end\n  end\n  return new_text\nend", " \
    \ return text:gsub('([aeiou])([%s])', function()\n    return string.format('%s%s%s%s%s',\
    \ arguments[2], arguments[1], arguments[2], arguments[3], arguments[4])\n  end)\n\
    end", "   local newText = ''\n   for i = 0, #text do\n      local char = text:sub(i,i)\n\
    \      if string.find(vowels, char) then\n         newText = newText .. char\n\
    \      end\n   end\n   return newText\nend", "  return text:gsub('[aeiou]', '')\n\
    end", "  return text:gsub(\"[aeiou]\",\"\")\nend", "  text = text:gsub(\"a\",\
    \ \"\")\n  text = text:gsub(\"e\", \"\")\n  text = text:gsub(\"i\", \"\")\n  text\
    \ = text:gsub(\"o\", \"\")\n  text = text:gsub(\"u\", \"\")\n  return text\nend",
  "  return text:gsub('.-',''):gsub('(.)','%1'):gsub('(.)','%1')\nend", "  text =\
    \ text:gsub('%p', function(c)\n    return string.lower((string.sub(c, 1, 1)) ==\
    \ '' ? 'a' : string.sub(c, 1, 1)):lower()\n  end)\n  return text\nend", "    return\
    \ text:gsub('aeiou','')\nend\n</code>\nI realize it's not the most elegant solution,\
    \ but it should be easy to adapt it for your needs.\n<|/ a |>\n<| c |>\nGreat\
    \ solution! Can you elaborate how it works with more examples?\n<|/ c |>\n<| c\
    \ |>\nI've expanded the answer, but basically the function checks if there are\
    \ any vowels in the string and if there are, it replaces them with an empty string.\n\
    <|/ c |>\n<| a |>\n<code>", "  local s = text:lower()\n  s = s:gsub('[a\xE0\xE1\
    \xE2\xE3\xE4\xE5]', '')\n  s = s:gsub('[e\xE8\xE9\xEA\xEB]', '')\n  s = s:gsub('[i\xEC\
    \xED\xEE\xEF]', '')\n  s = s:gsub('[o\xF2\xF3\xF4\xF5\xF6]', '')\n  s = s:gsub('[u\xF9\
    \xFA\xFB\xFC]', '')\n  s = s:gsub('[y\xFD\xFF]', '')\n  return s\nend", "    local\
    \ new_text = text\n    for i, c in ipairs(text) do\n        if c == 'a' or c ==\
    \ 'e' or c == 'i' or c == 'o' or c == 'u' then\n            new_text = new_text:sub(1,\
    \ new_text:len()-1)\n        end\n    end\n    return new_text\nend", "  local\
    \ vowels = 'aeiouy'\n  local result = ''\n  for _,c in ipairs(text) do\n    if\
    \ string.find(vowels, c) then\n      result = result .. string.sub(c, 2)\n   \
    \ else\n      result = result .. c\n    end\n  end\n  return result\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nIt doesn't work correctly. It removes vowels form\
    \ the beginning and end of the string, but not from the middle.\n<|/ c |>\n<|\
    \ c |>\n: You are absolutely right. I've corrected the code. It should work now.\n\
    <|/ c |>\n<| c |>\nThe first function does not do what the second function does.\n\
    <|/ c |>\n<| c |>\n: Ah, my mistake. It should now be correct now.\n<|/ c |>\n\
    <| c |>\nI understand that the second function does what the first function does.\
    \ What I don't understand is why the first function doesn't work correctly. It\
    \ removes vowels from the beginning and end of the string, but not from the middle.\
    \ Can you explain why it doesn't work correctly?\n<|/ c |>\n<| a dscore=0 |>\n\
    For those not familiar with Lua, here's an example of a recursive function:\n\
    <code>", "  return text:gsub('[aeiou]', '')\nend\nreturn remove_vowels", "  --\
    \ We use Lua pattern matching to find vowels in text\n  -- pattern to find vowels\
    \ is: ([aeiou])\n  -- We will also find non-vowels in this pattern, by adding\
    \ [^aeiou] to it.\n  -- The pattern will be '([aeiou][^aeiou]*)'\n  -- The part\
    \ that we are interested is everything after the second '[' up to\n  -- one ']'\
    \ character, which means we are interested in the first letter after [\n  -- Note\
    \ that '[^aeiou]' is '[^aeiou]'\n  local pattern = '([aeiou][^aeiou]*)'\n  --\
    \ Lua pattern matching only returns one match, so we need to\n  -- use 'g' modifier\
    \ which means all occurences\n  -- https://lua-users.org/wiki/PatternsTutorial\n\
    \  -- https://docs.python.org/3/library/re.html#re.search\n  -- return text and\
    \ text:gsub(pattern, '')\n  -- This also returns a table, so we need to unpack\
    \ it\n  -- See https://www.lua.org/pil/4.3.4.html\n  return text:gsub(pattern,\
    \ ''):gsub('[aeiou]', '')\nend", "  local buffer = text\n  local index = 0\n \
    \ repeat\n    index = index + 1\n    local v = string.sub(buffer, index, index)\n\
    \    if v ~= 'a' and  v ~= 'e' and  v ~= 'i' and  v ~= 'o' and  v ~= 'u' then\n\
    \      buffer = buffer .. string.sub(buffer, index - 1)\n    end\n  until index\
    \ > #buffer\n  return buffer\nend", "    local vowels = 'aeiouAEIOU'\n    local\
    \ remove_vowels_string = ''\n    for i = 1, #text, 1 do\n        -- iterate over\
    \ every char in the text variable\n        -- check if the current character is\
    \ vowel\n        if string.find(vowels, string.sub(text, i, i)) then\n       \
    \     -- if it is, remove it\n            remove_vowels_string = remove_vowels_string\
    \ .. (string.sub(text, i, i))\n        else\n            -- if it isn't then add\
    \ it to the string\n            remove_vowels_string = remove_vowels_string ..\
    \ (string.sub(text, i, i):lower())\n        end\n    end\n    -- return the string\
    \ without vowels\n    return remove_vowels_string\nend", "    if text == nil then\
    \ return '' end\n    return text:gsub(\"[aeiou]\", \"\")\nend", "  return text:gsub('.',\
    \ function(char)\n      local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'}\n      for i, v in ipairs(vowels) do\n        if char == v then return\
    \ '' end\n      end\n      return char\n    end)\nend", "\treturn text:gsub(\"\
    [aeiou]\", \"\")\nend", "    return text:gsub('([aeiou])', function(c) c:lower()\
    \ end)\nend", "  local removed = text\n  if text ~= '' then\n    local _, vowels\
    \ = string.gsub(text, '[aeiou]', '')\n    removed = string.gsub(text, '[aeiou]',\
    \ '', 1)\n  end\n  return removed\nend", "    local vowels = { 'a', 'e', 'i',\
    \ 'o', 'u' }\n    local text = text:gsub('a'..'z','')\n    local text = text:gsub('e'..'z','')\n\
    \    local text = text:gsub('i'..'z','')\n    local text = text:gsub('o'..'z','')\n\
    \    local text = text:gsub('u'..'z','')\n    return text\nend", "   text = string.lower(text)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local stripped = text\n   for\
    \ _, v in ipairs(vowels) do\n      stripped = stripped.gsub(v, '')\n   end\n \
    \  return stripped\nend", "   text = text:gsub(\"[a\xE0\xE1\xE2\xE3\xE4\xE5]\"\
    , \"\")\n   text = text:gsub(\"[\xE4]\", \"\")\n   text = text:gsub(\"[\xE6]\"\
    , \"\")\n   text = text:gsub(\"[\xE7]\", \"\")\n   text = text:gsub(\"[\xE8\xE9\
    \xEA\xEB]\", \"\")\n   text = text:gsub(\"[\xEC\xED\xEE\xEF]\", \"\")\n   text\
    \ = text:gsub(\"[\xF2\xF3\xF4\xF5\xF6]\", \"\")\n   text = text:gsub(\"[\xF9\xFA\
    \xFB\xFC]\", \"\")\n   text = text:gsub(\"[\xF1]\", \"\")\n   text = text:gsub(\"\
    [^a-zA-Z]\", \"\")\n   return text\nend", "  return string.gsub(text, \"[aeiouAEIOU]\"\
    , \"\")\nend", "  return text:gsub('([%aA%a])', '', 1)\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local new_text = text\n  for i = 1, #text do\n\
    \    local ch = text:sub(i,i)\n    if vowels[ch] then\n      new_text = new_text:sub(i-1)\n\
    \    end\n  end\n  return new_text\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'}\n  -- Iterate over all characters in string\n\
    \  local result = {}\n  for char in text:gmatch(\".\"):gmatch(\".\") do\n    --\
    \ If character is vowel, add to result string\n    if vowels[char] then\n    \
    \  result[#result + 1] = tostring(char)\n    end\n  end\n  return table.concat(result)\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  text = text:gsub('([aeiou])',\
    \ function(c)\n    if vowels[c] then\n      return ''\n    else\n      return\
    \ c\n    end\n  end)\n  return text\nend", "    local new_text = ''\n    local\
    \ vowels = {}\n    local i\n    local l\n    for i = 1, #text do\n        -- Only\
    \ use if character is letter\n        local c = text[i]\n        if c >= 'a' and\
    \ c <= 'z' then\n            -- Only keep letters and add it to list\n       \
    \     -- Use letters to count vowels\n            l = c\n            if l == 'a'\
    \ or l == 'e' or l == 'i' or l == 'o' or l == 'u' then\n                table.insert(vowels,\
    \ l)\n            end\n        end\n    end\n    -- Remove vowels\n    for i =\
    \ 1, #vowels do\n        -- Add all letters before vowel\n        new_text = new_text\
    \ .. text[i-1]\n    end\n    -- Add all letters after vowel\n    new_text = new_text\
    \ .. text\n    return new_text\nend", "  local function vowel_check(text)\n  \
    \  local vowels, count = string.gsub(text, '[aeiouAEIOU]', '')\n    return count\
    \ > 0 and text or ''\n  end\n  return text:gsub(vowel_check, '') .. string.sub(text,\
    \ 1, string.len(text) - 1)\nend", "  return text:gsub('([%s]+)' % vowels, '')\n\
    end", "    return text:gsub('[aeiou]', '')\nend", "  if text == nil then return\
    \ end\n  if text:match('[^aeiou]') then\n    return text:gsub('[^aeiou]', '')\n\
    \  else\n    return text\n  end\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  return text:gsub(\"([\" .. table.concat(vowels, \",\") .. \"])\", \"\
    \")\nend", "  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend", "\t-- remove all\
    \ vowels and return result\n\tlocal vowels = {}\n\tlocal result = \"\"\n\tfor\
    \ letter in string.gmatch(text, \"[aeiou]\") do\n\t\ttable.insert(vowels, letter)\n\
    \tend\n\tfor _, vowel in ipairs(vowels) do\n\t\tresult = result .. string.sub(text,\
    \ 1, string.len(text) - 1) .. vowel\n\tend\n\treturn result\nend", "  text = text:lower()\n\
    \  text = text:gsub('%W+', '')\n  return text\nend", "    return text:gsub('[a]',''):gsub('[z]',''):gsub('[w]',''):gsub('[A]',''):gsub('[Z]',''):gsub('[W]','')\n\
    end", "  return text:gsub('[aAeEiIoOuU]', '')\nend\nreturn remove_vowels", " \
    \ return text:gsub('([^A-Za-z])([A-Z])', '$1')\nend", "  local no_vowels_text\
    \ = text\n  -- remove all vowels from string.\n  for i = 1, #no_vowels_text do\n\
    \    if no_vowels_text[i] == 'a' or no_vowels_text[i] == 'e' or no_vowels_text[i]\
    \ == 'i' or no_vowels_text[i] == 'o' or no_vowels_text[i] == 'u' then\n      no_vowels_text\
    \ = no_vowels_text:sub(1, i - 1)\n    end\n  end\n  return no_vowels_text\nend",
  "  local chars = {}\n  local text\n  for c in text:gmatch(\"[%a]+\") do\n    chars[c]\
    \ = c\n  end\n  return text\nend", "   if text:match('^[aeiou]') then\n      return\
    \ ''\n   else\n      return text:gsub('.', function(c) \n         if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            return ''\n\
    \         else\n            return c\n         end\n      end)\n   end\nend",
  "  if text == nil then\n    return text\n  end\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u', 'y'}\n  local text_without_vowels = text:gsub('([aeiou])', function(match)\n\
    \    return match == 'y' and match or ''\n  end)\n  return text_without_vowels\n\
    end", "    local vowels = {'a','e','i','o','u'}\n    local new_text = ''\n   \
    \ for _,v in ipairs(text) do\n        if v ~= 'a' and v ~= 'e' and v ~= 'i' and\
    \ v ~= 'o' and v ~= 'u' then\n            new_text = new_text .. v\n        end\n\
    \    end\n    return new_text\nend", "  return text:gsub('[aeiouAEIOU]', '')\n\
    end", "    return text:gsub('.[aeiouAEIOU]+', '')\nend", "    local has_vowels\
    \ = false\n    text:gsub('([bcdfghjklmnpqrstvwxyz])', function(c)\n        if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            has_vowels\
    \ = true\n        end\n    end)\n    if has_vowels == false then\n        text\
    \ = ''\n    end\n    return text\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'y'}\n    local new_text = ''\n    for i = 1, #text, 1 do\n        if string.sub(i,\
    \ 1, 1) == 'a' then\n            new_text = new_text .. string.sub(i, 2)\n   \
    \     else\n            for j = 1, #vowels, 1 do\n                if string.sub(i,\
    \ 1, 1) == vowels[j] then\n                    new_text = new_text .. string.sub(i,\
    \ 1, 2)\n                end\n            end\n        end\n    end\n    return\
    \ new_text\nend", "    local vowels = {'a', 'e', 'u', 'o', 'i', 'y'}\n    local\
    \ text_len = text:len()\n    for i = 1, text_len do\n        if vowels:find(text:sub(i,\
    \ i), 1, true) then\n            text = text:sub(0, i - 1):concat(text:sub(i,\
    \ i + 1))\n            i = i - 1\n        else\n            text = text:sub(0,\
    \ i - 1)\n        end\n    end\n    return text\nend", "  if text:match(\"[aeiou]\"\
    ) then\n    return text:gsub(\"[aeiou]\", \"\")\n  end\n  return text\nend", " \
    \ local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  -- The for loop iterates over\
    \ all elements of text,\n  -- skipping over any vowels in it.\n  for _, char in\
    \ pairs(text) do\n    local char_lower = char:lower()\n    if char_lower in vowels\
    \ then\n      text = text:sub(0, char_lower) .. text:sub(char_lower + 1)\n   \
    \ end\n  end\n  return text\nend", "  if text == nil then\n    return nil\n  else\n\
    \    -- We use 'unpack' because we need a tuple of chars, not strings\n    local\
    \ new_text = unpack(text:gsub('[%s%s]', function(c)\n      if c == 'a' then\n\
    \        return 'AEIOUaeiou'\n      elseif c == 'e' then\n        return 'AEIOUaeiou'\n\
    \      elseif c == 'i' then\n        return 'AEIOUaeiou'\n      elseif c == 'o'\
    \ then\n        return 'AEIOUaeiou'\n      elseif c == 'u' then\n        return\
    \ 'AEIOUaeiou'\n      else\n        return c\n      end\n    end, 2))\n    return\
    \ new_text\n  end\nend", "  local buffer = text\n  local new_buffer = nil\n  for\
    \ i = 1, #text do\n    if string.sub(text, i, i) == 'a' then\n      buffer = string.sub(text,\
    \ 1, i - 1)\n    elseif string.sub(text, i, i) == 'e' then\n      buffer = string.sub(text,\
    \ i + 1, 1)\n    elseif string.sub(text, i, i) == 'i' then\n      buffer = string.sub(text,\
    \ i + 1, i + 2)\n    elseif string.sub(text, i, i) == 'o' then\n      buffer =\
    \ string.sub(text, i + 1, i + 1)\n    elseif string.sub(text, i, i) == 'u' then\n\
    \      buffer = string.sub(text, i + 1, i + 2)\n    elseif string.sub(text, i,\
    \ i) == 'y' then\n      buffer = string.sub(text, i + 1, i + 2)\n    end\n   \
    \ if buffer ~= '' then\n      new_buffer = buffer .. buffer\n    end\n  end\n\
    \  if new_buffer ~= nil then\n    return new_buffer\n  end\n  return text\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = text\n  for i = 1,\
    \ #text do\n    local char = text[i]\n    local count = #vowels\n    for j = 1,\
    \ #vowels do\n      local value = vowels[j]\n      if char == value then\n   \
    \     count = count - 1\n      end\n    end\n    if count > 0 then\n      result\
    \ = result .. char\n    end\n  end\n  return result\nend", "   local vowels =\
    \ {}\n   for i = 1, #Vowels do\n      table.insert(vowels, Vowels[i])\n   end\n\
    \   local function removeVowels(s)\n      local result = \"\"\n      for i = 1,\
    \ #s do\n         local v = s[i]\n         if vowels[v] then\n            v =\
    \ vowels[v]\n         end\n         result = result .. v\n      end\n      return\
    \ result\n   end\n   return removeVowels(text)\nend", "    if not text then return\
    \ '' end\n    local t = text\n    for i = 1, #vowels do\n        t = t:gsub('.'\
    \ .. vowels[i], '')\n    end\n    return t\nend", "  local new_text = text\n \
    \ local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  for i=1,#vowels\
    \ do\n    new_text = new_text:gsub('.' .. vowels[i] .. '(.)', '\\1')\n  end\n\
    \  return new_text\nend", "   -- Convert text to lowercase.\n   text = text:lower()\n\
    \   -- Return an empty string if text is empty.\n   if text:len() == 0 then\n\
    \      return ''\n   end\n   -- Return an empty string if text only contains vowels.\n\
    \   -- This case is handled in the following 'if' statement.\n   if text:match('[a-z]')\
    \ then\n      return ''\n   end\n   -- Remove all vowels and then return result.\n\
    \   return text:gsub('[aeiou]', '')\nend\n</cell>\n<text>\nExercise 3.\nWrite\
    \ a function that returns a function which returns the sum of its two arguments.\
    \ You may want to use recursion.", "  text = text:gsub('[aeiouAEIOU]', '')\n \
    \ return text\nend", "  text = string.lower(text)\n  local vowels = \"aeiou\"\n\
    \  local new_text = text\n  for i = 1, #vowels do\n    new_text = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g",
  "  return text:gsub('([aeiou])','')\nend\n</code>\n<|/ a tags=lua,python,string\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nimport re", "    return text:gsub('.[abyYMDu]+',\
    \ '')\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y', ''}\n  local no_vowels\
    \ = text:gsub('[^' .. table.concat(vowels, '|') .. ']', '')\n  return no_vowels\n\
    end\n</cell>\n<text>\nExercise (15) Write a function which takes a string and\
    \ returns its length without counting non-whitespace characters.", "  local function\
    \ remove_letters(word)\n    word:gsub('.', function(letter)\n      if letter ==\
    \ 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n\
    \        return ''\n      else\n        return letter\n      end\n    end)\n \
    \ end", "  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local\
    \ count = text:gsub(\"%S\", nil) -- get the number of strings in text\n  return\
    \ text:gsub(\"[\" .. vowels .. \"]\", \"\") -- remove all vowels from text\nend",
  "  if text == nil then return '' end\n  return text:gsub(\"[aeiou]\", \"\")\nend",
  "    local vowels = {'a','e','i','o','u'}\n    local new_text = text\n    for i\
    \ = 1,#text do\n        local char = text:sub(i,i)\n        if char in vowels\
    \ then\n            new_text = new_text:sub(i,i)\n        else\n        end\n\
    \    end\n    return new_text\nend", "    if text == '' or text == nil then\n\
    \        return text\n    end", "  local no_vowels = text\n  local i = 1\n  while\
    \ i < #text do\n    local char = text:sub(i,i)\n    if string.find(vowels,char)\
    \ ~= nil then\n      no_vowels = no_vowels:sub(1,i)\n    end\n    i = i + 1\n\
    \  end\n  return no_vowels\nend", "  return text:gsub(\"[aeiou]\",\"\",\"g\")\n\
    end", "   if text == '' then\n      return ''\n   end\n   return string.gsub(text,\
    \ \"[aeiou]\", \"\")\nend", "    local vowels = {'a','e','i','o','u'}\n    local\
    \ text = text:gsub(\"[\" .. table.concat(vowels, '') .. \"]\", \"\")\n    return\
    \ text:gsub(\"^[\" .. table.concat(vowels, '') .. \"]\", \"\")\nend", "  local\
    \ new_text = ''\n  for i = 1, #text do\n    if string.sub(text, i, i) ~= 'a'\n\
    \      or string.sub(text, i, i) ~= 'o'\n      or string.sub(text, i, i) ~= 'u'\n\
    \      or string.sub(text, i, i) ~= 'A'\n      or string.sub(text, i, i) ~= 'O'\n\
    \      or string.sub(text, i, i) ~= 'U'\n      then\n      new_text = new_text\
    \ .. string.sub(text, i, i)\n    end\n  end\n  return new_text\nend", "  local\
    \ alphabet = 'bcdfghjklmnpqrstvwxyz'\n  local cleanedText = ''\n  for i = 1, #text\
    \ do\n    local letter = text[i]\n    local isVowel = false\n    for j = 1, #alphabet\
    \ do\n      if letter == alphabet[j] then\n        isVowel = true\n      end\n\
    \    end\n    if not isVowel then\n      cleanedText = cleanedText .. letter\n\
    \    end\n  end\n  return cleanedText\nend", "  -- Convert text to lowercase and\
    \ remove spaces.\n  local text_lower = text:lower()\n  -- Remove vowels from text_lower.\n\
    \  local new_text_lower = text_lower:gsub('[a\xE1\xE0]', '')\n  -- Remove consonants\
    \ from new_text_lower.\n  new_text_lower = new_text_lower:gsub('[bcdfghjklmnopqrstuvwxyz]',\
    \ '')\n  -- Remove spaces and return text without vowels.\n  return new_text_lower\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local new_text =\
    \ text\n    for i = 1, #text, 1 do\n        local char = text:sub(i,i)\n     \
    \   for _, v in ipairs(vowels) do\n            if char == v then\n           \
    \     new_text = new_text:sub(1,#new_text)\n                break\n          \
    \  end\n        end\n    end\n    return new_text\nend", "  return text:gsub(\"\
    [aeiouAEIOU]\", \"\")\nend", "  text = text:gsub('a','')\n  text = text:gsub('e','')\n\
    \  text = text:gsub('i','')\n  text = text:gsub('o','')\n  text = text:gsub('u','')\n\
    \  text = text:gsub('y','')\n  text = text:gsub('1','')\n  text = text:gsub('2','')\n\
    \  text = text:gsub('3','')\n  text = text:gsub('4','')\n  text = text:gsub('5','')\n\
    \  text = text:gsub('6','')\n  text = text:gsub('7','')\n  text = text:gsub('8','')\n\
    \  text = text:gsub('9','')\n  text = text:gsub('0','')\n  return text\nend",
  "  local vowels = {}\n  vowels['a'] = true\n  vowels['e'] = true\n  vowels['i']\
    \ = true\n  vowels['o'] = true\n  vowels['u'] = true\n  text = text:gsub('(%a+)',\
    \ '')\n  text = text:gsub('(%e+)', '')\n  text = text:gsub('(%i+)', '')\n  text\
    \ = text:gsub('(%o+)', '')\n  text = text:gsub('(%u+)', '')\n  text = text:gsub('(%A+)',\
    \ '')\n  text = text:gsub('(%E+)', '')\n  text = text:gsub('(%I+)', '')\n  text\
    \ = text:gsub('(%O+)', '')\n  text = text:gsub('(%U+)', '')\n  text = text:gsub('(%a*)',\
    \ '')\n  text = text:gsub('(%e*)', '')\n  text = text:gsub('(%i*)', '')\n  text\
    \ = text:gsub('(%o*)', '')\n  text = text:gsub('(%u*)', '')\n  text = text:gsub('(%A*)',\
    \ '')\n  text = text:gsub('(%E*)', '')\n  text = text:gsub('(%I*)', '')\n  text\
    \ = text:gsub('(%O*)', '')\n  text = text:gsub('(%U*)', '')\n  text = text:gsub('(%i)',\
    \ '')\n  text = text:gsub('(%A)', '')\n  text = text:gsub('(%E)', '')\n  text\
    \ = text:gsub('(%I)', '')\n  text = text:gsub('(%O)', '')\n  text = text:gsub('(%U)',\
    \ '')\n  text = text:gsub('(%O)', '')\n  text = text:gsub('(%U)', '')\n  text\
    \ = text:gsub('(%o+)', '')\n  text = text:gsub('(%u+)', '')\n  text = text:gsub('(%A+)',\
    \ '')\n  text = text:gsub('(%E+)', '')\n  text = text:gsub('(%I+)', '')\n  text\
    \ = text:gsub('(%O+)', '')\n  text = text:gsub('(%U+)', '')\n  text = text:gsub('(%A*)',\
    \ '')\n  text = text:gsub('(%E*)', '')\n  text = text:gsub('(%i*)', '')\n  text\
    \ = text:gsub('(%o*)', '')\n  text = text:gsub('(%u*)', '')", "  local output\
    \ = text\n  output = '^(' .. string.gsub(output, '[aeiou]', '', 'g') .. ')*$'\
    \ -- remove all vowels\n  output = string.gsub(output, '^.', '') -- remove leading\
    \ space\n  output = string.gsub(output, '^([^' .. string.char(string.upper(string.sub(string.gsub(text,\
    \ '[AEIOU]', ''), 1, -1)) .. ']*)') -- remove all vowels after last letter\n \
    \ output = string.gsub(output, '^.', '')\n  output = string.gsub(output, '^([^'\
    \ .. string.char(string.upper(string.sub(string.gsub(text, '[AEIOU]', ''), 1,\
    \ -1)) .. '-' .. string.sub(string.gsub(text, '[AEIOU]', ''), 1, -1) .. ']*)')\
    \ -- remove all vowels after first letter\n  output = string.gsub(output, '^.',\
    \ '')\n  return output\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=lua,pattern-matching\
    \ |>\n<code>", "  text = text\n  or ''\n  or nil\n  or text\n  or {}\n  \n  local\
    \ new_text\n  \n  -- remove all non-letters\n  local pattern = '([a-z])'\n  new_text\
    \ = text:gsub(pattern, '\\1') -- use gsub to replace each non-letter with itself\n\
    \  \n  -- remove all vowels\n  local vowels = 'aeiouAEIOU'\n  new_text = new_text:gsub(vowels,\
    \ '') -- use gsub to replace each vowel with nothing\n  \n  -- trim whitespace\n\
    \  new_text = new_text:gsub(' ', '')\n  \n  -- if there are any non-letters left\
    \ in the string\n  -- then there were non-vowels, return that string\n  if new_text:match('[^a-z]')\
    \ then return new_text end\n  \n  return text\nend", "   return text:gsub('[aeiou]','')\n\
    end", "  return text:gsub('([aeiou])', function(a)\n    return a == 'e' ? 'a'\
    \ : a == 'i' ? 'u' : ''\n  end)\nend", "  text = text:gsub(\"[aeiou]\", \"\")\n\
    \  return text\nend", "  return text:gsub('[aAeEiIoOuU]',''):gsub('[zZ]','')\n\
    end", "    local function contains_vowel(char)\n        -- return false if string\
    \ is not empty\n        return string ~= '' and string.find( string.rep( char,\
    \ 1 ), '[aeiouyAEIOUY]' ) == nil\n    end\n    return text:gsub( '[AEIOUYaeiouy]',\
    \ '', 1 )\nend", "   text = text:gsub('[aeiouy]','')\n   return text\nend", " \
    \  text = text:gsub('[aAyY]', '', text)\n   text = text:gsub('[aYA]', '', text)\n\
    \   text = text:gsub('[zZ]', '', text)\n   text = text:gsub('[Zz]', '', text)\n\
    \   return text\nend", "  if text == '' then\n    return ''\n  end\n  local newText\
    \ = text\n  local index = 1\n  while index <= #newText do\n    if newText:sub(index,\
    \ index) ~= 'a' and newText:sub(index, index) ~= 'e' and newText:sub(index, index)\
    \ ~= 'i' and newText:sub(index, index) ~= 'o' and newText:sub(index, index) ~=\
    \ 'u' then\n      newText = newText:sub(1, index)\n    end\n    index = index\
    \ + 1\n  end\n  return newText\nend", "  local vowels = {\n    ['A'] = 1,\n  \
    \  ['e'] = 1,\n    ['i'] = 1,\n    ['o'] = 1,\n    ['u'] = 1,\n    ['Ae'] = 1,\n\
    \    ['iu'] = 1,\n    ['AO'] = 1,\n    ['OU'] = 1,\n    ['ae'] = 1,\n    ['au']\
    \ = 1\n  }", "   text = text:gsub(\"([aeiou])\", \"\")\n   return text:gsub(\"\
    ^\", \"\")\nend", "   return text:gsub(\"[a\xE1\xE0\xE2\xE3\xE4\xE5\u0101\u0103\
    \u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011F\
    \u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0135\u0137\u0138\u013A\u013C\
    \u013E\u0140\u0142\u0144\u0146\u0148\u014B\u014D\u014F\u0151\u0153\u0155\u0157\
    \u0159\u015B\u015D\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\
    \u0175\u0177\u017A\u017C\u017E]+\", \"\")\nend", "  return text:gsub(\"[aeiou]\"\
    , \"\")\nend", "  local has_vowel = false\n  local new_text = ''\n  for letter,\
    \ code in pairs(text) do\n    if code == 1 then\n      has_vowel = true\n    end\n\
    \    new_text = new_text .. letter\n  end\n  if has_vowel then\n    new_text =\
    \ new_text:gsub('[aeiou]', '')\n  end\n  return new_text\nend", "    if text ==\
    \ '' then\n        return text\n    end\n    if text:sub(1, 1) == 'a' then\n \
    \       return text:sub(2)\n    end\n    if text:sub(1, 1) == 'e' then\n     \
    \   return text:sub(3)\n    end\n    if text:sub(1, 1) == 'i' then\n        return\
    \ text:sub(4)\n    end\n    if text:sub(1, 1) == 'o' then\n        return text:sub(5)\n\
    \    end\n    if text:sub(1, 1) == 'u' then\n        return text:sub(6)\n    end\n\
    \    if text:sub(1, 1) == 'y' then\n        return text:sub(2)\n    end\n    return\
    \ text\nend", "  return text:gsub(\"[aeiou]\", \"\")\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  for i = 1, #text, 1 do\n\
    \    local char = string.sub(text, i, i)\n    if vowels[char] then\n      text\
    \ = text:sub(i-1)\n    end\n  end\n  return text\nend", "\tlocal vowels = \"AEIOUYaeiouy\"\
    \n\tfor i = 1, #vowels do\n\t\tlocal j = string.find(text, vowels[i], 1)\n\t\t\
    if j > 0 then\n\t\t\ttext = string.sub(text, 1, j-1)\n\t\tend\n\tend\n\treturn\
    \ text\nend", "  return text:gsub('[aeiou]', '')\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'}\n    local vowels_count\
    \ = 0\n    for letter in text:gmatch(\"[^\" .. table.concat(vowels, '') .. \"\
    ]+\") do\n        vowels_count = vowels_count + 1\n    end\n    if vowels_count\
    \ > 0 then\n        return text:gsub(\"[^\" .. table.concat(vowels, '') .. \"\
    ]+\", \"\")\n    else\n        return text\n    end\nend", "   text = string.gsub(text,\
    \ '[aeiou]', '')\n   text = string.gsub(text, '[AEIOU]', '')\n   text = string.gsub(text,\
    \ '[AEIOU_]', '')\n   text = string.gsub(text, '[aeiou-]', '')\n   text = string.gsub(text,\
    \ '[aeiou]', '')\n   text = string.gsub(text, '[AEIOU]', '')\n   text = string.gsub(text,\
    \ '[AEIOU_]', '')\n   text = string.gsub(text, '[aeiou-]', '')\n   text = string.gsub(text,\
    \ '[aeiou]', '')\n   text = string.gsub(text, '[AEIOU]', '')\n   text = string.gsub(text,\
    \ '[AEIOU_]', '')\n   text = string.gsub(text, '[aeiou-]', '')\n   return text\n\
    end", "    local vowels = \"aeiouAEIOU\"\n    local new_text = text:gsub(vowels,\
    \ '')\n    return new_text\nend\n</cell>\n<text>\n6. count_words\nWrite a function\
    \ that counts how many times each word occurs in the string.", "    return text:gsub('.',\
    \ function(c) return string.lower(c:sub(1,1)) or c end)\nend", "    return text:gsub(\"\
    [aeiouAEIOU]\", \"\");\nend", "  return text:gsub('[aA]', '', 1, 'e')\nend", " \
    \   if text == '' or text == nil then\n        return text\n    end\n    \n  \
    \  local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i']\
    \ = true,\n        ['o'] = true,\n        ['u'] = true,\n        ['A'] = true,\n\
    \        ['E'] = true,\n        ['I'] = true,\n        ['O'] = true,\n       \
    \ ['U'] = true\n    }\n    \n    for i = 1, #text do\n        local c = text:sub(i,\
    \ i)\n        if vowels[c] then\n            text = text:sub(0, i-1)\n       \
    \ end\n    end\n    \n    return text\nend", "   text = text:gsub('[aeiou]', '')\n\
    \   return text\nend\n</cell>\n<text>\nThe same function, remove_vowels, will\
    \ remove all vowels within the text that match any vowel in the given list, vowels.",
  "  return text:gsub('[a\xE1\xE0\xE3\xE2\xE4\xE9\xEA\xEB\xED\xEC\xEE\xEF\xF3\xF2\xF5\
    \xF4\xF6\xFA\xF9\xFB\xFC\xFD\xFF\xF1\xE7\u011F\u0121\u015F\u0163\u0165\u0167\u016D\
    \u016F\u0171\u0169\u0173\u016B\u0175\u0177\u017A\u017E\u017C][ae\u0101\u0103\u0105\
    \u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\
    \u0121\u0123\u0125\u0127\u012D\u012F\u0129\u012B\u012D\u012F\u0133\u0135\u0137\
    \u013A\u013E\u013C][o\xF3\xF2\xF5\xF4\xF6\xF8\u014D\u014F\u0151\u0153\u0155\u0159\
    \u0157\u015B\u015D\u0161\u015F\u0163\u0165\u0167\u016D\u016F\u0171\u0169\u0173\
    \u016B\u0175\u0177\u017A\u017E\u017C][u\xFA\xF9\xFB\xFC\xFD\xFE\xFF\u0138\u0139\
    \u0140\u0149\u014A\u015E\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\
    \u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\
    \u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\
    \u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\
    \u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\
    \u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\
    \u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\
    \u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\
    \u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\
    \u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\
    \u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\u016C\u0172\u016A\u016E\u0174\
    \u016C\u0172\u016A", "  -- Return empty string if input string is empty.\n  if\
    \ text == nil then\n    return ''\n  end", "    if text == '' then\n        return\
    \ ''\n    end\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local text2\
    \ = text:gsub(\"[aeiouy]\", \"\"):gsub(\"[aeiou]\", \"\"):gsub(\"[aeiouyAEIOUY]\"\
    , \"\")\n    return text2\nend", "  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n\
    \  local vowels_new = {}\n  for char in string.gmatch(text, \"([^%s])\") do\n\
    \    if string.match(vowels, char) then\n      table.insert(vowels_new, char)\n\
    \    end\n  end\n  return table.concat(vowels_new)\nend", "  return text:gsub('([aeiou])','','g')\
    \ -- remove all vowels in 'text'\nend", "  if text:find(vowels) ~= nil then\n\
    \    return text:gsub('[' + vowels + '-]+', '')\n  end\n  return text\nend", " \
    \   local vowels = {\n        [\"a\"] = true,\n        [\"e\"] = true,\n     \
    \   [\"i\"] = true,\n        [\"o\"] = true,\n        [\"u\"] = true,\n      \
    \  [\"A\"] = true,\n        [\"E\"] = true,\n        [\"I\"] = true,\n       \
    \ [\"O\"] = true,\n        [\"U\"] = true,\n        [\"ae\"] = true,\n       \
    \ [\"ai\"] = true,\n        [\"au\"] = true,\n        [\"ei\"] = true,\n     \
    \   [\"eo\"] = true,\n        [\"ou\"] = true\n    }\n    local result = text:gsub(\"\
    [^aeiouAEIOU]\", \"\")\n    if result:len() > 0 then\n        result = result[1]\n\
    \    end\n    return result\nend", "   if text == nil then\n      return nil\n\
    \   else\n      for i = #text, 1, -1 do\n         if string.sub(i, 1, #text[i])\
    \ == 'aeiou' then\n            table.insert(text, nil)\n            break\n  \
    \       end\n      end\n   end\n   text = text:gsub('[%s%s]', '')\n   if text\
    \ ~= nil then\n      return text\n   else\n      return nil\n   end\nend", " \
    \ if text == '' then\n    return ''\n  end\n  -- If the text is empty, return\
    \ an empty string\n  if text == '\\n' then\n    return text\n  end\n  -- Convert\
    \ to lower case\n  local lowercase = text:lower()\n  -- Create a map of the vowels\n\
    \  local vowels = { 'a','e','i','o','u' } -- Map with key as vowel and value as\
    \ 1\n  -- Add 1 to each of the vowels\n  for _, letter in pairs(vowels) do\n \
    \   lowercase = lowercase:gsub('%'..letter..'', function(c)\n      -- Increment\
    \ the count of the vowel in the map\n      local count = vowels[letter] + 1\n\
    \      -- Update the map if count is greater than 1\n      if count > 1 then\n\
    \        vowels[letter] = count\n      else\n        vowels[letter] = 1\n    \
    \  end\n      -- Return the count if the count is greater than 1\n      if count\
    \ > 1 then\n        return letter..count\n      else\n        return letter\n\
    \      end\n    end)\n  end\n  -- Return lowercase string with vowels removed\n\
    \  return lowercase\nend", "  local vowels = {'a','e','i','o','u'}\n  local new_text\
    \ = text:gsub('.', function(c)\n    if vowels[c] then\n      return c\n    end\n\
    \  end)\n  return new_text\nend\n</code>\nThe code above will replace every vowel\
    \ (if present) with '' (nothing).\nAnd here is how to do the same with Lua's pattern:\n\
    <code>", "  if text == '' then\n    return ''\n  elseif text:find('a') ~= nil\
    \ then\n    return text:sub(0, text:find('a'))\n  elseif text:find('e') ~= nil\
    \ then\n    return text:sub(0, text:find('e'))\n  elseif text:find('i') ~= nil\
    \ then\n    return text:sub(0, text:find('i'))\n  elseif text:find('o') ~= nil\
    \ then\n    return text:sub(0, text:find('o'))\n  elseif text:find('u') ~= nil\
    \ then\n    return text:sub(0, text:find('u'))\n  else\n    return text\n  end\n\
    end", "  local has_vowels = false\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  for i = 1, #vowels do\n    has_vowels = true\n    text = text:gsub('[%a]','',vowels[i],'')\n\
    \  end\n  -- If there are no 'a' then remove all 'aeiou' \n  if not has_vowels\
    \ then\n    text = text:gsub('[%aeiou]','',vowels,'')\n  end\n  return text\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n  for _, v in ipairs(vowels)\
    \ do\n    text = text:gsub(\"[\" .. v .. \"]\", \"\");\n  end\n  return text;\n\
    end", "  return text:gsub(\"[aeiou]\", \"\")\nend", "    local new_text = text\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    for i, letter\
    \ in pairs(text) do\n        if letter == 'a' or letter == 'e' or letter == 'i'\
    \ or letter == 'o' or letter == 'u' then\n            new_text = new_text:gsub('['..letter..'a|e|i|o|u|A|E|I|O|U]',\
    \ '')\n        end\n    end\n    return new_text\nend\nreturn remove_vowels",
  "  local vowels = {'a','e','i','o','u'}\n  for i,v in ipairs(vowels) do\n    text\
    \ = text:gsub(\"[\" .. v .. \"]\", \"\")\n  end\n  return text\nend", "   if text\
    \ == '' then\n      return ''\n   end\n   local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n   local text2 = ''\n   for i=1, #text, 1 do\n      if vowels[string.sub(text,\
    \ i, i)] then\n         text2 = text2 .. string.sub(text, i, i)\n      end\n \
    \  end\n   return text2\nend", "  -- remove all vowels from text\n  text = string.gsub(text,\
    \ \"[aeiouAEIOU]\", \"\")\n  -- remove all spaces from text\n  text = string.gsub(text,\
    \ \" \", \"\")\n  -- remove all non-alphanumeric characters from text\n  text\
    \ = string.gsub(text, \"[^A-Za-z0-9]\", \"\")\n  -- remove all non-alphanumeric\
    \ characters from text (spaces included)\n  text = string.gsub(text, \"[^A-Za-z0-9\
    \ ]\", \"\")\n  return text\nend", "  return text:gsub(\"[aeiouAEIOU]\", \"\"\
    )\nend", "\tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\
    \tlocal new_text = ''\n\tlocal vowel_count = 0\n\tfor i = 1, #text do\n\t\tlocal\
    \ c = text:sub(i,i)\n\t\tif vowels[c] then\n\t\t\tnew_text = new_text .. c:sub(1,1)\n\
    \t\t\tvowel_count = vowel_count + 1\n\t\tend\n\tend\n\tif vowel_count == vowels_count\
    \ then\n\t\treturn new_text\n\telse\n\t\treturn ''\n\tend\nend", "  if text ==\
    \ nil then return '' end\n  local vowels = 'aeiouAEIOU'\n  local text = text:gsub('([^'..vowels..']+)','%1')\n\
    \  return text\nend", "  -- https://stackoverflow.com/questions/26596127/how-to-remove-vowels-from-a-string-in-lua\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local new_text = ''\n  for\
    \ i = 1, #text do\n    if text[i] == text[i]:sub(1,1) then\n      new_text = new_text\
    \ .. text[i]:sub(2)\n    else\n      new_text = new_text .. text[i]\n    end\n\
    \  end\n  return new_text\nend", "\tlocal pattern = string.char(65)\n\tlocal table\
    \ = { }\n\tfor i = 1, string.len(text) do\n\t\tlocal c = string.sub(text, i, i)\n\
    \t\tif c ~= pattern and string.find(string.char(c), pattern) then\n\t\t\ttable.insert(table,\
    \ string.sub(c, 1, c - 1))\n\t\telse\n\t\t\ttable.insert(table, c)\n\t\tend\n\t\
    end\n\treturn table.concat(table)\nend", "  return text:gsub('([aeiou])', '',\
    \ 'g')\nend", "  return text:gsub('.', function(a) \n    return a:find('/a|e|i|o|u')\
    \ > 0 \n  end)\nend", "   return string.gsub(text, '[aeiouAEIOU]', '')\nend",
  "  local result = text:gsub('([%s])','%1')\n  local vowels = 'aeiouAEIOU'\n  --\
    \ replace each consonant with '', and each consonant followed by 'a' with 'a',\n\
    \  -- remove 'e' and 'o' because they are not in our set of vowels.\n  -- replace\
    \ each vowel with 'e', remove 'u' because it is in our set of vowels.\n  -- replace\
    \ each vowel with 'o', remove 'i' because it is in our set of vowels.\n  result\
    \ = result:gsub('([%s])%%(%s|%s)[%%(%s|%s)]?','%1'):gsub('([%s])%%(%s|%s)','%1'):gsub('([%s])%%(%s|%s)?','%1')\n\
    \  result = result:gsub('([%s])%%(%s|%s)','%1'):gsub('([%s])%%(%s|%s)?','%1')\n\
    \  result = result:gsub('([%s])%%(%s|%s)','%1')\n  result = result:gsub('([%s])%%(%s|%s)?','%1')\n\
    \  -- replace each consonant with '', and each consonant followed by 'a' with\
    \ 'a'\n  -- remove 'e' and 'o' because they are not in our set of vowels.\n  result\
    \ = result:gsub('([%s])%%(%s|%s)[%%(%s|%s)]?[%%(%s|%s)]?','%1'):gsub('([%s])%%(%s|%s)[%%(%s|%s)]?','%1')\n\
    \  result = result:gsub('([%s])%%(%s|%s)[%%(%s|%s)]?','%1'):gsub('([%s])%%(%s|%s)[%%(%s|%s)]?','%1')\n\
    \  result = result:gsub('([%s])%%(%s|%s)','%1'):gsub('([%s])%%(%s|%s)','%1')\n\
    \  result = result:gsub('([%s])%%(%s|%s)','%1')\n  result = result:gsub('([%s])%%(%s|%s)?','%1')\n\
    \  -- replace each vowel with 'e', remove 'u' because it is in our set of vowels.\n\
    \  result = result:gsub('([%s])%%(%s|%s)[%%(%s|%s)]?[%%(%s|%s)]?','%1'):gsub('([%s])%%(%s|%s)[%%(%s|",
  "  return text:gsub('.[aeiouyAEIOUY]+', '')\nend\n</cell>\n<text>\nWe will now define\
    \ the remove_vowels function and test it on some example strings to see the results.",
  "    local text = string.gsub(text, \"[aeiouAEIOU]\", \"\")\n    return text\nend",
  "  local vowels = {}\n  local has_vowels = false\n  for i = 1, #text do\n    if\
    \ string.sub( text, i, i .. #text) == \"'\" then\n      has_vowels = true\n  \
    \    break\n    end\n    if string.sub( text, i, i .. #text ) == \"'\" then\n\
    \      has_vowels = true\n      break\n    end\n    local char = string.sub( text,\
    \ i, i .. #text )\n    vowels[char] = true\n  end\n  -- remove charachters that\
    \ exist in vowels\n  local new_text = ''\n  for i = 1, #text do\n    if vowels[string.sub(\
    \ text, i, i .. #text)] == true then\n      new_text = new_text .. string.sub(\
    \ text, i, i .. #text )\n    end\n  end\n  -- remove charachters that aren't in\
    \ vowels\n  if has_vowels == true then\n    local new_text = ''\n    for i = 1,\
    \ #text do\n      if vowels[string.sub( text, i, i .. #text)] == false then\n\
    \        new_text = new_text .. string.sub( text, i, i .. #text )\n      end\n\
    \    end\n  end\n  return new_text\nend", "   -- TODO: Implement this function\n\
    \   return text\nend", "  if text == '' then return '' end\n  local vowels = {}\n\
    \  vowels.aa = true\n  vowels.ae = true\n  vowels.ao = true\n  vowels.au = true\n\
    \  vowels.iu = true\n  vowels.ou = true\n  vowels.ou = true\n  vowels.ei = true\n\
    \  vowels.au = true\n  vowels.iu = true\n  vowels.ei = true\n  vowels.ou = true\n\
    \  vowels.au = true\n  vowels.iu = true\n  vowels.ei = true\n  vowels.ei = true\n\
    \  vowels.ou = true\n  vowels.ou = true\n  vowels.ei = true\n  vowels.ei = true\n\
    \  vowels.ei = true\n  vowels.au = true\n  vowels.au = true\n  vowels.iu = true\n\
    \  vowels.iu = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.ou = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.ou = true\n  vowels.ou = true\n  vowels.ou = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n  vowels.au = true\n\
    \  vowels.au = true\n", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local text2\
    \ = text\n  if text:len() > 0 then\n    local removed = text2:gsub(\"[\" .. table.concat(vowels,\
    \ \"\") .. \"]\", \"\")\n    if removed:len() > 0 then\n      text2 = text2:gsub(\"\
    [\" .. table.concat(vowels, \"\") .. \"]\", \"\")\n    end\n  end\n  return text2\n\
    end", "\tlocal remove = {\n\t\t[\"aeiouy\"] = '',\n\t\t[\"bcdfghjklmnpqrstvwxyz\"\
    ] = '',\n\t\t[\"ps\"] = '',\n\t\t[\"qwzsxz\"] = '',\n\t\t[\"z\"] = '',\n\t}\n\t\
    for k, v in pairs(remove) do\n\t\tif string.find(text, v) then\n\t\t\treturn text:gsub(v,\
    \ '')\n\t\tend\n\tend\n\treturn text\nend", "  if text ~= nil then\n    local\
    \ i, j = 1, #text\n    while i < j do\n      local c = text:sub(i,j)\n      if\
    \ not c == \"a\" and not c == \"e\" and not c == \"i\" and not c == \"o\" and\
    \ not c == \"u\" then\n        text = text:sub(i+1,j)\n        i = i + 1\n   \
    \   else\n        i = i + 1\n      end\n      j = j - 1\n    end\n  end\n  return\
    \ text\nend", "  local vowels = {'a', 'A', 'i', 'I', 'o', 'O'}\n  local length\
    \ = text:len()\n  local new_text = ''\n  local i, j, k", "  if text == '' or text\
    \ == 'a' or text == 'b' then return '' end\n  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u', 'y'} -- 'z' 'a' 'b' 'c' 'd' 'f' 'g' 'h' 'j' 'k' 'l' 'm' 'n' 'p' 'q' 'r'\
    \ 's' 't' 'v' 'w' 'x' 'y' \n  local result = {}\n  for i=1,#text,1 do\n    if\
    \ text[i] ~= vowels[i] then result[#result+1] = text[i] end\n  end\n  return table.concat(result,\
    \ ' ')\nend", "  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local\
    \ buffer = text\n  local length = #text\n  for i = 1, length do\n    buffer =\
    \ buffer:gsub(\".\", {string.sub(buffer, i, i)})\n  end\n  return buffer\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  return text:gsub(\"[\" .. table.concat(vowels,\
    \ \"\") .. \"]\", \"\")\nend", "  -- First, define our vowel list:\n  local vowels\
    \ = {\n    'a',\n    'e',\n    'i',\n    'o',\n    'u',\n  }\n  -- Then remove\
    \ each vowel from the text:\n  local output = text\n  for _, char in pairs(vowels)\
    \ do\n    output = string.gsub(output, '[' .. tostring(char) .. '\\']', '')\n\
    \  end\n  -- Then remove all remaining spaces (tabs, newlines, etc.):\n  output\
    \ = string.gsub(output, '[%z\\- ]', '')\n  -- Finally, return the result:\n  return\
    \ output\nend", "  if text == nil then\n    return text\n  else\n    local t =\
    \ text:gsub(\"[aeiouAEIOU]\", \"\")\n    return t == '' and text or t\n  end\n\
    end", "\treturn text:gsub('.','')\nend", "   text = text:gsub(\"[aeiouAEIOU]\"\
    ,\"\")\n   if text:sub(1,1) ~= nil then text = text:sub(1,1) end\n   if text:sub(1,2)\
    \ ~= nil then text = text:sub(1,2) end\n   if text:sub(1,3) ~= nil then text =\
    \ text:sub(1,3) end\n   if text:sub(1,4) ~= nil then text = text:sub(1,4) end\n\
    \   if text:sub(1,5) ~= nil then text = text:sub(1,5) end\n   if text:sub(1,6)\
    \ ~= nil then text = text:sub(1,6) end\n   if text:sub(1,7) ~= nil then text =\
    \ text:sub(1,7) end\n   if text:sub(1,8) ~= nil then text = text:sub(1,8) end\n\
    \   if text:sub(1,9) ~= nil then text = text:sub(1,9) end\n   if text:sub(5,5)\
    \ ~= nil then text = text:sub(5,5) end\n   if text:sub(1,1) ~= nil then text =\
    \ text:sub(1,1) end\n   return text\nend", "  local vowels = { 'a', 'e', 'o',\
    \ 'u' }\n  local new_text = ''\n  for i = 1, #text, 1 do\n    local char = string.sub(text,\
    \ i, i)\n    if char in vowels then\n      new_text = new_text .. string.sub(text,\
    \ i - 1, i - 1)\n    end\n  end\n  return new_text\nend", "  if text ~= nil then\n\
    \    return text:gsub(\"[aeiou]\", \"\")\n  end\n  return text\nend", "  local\
    \ buffer = text\n  if buffer == '' then return text end\n  buffer:gsub('a', '')\n\
    \  buffer:gsub('b', '')\n  buffer:gsub('c', '')\n  buffer:gsub('d', '')\n  buffer:gsub('e',\
    \ '')\n  buffer:gsub('f', '')\n  buffer:gsub('g', '')\n  buffer:gsub('h', '')\n\
    \  buffer:gsub('i', '')\n  buffer:gsub('j', '')\n  buffer:gsub('k', '')\n  buffer:gsub('l',\
    \ '')\n  buffer:gsub('m', '')\n  buffer:gsub('n', '')\n  buffer:gsub('o', '')\n\
    \  buffer:gsub('p', '')\n  buffer:gsub('q', '')\n  buffer:gsub('r', '')\n  buffer:gsub('s',\
    \ '')\n  buffer:gsub('t', '')\n  buffer:gsub('u', '')\n  buffer:gsub('v', '')\n\
    \  buffer:gsub('w', '')\n  buffer:gsub('x', '')\n  buffer:gsub('y', '')\n  buffer:gsub('z',\
    \ '')\n  return buffer\nend", "    local vowels = \"aeiouAEIOU\"\n    text = text:gsub(\"\
    [\" .. vowels .. \"]\", \"\")\n    return text\nend", "  local function remove_vowel(char)\n\
    \    return char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' or\n           char == 'y' or char == '\xE1' or char == '\xE9' or char ==\
    \ '\xED' or char == '\xF3' or char == '\xFA' or\n           char == '\xF1' or\
    \ char == '\xD1' or char == '\xC1' or char == '\xC9' or char == '\xCD' or char\
    \ == '\xD3' or char == '\xDA'\n  end\n  text = text or ''\n  local result = text:gsub(\"\
    [aeiou\xE1\xE9\xED\xF3\xFA\xF1\xD1\xC1\xC9\xCD\xD3\xDA]+\", \"\", '') -- remove\
    \ everything but vowels.\n  result = result:gsub(\"([aeiou\xE1\xE9\xED\xF3\xFA\
    \xF1\xD1])\", '\\1') -- collapse vowel into a single letter.\n  result = result:gsub(\"\
    ^[aeiou\xE1\xE9\xED\xF3\xFA\xF1\xD1]\", \"\", '') -- remove leading and trailing\
    \ vowels.\n  result = result:gsub(\"[aeiou\xE1\xE9\xED\xF3\xFA\xF1\xD1]$\", \"\
    \", '') -- remove trailing vowels.\n  return result:gsub(\"[aeiou\xE1\xE9\xED\xF3\
    \xFA\xF1\xD1]\", \"\", '') -- remove everything but vowels.\nend", "   text =\
    \ text:gsub(\"[aeiou]\", \"\")\n   text = text:gsub(\"[Aa]\", \"\")\n   text =\
    \ text:gsub(\"[ae]\", \"\")\n   text = text:gsub(\"[Ae]\", \"\")\n   text = text:gsub(\"\
    [Oo]\", \"\")\n   text = text:gsub(\"[O]\", \"\")\n   text = text:gsub(\"[Uu]\"\
    , \"\")\n   text = text:gsub(\"[U]\", \"\")\n   text = text:gsub(\"[Ss]\", \"\"\
    )\n   text = text:gsub(\"[S]\", \"\")\n   text = text:gsub(\"[Cc]\", \"\")\n \
    \  text = text:gsub(\"[C]\", \"\")\n   text = text:gsub(\"[Dd]\", \"\")\n   text\
    \ = text:gsub(\"[D]\", \"\")\n   text = text:gsub(\"[Hh]\", \"\")\n   text = text:gsub(\"\
    [H]\", \"\")\n   text = text:gsub(\"[Mm]\", \"\")\n   text = text:gsub(\"[M]\"\
    , \"\")\n   text = text:gsub(\"[Nn]\", \"\")\n   text = text:gsub(\"[N]\", \"\"\
    )\n   text = text:gsub(\"[Pp]\", \"\")\n   text = text:gsub(\"[P]\", \"\")\n \
    \  text = text:gsub(\"[Ss]\", \"\")\n   text = text:gsub(\"[S]\", \"\")\n   text\
    \ = text:gsub(\"[Pp]\", \"\")\n   text = text:gsub(\"[P]\", \"\")\n   return text\n\
    end", "  return text:gsub(\"[aeiouAEIOU]\", '') -- remove vowels from text\nend",
  "  if text ~= nil then\n    local s = text:lower()\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local newstring = ''\n    for i = 1, #s do\n      local\
    \ char = s[i]\n      if vowels[char] then\n        newstring = newstring .. char\n\
    \      end\n    end\n    return newstring\n  end\n  return nil\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  return text:gsub('([' .. table.concat(vowels,\
    \ '') .. '])', '')\nend\n</code>\n<|/ a tags=lua-patterns,lua dscore=3 |>\n<|\
    \ a tags=lua-patterns,lua dscore=2 |>\nIn Lua 5.1 there is string.gsub(pattern,replacement,[options])\
    \ which allows one to specify options more elegantly than in previous versions\
    \ of Lua.\nThe pattern argument is a string containing the pattern. The replacement\
    \ argument is a string containing the replacement pattern for the pattern (with\
    \ the %1 replaced by the match string from the pattern). See Lua reference manual\
    \ for more details about pattern arguments.\nOptions are used to indicate the\
    \ number of replacements to perform on each match. Since Lua 5.1 provides no way\
    \ of specifying a minimum/maximum number of matches to be made, options must be\
    \ specified as an optional string with key=value format. For example:\n<code>\n\
    \  pattern = \"%1/%2|%3\"\n  replacement = \"%1|%2\"\n  text = \"aaa/bbb/ccc\"\
    \n  print(text:gsub(pattern, replacement, \"1,3\"))\n</code>\nwould print:\n<code>\n\
    aaa|bbb|ccc\n</code>\n<|/ a |>\n<| a tags=lua-patterns,lua |>\nYou can use gsub\
    \ with capture\n<code>", "  -- Replace \"vowels\" with empty string.\n  text =\
    \ text:gsub('([aeiouy])', '')\n  -- Replace \"consonants\" with empty string.\n\
    \  text = text:gsub('([bcdfghjklmnpqrstvwxyz])', '')\n  return text\nend", " \
    \ local vowels = {'a','e','i','o','u','y'}\n  local text = text:lower()\n  return\
    \ text:gsub('%a'..vowels..'%a',''):gsub('%e'..vowels..'%e',''):gsub('%i'..vowels..'%i',''):gsub('%o'..vowels..'%o',''):gsub('%u'..vowels..'%u','')\n\
    end", "  return string.gsub(text, \"[aeiouAEIOU]\", \"\")\nend", "    if not text\
    \ then\n        text = ''\n    end\n    local vowels = \"aeiouAEIOU\"\n    for\
    \ i = 1, #vowels do\n        text = text:gsub(\"[\" .. vowels[i] .. \"]\", \"\"\
    )\n    end\n    return text\nend", "   local vowels = {'a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \   local cleaned = ''\n   for i = 1, #text do\n      for j = 1, #vowels do\n\
    \         if text:sub(i,i) == vowels[j] then\n            cleaned = cleaned ..\
    \ text:sub(i,i)\n            break\n         end\n      end\n   end\n   return\
    \ cleaned\nend", "  -- We only accept strings with at least 2 characters\n  if\
    \ text and #text >= 2 then\n    local has_vowel = false\n    local new_text =\
    \ ''\n    -- Iterate through all characters in the string\n    for i = 1, #text\
    \ do\n      -- Check if the character is a vowel\n      if isvowel(text:sub(i,i))\
    \ then\n        -- Check if the current character is the first character of the\
    \ next character\n        if i ~= 1 then\n          -- If the new text does not\
    \ end with a vowel\n          if new_text:len() > 0 and new_text:sub(new_text:len()\
    \ - 1,#new_text) ~= 'aeiou' then\n            new_text = new_text:sub(1,#new_text)\n\
    \          end\n        else\n          -- If the new text ends with a vowel\n\
    \          if new_text:len() > 0 and new_text:sub(new_text:len() - 1,#new_text)\
    \ ~= 'aeiou' then\n            new_text = new_text:sub(1,#new_text)\n        \
    \  end\n        end\n      else\n        -- If the new text does not end with\
    \ a vowel\n        if new_text:len() > 0 and new_text:sub(new_text:len() - 1,#new_text)\
    \ ~= 'aeiou' then\n          new_text = new_text:sub(1,#new_text)\n        end\n\
    \        -- If this character is a vowel\n        if new_text:len() > 0 then\n\
    \          has_vowel = true\n        end\n        new_text = new_text:sub(i,i)\n\
    \      end\n    end\n    return has_vowel and new_text or text\n  else\n    return\
    \ text\n  end\nend", "    local result = text:gsub('a', '')\n    if result ==\
    \ '' then\n        result = text:gsub('B', '')\n    else\n        result = result:gsub('C',\
    \ '')\n        if result == '' then\n            result = text:gsub('D', '')\n\
    \        else\n            result = result:gsub('E', '')\n            if result\
    \ == '' then\n                result = text:gsub('F', '')\n            else\n\
    \                result = result:gsub('G', '')\n                if result == ''\
    \ then\n                    result = text:gsub('H', '')\n                else\n\
    \                    result = result:gsub('I', '')\n                    if result\
    \ == '' then\n                        result = text:gsub('J', '')\n          \
    \          else\n                        result = result:gsub('K', '')\n     \
    \                   if result == '' then\n                            result =\
    \ text:gsub('L', '')\n                        else\n                         \
    \   result = result:gsub('M', '')\n                            if result == ''\
    \ then\n                                result = text:gsub('N', '')\n        \
    \                    else\n                                result = result:gsub('O',\
    \ '')\n                                if result == '' then\n                \
    \                    result = text:gsub('P', '')\n                           \
    \     else\n                                    result = result:gsub('Q', '')\n\
    \                                    if result == '' then\n                  \
    \                      result = text:gsub('R', '')\n                         \
    \           else\n                                        result = result:gsub('S',\
    \ '')\n                                        if result == '' then\n        \
    \                                    result = text:gsub('T', '')\n           \
    \                             else\n                                         \
    \   result = result:gsub('U', '')\n                                          \
    \  if result == '' then\n                                                result\
    \ = text:gsub('V', '')\n                                            else\n   \
    \                                             result = result:gsub('W', '')\n\
    \                                                if result == '' then\n      \
    \                                              result = text:gsub('X', '')\n \
    \                                               else\n                       \
    \                             result = result:gsub('Y', '')\n                \
    \                                    if result == '' then\n                  \
    \                                      result = text:gsub('Z', '')\n         \
    \                                           else\n                           \
    \                             result = result:gsub('a', '')\n                \
    \                                        if result == '' then\n              \
    \                                              result = text:gsub('B', '')\n \
    \                                                       else\n               \
    \                                             result = result:gsub('C', '')\n\
    \                                                            if result == '' then\n\
    \                                                                result = text:gsub('D',\
    \ '')\n                                                            else\n    \
    \                                                            result = result:gsub('E',\
    \ '')\n                                                                if result\
    \ == '' then\n                                                               \
    \     result = text:gsub('F', '')\n                                          \
    \                      else\n                                                \
    \                    result = result:gsub('G', '')\n                         \
    \                                           if result == '' then\n           \
    \                                                             result = text:gsub('H',\
    \ '')\n                                                                    else\n\
    \                                                                        result\
    \ = result:gsub('I', '')\n                                                   \
    \                     if result == '' then\n                                 \
    \                           result = text:gsub('J', '')\n                    \
    \                                    else\n                                  \
    \                          result = result:gsub('K', '')\n                   \
    \                                         if result == '' then\n             \
    \                                                   result = text:", "  if text:len()\
    \ < 3 then\n    return text\n  end\n  local i, last\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  last = 0\n  for i = 1, text:len() do\n    if text:sub(i, i):lower():sub(1,\
    \ 1) in vowels then\n      last = i\n    end\n  end\n  local new_text = text:sub(1,\
    \ last)\n  return new_text\nend", '    if text == nil then return nil end', '    local
    vowels = { "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "b",
    "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "c", "d", "d", "d", "d", "d",
    "d", "d", "d", "d", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",
    "e', "\ttext = text:lower()\n\ttext = text:gsub(\"[aeiou]\", \"\")\n\ttext = text:gsub(\"\
    ^[^a-z]\", \"\")\n\ttext = text:gsub(\"[^a-z]$\", \"\")\n\treturn text\nend",
  "    if text == '' then return '' end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  -- Convert to lower case to keep consistent with other uses of str.\n  text\
    \ = text:lower()\n  -- Iterate through the text and remove vowels from each index.\n\
    \  for i = 1, #text do\n    if text[i] == 1 then \n      text = text:sub(1, i)\n\
    \      text = text:sub(2, i)\n      text = text:sub(3, i)\n      text = text:sub(4,\
    \ i)\n      text = text:sub(5, i)\n      text = text:sub(6, i)\n      text = text:sub(7,\
    \ i)\n      text = text:sub(8, i)\n      text = text:sub(9, i)\n      text = text:sub(10,\
    \ i)\n      text = text:sub(11, i)\n      text = text:sub(12, i)\n      text =\
    \ text:sub(13, i)\n      text = text:sub(14, i)\n      text = text:sub(15, i)\n\
    \      text = text:sub(16, i)\n      text = text:sub(17, i)\n      text = text:sub(18,\
    \ i)\n      text = text:sub(19, i)\n      text = text:sub(20, i)\n      text =\
    \ text:sub(21, i)\n      text = text:sub(22, i)\n      text = text:sub(23, i)\n\
    \      text = text:sub(24, i)\n      text = text:sub(25, i)\n      text = text:sub(26,\
    \ i)\n      text = text:sub(27, i)\n      text = text:sub(28, i)\n      text =\
    \ text:sub(29, i)\n      text = text:sub(30, i)\n      text = text:sub(31, i)\n\
    \      text = text:sub(32, i)\n      text = text:sub(33, i)\n      text = text:sub(34,\
    \ i)\n      text = text:sub(35, i)\n      text = text:sub(36, i)\n      text =\
    \ text:sub(37, i)\n      text = text:sub(38, i)\n      text = text:sub(39, i)\n\
    \      text = text:sub(40, i)\n      text = text:sub(41, i)\n      text = text:sub(0,\
    \ i)\n      break\n    elseif text[i] == #vowels then \n      text = text:sub(0,\
    \ i)\n      break\n    end\n  end\n  return text\nend", "  return string.gsub(text,\
    \ '[aeiou]', '')\nend", "    local _, _, text = text:gsub('([aeiouy])', '') --\
    \ remove vowels from text\n    return text\nend", "  local letters = string.gsub(text,\
    \ '[aeiou]', '')\n  return string.gsub(letters, '[aeiou]', '')\nend", "  text\
    \ = text:lower()\n  -- First strip out vowels.\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  for _, v in ipairs(vowels) do\n    text = text:gsub(v, '')\n  end\n\
    \  -- Second strip out spaces.\n  text = text:gsub(' ', '')\n  -- Third strip\
    \ out periods.\n  text = text:gsub('.', '')\n  -- Fourth strip out question marks.\n\
    \  text = text:gsub('?', ' ')\n  -- Fifth strip out exclamation marks.\n  text\
    \ = text:gsub('!', '')\n  -- Sixth strip out hyphens.\n  text = text:gsub('-',\
    \ '')\n  -- Seventh strip out colons.\n  text = text:gsub(';', '')\n  -- Eighth\
    \ strip out parentheses.\n  text = text:gsub('(', '')\n  -- Ninth strip out parentheses.\n\
    \  text = text:gsub(')', '')\n  -- Tenth strip out apostrophes.\n  text = text:gsub('\\\
    '', '')\n  -- Eleventh strip out question marks.\n  text = text:gsub('?', '')\n\
    \  -- Twelfth strip out exclamation marks.\n  text = text:gsub('!', '')\n  --\
    \ Thirteenth strip out hyphens.\n  text = text:gsub('-', '')\n  -- Fourteenth\
    \ strip out colons.\n  text = text:gsub(';', '')\n  -- Fifteenth strip out parentheses.\n\
    \  text = text:gsub('(', '')\n  -- Sixteenth strip out parentheses.\n  text =\
    \ text:gsub(')', '')\n  -- Seventeenth strip out apostrophes.\n  text = text:gsub('\\\
    '', '')\n  -- Eighteenth strip out question marks.\n  text = text:gsub('?', '')\n\
    \  -- Nineteenth strip out exclamation marks.\n  text = text:gsub('!', '')\n \
    \ -- Twentieth strip out hyphens.\n  text = text:gsub('-', '')\n  -- Thirtieth\
    \ strip out colons.\n  text = text:gsub(';', '')\n  -- Fortieth strip out parentheses.\n\
    \  text = text:gsub('(', '')\n  -- Fiftieth strip out parentheses.\n  text = text:gsub(')',\
    \ '')\n  -- Sixtieth strip out parentheses.\n  text = text:gsub(')', '')\n  --\
    \ Seventieth strip ", "  text = text:lower()\n  local vowels = {\n    ['a'] =\
    \ '',\n    ['e'] = '',\n    ['i'] = '',\n    ['o'] = '',\n    ['u'] = '',\n  \
    \  ['A'] = '',\n    ['E'] = '',\n    ['I'] = '',\n    ['O'] = '',\n    ['U'] =\
    \ ''\n  }", "\t-- remove all vowels from the given text.\n\t-- If the length of\
    \ the given text is smaller than 3 or empty, just return it.\n\tif text:len()\
    \ < 3 then\n\t\treturn text\n\tend\n\t-- create table of consonants and vowels\n\
    \tlocal letters = {\n\t\t['a'] = true,\n\t\t['e'] = true,\n\t\t['i'] = true,\n\
    \t\t['o'] = true,\n\t\t['u'] = true,\n\t\t['y'] = true,\n\t\t['A'] = true,\n\t\
    \t['E'] = true,\n\t\t['I'] = true,\n\t\t['O'] = true,\n\t\t['U'] = true,\n\t\t\
    ['Y'] = true,\n\t\t['B'] = true,\n\t\t['b'] = true,\n\t\t['z'] = true,\n\t\t['Z']\
    \ = true,\n\t\t['c'] = true,\n\t\t['d'] = true,\n\t\t['k'] = true,\n\t\t['l']\
    \ = true,\n\t\t['m'] = true,\n\t\t['n'] = true,\n\t\t['p'] = true,\n\t\t['r']\
    \ = true,\n\t\t['s'] = true,\n\t\t['t'] = true,\n\t\t['v'] = true,\n\t\t['w']\
    \ = true,\n\t\t['x'] = true,\n\t\t['y'] = true,\n\t\t['*'] = true,\n\t\t['!']\
    \ = true\n\t}\n\t-- remove vowels\n\tfor i = 1, text:len() do\n\t\t-- ignore spaces\n\
    \t\tif text:sub(i, i + 1) == ' ' then\n\t\t\ti = i + 1\n\t\t\t-- ignore multiple\
    \ spaces\n\t\t\twhile text:sub(i, i + 1) == ' ' do\n\t\t\t\ti = i + 1\n\t\t\t\
    end\n\t\tend\n\t\t-- ignore any letters that are not in the letters\n\t\tif not\
    \ letters[text:sub(i, i)]then\n\t\t\t-- ignore the characters that are not in\
    \ the letters.\n\t\t\ti = i + 1\n\t\tend\n\tend\n\t-- remove consonants from the\
    \ text\n\tfor i = 1, text:len() do\n\t\tif not letters[text:sub(i, i)]then\n\t\
    \t\t-- ignore the characters that are not in the letters.\n\t\t\ti = i + 1\n\t\
    \tend\n\tend\n\t-- return text\n\treturn text:sub(1, text:len() - 1)\nend", " \
    \ local removed = {}\n  -- Create an empty string that we will append the removed\
    \ characters to.\n  for i = 1, #text do\n    removed[#removed+1] = text[i]\n \
    \ end\n  -- Iterate over the string and remove all vowels.\n  for i = 1, #text\
    \ do\n    if string.sub(text, i, i+1) ~= 'A' .. 'E' .. 'I' .. 'O' .. 'U' then\n\
    \      removed[#removed+1] = string.sub(text, i, i+1)\n    end\n  end\n  -- Return\
    \ the string.\n  return table.concat(removed)\nend", "  if text == nil then return\
    \ '' end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  return string.gsub(text,\
    \ '[aeiou]', '') .. string.gsub(text, '[AEIOU]', '')\nend", "   text = text:gsub('[aA]',\
    \ '')\n   text = text:gsub('[zZ]', '')\n   text = text:gsub('[Zz]', '')\n   return\
    \ text\nend", "  return text:gsub('([aeiouAEIOU])', function(x)\n    return ''\n\
    \  end)\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local text = text:lower()\n\
    \  for _, char in pairs(text) do\n    if vowels[char] then\n      text = text:gsub(char,\
    \ '')\n    end\n  end\n  return text\nend\n</cell>\n<text>\nAvoid using for loop\n\
    To iterate over each character of a string, we use string.gsub() that takes a\
    \ regular expression, and a replacement expression as a parameter. Let's see how\
    \ this works:", "   local vowels = {}\n   for i = 1, #text do\n      table.insert(vowels,\
    \ string.sub(text, i, i + 1))\n   end\n   return table.concat(vowels)\nend\n</cell>\n\
    <text>\nExercise 2: Define a function that takes a string and returns the same\
    \ string with only the spaces removed and the capitals converted.", "  return\
    \ text:gsub(\"a\",\"z\"):gsub(\"e\",\"z\"):gsub(\"i\",\"z\"):gsub(\"o\",\"z\"\
    ):gsub(\"u\",\"z\"):gsub(\"A\",\"z\"):gsub(\"E\",\"z\"):gsub(\"I\",\"z\"):gsub(\"\
    O\",\"z\"):gsub(\"U\",\"z\"):gsub(\"i\",\"z\"):gsub(\"A\",\"z\"):gsub(\"a\",\"\
    z\"):gsub(\"e\",\"z\"):gsub(\"i\",\"z\"):gsub(\"o\",\"z\"):gsub(\"u\",\"z\"):gsub(\"\
    y\",\"z\"):gsub(\"\xF1\",\"z\"):gsub(\"\xD1\",\"z\"):gsub(\"\xC1\",\"z\"):gsub(\"\
    \xC9\",\"z\"):gsub(\"\xCD\",\"z\"):gsub(\"\xD3\",\"z\"):gsub(\"\xDA\",\"z\"):gsub(\"\
    \xE1\",\"z\"):gsub(\"\xE9\",\"z\"):gsub(\"\xED\",\"z\"):gsub(\"\xF3\",\"z\"):gsub(\"\
    \xFA\",\"z\"):gsub(\"\xE1\",\"z\"):gsub(\"\xE9\",\"z\"):gsub(\"\xED\",\"z\"):gsub(\"\
    \xF3\",\"z\"):gsub(\"\xFA\",\"z\"):gsub(\"\xF1\",\"z\"):gsub(\"\xD1\",\"z\"):gsub(\"\
    \xC1\",\"z\"):gsub(\"\xC9\",\"z\"):gsub(\"\xCD\",\"z\"):gsub(\"\xD3\",\"z\"):gsub(\"\
    \xDA\",\"z\"):gsub(\"\xC1\",\"z\"):gsub(\"\xC9\",\"z\"):gsub(\"\xCD\",\"z\"):gsub(\"\
    \xD3\",\"z\"):gsub(\"\xDA\",\"z\"):gsub(\"\xE1\",\"z\"):gsub(\"\xE9\",\"z\"):gsub(\"\
    \xED\",\"z\"):gsub(\"\xF3\",\"z\"):gsub(\"\xFA\",\"z\"):gsub(\"\xE1\",\"z\"):gsub(\"\
    \xE9\",\"z\"):gsub(\"\xED\",\"z\"):gsub(\"\xF3\",\"z\"):gsub(\"\xFA\",\"z\"):gsub(\"\
    \xF1\",\"z\"):gsub(\"\xD1\",\"z\"):gsub(\"\xC1\",\"z\"):gsub(\"\xC9\",\"z\"):gsub(\"\
    \xCD\",\"z\"):gsub(\"\xD3\",\"z\"):gsub(\"\xDA\",\"z\"):gsub(\"\xE1\",\"z\"):gsub(\"\
    \xE9\",\"z\"):gsub(\"\xED\",\"z\"):gsub(\"\xF3\",\"z\"):gsub(\"\xFA\",\"z\"):g",
  "  local words = text:gsub('%a+%a+', '%a'):gsub('%A+%A+', ''):gsub('%s+%s+', '%s'):gsub('%%a+%%a+',\
    \ '%%a'):gsub('%%A+%%A+', ''):gsub('%%s+%%s+', '%%s'):gsub('%%a+%%a%%', '%%'):gsub('%%A+%%A%%',\
    \ ''):gsub('%%a+%%', '%%'):gsub('%%A+%%A%%', '')\n  return text:gsub('%a+%a+',\
    \ '%a'):gsub('%A+%A+', ''):gsub('%s+%s+', '%s'):gsub('%%a+%%a+', '%%a'):gsub('%%A+%%A+',\
    \ ''):gsub('%%s+%%s+', '%%s'):gsub('%%a+%%a%%', '%%'):gsub('%%A+%%A%%', ''):gsub('%%a+%%',\
    \ '%%'):gsub('%%A+%%A%%', '')\nend", "    if text == nil then\n        text =\
    \ ''\n    end\n    local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" }\n\
    \    return text:gsub(\"[\" .. table.concat(vowels, \"\") .. \"]\", \"\")\nend",
  "  return text:gsub('.', function(c) \n    return {'a','e','i','o','u','A','E','I','O','U'}[tolower(c)]\n\
    \  end)\nend", "    local new_text = ''\n    for i = 1, #text do\n        local\
    \ char = text[i]\n        if char in string.uppercase then\n            new_text\
    \ = new_text .. string.sub(text, i, i - 1)\n        else\n            new_text\
    \ = new_text .. char\n        end\n    end\n    return new_text\nend", "  return\
    \ text:gsub('[aeiou]', '')\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local textWithOutVowels = text:gsub('([a-z])([aeiou])', function(w)\n    return\
    \ string.sub(w, 1, 2)\n  end)\n  local textWithoutVowels = text:gsub('([a-z])([aeiou])',\
    \ function(w)\n    if vowels[w] then\n      return w\n    else\n      return ''\n\
    \    end\n  end)\n  return textWithoutVowels\nend", "\tlocal vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n\t-- removing vowels from the string\n\tlocal result = text:gsub('['..vowels..'u]+',\
    \ '')\n\treturn result\nend", "  local has_vowel = false\n  text:gsub('%a', function(c)\n\
    \    has_vowel = true\n  end)\n  if has_vowel then\n    text:gsub('%c', function(c)\n\
    \      text = text:gsub('%c', c)\n    end)\n  end\n  return text\nend", "  return\
    \ text:gsub(\"[aeiou]\", \"\")\nend", "  -- replace all vowels with empty string.\n\
    \  text = string.gsub(text, '[aeiouAEIOU]', '')\n  return text\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
