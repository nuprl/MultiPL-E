name: HumanEval_102_choose_num
language: lua
prompt: "-- This function takes two positive numbers x and y and returns the\n-- biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n-- there's no\
  \ such number, then the function should return -1.\n-- For example:\n-- >>> choose_num(12,\
  \ 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function choose_num(x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
  \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12),\
  \ -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
  \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
  \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
  \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ['    local z', "   if x < y then\n      choose_num(y, x)\n   else\n\
    \      local m = math.floor((y - x) / 2)\n      if x % 2 == 0 then\n         return\
    \ x\n      elseif y % 2 == 0 then\n         return y\n      else\n         if\
    \ m % 2 == 1 then\n            return m\n         else\n            choose_num(m,\
    \ y)\n         end\n      end\n   end\nend", "    if x < y then\n        x, y\
    \ = y, x\n    end\n    for i = x, y do\n        if i ~= 0 and i ~= 1 then\n  \
    \          return i\n        end\n    end\n    return -1\nend", "    if x >= y\
    \ and x >= x then\n        if y > x then\n            return y\n        else\n\
    \            return x\n        end\n    else\n        if y >= x then\n       \
    \     return x\n        else\n            return y\n        end\n    end\nend",
  "\tlocal x_is_int = type(x - 1) == \"number\" and\n\t\t( x >= 0 or x == math.floor(x)\
    \ )\n\tlocal y_is_int = type(y - 1) == \"number\" and\n\t\t( y >= 0 or y == math.floor(y)\
    \ )\n\t\n\tif not x_is_int or not y_is_int then\n\t\treturn -1\n\tend\n\t\n\t\
    local x_evenly_divisible = x_is_int and x % 2 == 0\n\tlocal y_evenly_divisible\
    \ = y_is_int and y % 2 == 0\n\t\n\tif not x_evenly_divisible or not y_evenly_divisible\
    \ then\n\t\treturn -1\n\tend\n\t\n\tlocal min_value = x_is_int and math.floor(x)\
    \ or math.ceil(x)\n\tlocal max_value = y_is_int and math.floor(y) or math.ceil(y)\n\
    \t\n\tlocal max_value = min_value\n\tlocal min_value_index = 1\n\t\n\twhile min_value\
    \ != max_value do\n\t\tlocal value = min_value + max_value\n\t\t\n\t\tif value\
    \ == max_value then\n\t\t\tmax_value = min_value + 2\n\t\telse\n\t\t\tmin_value\
    \ = value + 1\n\t\t\tmax_value = max_value + 1\n\t\tend\n\t\n\t\tif min_value\
    \ == max_value then\n\t\t\tmin_value = min_value + 2\n\t\telse\n\t\t\tmin_value\
    \ = min_value + 1\n\t\t\tmax_value = max_value + 1\n\t\tend\n\t\n\t\tif not x_is_int\
    \ or not y_is_int then\n\t\t\treturn -1\n\t\tend\n\t\n\t\tif not x_evenly_divisible\
    \ or min_value % 2 == 1 then\n\t\t\tmin_value = min_value - 1\n\t\tend\n\t\t\n\
    \t\tif not y_evenly_divisible or max_value % 2 == 1 then\n\t\t\tmax_value = max_value\
    \ - 1\n\t\tend\n\t\n\t\tmin_value_index = min_value_index + 1\n\tend\n\t\n\treturn\
    \ min_value_index\nend\n\t", "    local xs = x .. \"<=\" .. y\n    local ys =\
    \ y .. \"<=\" .. x\n    if redis.call('zrangebyscore', KEYS[1], xs) == 0 then\
    \ return -1 end\n    if redis.call('zrangebyscore', KEYS[1], ys) == 0 then return\
    \ -1 end\n    local x = redis.call('zrangebyscore', KEYS[1], xs, unpack(redis.call('zrangebyscore',\
    \ KEYS[1], ys, '-inf', unpack(redis.call('zrangebyscore', KEYS[1], xs, '-inf',\
    \ unpack(redis.call('zrangebyscore', KEYS[1], xs, unpack(redis.call('zrangebyscore',\
    \ KEYS[1], ys))))))))\n    if x == 1 then return -1 end\n    return x\nend", " \
    \   local max_val = -1\n    local counter = 1\n    while counter<=y do\n     \
    \   local test_val = x*counter\n        if test_val<=x and test_val%2==0 then\n\
    \            if test_val>max_val then\n                max_val = test_val\n  \
    \          end\n        end\n        counter = counter + 1\n    end\n    return\
    \ max_val\nend\n</cell>\n<text>\nProblem 10\nWrite a program that asks the user\
    \ for a number\nand that displays two strings depending on\nwhether that number\
    \ is odd or even. For example, if the\nuser inputs 23, the program should display\n\
    The number is even, The number is odd\nIf the number is odd\nThe number is even\n\
    If the number is even\nThe number is odd\nTo test your program, type the number\n\
    21 and then hit Enter:", "  local result\n  local m\n  if x < y then\n    m =\
    \ y\n    x = y\n    y = m\n  end\n  -- The value of m is 0 if the first number\
    \ is less than the second number.\n  if y > x then\n    if y % 2 == 0 then\n \
    \     -- m is 0, so y = x/2.\n      result = (x / 2)\n    else\n      -- x is\
    \ not divisible by 2, so x = y, y = y/2.\n      result = y\n    end\n  else\n\
    \    -- x = 0 or y is 0\n    result = 0\n  end\n  return result\nend", "   for\
    \ i = x, y + 1 do\n      if i ~= x and i ~= y then\n         return i\n      end\n\
    \   end\n   return -1\nend", "   if x > y then x, y = y, x end\n   local limit\
    \ = math.max(x, y)\n   while x <= limit do\n      if x == 2 or x == 3 or x ==\
    \ 5 or x == 7 or x == 9\n      or x == 11 then return x\n      elseif x % 2 =\
    \ 0 then x = x + 1 else\n      x = x - 1 end\n   end\n   return -1\nend", "  if\
    \ x < y then\n    if x <= 0 then\n      return -1\n    end\n    return y\n  end\n\
    \  if x > y then\n    if x >= 0 then\n      return x\n    end\n    return y\n\
    \  end\n  return x\nend", "    if x < y then\n        return choose_num(y, x)\n\
    \    end", "\tlocal lower = x\n\tlocal upper = y\n\tlocal temp\n\tlocal i = 1\n\
    \t\n\trepeat\n\t\ttemp = lower + i\n\t\tif temp <= upper then\n\t\t\ti = i + 1\n\
    \t\telseif i == temp then\n\t\t\treturn temp\n\t\telse\n\t\t\ti = i\n\t\tend\n\
    \tuntil i == upper\n\t\n\treturn -1\nend", "   if x > y then\n      x, y = y,\
    \ x\n   end\n   return x + y\nend", "    if x >= y then return x end\n    for\
    \ i = x, y-1, -1 do\n        if i ~= math.floor(i) then break end\n    end\n \
    \   return i\nend", "\t-- base case\n\tif x < 2 then\n\t\treturn -1\n\tend", " \
    \  -- If x or y is less than 0 return -1 because that's not possible.\n   -- If\
    \ x or y is greater than or equal to 0 and x or y equals y+1, then\n   -- we can\
    \ return x or y because that's a possible answer.\n   if x < 0 or y < 0 then\n\
    \      if x < 0 then\n         return -1\n      else\n         return -1\n   \
    \   end\n   end\n   if x == y then\n      return x\n   end\n   -- If the numbers\
    \ x and y are both less than or equal to zero, we can't return\n   -- -1 because\
    \ that's not possible. \n   if x <= 0 or y <= 0 then\n      return -1\n   end\n\
    \   -- If x is greater than y, then x is bigger. Otherwise y is.\n   if x > y\
    \ then\n      return x\n   else\n      return y\n   end\nend", "\tlocal lx = math.floor(x\
    \ / 2)\n\tlocal ly = math.floor(y / 2)\n\tif lx <= ly then\n\t\tif lx > ly then\n\
    \t\t\tif x >= y then\n\t\t\t\treturn x\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\t\
    end\n\t\telse\n\t\t\tif x < y then\n\t\t\t\treturn y\n\t\t\telse\n\t\t\t\treturn\
    \ -1\n\t\t\tend\n\t\tend\n\telse\n\t\tif ly > lx then\n\t\t\tif y >= x then\n\t\
    \t\t\treturn x\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\t\telse\n\t\t\tif x\
    \ < y then\n\t\t\t\treturn y\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\t\tend\n\
    \tend\nend", "   if x >= y then return -1 end\n   if x <= y then return x end\n\
    \   if x % 2 == 0 and y % 2 == 0 then return x end\n   if x % 2 == 0 and y % 2\
    \ == 1 then return y end\n   if x % 2 == 1 and y % 2 == 0 then return x end\n\
    \   if x % 2 == 1 and y % 2 == 1 then return x end\n   if x % 2 ~= 0 and y % 2\
    \ ~= 0 then return x end\n   if x % 2 ~= 0 and y % 2 ~= 1 then return y end\n\
    \   if x % 2 ~= 1 and y % 2 ~= 0 then return y end\n   if x % 2 ~= 1 and y % 2\
    \ ~= 1 then return x end\nend", "  local even = 1\n  local max = 0\n  \n  while\
    \ even <= y do\n    local diff = x - even\n    if even % 2 == 0 then\n      if\
    \ diff > max then\n        max = diff\n      end\n    else\n      if diff > max\
    \ then\n        max = diff\n      end\n    end\n    even = even + 1\n  end\n \
    \ return max\nend", "  if x > y then return -1 end\n  if x % 2 == 0 then\n   \
    \ local a = x / 2\n    while a < y do\n      if a % 2 == 0 then\n        return\
    \ a\n      end\n      a = a + 1\n    end\n  else\n    local a = y / 2\n    while\
    \ a < x do\n      if a % 2 == 0 then\n        return a\n      end\n      a = a\
    \ + 1\n    end\n  end\n  return -1\nend", "    local function is_even_num(n)\n\
    \        return n % 2 == 0 and n > 0 and n < x\n    end\n    for _ = 1, x do\n\
    \        if is_even_num(y) then\n            return y\n        end\n        y\
    \ = y + 1\n    end\n    return -1\nend", "    if x < y then\n        x, y = y,\
    \ x\n    end\n    while x <= y do\n        if x%2 == 0 and y%2 == 0 then\n   \
    \         return x\n        end\n        x = x + 1\n    end\n    return -1\nend",
  "  if x <= y then\n    return -1\n  end\n  if x%2 == 0 and y%2 == 0 then\n    return\
    \ y\n  end\n  \n  local r = x + y\n  if r <= 0 then\n    return -1\n  end\n  \n\
    \  local q = 1\n  local m = 1\n  while r < q do\n    local tmp = q\n    q = r\
    \ + q\n    if q < x and m <= y then\n      m = y\n    end\n    r = tmp\n  end\n\
    \  return m\nend", "   if x >= y and x <= y then\n      return x\n   else\n  \
    \    if x < y then\n         return y\n      else\n         return x\n      end\n\
    \   end\nend", "\tif x > y then\n\t\tlocal tmp = x\n\t\tx = y\n\t\ty = tmp\n\t\
    end\n\tfor n = x, y + 1 do\n\t\tif n % 2 == 0 and n >= y then\n\t\t\treturn n\n\
    \t\tend\n\tend\n\treturn -1\nend", "\t-- Initialize result to -1:\n\tlocal result\
    \ = -1\n\t-- Loop from x to y:\n\tfor x = x, y do\n\t\tif x % 2 == 0 then\n\t\t\
    \t-- If x is even, subtract 1 from it:\n\t\t\tx = x - 1\n\t\telse\n\t\t\t-- If\
    \ x is odd, add 1 from it:\n\t\t\tx = x + 1\n\t\tend\n\t\t-- If x is even, add\
    \ 1 from it:\n\t\tif x % 2 == 0 then\n\t\t\tx = x + 1\n\t\tend\n\t\t-- If x is\
    \ odd, subtract 1 from it:\n\t\tif x % 2 == 1 then\n\t\t\tx = x - 1\n\t\tend\n\
    \t\t-- If x is equal to y:\n\t\tif x == y then\n\t\t\t-- If x is even, add 2 from\
    \ it:\n\t\t\tif x % 2 == 0 then\n\t\t\t\tx = x + 2\n\t\t\tend\n\t\t\t-- If x is\
    \ odd, add 1 from it:\n\t\t\tif x % 2 == 1 then\n\t\t\t\tx = x + 1\n\t\t\tend\n\
    \t\t\t-- Result is equal to the biggest even integer number that is \n\t\t\t--\
    \ in the range [x, y] inclusive. Break the loop.\n\t\t\tresult = x\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn result\nend", "    local num_x = tonumber(x)\n    local\
    \ num_y = tonumber(y)\n    \n    if num_x > num_y then \n        return choose_num(y,\
    \ x)\n    elseif num_x == num_y then \n        return -1\n    elseif num_x <=\
    \ num_y then\n        local evens = 0\n        for i = num_x - 1, num_y + 1, 2\
    \ do\n            if i % 2 == 0 then \n                evens = evens + 1\n   \
    \         end\n        end\n        \n        if evens == 0 then \n          \
    \  return num_x\n        else \n            return -1\n        end\n    end\n\
    end", "   if x < y then\n      local temp = x\n      x = y\n      y = temp\n \
    \  end\n   -- First we see if the number is in the given range:\n   -- if x <\
    \ y then\n      -- return x -- If the number is in the left range, we're done.\n\
    \   -- else\n      -- return y -- If the number is in the right range, we're done.\n\
    \   -- end\n   if x <= y then\n      return x\n   end\n   -- else\n      return\
    \ y\n   -- end\nend", "    if x < y then\n        local n = math.max(x, y)\n \
    \       while x % 2 == 0 and y % 2 == 0 and x < y do\n            x = x + 1\n\
    \            y = y + 1\n        end\n        return n\n    else\n        local\
    \ n = math.max(x, y)\n        while x % 2 == 1 and y % 2 == 1 and x > y do\n \
    \           x = x + 1\n            y = y + 1\n        end\n        return n\n\
    \    end\nend", "   if x < y then return choose_num(y, x) end\n   if x == y then\
    \ return x end\n   if x % 2 == 0 and y % 2 == 0 then return x end\n   if x % 2\
    \ == 0 then\n      local y1 = y / 2\n      return choose_num(y, y1) \n   else\n\
    \      local x1 = x / 2\n      return choose_num(x1, y) \n   end\nend", "  local\
    \ i\n  \n  -- Handle edge case\n  if x <= y then\n    return -1\n  end\n  \n \
    \ -- Handle edge case\n  if y == 1 then\n    return x\n  end\n  \n  -- Find the\
    \ minimum integer that divides both x and y, including the\n  -- case when x =\
    \ 1\n  i = 1\n  while i*i < x and i*i + y < y do\n    i = i + 1\n  end\n  \n \
    \ -- Now i holds the minimum integer that divides both x and y\n  -- inclusive\n\
    \  \n  -- Find the smallest even number that divides both x and y\n  i = 1\n \
    \ while i*i < x and i*i + y ~= y do\n    i = i + 1\n  end\n  \n  -- Now i holds\
    \ the smallest even number that divides both x and y\n  -- inclusive\n  \n  --\
    \ Return x\n  if i*i + x >= x then\n    return x\n  end\n  \n  -- Return y\n \
    \ if i*i + y >= y then\n    return y\n  end\n  \n  -- Return the maximum even\
    \ integer between x and y, inclusive\n  return i*i + x\nend", "   if x >= y then\n\
    \      return -1\n   end\n   if x == y then\n      return x\n   end\n   local\
    \ middle = (x + y) / 2\n   if middle % 2 == 0 then\n      return choose_num(x,\
    \ y)\n   else\n      return choose_num(middle, y)\n   end\nend", "   -- Return\
    \ smallest number in the range [x, y] inclusive.\n   if x < y then\n      return\
    \ -1\n   end", "\tlocal function factors()\n\t\tlocal f = {}\n\t\twhile x >= 2\
    \ do\n\t\t\tfor i=3, x/i, 1 do\n\t\t\t\ttable.insert(f, i)\n\t\t\tend\n\t\t\t\
    x = x - (x/i)\n\t\tend\n\t\treturn f\n\tend\n\tlocal fact = factors()\n\tlocal\
    \ result = nil\n\tfor i=#fact, 1 do\n\t\tif fact % i == 0 then\n\t\t\tresult =\
    \ i\n\t\t\tbreak\n\t\tend\n\tend\n\tif result ~= nil then\n\t\tresult\n\telse\n\
    \t\treturn -1\n\tend\nend", "\t-- Check if x and y are in the range.\n\tif x <\
    \ y then\n\t\treturn -1\n\tend\n\t-- If x is even, then y is even too, so we don't\
    \ need to check them\n\tif x % 2 = 0 then\n\t\tlocal result = x\n\t\twhile result\
    \ % 2 = 0 do\n\t\t\tresult = result / 2\n\t\tend\n\t\tif result < y then\n\t\t\
    \treturn -1\n\t\tend\n\tend\n\t-- If x is odd, then y is odd, so we need to check\
    \ them\n\tif x % 2 ~= 0 then\n\t\tlocal result = x\n\t\twhile result % 2 ~= 0\
    \ do\n\t\t\tresult = result / 2\n\t\tend\n\t\tif result < y then\n\t\t\treturn\
    \ -1\n\t\tend\n\tend\n\t-- If both x and y are even, then we have no possible\
    \ answer.\n\tif x == y then\n\t\treturn -1\n\tend\n\t-- If x is even, then y is\
    \ even, so we have to check them separately\n\tif x % 2 = 0 then\n\t\tlocal result\
    \ = x\n\t\twhile result % 2 = 0 do\n\t\t\tresult = result / 2\n\t\tend\n\t\tif\
    \ result < y then\n\t\t\treturn -1\n\t\tend\n\tend\n\t-- If x is odd, then y is\
    \ odd, so we have to check them separately\n\tif x % 2 ~= 0 then\n\t\tlocal result\
    \ = x\n\t\twhile result % 2 ~= 0 do\n\t\t\tresult = result / 2\n\t\tend\n\t\t\
    if result < y then\n\t\t\treturn -1\n\t\tend\n\tend\n\t-- We found the number\
    \ in the range\n\treturn x\nend", "\tif x >= y and x % 2 = 0 then\n\t\tx = x +\
    \ 1\n\tend", "    if x <= y then\n        return -1\n    end\n    -- Finding first\
    \ even integer greater than or equal to x and less than or equal to y\n    --\
    \ This line is equivalent to: x - (x - 1) / 2 \n    -- If x is odd, then this\
    \ expression becomes x/2\n    local x = ((x - (x - 1) / 2) * 2) % x + 1\n    --\
    \ Finding first odd integer greater than or equal to x and less than or equal\
    \ to y\n    -- This line is equivalent to: x - (x - 1) / 2 + 1\n    -- If x is\
    \ even, then this expression becomes x/2 + 1\n    -- But if the first odd number\
    \ is greater than or equal to y, then \n    -- this expression becomes x/2 + 1\
    \ \n    local y = (y - (y - 1) / 2) * 2  % x + 1\n    return y - (y - 1) / 2\n\
    end\n</cell>\n<text>\n\u0417\u0430\u0434\u0430\u043D\u0438\u0435: \u0412\u044B\
    \u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0441\u043A\u043E\u043C\u044B\u0439\
    \ \u0447\u0438\u0441\u043B\u043E \u0447\u0438\u0441\u043B\u043E\u0432\u043E\u0439\
    \ \u0441\u0442\u0435\u043F\u0435\u043D\u0438 2.", "   if x >= y then\n      error(\"\
    The second number must be greater than the first.\")\n   end", "\tlocal z = 0\n\
    \t\n\twhile x < y do\n\t\tif x % 2 == 0 then\n\t\t\tz = x + 1\n\t\t\tbreak\n\t\
    \tend\n\t\t\n\t\tx = x + 1\n\tend\n\t\n\treturn z\nend", "\tlocal x_even, x_odd\
    \ = x / 2, x % 2\n\tlocal y_even, y_odd = y / 2, y % 2\n\tif x_even > y_even and\
    \ x_odd > y_odd then\n\t\treturn x_even + y_even\n\telse\n\t\treturn x_even +\
    \ y_odd\n\tend\nend\n</cell>\n<text>\nProblem 5\nWrite a procedure that takes\
    \ two positive numbers x and y and returns true if there exists some integer m\
    \ such that x + m = y, and false otherwise. For example, choose_num(10, 11) should\
    \ return true.", "    for i=1, x do if x%i == 0 then return x end end\n    for\
    \ i=1, y do if y%i == 0 then return y end end\n    return -1\nend", "   local\
    \ num = math.floor((x + y) / 2)\n   if num >= x and num <= y then\n      return\
    \ num\n   else\n      return -1\n   end\nend", "  if x < y then\n    x, y = y,\
    \ x\n  end\n  \n  local max_number = -1\n  \n  for number = x, y+1 do\n    if\
    \ number % 2 == 0 and number > max_number then\n      max_number = number\n  \
    \  end\n  end\n  \n  return max_number\nend", "  if x > y then x, y = y, x end\n\
    \  local max_num, max_num_index = 0, 0\n  for index = 1, y do\n    if index ==\
    \ x then break end\n    max_num = max_num or (index % 2 == 0 and index or -1)\n\
    \    if max_num > max_num_index then\n      max_num, max_num_index = max_num,\
    \ index\n    end\n  end\n  return max_num_index\nend", "    if x == y then return\
    \ x end\n    if x ~= y and x >= y then return y end\n    local z = 1\n    while\
    \ z < x do\n        z = z * 2\n    end\n    return z % x\nend", "    local evens\
    \ = 1\n    local odds = 0\n    local i = 1", "    if x < y then return choose_num(y,\
    \ x) else return x end\n    for i = 1, 10 do\n        if i * i > x and i * i <=\
    \ y then return i * i end\n    end\n    return -1\nend", "   if x == 2 or y ==\
    \ 2 then\n      return -1\n   end\n   \n   local x = math.floor(x)\n   local y\
    \ = math.floor(y)\n   \n   if x ~= y and x >= y then\n      return x\n   else\n\
    \      return y\n   end\nend", "    local m = math.min(math.abs(x), math.abs(y))\n\
    \    if m == 0 then\n        return -1\n    elseif m > 0 then\n        if x %\
    \ 2 == 0 and y % 2 == 0 then\n            return -1\n        elseif x % 2 == 1\
    \ and y % 2 == 1 then\n            return m\n        elseif x % 2 == 1 and y %\
    \ 2 == 0 then\n            return -1\n        elseif x % 2 == 0 and y % 2 == 1\
    \ then\n            return -1\n        end\n    end\n    return m\nend\n</cell>\n\
    <text>\n6. Functions\nIn Lua, functions are just names (like \"add\" or \"sum\"\
    \ above), that can take any number of arguments (including 0).", "  if x < y then\n\
    \    return choose_num(y, x)\n  else\n    local m = (x + y) / 2\n    return m\
    \ % 2 == 0 and m or -1\n  end\nend", "\tlocal evens\n\t-- Create a list of all\
    \ evens from [x, y].\n\tevens = x:step(y, 2, true)", "    local max_val = 0\n\
    \    local max_num = nil", "   local n = math.min(x, y)\n   local m = math.max(x,\
    \ y)\n   if m > n then\n      local t = n\n      n = m\n      m = t\n   end\n\
    \   local ans = m\n   while m % 2 == 0 do\n      m = m / 2\n      if m <= n then\n\
    \         ans = m\n      else\n         ans = -1\n      end\n   end\n   return\
    \ ans\nend", "  if x == y and x >= 0 then return x else return -1 end\n  \n  if\
    \ x == y then\n    if x == 0 or y == 0 then return -1\n    else return x end\n\
    \  end\n  \n  if x <= y then\n    if x % 2 == 0 then return choose_num(x+2, y)\n\
    \    else return choose_num(x, y)\n    end\n  \n  if y <= x then\n    if y % 2\
    \ == 0 then return choose_num(x, y+2)\n    else return choose_num(x, y)\n    end\n\
    \  \n  if x > y and y > x then\n    if x % 2 == 1 then return choose_num(x+2,\
    \ y-1)\n    else return choose_num(x, y) end\n  \n  if y > x and x > y then\n\
    \    if y % 2 == 1 then return choose_num(x-1, y-1)\n    else return choose_num(x,\
    \ y) end\n  \n  if x > y and y > x then\n    if x % 2 == 1 then return choose_num(x+2,\
    \ y-1)\n    else return choose_num(x, y) end\n  \n  if y > x and x > y then\n\
    \    if y % 2 == 1 then return choose_num(x-1, y-1)\n    else return choose_num(x,\
    \ y) end\n  \n  if x % 2 == 1 then return -1\n  else return x end\nend", "  if\
    \ x >= y then\n    return -1\n  end\n  if x < 0 then\n    x = -x\n  end\n  if\
    \ x < y then\n    return x\n  end\n  local limit = math.sqrt(x*x + y*y)\n  local\
    \ limit2 = limit / 2\n  local a, b, c, d\n  a = x + limit2\n  b = y + limit2\n\
    \  c = x - limit2\n  d = y - limit2\n  if b < a then\n    d, a, b, c = a, b, c,\
    \ d\n  end\n  if c < d then\n    a, b, c, d = c, d, a, b\n  end\n  if c <= 0 then\n\
    \    return -1\n  end\n  if d <= 0 then\n    return 1\n  end\n  if a * c + b *\
    \ d > limit then\n    return -1\n  end\n  return a * c + b * d\nend", "  if x\
    \ <= y then\n    return -1\n  elseif x == y then\n    return x\n  elseif x > y\
    \ then\n    return y\n  end", "   if x < y then\n      if x % 2 = 0 then\n   \
    \      return x\n      else\n         return y\n      end\n   elseif x >= y then\n\
    \      if y % 2 = 0 then\n         return y\n      else\n         return x\n \
    \     end\n   elseif x == y then\n      return x\n   else\n      if y % 2 = 0\
    \ then\n         return x\n      else\n         return y\n      end\n   end\n\
    end", "   if x >= y then return x else return y\nend", "\tx = tonumber(x)\n\t\
    y = tonumber(y)\n\tif x < y then\n\t\tx, y = y, x\n\tend\n\tlocal lower = x\n\t\
    local upper = y\n\twhile true do\n\t\tlocal lower = math.floor(lower / 2)\n\t\t\
    local upper = math.floor(upper / 2)\n\t\tif lower % 2 == 0 and upper % 2 == 0\
    \ then\n\t\t\tlocal num = lower + upper\n\t\t\tif num > 0 and (num <= x or num\
    \ <= y) then\n\t\t\t\treturn num\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend",
  "   if x < y then\n      x, y = y, x\n   end", "  for i = x, y do\n    if i % 2\
    \ == 0 then\n      return i\n    end\n  end\n  return -1\nend", "\tlocal biggest\
    \ = x \n\tlocal x_even = 1\n\tlocal y_even = 1\n\twhile x_even == y_even do\n\t\
    \tx_even = math.floor(x/2)\n\t\ty_even = math.floor(y/2)\n\t\tif x_even > y_even\
    \ then\n\t\t\tbiggest = x_even\n\t\telse\n\t\t\tbiggest = y_even\n\t\tend\n\t\
    end\n\tif biggest == x then\n\t\treturn x\n\telseif biggest == y then\n\t\treturn\
    \ y\n\telse\n\t\treturn biggest\n\tend\nend", "  local x_min = (x > y and x) or\
    \ y\n  local x_max = (x < y and x) or y\n  local step = 1\n  while x_min ~= x_max\
    \ do\n    local x_mid = x_min + (x_max - x_min) / math.min(step, 101)\n    local\
    \ y_mid = choose_num(x_mid, y)\n    if y_mid == x then\n      return x_mid\n \
    \   end\n    step = step * 10\n    x_min = x_mid\n  end\n  return -1\nend", " \
    \ local x_int = x:floor()\n  local y_int = y:floor()\n  local x_even = x_int %\
    \ 2 == 0 and 1 or 0\n  local y_even = y_int % 2 == 0 and 1 or 0\n  \n  if x_int\
    \ <= y_int then\n    return x_int - x_even + y_even\n  else\n    return y_int\
    \ - y_even + x_int\n  end\nend\n</cell>\n<text>\nExercise 17 - Write a function\
    \ that takes a positive integer and returns the square of that integer. \nFor\
    \ example: \n>>> get_square(3)\n9", "  x = tonumber(x)\n  y = tonumber(y)\n  \n\
    \  if x < y then\n    if x ~= 0 then\n      x = x\n      y = y / 2 \n    end\n\
    \    return -1\n  end", "    if x < y then\n        return choose_num(y, x)\n\
    \    elseif x == y then\n        return x\n    else\n        return (x + y) /\
    \ 2 - 1\n    end\nend", "  if x <= y then\n    return -1\n  end", "    for i =\
    \ x, y + 1 do\n        if i ~= x and i ~= y and i ~= i + 1 then\n            return\
    \ i\n        end\n    end\n    return -1\nend", "  if x > y then\n    x, y = y,\
    \ x\n  end\n  local div = y / 2\n  local result = x % div\n  local t = div\n \
    \ while t > 1 do\n    if x % t == 0 then\n      result = t\n    end\n    t = t\
    \ / 2\n  end\n  return result\nend", "    local z\n    for i = 1, x/2 do\n   \
    \     if x % i == 0 then\n            z = i\n            break\n        end\n\
    \    end\n    if y <= z then\n        return z\n    end\n    return -1\nend",
  "  if x >= y and x <= 100 then\n    if y == 100 then\n      return y\n    else\n\
    \      while y >= x do\n        y = y - 2\n      end\n      return y\n    end\n\
    \  elseif x < y and y <= 100 then\n    if x == 100 then\n      return x\n    else\n\
    \      while x < y do\n        x = x + 2\n      end\n      return x\n    end\n\
    \  else\n    return -1\n  end\nend", "  local function is_odd(n)\n    return n\
    \ % 2 == 1\n  end\n  local function is_even_number(n)\n    return n % 2 == 0\n\
    \  end\n  \n  -- If x and y are even numbers, return the biggest even number in\
    \ the\n  -- range [x, y] inclusive. If there's no such number, then return -1.\n\
    \  -- Otherwise, return x.\n  local function choose_even_number(x, y)\n    return\
    \ is_even_number(x) and is_even_number(y) and x > y\n      and ((x % 2 == 0 and\
    \ y % 2 == 0) or is_odd(x) or is_odd(y))\n      and is_even_number(x) and is_even_number(y)\
    \ and x > y\n      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n\
    \      and is_even_number(x) and is_even_number(y) and x > y\n      and ((x %\
    \ 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n      and is_even_number(x)\
    \ and is_even_number(y) and x > y\n      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x)\
    \ or is_odd(y))\n      and is_even_number(x) and is_even_number(y) and x > y\n\
    \      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n      and\
    \ is_even_number(x) and is_even_number(y) and x > y\n      and ((x % 2 == 0 and\
    \ y % 2 == 0) or is_odd(x) or is_odd(y))\n      and is_even_number(x) and is_even_number(y)\
    \ and x > y\n      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n\
    \      and is_even_number(x) and is_even_number(y) and x > y\n      and ((x %\
    \ 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n      and is_even_number(x)\
    \ and is_even_number(y) and x > y\n      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x)\
    \ or is_odd(y))\n      and is_even_number(x) and is_even_number(y) and x > y\n\
    \      and ((x % 2 == 0 and y % 2 == 0) or is_odd(x) or is_odd(y))\n      and\
    \ is_even_number(x) and is_even_number(y) and x > y\n      and ((x % 2 == 0 and\
    \ y % 2 == 0) or is_odd(x) or is_odd(y))\n      and is_ev", "   local m = math.min(x,\
    \ y)\n   local n = math.max(x, y)\n   for i = 0, m do \n      if (n % i == 0)\
    \ then \n         return i\n      end\n   end\n   return -1\nend", "  if x >=\
    \ y then\n    return -1\n  end", "    local m = math.abs(x - y)\n    local a =\
    \ math.floor((x + y) / 2)\n    local b = math.floor((x + m) / 2)\n    local c\
    \ = math.floor((y + m) / 2)\n    if m == 0 then\n        return math.max(a, c,\
    \ b)\n    elseif x > y then\n        return choose_num(a, b) if a == b then return\
    \ b else return a end\n    else\n        return choose_num(a, c)\n    end\nend",
  "    if x >= y and x >= y then\n        return x\n    elseif x <= y and x <= y then\n\
    \        return y\n    end\n    local function recurse(x, y)\n        if x <=\
    \ y and y <= y then\n            return y\n        elseif x <= y and y >= y then\n\
    \            return -1\n        elseif x >= y and y <= y then\n            return\
    \ -1\n        elseif x >= y and y >= y then\n            return x\n        end\n\
    \        if x > y then\n            x, y = y, x\n        end\n        return recurse(x,\
    \ y - 1)\n    end", "  if x < y then\n    local t = x\n    x = y\n    y = t\n\
    \  end\n  local div = x/y\n  local mod = x%y\n  local i = 0\n  while true do\n\
    \    local m = i * (y / div)\n    if m == mod then\n      return m\n    end\n\
    \    if m%2 == 1 then\n      i = i + 1\n    end\n    if i < y then\n      i =\
    \ i + 1\n    end\n    if i == y then\n      return -1\n    end\n  end\nend", "\t\
    -- Handle invalid input in the base cases.\n\tif x ~= nil and y ~= nil and x <\
    \ y then\n\t\tif x ~= y then\n\t\t\t-- If x is greater than y, then x cannot be\
    \ in the range\n\t\t\t-- of x and y, therefore return -1.\n\t\t\treturn -1\n\t\
    \tend", "\tfor x = x, y - 1 do\n\t\tif math.floor(x) % 2 == 0 then\n\t\t\treturn\
    \ x\n\t\tend\n\tend\n\treturn -1\nend", "   if x <= y then\n      return x\n \
    \  else\n      return y\n   end\nend", "  if x < y then\n    return choose_num(y,\
    \ x)\n  end", "\tlocal max_number", "   if x <= y then return x end\n   return\
    \ y\nend", "\tif x < 0 or x > y or y < 0 then return -1 end\n\tlocal div = math.floor(x\
    \ / y)\n\tlocal num = x % y\n\twhile true do\n\t\tif num == 0 then break end\n\
    \t\tif num % div == 0 then break end\n\t\tdiv = div + 1\n\tend\n\treturn num\n\
    end", "  if x <= y then\n    return x\n  end\n  if x > y then\n    return y\n\
    \  end\n  local evens = false\n  local xx = x -- Use a temporary variable to fix\
    \ the value after it is overwritten\n  local xy = x -- Use a temporary variable\
    \ to fix the value after it is overwritten\n  local yy = y\n  local i = 1 -- Use\
    \ a temporary variable to fix the value after it is overwritten\n  while i <=\
    \ y do\n    if xy == xy then\n      evens = evens or i % 2 ~= 0\n      xx = xx\
    \ * 2\n      xy = xy * 2\n    end\n    yy = yy * 2\n    i = i + 1\n  end\n  return\
    \ xy if evens then\n    return -1\n  end\nend", "    if x >= y and y >= x then\
    \ return -1 end\n    local candidate = math.floor((x+y) / 2)\n    if x > y and\
    \ candidate > x then return candidate end\n    if x < y and candidate < y then\
    \ return candidate end\n    return candidate\nend", "\t-- Check whether there's\
    \ such number\n\tif x >= y and y > x then\n\t\tlocal z = 1\n\t\tlocal i = x\n\t\
    \twhile i < y do\n\t\t\tif z <= i then\n\t\t\t\tz = z * 10 + i - x\n\t\t\t\ti\
    \ = x + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif z < y then\n\t\
    \t\treturn -1\n\t\tend\n\t\treturn z\n\tend\nend", "  if x < y then\n    return\
    \ choose_num(y, x)\n  end\n  if x % 2 == 0 and y % 2 == 0 then\n    return x\n\
    \  end\n  if x % 2 == 0 and y % 2 ~= 0 then\n    return y\n  end\n  if x % 2 ~=\
    \ 0 and y % 2 == 0 then\n    return x\n  end\n  if x % 2 ~= 0 and y % 2 ~= 0 then\n\
    \    return y\n  end\n  return -1\nend", "\tlocal max_val = 0\n\tlocal max_index\
    \ = 1", "   if x > y then\n      x, y = y, x\n   end\n   if x == y then return\
    \ x end\n   if x <= y then return choose_num(x - 2, y) or choose_num(y - 1, x)\
    \ end\n   if x >= y then return choose_num(x - 1, y) or choose_num(y - 1, x) end\n\
    \   return -1\nend", "    if x >= y then\n        return -1\n    end\n    while\
    \ x < y do\n        x = x + 1\n        if x % 2 == 0 then\n            return\
    \ x\n        end\n    end\n    return x\nend", "    if x < y then\n        local\
    \ x1, y1, x2, y2 = x, y, x, y\n    else\n        local x1, y1, x2, y2 = y, x,\
    \ y\n    end\n    local a = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2,\
    \ 2))\n    if a <= 1.0 then\n        return x1\n    end\n    return -1\nend",
  "  if x > y then\n    return -1\n  else\n    if x < y then\n      return x\n   \
    \ else\n      local even, odd\n      even, odd = x, x + y\n      while even >=\
    \ odd do\n        even = even - odd\n        odd = odd + y\n      end\n      return\
    \ odd\n    end\n  end\nend", "   if x < y then x, y = y, x\n   if x <= 0 then\
    \ return -1 end\n   if y <= 0 then return -1 end\n   local z, m = 0, y\n   while\
    \ x <= m do\n      z = x + z * x\n      x = m - x\n   end\n   return z\nend",
  "   if x < y then\n      if x % 2 = 0 then\n         return x\n      else\n    \
    \     return y\n      end\n   else\n      if y % 2 = 0 then\n         return y\n\
    \      else\n         return x\n      end\n   end\nend", "   for i = x, y do \n\
    \      if ((i % 2) ~= 0) then\n         return i\n      end\n   end\n   -- Not\
    \ found\n   return -1\nend", "    local result = (x < y) and x:y or y:x\n    if\
    \ result == 0 then\n        return -1\n    else\n        return result\n    end\n\
    end", "  if x > y then\n    x, y = y, x\n  end\n  if x > 4294967296 or x < 0 then\n\
    \    return -1\n  end\n  if y == 0 then\n    return x\n  end\n  local function\
    \ count_bit(number)\n    if number < 0 then\n      return -1\n    end\n    local\
    \ count = 0\n    while number > 1 do\n      number = number / 2\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  local function is_odd(number)\n\
    \    return number % 2 ~= 0\n  end\n  local function is_even(number)\n    return\
    \ number % 2 == 0\n  end\n  local function is_odd_even(number)\n    return is_odd(number)\
    \ and is_even(number)\n  end\n  local function is_odd_odd(number)\n    return\
    \ is_odd(number) and is_odd(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_even(number)\n\
    \    return number % 2 == 0\n  end\n  local function is_odd(number)\n    return\
    \ number % 2 ~= 0\n  end\n  local function is_odd_odd(number)\n    return is_odd(number)\
    \ and is_odd(number)\n  end\n  local function is_odd_even(number)\n    return\
    \ is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  local function is_odd_even(number)\n\
    \    return is_odd(number) and is_even(number)\n  end\n  ", "    local even =\
    \ math.floor(x / 2)\n    local odd = x - even * 2\n    if even > 0 then\n    \
    \    return even\n    else\n        if odd > 0 then\n            return odd\n\
    \        else\n            return -1\n        end\n    end\nend", "\t-- If there's\
    \ no such number, then the function should return -1.\n\tif x < y then\n\t\t--\
    \ The biggest number is always going to be x.\n\t\treturn x\n\telse\n\t\t-- If\
    \ the first number is bigger than the second number, then the\n\t\t-- biggest\
    \ number is going to be the second number.\n\t\tif x < y then\n\t\t\treturn y\n\
    \t\telse\n\t\t\t-- If the first number is equal to the second number, then the\n\
    \t\t\t-- biggest number is going to be the second number.\n\t\t\treturn y\n\t\t\
    end\n\tend\nend", "   if x >= y then return -1\n   if y > x and y > 0 then return\
    \ y\n   if x > 0 and x > y then return x\n   local m = 1\n   while x*m <= y do\n\
    \      if x*m < y then return x*m\n      m = m + 1\n   end\n   if y == x*m then\
    \ return y\n   if x*m < y and x*m > 0 then return x*m\n   local m2 = 1\n   while\
    \ y*m2 <= x do\n      if y*m2 < x then return y*m2\n      m2 = m2 + 1\n   end\n\
    \   if x == y*m2 then return x\n   return -1\nend", "  if x < y then\n    x, y\
    \ = y, x\n  end\n  if x > y then\n    x, y = y, x\n  end\n  local m = (y..(x+1)-1).floor()\n\
    \  if m == x then\n    return m\n  end\n  return -1\nend", "   -- We return -1\
    \ if the input arguments are invalid\n   if x <= 0 then return -1 end\n   if y\
    \ <= 0 then return -1 end\n   -- The range is smaller than the biggest even number\
    \ that can appear in it\n   -- so we go through all even numbers, incrementing\
    \ x and y by 2 each time\n   -- We stop if we've found an odd number in the range\n\
    \   -- or we're out of range\n   for x = 0, y - 1 do\n      -- Check if the current\
    \ number is even\n      if x % 2 ~= 0 then\n         return x\n      end\n   \
    \   -- Increment x by 2\n      x = x + 2\n   end\n   -- Return -1 in case of an\
    \ error\n   return -1\nend", "    if x < y then\n        local tmp = x\n     \
    \   x = y\n        y = tmp\n    end", "  if x < y then\n    return choose_num(y,\
    \ x)\n  else\n    if x%2==0 and y%2==0 then\n      return x\n    elseif y%2==0\
    \ then\n      return y-1\n    else\n      return -1\n    end\n  end\nend", "\t\
    local max = -1\n\tlocal i = 1\n\twhile i <= y do\n\t\tif x > i then\n\t\t\tmax\
    \ = i\n\t\telseif i == x then\n\t\t\tmax = x\n\t\telse\n\t\t\tmax = i\n\t\tend\n\
    \t\ti = i + 2\n\tend\n\treturn max\nend", "    local x = tonumber(x)\n    local\
    \ y = tonumber(y)\n    if x < y then\n        x, y = y, x\n    end\n    local\
    \ max_num = math.max(x, y)\n    local evenly_divisible_by_x = x % 2 == 0\n   \
    \ local evenly_divisible_by_y = y % 2 == 0\n    if max_num > x and max_num > y\
    \ then\n        return max_num\n    end\n    if evenly_divisible_by_x then\n \
    \       return y\n    end\n    if evenly_divisible_by_y then\n        return x\n\
    \    end\n    return -1\nend", "  if x < y then\n    x, y = y, x\n  else\n   \
    \ return -1\n  end", "  if x ~= nil and y ~= nil and x < y and math.floor(x) %\
    \ 2 == math.floor(y) % 2 then \n    return choose_num(y, x-1); \n  end\n  return\
    \ -1\nend", "   if x >= y then\n      if x == y then\n         return x\n    \
    \  else\n         return y\n      end\n   else\n      if x < y then\n        \
    \ return choose_num(y, x)\n      else\n         return x\n      end\n   end\n\
    end", "\treturn x if (x > 0 and y > 0 and x and y > x and x <= y) else y\nend",
  "   if x>y then\n      x,y = y,x\n   end\n   local ans = 0\n   for i=x,y+1 do\n\
    \      if i%2==0 then\n         ans = i\n         break\n      end\n   end\n \
    \  return ans\nend", "  if x < y then\n    return choose_num(y, x)\n  end\n  if\
    \ x == y then\n    return x\n  end\n  if x % 2 == 0 then\n    if y % 2 == 0 then\n\
    \      return choose_num(x / 2, y / 2)\n    else\n      return -1\n    end\n \
    \ end\n  if y % 2 == 0 then\n    return choose_num(x / 2, y)\n  end\n  if y %\
    \ 2 == 1 then\n    if x == y * 3 then\n      return x * 3\n    else\n      return\
    \ choose_num(x * 3, y)\n    end\n  end\n  if x % 3 == 0 then\n    return -1\n\
    \  end\n  if x % 3 == 1 then\n    if y == x * 3 then\n      return y * 3\n   \
    \ else\n      return choose_num(x, y)\n    end\n  end\n  if x % 3 == 2 then\n\
    \    return choose_num(x, y * 3)\n  end\nend", "  -- If the first number is greater\
    \ than the second number, then return\n  -- -1\n  if x > y then\n    return -1\n\
    \  -- Otherwise, if there's only a single even number in the range, then return\
    \ it\n  elseif x == y and y % 2 == 0 then\n    return y\n  -- Otherwise, if there's\
    \ only a single odd number in the range, then return it\n  elseif x == y and y\
    \ % 2 == 1 then\n    return x\n  -- Otherwise, if there's only a single number\
    \ in the range, then return it\n  elseif x == y and y % 2 == 2 then\n    return\
    \ x\n  -- Otherwise, if there are two even numbers in the range, then return \n\
    \  -- x if it is less than y\n  elseif x == y and y % 2 == 1 and y % 2 ~= 0 then\n\
    \    return x if x < y then x else y\n  -- Otherwise, there are two odd numbers\
    \ in the range, so return \n  -- x if it is less than y\n  elseif x == y and y\
    \ % 2 == 1 and y % 2 == 1 then\n    return x if x < y then x else y\n  -- Otherwise,\
    \ there are two numbers in the range but one is not even, so \n  -- return the\
    \ one that is even\n  elseif x == y and y % 2 == 2 and y % 2 ~= 0 then\n    return\
    \ x if x < y then x else y\n  -- Otherwise, there are two numbers in the range\
    \ but one is not odd, so \n  -- return the one that is odd\n  elseif x == y and\
    \ y % 2 == 2 and y % 2 == 1 then\n    return x if x < y then x else y\n  -- Otherwise,\
    \ there's only one number in the range, so return it\n  else\n    return x\n \
    \ end\nend", "\tlocal function even_to_num(a)\n\t\tlocal tmp = 0\n\t\tfor i =\
    \ 1,#a do\n\t\t\tlocal v = a[i]\n\t\t\tif v == 0 then\n\t\t\t\treturn -1\n\t\t\
    \telseif v == 1 or v == 2 or v == 3 then\n\t\t\t\ttmp = (tmp * 10) + v\n\t\t\t\
    elseif v == 4 then\n\t\t\t\ttmp = (tmp * 10) + v + 1\n\t\t\telseif v == 5 then\n\
    \t\t\t\ttmp = (tmp * 10) + v + 2\n\t\t\telseif v == 6 then\n\t\t\t\ttmp = (tmp\
    \ * 10) + v + 3\n\t\t\telseif v == 7 then\n\t\t\t\ttmp = (tmp * 10) + v + 4\n\t\
    \t\telseif v == 8 then\n\t\t\t\ttmp = (tmp * 10) + v + 5\n\t\t\telseif v == 9\
    \ then\n\t\t\t\ttmp = (tmp * 10) + v + 6\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\treturn tmp\n\tend", "    if x < y then return choose_num(y, x) end\n\
    \    if x % 2 == 0 then return x end\n    local i = 1\n    while i <= y/2 do\n\
    \        if x%2 == 0 then\n            x,y = y,x\n        else\n            x,y\
    \ = y,x//2\n        end\n        i = i + 1\n    end\n    return x\nend", "\tlocal\
    \ a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal n = 1\n\twhile x <= y do\n\t\t\
    local m = x + ((b + c) / 2)\n\t\tif n <= m then\n\t\t\ta = b\n\t\t\tb = n\n\t\t\
    \tn = m\n\t\telse\n\t\t\ta = c\n\t\t\tc = m\n\t\t\tn = m\n\t\tend\n\tend\n\treturn\
    \ n\nend", "  x, y = math.floor(x), math.floor(y)\n  if x < y then\n    x, y =\
    \ y, x\n  end\n  local max_num = 0\n  local min_num = math.floor(x) + math.floor(y)\n\
    \  while min_num <= max_num do\n    local test_num = min_num + math.floor(math.random()*(max_num\
    \ - min_num + 1))\n    local answer = test_num % x\n    if answer ~= 0 then\n\
    \      max_num = test_num\n    else\n      min_num = test_num\n    end\n  end\n\
    \  return max_num\nend", "  local result\n  local i\n  for i = x, y + 1 do\n \
    \   if result ~= nil and i <= result then\n      break\n    end\n    i = i * 2\n\
    \    if i > y then\n      break\n    end\n    result = i\n  end\n  return result\n\
    end", "    return math.floor(math.ceil(math.max(x, y))/2)\nend", "  for _, num\
    \ in ipairs(primes) do\n    local n = num - 1\n    if x ~= n and y ~= n and x\
    \ % n == 0 and y % n == 0 then\n      return n\n    end\n  end\n  return -1\n\
    end", "    -- Check that x is bigger than y\n    if x < y then\n        x, y =\
    \ y, x\n    end", "    if x > y then\n        x, y = y, x\n    end\n    local\
    \ result = 1\n    for i = x, y + 1 do\n        result = result * i\n        if\
    \ result > y then\n            -- The result is too big, so return -1.\n     \
    \       return -1\n        end\n        if result % 2 ~= 0 then\n            return\
    \ result\n        end\n    end\n    return -1\nend", "   for i = x, y + 1 do --\
    \ Find the biggest number that is in the range [x, y] inclusive.\n      if i %\
    \ 2 == 0 then\n         return i\n      end\n   end\n   return -1\nend", "   --\
    \ Checks whether the two numbers are in the range. \n   -- If yes, then return\
    \ its result. Otherwise, return the biggest even \n   -- integer number in the\
    \ range.\n   if x > y then\n       x, y = y, x\n   end\n   if x > y or x == y\
    \ then \n       return -1\n   end", "    for i = x, y do\n        if i % 2 ==\
    \ 0 then\n            return i\n        end\n    end\n    return -1\nend", "\t\
    if x <= y then\n\t\treturn choose_num(x + 1, y)\n\telse\n\t\tlocal m = math.floor((x\
    \ - y) / 2)\n\t\tif m % 2 == 0 then\n\t\t\treturn x + 2 * m + 1\n\t\telse\n\t\t\
    \treturn x + m\n\t\tend\n\tend\nend", "  if x == y then\n    return x\n  end",
  "\tlocal num = math.floor((x+y) / 2)\n\tif math.abs(x-num) < math.abs(y-num) then\n\
    \t\treturn num\n\tend\n\treturn num\nend", "    if x <= y then\n        return\
    \ -1\n    end\n    if y > x then\n        return -1\n    end\n    local max =\
    \ x\n    for i = y, 1, -1 do\n        if max % i == 0 then\n            max =\
    \ x\n        else\n            max = i\n        end\n    end\n    return max\n\
    end", "  local z\n  for z = x to y do\n    if z % 2 == 0 then\n      return z\n\
    \    end\n  end\n  return -1\nend", "    local z = math.max(x, y)\n    if z ==\
    \ x then\n        return z\n    elseif z == y then\n        if x == z then\n \
    \           return z\n        else\n            return -1\n        end\n    else\n\
    \        return z\n    end\nend\nreturn choose_num", "\tif x > y then\n\t\tx,\
    \ y = y, x\n\tend\n\tlocal x_even = x % 2 == 0\n\tlocal y_even = y % 2 == 0",
  "  if x >= y then return -1 end\n  local max_num, min_num = x, y\n  while max_num\
    \ - min_num > 1 do\n    local num = min_num + math.random(max_num - min_num)\n\
    \    if is_even(num) then\n      max_num = num - 1\n    else\n      min_num =\
    \ num + 1\n    end\n  end\n  return max_num\nend\n</cell>\n<text>\n6.3 Write a\
    \ function that returns the number of integers from one to two that are divisible\
    \ by 3, 5, and 7 but are not a multiple of 10.\nExample:", "\tlocal max_num =\
    \ x\n\tlocal max_num2 = y", "    if x <= y then\n        x, y = y, x\n    end\n\
    \    for i = x, y + 1 do\n        if i % 2 == 0 then\n            return i\n \
    \       end\n    end\n    return -1\nend", "    if x < y then return x end \n\
    \    if x > y then return y end \n    for i = x + 1, y, 2 do \n        if i ~=\
    \ y then return i end \n    end \n    return -1\nend", "    if x < y then\n  \
    \      local m = math.min(x, y)\n        if m % 2 == 0 then\n            x, y\
    \ = m, y\n        end\n    end", "    if x <= y then\n        return x\n    end\n\
    \    while x % 2 ~= 0 do\n        x = x / 2\n    end\n    local n = x\n    while\
    \ y >= n do\n        y = y - 1\n    end\n    return n\nend", "    local z = x\
    \ - 1\n    local i = 1\n    while z > i do\n        local m = z % (i + 1)\n  \
    \      if m > i then\n            if x > y then\n                return m\n  \
    \          else\n                return -1\n            end\n        end\n   \
    \     i = i + 1\n    end\nend", "   if x >= y then return -1 end\n   local m,\
    \ n = x, y\n   while m % 2 == 0 and n % 2 == 0 do\n      m, n = m, n / 2\n   end\n\
    \   return m\nend", "   local m = math.min(x, y)\n   local n = math.max(x, y)\n\
    \   if m == n then\n      return m\n   end\n   if m > n then\n      return choose_num(n\
    \ - 1, m)\n   end\n   if n < m then\n      return choose_num(m, n - 1)\n   end\n\
    \   return m\nend", "\tif x < y then\n\t\treturn -1\n\telseif x == y then\n\t\t\
    return x\n\telse\n\t\tlocal m\n\t\tfor m = x, 1, -1 do\n\t\t\tif m % 2 == 0 then\n\
    \t\t\t\treturn m\n\t\t\tend\n\t\tend\n\t\treturn -1\n\tend\nend", "  if x <= y\
    \ then\n    local i = 1\n    while i <= x + y do\n      if i ~= x * y then\n \
    \       return i\n      else\n        i += 1\n      end\n    end\n    return -1\n\
    \  else\n    local i = 1\n    while i <= y + x do\n      if i ~= x * y then\n\
    \        return i\n      else\n        i += 1\n      end\n    end\n    return\
    \ -1\n  end\nend", "  for _ = x, y do\n    if x % 2 == 0 and y % 2 == 0 then\n\
    \      local nx = x // 2\n      local ny = y // 2\n      local mx = mxGetElement(mxArrayType((nx,\
    \ ny)))\n      local my = myGetElement(mxArrayType((nx, ny)))\n      if mx ==\
    \ nil then mx = my\n      else mx = mx*2 + my\n      end\n      mxSetElement(mxArrayType((nx,\
    \ ny)), mx)\n      mySetElement(mxArrayType((nx, ny)), mx)\n      if mx <= y then\n\
    \        x, y = nx, ny\n      else\n        x, y = x, y\n      end\n    else\n\
    \      x, y = y, x\n    end\n  end\n  return x\nend", "  if x >= y and x % 2 ==\
    \ 1 and y % 2 == 1 then\n    return x % 2 == 0 and -1 or 1\n  end", "   if not\
    \ (y>x) return x end\n   local max_num = y\n   local num = x\n   while true\n\
    \      num = (num+2)/2\n      if num == max_num then\n         return num\n  \
    \    else\n         max_num = num\n      end\n   end\nend", "    local result\
    \ = nil\n    if x > y then\n        local temp = x\n        x = y\n        y =\
    \ temp\n    end\n    for i = x+1, y do\n        if i%2 == 0 then\n           \
    \ local temp = i\n            result = temp\n        end\n    end\n    return\
    \ result\nend", "    if x >= y and x >= 1 then\n        return x - 1\n    elseif\
    \ y >= x and y >= 1 then\n        return y - 1\n    elseif x == 1 then\n     \
    \   return 1\n    elseif y == 1 then\n        return -1\n    else\n        return\
    \ -1\n    end\nend", "  if x > y then\n    local temp = x\n    x = y\n    y =\
    \ temp\n  end", "   local maxEven = 1\n   for i=x, 1, -1 do\n      if i ~= 0 then\n\
    \         local even = 1\n         for j=0, i, 2 do\n            even = even +\
    \ 1\n            if even % 2 == 0 then\n               local m = math.floor((i/2)\
    \ * 2 + 1)\n               if j > m then\n                  return -1\n      \
    \         end\n               break\n            end\n         end\n         maxEven\
    \ = maxEven + 1\n      end\n   end\n   return maxEven\nend", "  if x > y then\n\
    \    x, y = y, x\n  end\n  local biggest_even_number\n  for number = x, y + 1\
    \ do \n    if number % 2 == 0 then\n      if biggest_even_number == nil then\n\
    \        biggest_even_number = number\n      else\n        if biggest_even_number\
    \ > number then\n          biggest_even_number = number\n        end\n      end\n\
    \    end\n  end\n  return biggest_even_number\nend", "\tif x >= y and x % 2 ==\
    \ 0 and y % 2 == 0 then\n\t\treturn x\n\telse\n\t\treturn -1\n\tend\nend", " \
    \   if x > y and x < y then\n        return y\n    end", "  if x <= y then\n \
    \   return -1\n  end", "    for i = x, y - 1, -1 do\n        if nums[i] ~= nil\
    \ then\n            return i\n        end\n    end\n    return -1\nend\n</code>\n\
    <|/ a tags=lua dscore=2 |>\n<| a dscore=1 |>\nA solution using recursion\n<code>",
  "\tif x <= y and x <= INT_MAX and y <= INT_MAX then\n\t\treturn y\n\telse\n\t\t\
    local m = math.floor((y + x)/2)\n\t\tif x % 2 == 1 then\n\t\t\tm = m-1\n\t\tend\n\
    \t\tif m == y then\n\t\t\treturn m\n\t\telseif m > y then\n\t\t\treturn choose_num(m,\
    \ y)\n\t\telse\n\t\t\treturn choose_num(x, m)\n\t\tend\n\tend\nend", "    local\
    \ max_num = -1\n    local min_num = x\n    for num = min_num+1, y do\n       \
    \ if num % 2 == 0 and num <= max_num then\n            max_num = num\n       \
    \ end\n    end\n    return max_num\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=c,recursion,function\
    \ |>\nHere's an example for choosing a number from a range\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\n#include <time.h>", "    local a\n    for a = x + 1 , y do\
    \ \n        if isEven(a - 1) then\n            return a\n        end\n    end\n\
    \    return -1\nend", "\tlocal num = 1\n\twhile x <= y do\n\t\tif x % 2 == 0 then\n\
    \t\t\tnum = num * x + 1\n\t\telse\n\t\t\tnum = num * x + 2\n\t\tend\n\t\tx = x\
    \ + 1\n\tend\n\treturn num\nend", "  if x > y then\n    x, y = y, x\n  end", "\t\
    local function even()\n\t\treturn math.floor(x/2)*2+1\n\tend\n\tlocal function\
    \ odd()\n\t\treturn math.floor(x/2)*2\n\tend\n\tlocal function first()\n\t\treturn\
    \ x+1\n\tend\n\tlocal function last()\n\t\treturn y-1\n\tend\n\tlocal function\
    \ between(x, a, b)\n\t\tif x < a or x > b or a > b then\n\t\t\treturn -1\n\t\t\
    else\n\t\t\treturn x\n\t\tend\n\tend\n\tlocal function next()\n\t\treturn x-2\n\
    \tend\n\tlocal function previous()\n\t\treturn x+2\n\tend\n\tif x > y then return\
    \ -1 end\n\tif even() <= odd()\n\tand even()>=0\n\tand odd()>=0\n\tand odd()<=x\
    \ then\n\t\tlocal even = even()\n\t\treturn even\n\telseif odd()>x then\n\t\t\
    local even = even()\n\t\tlocal odd = odd()\n\t\tlocal first = first()\n\t\treturn\
    \ math.floor(even+((odd-even)/2))\n\telseif even()>y then\n\t\tlocal even = even()\n\
    \t\tlocal odd = odd()\n\t\tlocal first = first()\n\t\treturn math.floor(odd+((even-odd)/2))\n\
    \telse\n\t\tlocal first = first()\n\t\tlocal last = last()\n\t\tlocal even = even()\n\
    \t\tlocal odd = odd()\n\t\tlocal next = next()\n\t\tlocal previous = previous()\n\
    \t\tif even() <= odd()\n\t\tand even() >= first and odd()>first and odd()<=last\n\
    \t\tand even() <= next and odd()>next and odd()<=last\n\t\tand even() <= previous\
    \ and odd()>previous and odd()<=last\n\t\tand even() <= first and odd()>first\
    \ and odd()<=last\n\t\tand even() <= previous and odd()>previous and odd()<=last\n\
    \t\tand even() <= next and odd()>next and odd()<=last\n\t\tand even() <= previous\
    \ and odd()>previous and odd()<=last\n\t\tand even() <= next and odd()>next and\
    \ odd()<=last\n\t\tand even() <= previous and odd()>previous and odd()<=last\n\
    \t\tand even() <= next and odd()>next and odd()<=last\n\t\tand even() <= previous\
    \ and odd()>previous and odd()<=last\n\t\tand even() <= previous and odd()>previous\
    \ and odd()<=last\n\t\tand even() <= next and odd()>next and odd", "\tif x <=\
    \ y then\n\t\treturn -1\n\telse\n\t\tlocal x_even = x % 2 == 0\n\t\tlocal y_even\
    \ = y % 2 == 0\n\t\tif x_even then\n\t\t\tif y_even then\n\t\t\t\treturn (x *\
    \ y) / 2\n\t\t\telse\n\t\t\t\treturn x - 1\n\t\t\tend\n\t\telse\n\t\t\tif y_even\
    \ then\n\t\t\t\treturn y + 1\n\t\t\telse\n\t\t\t\treturn y - 1\n\t\t\tend\n\t\t\
    end\n\tend\nend", "    for _x = x, _y = y, 1\n        do _x = _x % _y, _y = _y\n\
    \            while _x ~= 0\n                do\n                    if _y % _x\
    \ ~= 0 then\n                        return _y\n                    end\n    \
    \                _x = _x / _y\n                    _y = _y / _y\n            \
    \    end\n            end\n        end\n    end", "    local x_max = #x or 0\n\
    \    local y_max = #y or 0\n    local i = 0\n    local j = 0\n    \n    while\
    \ i < x_max and j < y_max do\n        if x[i] == y[j] then\n            i = i\
    \ + 1\n            j = j + 1\n        elseif x[i] < y[j] then\n            i =\
    \ i + 1\n        else\n            j = j + 1\n        end\n    end\n    \n   \
    \ return j >= y_max and i or -1\nend", "    if x < y then\n        local x_even\
    \ = x % 2\n        return x_even < y and x_even or -1\n    end\n    local y_even\
    \ = y % 2\n    return y_even < x and y_even or -1\nend", "    if x < y then return\
    \ choose_num(y, x) end\n    if x == y then return x end\n    for i = 3, x + 1\
    \ do\n        if x % i == 0 and y % i == 0 then\n            return i\n      \
    \  end\n    end\n    return -1\nend", "   if x > y then\n     return choose_num(y,\
    \ x)\n   elseif x < y then\n     return choose_num(x, y)\n   else\n     if x %\
    \ 2 == 0 and y % 2 == 0 then\n       return x\n     else\n       return y\n  \
    \   end\n   end\nend", "    local x_start, x_end  = x - 1, x + 1\n    local y_start,\
    \ y_end  = y - 1, y + 1\n    local biggest_even = 1\n    local i_start, i_end\
    \ = 0, 1\n    for i_start <= y_end and i_end <= x_start do\n        if i_start\
    \ < i_end then\n            local j = math.floor((i_end - i_start) / 2) + i_start\n\
    \            biggest_even = biggest_even + (x_end - i_end) * j\n            i_end\
    \ = i_end + 1\n        end\n        biggest_even = biggest_even + 2\n    end\n\
    \    return biggest_even - 1\nend", "   if x<y then\n      x=y\n      y=x\n  \
    \ end\n   local a=1\n   local b=0\n   while (b<=y) do\n      if (a%2)==1 then\n\
    \         a=a*3+1\n      else\n         a=a*3\n      end\n      b=b+1\n   end\n\
    \   return a\nend", "\tif x < y then\n\t\treturn -1\n\tend\n\tif x <= 1 then\n\
    \t\treturn 1\n\tend\n\tlocal z = math.sqrt(x * x + y * y)\n\tif z > 0 then\n\t\
    \treturn z * x + y\n\telse\n\t\treturn -1\n\tend\nend", "    if x < y then\n \
    \       local max = x\n        local min = y\n    else\n        local max = y\n\
    \        local min = x\n    end", "   if x ~= nil then\n      while x >= y do\n\
    \         local m = x % y;\n         x = y;\n         y = m;\n      end\n   end\n\
    \   return y;\nend", "    local x = x or 0\n    local y = y or 0\n    while x\
    \ ~= nil and y ~= nil do\n        if x % 2 == 0 and y % 2 == 0 then\n        \
    \    return x\n        end\n        x, y = y, x + y\n    end\n    return -1\n\
    end", "\tlocal function is_divisible(x, y)\n\t\t-- We check if the remainder is\
    \ 0 by checking if the remainder of\n\t\t-- the division operation is 0 by checking\
    \ if the remainder of \n\t\t-- the division operation is 0 modulo 2. Since division\
    \ operation \n\t\t-- will return the integer part of a division, we know that\
    \ the \n\t\t-- remainder is either 0 or 2 since any non-zero remainder is \n\t\
    \t-- evenly divisible by 2.\n\t\treturn ((x % y) == 0 and (x % y) or -1) + 1\n\
    \tend", "\tlocal xx = math.abs(x - y)\n\tlocal yy = math.abs(x - xy)\n\tif xy\
    \ > yy then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "\tlocal function\
    \ choose_num_internal(x, y)\n\t\tif x < y then\n\t\t\tif x % 2 = 0 then\n\t\t\t\
    \treturn y\n\t\t\telse\n\t\t\t\treturn x\n\t\t\tend\n\t\telse\n\t\t\tif y % 2\
    \ = 0 then\n\t\t\t\treturn x\n\t\t\telse\n\t\t\t\treturn y\n\t\t\tend\n\t\tend\n\
    \tend", "\tlocal num = -1\n\tfor i=1, x do\n\t\tif ((x - i)%2 == 0) and ( (y -\
    \ i)%2 == 0) then\n\t\t\tif num == -1 then\n\t\t\t\tnum = i\n\t\t\t\treturn\n\t\
    \t\telseif num < i then\n\t\t\t\tnum = i\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ num\nend", "    if x > y then\n        x, y = y, x\n    end", "    return math.max(y,\
    \ x) + 1 if math.abs(y - x) > 0 and not (y > x and x > y) else -1\nend", "  for\
    \ i = x, y do\n    if i % 2 == 0 then\n      return i\n    end\n  end\n  return\
    \ -1\nend", "  if x < y then\n    if x % 2 ~= 0 then\n      return x\n    end\n\
    \    return y\n  else\n    if y % 2 ~= 0 then\n      return y\n    end\n    return\
    \ x\n  end\nend", '   if x < y then return choose_num(y, x) end', '  if y <= x
    then return -1 end', "    if x == y then\n        return -1\n    end\n    \n \
    \   if x < y then\n        return choose_num(y, x)\n    end\n    \n    if x ==\
    \ y then\n        return -1\n    end\n    \n    if x % 2 == 0 then\n        return\
    \ choose_num(x - 2, y)\n    end\n    \n    if y % 2 == 0 then\n        return\
    \ choose_num(x, y - 2)\n    end\n    \n    return choose_num(x , y - 2)\nend",
  "   for x = x, y + 1 do\n      if ((x % 2) == 0) then\n         return x\n     \
    \ end\n   end\n   return -1\nend", "\tif x > y then\n\t\tx, y = y, x\n\tend\n\t\
    local z = 1\n\twhile x < y do\n\t\tz = z * x + 2\n\t\tx, y = x + 1, y\n\tend\n\
    \tif x == y then\n\t\treturn z\n\telse\n\t\treturn -1\n\tend\nend", "   for i=1,\
    \ x+1 do \n      if ((x % i) == 0) then\n         if x>y then\n            return\
    \ x\n         else\n            return y\n         end\n      end\n   end\n  \
    \ return -1\nend", "   for i = x, y do\n      if x % 2 == 0 and y % 2 == 0 then\n\
    \         return i\n      end\n   end\n   \n   if x == y then\n      return -1\n\
    \   end\nend", "    if x > y then x, y = y, x end\n    local candidate = x + y\n\
    \    local found = 1\n    while found == 1 do\n        if candidate % 2 == 0 then\n\
    \            candidate = candidate + 1\n        else\n            found = 0\n\
    \        end\n    end\n    return candidate\nend", "\tif x >= y then return -1\
    \ end\n\tlocal num = x\n\tlocal factor = 1\n\twhile factor <= y do\n\t\tnum =\
    \ num * factor + factor\n\t\tfactor = factor * 2\n\tend\n\tif num - x >= y then\n\
    \t\treturn num - x\n\telse\n\t\treturn -1\n\tend\nend", "    local num = math.floor(x\
    \ / 2)\n    while x < y:\n        num = num * 2 + 1\n        x = num\n    end\n\
    \    return num\nend", "  local x_min = math.min(x, y)\n  local x_max = math.max(x,\
    \ y)\n  if x_min == x_max then return -1 end\n  local i = 0\n  local max_even\
    \ = 1\n  while i < x_min do\n    i = i + 1\n    if i % 2 == 0 then max_even =\
    \ max_even * 2 end\n  end\n  while i < x_max do\n    i = i + 1\n    if i % 2 ==\
    \ 1 then return -1 end\n  end\n  return max_even\nend", "  if x > y then return\
    \ choose_num(y, x) end\n  for n = x+1,y do\n    if n <= x or n % 2 ~= 0 then\n\
    \      return n\n    end\n  end\n  return -1\nend", "  if x < y then\n    return\
    \ -1\n  else\n    -- If x > y, then the first number in the range is the largest\
    \ even number.\n    if x % 2 == 0 then\n      return x\n    end\n    -- Otherwise\
    \ the first number in the range is the largest odd number.\n    return y\n  end\n\
    end", "\tlocal lower = x\n\tlocal upper = y\n\t\n\twhile lower <= upper do\n\t\
    \tlocal i = math.floor((lower + upper) / 2)\n\t\tlocal num = i\n\t\t\n\t\tif x\
    \ ~= nil and y ~= nil and x >= i and x <= i do\n\t\t\tlocal num = math.min(i,\
    \ math.max(i, math.floor(x + (y - x) / 2)))\n\t\tend\n\t\t\n\t\tif math.floor(x\
    \ + y - i) == i then\n\t\t\tupper = i\n\t\telse\n\t\t\tlower = i\n\t\tend\n\t\
    end\n\t\n\tif lower <= upper then\n\t\treturn lower\n\telse\n\t\treturn -1\n\t\
    end\nend", "   if x >= y then\n      return -1\n   end", "  -- if x == y, then\
    \ return x\n  if x == y then\n    return x\n  end", "  local n\n  for n=1, y do\
    \ if math.mod(x,n) ~= 0 then return n end end\n  return -1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
