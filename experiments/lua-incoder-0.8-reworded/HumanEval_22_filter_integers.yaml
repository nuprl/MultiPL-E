name: HumanEval_22_filter_integers
language: lua
prompt: "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers({'a',\
  \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1, 2,\
  \ 3}\nlocal function filter_integers(values)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {},\
  \ 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a',\
  \ 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return setmetatable(values, {__index=function(t, k)\n      return\
    \ k ~= '' and tonumber(k) or k\n    end})\nend", "  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "    local result = {}\n    for\
    \ _, value in pairs(values) do\n        if type(value) == 'number' then\n    \
    \        result[value] = true\n        end\n    end\n    return result\nend",
  "  if type(values) == 'table' then\n    local filter = table.filter\n    local i,\
    \ n = 0, #values\n    for i = 1, n do\n      if type(values[i]) ~= 'table' then\n\
    \        -- ignore non-tables\n      elseif type(values[i]) == 'table' then\n\
    \        -- filter nested tables\n        values[i] = filter(values[i])\n    \
    \  else\n        -- keep integer values (no tables)\n        i = i + 1\n     \
    \ end\n    end\n    return values\n  else\n    return values\n  end\nend", " \
    \ local result = {}\n  for _, value in pairs(values) do\n    if type(value) ==\
    \ 'number' then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "   local filtered = {}\n   for i, v in ipairs(values) do\n      if type(v)\
    \ == 'number' then\n         table.insert(filtered, v)\n      end\n   end\n  \
    \ return filtered\nend", "  local new = {}\n  for k, v in pairs(values) do\n \
    \   if type(k) == 'number' then\n      new[k] = values[k]\n    end\n  end\n  return\
    \ new\nend", "  local rv = {}\n  for i, v in pairs(values) do\n    if v == nil\
    \ then continue end\n    if type(v) ~= 'number' then rv[i] = v end\n  end\n  return\
    \ rv\nend", "  assert(type(table.unpack(values)) == \"table\")\n  -- Filter out\
    \ non-integer values\n  -- A value `nil` is considered an integer.\n  return table.unpack(\n\
    \    table.filter(values, function(val)\n      return type(val) == 'number' and\
    \ val % 1 == 0\n    end)\n  )\nend", "  local out = {}\n  for _, v in ipairs(values)\
    \ do\n    v = tonumber(v)\n    if not v then break end\n    table.insert(out,\
    \ v)\n  end\n  return out\nend", "  local filtered_table = {}\n  for k,v in pairs(values)\
    \ do\n    if type(v) == 'table' then\n      filtered_table[k] = filter_integers(v)\n\
    \    elseif type(v) == 'number' then\n      filtered_table[k] = v\n    end\n \
    \ end\n  return filtered_table\nend", "  local results = {}\n  for _, v in pairs(values)\
    \ do\n    if type(v) == 'number' then\n      if math.isinteger(v) then\n     \
    \   results[#results + 1] = v\n      end\n    end\n  end\n  return results\nend",
  "   local new_values = terralib.newlist()\n   for _, value in ipairs(values) do\n\
    \      if value ~= nil and\n         (type(value) == \"number\" or\n         \
    \   (type(value) == \"boolean\" and value == true)) then\n         new_values:insert(value)\n\
    \      end\n   end\n   return new_values\nend", "  local result = {}\n  for k,\
    \ v in pairs(values) do\n    if not is_integer(v) then\n      table.insert(result,\
    \ k)\n    end\n  end\n  return result\nend", "    local table = {}\n    for k,v\
    \ in pairs(values) do\n        if isinteger(v) then\n            table.insert(table,\
    \ v)\n        end\n    end\n    return table\nend", "  if type(values) ~= 'table'\
    \ then\n    return values\n  elseif type(values) == 'table' then\n    local filter\
    \ = {}\n    for k,v in pairs(values) do\n      if type(v) == 'table' and v ~=\
    \ nil then\n        for k, v in pairs(v) do\n          if type(v) == 'number'\
    \ then\n            table.insert(filter, v)\n          end\n        end\n    \
    \  end\n    end\n    return filter\n  end\nend", "  local result = {}\n  local\
    \ i = 1\n  for value in pairs(values) do\n    if type(value) == 'number' then\n\
    \      if math.floor(value) == value then\n        result[#result + 1] = value\n\
    \      end\n    else\n      result[#result + 1] = value\n    end\n    i = i +\
    \ 1\n  end\n  return result\nend", "  local filtered = {}\n  for k, v in pairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(filtered,\
    \ v)\n    end\n  end\n  return filtered\nend", "  local out = terralib.newlist()\n\
    \  for i, v in ipairs(values) do\n    if not (v:is(ast.typed.expr.Unary) and v:op\
    \ == \"#\" and v:rhs:is(ast.typed.expr.Integer)) then\n      out:insert(v)\n \
    \   end\n  end\n  return out\nend", "    local value\n    for _, value in pairs(values)\
    \ do\n        if type(value) == 'table' then\n            values[#values] = value\n\
    \        end\n        -- Only integers\n        if type(value) == 'number' then\n\
    \            values[#values] = value\n        end\n    end\n    return values\n\
    end", "    local output = {}\n    for _, value in pairs(values) do\n        if\
    \ type(value) ~= 'number' then\n            table.insert(output, value)\n    \
    \    end\n    end\n    return output\nend", "  local results = {}\n  for k, v\
    \ in pairs(values) do\n    if type(v) == 'number' and v >= 0 then\n      table.insert(results,\
    \ v)\n    end\n  end\n  return results\nend", "  if type(values) ~= 'table' then\n\
    \    return nil\n  end", "  local result = {}\n  local i = 1\n  while i <= #values\
    \ do\n    if tonumber(values[i - 1])~=0 then\n      result[#result + 1] = values[i\
    \ - 1]\n    end\n    i = i + 1\n  end\n  return result\nend", "  local integers\
    \ = {}\n  for k in pairs(values) do\n    if not isinteger(k) then\n      table.insert(integers,\
    \ k)\n    end\n  end\n  return integers\nend", "  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    else\n      result[#result + 1] = value\n    end\n  end\n\
    \  return result\nend", "  if type(values) == 'table' then\n    local result =\
    \ {}\n    for key, value in pairs(values) do\n      if type(key) ~= 'string' or\
    \ type(key) ~= 'number' then\n        result[#result + 1] = value\n      elseif\
    \ type(key) == 'number' and math.floor(key) == key then\n        result[#result\
    \ + 1] = value\n      else\n        error('filter_integers: unsupported key type:\
    \ ' .. type(key))\n      end\n    end\n    return result\n  else\n    return values\n\
    \  end\nend", "    local integers = {}\n    for _, value in ipairs(values) do\n\
    \        if type(value) == 'number' then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend", "    local set = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'table' then\n    \
    \        for _, v in pairs(value) do\n                table.insert(set, tonumber(v))\n\
    \            end\n        elseif tonumber(value) then\n            table.insert(set,\
    \ tonumber(value))\n        end\n    end\n    return set\nend", "  local integers\
    \ = {}\n  for i, v in pairs(values) do\n    if type(v) == 'number' then\n    \
    \  table.insert(integers, v)\n    end\n  end\n  return integers\nend", "  if type(values)\
    \ ~= 'table' then\n    return values\n  end\n  local result = {}\n  for _, v in\
    \ pairs(values) do\n    if type(v) == 'number' then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local integers = {}\n  for i,\
    \ v in ipairs(values) do\n    table.insert(integers, v)\n    if type(v) == 'number'\
    \ then\n      integers[i] = v\n    end\n  end\n  return integers\nend", "  local\
    \ numbers = {}\n  for _, value in pairs(values) do\n    if type(value) ~= 'number'\
    \ then\n      table.insert(numbers, value)\n    end\n  end\n  return table.sort(numbers)\n\
    end", "  return setmetatable({ }, getmetatable(values))\nend", "  if #values <=\
    \ 1 then\n    return values\n  elseif values == nil then\n    return values\n\
    \  else\n    -- Remove nils from table and convert to a list to work with\n  \
    \  -- since lua tables can contain nils.\n    -- This works because nil == nil\n\
    \    local list = table.remove(values, nil)\n    -- Filter out integers in the\
    \ luathon table.\n    -- Convert list back to table since removing nils doesn't\
    \ work\n    -- in lua 5.1.\n    return table.remove(list, 1, #list - 1)\n  end\n\
    end", "  local results = {}\n  for _, v in pairs(values) do\n    local result\
    \ = {}\n    for i, _v in pairs(v) do\n      if type(_v) == 'number' then\n   \
    \     result[i] = _v\n      end\n    end\n    if next(result) ~= nil then\n  \
    \    table.insert(results, unpack(result))\n    end\n  end\n  return results\n\
    end", "  if type(values) ~= 'table' then return values end\n  local new = {}\n\
    \  for _, _ in pairs(values) do\n    if _ == type(0) then\n      new = table.concat(new,\
    \ new) .. ', '\n    end\n  end\n  return new\nend", "  if type(values) ~= 'table'\
    \ then\n    error('Expected a table')\n  end\n  local result = {}\n  for _, v\
    \ in pairs(values) do\n    if type(v) ~= 'number' then\n      continue\n    end\n\
    \    table.insert(result, v)\n  end\n  return result\nend", "  local function\
    \ is_number(value)\n    return type(value) == 'number'\n  end\n  local function\
    \ has_integer(value)\n    return type(value) == 'table' and next(value) ~= nil\
    \ and is_number(value[1])\n  end\n  local values = {}\n  for key, value in pairs(values)\
    \ do\n    if is_number(value) then\n      table.insert(values, key)\n    end\n\
    \  end\n  return setmetatable({\n    _keys = values,\n    has_integer = has_integer\n\
    \  }, {})\nend", "    local filtered_values = {}\n    for i = 1, #values do\n\
    \        if type(table.get(values, i)) == 'number' then\n            table.insert(filtered_values,\
    \ values[i])\n        end\n    end\n    return filtered_values\nend", "  local\
    \ result = {}\n  for _, value in pairs(values) do\n    local v = tonumber(value)\n\
    \    if v ~= nil then\n      if math.floor(v) == v then\n        result[#result\
    \ + 1] = v\n      else\n        error(\"LuaJIT filter functions only accept integers\"\
    )\n      end\n    end\n  end\n  return result\nend", "  local out = setmetatable({},\
    \ {__index = function() return values end})\n  local to_remove = setmetatable({},\
    \ {__index = function() return values end})", "  if type(tonumber(values)) ~=\
    \ 'table' then\n    return values\n  end", "    local res = {}\n    for _, val\
    \ in pairs(values) do\n        if type(val) == 'number' then\n            if type(val)\
    \ == 'integer' then\n                table.insert(res, val)\n            end\n\
    \        end\n    end\n    return res\nend", "  -- if there are no luathon values\
    \ just return the empty table\n  if not values then\n    return nil\n  end", " \
    \ if type(values) ~= 'table' then\n    error('Expected table to be given')\n \
    \ end\n  local ret = {}\n  for k, v in pairs(values) do\n    local vtype = type(v)\n\
    \    if v == '' and vtype == 'number' then\n      ret[k] = v\n    elseif vtype\
    \ == 'table' then\n      ret[k] = filter_integers(v)\n    elseif vtype == 'string'\
    \ then\n      ret[k] = v\n    else\n      ret[k] = nil\n    end\n  end\n  return\
    \ ret\nend", "  local results = {}\n  for k, v in pairs(values) do\n    if not\
    \ k or type(k) ~= 'number' or not v then\n      results[k] = nil\n    elseif type(v)\
    \ == 'number' then\n      results[k] = v\n    end\n  end\n  return results\nend",
  "  local out = terralib.newlist()\n  for k, v in pairs(values) do\n    if tostring(k)\
    \ ~= 'number' then\n      table.insert(out, v)\n    end\n  end\n  return out\n\
    end", "  local table = {}\n  for i = 1, #values do\n    local value = values[i]\n\
    \    if type(value) == 'number' then\n      table.insert(table, value)\n    end\n\
    \  end\n  return table\nend", "  if type(values) ~= 'table' then\n    return nil\n\
    \  elseif next(values) ~= number\n  then\n    return nil\n  elseif values[_G]\
    \ ~= _G then return end\n  local ts = {}\n  local _v = values\n  _v = setmetatable({[_G]\
    \ = _G}, ts)\n  _v[_G] = {[_G] = _G}\n  for i = 1, n do\n    _v[i] = nil\n  end\n\
    \  local i = 1\n  for k in pairs(values) do\n    if type(k) ~= 'table' then return\
    \ end\n    local v = values[k]\n    if v ~= _G then\n      _v[k] = v\n      _v[v]\
    \ = {[v] = v}\n      i = i + 1\n    end\n  end\n  return ts\nend", "    local\
    \ function is_integer(v)\n        return type(v) == 'number' and v >= 0\n    end\n\
    \    local new_values = {}\n    for v in pairs(values) do\n        if is_integer(v)\
    \ then\n            new_values[#new_values + 1] = v\n        end\n    end\n  \
    \  return new_values\nend", "  return setmetatable(values, {__index = function(t,\
    \ k)\n    return k == nil or type(k) == 'number' and k > 0 and k\n  end})\nend",
  "  if type(values) ~= 'table' then\n    return {}\n  end", "  local values_to_filter\
    \ = {}\n  for key, value in pairs(values) do\n    if type(key) ~= 'number' then\n\
    \      values_to_filter[key] = value\n    end\n  end\n  values_to_filter = values_to_filter\
    \ or {}\n  local result = {}\n  for key, value in pairs(values_to_filter) do\n\
    \    if type(key) == 'number' then\n      if math.floor(key) == key then\n   \
    \     table.insert(result, value)\n      end\n    end\n  end\n  return result\n\
    end", "  local new_values = {}\n  local is_int = function() return true end\n\
    \  if type(values) == 'table' then\n    if values[1] then\n      is_int = tonumber\
    \ -- use tonumber instead of `type` since it returns false for `\"123\"`\n   \
    \ end\n    for i = 1, #values do\n      if is_int() then\n        new_values[#new_values\
    \ + 1] = values[i]\n      end\n    end\n  else\n    new_values = values\n  end\n\
    \  return new_values\nend", "  local result = {}\n  for i, v in pairs(values)\
    \ do\n    if type(v) ~= 'number' then -- ignore non-number\n      -- if v:is('string')\
    \ then -- TODO: this might not be the right thing to do\n      result = setmetatable({},\
    \ {__mode = \"kv\"})\n      result[i] = v\n    end\n  end\n  return result\nend",
  "  if type(values) == \"table\" then\n    local result = {}\n    for k, v in pairs(values)\
    \ do\n      if type(v) == \"number\" then\n        result[k] = v\n      else\n\
    \        error(string.format(\"Unexpected value type `%s`\", type(v)))\n     \
    \ end\n    end\n    return result\n  else\n    error(string.format(\"Unexpected\
    \ value type `%s`\", type(values)))\n  end\nend", "   local new_values = {}\n\
    \   for _, v in pairs(values) do\n      if type(v) == 'number' then\n        \
    \ new_values[#new_values + 1] = v\n      end\n   end\n   return new_values\nend",
  "   local results = {}\n   for _, value in pairs(values) do\n      if type(value)\
    \ == 'number' and value % 1 = 0 then\n         table.insert(results, value)\n\
    \      end\n   end\n   return results\nend", "  local new_values = {}\n  for _,\
    \ v in pairs(values) do\n    if type(v) == 'number' then\n      if v ~= v then\n\
    \        new_values = _new_values(new_values, v)\n      else\n        new_values\
    \ = _new_values(new_values, 0)\n      end\n    end\n  end\n  return new_values\n\
    end", "  local filtered_values = {}\n  for i = 1, #values do\n    if type(values[i])\
    \ == 'number' then\n      table.insert(filtered_values, values[i])\n    end\n\
    \  end\n  return filtered_values\nend", "    local result = {}\n    for k, v in\
    \ pairs(values) do\n        if type(v) == 'number' and math.floor(v) == v then\n\
    \            result[k] = v\n        end\n    end\n    return result\nend", " \
    \ local t = {}\n  for k, v in pairs(values) do\n    if type(k) == 'number' then\n\
    \      if v ~= math.floor(v) then\n        t[#t + 1] = v\n      end\n    end\n\
    \  end\n  return t\nend", "  local ret = {}\n  for i = 1, #values do\n    if type(values[i])\
    \ ~= 'number' then\n      table.insert(ret, values[i])\n    end\n  end\n  return\
    \ ret\nend", "  if type(values) == 'table' then\n    local keys = table.sort(table.unpack(values))\n\
    \    return function(value)\n      -- If given value is integer or NaN\n     \
    \ if type(value) == 'number' then\n        return value == math.floor(value)\n\
    \      elseif type(value) == 'table' then\n        return true\n      else\n \
    \       return value == keys\n      end\n    end\n  else\n    return function(value)\n\
    \      -- If given value is integer or NaN\n      if type(value) == 'number' then\n\
    \        return value == math.floor(value)\n      else\n        return value ==\
    \ values\n      end\n    end\n  end\nend", "  local ret = {}\n  for i, value in\
    \ ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(ret,\
    \ value)\n    end\n  end\n  return ret\nend", "  return setmetatable({}, {__index\
    \ = function (t, k)\n    if type(t[k]) == 'number' then\n      t[k] = tointeger(t[k])\n\
    \    end\n    return t\n  end})\nend", "  local result = {}\n  for _, value in\
    \ pairs(values) do\n    if type(value) == \"table\" and type(tonumber(value))\
    \ == \"number\" then\n      table.insert(result, tonumber(value))\n    end\n \
    \ end\n  return result\nend", "  local result = {}\n  for _, v in pairs(values)\
    \ do\n    if type(v) == 'number' then\n      if math.floor(v) == v then\n    \
    \    result[v] = true\n      end\n    end\n  end\n  return result\nend", "  local\
    \ filtered_values = terralib.newlist()\n  for _, v in ipairs(values) do\n    if\
    \ tonumber(v) then\n      filtered_values:insert(v)\n    end\n  end\n  return\
    \ filtered_values\nend", "  local results = {}\n  for _, v in pairs(values) do\n\
    \    local is_integer = v:isNumber()\n    if is_integer then\n      table.insert(results,\
    \ v)\n    end\n  end\n  return results\nend", "  local result = {}\n  for i, value\
    \ in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "  if type(values) ~= 'table'\
    \ then\n    error('Expected table for argument')\n  end\n  local ret = {}\n  for\
    \ i, v in pairs(values) do\n    if type(v) == 'number' then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "  if type(values) ~= 'table' then\n\
    \    return values\n  end", "  if not values then return nil end\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) ~= 'number' then continue\
    \ end\n    if v ~= v then continue end\n    table.insert(result, v)\n  end\n \
    \ return result\nend", "    local result = {}\n    for k, v in pairs(values) do\n\
    \        if type(v) == 'number' and math.floor(v) == v then\n            table.insert(result,\
    \ k)\n        end\n    end\n    return result\nend", "  if type(values) ~= 'table'\
    \ then\n    return values\n  end\n  local new_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'table' then\n      table.insert(new_values, filter_integers(value))\n\
    \    elseif type(value) == 'number' then\n      table.insert(new_values, value)\n\
    \    end\n  end\n  return new_values\nend", "  local table = {}\n  for i = 1,\
    \ #values do\n    local value = values[i]\n    if type(value) == \"number\" then\n\
    \      table.insert(table, value)\n    end\n  end\n  return table\nend", "  if\
    \ type(values) == 'table' then\n    local result = {}\n    local i = 1\n    for\
    \ value in pairs(values) do\n      -- Lua's nil is not equal to nil, since nil\
    \ can be a valid value.\n      -- In Lua 5.1, nil can be compared with other values,\
    \ but we don't\n      -- support this right now.\n      if value == nil then\n\
    \        table.insert(result, nil)\n      else\n        if type(value) ~= 'number'\
    \ then\n          error('Expected an integer, but got: ' .. type(value))\n   \
    \     end\n        if value < 0 then\n          error('Expected a non-negative\
    \ integer, but got: ' .. value)\n        end\n        table.insert(result, value)\n\
    \      end\n    end\n    return result\n  end\nend", "  return setmetatable({\
    \ values = values }, { __index = function(t, k)\n      local ok, val = k:isnumeric()\n\
    \      if ok then\n        t.values = t.values[ t.values[ 1 ] <= val and val or\
    \ nil ]\n      end\n      return ok\n    end })\nend", "  local results = {}\n\
    \  for _, value in pairs(values) do\n    if type(value) ~= 'number' then\n   \
    \   table.insert(results, value)\n    else\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend", "    local result = {}\n    for i, value\
    \ in pairs(values) do\n        if type(value) ~= 'number' then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend", "  local newValues\
    \ = {}\n  for key, value in pairs(values) do\n    if type(key) ~= 'number' then\
    \ newValues[key] = value; continue end -- skip any non-numbers\n    if math.type(key)\
    \ ~= 'number' then\n      error('expected numbers as keys')\n    end\n    local\
    \ value = math.floor(value)\n    if value ~= key then newValues[key] = value;\
    \ end -- filter out luathon values out of integer range\n  end\n  return newValues\n\
    end", "  local ret = {}\n  for i = 1, #values do\n    if not ipairs(values[i])\
    \ then\n      table.insert(ret, values[i])\n    end\n  end\n  return ret\nend",
  "  local value\n  local result = {}\n  for _, value in ipairs(values) do\n    if\
    \ not value or value ~= value then break end -- invalid number\n    if value %\
    \ 1 ~= 0 then break end\n    table.insert(result, value)\n  end\n  return result\n\
    end", "  local new_values = {}\n  for _, v in ipairs(values) do\n    if type(v)\
    \ == \"number\" then\n      new_values[#new_values + 1] = v\n    end\n  end\n\
    \  return new_values\nend", "  local value_type = type(value)\n  if value_type\
    \ == 'table' then\n    local filtered_values = {}\n    for _, v in pairs(values)\
    \ do\n      if filter_integers(v) then\n        table.insert(filtered_values,\
    \ v)\n      end\n    end\n    if next(filtered_values) == nil then\n      return\
    \ {}\n    else\n      return filtered_values\n    end\n  elseif value_type ==\
    \ 'number' then\n    return value\n  else\n    return values\n  end\nend", " \
    \ if type(values) ~= 'table' then return values end\n  local ret = {}\n  for i\
    \ = 1, #values do\n    local v = values[i]\n    if type(v) == 'number' then ret[#ret\
    \ + 1] = v end\n  end\n  return ret\nend", "  local new = {}\n  for k,v in pairs(values)\
    \ do\n    if type(v) == 'number' then\n      if v ~= math.floor(v) then\n    \
    \    new[k] = v\n      end\n    end\n  end\n  return new\nend", "   local result\
    \ = {}\n   for _, value in pairs(values) do\n      if type(value) == \"number\"\
    \ then\n         table.insert(result, value)\n      end\n   end\n   return result\n\
    end", "  if is_table(values) then\n    local results = {}\n    for k,v in pairs(values)\
    \ do\n      if is_integer(v) then table.insert(results, k) end\n    end\n    return\
    \ results\n  end\nend", "    local results = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == \"number\" then\n            if math.floor(v) == v\
    \ then\n                table.insert(results, v)\n            end\n        end\n\
    \    end\n    return results\nend", "  assert(type(values) ~= 'table')\n  values\
    \ = values -- cast to table\n  local res = {}\n  for _, v in pairs(values) do\n\
    \    if type(v) == 'number' then\n      table.insert(res, v)\n    end\n  end\n\
    \  return res\nend", "  return setmetatable(\n    {},\n    {__index = function(t,\
    \ k)\n      if type(k) ~= 'table' then return nil end\n      local integers =\
    \ values.filter:map(\n        function(v)\n          return type(v) == 'number'\
    \ and\n                 (math.floor(v) == v or math.isnan(v))\n        end)\n\
    \      if #integers == #values.filter then\n        return setmetatable({k = k},\
    \ {'__index'})\n      else\n        return nil\n      end\n    end}\n  )\nend",
  "  -- Find all luathon integer values\n  local integers = {}\n  for k, v in pairs(values)\
    \ do\n    if type(v) == 'table' and v._type == 'luathon.integer' then\n      table.insert(integers,\
    \ v)\n    end\n  end", "  local out = terralib.newlist()\n  local vtype, vt =\
    \ get_elem_type(value)\n  local vsize = vtype:size()\n  for i, v in ipairs(values)\
    \ do\n    local vi, vx = get_elem_size(v)\n    if vi and vi:isvector() then\n\
    \      local vis = vi:isvector()\n      -- If value is a vector, we cannot keep\
    \ it but can keep it's type.\n      if vis == vtype then\n        table.insert(out,\
    \ v)\n      elseif vs then\n        if vi ~= vtype then\n          -- If value\
    \ is a vector of different type, we cannot keep it.\n          table.insert(out,\
    \ v)\n        elseif vx ~= vsize then\n          -- If value is a vector of different\
    \ size, we cannot keep it.\n          table.insert(out, v)\n        else\n   \
    \       -- Keep the value.\n          table.insert(out, v)\n        end\n    \
    \  else\n        -- Keep the value.\n        table.insert(out, v)\n      end\n\
    \    elseif vtype == 'number' then\n      table.insert(out, v)\n    end\n  end\n\
    \  return out\nend", "  local results = {}\n  for i = 1, #values do\n    if not\
    \ values[i]:isnumber() then\n      table.insert(results, values[i])\n    end\n\
    \  end\n  return results\nend", "  local output = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then output[#output + 1] = value end\n  end\n\
    \  return output\nend", "    local filtered = {}\n    for _, v in ipairs(values)\
    \ do\n        -- Filter out integers\n        if type(v) == 'number' then\n  \
    \          table.insert(filtered, v)\n        end\n    end\n    return filtered\n\
    end", "  if type(values) ~= 'table' then\n    return values\n  end\n  local result\
    \ = {}\n  for _, v in pairs(values) do\n    if type(v) == 'number' then\n    \
    \  result[v] = true\n    end\n  end\n  return result\nend", "  local result =\
    \ {}\n  for _, value in pairs(values) do\n    if tonumber(value) then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend", "  if not values then\n\
    \    return values\n  elseif type(values) ~= 'table' then\n    error('Expected\
    \ table for argument \"values\", got ' .. type(values))\n  end\n  local results\
    \ = {}\n  local table_size = #values\n  for _, value in pairs(values) do\n   \
    \ if type(value) == 'table' then\n      table.insert(results, filter_integers(value))\n\
    \      continue\n    end\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n      continue\n    end\n    if value < 0 then\n      table.insert(results,\
    \ value)\n      continue\n    end\n    table.insert(results, value)\n  end\n \
    \ if table_size ~= #results then\n    error('Filtering table returned too many\
    \ results')\n  end\n  return results\nend", "  if not values then\n    return\
    \ values\n  end", "  if #values > 0 then\n    local results = {}\n    local max\
    \ = math.max(unpack(values))\n    local min = math.min(unpack(values))\n    local\
    \ delta = (max - min) * 0.1\n    local min_ind = -1\n    local max_ind = 0\n \
    \   local i = 1\n    while i <= #values do\n      local val = values[i]\n    \
    \  if type(val) == 'number' and val < min then\n        min = val\n        min_ind\
    \ = i\n      end\n      if type(val) == 'number' and val > max then\n        max\
    \ = val\n        max_ind = i\n      end\n      i = i + 1\n    end\n    if min_ind\
    \ ~= max_ind then\n      table.insert(results, unpack(values)[min_ind:max_ind])\n\
    \    end\n    table.insert(results, max)\n    return results\n  else\n    return\
    \ values\n  end\nend", "  local results = {}\n  for i = 1, #values do\n    local\
    \ value = tonumber(values[i])\n    if not value then break end\n    if type(value)\
    \ ~= 'number' then break end\n    if value == value then break end\n    results[#results\
    \ + 1] = value\n  end\n  return results\nend", "    local function is_integer(x)\n\
    \        return type(x) == 'table' and (type(x) == int or tonumber(x) == x)\n\
    \    end\n    local output = {}\n    for _, value in pairs(values) do\n      \
    \  if is_integer(value) then\n            output[#output + 1] = value\n      \
    \  end\n    end\n    return output\nend", "  local function is_integer(x) return\
    \ type(tostring(x)) ~= 'string' end\n  local ret = {}\n  for i = 1, #values do\n\
    \    if is_integer(values[i]) then\n      table.insert(ret, values[i])\n    end\n\
    \  end\n  return ret\nend", "  local res = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(res, value)\n  \
    \  end\n  end\n  return res\nend", "  if type(values) ~= 'table' then\n    return\
    \ nil\n  end", "    local filtered = {}\n    for k, v in pairs(values) do\n  \
    \      if type(v) ~= 'number' then\n            filtered[k] = v\n        end\n\
    \    end\n    return filtered\nend", "  local newvalues = terralib.newlist()\n\
    \  for _, value in ipairs(values) do\n    if type(value) == \"number\" then\n\
    \      newvalues:insert(value)\n    end\n  end\n  return newvalues\nend", "  return\
    \ function (k, v)\n    local v = v\n    if typeof(v) == 'number' and v ~= v then\n\
    \      v = tostring(v)\n    end\n    v = v\n      :gsub('%d+', '%x')\n      :gsub('%d',\
    \ '%d')\n      :gsub('%d%d', '%x')\n    return not not values[k] and values[k]\
    \ ~= '' and v == values[k]\n  end\nend", "  local output = {}\n  for i, v in pairs(values)\
    \ do\n    if type(v) == 'number' then\n      output[#output + 1] = v\n    end\n\
    \  end\n  return output\nend", "  local ret = {}\n  for _, v in pairs(values)\
    \ do\n    if not integer_test(v) then\n      table.insert(ret, v)\n    end\n \
    \ end\n  return ret\nend", "  local new_values = {}\n  for _, v in pairs(values)\
    \ do\n    v = tonumber(v)\n    if v == nil then\n      table.insert(new_values,\
    \ nil)\n    else\n      table.insert(new_values, v)\n    end\n  end\n  return\
    \ new_values\nend", "  return setmetatable(values, function(t)\n    if isfunction(t.value)\
    \ then return false end\n    if type(t) == 'table' then\n      for k, v in pairs(t)\
    \ do\n        if type(v) == 'number' and math.floor(v) == v then\n          t[k]\
    \ = v\n        end\n      end\n    end\n    return t\n  end)\nend", "  local result\
    \ = {}\n  for k,v in pairs(values) do\n    v = tonumber(v)\n    if not v then\n\
    \      table.insert(result, k)\n    end\n  end\n  return result\nend", "  return\
    \ setmetatable({}, {__mode = 'k'})\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    local i, _, _ = value\n    if i == i then\n      table.insert(result,\
    \ i)\n    end\n  end\n  return result\nend", "  local result = {}\n  for k, v\
    \ in pairs(values) do\n    local _, v = unpack(k)\n    if type(v) == 'number'\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
  "  if type(values) ~= 'table' then return {} end\n  local result = {}\n  for k,\
    \ v in pairs(values) do\n    if type(v) == 'number' then\n      result = setmetatable(v,\
    \ {__index=function (t, k) return k end})\n      if not result then break end\n\
    \    end\n  end\n  return result\nend", "  if type(values) ~= 'table' then return\
    \ values end\n  local filtered = {}\n  for k in pairs(values) do\n    if type(k)\
    \ == 'number' then\n      table.insert(filtered, k)\n    end\n  end\n  return\
    \ filtered\nend", "  -- If there are no integers, return an empty table\n  if\
    \ not is_table_empty(values) then\n    local filtered_table = {}\n    for _, value\
    \ in pairs(values) do\n      if is_integer(value) then\n        filtered_table[#filtered_table\
    \ + 1] = value\n      end\n    end\n    return filtered_table\n  end\n  return\
    \ values\nend", "  local t = {}\n  local function filter_ints(key, value)\n  \
    \  if type(value) == 'number' then\n      t[value] = true\n    end\n  end\n  for\
    \ key, value in pairs(values) do\n    filter_ints(key, value)\n  end\n  return\
    \ t\nend", "  if is_map(values) then\n    local new_values = {}\n    for k, v\
    \ in pairs(values) do\n      if is_integer(v) then new_values[v] = k end\n   \
    \ end\n    return new_values\n  elseif is_set(values) then\n    local new_values\
    \ = {}\n    for v in pairs(values) do\n      if is_integer(v) then new_values[v]\
    \ = true end\n    end\n    return new_values\n  else\n    return values\n  end\n\
    end", "    local res = {}\n    for _, value in pairs(values) do\n        if type(value)\
    \ == 'table' then\n            if type(value[1]) == 'number' and value[1] ~= nil\
    \ then\n                table.insert(res, value[1])\n            end\n       \
    \ else\n            if value ~= nil then\n                table.insert(res, value)\n\
    \            end\n        end\n    end\n    return res\nend", "  local ret = {}\n\
    \  for k, v in pairs(values) do\n    local t = type(v)\n    if t == 'number' then\n\
    \      ret[k] = v\n    end\n  end\n  return ret\nend", "  local function is_int(x)\n\
    \    local _, x_type = pcall(function()\n      local _, x_type = pcall(function()\n\
    \        return x == x\n      end)\n    end)\n    return x_type == type(x) and\
    \ x_type ~= 'table'\n  end", "  local filtered = {}\n  for k, v in pairs(values)\
    \ do\n    local v = tonumber(v)\n    if v ~= nil and v ~= false and v ~= 0 then\n\
    \      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend", " \
    \ if type(values) ~= 'table' then return {values} end\n  local rv = {}\n  for\
    \ _, v in pairs(values) do\n    local ok, err = tonumber(v)\n    if ok then rv[#rv\
    \ + 1] = v end\n  end\n  return rv\nend", "    local result = {}\n    for k, v\
    \ in pairs(values) do\n        if type(v) == 'number' then\n            if v >\
    \ 0 then\n                result[#result + 1] = v\n            end\n        end\n\
    \    end\n    return result\nend", "    local integers = {}\n    for i = 1, #values\
    \ do\n        if type(values[i]) == 'number' then\n            table.insert(integers,\
    \ values[i])\n        end\n    end\n    return integers\nend", "  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' then\n   \
    \   table.insert(result, v)\n    end\n  end\n  return result\nend", "  local out\
    \ = terralib.newlist()\n  for i, v in ipairs(values) do\n    if type(v) ~= 'number'\
    \ then\n      table.insert(out, v)\n    end\n  end\n  return out\nend", "  if\
    \ type(values) == 'table' and next(values) ~= nil then\n    local results = {}\n\
    \    for _, value in ipairs(values) do\n      if type(next(values)) == 'number'\
    \ and math.floor(value) == value then\n        results[#results + 1] = value\n\
    \      else\n        return nil\n      end\n    end\n    return results\n  else\n\
    \    return nil\n  end\nend", "  local out = {}\n  table.sort(values, function(a,b)\
    \ return (type(b) == 'number') end)\n  for _, value in pairs(values) do\n    if\
    \ type(b) == 'number' then\n      if value % 1 ~= 0 then\n        table.insert(out,\
    \ value)\n      end\n    end\n  end\n  return out\nend", "  local result = {}\n\
    \  for _, v in pairs(values) do\n    if not (v:type() == 'number') then\n    \
    \  result[#result +1] = v\n    end\n  end\n  return result\nend", "  local results\
    \ = {}\n  for _, v in pairs(values) do\n    if type(v) == 'number' and math.isinteger(v)\
    \ then\n      table.insert(results, v)\n    end\n  end\n  return results\nend",
  "  local out = setmetatable({}, {__mode=\"v\"})\n  for _, _, _, _ in pairs(values)\
    \ do\n    if type(_) ~= 'number' then\n      table.insert(out, _)\n    end\n \
    \ end\n  return out\nend", "  local function f(i)\n    return type(values[i])\
    \ == 'number'\n  end\n  local result = setmetatable({}, {__mode = 'v'})\n  for\
    \ i = 1, #values do\n    if f(i) then\n      result[i] = values[i]\n    end\n\
    \  end\n  return result\nend", "  local i = 1\n  while i <= #values do\n    if\
    \ not is_number(values[i - 1] or (values[i - 1] == nil and 0)) then\n      return\
    \ values\n    end\n    i = i + 1\n  end\n  return nil\nend", "  return setmetatable({},\
    \ {\n    __index = function(self, key)\n      return unpack(values, key)\n   \
    \ end,\n  })\nend", "  -- LuaJIT supports integer numbers of any precision.\n\
    \  return setmetatable(values, {\n    __index = function (t, k)\n      if type(t[k])\
    \ ~= 'number' then\n        return nil\n      end", "  if type(values) == 'table'\
    \ then\n    local results = {}\n    local last_val = nil\n    local last_i = nil\n\
    \    for i, v in pairs(values) do\n      if type(v) == 'number' then\n       \
    \ if last_val == nil then\n          last_val = v\n          last_i = i\n    \
    \    else\n          local delta = v - last_val\n          if delta < 0 then\n\
    \            -- This happens when the values are nearly equal -- we must not remove\
    \ these values because they will change the numerical order of the elements\n\
    \            -- For example, suppose the values are {2, 2}. They could be interpreted\
    \ as meaning \"the item with the smallest id is the first item\", so when we have\
    \ two of the same value, we need to remove the second one because it will change\
    \ the order\n            -- So let's keep it for now and remove only the last\
    \ one because it happened to be the one with the smallest id\n            table.insert(results,\
    \ last_val)\n            last_i = i - 1\n          else\n            table.insert(results,\
    \ v)\n          end\n          last_val = v\n          last_i = i\n        end\n\
    \      end\n    end\n    if #results > 0 then\n      table.insert(results, last_val)\n\
    \    end\n    return results\n  else\n    -- This happens when we pass the function\
    \ a string instead of table of values\n    return {}\n  end\nend", "    local\
    \ ret = {}\n    for _, value in pairs(values) do\n        if type(value) ~= 'number'\
    \ then\n            ret[#ret+1] = value\n        elseif value == value then\n\
    \            ret[#ret+1] = value\n        end\n    end\n    return ret\nend",
  "  local new_values = {}\n  for _, v in pairs(values) do\n    if type(v) == 'number'\
    \ then\n      new_values[#new_values + 1] = v\n    end\n  end\n  return new_values\n\
    end", "  local filtered = {}\n  for _, value in ipairs(values) do\n    if type(value)\
    \ == 'table' then\n      filtered = table.concat(filtered, '||', value)\n    elseif\
    \ type(value) == 'number' then\n      filtered[#filtered + 1] = value\n    end\n\
    \  end\n  return table.concat(filtered)\nend", "  local filtered = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      filtered[value]\
    \ = true\n    end\n  end\n  return setmetatable(filtered, {__index = value_type})\n\
    end", "  return setmetatable(\n    {},\n    {\n      __index = function (t, key)\n\
    \        local value = t[key]\n        if value == nil then return nil end\n \
    \       if type(key) == 'number' then\n          if type(value) == 'number' and\
    \ value == value then\n            return value\n          elseif type(value)\
    \ == 'string' then\n            return value\n          else\n            return\
    \ nil\n          end\n        elseif type(value) ~= 'table' then\n          return\
    \ value\n        end\n        for i = 1, #t do\n          local k, v = t[i]\n\
    \          if not isnumber(k) or k ~= key then\n            v = nil\n        \
    \    break\n          end\n        end\n        if v ~= nil then\n          t[key]\
    \ = v\n        end\n        return value\n      end\n    }\n  )\nend", "    local\
    \ mapping = {}\n    for i, v in pairs(values) do\n        if type(v) ~= 'number'\
    \ then\n            table.insert(mapping, v)\n        else\n            mapping[v]\
    \ = i\n        end\n    end", "  local result = {}\n  for i, v in pairs(values)\
    \ do\n    if typeof(v) == 'number' then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    for k, v in pairs(values)\
    \ do\n        if type(v) == 'number' and (math.isinteger(v) or math.isnan(v))\
    \ then\n            result[#result + 1] = v\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for i, v in ipairs(values) do\n    if\
    \ type(v) == 'number' then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for k, v in pairs(values) do\n    if type(v)\
    \ == 'number' then\n      result[k] = v\n    end\n  end\n  return result\nend",
  "  return setmetatable(\n    setmetatable({\n      __index = function(t, key)\n\
    \        local i, count = 1, #t\n        while i < count do\n          if t[i]\
    \ ~= tonumber(key) then\n            break\n          end\n          i = i + 1\n\
    \        end\n        return t[i]\n      end\n    }, values),\n    {__mode = 'k'})\n\
    end", "  local rv = setmetatable(values, {})\n  for _, v in pairs(values) do\n\
    \    v = tonumber(v)\n    if v ~= nil then\n      rv[v] = nil\n    end\n  end\n\
    \  return rv\nend", "    local result = {}\n    for _, value in pairs(values)\
    \ do\n        if type(tostring(value)) ~= 'number' then\n            return result\n\
    \        end\n        if value == value then\n            result[#result + 1]\
    \ = value\n        end\n    end\n    return result\nend", "  local filtered =\
    \ {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' then\n\
    \      table.insert(filtered, value)\n    end\n  end\n  return filtered\nend",
  "  local value\n  local out = {}\n  for _, value in ipairs(values) do\n    -- TODO:\
    \ Fix to support other types. Currently only supports the lua number\n    -- \
    \      and string types\n    if type(value) ~= 'number' then\n      if type(value)\
    \ == 'string' then\n        table.insert(out, value)\n      else\n        table.insert(out,\
    \ type(value))\n      end\n    end\n  end\n  return out\nend", "  local filtered\
    \ = {}\n  for _, value in pairs(values) do\n    if type(value) ~= 'number' then\n\
    \      filtered[#filtered + 1] = value\n    end\n  end\n  return filtered\nend",
  "   local result = {}\n   for _, value in pairs(values) do\n      if type(value)\
    \ == 'number' then\n         table.insert(result, value)\n      end\n   end\n\
    \   return result\nend", "  local results = {}\n  for i, v in ipairs(values) do\n\
    \    local v = v:int()\n    if not v then break end\n    results[i] = v\n  end\n\
    \  return results\nend", "  return setmetatable(\n    {},\n    {__index = function(self,\
    \ key)\n      -- Only check integers\n      if tonumber(key) then\n        --\
    \ If table doesn't have this key, add it\n        if rawget(self, key) == nil\
    \ then\n          rawset(self, key, 0)\n        end\n      end\n      return rawget(self,\
    \ key)\n    end}\n  )(values)\nend", "  local result = {}\n  for _, v in pairs(values)\
    \ do\n    if type(v) == \"number\" and math.floor(v) == v then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local set = setmetatable({}, {\n\
    \    __index = function (t, k)\n      if k == '__index' then\n        return k\n\
    \      elseif type(k) == 'number' then\n        return k\n      elseif type(k)\
    \ == 'string' and k:sub(-5, -5) == '.' then\n        return k\n      else\n  \
    \      return setmetatable({}, {\n          __index = function (t, k)\n      \
    \      if k == '__index' then\n              return k\n            elseif type(k)\
    \ == 'number' then\n              return k\n            else\n              return\
    \ setmetatable({}, {\n                __index = function (t, k)\n            \
    \      if k == '__index' then\n                    return k\n                \
    \  else\n                    return t[k]\n                  end\n            \
    \    end)\n              end)\n            end\n          end\n        })\n  \
    \    end\n    end\n  })\n  for _, v in pairs(values) do\n    local i, j = v:find('^-?%d+$'),\
    \ v:find('^-?%d+%.%d+$'), v:find('^-?%d+%.%d+%.%d+$')\n    if i ~= nil then\n\
    \      table.insert(set, v)\n    end\n    if j ~= nil then\n      table.insert(set,\
    \ v:sub(1, i - 1))\n    end\n    if k ~= nil then\n      table.insert(set, v:sub(i,\
    \ j - i))\n    end\n  end\n  return set\nend", "  local table_keys = terralib.newlist()\n\
    \  for k, v in pairs(values) do\n    if not is_integer(v) then\n      table_keys:insert(k)\n\
    \    end\n  end\n  return setmetatable(values, {__index=table_keys})\nend", " \
    \   local function is_integer(value)\n        return type(tostring(value)) ==\
    \ 'number' and value == tonumber(tostring(value))\n    end\n    return setmetatable(values,\
    \ {__mode = 'kv', __index = function(t, key)\n        if is_integer(key) then\n\
    \            return t[key]\n        end\n        return nil\n    end})\nend",
  "  -- Make sure there are luathon values\n  if #values ~= 0 then\n    -- Filter\
    \ integers\n    local integer = {}\n    for _, v in ipairs(values) do\n      if\
    \ type(v) == 'number' then\n        table.insert(integer, v)\n      end\n    end\n\
    \    return integer\n  else\n    return nil\n  end\nend", "  local result = {}\n\
    \  for _, value in pairs(values) do\n    if type(value) == 'number' then\n   \
    \   result[#result + 1] = value\n    end\n  end\n  return result\nend", "  if\
    \ values then\n    local result = {}\n    local i = 1\n    for k, v in pairs(values)\
    \ do\n      if type(v) == 'number' then\n        if v ~= i then\n          table.insert(result,\
    \ k)\n        end\n        i = i + 1\n      end\n    end\n    return result or\
    \ values\n  else\n    return nil\n  end\nend", "  -- Filter out any luathon values\
    \ that aren't integers\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'table' then\n      table.insert(filtered_values,\
    \ filter_integers(value))\n    elseif type(value) == 'number' then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend", "  local result = {}\n\
    \  table.foreachi(function(value, index)\n    if type(value) ~= 'number' then\
    \ return end\n    table.insert(result, value)\n  end, values)\n  return result\n\
    end", "  local result = {}\n  for k, v in pairs(values) do\n    if type(v) ==\
    \ \"number\" then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "  for i, value in ipairs(values) do\n    if not value.isinteger then\n\
    \      return nil\n    end\n  end\n  return values\nend", "  local results = {}\n\
    \  for _, v in ipairs(values) do\n    if type(v) == 'number' then\n      table.insert(results,\
    \ v)\n    end\n  end\n  return results\nend", "  local result = {}\n  for _, value\
    \ in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend", "  local set = setmetatable(values,\
    \ {__mode = \"v\"})\n  for i, v in pairs(values) do\n    if type(v) == \"number\"\
    \ and (math.floor(v) == v or (math.isnan(v) and math.isnan(math.floor(v))))\n\
    \    then\n      set[i] = v\n    end\n  end\n  return set\nend", "  if type(values)\
    \ == 'table' then\n    local result = {}\n    for i, v in pairs(values) do\n \
    \     if type(v) == 'table' then\n        for k, v in pairs(v) do\n          if\
    \ type(k) == 'number' then\n            result[#result + 1] = {k, v}\n       \
    \   end\n        end\n      elseif type(v) == 'number' then\n        result[#result\
    \ + 1] = v\n      end\n    end\n    return result\n  else\n    return values\n\
    \  end\nend", "  local ret = {}\n  local i = 1\n  for k,v in pairs(values) do\n\
    \    if type(v) ~= 'number' then\n      i = i -1\n      table.insert(ret, v)\n\
    \    end\n  end\n  if i > 0 then\n    return ret\n  end\n  return nil\nend", " \
    \ if not values then return end\n  local ret = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then break end\n    if value == value then\
    \ ret[#ret + 1] = value end\n  end\n  return ret\nend", "  -- The values passed\
    \ as table are assumed to be keyed tables.\n  -- If keys are not integers, we\
    \ can only consider them as values.\n  -- This also implies that if a value is\
    \ not an integer value, we cannot consider\n  -- it as a valid key.", "  local\
    \ result = {}\n  for _, v in pairs(values) do\n    if type(v) ~= 'number' then\n\
    \      result[#result + 1] = v\n    end\n  end\n  return result\nend", "  if values\
    \ == nil then return end -- nothing to filter\n  if type(values) ~= 'table' then\
    \ return end", "    local filtered = {}\n    for k,v in pairs(values) do\n   \
    \     if type(v) == 'number' and v >= 0 then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "  local new_values = {}\n\
    \  for _, value in pairs(values) do\n    if type(value) ~= 'number' then\n   \
    \   new_values[#new_values + 1] = value\n    end\n  end\n  return new_values\n\
    end", "  local results = {}\n  for k, v in pairs(values) do\n    if not is_integer(k)\
    \ then break end\n    table.insert(results, v)\n  end\n  return results\nend",
  "  return setmetatable({\n    integer = {}\n  }, {\n    metamethod = function(_,\
    \ name)\n      if name == 'integer' then\n        return values\n      end\n \
    \   end\n  })\nend", "  if type(values) == 'table' then\n    local new_values\
    \ = {}\n    for _, v in pairs(values) do\n      if type(v) == 'number' then\n\
    \        new_values[#new_values + 1] = v\n      end\n    end\n    return new_values\n\
    \  end\n  return nil\nend", "  -- NOTE: We know all values are integers\n  return\
    \ setmetatable({}, {\n    __index = function(t, k)\n      if rawget(t, \"integers\"\
    ) then\n        return k in t.integers\n      elseif type(k) == 'string' then\n\
    \        return string.find(k, \"^%s*(%d%d%d)$\") ~= nil\n      else\n       \
    \ return false\n      end\n    end\n  })\nend", "  local table = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(table,\
    \ value)\n    end\n  end\n  return table\nend", "  local filter = {}\n  for k,\
    \ v in pairs(values) do\n    if type(k) == 'number' and type(v) == 'number' then\n\
    \      table.insert(filter, k)\n    end\n  end\n  return filter\nend", "  local\
    \ i = 1\n  local result = {}\n  while i <= #values do\n    if type(values[i])\
    \ == 'table' then\n      local newValues = {}\n      for k, v in pairs(values[i])\
    \ do\n        if type(k) ~= 'number' then\n          newValues[k] = v\n      \
    \  else\n          newValues[k] = k\n        end\n      end\n      values = newValues\n\
    \    end\n    if type(values[i]) == 'number' then\n      table.insert(result,\
    \ values[i])\n    end\n    i = i + 1\n  end\n  return result\nend", "  local result\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) ~= 'number' then\n   \
    \   result[#result + 1] = v\n    else\n      if v ~= floor(v) then\n        result[#result\
    \ + 1] = v\n      end\n    end\n  end\n  return result\nend", "  local function\
    \ is_integer(value)\n    if type(value) ~= 'number' then\n      return false\n\
    \    end\n    return not math.isnan(value) and math.isinteger(value)\n  end\n\
    \  local filtered = {}\n  for _, value in ipairs(values) do\n    if is_integer(value)\
    \ then\n      table.insert(filtered, value)\n    end\n  end\n  return filtered\n\
    end", "  if #values <= 0 then\n    return nil\n  end\n  local results = {}\n \
    \ for i = 1, #values do\n    local value = tonumber(values[i])\n    if not value\
    \ then\n      local value = tonumber(values[i])\n      if value then\n       \
    \ results[#results+1] = value\n      end\n    elseif type(value) == 'number' then\n\
    \      results[#results+1] = value\n    end\n  end\n  return results\nend", " \
    \ return setmetatable({}, {\n      __index = function(t, k)\n        if type(t[k])\
    \ ~= 'table' or t[k] == nil then\n          return nil\n        end\n        if\
    \ t[k] == false then\n          return nil\n        end\n        if t[k] == true\
    \ then\n          return 1\n        end\n        if type(t[k]) == 'number' then\n\
    \          if k == 1 then\n            return t[k]\n          elseif k == 2 then\n\
    \            return t[k] ~= 0 and t[k] ~= 1\n          elseif k == 3 then\n  \
    \          return t[k] ~= 0 and t[k] ~= 1\n          end\n        else\n     \
    \     if k == 1 then\n            return t[k] == 'true'\n          elseif k ==\
    \ 2 then\n            return t[k] ~= 'true'\n          elseif k == 3 then\n  \
    \          return t[k] ~= 'true'\n          end\n        end\n        return false\n\
    \      end,\n      __newindex = function()\n        error\n      end\n  })\nend",
  "  local newtable = {}\n  for _, value in ipairs(values) do\n    if type(value)\
    \ ~= 'table' then\n      newtable = {value}\n    else\n      newtable = {value\
    \ = filter_integers(value.value)}\n    end\n  end\n  return table.concat(newtable,\
    \ 'value')\nend", "  -- Filter any luathon values only integers\n  local int_values\
    \ = setmetatable({}, {__index=table})\n  for k,v in pairs(values) do\n    if type(v)\
    \ == 'number' then\n      int_values[k] = v\n    end\n  end\n  return int_values\n\
    end", "  local ret = {}\n  for k,v in pairs(values) do\n    if type(k) == 'number'\
    \ then\n      if k == v then\n        ret[#ret + 1] = k\n      end\n    end\n\
    \  end\n  return ret\nend", "  if type(values) ~= 'table' then return {values}\
    \ end\n  local result = {}\n  for k, v in pairs(values) do\n    if type(v) ==\
    \ 'number' then\n      if math.floor(v) == v then\n        table.insert(result,\
    \ v)\n      end\n    end\n  end\n  return result\nend", "  return setmetatable({\n\
    \    table.unpack(values)\n  }, getmetatable(values))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
