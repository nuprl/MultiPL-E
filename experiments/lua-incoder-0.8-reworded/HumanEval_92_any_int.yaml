name: HumanEval_92_any_int
language: lua
prompt: "-- Create a function that takes 3 numbers.\n-- Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n-- true\n\
  -- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n-- >>> any_int(3.6,\
  \ -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
  \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
  \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
  \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
  \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
  \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your code here!\n  return true -- Replace this comment with\
    \ your own code.\nend", "  if type(y) == \"number\" then\n    if type(x) == \"\
    number\" and type(z) == \"number\" then\n      return math.abs(x-y)+math.abs(x-z)\
    \ < 2\n    end\n  end\n  return false\nend", "    if x ~= nil and y ~= nil and\
    \ z ~= nil then\n        return (tostring(x) == tostring(y) or tostring(x) ==\
    \ tostring(z)) and (type(tostring(x)) ~= 'number' or type(tostring(y)) ~= 'number'\
    \ or type(tostring(z)) ~= 'number')\n    else\n        return false\n    end\n\
    end", "  if x == y then\n    if x == z then\n      return true\n    end\n    return\
    \ false\n  end\n  return false\nend", "  -- Check for none\n  if not x then return\
    \ nil end\n  if not y then return nil end\n  if not z then return nil end\n  --\
    \ Check types\n  if type(x) ~= 'number' then return false end\n  if type(y) ~=\
    \ 'number' then return false end\n  if type(z) ~= 'number' then return false end\n\
    \  -- Check numbers\n  if x < 0 then return false end\n  if y < 0 then return\
    \ false end\n  if z < 0 then return false end\n  -- Check ranges\n  if x > z then\
    \ return false end\n  if y > z then return false end\n  -- Check values\n  if\
    \ x + y == z then return true end\n  return false\nend", "   if x ~= math.floor(x)\
    \ or y ~= math.floor(y) or z ~= math.floor(z) then return false end\n   if x <\
    \ y then return x ~= z end\n   if y < z then return y ~= x end\n   return true\n\
    end", "    if type(x) ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number'\
    \ then\n        return false\n    end\n    if x == y and x == z and type(x) ==\
    \ 'number' then\n        return true\n    end\n    if type(x) == 'number' then\n\
    \        if x == 0 then\n            return true\n        elseif y == 0 then\n\
    \            return true\n        elseif z == 0 then\n            return true\n\
    \        end\n    end\n    if y == 0 or z == 0 then\n        return false\n  \
    \  end\n    if y == z and z > 0 then\n        return any_int(y, z - 1, x)\n  \
    \  else\n        return false\n    end\nend", "    -- if all numbers are integers\n\
    \    if type(y) == \"number\" and type(z) == \"number\" then\n        return x\
    \ == y + z or x == z + y\n    end", "  return x ~= nil and y ~= nil and z ~= nil\
    \ and\n         x == y or\n         x == z and y == z or\n         x == z and\
    \ y == x or\n         x == y and y == z or\n         x == y and y == x or\n  \
    \       x == z and y == z\nend\n</cell>\n<code language=xeus-cling-cpp14>", " \
    \ if x == y then\n    if x == z then\n      return true\n    else\n      return\
    \ false\n    end\n  elseif x == z then\n    return true\n  else\n    return false\n\
    \  end\nend\n_G.any_int = any_int", "  if type(x) == \"number\" and type(y) ==\
    \ \"number\" and type(z) == \"number\" then\n    return x ~= nil and y ~= nil\
    \ and z ~= nil and\n           x ~= y and x ~= z and y ~= z\n  else\n    return\
    \ false\n  end\nend", "  return x or y or z == math.floor(x+y+z) or z == math.floor(x-y-z)\
    \ or x == math.floor(x*y*z)\nend", "  -- Return true if the sum of three numbers\
    \ is equal to the given number.\n  return (x == y and y == z and type(z) == 'number')\
    \ or ((x * y + z * x) == z)\nend\n</code>\n<|/ a tags=lua dscore=0 |>\n<| c |>\n\
    This doesn't answer the question about how to get the sum of two or more numbers.\
    \ Also, `type(x * y + z * x) == 'number'` is redundant. `type(x * y + z * x) ==\
    \ 'number'` means `type(x * y) == 'number'` and `type(x * z) == 'number'`; `type(x\
    \ * y) == 'number'` means that `type(x * z) == 'number'`. `(x * y + z * x) ==\
    \ z` means `(x * y) == z` and `(x * z) == z`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out, I've updated my answer. I don't know why I didn't think of that, but\
    \ that's actually much nicer :)\n<|/ c |>\n<| a tags=lua |>\nYou can use math.fsum\
    \ to get sum of two numbers:\n<code>\nprint(math.fsum(1,2,3))\nprint(math.fsum(1,2,3,4,5))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. `math.fsum(1,2,3)`\
    \ isn't supposed to be `7`.\n<|/ c |>\n<| a tags=lua |>\nThere are many ways to\
    \ do this. One way is to make a function like this:\n<code>", "  return x >= y\
    \ and x == z or x >= z and x == y or y >= z and x == y\nend", "  local x_is_int\
    \ = type(z) == 'number'\n  local y_is_int = type(y) == 'number'\n  return x_is_int\
    \ and y_is_int and type(x) == type(y) and x == y + z and x % 1 == 0 and x % 1\
    \ == 0 -- Check if both numbers are integers, and that they're equal, and that\
    \ they're not divisible by 1\nend", "    if type(y) == 'number' and type(z) ==\
    \ 'number' then\n        return (type(x) == 'number' and x > y and x < z and x\
    \ >= 0 and y >= 0 and z >= 0)\n    elseif type(y) == 'table' and type(z) == 'table'\
    \ then\n        local result = true\n        for _, xv in pairs(y) do\n      \
    \      if any_int(xv, z) then\n                result = false\n            end\n\
    \        end\n        return result\n    else\n        return false\n    end\n\
    end", "   if x ~= nil then\n      if y ~= nil and y ~= z then\n         return\
    \ true\n      elseif y == nil then\n         if z ~= nil then\n            return\
    \ true\n         else\n            return false\n         end\n      else\n  \
    \       if z ~= nil and z ~= x then\n            return true\n         else\n\
    \            return false\n         end\n      end\n   else\n      if y ~= nil\
    \ then\n         return true\n      else\n         if z ~= nil then\n        \
    \    return true\n         else\n            return false\n         end\n    \
    \  end\n   end\nend", "    if x == y then return true end\n    if x == z then\
    \ return false end\n    if y == z then return false end\n    if x < y or x < z\
    \ or y < z then return false end\n    return true\nend", "   if x == y or x ==\
    \ z or y == z then return true end\n   return false\nend", "  return x >= y and\
    \ x >= z and y >= z\nend", "    local function check(x, y, z)\n        if x <\
    \ y and x < z then return true end\n        if y < x and y < z then return true\
    \ end\n        if z < x and z < y then return true end\n        return false\n\
    \    end\n    return check(x, y, z)\nend", "  if type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y + z\n  else\n  \
    \  return false\n  end\nend", "    if type(x) == \"number\" then\n        if type(y)\
    \ == \"number\" then\n            if type(z) == \"number\" then\n            \
    \    return x == y + z\n            else\n                return false\n     \
    \       end\n        else\n            return false\n        end\n    else\n \
    \       return false\n    end\nend", "  return ((type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number') and\n     x == x + y and x == x + z and\
    \ x == y + z)\nend", "    return tostring(x) == tostring(y) and tostring(x) ==\
    \ tostring(z) and tonumber(x) == tonumber(y) and tonumber(x) == tonumber(z)\n\
    end", "  return tonumber(x) or tonumber(y) or tonumber(z) or x == y+z\nend", " \
    \   if x and y and z then\n        return x ~= nil and y ~= nil and z ~= nil and\
    \ x == y + z\n    else\n        return false\n    end\nend", "  if type(y) ==\
    \ 'number' and type(z) == 'number' then\n    return (x + y + z) ~= 0 and math.floor((x\
    \ + y + z) / 100) == math.floor((x + y + z) / 100)\n  elseif type(y) == 'table'\
    \ and type(z) == 'table' then\n    -- If x and y are both tables, return true\
    \ if any column of z is also a column of x, or any column of z is a column of\
    \ y\n    -- If x or y are non-tables, return false\n    for i, x_i in pairs(x)\
    \ do\n      for k, z_k in pairs(z) do\n        if x_i == z_k or x_i == k or z_k\
    \ == k then\n          return true\n        end\n      end\n    end\n    return\
    \ false\n  else\n    return false\n  end\nend", "  if type(x) and type(y) and\
    \ type(z) == 'number' then\n    return x == y + z\n  elseif type(x) == 'number'\
    \ and type(y) and type(z) == 'number' then\n    return x == z + y\n  else\n  \
    \  return false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y or x == z or y == z\n  end\n\
    \  return false\nend", "    if x ~= nil and y == nil then\n        return x ==\
    \ z\n    elseif x~=nil and y ~= nil then\n        return x == y and type(z) ==\
    \ 'number'\n    else\n        return false\n    end\nend", "\t-- If any number\
    \ is non-integer, return false\n\tif type(x) ~= 'number' or type(y) ~= 'number'\
    \ or type(z) ~= 'number' then\n\t\treturn false\n\tend", "  return ((x == y and\
    \ type(y) == \"number\") or type(y) == \"number\") or type(z) == \"number\") and\n\
    \    (type(x) == \"number\" or type(y) == \"number\" or type(z) == \"number\"\
    ) and\n    (x + y + z == z or x + y + z == z)\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x ~= 0 and\
    \ x ~= y and x ~= z\n  else\n    return false\n  end\nend", "  assert(type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\")\n  return\
    \ x ~= nil and y ~= nil and z ~= nil and x + y == z\nend", "  -- Check if x is\
    \ less than y.\n  if x < y then\n    -- Check if x is less than or equal to y.\n\
    \    if x <= z then\n      return true\n    end\n  elseif x <= z then\n    --\
    \ Check if x is equal to y.\n    return true\n  end\n  return false\nend", " \
    \ -- Check each argument's validity.\n  if x ~= nil and y ~= nil and z ~= nil\
    \ then\n    -- Return if all the arguments' values are integers.\n    if type(x)\
    \ ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then\n      return\
    \ false\n    end", "    if x ~= nil then\n        if y ~= nil and y ~= z then\n\
    \            return true\n        end\n    end\n    if z ~= nil and z ~= y then\n\
    \        return true\n    end\n    return false\nend", "    return (type(x) ==\
    \ 'number') and\n        (type(y) == 'number') and\n        (type(z) == 'number')\
    \ and\n        ((x) == ((x + y) + z)) and\n        ((x) == ((x - y) - z)) and\n\
    \        ((x) == ((x * y) * z)) and\n        ((x) == ((x / y) / z)) and\n    \
    \    ((x) == ((x % y) % z)) and\n        ((x) == ((x % z) % z)) and\n        ((x)\
    \ == ((x ^ y) % z)) and\n        ((x) == ((x ^ z) % z))\nend", "  if x and y and\
    \ z then return false end\n  local nx = tonumber(x)\n  local ny = tonumber(y)\n\
    \  local nz = tonumber(z)\n  if nx and ny and nz then\n    return ((nx + ny) ==\
    \ nz) and tonumber(x) or tonumber(y) or tonumber(z)\n  elseif nx and ny then\n\
    \    return (nx == ny) and tonumber(x) or tonumber(y)\n  elseif nx then\n    return\
    \ tonumber(x)\n  elseif ny then\n    return tonumber(y)\n  else\n    return tonumber(z)\n\
    \  end\nend", "  -- We are checking the sum of the other two numbers, so if both\
    \ are integers\n  -- and they are equal, then the sum should be the integer\n\
    \  if type(y) == 'number' and type(z) == 'number' and\n      y % 1 == 0 and z\
    \ % 1 == 0 then\n    return x == y + z\n  end\n  return false\nend", "    return\
    \ ((type(y) == 'number' and type(z) == 'number') and\n            ((x ~= y and\
    \ x ~= z) or (y ~= x and y ~= z)))\nend", "  if type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y or x == z\n  elseif type(x) == \"number\"\
    \ then\n    return type(y) == \"number\" and y == z\n  else\n    return x == y\
    \ or y == z\n  end\nend", "  return x >= y and x >= z and y >= z and x >= tostring(x)\
    \ + tostring(y) and y >= tostring(x) + tostring(y) and z >= tostring(x) + tostring(z)\
    \ and z >= tostring(y) + tostring(x) and z >= tostring(y) + tostring(z)\nend",
  "  if type(x) ~= 'number' or type(y) ~= 'number' or type(z) ~= 'number' then\n \
    \   return false\n  end\n  return x + y == z\nend", "    local z = z or 0\n  \
    \  local xy = x + y\n    local yz = y + z\n    local xz = x + z\n    return ((xy\
    \ == z) or (yz == z) or (xz == z))\nend", "    local r\n    if x == y and y ==\
    \ z then return true end\n    if x == y then r = z else r = y end\n    if x ==\
    \ z then r = x end\n    if y == z then r = x end\n    return false\nend", "\t\
    if x == nil then\n\t\treturn y~=z\n\tend\n\tif y == nil then\n\t\treturn z~=x\n\
    \tend\n\tif z == nil then\n\t\treturn x ~= y + z\n\tend\n\treturn x ~= y + z or\
    \ y ~= z + x\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    if x ==\
    \ y and y == z then\n      -- all numbers are equal\n      return true\n    end\n\
    \  end\n  return false\nend", "\tif x == y and x == z then\n\t\treturn true\n\t\
    elseif x < y and y < z then\n\t\treturn true\n\telseif x < z and z < y then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    local sum1 = x\
    \ + y\n    local sum2 = x + z\n    return sum1 == sum2 or sum1 == sum2 and y ==\
    \ z\n  else\n    return false\n  end\nend", "  local function is_int(n)\n    return\
    \ tonumber(n) >= 0 and tonumber(n) < math.pow(10, tonumber(math.max(string.len(n),\
    \ 4)))\n  end\n  -- Test if any of the three numbers is equal to the sum of the\
    \ other two.\n  if is_int(x) and is_int(y) and is_int(z) and x + y + z == z then\n\
    \    return true\n  end\n  return false\nend", "  if type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number' then\n    local sum = x\n    if sum > 0\
    \ then\n      sum = x + y\n      if sum > z then\n        return true\n      else\n\
    \        sum = x + z\n        if sum > y then\n          return true\n       \
    \ end\n      end\n    end\n  end\n  return false\nend", "  if x ~= nil then\n\
    \    if y ~= nil then\n      if z ~= nil then\n        return tostring(x) == tostring(y)\
    \ and tostring(x) == tostring(z)\n      end\n      return true\n    end\n    return\
    \ true\n  end\n  return false\nend", "  return x and x+y and x+y+z\nend", "  if\
    \ x == y then return true end\n  if x ~= math.floor(x) then return false end\n\
    \  if z ~= math.floor(z) then return false end\n  return true\nend", "  return\
    \ math.floor(x + y + z) == math.floor(x + y + z + 1) and\n         type(z) ==\
    \ 'number' and\n         type(x) == 'number' and\n         type(y) == 'number'\
    \ and\n         x + y + z + 1 == z\nend", "  if type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number' then\n    return (x or 0) + (y or 0) + (z\
    \ or 0) == 0\n  else\n    return false\n  end\nend", "  return math.floor(x) ==\
    \ math.floor(y) or math.floor(y) == math.floor(z)\nend", "    local result = math.abs(x-y)\
    \ + math.abs(x-z) + math.abs(y-z)\n    return result == math.floor((x+y+z)/3)\n\
    end", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x ~= nil and y ~= nil and z ~= nil and (x + y + z == nil or\
    \ x ~= nil and y ~= nil and z ~= nil and x + y + z == z) --(x and y and z are\
    \ both numbers) or (x and y are numbers and z is nil) or (x is nil and y and z)\
    \ or (x and y or z) is nil or x + y + z is z\n  else\n    return false\n  end\n\
    end", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ and x ~= y and x ~= z and x ~= z then\n    return true\n  end\n  return false\n\
    end", "    if x == y or x == z or y == z then\n        return true\n    else\n\
    \        return false\n    end\nend", "  return x ~= nil and y ~= nil and z ~=\
    \ nil and x + y + z == z * z * z\nend", "    -- check input types\n    if type(y)\
    \ ~= 'number' then return false end\n    if type(x) ~= 'number' then return false\
    \ end\n    if type(z) ~= 'number' then return false end", "   if x ~= nil then\n\
    \      if y ~= nil and type(y) ~= 'number' then\n\t return false\n      end\n\
    \      if z ~= nil and type(z) ~= 'number' then\n\t return false\n      end\n\
    \      if x < 0 or y < 0 or z < 0 then\n\t return false\n      end\n      local\
    \ total\n      if y ~= nil then\n\ttotal = x + y\n      else\n\ttotal = x + z\n\
    \      end\n      total = math.floor(total)\n      local remainder, modulo, divisor\n\
    \      if y ~= nil then\n\tremainder = total - y\n\tmodulo = total % y\n\tdivisor\
    \ = y\n      else\n\tremainder = total - z\n\tmodulo = total % z\n\tdivisor =\
    \ z\n      end\n      return remainder == modulo and divisor == 0\n   else\n \
    \     return false\n   end\nend", "  local r, s = math.modf(x+y+z)\n  return r\
    \ == 0 and s == 0 and x==y or r > 0 and s == 0 and x == z\nend\n</cell>\n<text>\n\
    4.2.1 Implement Function to Determine If Two Numbers Are Greater Than Each Other\
    \ - Vectorized Version", "   if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n      return ((x==y and x==z) or (x==z and y==z)\
    \ or (y==z and x==z)) and type(x) == \"integer\"\n   else\n      return false\n\
    \   end\nend", "    if type(x) == \"number\" then\n        return math.floor(x)\
    \ == math.floor(y) and math.floor(x) == math.floor(z)\n    else\n        return\
    \ false\n    end\nend", "  return (x == y or x == z) and is_integer(x) and is_integer(y)\
    \ and is_integer(z)\nend\nreturn any_int", "    -- The sum is less than the maximum\
    \ of x and y.\n    if x + y > z then\n        return false\n    end", "  return\
    \ ((x:sum() == y) or (y:sum() == z)) and\n      ((x:type() == \"number\" and y:type()\
    \ == \"number\") or\n       (x:type() == \"table\" and y:type() == \"table\"))\n\
    end", "    local sum = x + y + z\n    if sum == z then\n        return true\n\
    \    elseif sum == x then\n        return y == z\n    elseif sum == y then\n \
    \       return true\n    else\n        return false\n    end\nend", "  return\
    \ (x ~= nil and y ~= nil and z ~= nil) and (x ~= y and x ~= z) and (x ~= math.floor(x)\
    \ and x ~= math.ceil(x)) and (y ~= math.floor(y) and y ~= math.ceil(y)) and (z\
    \ ~= math.floor(z) and z ~= math.ceil(z)) and math.fmod(x, y, z)\nend", "    if\
    \ x ~= nil and y ~= nil and z ~= nil then\n        return ((type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number') and\n            ((x == y)\
    \ or (y == z) or (x == z)))\n    else\n        return false\n    end\nend", " \
    \ if x > y then\n    return any_int(x-y, y, z)\n  end\n  if y > z then\n    return\
    \ any_int(x, y-z, z)\n  end\n  return true\nend", "\tif type(x) == 'number' and\
    \ type(y) == 'number' and type(z) == 'number' then\n\t\tlocal xints = type(x)\
    \ == 'table' and x[1]:ints or x\n\t\tlocal yints = type(y) == 'table' and y[1]:ints\
    \ or y\n\t\tlocal zints = type(z) == 'table' and z[1]:ints or z\n\t\treturn ((xints\
    \ + yints + zints) == x)\n\telseif type(x) == 'number' and type(y) == 'number'\
    \ then\n\t\treturn (y == (x+y))\n\telseif type(x) == 'number' and type(y) == 'table'\
    \ then\n\t\treturn (#y == #x)\n\telseif type(x) == 'table' and type(y) == 'number'\
    \ then\n\t\treturn (#x == #y)\n\telseif type(x) == 'table' and type(y) == 'table'\
    \ then\n\t\treturn (#x == #y)\n\telse\n\t\treturn false\n\tend\nend", "    if\
    \ x == y and x == \"number\" and y == z then\n        return true\n    else\n\
    \        return false\n    end\nend", "  if type(y) == 'number' and type(z) ==\
    \ 'number' then\n    local a, b, c = x, y, z\n    if a == nil then return false\
    \ end\n    if a == b then return true end\n    if a == c then return true end\n\
    \    if b == c then return true end\n    if a < b and b < c then return true end\n\
    \    if a > b and b > c then return true end\n  end\n  return false\nend", " \
    \ return (x + y == z and type(y) ~= 'number' or type(y) ~= 'table') and\n    \
    \     (x + z == z and type(x) ~= 'number' or type(x) ~= 'table')\nend", "    if\
    \ x < y then\n        return false\n    end\n    if x == y then\n        if x\
    \ < z then\n            return true\n        end\n    end\n    return false\n\
    end", "  if x ~= nil and y ~= nil and z ~= nil then\n    local z = z\n    local\
    \ z = z + z\n    return x == z or y == z or x == y + z or y == x + z\n  else\n\
    \    return false\n  end\nend", "  return x ~= nil and\n         y ~= nil and\n\
    \         z ~= nil and\n         x == y or\n         x == z or\n         y ==\
    \ z\nend", "  return not ( x == y or x == z or y == z ) and type(x) == 'number'\n\
    end", "  if type(y) == 'number' and type(z) == 'number' then\n    return x ==\
    \ y or x == z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  -- Check all arguments.\n  if\
    \ x ~= nil and y ~= nil and z ~= nil then\n    -- Check all numbers for equality.\n\
    \    if x == y and x == z then\n      return true\n    end\n  end\n  -- If any\
    \ one number is nil, return false.\n  return false\nend", "  local sum = x+y+z\n\
    \  if sum == 0 then return false end\n  if type(x) ~= 'number' or type(y) ~= 'number'\
    \ or type(z) ~= 'number' then return false end\n  if type(x) == type(y) and type(x)\
    \ == type(z) and type(x) == type(sum) then return true end\n  return false\nend",
  "  if type(x) == number and type(y) == number and type(z) == number then\n    if\
    \ x == y or x == z or y == z then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    if type(x) == 'number' and type(y) == 'number' and type(z)\
    \ == 'number' then\n        return math.abs(x - y + z) == math.max(x, y)\n   \
    \ else\n        return false\n    end\nend", "\t-- Return true if any of the numbers\
    \ are equal to the sum of the other two, and all numbers are integers.\n\t--\n\
    \t-- Arguments:\n\t--  * x {number} - first number to be checked\n\t--  * y {number}\
    \ - second number to be checked\n\t--  * z {number} - third number to be checked\n\
    \t--\n\t-- Returns:\n\t--  * {boolean} - returns true if the numbers are equal\
    \ to the sum of the other two, and all numbers are integers.\n\t-- Examples\n\t\
    -- >>> any_int(5, 2, 7)\n\t-- true\n\t-- >>> any_int(3, 2, 2)\n\t-- false\n\t\
    -- >>> any_int(3, -2, 1)\n\t-- true\n\t-- >>> any_int(3.6, -2.2, 2)\n\t-- false\n\
    \tif x % x == 0 then\n\t\tif y % y == 0 then\n\t\t\tif z % z == 0 then\n\t\t\t\
    \treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "  local function\
    \ check(x, y, z)\n    local x_int, y_int, z_int = x:floor(), y:floor(), z:floor()\n\
    \    return x_int == y or x_int == z or y_int == z\n  end\n  -- Make sure x, y,\
    \ z are all integers.\n  return check(x, y, z)\nend", "    return x == y or x\
    \ == z or y == z or (x >= 0 and y >= 0 and z >= 0 and x <= y and y <= z and x\
    \ <= z and y <= z)\nend", "  if x==y and x==z and type(x)==\"number\" and type(y)==\"\
    number\" and type(z)==\"number\" then\n    return true\n  else\n    return false\n\
    \  end\nend", "  -- The sum of the two numbers must be exactly equal to x.\n \
    \ if x + y == z then return true end", "    if x and y then\n        if x >= 0\
    \ and x < y and y >= 0 and y < z then\n            return true\n        end\n\
    \    end\n    return false\nend", "  return (not (not (x == y or y == z or x ==\
    \ z)))\nend", "  if type(x) == 'number' and type(y) == 'number' and type(z) ==\
    \ 'number'\n    then\n    if x == y and x == z\n      then return true\n     \
    \ else return false\n    end\n  end\nend", "  if type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number'\n  then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  local xint, yint, zint = x >= 0, y >= 0, z\
    \ >= 0\n  and type(x) == \"number\" and type(y) == \"number\" and type(z) == \"\
    number\"\n  and x or y or z\n  and type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\"\n  and tointeger(x) == x and tointeger(y) == y and\
    \ tointeger(z) == z\n  and (xint and yint and zint) or tointeger(x) == tointeger(y)\
    \ and tointeger(z) == tointeger(x)\nend", "  return ((type(x) == 'number') and\
    \ (type(y) == 'number') and (type(z) == 'number')) and ((x == y) or ((x == z)\
    \ and (y==z)))\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    return x ~= math.floor(x) + math.floor(y) +\
    \ z\n  end\n  return false\nend", "  local int_x = tonumber(x)\n  local int_y\
    \ = tonumber(y)\n  local int_z = tonumber(z)\n  if int_x and int_y and int_z\n\
    \  and int_x < int_y + int_z\n  and int_x <= int_z\n  and int_y <= int_z\n  and\
    \ int_x <= int_y then\n    return true\n  else\n    return false\n  end\nend",
  "    if type(x) == 'number' and type(y) == 'number' and type(z) == 'number' then\n\
    \        return x == y + z\n    end\n    return false\nend", "   if type(x) ==\
    \ nil or type(y) == nil or type(z) == nil then\n      return false\n   elseif\
    \ type(x) == type(y) and type(x) == type(z) and type(y) == type(z) and type(x)\
    \ == number then\n      if x == y or x == z then\n         return true\n     \
    \ else\n         return false\n      end\n   elseif type(x) == number then\n \
    \     return any_int(x, z, z)\n   elseif type(x) == float then\n      if x ==\
    \ z then\n         return true\n      else\n         return false\n      end\n\
    \   elseif type(x) == number then\n      if y == z then\n         return true\n\
    \      else\n         return false\n      end\n   else\n      return false\n \
    \  end\nend", "  if type(y) ~= 'number' or type(z) ~= 'number' then return false\
    \ end\n  if type(y) == 'number' and type(z) == 'number' and type(y) == type(z)\
    \ then\n    if y == z then return true end\n  end\n  return false\nend", "  local\
    \ function is_zero(n) return n == 0 end\n  if x == y and y == z and z == 0 then\
    \ return true end\n  if x == 0 and y == 0 and z == 0 then return true end\n  if\
    \ x == y and y == z and z == x then return true end\n  if x == y and y == x and\
    \ z == y then return true end\n  if x == y and y == 0 and z == z then return true\
    \ end\n  if x == 0 and y == y and z == y then return true end\n  if x == 0 and\
    \ y == z and z == x then return true end\n  if x == 0 and y == y and z == z then\
    \ return true end\n  return false\nend", "  if x == y then\n    if x == z then\n\
    \      return true\n    end\n    return false\n  end\n  return x > y or x < z\n\
    end", "  return ((x == y and z == z) or x > y and y > z) or (x ~= ~y and z ~=\
    \ ~z)\nend", "    local x_int = math.floor(x)\n    local y_int = math.floor(y)\n\
    \    local z_int = math.floor(z)\n    if x_int == y_int and x_int == z_int\n \
    \   then\n        return true\n    elseif x_int > y_int and x_int > z_int\n  \
    \  then\n        return true\n    else\n        return false\n    end\nend", " \
    \   local total, total1, total2, total3, total4\n    total, total1, total2, total3,\
    \ total4 = x, y, z, x + y, x + y + z\n    return total == total1 or total == total2\
    \ or total == total3 or total == total4\nend", "  x = tonumber(x)\n  y = tonumber(y)\n\
    \  z = tonumber(z)\n  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ else\n      return false\n    end\n  else\n    if y ~= nil then\n      return\
    \ false\n    else\n      return false\n    end\n  end\nend", "  return x > y ~=\
    \ z or y > z ~= x\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    return\
    \ math.abs(x - y + z) == math.abs(x) or math.abs(x - y - z) == math.abs(x) or\
    \ math.abs(x + y - z) == math.abs(x) or math.abs(x + z - y) == math.abs(x) or\
    \ math.abs(x - z - y) == math.abs(x) or math.abs(y + z - x) == math.abs(x) or\
    \ math.abs(y - z - x) == math.abs(x) or math.abs(y - z + x) == math.abs(x) or\
    \ math.abs(z - y - x) == math.abs(x) or math.abs(z + y - x) == math.abs(x) or\
    \ math.abs(y + x - z) == math.abs(x)\n  else\n    return false\n  end\nend", " \
    \ -- if x or y or z is nil, just return false\n  -- if x or y is nil, return true\n\
    \  -- if z is nil, return false\n  -- return true if (x or y) and (z or not x\
    \ and z)\n  return not (x or y) or not z\nend", "    if type(z) == 'number' then\n\
    \        return z == x or z == y\n    end\n    local t1 = type(x)\n    local t2\
    \ = type(y)\n    if t1 ~= t2 then\n        return false\n    end\n    local n1\
    \ = x\n    local n2 = y\n    if t1 == 'number' then\n        if t1 ~= 'integer'\
    \ then\n            n1 = tonumber(x)\n        end\n        if t1 ~= 'integer'\
    \ then\n            n2 = tonumber(y)\n        end\n        if n1 ~= n2 then\n\
    \            return false\n        end\n    end\n    local t1 = type(n1)\n   \
    \ local t2 = type(n2)\n    local m = {}\n    if t2 ~= 'table' then\n        return\
    \ false\n    end\n    for k, v in pairs(n2) do\n        m[v] = n2.get(v)\n   \
    \ end\n    for k, v in pairs(n1) do\n        if v ~= m.get(v) then\n         \
    \   return false\n        end\n    end\n    return true\nend", "    if x == y\
    \ then\n        return x == z\n    elseif x < y then\n        return any_int(y,\
    \ z, x)\n    else\n        return any_int(x, y, z - x)\n    end\nend", "  local\
    \ t = x + y + z\n  return ((t == x) or t == y) or t == z\nend", "  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  else\n    return false\n  end\nend", "    return x == y\
    \ or (x ~= nil and y ~= nil and z == nil) or (x ~= nil and y ~= nil and z ~= nil\
    \ and x == y and tonumber(x) == tonumber(y) and tonumber(x) == tonumber(z))\n\
    end", "  if type(y) ~= 'number' or type(z) ~= 'number' or y > z or x <= 0 then\
    \ return false end\n  if y == 0 then return z <= 0 or x <= 0 or y == z end\n \
    \ if y == z and x == 0 then return true end\n  if y == z or y == x then\n    for\
    \ i = z, 1, -1 do\n      if y ~= i then\n        return false\n      end\n   \
    \ end\n    return true\n  end\nend", "  if type(x) == 'number' then\n    if type(y)\
    \ == 'number' then\n      if type(z) == 'number' then\n        return (x + y ==\
    \ z) and (type(x + y) == 'number')\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  elseif type(y) == 'number' then\n  \
    \  if type(z) == 'number' then\n      return (y + z == x) and (type(y + z) ==\
    \ 'number')\n    else\n      return false\n    end\n  elseif type(z) == 'number'\
    \ then\n    return (x == z) and (type(x) == 'number')\n  else\n    return false\n\
    \  end\nend", "  return (x == y or x == z) and x % 1 == 0 and x % 1 == 0 and x\
    \ % 1 == 0\nend", "  if x ~= nil and y ~= nil then\n    if x == 4 * y and x ==\
    \ 4 * z then\n      return true\n    end\n    if x ~= y and x ~= z then\n    \
    \  return false\n    end\n  end\n  if x ~= nil then\n    return true\n  end\n\
    \  if y ~= nil then\n    return true\n  end\n  if z ~= nil then\n    return true\n\
    \  end\n  return false\nend", "  if x ~= nil and y ~= nil then\n    if type(x)\
    \ == 'number' and type(y) == 'number' then\n      -- We don't have to worry about\
    \ NaN and infinities, as long as we don't\n      -- compare a number to a number.\n\
    \      return ((x ~= 0 and x ~= nil and y ~= nil and y ~= 0) or\n            \
    \   (x ~= nil and x ~= 0 and y ~= nil and y ~= 0))\n             and ((x ~= nil\
    \ and x ~= 0 and y ~= nil and y ~= 0) or\n                  (x ~= nil and x ~=\
    \ nil and y ~= 0 and y ~= nil))\n             and ((x ~= nil and x ~= nil and\
    \ y ~= nil and y ~= nil) or\n                  (x ~= nil and x ~= 0 and y ~= nil\
    \ and y ~= nil) or\n                  (x ~= 0 and x ~= nil and y ~= nil and y\
    \ ~= nil))\n             and ((x ~= nil and x ~= nil and y ~= 0 and y ~= nil)\
    \ or\n                  (x ~= nil and x ~= 0 and y ~= nil and y ~= 0) or\n   \
    \               (x ~= 0 and x ~= nil and y ~= nil and y ~= nil))\n           \
    \  and ((x ~= nil and x ~= nil and y ~= nil and y ~= 0) or\n                 \
    \ (x ~= nil and x ~= 0 and y ~= nil and y ~= 0) or\n                  (x ~= 0\
    \ and x ~= nil and y ~= nil and y ~= nil))\n             and ((x ~= nil and x\
    \ ~= nil and y ~= nil and y ~= nil) or\n                  (x ~= nil and x ~= 0\
    \ and y ~= nil and y ~= nil) or\n                  (x ~= nil and x ~= nil and\
    \ y ~= 0 and y ~= nil))\n             and ((x ~= nil and x ~= nil and y ~= nil\
    \ and y ~= nil) or\n                  (x ~= nil and x ~= 0 and y ~= nil and y\
    \ ~= nil) or\n                  (x ~= nil and x ~= nil and y ~= 0 and y ~= nil))\n\
    \             and ((x ~= nil and x ~= nil and y ~= nil and y ~= 0) or\n      \
    \            (x ~= nil and x ", "  if x == y then return true end\n  if x > y\
    \ and y == z then return true end\n  return false\nend", "    if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n        return true or\
    \ x > y and x ~= z\n    else\n        return false\n    end\nend", "  if x ==\
    \ y and y == z then\n    return true\n  end\n  if x == 2 or y == 2 or z == 2 then\n\
    \    return true\n  end\n  if x ~= nil and x ~= 0 and y ~= nil and y ~= 0 and\
    \ z ~= nil and z ~= 0 then\n    if x == y + z then\n      return true\n    end\n\
    \    if x == z + y then\n      return true\n    end\n  end\n  return false\nend",
  "  if x == y then\n    if x == z then\n      return true\n    end\n    return false\n\
    \  end\n  if x ~= z then\n    return false\n  end\n  -- If x is not an integer,\
    \ then return false.\n  return not (x:type() == \"torch.IntTensor\")\nend", " \
    \ return type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ and x + y == z\nend", "  if type(x) == 'number' and type(y) == 'number' and\
    \ type(z) == 'number' then\n    return x >= 0 and y >= 0 and z >= 0 and x + y\
    \ + z == x\n  end\n  return nil\nend", "    if type(x) ~= 'number' or type(y)\
    \ ~= 'number' or type(z) ~= 'number' then\n        error('All arguments must be\
    \ numbers')\n    end\n    if x == nil then\n        return y == nil and z == nil\n\
    \    elseif y == nil then\n        return z == nil\n    elseif z == nil then\n\
    \        return true\n    end", "  if type(y) ~= 'number' or type(z) ~= 'number'\
    \ then\n    return false\n  elseif y <= 0 or z <= 0 then\n    return false\n \
    \ else\n    return (x == z) or (x + y == z)\n  end\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x==y+z\n  elseif\
    \ type(x) == 'number' and type(y) == 'number' then\n    return x==y\n  elseif\
    \ type(x) == 'number' and type(z) == 'number' then\n    return x==z\n  else\n\
    \    return false\n  end\nend", "  if x < y then return x % z == y % z end\n \
    \ return false\nend", "  return tointeger(x) or tointeger(y) or tointeger(z) or\
    \ tointeger(x+y+z)\nend", "  return x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)\nend", "    if x == y then\n        if x == z then\n\
    \            return true\n        end\n    else\n        return false\n    end\n\
    end", "   if type(x) == \"number\" then\n      x = tonumber(x)\n      y = tonumber(y)\n\
    \      z = tonumber(z)\n   end\n   if type(x) == \"table\" and #x == 0 and type(y)\
    \ == \"number\" then\n      y = tonumber(y)\n   end\n   if type(x) == \"table\"\
    \ and #x > 0 and type(y) == \"table\" and #y == 0 then\n      z = tonumber(z)\n\
    \   end\n   return ((x ~= 0) and (y ~= 0) and (z ~= 0) and (x <= z) and (y <=\
    \ z) and (x <= y) and (y <= x)) or ((x ~= 0) and (y ~= 0) and (z ~= 0))\nend",
  "  return type(y) ~= 'table' and type(z) ~= 'table' and x==y or x==z and y==z\n\
    end", "  return x >= 0 and y >= 0 and z >= 0 and\n         x + y + z == y and\n\
    \         x ~= math.floor(x) or y ~= math.floor(y) or z ~= math.floor(z)\nend\n\
    </code>\n<|/ a tags=math,lua dscore=3 |>\n<| a |>\nIf you really need a function\
    \ that can compare any number of values, you can use an array\n<code>", "  return\
    \ (x > y and y > z) and (x ~= math.floor(x + 0.5) or y ~= math.floor(y + 0.5)\
    \ or z ~= math.floor(z + 0.5))\nend", "    local sumX, sumY, sumZ = x + y, y +\
    \ z, z + x\n    return sumX == sumY and sumY == sumZ and type(sumZ) == \"number\"\
    \nend", "   if type(x) == bool then\n      if not x then\n         return false\n\
    \      elseif type(x) == bool then\n         return z\n      elseif type(x) ==\
    \ float then\n         return x >= y and math.floor(x) == math.floor(x + y)\n\
    \      elseif type(x) == double then\n         return x >= y and math.floor(x)\
    \ == math.floor(x + y)\n      elseif type(x) == integer then\n         return\
    \ x >= y and math.floor(x) == math.floor(x + y)\n      elseif type(x) == string\
    \ then\n         if x == \"\" then\n            return z == \"\"\n         elseif\
    \ z == \"\" then\n            return x == \"\"\n         else\n            return\
    \ x:find(z) == 0 or x:find(z) == -1\n         end\n      end\n   else\n      return\
    \ x >= y and math.floor(x) == math.floor(x + y)\n   end\nend", "  local ret\n\
    \  local xint, yint, zint = x..0, y..0, z..0\n  local xint, yint, zint = xint,\
    \ yint, zint\n  if xint <= yint then\n    if yint <= zint then\n      ret = xint\
    \ + yint + zint == x\n    else\n      ret = xint + yint + zint <= x\n    end\n\
    \  else\n    ret = xint + yint + zint <= x\n  end\n  return ret\nend", "  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return math.abs(x - y + z) == math.max(math.abs(x), math.abs(y), math.abs(z))\n\
    \  else\n    return false\n  end\nend", "  return ((x:isIntegral() and y:isIntegral()\
    \ and z:isIntegral()) or\n          (x:isReal() and y:isReal() and z:isReal())\
    \ or\n          (x:isIntegral() and y:isReal() and z:isIntegral()) or\n      \
    \    (x:isReal() and y:isIntegral() and z:isReal()) or\n          (x:isIntegral()\
    \ and y:isIntegral() and z:isIntegral())) and\n    not (x == y and x == z and\
    \ y == z) and\n    not (x == y or y == z or z == x)\nend\n_G.any_int = any_int",
  "  if x ~= nil then\n    if y ~= nil and z ~= nil then\n      return x ~= y + z\n\
    \    elseif y ~= nil then\n      return x ~= y\n    elseif z ~= nil then\n   \
    \   return x ~= z\n    end\n  end\n  return false\nend", "    if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number'\n    then\n        return x\
    \ >= y and x % z == 0 or y >= z and y % z == 0\n    elseif type(x) == 'table'\n\
    \    then\n        return x:isInt()\n    else\n        return false\n    end\n\
    end", "  return not (not x or y and z) and (type(x) == 'number' and type(y) ==\
    \ 'number' and type(z) == 'number' and x >= y and x + y == z)\nend", "  x = tointeger(x)\n\
    \  y = tointeger(y)\n  z = tointeger(z)\n  if x < 0 and z < 0 then\n    return\
    \ false\n  elseif x < 0 and y > 0 then\n    return true\n  elseif x < 0 and z\
    \ > 0 then\n    return true\n  elseif x > 0 and y > 0 then\n    return true\n\
    \  elseif x > 0 and z < 0 then\n    return true\n  elseif x == y or x == z or\
    \ y == z then\n    return true\n  else\n    return false\n  end\nend", "    return\
    \ x == y and type(z) == 'number' and\n           x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)\nend", "  if type(z) == 'table' then\n    local result\
    \ = {}\n    for k, v in pairs(z) do\n      if type(v) == 'table' then\n      \
    \  for i2, v2 in pairs(v) do\n          table.insert(result, any_int(x, y, v2))\n\
    \        end\n      elseif v == x or v == y then\n        return true\n      end\n\
    \    end\n    return false\n  elseif x == y or x == z then\n    return true\n\
    \  end\nend", "   if type(x) == \"number\" then\n      if type(y) == \"number\"\
    \ then\n         if type(z) == \"number\" then\n            return x ~= y + z\n\
    \         end\n      else\n         return false\n      end\n   else\n      return\
    \ false\n   end\nend", "  if x ~= tonumber(x) or y ~= tonumber(y) or z ~= tonumber(z)\
    \ then\n    return false\n  end\n  return true\nend", "  return x >= y and x >=\
    \ z and x <= z\nend", "  assert(type(y) == 'number', 'The second argument must\
    \ be a number')\n  assert(type(x) == 'number', 'The second argument must be a\
    \ number')\n  assert(type(z) == 'number', 'The third argument must be a number')\n\
    \  return (x == y or x == z or y == z)\nend", "   if x == y and y == z then return\
    \ true end\n   if x == y then\n      if not is_number(z) then return false end\n\
    \      if is_integer(z) and z <= x and z <= y then return true end\n   end\n \
    \  return false\nend", "    -- first check that all the numbers are integers,\
    \ if not, return false\n    local function is_int(n)\n        return math.floor(n)\
    \ == n\n    end", "  return (type(z) == 'number') and\n  (type(y) == 'number')\
    \ and\n  (type(x) == 'number') and\n  ((x == y and x + y == z) or x + y ~= z)\
    \ or\n  ((not type(x)) and ((not y) or z ~= 'number')) or\n  ((not type(y)) and\
    \ ((not x) or z ~= 'number')) or\n  ((not type(x)) and ((not y)) and ((not z))\
    \ or\n  ((not type(x)) and ((not y)) and ((not z)) or\n  ((not type(x)) and (not\
    \ y) and ((not z)) or\n  ((not type(x)) and (not y) and (not z)) or\n  ((not type(x))\
    \ and (not y) and z ~= nil) or\n  ((not type(x)) and (not y) and z ~= 'number')\
    \ or\n  ((not type(x)) and (not y) and z ~= nil)\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x == y + z\n\
    \  elseif type(x) == 'number' and type(y) == 'number' then\n    return x == y\n\
    \  elseif type(x) == 'number' and type(y) == 'table' then\n    for _, v in pairs(y)\
    \ do\n      if any_int(x, y, z) then return true end\n    end\n    return false\n\
    \  elseif type(x) == 'table' and type(y) == 'number' then\n    for _, v in pairs(x)\
    \ do\n      if any_int(y, z, v) then return true end\n    end\n    return false\n\
    \  else\n    return false\n  end\nend", "  if type(y) == 'number' and type(z)\
    \ == 'number' then\n    if x < y and y < z then\n      return true\n    else\n\
    \      return false\n    end\n  end\nend", "  if x ~= nil and y ~= nil and z ~=\
    \ nil then\n    return x == y + z\n  else\n    return false\n  end\nend", "  x\
    \ = tointeger(x)\n  y = tointeger(y)\n  z = tointeger(z)\n  if x == nil or y ==\
    \ nil or z == nil then\n    return false\n  elseif x ~= nil then\n    return x\
    \ == z or x == y\n  elseif y ~= nil then\n    return y == z or y == x\n  elseif\
    \ z ~= nil then\n    return z == x or z == y\n  else\n    return true\n  end\n\
    end", "    local a, b, c = x, y, z\n    if a ~= b and a ~= c and b ~= c then\n\
    \        return true\n    end\n    if type(a) ~= 'number' or type(b) ~= 'number'\
    \ or type(c) ~= 'number' then\n        return false\n    end\n    if a == b or\
    \ a == c or b == c then\n        return true\n    end\n    return false\nend",
  "  if type(x) == \"number\" then\n    if type(y) == \"number\" and type(z) == \"\
    number\" then\n      return x==y+z\n    elseif type(y) == \"number\" then\n  \
    \    return x==y and z==0\n    elseif type(z) == \"number\" then\n      return\
    \ x==0 or z==0\n    else\n      return false\n    end\n  else\n    if type(y)\
    \ == \"number\" then\n      return x==y and z==0\n    elseif type(z) == \"number\"\
    \ then\n      return x==0 or z==0\n    else\n      return false\n    end\n  end\n\
    end", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ then\n    if x == y and z == 1 then\n      return true\n    elseif x == y and\
    \ z == -1 then\n      return true\n    elseif x == z and y == 1 then\n      return\
    \ true\n    elseif x == z and y == -1 then\n      return true\n    elseif x ==\
    \ y and z == -2 then\n      return true\n    elseif x == y and z == 2 then\n \
    \     return true\n    elseif x == y and z == -3 then\n      return true\n   \
    \ elseif x == z and y == -2 then\n      return true\n    elseif x == z and y ==\
    \ 2 then\n      return true\n    elseif x == z and y == 3 then\n      return true\n\
    \    elseif x == -y and z == -2 then\n      return true\n    elseif x == -y and\
    \ z == 2 then\n      return true\n    elseif x == -y and z == 3 then\n      return\
    \ true\n    elseif x == y and z == -3 then\n      return true\n    elseif x ==\
    \ y and z == -2 then\n      return true\n    elseif x == z and y == -3 then\n\
    \      return true\n    elseif x == z and y == -2 then\n      return true\n  \
    \  elseif x == z and y == 2 then\n      return true\n    elseif x == z and y ==\
    \ 3 then\n      return true\n    elseif x == -y and z == 3 then\n      return\
    \ true\n    elseif x == -y and z == -2 then\n      return true\n    elseif x ==\
    \ y and z == 3 then\n      return true\n    elseif x == y and z == -2 then\n \
    \     return true\n    elseif x == z and y == 3 then\n      return true\n    elseif\
    \ x == z and y == -2 then\n      return true\n    elseif x == z and y == 2 then\n\
    \      return true\n    elseif x == z and y == 1 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  return math.mod(x + y + z, 10) == 0 and\
    \ math.mod(x + y, 10) == 0 and math.mod(z, 10) == 0 and math.mod(y, 10) == 0 and\
    \ math.mod(x, 10) == 0\nend", "  return tointeger(x) == x or tointeger(y) == y\
    \ or tointeger(z) == z or tointeger(x) == tointeger(y) or tointeger(x) == tointeger(z)\
    \ or tointeger(y) == tointeger(z)\nend", "    if x > y and x > z then\n      \
    \  -- If x and y are both integers, return true if their sum is equal.\n     \
    \   return x == y + z\n    end\n    if x < y and x < z then\n        -- If x and\
    \ y are both integers, return true if their sum is equal.\n        return y ==\
    \ z + x\n    end\n    -- If neither are integers, return false.\n    return false\n\
    end", "    return type(z) == 'number' and type(y) == 'number' and type(x) == 'number'\
    \ and x > y and x < z\nend", "    -- This function should only accept integers.\n\
    \    assert(type(x) == \"number\" and type(y) == \"number\" and type(z) == \"\
    number\", \"'any_int' expects 3 integers as parameters\")", "  if type(z) == 'number'\
    \ then z = tointeger(z) end\n  if type(y) == 'number' then y = tointeger(y) end\n\
    \  if type(x) == 'number' then x = tointeger(x) end\n  if x < y then\n    return\
    \ (z == 0 and x == y) or (z > 0 and x > y and x < z) or (z < 0 and x < y and x\
    \ > z)\n  else\n    return false\n  end\nend", "   if type(x) == 'number' then\
    \ x = int(x) end\n   if type(y) == 'number' then y = int(y) end\n   if type(z)\
    \ == 'number' then z = z\n   elseif type(x) == 'number' then z = y\n   else z\
    \ = x end\n   return (x == z or y == z or x == y and z == y)\nend", "  -- Base\
    \ case.\n  if x==z and y==z then return true end\n  -- Only one element of x...\n\
    \  if type(x)~=\"number\" and type(x)~=\"boolean\" then return false end\n  --\
    \ Both x and y are numbers. Return true if x is equal to the sum of y and z.\n\
    \  return x == y+z\nend", "   -- Check x is an integer\n   if x ~= x then\n  \
    \    return false\n   end\n   -- Check y is an integer\n   if y ~= y then\n  \
    \    return false\n   end\n   -- Check z is an integer\n   if z ~= z then\n  \
    \    return false\n   end\n   -- Return true if one of x, y, z are equal to the\
    \ sum of the other three.\n   -- If no sum, return false.\n   return ((x + y +\
    \ z) == (x + y + z + x + y + z + x + y + z)) or (\n      (x == x) and (y== y)\
    \ and (z == z)) or (\n      (x == x + y) and (y== y + z) and (z == z + x)) or\
    \ (\n      (x == y + z) and (y== x + z) and (z == x + y))\nend", "    local a,\
    \ b, c = x, y or 0, z or 0\n    if type(a) ~= 'number' or type(b) ~= 'number'\
    \ or type(c) ~= 'number' or b > a or c > a or c > b then\n        return false\n\
    \    end\n    return a == b + c and type(b) == 'number'\nend", "  return (x ~=\
    \ nil and y ~= nil and z ~= nil) and #x + #y + #z == math.max({x, y, z}) and x\
    \ > 0 and y > 0 and z > 0 and x < y and y < z and x < z and y < x\nend", "  return\
    \ x >= 0 and y >= 0 and z >= 0 and x + y + z == z\nend", "  -- Write your code\
    \ here\n  if type(y) == \"number\" then\n    if x ~= y and x ~= z and y ~= z then\n\
    \      return true\n    end\n  elseif type(y) == \"table\" then\n    local sum\
    \ = 0\n    for _, val in pairs(y) do\n      sum = sum + val\n    end\n    if x\
    \ == sum and type(z) == \"number\" and z % 1 ~= 0 then\n      return true\n  \
    \  end\n  end\n  return false\nend", "    if x ~= nil and y ~= nil then\n    \
    \    return ((type(x)==\"number\") and (type(y)==\"number\")) and (type(z)==\"\
    number\") and (x >= 0 and y >= 0 and z >= 0 and x < y and y < z and x < z) \n\
    \    end\n    return false\nend\nreturn any_int\nend", "  local is_integer = function\
    \ (num)\n    return type(num) == 'number' and math.floor(num) == num\n  end",
  "  -- The numbers must be integers.\n  assert((type(y) == \"number\" and type(z)\
    \ == \"number\") or (type(y) == \"table\" and type(z) == \"table\"))\n  -- Check\
    \ that x isn't a number.\n  assert(type(x) == \"number\" or type(x) == \"string\"\
    )\n  -- Check that y isn't a number.\n  assert(type(y) == \"number\" or type(y)\
    \ == \"table\")\n  -- Check that z isn't a number.\n  assert(type(z) == \"number\"\
    \ or type(z) == \"table\")\n  -- If the numbers are equal, return true.\n  if\
    \ x == y then return true end\n  -- If the numbers are the same, check their sum.\n\
    \  if x == z then return (y == z) end\n  -- If they are different, return false.\n\
    \  return false\nend", "    if type(y) == 'number' and type(z) == 'number' and\
    \ type(z) ~= 'number' then\n        return x == z or y == z\n    end\n    return\
    \ false\nend", "  if x and y and z and x+y+z == z*z then return true else return\
    \ false end\nend", "  if type(z) ~= 'number' then return false end\n  if x ~=\
    \ z and y ~= z then return false end\n  return true\nend", "  return (x == y and\
    \ z) or not ((x ~= tostring(x) or y ~= tostring(y) or z ~= tostring(z)) or (not\
    \ x and not y and not z))\nend", "  local total = x\n  total = total + y\n  total\
    \ = total + z\n  if total == x or total == y or total == z\n  then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    -- If one of them is 0, return\
    \ false\n    if x == 0 then\n        return z == 0\n    elseif y == 0 then\n \
    \       return z == 0\n    else\n        return z == x + y\n    end\nend", " \
    \ -- Convert x, y and z to integers if they are not:\n  x = tonumber(x)\n  y =\
    \ tonumber(y)\n  z = tonumber(z)\n  -- Return true if all three are integers:\n\
    \  return (type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ and\n          x ~= 0 and y ~= 0 and z ~= 0 and\n          x == y + z and y\
    \ == z + x)\nend", "  x = tonumber(x)\n  y = tonumber(y)\n  z = tonumber(z)\n\
    \  if x ~= nil and y ~= nil and z ~= nil then\n    return ((x + (y == nil and\
    \ z == nil)) ~= nil)\n  end\n  return nil\nend", "  if x == y then\n    return\
    \ z == x and is_integer(z) and z > 0\n  elseif y == z then\n    return x == y\
    \ and is_integer(x) and x > 0\n  else\n    return false\n  end\nend", "  if x\
    \ == y then\n    return z == 0 or z == x\n  else\n    return z == 0 or z == x\
    \ or z == y\n  end\nend", "  return ((type(y) == 'number' and type(z) == 'number')\
    \ and y <= z and x ~= 0 and x ~= z and x ~= y)\nend", "  local xint = tonumber(x)\n\
    \  local yint = tonumber(y)\n  local zint = tonumber(z)", "  local a, b, c = x,\
    \ y, z\n  local d = (b+c) -- No need to check for a NaN\n  return not b or not\
    \ c or d == a or (b and c and d == (a+c))\nend", "    local function compare(x,\
    \ y)\n        if x == y then return 0 end\n        if x > y then return 1 end\n\
    \        return -1\n    end\n    return x == z or y == z or compare(x, y) == 0\n\
    end\nreturn any_int", "  if x ~= nil and y ~= nil and z ~= nil then\n    if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \   -- if x is int and y is int and z is int then\n      if x == y and y == z\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ end\n  end\n  return false\nend", "  return x == y + z and type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number'\nend", "  local sum = x+y+z\n\
    \  if sum == x or sum == y or sum == z then\n    return true\n  else\n    return\
    \ false\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
