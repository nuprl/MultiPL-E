name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local seen = {}\n    local output = {}\n    for _, item in ipairs(l)\
    \ do\n        local value = item\n        seen[value] = true\n        output[value]\
    \ = true\n    end\n    return setmetatable(output, {})\nend", "  local seen =\
    \ setmetatable({}, {__mode = 'v'})\n  for i = 1, #l do\n    local v = l[i]\n \
    \   if seen[v] == nil then\n      seen[v] = true\n      table.insert(l, v)\n \
    \   end\n  end\n  return l\nend", "    if type(l) == \"table\" then\n        local\
    \ s = {}\n        for _,v in pairs(l) do\n            s[v] = true\n        end\n\
    \        table.sort(s, function(a, b) return a < b end)\n        local u = {}\n\
    \        for _,v in pairs(s) do\n            u[v] = true\n        end\n      \
    \  return table.keys(u)\n    end\n    return l\nend", "  if l==nil then return\
    \ nil end\n  if #l == 0 then return l end\n  local i = 1\n  local k\n  local last_key\
    \ = nil\n  repeat\n    k = l[i]\n    if last_key ~= nil then\n      if last_key\
    \ ~= k then\n        local new_last_key = last_key\n        last_key = k\n   \
    \     table.insert(l, new_last_key)\n      end\n    else\n      last_key = k\n\
    \    end\n    i = i + 1\n  until i > #l\n  return l\nend", "  if l[1] == nil then\n\
    \    return {}\n  end\n  local n = {}\n  local i = 1\n  while i <= #l do\n   \
    \ if l[i] ~= l[1] then\n      n[i] = l[i]\n      i = i + 1\n    else\n      i\
    \ = i + 1\n    end\n  end\n  n[#n + 1] = l[1]\n  return n\nend", "  local n =\
    \ {}\n  for _, v in pairs(l) do n[v] = true end\n  local u = {}\n  for _, v in\
    \ pairs(n) do u[v] = v end\n  return u\nend", "   local t = {}\n   for _,v in\
    \ ipairs(l) do t[v] = true end\n   return t\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do\n    u[v] = true\n  end\n  return setmetatable(l, { __index\
    \ = function(t, k)\n    if u[k] then\n      return k\n    end\n  end})\nend",
  "  local hash = {}\n  for _, el in pairs(l) do\n    hash[el] = true\n  end\n  local\
    \ result\n  if getmetatable(l).__index then\n    result = {}\n    for v in pairs(l)\
    \ do\n      if hash[v] then\n        result[#result + 1] = v\n      end\n    end\n\
    \  else\n    result = setmetatable({}, getmetatable(l))\n    for v in pairs(l)\
    \ do\n      result[#result + 1] = v\n    end\n  end\n  return result\nend", " \
    \ local set = {}\n  for k, v in pairs(l) do\n    table.insert(set, v)\n  end\n\
    \  return set\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n\
    \    if seen[tostring(l[i])] then break end\n    seen[tostring(l[i])] = true\n\
    \    out[#out + 1] = l[i]\n  end\n  return out\nend", "  if #l == 0 then\n   \
    \ return {}\n  end\n  local set = {}\n  for _, v in ipairs(l) do\n    set[v] =\
    \ true\n  end\n  local i = 1\n  local res = {}\n  while i <= #l do\n    local\
    \ v = l[i]\n    if set[v] then\n      res[#res + 1] = v\n      i = i + 1\n   \
    \ else\n      i = i + 1\n    end\n  end\n  return res\nend", "  if l==nil then\n\
    \    return nil\n  end\n  local u = {}\n  local i = 1\n  while i <= #l do\n  \
    \  if l[i] ~= i then\n      u[i] = l[i]\n      i = i + 1\n    end\n    i = i +\
    \ 1\n  end\n  return u\nend", "  if type(l) ~= 'table' then\n    error('Not a\
    \ table: ' .. tostring(l))\n  end\n  local seen = {}\n  for i = 1, #l do\n   \
    \ seen[tostring(l[i])] = true\n  end\n  local unique = {}\n  for i = 1, #seen\
    \ do\n    if not seen[i] then\n      table.insert(unique, tostring(l[i]))\n  \
    \  end\n  end\n  return unique\nend", "    local n\n    local i = 1\n    local\
    \ a = {}\n    while i <= #l do\n        if a[i] then\n            if n == nil\
    \ then\n                n = i\n            end\n        else\n            n =\
    \ 1\n        end\n        table.insert(a, l[i])\n        i = i + 1\n    end\n\
    \    if n == nil then\n        n = 1\n    end\n    return a\nend", "  local u\
    \ = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v =\
    \ nil\n  while i <= #u do\n    v = i -- For lua 5.2\n    i = i + 1\n    for k,\
    \ v in pairs(u) do\n      if v == i then table.remove(l, k) end\n    end\n  end\n\
    \  return l\nend", "  local rv = {}\n  local mt = getmetatable(l)\n  local mt2\
    \ = mt and getmetatable(l) or nil\n  if mt2 then\n    mt = mt.__index\n  end\n\
    \  local mt3 = mt and getmetatable(l) or nil\n  if mt3 then\n    mt = mt.__newindex\n\
    \  end\n  local metatable = type(l)\n  if mt2 then\n    metatable = mt.__index\n\
    \  end\n  while true do\n    local k,v = next(l, nil, true)\n    local v2 = metatable\
    \ and metatable.__index and metatable.__index(l) or nil\n    if v2 then\n    \
    \  local v3 = v2.__index\n      local nk,nv = next(v, nil, true)\n      if nv\
    \ ~= nil then\n        if v2.__index ~= mt3 then\n          for k2,v2 in pairs(v2)\
    \ do\n            if k2 ~= '__' and k2 ~= nk then\n              rv[k2] = v2\n\
    \            end\n          end\n        end\n      end\n      local v3 = v2.__newindex\n\
    \      local nk,nv = next(v, nil, true)\n      if nv ~= nil then\n        if v3.__index\
    \ ~= mt3 then\n          for k2,v3 in pairs(v3) do\n            if k2 ~= '__'\
    \ and k2 ~= nk then\n              rv[k2] = v3\n            end\n          end\n\
    \        end\n      end\n      continue\n    end\n    if type(k) == 'number' then\n\
    \      rv = rv.{k}\n    elseif type(k) == 'string' then\n      rv = rv.{k}\n \
    \   else\n      rv = rv\n    end\n  end\n  return rv\nend", "  local seen = {}\n\
    \  local out = {}\n  for i, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend\n\
    </code>\n<|/ a tags=lua,lua-table,functional-programming dscore=3 |>\n<| c |>\n\
    This is good, but I like Josh's answer a lot. +1 for teaching me a new way to\
    \ do it\n<|/ c |>\n<| c |>\nI don't think this works when the table has repeating\
    \ values. It will throw a table index out of range error.\n<|/ c |>\n<| a tags=lua,lua-table,functional-programming\
    \ dscore=3 |>\nYou could also use a Lua-based library such as tset:\n<code>",
  "    local seen = {}\n    for i=1,#l do\n        if seen[tostring(l[i])] then continue\
    \ end\n        seen[tostring(l[i])] = true\n    end\n    return setmetatable(l,{__index=function\
    \ (t,i) rawget(t,i) end})\nend", "  if type(l) ~= 'table' then\n    error('not\
    \ an array')\n  end\n  local t = {}\n  local i = 1\n  local j = 1\n  local m =\
    \ #l\n  for k in pairs(l) do\n    if t[#t+1] == k then\n      j = j + 1\n    else\n\
    \      t[#t+1] = k\n      i = i + 1\n    end\n  end\n  local result = {}\n  for\
    \ i=1,i do\n    result[i] = l[i]\n  end\n  for i=1,j do\n    table.insert(result,\
    \ t[i])\n  end\n  return result\nend", "  local t\n  if l == nil then return nil\
    \ end\n  local i = 1\n  local j = 1\n  local k = 1\n  local done = false\n  while\
    \ i < #l do\n    t = l[i]\n    j = i\n    while j < #l and l [j] == t do\n   \
    \   k = j\n      j = j + 1\n    end\n    if j - i > 1 then\n      l[k] = l[j]\n\
    \      k = k + 1\n    end\n    i = j\n  end\n  if j > 1 then\n    table.insert(l,\
    \ l[k])\n  end\n  if k > 1 then\n    table.insert(l, l[k])\n  end\n  return t\n\
    end", "  local tbl = {}\n  for i = 1, #l do\n    tbl[tostring(l[i])] = true\n\
    \  end\n  return setmetatable(tbl, getmetatable())\nend", "  local u = {}\n  for\
    \ i = 1, #l do\n    if not u.hasOwnProperty(l[i]) then u[l[i]] = true end\n  end\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return u\nend", "  if l[1] == nil then return nil end\n  local t = {}\n  local\
    \ done = false\n  for _, v in pairs(l) do\n    if t[v] == nil then\n      t[v]\
    \ = true\n      done = false\n    else\n      done = true\n    end\n  end\n  if\
    \ not done then return t end\n  local l2 = {}\n  for k, v in pairs(t) do\n   \
    \ l2[#l2 + 1] = k\n  end\n  return l2\nend", "   local table = {}\n   for _, v\
    \ in pairs(l) do\n      table.insert(v, true)\n   end\n   return table.sort(function(a,b)\
    \ return a<b end)\nend", "  local seen = {}\n  local ret = {}\n  for i = 1, #l\
    \ do\n    if seen[l[i]] then\n      table.insert(ret, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return ret\nend", "  local i = 1\n  local s = {}\n\
    \  while i <= #l do\n    s[#s + 1] = l[i]\n    i = i + 1\n  end\n  s[#s + 1] =\
    \ function (n) return n end\n  return s\nend", "    local t = {}\n    local i\
    \ = 1\n    for i = 1, #l do\n        if l[i] ~= t[#t] then\n            t[#t]\
    \ = l[i]\n        end\n    end\n    return t\nend", "  local c = {}\n  local i\
    \ = 1\n  for _, x in pairs(l) do\n    if x[i] == nil then\n      c[i] = x\n  \
    \    i = i + 1\n    end\n  end\n  return c\nend", "  if l[1] == nil then return\
    \ nil\n  elseif l[2] == nil then return l[1]\n  else return l[1] < l[2] and l[1]\
    \ or l[2] end\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n\
    \  end\n  return s\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local rv = {}\n  for k in pairs(u) do rv[k] = true end\n  return rv\n\
    end", "  if l==nil then return nil end\n  if #l==1 then return l end\n  local\
    \ sorted=sort(l)\n  local uniques={}\n  local i=1\n  local j=1\n  while i<=#sorted\
    \ do\n    if uniques[i]~=sorted[j] then\n      table.insert(uniques,sorted[j])\n\
    \      i=i+1\n      j=j+1\n    else\n      i=i+1\n    end\n  end\n  return uniques\n\
    end", "  local tbl = {}\n  for _, n in ipairs(l) do tbl[n] = true end\n  return\
    \ tbl\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local\
    \ r\n  for _, v in pairs(u) do r = r .. v end\n  return r\nend", "  local u =\
    \ {}\n  local i = 1\n  while i <= #l do\n    if l[i] ~= i then\n      u[i - 1]\
    \ = l[i]\n      i = i + 1\n    end\n  end\n  return u\nend", "  local u = {}\n\
    \  for i = 1, #l do\n    if l[i] ~= l[i - 1] and not u[l[i]] then\n      table.insert(u,\
    \ l[i])\n    end\n  end\n  return u\nend", "  if l==nil then return end\n  local\
    \ lt = {}\n  for _, v in ipairs(l) do\n    table.insert(lt, v)\n  end\n  table.sort(lt)\n\
    \  local i = 0\n  local j = 1\n  local k = 1\n  while i < j do\n    if l[i] ==\
    \ lt[k] then\n      i = i + 1\n      k = k + 1\n    else\n      table.remove(lt,k)\n\
    \      j = j + 1\n    end\n  end\n  return lt\nend", "  if type(l) == 'table'\
    \ then\n    local new_ = {}\n    for i = 1, #l do new_[tostring(l[i])] = true\
    \ end\n    return new_\n  end\n  return l\nend", "  local seen = {}\n  local tbl\
    \ = {}\n  for _, v in ipairs(l) do tbl[v] = true end\n  for _ in ipairs(tbl) do\
    \ return end -- faster than `pairs`\n  local i = 1\n  while i <= #l do\n    local\
    \ v, v = l[i], l[i]\n    if v in seen then tinsert(tbl, v) -- avoid duplicates\n\
    \    elseif i > 1 then\n      for _, v2, in pairs(tbl) do if v == v2 then tinsert(tbl,\
    \ v) break end end\n    end\n    i = i + 1\n  end\n  return tbl\nend", "  local\
    \ seen = {}\n  local ret = {}\n  for i, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(ret, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return ret\nend", "  local u = {}\n  for _,v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  return table.sort(u)\nend", "    local u = {}\n    for _, v in\
    \ ipairs(l) do u[v] = true end\n    return u\nend", "  local results = {}\n  for\
    \ _, el in ipairs(l) do\n    results[el] = true\n  end\n  return table.sort(results)\n\
    end", "  local i = 1\n  local l2 = {}\n  local function helper(k)\n    if type(k)\
    \ ~= 'table' then\n      l2[k] = true\n    elseif i == #l then\n      table.sort(l2)\n\
    \      table.sort(k)\n      return k\n    else\n      for j = i, #l do\n     \
    \   if l2[j] and l[j] == k[i] then\n          helper(j)\n        end\n      end\n\
    \    end\n  end\n  for i = 1, #l do\n    helper(i)\n  end\n  return l2\nend",
  "  local tbl = {}\n  for i = 1, #l do\n    if tbl[tostring(l[i])] == nil then\n\
    \      tbl[tostring(l[i])] = 1\n    end\n  end\n  return tbl\nend", "  local t\
    \ = {}\n  for i, v in ipairs(l) do\n    if v == true then\n      t[#t + 1] = v\n\
    \    else\n      t[#t + 1] = v\n    end\n  end\n  table.sort(t)\n  return t\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local t = {}\n  for i = 1,\
    \ #l do\n    if t[tostring(l[i])] == nil then\n      table.insert(t, l[i])\n \
    \   end\n  end\n  return t\nend", "  local seen = {}\n  local ret = {}\n  for\
    \ i = 1, #l do\n    if seen[tostring(l[i])] then\n      table.insert(ret, l[i])\n\
    \    else\n      table.insert(seen, tostring(l[i]))\n    end\n  end\n  return\
    \ ret\nend", "  local seen = {}\n  local r\n  for _, x in ipairs(l) do\n    if\
    \ seen[x] then\n      r = r or {}\n      r[#r + 1] = x\n    else\n      seen[x]\
    \ = true\n    end\n  end\n  return r\nend", "  if type(l) ~= 'table' then\n  \
    \  error('table:unique', tostring(l) .. ' is not a table')\n  end\n  local hash\
    \ = {}\n  for k, v in pairs(l) do hash[v] = true end\n  local u = {}\n  for k,\
    \ v in pairs(l) do u[v] = k end\n  return u\nend", "   local u = {}\n   for i,\
    \ v in ipairs(l) do u[v] = true end\n   return u\nend\nreturn unique", "  local\
    \ i, j, t = {}, {}, {}\n  for _, v in ipairs(l) do t[v] = true end\n  for k, v\
    \ in pairs(t) do\n    if k then\n      i = j[k]\n      j[k] = v\n      t[v] =\
    \ nil\n      for _, v2 in ipairs(i) do t[v2] == nil end\n    end\n  end\n  return\
    \ t\nend", "  local uniques = {}\n  for i = 1, #l do\n    if uniques[l[i]] ==\
    \ nil then\n      table.insert(uniques, l[i])\n    end\n  end\n  return uniques\n\
    end", "  if type(l) == 'table' then\n    local i = 1\n    local j = 1\n    local\
    \ t = {}\n    local k = 1\n    for k, v in ipairs(l) do\n      while i ~= k do\n\
    \        t[i] = l[k]\n        i = i + 1\n      end\n      t[i] = v\n      j =\
    \ j + 1\n      if j > k then k = j end\n    end\n    if j ~= 1 then\n      for\
    \ i = k, j - 1 do\n        t[i] = l[i]\n      end\n    end\n    return t\n  else\n\
    \    error('invalid argument: expected table as argument')\n  end\nend", "  local\
    \ seen = {}\n  local sorted = {}\n  local keys = {}\n  for i = 1, #l do\n    local\
    \ k = l[i]\n    if seen[k] then\n      table.insert(sorted, k)\n      table.insert(keys,\
    \ k)\n    else\n      seen[k] = true\n      table.insert(sorted, k)\n      table.insert(keys,\
    \ k)\n    end\n  end\n  return sorted, keys\nend", "  local seen = {}\n  for _,\
    \ v in pairs(l) do\n    if seen[v] then\n      table.insert(l, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return l\nend", "    local u = {}\n \
    \   for _, v in ipairs(l) do u[v] = true end\n    return setmetatable(l, getmetatable({__index\
    \ = function(t, k) return k == nil or u[k] end}))\nend", "  if type(l) ~= 'table'\
    \ then return l end\n  local t = {}\n  for k, v in pairs(l) do t[#t + 1] = v end\n\
    \  table.sort(t)\n  local i = 1\n  local result\n  while i <= #t do\n    if t[i]\
    \ == t[#t] then\n      result = t[i]\n      i = i + 1\n    else\n      t[i] =\
    \ result\n      i = i + 1\n      result = t[i]\n    end\n  end\n  return result\n\
    end", "  local seen = {}\n  local out = {}\n  for i, v in ipairs(l) do\n    if\
    \ not seen[v] then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n \
    \ end\n  return out\nend", "  local u = {}\n  for _, v in pairs(l) do\n    if\
    \ u[v] ~= nil then return u[v] end\n    u[v] = true\n  end\n  return u\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", " \
    \ local s = {}\n  local i = 1", "  if l == nil then return nil end\n  local c\
    \ = {}\n  local i = 1\n  for k in pairs(l) do\n    c[i] = k\n    i = i + 1\n \
    \ end\n  table.sort(c)\n  local u = {}\n  local k = 1\n  for k in pairs(c) do\n\
    \    u[k] = l[k]\n  end\n  return u\nend", "  local seen = nil\n  local result\
    \ = {}", "    if #l == 0 then\n        return {}\n    end\n    local u = {}\n\
    \    for _, x in ipairs(l) do\n        if u[x] ~= nil then\n            u[x] =\
    \ u[x] + 1\n        else\n            u[x] = 1\n        end\n    end\n    return\
    \ setmetatable(\n        u,\n        { __index = function(t, k)\n            local\
    \ counts = t[k]\n            if counts == nil then\n                t[k] = counts\
    \ = {}\n            end\n            local x = t[k]\n            for i = 1, x\
    \ - 1 do\n                if counts[i] ~= 0 then\n                    counts[i]\
    \ = counts[i] + 1\n                    break\n                else\n         \
    \           counts[i] = 1\n                end\n            end\n        end,\
    \ __newindex = function(self, k, v)\n            rawset(self, k, v)\n        end\n\
    \    })\nend", "    local seen = {}\n    local u = {}\n    for _, v in pairs(l)\
    \ do\n        if not seen[v] then\n            seen[v] = true\n            u[v]\
    \ = true\n        end\n    end\n    return u\nend", "  if #l == 0 then\n    return\
    \ nil\n  end", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  return u\nend", "  if l == nil then return nil end\n  if type(l)\
    \ == 'table' then\n    local m = {}\n    for k in pairs(l) do\n      local v =\
    \ l[k]\n      if type(v) == 'number' then\n        m[v] = true\n      end\n  \
    \  end\n    local u = {}\n    for k in pairs(m) do\n      u[k] = true\n    end\n\
    \    return u\n  else\n    return l\n  end\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = function(t,\
    \ k) return u[k] end})\nend", "   local table = {}\n   for i = 1, #l do table.insert(l,\
    \ i) end\n   return setmetatable(table, { __index = table })\nend", "  local u\
    \ = {}\n  for _, i in ipairs(l) do\n    table.insert(u, i)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, _ in ipairs(l) do table.insert(u,\
    \ l) end\n  return u\nend", "  local tbl = {}\n  for _, v in pairs(l) do tbl[v]\
    \ = true end\n  local r\n  r = {}\n  for k, v in pairs(tbl) do\n    if r[#r+1]\
    \ == v then\n      r[#r+1] = v\n    else\n      table.insert(r, v)\n    end\n\
    \  end\n  return r\nend", "  local result = {}\n  for _, el in ipairs(l) do\n\
    \    table.insert(result, el)\n  end\n  return table.sort(result)\nend", "  if\
    \ l==nil then\n    return nil\n  end\n  local result = {}\n  table.sort(l)\n \
    \ for k,v in pairs(l) do\n    if v~=result[k] then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local u = {}\n  local i = 1\n\
    \  for v in l do u[#u + 1] = v end\n  local i = 1\n  local n = 1\n  while i <=\
    \ #u do\n    if u[i] == u[i + 1] then n = n + (u[i] - u[i + 1]) else n = n end\
    \ -- avoid duplicates\n    i = i + 2\n  end\n  table.sort(u)\n  return u, n\n\
    end", "  local hash = {}\n  local result\n  for _, elem in ipairs(l) do\n    local\
    \ i = hash[elem]\n    if i == nil then\n      hash[elem] = #result + 1\n     \
    \ result = {elem}\n    else\n      result[#result + 1] = elem\n    end\n  end\n\
    \  return result\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    if v\
    \ == nil then\n      table.insert(u, nil)\n    else\n      table.insert(u, v)\n\
    \    end\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _,\
    \ v in ipairs(l) do u[v] = true end\n  local t = {}\n  for k, v in pairs(u) do\
    \ t[k] = v end\n  return t\nend", "  local s = {}\n  -- Only use iterators if\
    \ they're faster than a for loop\n  -- (The for loop would require allocating\
    \ a bunch of empty tables).\n  for _,v in pairs(l) do\n    s[v] = true\n  end\n\
    \  return s\nend", "  if l==nil then return nil end\n  if l=={} then return {}\
    \ end\n  if #l == 1 then return { l[1] } end", "  if l == nil then\n    return\
    \ nil\n  end\n  local m = {}\n  for k, v in pairs(l) do\n    m[v] = true\n  end\n\
    \  local n = {}\n  for k, v in pairs(m) do\n    n[k] = v\n  end\n  return n\n\
    end", "  if #l == 0 then\n    return {}\n  end", "  if l == nil then\n    return\
    \ nil\n  end\n  local i = 1\n  local t = {}\n  while i <= #l do\n    if l[i] ~=\
    \ i then\n      t[#t+1] = l[i]\n    end\n    i = i + 1\n  end\n  return t\nend",
  "    local i = 1\n    local tt = {}\n    for _, v in pairs(l) do\n        local\
    \ found = false\n        for _, v2 in pairs(tt) do\n            if v == v2 then\n\
    \                found = true\n                break\n            end\n      \
    \  end\n        if not found then\n            table.insert(tt, v)\n        end\n\
    \    end\n    return table.concat(tt)\nend", "  if type(l) ~= 'table' then return\
    \ l end\n  local t = {}\n  local i = 1\n  for i = 1, #l do t[tostring(l[i])] =\
    \ i end\n  local u = {}\n  local v = 1\n  for k, v in ipairs(t) do u[v] = k end\n\
    \  return u\nend", "  local tbl = {}\n  for i = 1, #l do\n    local v = l[i]\n\
    \    if tbl[v] then tbl[v] = tbl[v] .. \",\" .. i end\n    tbl[v] = i\n  end\n\
    \  -- remove last \",\" character\n  tbl = tbl..\"}\"\n  return tbl\nend", " \
    \ local set = {}\n  for _, v in ipairs(l) do\n    set[v] = true\n  end\n  return\
    \ set\nend", "  local data = {}\n  local unique = {}", "  local results = {}\n\
    \  for _, v in ipairs(l) do results[v] = true end\n  return table.concat(results)\n\
    end", "  local t = {}\n  for k in pairs(l) do t[#t + 1] = k end\n  table.sort(t)\n\
    \  local new_t = {}\n  for _, k in pairs(t) do new_t[#new_t + 1] = k end\n  return\
    \ new_t\nend", "  if l == nil then return nil end\n  if type(l) ~= 'table' then\
    \ return l end\n  local seen = {}\n  for i=1,#l do\n    if seen[l[i]] then continue\
    \ end\n    seen[l[i]] = true\n  end\n  return unpack(seen, 2)\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  return s\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  if l[1] == nil then\n    return nil\n  end\n  local i = 1\n  local j\
    \ = 1\n  local result = {}\n  repeat\n    if l[i] == l[i - 1] then\n      i =\
    \ i + 1\n      result[#result + 1] = l[i]\n    else\n      if j > i then\n   \
    \     table.insert(result, l[j])\n      end\n      j = j + 1\n      i = i + 1\n\
    \    end\n  until i > j\n  return result\nend", "    local t = {}\n    for _,v\
    \ in pairs(l) do t[v] = true end\n    return table.sort(t)\nend", "  if l[1] ==\
    \ nil then\n    return nil\n  end\n  local i = 1\n  local l2 = {}\n  while i <=\
    \ #l do\n    if l2[i] ~= l[i] then\n      l2[i] = l[i]\n      i = i + 1\n    end\n\
    \  end\n  return l2\nend\n</code>\n<|/ a |>\n<| c |>\nThis answer is wrong. The\
    \ correct answer is {5, 2, 3, 9, 0, 123}. Having the correct answer will make\
    \ it much easier for me to understand and apply this solution to other cases that\
    \ I might encounter.\n<|/ c |>\n<| c |>\nI guess I misread the question - I thought\
    \ you wanted to remove the duplicates. Can you please update your question to\
    \ say that you want to keep duplicates?\n<|/ c |>\n<| a dscore=0 tags=lua |>\n\
    <code>", "  if l==nil then return nil end\n  local t = {}\n  for _,v in pairs(l)\
    \ do\n    if table.find(t,v)~=nil then t[#t+1]=v end\n  end\n  return t\nend",
  "  if type(l) == 'table' then\n    local seen = {}\n    local ret = {}\n    for\
    \ _, v in ipairs(l) do\n      if seen[v] == nil then\n        table.insert(ret,\
    \ v)\n        seen[v] = true\n      end\n    end\n    return ret\n  else\n   \
    \ return nil\n  end\nend", "  if l==nil then return nil end\n  local k,a={},{}\n\
    \  for i,v in ipairs(l) do a[v]=true end\n  for i=1,#l do if a[i] then k[k.length]=l[i]\
    \ end  end\n  return k\nend", "  local seen = setmetatable({}, {__mode = \"kv\"\
    })\n  local n = 1\n  for _, value in pairs(l) do\n    if not seen[value] then\n\
    \      n = n + 1\n      seen[value] = n\n    end\n  end\n  table.sort(l)\n  for\
    \ i = 1, n do\n    seen[l[i]] = l[i]\n  end\n  return seen\nend", "  local v =\
    \ {}\n  for i=1,#l do v[l[i]] = true end\n  table.sort(v)\n  return unpack(v)\n\
    end", "  local seen = {}\n  for i, v in ipairs(l) do\n    if not seen[v] then\n\
    \      seen[v] = true\n      l[i] = v\n    end\n  end\n  return l\nend", "   \
    \ if type(l) ~= 'table' then return end\n    local u = setmetatable({}, {__mode='k'})\n\
    \    for i,v in ipairs(l) do\n        u[v] = true\n    end\n    return u\nend",
  "    local set = nil\n    local new_set = nil\n    local result = {}\n    for i,\
    \ v in ipairs(l) do\n        if not set or set[v] == i then\n            set =\
    \ set or {}\n            table.insert(set, v)\n        elseif new_set or v ~=\
    \ result[#new_set] then\n            new_set = new_set or {}\n            table.insert(new_set,\
    \ v)\n        else\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "  local n = {}\n  for i = 1, #l do n[tostring(l[i])]\
    \ = i end\n  local u = {}\n  for k, v in pairs(n) do u[v] = k end\n  return u\n\
    end", "  local s = table.make({}, 1, #l)\n  for i, v in ipairs(l) do\n    s[v]\
    \ = true\n  end\n  return table.unpack(table.sort(s))\nend", "   local u = {}\n\
    \   for _,v in ipairs(l) do\n      if v ~= nil then\n         u[v] = true\n  \
    \    end\n   end\n   return u\nend", "  local l1 = {}\n  local l2 = {}\n  local\
    \ i = 1", "  local res = {}\n  local tbl = {}\n  local i = 1\n  for _, x in pairs(l)\
    \ do\n    table.insert(tbl, x)\n    i = i + 1\n  end\n  local j = 1\n  for k in\
    \ pairs(tbl) do\n    if k ~= res[j] then\n      res[j] = k\n      j = j + 1\n\
    \    end\n  end\n  return res\nend", "    local u = {}\n    for _, v in pairs(l)\
    \ do\n        table.insert(u, v)\n    end\n    table.sort(u)\n    return u\nend",
  "  local t = {}\n  for k, v in pairs(l) do t[#t + 1] = k end\n  table.sort(t)\n\
    \  local i = 0\n  local j = 1\n  local r\n  while j < #t do\n    i = i + 1\n \
    \   if t[i] == t[j] then\n      j = j + 1\n    else\n      if i ~= j then\n  \
    \      r = t[i]\n        t[i] = t[j]\n        t[j] = r\n      end\n      j = j\
    \ + 1\n    end\n  end\n  return t\nend", "  local tbl = {}\n  for k in pairs(l)\
    \ do\n    table.insert(tbl, k)\n  end\n  table.sort(tbl)\n  local v = {}\n  for\
    \ _, k in ipairs(tbl) do\n    v[k] = true\n  end\n  return v\nend", "  local u\
    \ = {}\n  for _,v in ipairs(l) do\n    table.insert(u, v)\n  end\n  return u\n\
    end", "    if type(l) == 'table' then\n        local t = {}\n        for _, v\
    \ in ipairs(l) do t[v] = true end\n        return table.unpack(t)\n    elseif\
    \ type(l) == 'number' then\n        return l\n    else\n        return nil\n \
    \   end\nend", "   local u = {}\n   local i = 1\n   while i <= #l do\n      if\
    \ u[tostring(l[i])] == nil then\n         table.insert(u, tostring(l[i]))\n  \
    \    end\n      i = i + 1\n   end\n   return u\nend", "  if #l == 0 then\n   \
    \ return {}\n  end\n  local n = {}\n  for i, v in ipairs(l) do\n    n[v] = true\n\
    \  end\n  local res = {}\n  local i = 1\n  for k in pairs(n) do\n    if res[i]\
    \ == k then\n      i = i + 1\n    else\n      res[i] = k\n      i = i + 1\n  \
    \  end\n  end\n  return res\nend", "  local u = {}\n  for i = 1, #l do\n    if\
    \ u.[tostring(l[i])] == nil then\n      table.insert(u, l[i])\n    end\n  end\n\
    \  return u\nend", "  if type(l) ~= 'table' then error('Input is not a table')\
    \ end\n  local t = {}\n  table.sort(l)\n  for i, v in ipairs(l) do\n    if t[v]\
    \ == nil then t[v] = i end\n  end\n  return t\nend", "    if l==nil then\n   \
    \     return {}\n    else\n        local u = {}\n        local i = 1\n       \
    \ for elem in l do\n            if i ~= elem then\n                table.insert(u,\
    \ elem)\n            end\n            i = i + 1\n        end\n        return u\n\
    \    end\nend", "  if type(l) == 'table' then\n    local rt = {}\n    local mt\
    \ = getmetatable(l)\n    for i = 1, #l do\n      local v = l[i]\n      if type(v)\
    \ ~= 'table' then v = type(v) == 'cdata' and v or tostring(v) end\n      assert(v,\
    \ 'Attempt to use empty table as unique value')\n      assert(not mt or mt.__eq,\
    \ 'Attempt to use empty table as unique value')\n      local exists = false\n\
    \      for j = 1, #rt do\n        if rt[j] == v then\n          exists = true\n\
    \          break\n        end\n      end\n      if not exists then\n        table.insert(rt,\
    \ v)\n      end\n    end\n    return rt\n  else\n    return l\n  end\nend", " \
    \ local seen = {}\n  local ret = {}\n  for i = 1,#l do\n    local v = l[i]\n \
    \   if not seen[v] then\n      seen[v] = true\n      ret[#ret + 1] = v\n    end\n\
    \  end\n  return ret\nend", "    local r\n    local i = 1\n    repeat\n      \
    \  r = next(l)\n        if r == nil then\n            break\n        end\n   \
    \     insert(r, i)\n        i = i + 1\n    until l == nil", "    local seen =\
    \ {}\n    local out = {}\n    for i = 1, #l do\n        local k = l[i]\n     \
    \   if seen[k] ~= nil then\n            out[#out + 1] = k\n        else\n    \
    \        seen[k] = i\n        end\n    end\n    return out\nend", "  local seen\
    \ = {}\n  local res = {}\n  for i = 1, #l do\n    local k = l[i]\n    seen[k]\
    \ = true\n    if res[k] then\n      table.insert(res, k)\n    end\n  end\n  return\
    \ table.concat(res)\nend", "  local t = {}\n  local i = 1\n  for _ in l do t[i]\
    \ = true end\n  -- We don't need a local copy of t since we never modify the table\n\
    \  -- while iterating over it.\n  i = i + 1\n  for i = 2, #t do\n    if t[i] then\n\
    \      t[i] = false\n      for j = i, #t do\n        if t[j] then t[j] = true\
    \ else break end\n      end\n    end\n  end\n  -- If there are any elements left,\
    \ then t is not unique\n  return #t ~= #l and t\nend", "    local i = 1\n    local\
    \ t\n    local u\n    local v = {}", "  if l==nil then return nil end\n  if type(l)==\"\
    number\" then return l end\n  local u = table.new()\n  for i,v in pairs(l) do\
    \ table.insert(u, v) end\n  table.sort(u)\n  local ret = {}\n  for _,v in pairs(u)\
    \ do table.insert(ret, v) end\n  return ret\nend", "  local t = {}\n  local i\
    \ = 1", "  local i = 1\n  local j = 1\n  local k = 1\n  local n = #l\n  local\
    \ tmp", "    local seen = {}\n    local rval = {}\n    for _, el in ipairs(l)\
    \ do\n        if seen[el] then\n            rval = table.insert(rval, seen[el])\n\
    \        else\n            table.insert(rval, el)\n            seen[el] = true\n\
    \        end\n    end\n    return rval\nend", "  local tbl = {}\n  for _, elem\
    \ in ipairs(l) do\n    if tbl[elem] == nil then\n      tbl[elem] = true\n    end\n\
    \  end\n  return tbl\nend", "  local n = {}\n  for i = 1, #l do\n    if n[tostring(l[i])]\
    \ == nil then\n      table.insert(n, tostring(l[i]))\n    end\n  end\n  return\
    \ table.concat(n)\nend", "  local n = #l\n  if n == 0 then return l end\n  local\
    \ i = 1 -- skip first element\n  local j = 1\n  local m", "  local u = {}\n  for\
    \ i = 1, #l do\n    table.insert(u, l[i])\n  end\n  return u\nend", "  local s\
    \ = {}\n  for k, v in ipairs(l) do\n    s[k] = v\n  end\n  table.sort(s)\n  return\
    \ s\nend", "  if #l == 0 then\n    return {}\n  end\n  local i = 1\n  local j\
    \ = 1\n  local current = l[1]\n  local count = 1\n  local newset = {}\n  while\
    \ i <= #l do\n    if l[i] == current then\n      count = count + 1\n    else\n\
    \      if count > 1 then\n        newset[j] = current\n        count = count-1\n\
    \      else\n        newset[j] = count\n        count = 1 -- just keep track of\
    \ unique elements we encounter\n      end\n      current = l[i]\n      j = j+1\n\
    \    end\n    i = i + 1\n  end\n  if count > 1 then\n    newset[j] = count\n \
    \ end\n  return newset\nend", "  local u = {}\n  for i = 1, #l do\n    if u[tostring(l[i])]\
    \ == nil then\n      table.insert(u, l[i])\n    end\n  end\n  return u\nend",
  "  local s = {}\n  local i = 1\n  for v in l\n  do\n    if v == s[i] then\n    \
    \  i = i + 1\n      s[#s + 1] = v\n    end\n  end\n  return s\nend", "  local\
    \ u = {}\n  setmetatable(l, { __index = t })\n  for _, v in ipairs(l) do u[v]\
    \ = true end\n  local ret = {}\n  for i, v in pairs(u) do\n    ret[#ret + ((i\
    \ == 1) and  1 or 0)] = v\n  end\n  return ret\nend", "  local n = {}\n  local\
    \ i = 1\n  for k in pairs(l) do\n    if n[k] then\n      i = 1\n      while i\
    \ <= n do\n        if l[k] == l[i] then\n          i = i + 1\n        else\n \
    \         n[k] = true\n          break\n        end\n      end\n    else\n   \
    \   n[k] = true\n    end\n  end\n  local result = {}\n  for k, v in pairs(n) do\n\
    \    result[k] = v\n  end\n  return result\nend", "  local t = {}\n  for _, v\
    \ in pairs(l) do t[#t + 1] = v end\n  table.sort(t)\n  return t\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    if t[v] == nil then\n      t[v] = true\n\
    \      table.insert(l, v)\n    end\n  end\n  return l\nend", "    local u = nil\n\
    \    for _, v in ipairs(l) do\n        if u == nil or v ~= u then\n          \
    \  u = v\n        else\n            u, _ = select(u, v)\n        end\n    end\n\
    \    return u\nend", "  local keys = {}\n  for _, k in ipairs(l) do keys[k] =\
    \ 1 end\n  -- Convert keys to table\n  local k = {}\n  for k, v in pairs(keys)\
    \ do k[v] = k end\n  -- Return with keys\n  local keyset = {}\n  local values\
    \ = {}\n  for k, v in pairs(k) do\n    table.insert(values, v)\n    table.insert(keyset,\
    \ k)\n  end\n  return table.sort(values, table.string_cmp)\nend", "  if l == nil\
    \ then\n    return nil\n  end\n  if #l == 0 then\n    return {}\n  end", "  local\
    \ i = 1\n  local j = #l\n  local m = {}\n  while (j ~= 0) do\n    m[i] = l[j]\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return m\nend", "  local seen = { }\n\
    \  local t = { }\n  for _, v in pairs(l) do table.insert(t, v) end\n  for _, v\
    \ in ipairs(t) do\n    if not seen[v] then\n      table.insert(seen, v)\n    \
    \  return v\n    end\n  end\nend", "  local s = {}\n  for _, v in ipairs(l) do\n\
    \    s[v] = true\n  end\n  return s\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do t[#t + 1] = v end\n  table.sort(t)\n  return t\nend", "  local seen = {}\n\
    \  local ret = {}\n  for i, v in ipairs(l) do\n    if seen[v] then\n      table.insert(ret,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return ret\nend", "  local\
    \ rv = { }\n  local i = 1\n  for elem in l do\n    if i ~= elem then\n      rv[#rv\
    \ + 1] = elem\n    end\n    i = i + 1\n  end\n  table.sort(rv)\n  return rv\n\
    end", "  local u = {}\n  for _, v in pairs(l) do\n    table.insert(u, v)\n  end\n\
    \  table.sort(u)\n  return u\nend", "  local u = {}\n  for i = 1, #l do\n    table.insert(u,\
    \ l[i])\n  end\n  return u\nend", "  local t = {}\n  for i = 1, #l do\n    if\
    \ table.contains(t, l[i]) then continue end\n    t[#t + 1] = l[i]\n  end\n  return\
    \ t\nend", "  local result = {}\n  local j = 1\n  for i = 2, #l do\n    if l[i]\
    \ == l[i - 1] then\n      j = j + 1\n    else\n      result[i - 1] = l[i]\n  \
    \    j = 1\n    end\n  end\n  while j > 1 do\n    result[#result + 1] = result[j\
    \ - 1]\n    j = j - 1\n  end\n  return result\nend", "  local seen = {}\n  local\
    \ ret = {}\n  for i = 1,#l do\n    if seen[tostring(l[i])] then\n      table.insert(ret,\
    \ l[i])\n    else\n      seen[tostring(l[i])] = true\n    end\n  end\n  return\
    \ ret\nend", "  local u = {}\n  local i = 1\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n    i = i + 1\n  end\n  return u\nend", "  local tbl = {}\n  local i = 1\n\
    \  for elem in l do\n    tbl[i] = elem\n    i = i + 1\n  end\n  table.sort(tbl)\n\
    \  local unique = {}\n  for i = 1, i do\n    unique[tbl[i]] = tbl[i]\n  end\n\
    \  return unique\nend", "  local seen = {}\n  local rv = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      rv[#rv+1] = v\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return rv\nend", "  if l == nil then\n    return nil\n  end\n\
    \  if type(tonumber(l)) == 'number' then\n    l = tonumber(l)\n  elseif type(l)\
    \ ~= 'table' then\n    return nil\n  end\n  local u = {}\n  for k,v in pairs(l)\
    \ do\n    if u[v] == nil then\n      u[v] = k\n    end\n  end\n  return u\nend",
  "    local u = {}\n    for k, v in pairs(l) do\n        table.insert(u, v)\n   \
    \ end\n    table.sort(u)\n    return u\nend", "  if type(l) ~= 'table' then return\
    \ l end\n  local seen = {}\n  local i = 1\n  local j = 1\n  local seenCount =\
    \ {}\n  local l2 = {}\n  for i = 1, #l do\n    local e = l[i]\n    if seen[e]\
    \ then\n      if seenCount[e] > 1 then\n        seenCount[e] = seenCount[e] +\
    \ 1\n      else\n        j = j + 1\n        seenCount[e] = 1\n        table.insert(l2,\
    \ e)\n      end\n    else\n      seen[e] = true\n      j = j + 1\n      table.insert(l2,\
    \ e)\n    end\n  end\n  return l2\nend", "  local u = {}\n  for _, e in ipairs(l)\
    \ do\n    table.insert(u, e)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = v end\n  return u\nend", "    local\
    \ s = {}\n    for _, v in pairs(l) do\n        s[v] = true\n    end\n    table.sort(l,\
    \ function(a, b) return s[a] < s[b] end)\n    return l\nend", "    if type(l)\
    \ ~= 'table' then return l end\n    local u = {}\n    local i = 1\n    for k,\
    \ v in pairs(l) do u[#u+1] = v end\n    for i = 2, #u do u[#u+i] = u[#u-1] end\n\
    \    return u\nend", "    local u = {}\n    for _, v in ipairs(l) do\n       \
    \ if v == #l then\n            u[#u+1] = v\n        end\n    end\n    return u\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local n =\
    \ {}\n  for k, v in pairs(u) do n[k] = v end\n  return n\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do table.insert(u, v) end\n  return u\nend", "    if\
    \ l==nil then return nil end\n    local seen = {}\n    local out = {}\n    for\
    \ i=1,#l do\n        local v = l[i]\n        if seen[v] ~= nil then\n        \
    \    out[#out+1] = v\n        else\n            seen[v] = i\n        end\n   \
    \ end\n    return out\nend", "  local data = {}\n  for _, v in pairs(l) do\n \
    \   data[v] = nil\n  end\n  local new_data = {}\n  for k, v in pairs(data) do\n\
    \    new_data[k] = v\n  end\n  return new_data\nend", "    local v = {}\n    for\
    \ _, e in ipairs(l) do v[#v + 1] = e end\n    local i = 1\n    local results =\
    \ {}\n    for _, e in ipairs(v) do\n        if e ~= v[i - 1] then\n          \
    \  results[#results + 1] = v[i - 1]\n        end\n        i = i + 1\n    end\n\
    \    return results\nend", "  local u = {}\n  for _, x in ipairs(l) do u[x] =\
    \ true end\n  local c = 1\n  local v\n  local u = {}\n  for v in pairs(u) do\n\
    \    c = 0\n    for _, _ in ipairs(l) do\n      if not v or l[v] ~= l[v] then\
    \ c = c + 1; break end\n    end\n    if c > 1 then u[v] = true end\n  end\n  return\
    \ u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  if l==nil then return nil end\n  local\
    \ i = {}\n  local t = {}\n  local h = {}\n  for i,v in ipairs(l) do\n    if not\
    \ h[v] then\n      table.insert(t, v)\n      h[v] = true\n    end\n  end\n  for\
    \ i,v in ipairs(t) do\n    if not h[v] then\n      table.insert(l, v)\n      h[v]\
    \ = true\n    end\n  end\n  return l\nend", "  local seen = {}\n  local result\
    \ = {}", "  local u = {}\n  for i = 1, #l do\n    if l[i] ~= l[i - 1] and not\
    \ u[l[i]] then\n      u[l[i]] = true\n    end\n  end\n  return u\nend", "  local\
    \ tbl = {}\n  for _, el in ipairs(l) do tbl[el] = true end\n  return tbl -- Return\
    \ unique elements in table\nend", "  local s = {}\n  for i = 1, #l do\n    if\
    \ s[i] then\n      l[i - 1]\n      s[#s] = l[i]\n    end\n  end\n  return s\n\
    end", "  local u = {}\n  local v = {}\n  for _, v in ipairs(l) do u[#u + 1] =\
    \ v end\n  table.sort(u)\n  return u\nend", "  local table = {}\n  for _, v in\
    \ ipairs(l) do\n    table[#table + 1] = v\n  end\n  return table\nend", "  local\
    \ seen = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.remove(l,\
    \ i)\n    else\n      seen[l[i]] = true\n    end\n  end\n  return l\nend", " \
    \ if l == nil then return nil end\n  local i = 1\n  local last = nil\n  while\
    \ i <= #l do\n    if l[i] == l[i + 1] then\n      last = last or l[i + 1]\n  \
    \    i = i + 1\n    else\n      l[#l + 1] = last or l[i]\n      last, l[i] = l[i],\
    \ last or l[i]\n    end\n    i = i + 1\n  end\n  table.sort(l)\n  return l\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  local k", "  local i = 1\n  local j = 1\n\
    \  local t = {}\n  while i <= #l do\n    if l[i] ~= l[j] then\n      t[j] = l[i]\n\
    \      i = i + 1\n      j = j + 1\n    else\n      i = i + 1\n    end\n  end\n\
    \  return t\nend", "    if type(l) == 'table' then\n        local u = {}\n   \
    \     for k,v in pairs(l) do\n            u[v] = true\n        end\n        for\
    \ k, v in pairs(l) do\n            if v ~= k and u[v] == true then u[k] = nil\
    \ end\n        end\n        return setmetatable({}, {__index = function(t, i)\n\
    \            local v = t[i]\n            if v then\n                for k, v in\
    \ pairs(u) do\n                    if k == v then\n                        return\
    \ nil\n                    end\n                end\n            end\n       \
    \     return v\n        end})\n    else\n        return l\n    end\nend", "  local\
    \ u = {}\n  for i = 1, #l do\n    table.insert(u, l[i])\n  end\n  table.sort(u)\n\
    \  return u\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        table.insert(u,\
    \ v)\n    end\n    return u\nend", "  local t = {}\n  for k, v in pairs(l) do\n\
    \    if t[k] == nil then\n      t[k] = v\n    end\n  end\n  return t\nend", " \
    \ local u = {}\n  table.sort(l)\n  for i = 1, #l do\n    if l[i] ~= u[#u] then\n\
    \      u[#u] = l[i]\n    end\n  end\n  return u\nend", "    local i = 1\n    local\
    \ j = #l + 1\n    local res = {}\n    while i <= j do\n        local t = l[i]\n\
    \        local j1 = j\n        while j1 <= j do\n            if t[1] < l[j1][1]\
    \ then\n                t = {t[1], t[2]}\n            else\n                t\
    \ = {t[1], t[2]}\n            end\n            j1 = j1 + 1\n        end\n    \
    \    if #res == 0 then\n            res = t\n        else\n            if t[1]\
    \ < res[1] then\n                table.insert(res, {t[1], t[2]})\n           \
    \ else\n                table.insert(res, {res[1], res[2]})\n            end\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local u = {\
    \ }\n  for i = 1, #l do\n    for j = 1, #u do\n      if l[i] == u[j] then\n  \
    \      table.insert(u, l[i])\n        break\n      end\n    end\n  end\n  return\
    \ u\nend", "  if #l == 0 then\n    return l\n  end\n  local rv = setmetatable({},\
    \ {__index=l})\n  local i = 1\n  while i <= #l do\n    local k, v = l[i-1]\n \
    \   if not rv.__index[k] then\n      rv.__index[k] = v\n    else\n      i = i\
    \ + 1\n    end\n  end\n  return rv\nend", "    local seen = {}\n    local unique\
    \ = {}\n    for i = 1, #l do\n        local value = l[i]\n        if seen[value]\
    \ == nil then\n            table.insert(unique, value)\n            seen[value]\
    \ = true\n        end\n    end\n    return unique\nend", "  if l == nil then return\
    \ end\n  local i = 1\n  local n = {}\n  for item in l do\n    if item ~= i then\n\
    \      n[i] = item\n      i = i + 1\n    end\n  end\n  table.sort(n)\n  return\
    \ n\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
