name: HumanEval_122_add_elements
language: lua
prompt: "-- Given a non-empty table of integers arr and an integer k, return\n-- the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  -- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n-- 24\n\
  -- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\nlocal function\
  \ add_elements(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
  \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n  \
  \  lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
  \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3,\
  \ 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["    if k <= 0 then\n        return 0\n    end\n    local total_first\
    \ = 0\n    local total_second = 0\n    local i = 0\n    while i < k do\n     \
    \   if arr[i] >= 10 then\n            total_second = total_second + arr[i]\n \
    \       else\n            total_first = total_first + arr[i]\n        end\n  \
    \      i = i + 1\n    end\n    return total_first + total_second\nend\n</cell>\n\
    <cell>", "    assert(k > 0 and arr and k > 0)\n    local sum = 0\n    for i =\
    \ 1, k do\n        sum = sum + arr[i]\n    end\n    local i = 1\n    for i = k\
    \ + 1, #arr do\n        sum = sum + arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 7\nFor each of the following array A, B where A is an array where\
    \ each element is the result of some computation on two of the elements in B (A\
    \ is represented as a list of integers), compute the number of pairs of elements\
    \ that match.", "    local count = 0\n    local res = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v < 10 then\n            if count < k then\n                count\
    \ = count + 1\n            end\n            res = res + v\n        elseif count\
    \ > k then\n            return res\n        end\n    end\n    return res\nend",
  "    local result = 0\n    local size = #arr", "    return arr[1] + arr[2] + arr[3]\
    \ + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] + (arr[1] >= 100 * k or\
    \ (arr[1] and arr[2] >= 100 * k and arr[3] >= 100 * k and arr[4] >= 100 * k and\
    \ arr[5] >= 100 * k and arr[6] >= 100 * k and arr[7] >= 100 * k and arr[8] >=\
    \ 100 * k and arr[9] >= 100 * k and arr[1] < 100 * k and arr[2] < 100 * k and\
    \ arr[3] < 100 * k and arr[4] < 100 * k and arr[5] < 100 * k and arr[6] < 100\
    \ * k and arr[7] < 100 * k and arr[8] < 100 * k and arr[9] < 100 * k and arr[1]\
    \ > 100 * k and arr[2] > 100 * k and arr[3] > 100 * k and arr[4] > 100 * k and\
    \ arr[5] > 100 * k and arr[6] > 100 * k and arr[7] > 100 * k and arr[8] > 100\
    \ * k and arr[9] > 100 * k)\nend\n</cell>\n<text>\nProblem 3b\nLet us solve the\
    \ problem on paper first.", "  -- Initialize sum and counter.\n  local sum = 0\n\
    \  local counter = 0", "    if arr then\n        local sum = 0\n        for i\
    \ in arr:sub(k, k+1) do\n            sum = sum + i\n        end\n        return\
    \ sum\n    end\n    return nil\nend", "    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend", "  return arr[1]+arr[2]\
    \ + (arr[3]+arr[4]) * k / 100\nend", "    local total = 0\n    for i, v in ipairs(arr)\
    \ do\n        if i >= k then\n            break\n        end\n        total =\
    \ total + v\n    end\n    return total\nend\n</cell>\n<text>\n5. Complete the\
    \ function so that it takes k integers as input and returns the maximum value\
    \ obtained by adding up the elements with at most two digits.", "    local result\
    \ = arr[1]\n    for i=2,k do result = result + arr[i] end\n    return result\n\
    end", "  local sum = 0\n  for i = 0, k do\n    if i >= #arr then break end\n \
    \   sum = sum + arr[i]\n  end\n  return sum\nend", "    assert(k > 0)\n    assert(type(k)\
    \ == 'number' and k > 0)", "  if k == 0 or k > len(arr) then\n    return 0\n \
    \ end\n  local sum = 0\n  for i = k - 1, 1, -1 do\n    sum = sum + tonumber(arr[i])\n\
    \  end\n  return sum\nend", "    return math.max(arr:sub(k, k+1)+arr:sub(1, k-1):sub(1,\
    \ k-1))\nend", "  -- Base case\n  if k == 1 then\n    return arr[1] + arr[2]\n\
    \  -- If k is more than the sum of the first k elements, ignore the extra elements\n\
    \  elseif k > arr[1] + arr[2] then\n    return 0\n  -- If k exactly matches the\
    \ sum of the first k elements, ignore the extra elements\n  elseif k == arr[1]\
    \ + arr[2] then\n    return 0\n  -- If k is more than the sum of the first k elements,\
    \ but less than the sum of the first k and\n  -- the sum of the first k+1 elements,\
    \ then return k\n  elseif k > arr[1] + arr[2] + arr[3] then\n    return k\n  --\
    \ Else, return the sum of the first k elements, and add k\n  else\n    return\
    \ arr[1] + arr[2] + arr[3] + arr[4]\n  end\nend", "    local sum = arr[1]\n  \
    \  for i = 2, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend",
  "    local result = 0\n    for i = 1, k do\n        result = result + arr[i]\n \
    \   end\n    if result == 0 then\n        return 0\n    end\n    local n = 1\n\
    \    local i = 1\n    while i * 10 + n <= result do\n        table.insert(arr,\
    \ result)\n        table.insert(arr, n)\n        table.insert(arr, i)\n      \
    \  table.insert(arr, result)\n        i = i + 1\n        n = n * 10 + i\n    end\n\
    \    return result\nend", "    return #arr + #arr + math.max(math.abs(arr[k] -\
    \ arr[k + 1]), math.abs(arr[k + 1] - arr[k + 2]))\nend", "    local num_elem =\
    \ #arr\n    local result = 0\n    local first = 2\n    if num_elem > k then\n\
    \        num_elem = k\n    end\n    while first + 1 < num_elem do\n        result\
    \ = result + arr[first] + arr[first + 1]\n        first = first + 2\n    end\n\
    \    return result\nend", "  -- Base case\n  if k == 0 then\n    return 0\n  elseif\
    \ k == 1 then\n    return arr[1]\n  elseif k == 2 then\n    return arr[1] + arr[2]\n\
    \  else\n    -- Find the k-th largest element in the array\n    local largest\
    \ = arr[1]\n    for i = 2, #arr do\n      if arr[i] > largest then\n        largest\
    \ = arr[i]\n      end\n    end", "    assert(k > 0 and k and arr and arr[1] ~=\
    \ nil)\n    local maxi = math.floor(math.sqrt(k))\n    local count = 0\n    for\
    \ i = 1, k do\n        count = count + arr[i] > maxi * maxi ? count + arr[i] :\
    \ maxi * maxi\n    end\n    return count\nend", "    assert(k, \"k can't be empty\"\
    )\n    local sum = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n    end\n\
    \    return sum\nend", "  assert(k > 0 and k + 1 <= len(arr))\n  local sum = 0\n\
    \  for i = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend", "   --\
    \ Base Case: k is out of range\n   if k > #arr then return 0 end\n   -- Base Case:\
    \ k is zero\n   if k == 0 then return arr[1] end\n   -- Recursive Case\n   local\
    \ result = 0\n   for i = 1, k do\n      result = result + arr[i]\n   end\n   return\
    \ result\nend", "  local s = 0\n  local count = 1\n  while count < k do\n    count\
    \ = count + 1\n    s = s + arr[count]\n  end\n  return s\nend", "    if k <= 0\
    \ or k > #arr then\n        return 0\n    end\n    local total = 0\n    for i\
    \ = 1, #arr do\n        if i < k then\n            total = total + arr[i]\n  \
    \      end\n        if i > (k - 1) then\n            total = total + arr[i]\n\
    \        end\n    end\n    return total\nend", "    if k == 0 then\n        return\
    \ 0\n    end\n    if k == 1 then\n        return arr[1]\n    end\n    local result\
    \ = 0\n    local sum = 0\n    local i = 1\n    while i <= k do\n        if arr[i]\
    \ % 10 >= arr[i-1] % 10 then\n            sum = sum + arr[i]\n        else\n \
    \           result = result + arr[i]\n        end\n        i = i + 1\n    end\n\
    \    return result\nend", "  -- Base case\n  if k <= 0 then\n    return 0", " \
    \  if k == 1 then return arr[1] end\n   local sum = 0\n   local i = 0\n   for\
    \ value in arr do\n      if i >= k then break end\n      sum = sum + value\n \
    \     i = i + 1\n   end\n   return sum\nend", "  if arr == nil then return nil\
    \ end\n  local sum = 0\n  for i = 1, k do\n    sum = sum + arr[i]\n  end\n  return\
    \ sum\nend", "  local num = 0\n  for i = 1, k do\n    num = num + arr[i]\n  end\n\
    \  return num\nend", "  local total = 0\n  for i = 1, k do\n    total = total\
    \ + arr[i]\n  end\n  return total\nend", "    local sum = 0\n    for i=1,k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend", "    if arr[1] ==\
    \ nil then\n        return 0\n    end\n    local result = arr[1]\n    for i =\
    \ 2, k do\n        local temp = arr[i]\n        result = result + temp / 10 +\
    \ temp % 10\n    end\n    return result\nend\n</code>\n<|/ a tags=performance,lua,algorithm\
    \ dscore=2 |>\n<| c |>\nThank you so much for your help!! I understand now what\
    \ I was doing wrong. I've edited my question to show my code so far.\n<|/ c |>\n\
    <| a tags=performance,lua,algorithm |>\nHere's an algorithm that uses no floating-point\
    \ arithmetic.\nThe idea is to build up a table of counts of digits from 0 to 9,\
    \ and the number of elements with each digit.  Then, just sum those counts.  This\
    \ can be done in constant space.\n<code>", "  local sum = 0\n  for i = 1, k do\n\
    \    sum = sum + arr[i]\n  end\n  for i = k + 1, #arr do\n    sum = sum + arr[i]\
    \ - arr[i - 1]\n  end\n  return sum\nend", "    assert(k > 0 and k <= len(arr))\n\
    \    local ans = 0\n    for i = 1, k do\n        ans = ans + arr[i]\n    end\n\
    \    return ans\nend", "    local sum = 0\n    local visited = {}\n    local count\
    \ = 0\n    for i = 1, k do\n        count = count + 1\n        visited[count]\
    \ = true\n        sum = sum + arr[i]\n    end\n    for i = 1, k do\n        if\
    \ visited[i] == false then\n            sum = sum + arr[i]\n            visited[i]\
    \ = true\n        end\n    end\n    return sum\nend", "  if k == 0 then\n    return\
    \ arr[1]\n  end\n  if k == 1 then\n    return arr[1]+arr[2]\n  end\n  if k ==\
    \ length(arr) then\n    return arr[k-1]\n  end\n  local sum = 0\n  local current\
    \ = 1\n  local next_element = 1\n  for i = k+1 ,1, -1 do\n    sum = sum + arr[current]\
    \ + arr[next_element]\n    current = next_element\n    next_element = next_element\
    \ + 1\n  end\n  return sum\nend", "    local i = 0\n    local sum = 0\n    while\
    \ i < k do\n        sum = sum + arr[i]\n        i = i + 1\n    end\n    return\
    \ sum\nend", "  return sum( arr[i] + arr[i+k] for i in range(k) )\nend", "   \
    \ assert(k > 0 and k + 1 <= len(arr))\n    if k == 1 then\n        return arr[1]\
    \ + arr[2]\n    end\n    local sum = 0\n    local curr = arr[1]\n    for i = 2,\
    \ k do\n        sum = sum + curr\n        curr = arr[i]\n    end\n    return sum\n\
    end", "    local result = 0\n    for i = 1, k do\n        local value = arr[i]\n\
    \        if value >= 10 then\n            local first_digit = value % 10\n   \
    \         arr[i] = value - first_digit + 1\n            result += first_digit\
    \ * 10\n        else\n            arr[i] = value - 10 + 1\n        end\n    end\n\
    \    return result\nend", "  local s = 0\n  for i = 1, k do\n    s = s + arr[i]\n\
    \  end\n  return s\nend", "  local sum = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element < 10 then sum = sum + element else return sum end\n\
    \  end\n  for i = k, #arr do\n    local element = arr[i]\n    if element > 9 then\
    \ sum = sum + element else return sum end\n  end\n  return sum\nend", "    if\
    \ k == 1 then return arr[1] end\n    local cur_len = k\n    local cur_sum = 0\n\
    \    for i = k + 1, #arr do\n        local val = arr[i]\n        cur_sum = cur_sum\
    \ + val\n        if cur_len > 1 then\n            if cur_sum < val * 10 then\n\
    \                cur_len = cur_len - 1\n            else\n                cur_sum\
    \ = cur_sum / 10 + val\n            end\n        end\n    end\n    return cur_sum\n\
    end", "    local sum = 0\n    local size = #arr\n    for i = 1, size do\n    \
    \    local curr = arr[i]\n        if k > 1 then\n            local diff = curr\
    \ % 10\n            local lastDigit = math.floor(curr/10)\n            if lastDigit\
    \ < diff then\n                sum = sum + lastDigit + k - i - 1\n           \
    \ else\n                sum = sum + lastDigit + k - i\n            end\n     \
    \   elseif k == 1 then\n            if curr % 10 >= 2 then\n                sum\
    \ = sum + curr\n            end\n        end\n    end\n    return sum\nend", " \
    \   local ans = 0\n    for i = 1, k do\n        local x = 1\n        for j = 1,\
    \ k do\n            local y = j + 1\n            if y < k then\n             \
    \   x = x + arr[j]\n            end\n        end\n        ans = ans + x\n    end\n\
    \    return ans\nend", "    assert(#arr > 0)\n    assert(1 <= k <= #arr)\n   \
    \ local result = 0\n    for i = 1, k do\n        result = result + arr[i]\n  \
    \  end\n    return result\nend", "  return math.max(arr[1] + arr[2], arr[3] +\
    \ arr[4])\nend", "    local ans = arr[1]\n    for i = 2, #arr do\n        local\
    \ num = arr[i]\n        local tmp = num % 10\n        local t = num - tmp * 10\n\
    \        if t > 0 then\n            ans += t / 10\n        end\n        if i <=\
    \ k then\n            ans += (ans * 10) + tmp\n        end\n    end\n    return\
    \ ans\nend", "  -- Your code here\n  return 0\nend", "  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend", "    local result\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] >= 10 then\n            result\
    \ = result + arr[i] - 10\n        end\n    end\n    for i = k, #arr do\n     \
    \   if arr[i] >= 10 then\n            result = result + arr[i] - 10\n        end\n\
    \    end\n    return result\nend", "    local sum = 0\n    for i = 1, k do\n \
    \       local cur = arr[i]\n        -- Add elements with two digits\n        if\
    \ cur % 100 and cur % 10 ~= 0 then\n            sum = sum + cur % 10\n       \
    \ end\n        -- Add remaining elements without two digits\n        if cur %\
    \ 10 == 1 then\n            sum = sum + cur\n        end\n    end\n    return\
    \ sum\nend", "    if k == 1 then\n        return arr[1]\n    end\n    local cnt\
    \ = 0\n    for i = k + 1, #arr do\n        if arr[i] > arr[k] then\n         \
    \   cnt = cnt + 1\n        end\n    end\n    return arr[1] + cnt\nend", "    local\
    \ sum = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n    end\n    return\
    \ sum\nend", "  -- Initialize sum value to zero\n  local sum = 0", "    local\
    \ sum = 0\n    for _, v in ipairs(arr) do\n        if k <= 1 then return sum end\n\
    \        if math.floor(v / 10) > k then\n            return sum\n        else\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend", "  if\
    \ k == 0 then\n    return 0\n  elseif k == 1 then\n    return arr[1]\n  else\n\
    \    local kk = math.max(k - 2, 1)\n    local sum = 0\n    for i = 1, kk do\n\
    \      sum = sum + arr[i]\n    end\n    return sum\n  end\nend", "  return arr:apply(function(a)\
    \ return a + 1 end) -- first k\nend", "    if k > #arr then return 0 end\n   \
    \ return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nadd_all_elements\n\
    To help you visualize how these functions work, let's add a visual representation\
    \ of all elements $i$ from the input array:", "  if k == 1 then\n    return arr[1]\n\
    \  end\n  local result = 0\n  for i = 1, k do\n    result = result + arr[i]\n\
    \  end\n  result = result + add_elements(arr[k+1], k-1)\n  return result\nend",
  "  -- Base case\n  if k == 1 then\n    return arr[1]\n  end", "  -- Base case\n\
    \  if k == 0 or k > #arr then return 0 end\n  -- Add first k elements to the sum\n\
    \  return arr[1] + add_elements(arr[k:], k-2)\nend", "    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i - 1]\n    end\n    for i = k, #arr do\n\
    \        sum = sum + arr[i] - arr[i - 1]\n    end\n    return sum\nend", "   \
    \ local n = 0\n    for _, x in ipairs(arr) do\n        local m = math.floor(x/10)\
    \ + 1\n        n = n + m\n    end\n    return arr[k] + n\nend", "    local sum\
    \ = 0\n    for i = 1, k do\n        if arr[i] ~= nil then\n            sum = sum\
    \ + arr[i]\n        end\n    end\n    return sum\nend\n</cell>\n<cell>", "   \
    \ local sum = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n    end\n  \
    \  local first_k = arr[k]\n    for i = k, #arr do\n        sum = sum + arr[i]\
    \ - first_k\n    end\n    return sum\nend", "    local sum = 0\n    for i = 1,\
    \ k do\n        sum = sum + arr[i]\n    end\n    return sum\nend", "  return #arr\
    \ * k + (#arr - k) * (math.min(math.max(arr[1], arr[2]), #arr) - 1)\nend", " \
    \ -- If arr is empty then sum of all elements with at most 2 digits is 0\n  if\
    \ #arr == 0 then\n    return 0\n  else\n    -- Get the first k elements of arr\n\
    \    local res = arr[1]\n    for i = 2, k do\n      res = res + arr[i]\n    end\n\
    \    return res\n  end\nend", "   local sum = 0\n   for i = 1, k do\n      if\
    \ #arr < i then return sum end\n      sum = sum + arr[i]\n   end\n   return sum\n\
    end", "  -- Base case.\n  if k == 1 then\n    return arr[1]\n  end", "    local\
    \ result = 0\n    for i = 1, k do\n        local candidate = arr[i]\n        for\
    \ j = i+1, k do\n            candidate = candidate + arr[j]\n        end\n   \
    \     if candidate > 9 then\n            candidate = candidate + 10\n        end\n\
    \        result = result + candidate\n    end\n    return result\nend", "  local\
    \ sum = 0\n  local pos = 1\n  while pos < k do\n    sum = sum + arr[1]\n    pos\
    \ = pos + 2\n  end\n  local j = 0\n  for i = k + 1, #arr do\n    sum = sum + arr[i]\n\
    \    while sum > 10 * pos and j + 1 < k do\n      sum = sum - 10 * pos + arr[j\
    \ + 1]\n      j = j + 1\n    end\n    pos = pos + 1\n  end\n  return sum\nend",
  "    if k == nil then k = 1 end\n    if arr == nil then return 0 end\n    local\
    \ sum = 0\n    local i = 0\n    while i + k <= #arr and sum + arr[i] <= 10 do\n\
    \        sum = sum + arr[i]\n        i = i + 1\n    end\n    return sum + add_elements(arr[i\
    \ + k - 1], k)\nend", "  -- base case\n  if k == 1 then\n    local sum = arr[1]\n\
    \    for i = 2, #arr do\n      if arr[i] > sum then\n        sum = arr[i]\n  \
    \    end\n    end\n    return sum\n  end\n  \n  local mid = math.floor((#arr +\
    \ 1) / 2)\n  local left_sum = add_elements(arr:sub(1, mid), k - 1)\n  local right_sum\
    \ = add_elements(arr:sub(mid, #arr), k - 1)\n  \n  return left_sum + right_sum\
    \ + arr[mid] \nend\n</cell>\n<text>\nNext, we can define the function two_sum_array()\
    \ that takes in a table of integers and an integer k, and returns all the pairs\
    \ of integers in the table that add up to a value at most equal to k.", "    local\
    \ sum = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n    end\n    return\
    \ sum\nend", "    local total = 0\n    local count = 0\n    for i=1,k do\n   \
    \     if arr[i] % 10 == 0 then\n            total = total + arr[i]\n         \
    \   count = count + 1\n        end\n    end\n    if count == k then return total\
    \ end\n    count = 0\n    for i=1,k do\n        if arr[i] % 10 == 1 then\n   \
    \         total = total + arr[i]\n            count = count + 1\n        end\n\
    \    end\n    if count == k then return total end\n    return 0\nend\n</cell>\n\
    <text>\nBy calling your solution, add_elements, you are expected to output the\
    \ sum of all elements in the given table that have at most two digits in their\
    \ first k elements. For example, given {1, 2, 3, 9999, 10}, you should return\
    \ 9 + 99 + 9 + 9.", "    local sum = 0\n    for idx = 1, k do\n        sum = sum\
    \ + arr[idx]\n    end\n    return sum\nend", "    local result = 1\n    for i\
    \ = 1, k do\n        local n = arr[i]\n        -- The number with two digits must\
    \ be greater than or equal\n        -- to or equal to the first k elements of\
    \ arr\n        -- otherwise add it to the result\n        if n < arr[i] then\n\
    \            result = result + n - arr[i]\n        else\n            result =\
    \ result + n\n        end\n    end\n    return result\nend", "  return arr[1]\
    \ + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] +\n\
    \    arr[10]\nend", "    return helper(k, arr)\nend", "    local sum = 0\n   \
    \ for _, el in ipairs(arr) do\n        if k > 0 and k > 1 then\n            local\
    \ tmp = el % 10 + el % 100\n            if tmp == 0 then tmp = 1 end\n       \
    \     sum = sum + tmp\n        end\n        if k > 1 then\n            sum = sum\
    \ + el % 10 + el % 100\n        end\n    end\n    return sum\nend", "  local sum\
    \ = 0\n  local last_digit = 0\n  for i = 1, k do\n    local current_digit = math.floor(arr[i]/10)\n\
    \    if current_digit > last_digit then\n      sum = sum + current_digit * 10\n\
    \    end\n    last_digit = current_digit\n  end\n  return sum\nend\n</cell>\n\
    <text>\nLet's test our function with arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ k = 4", "    assert(k > 0 and k < len(arr))\n    local result = {}\n    for\
    \ i = 1, k do\n        result[i] = 0\n    end\n    for i = 1, k do\n        for\
    \ j = 1, k do\n            if arr[i] > arr[j] then\n                result[i]\
    \ = result[i] + arr[i]\n                break\n            else\n            \
    \    result[i] = result[i] + arr[j]\n                break\n            end\n\
    \        end\n    end\n    return tonumber(table.concat(result, ''))\nend", " \
    \ local sum = 0\n  for i = 1, k do\n    local element = arr[i]\n    sum = sum\
    \ + element % 10 + element / 10\n  end\n  return sum\nend", "  -- Base case.\n\
    \  if k < 1 then return arr[1] end", "  local s = arr[k] -- Start with first k\
    \ elements\n  for i in k + 1, #arr do\n    if i % 10 == 2 then\n      s = s +\
    \ arr[i]\n    end\n  end\n  return s\nend", "    local result = 0\n    local kk\
    \ = k - 1\n    for i = 1, k do\n        if i >= #arr then\n            break\n\
    \        end\n        result = result + arr[i]\n        result = result + arr[kk--]\n\
    \    end\n    return result\nend\n</cell>\n<text>\nProblem 7: Find a triangle\
    \ with three sides equal to a given number\nGiven a number sides, find if there\
    \ is a triangle with exactly three sides equal to the given sides.", "    local\
    \ result = {}\n    local pos = 1\n    for _ in pairs(arr) do\n        if pos >\
    \ k then return end\n        if arr[pos] < 10 then\n            -- Only add the\
    \ number to the result if it is above 10\n            result[#result + 1] = arr[pos]\n\
    \        end\n        pos = pos + 1\n    end\n    return table.concat(result,\
    \ \"\")\nend\n</cell>\n<text>\nGiven a non-empty array of numbers nums, find the\
    \ sum of the elements in\nthe array that occur more than half the time.", "  local\
    \ sum = 0\n  for i = k + 1, #arr do\n    sum = sum + arr[i]\n  end\n  return sum\n\
    end", "  local ret = 0\n  for i = 1, k do\n    ret = ret + arr[i]\n  end\n  return\
    \ ret\nend", "  local ans = 0\n  for i = 1, k do\n    ans = ans + arr[i]\n  end\n\
    \  return ans\nend", "    local result = 0\n    for j = 1,k do\n        result\
    \ = result + arr[j]\n    end\n    return result\nend", "    local total = 0\n\
    \    for i = 1, k do\n        local sum = arr[i] + arr[i + 1]\n        total =\
    \ total + sum\n    end\n    return total\nend\n</cell>\n<text>\nProblem 14\nThe\
    \ function longest_subsequence should return the longest subsequence of the given\
    \ array, where each number in the subsequence must appear at least once.", " \
    \   local result = arr[1]\n    for i = 2, k do\n        result = result + arr[i]\n\
    \    end\n    return result\nend", "    if k > #arr then return 0 end\n    local\
    \ sum = 0\n    for i = k, #arr do\n        sum = sum + tonumber(arr[i])\n    end\n\
    \    return sum\nend", "    local sum = 0\n    for i = 1, k do\n        sum =\
    \ sum + arr[i]\n    end\n    return sum\nend", "    local sum = 0\n    for i=1,\
    \ k do\n        sum = sum + arr[i]\n    end\n    return sum\nend", "  -- base\
    \ case\n  if k == 1 then\n    return arr[1]\n  end", "    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i - 1] / (10^(i + 1))\n    end\n    return\
    \ sum\nend", "    return arr[1]+arr[2] + (arr[3] and arr[#arr] + arr[4])\nend",
  "  local n = #arr\n  if n < 1 then return 0 end\n  if n < k then return 0 end\n\
    \  \n  local sum = 0\n  local firstk = k - 1\n  for i=k+1, n+k do\n    sum = sum\
    \ + arr[i-1]\n    if sum > 99 then break end\n    if sum < 100 then\n      sum\
    \ = sum + 100\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend", "  --\
    \ Base case\n  if k == 1 then\n    return arr[1]\n  end", "    if k == 0 then\n\
    \        return 0\n    end\n    local cur_max = 0\n    for idx = 1, k do\n   \
    \     cur_max = math.max(cur_max, arr[idx])\n    end\n    return cur_max + add_elements(arr,\
    \ k - 1)\nend", "    local total = 0\n    for i = 1, k do\n        if arr[i] >\
    \ 9999 then\n            total = total + arr[i]\n        end\n    end\n    for\
    \ i = k + 1, #arr do\n        if arr[i] > 9999 then\n            total = total\
    \ + arr[i]\n        end\n    end\n    return total\nend", "  -- Base case\n  if\
    \ k == 1 then\n    return arr[1]\n  end", "    local sum = 0\n    for _, i in\
    \ pairs(arr) do\n        if k > 1 then\n            sum = sum + i \n         \
    \   k = k - 1\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nLet's verify that our new function works\
    \ as expected:", "    if k >= #arr then return 0 end\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    sum = 0\n    for i = k,\
    \ #arr do\n        sum = sum + arr[i]\n    end\n    return sum\nend", "   assert(arr\
    \ and k and #arr >= k, 'Invalid input!')\n   local sum = 0\n   for i = 1, k do\n\
    \      sum = sum + arr[i - 1]\n   end\n   return sum\nend", "   if k > #arr then\n\
    \      return nil\n   end\n   local sum = 0\n   for i = 1, k do\n      sum = sum\
    \ + arr[i]\n   end\n   return sum\nend", "    local answer = {}\n    local last_sum\
    \ = 0\n    local index = 1\n    for element in arr do\n        if index == 1 then\n\
    \            last_sum = element\n        elseif last_sum > element then\n    \
    \        last_sum = element\n        end\n        index = index + 1\n    end",
  "    local ans = arr[1]\n    for i = 2, k do\n        ans = ans + arr[i]\n    end\n\
    \    return ans\nend", "   assert(k > 0 and k <= #arr)\n   local sum = 0\n   for\
    \ i = 1, k do\n      sum = sum + arr[i]\n   end\n   return sum\nend", "    local\
    \ total = 0\n    for i = 1, k do\n        total = total + arr[i]\n    end\n  \
    \  return total\nend", "    local count = 0\n    for i=1,k do\n        if arr[count]\
    \ >= 10 then\n            count = count + 1\n        else\n            count =\
    \ count + 1\n            arr[count] = arr[count] % 10 + arr[count] // 10\n   \
    \     end\n    end\n    return arr[1] + arr[count]\nend\n</cell>\n<text>\nLet's\
    \ see it in action:", "    local num_arr = {}\n    local k = 0\n    for _, element\
    \ in ipairs(arr) do\n        table.insert(num_arr, element)\n    end\n    k =\
    \ k or #num_arr\n    local new_arr = {}\n    local result = 0\n    for _, element\
    \ in ipairs(num_arr) do\n        if k > 0 and element % 10 == 0 then\n       \
    \     result = result + element\n        end\n        k = k - 1\n        if k\
    \ <= 0 then\n            break\n        end\n        table.insert(new_arr, element)\n\
    \    end\n    return result\nend", "    if arr[1] == nil then\n        return\
    \ 0\n    end\n    local result = arr[1]\n    local n = 1\n    for i = 2, #arr\
    \ do\n        result = result + arr[i]\n        n += 1\n        if n > k then\n\
    \            break\n        end\n    end\n    return result\nend\nadd_elements(_G[\"\
    arr\"], 1)", "    assert(k > 0 and k <= length(arr))\n    local ans = 0\n    local\
    \ i = 0\n    local length = #arr\n    while i < length do\n        ans = ans +\
    \ arr[i]\n        ans = ans % 10 + arr[(i+1) == length and 1 or i+1]\n       \
    \ i = i + 1\n    end\n    return ans\nend", "   assert(#arr >= k)\n   return #arr\
    \ > 0 and #arr == k + #arr and arr[1] + arr[2] or 0\nend", "  assert(k > 0 and\
    \ k <= #arr)\n  if k == 1 then\n    return arr[1]\n  end", "  return math.add(math.max(arr[1],\
    \ arr[2]), math.min(arr[k], arr[k+1]))\nend", "   assert(k > 0 and k * 2 <= len(arr),\
    \ \"The input array must have a positive  \" \"integer k and len(arr) must be\
    \ positive.\")\n   assert(k * 2 <= len(arr), \"The input array must have a positive\
    \  \" \"integer k and len(arr) must be positive.\")\n   return sum(arr[(i + k)\
    \ % (#arr)] + arr[i + (k - 1) % (#arr)] for i in (k)) * k / 2\nend", "    local\
    \ s = 0\n    for i = 1, k do\n        s = s + arr[i]\n    end\n    for j = k,\
    \ #arr do\n        s = s + arr[j]\n    end\n    return s\nend", "    local sum\
    \ = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\n\
    end", "    local ret = 0\n    for i = 1,k do\n        ret += arr[i]\n    end\n\
    \    for i = k+1, #arr do\n        ret += arr[i]\n    end\n    return ret\nend",
  "    if arr == nil then return nil end\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] == nil then return nil end\n        sum = sum + arr[i]\n  \
    \  end\n    return sum\nend", "    local max_i = #arr\n    local sum = arr[k]\
    \ + arr[k + 1]\n    for i = k + 2, max_i, 2 do\n        sum = sum + arr[i]\n \
    \   end\n    return sum\nend", "    local max_val = sys.maxint\n    local sum\
    \ = 0\n    for i = 1, k do\n        sum = sum + arr[i]\n        if max_val < sum\
    \ and max_val > 0 then\n            max_val = sum\n        end\n    end\n    return\
    \ max_val\nend", "  local sum = 0\n  for i = 1, k do\n    sum = sum + arr[i]\n\
    \  end\n  \n  local j = 1\n  while j < k do\n    sum = sum + arr[j]\n    j = j\
    \ + 1\n  end\n  \n  return sum\nend", "    return math.max(0, arr.[2] + k - arr.[1])\n\
    end", "  return k == 1 and arr[1] or add_elements(arr:sub(1,k), k)\nend", "  \
    \  local res = arr[1]\n    for i = 2, k do\n        res = res + arr[i]\n    end\n\
    \    return res\nend", "  -- Base case.\n  if k < 2 then\n    return arr[1]\n\
    \  end", "    local count = 0\n    local sum = 0\n    for i = 1, k do\n      \
    \  if arr[i] > 9 then\n            sum = sum + arr[i] - 10\n        else\n   \
    \         count = count + 1\n        end\n    end\n    if count == 0 then\n  \
    \      sum = sum + 0\n    end\n    return sum\nend", "  -- Base case\n  if k ==\
    \ 1 then return arr[1] or 0 end", "  -- Create a table with the k first elements\
    \ of arr, then sum their lengths.\n  local t = {}\n  for i = 1, k do\n    t[i]\
    \ = arr[i]\n  end", "    local result = arr[1]\n    local limit = math.max(k,\
    \ 1, #arr)\n    for i = 2; i <= limit and i < #arr do\n        result = result\
    \ + arr[i]\n    end\n    return result\nend", "    assert(k and k > 0 and k and\
    \ k < len(arr))\n    local total_elements = 0\n    for i = k, k + 1 do\n     \
    \   total_elements = total_elements + arr[i]\n    end\n    return total_elements\n\
    end", "    assert(#arr >= k, \"Given array must be at least k long.\")\n    local\
    \ sum = 0\n    for i = k + 1,#arr do\n        sum = sum + arr[i]\n    end\n  \
    \  return sum\nend", "    local total = 0\n    for i = 1, k do\n        total\
    \ = total + arr[i]\n    end\n    return total\nend", "    local ans = 0\n    local\
    \ pos = k + 1\n    local i = 0\n    while pos < len(arr) and i < k do\n      \
    \  local m = arr[pos]\n        while i < pos and m < arr[pos - i] do\n       \
    \     i = i + 1\n        end\n        ans = ans + m * 10^(i-1)\n        pos =\
    \ pos + 1\n    end\n    return ans\nend", "    local sum = 0\n    for i = 1, k\
    \ do\n        sum = sum + arr[i]\n    end\n    return sum\nend", "  if k > #arr\
    \ then return end\n  -- we do not consider numbers less than 1\n  local nums =\
    \ arr:sub(1, k - 1)\n  local sum = 0\n  for _, v in ipairs(nums) do\n    sum =\
    \ sum + v\n  end\n  return sum\nend", "    if k < 1 or k < 2 then\n        return\
    \ 0\n    end\n    if k == 1 then\n        return arr[1]\n    end\n    if arr[k]\
    \ == nil then\n        return 0\n    end", "  local sum = 0\n  for i = 1, k do\n\
    \    sum = sum + arr[i]\n  end\n  for i = k, #arr do\n    sum = sum + arr[i] -\
    \ 1\n  end\n  return sum\nend", "    if k == 0 then\n        return 0\n    end",
  "    local result = 0\n    for i = 1, k do\n        local n = arr[i]\n        if\
    \ n >= 10 then\n            n = n - 10\n            result = result + n\n    \
    \    end\n    end\n    return result\nend", "  -- Base case: if the length of\
    \ the given array is less than k, return 0\n  if k > #arr then return 0 end\n\
    \  -- Base case: if k is 0, return the length of the given array\n  if k == 0\
    \ then return #arr end\n  -- Recursive case:\n  -- Add the first k elements to\
    \ the array and add them to the return value.\n  return k + add_elements(arr[1:k],\
    \ k) + arr[k + 1]\nend", "    local result = 0\n    for i = 1, k do\n        result\
    \ = result + arr[i]\n    end\n    return result\nend", "  -- base case\n  if k\
    \ == 1 then\n    return arr[1]\n  else\n    local max = 0\n    local max_ele\n\
    \    local i = 1\n    local sum = 0\n    -- recurrence\n    while i <= k do\n\
    \      if arr[i] < max then\n        sum = sum + arr[i]\n      else\n        max\
    \ = arr[i]\n        max_ele = i\n      end\n      i = i + 1\n    end\n    -- return\
    \ max_ele + 1\n    return sum + arr[max_ele]\n  end\nend", "    local sum = arr[k]\n\
    \    for i = k + 2, #arr do\n        sum = sum + arr[i]\n    end\n    return sum\n\
    end", "  local i = 0\n  local sum = 0\n  while i < k and i < #arr do\n    sum\
    \ = sum + arr[i]\n    i = i + 1\n  end\n  return sum\nend", "    local sum = 0\n\
    \    for i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend",
  "    local answer = 0\n    for _, v in ipairs(arr) do\n        answer = answer +\
    \ ((v % 10) * (v / 10)) + ((v % 100) * (v / 100))\n    end\n    answer = answer\
    \ + ((arr[(k - 1)] * (10 ** (k - 2))) * (arr[(k - 1)] / 10)) + ((arr[(k - 1)]\
    \ * (10 ** (k - 3))) * (arr[(k - 1)] / 100))\n    return answer\nend", "    local\
    \ sum = 0\n    for i = 1, k do\n        sum = (sum * 10) + arr[i]\n    end\n \
    \   return sum\nend", "    if arr == nil then return 0 end\n    if k >= #arr then\
    \ return 0 end", "    local result = {}\n    for i = 1, k do\n        local sum\
    \ = 0\n        for j, _ in pairs(arr) do\n            sum = sum + j % 10 + j %\
    \ 100\n        end\n        result[#result + 1] = sum\n    end\n    return result\n\
    end", "  -- base case\n  if k == 0 then\n    return arr[1]\n  end\n  -- recursive\
    \ case\n  local sum = 0\n  for i = 1, k do\n    sum = sum + arr[i]\n  end\n  return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9]\nk = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n\
    </cell>\n<text>\n3.8. Write a function that returns a list of strings that represent\
    \ the sums of the digits of each number in a given array. For example, given arr\
    \ = [1, 7, 3, 21], return [\"7\", \"11\", \"103\", \"211\"].", "  local res =\
    \ arr[1]\n  for i = 2, k do\n    res = res + (arr[i] - arr[i-1])\n  end\n  return\
    \ res\nend", "  -- Base cases\n  if k == 1 then return arr[1] end\n  if k == 0\
    \ then return 0 end\n  local low = 1\n  local high = #arr\n  while low <= high\
    \ do\n    -- Skip element with one digit\n    if arr[low] and arr[low] < 10 then\n\
    \      low = low + 1\n      continue\n    end\n    -- Check if there is more than\
    \ one digit from the first k elements\n    if low > high then\n      return 0\n\
    \    end\n    -- Skip elements with more than one digit from the first k elements\n\
    \    if arr[k] and not arr[low + k] then\n      high = high - 1\n      continue\n\
    \    end\n    -- Check if the element at the end of low is greater than or equal\
    \ to the element at the\n    -- end of high, which is supposed to contain a number\n\
    \    if arr[low + k] and arr[low + k] < 10 then\n      low = low + k + 1\n   \
    \   continue\n    end\n    -- Check if there is a number at the end of high\n\
    \    if arr[high] and arr[high] < 10 then\n      high = high - 1\n      continue\n\
    \    end\n    -- If there is no number at the end of high, add it\n    return\
    \ arr[1] + arr[low] + arr[high] + arr[k]\n  end\n  return 0\nend\n</cell>\n<text>\n\
    Part II: Problem Solving", "    local result = {}\n    for i = 1, #arr do\n  \
    \      local num = arr[i]\n        if i == k then\n            result[i] = num\n\
    \        elseif num < 10 then\n            result[i] = num\n        end\n    end\n\
    \    return unpack(result)\nend", "    if k == 1 then\n        return arr[1]\n\
    \    end\n    local res = arr[1]\n    for i = 2, #arr do\n        if i ~= k and\
    \ arr[i] % 10 + arr[k] % 10 <= 9 then\n            res = res + arr[i]\n      \
    \  end\n    end\n    return res\nend", "    local total = 0\n    for _, _ in pairs(arr)\
    \ do\n        if k > 0 then\n            if k <= math.floor(math.log10(_)) then\n\
    \                total = total + _\n                k = k - math.floor(math.log10(_))\n\
    \            else\n                return nil\n            end\n        else\n\
    \            total = total + _\n        end\n    end\n    return total\nend",
  "    assert(k > 0 and k <= #arr)\n    local result = 0\n    for i = 1, k do\n  \
    \      local v = arr[i]\n        if v < 10 then\n            result = result +\
    \ v\n        else\n            result = result + (v % 10) * (10 - v)\n       \
    \ end\n    end\n    return result\nend", "  local sum = 0\n  local first = k ~=\
    \ 0 and arr[k-1] or 0\n  for _, v in ipairs(arr) do\n    if v > first then\n \
    \     sum = sum + v\n    else\n      break\n    end\n  end\n  return sum\nend",
  "    if k == 0 then\n        return arr[1]\n    end\n    local res = 0\n    for\
    \ i = 1, k do\n        res, i = i + res, arr[i]\n    end\n    return res\nend",
  "  local s = arr[1]\n  for i in arr do\n    if i < s then\n      return nil\n  \
    \  end\n    s += i\n  end\n  return s\nend", "  local num_ele = #arr\n  if k >=\
    \ num_ele then return 0 end\n  if num_ele <= 2 then return num_ele end", "   --\
    \ First we sort the list by dividing the number by 10 and rounding down\n   --\
    \ This way we ensure that we dont add up elements with the same digit.\n   --\
    \ We also add a special element '9999' at index 0 which we wont use.\n   table.sort(arr)\n\
    \   local sum = 0\n   for i = 1, k-1 do\n      local element\n      if arr[#arr]\
    \ >= i then\n         element = arr[#arr]/10\n      else\n         element = 9999\n\
    \      end\n      sum = sum + element\n      arr[#arr] = arr[#arr] - element*10\n\
    \   end\n   return sum\nend", "    local ans = 0\n    for i = 1, k do\n      \
    \  ans = ans + arr[i]\n    end\n    return ans\nend", "    local s = arr[1]\n\
    \    for i = 2, k do\n        s = s + arr[i]\n    end\n    return s\nend", " \
    \ assert(#arr <= 100, \"arr length out of range\")\n  assert(#arr >= k, \"k length\
    \ out of range\")\n  local ret = 0\n  local i = 0\n  while i < k do\n    ret =\
    \ ret + arr[i]\n    i = i + 1\n  end\n  return ret\nend", "    local arr_size\
    \ = #arr\n    local k_size = k\n    if arr_size == 0 then return 0 end\n    local\
    \ count = 0\n    for index = 1, k_size do\n        -- If the element at index\
    \ i has two digits, add it to the count\n        if arr:len() > index then\n \
    \           if arr:len() > index + 1 and arr:len() > index + 2 then\n        \
    \        count = count + arr:len() - k\n            end\n        end\n    end\n\
    \    return count\nend", "    if k > #arr then return nil end\n    return arr[1]\
    \ + add_elements(arr[2:k], k)\nend", "  -- Your code here\n  local sum = 0\n \
    \ for i = 1, k do\n    sum = sum + arr[i]\n  end\n  for i = k + 1, #arr do\n \
    \   sum = sum + arr[i]\n  end\n  return sum\nend", "    local result = 0\n   \
    \ local last_element = 0\n    for i = 1, k do\n        last_element = arr[i]\n\
    \    end\n    for i = k, #arr do\n        if arr[i] > last_element then\n    \
    \        result = (result + last_element) % 10 + arr[i] % 10\n            last_element\
    \ = arr[i]\n        end\n    end\n    return result\nend", "    local sum = 0\n\
    \    for i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend",
  "    if arr[1] > arr[#arr] then return 0 end\n    local sum = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i\
    \ - 1]\n        elseif arr[i] < arr[i - 1] then\n            sum = sum + arr[i]\n\
    \        else\n            sum = sum + arr[i] + arr[i - 1]\n        end\n    end\n\
    \    return sum + k\nend", "  local sum = 0\n  for i in arr:sub(1,k) do\n    sum\
    \ = sum + i\n  end\n  return sum\nend", "    return nil\nend", "  assert(k > 0\
    \ and k <= #arr, \"Wrong k\")\n  local n = 1\n  local tsum = 0\n  local sum =\
    \ 0\n  local len = #arr\n  -- Add all elements from arr to sum\n  for i = 1, len\
    \ do sum = sum + arr[i] end\n  -- Add all elements from arr which have more than\
    \ one digit\n  for i = 1, len do\n    if arr[i] >= 10 then\n      tsum = tsum\
    \ + arr[i]\n      n = n + 1\n    end\n  end\n  -- Add last element\n  if arr ~=\
    \ nil then\n    tsum = tsum + arr[len]\n    n = n + 1\n  end\n  -- Add the sum\
    \ of the elements with at most two digits\n  sum = tsum + sum\n  n = n + 1\n \
    \ for i = 1, n do\n    sum = sum + 10\n  end\n  return sum\nend", "  local result\
    \ = {}\n  for i = 1, k do\n    table.insert(result, arr[i])\n  end\n  for i =\
    \ k + 1, #arr do\n    table.insert(result, arr[i])\n  end\n  return result\nend",
  "    local max_val = arr[1]\n    for i = 2, k do\n        if max_val - arr[i] >\
    \ 0 then\n            max_val = max_val - arr[i]\n        elseif max_val - arr[i]\
    \ == 0 then\n            max_val = arr[i]\n        end\n    end\n    return max_val\n\
    end", "  local sum = 0\n  for i = 1, k do\n    local k = k - i - 1\n    sum =\
    \ sum + arr[i] * math.pow(10, k)\n  end\n  return sum\nend", "    return arr:reduce((a,\
    \ b) =>\n        a + b * (math.ceil(b / 10) or 1) * (math.ceil(b / 100) or 1)\
    \ * (math.ceil(b / 1000) or 1),\n        0) * k\nend", "  local result = {}\n\
    \  local sum = 0\n  for i = k, 1, -1 do\n    sum = sum + arr[i]\n  end\n  table.insert(result,\
    \ sum)\n  return result\nend", "  if k >= #arr then return 0 end\n  local count\
    \ = 0\n  for i = k+2 to k do\n    count = count + arr[i]\n  end\n  return count\n\
    end\nadd_elements({\"a\", \"b\"}, 2)\n</cell>\n<cell>", "  return array_sum(arr,\
    \ \"mink\", k)\nend", "    local result = {}\n    for _, v in ipairs(arr) do\n\
    \        table.insert(result, v)\n    end\n    result = sort(result)\n    local\
    \ ans = 0\n    for _, v in ipairs(result) do\n        if v <= math.pow(10, k)\
    \ then\n            ans = ans + v\n        end\n    end\n    return ans\nend\n\
    </cell>\n<text>\nGiven a non-empty table of non-negative integers, compute a maximum\
    \ element.\nFor example, given {1, 3, 2}, return 3.\nThe input is not necessarily\
    \ sorted. The output is not necessarily unique.", "    local s = 0\n    for i\
    \ = 1, k do\n        s = s + arr[i]\n    end\n    return s\nend", "    local result\
    \ = 0\n    for i = 1, k do\n        if i >= #arr then\n            break\n   \
    \     end\n        local idx = i + 1\n        local el = arr[idx]\n        local\
    \ val = el * 10\n        if val < 10 then\n            val = 10 + val\n      \
    \  end\n        local next = arr[idx+1]\n        if next >= 10 then\n        \
    \    val = val + next - 10\n            idx = idx + 2\n        end\n        result\
    \ = result + val\n    end\n    return result\nend\n</cell>\n<cell>\nassert(add_elements({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4) == 24)\n</cell>\n<text>\n12.1 Subset\nLet $A\
    \ \\subset B$ be two sets, each with distinct elements.\nIf $A \\subset B$ then\
    \ $A$ is a subset of $B$.\nIf $A$ is a subset of $B$ then $B$ is a subset of $A$.\n\
    The empty set is neither a subset nor subset of any other set.\nThe set $A$ is\
    \ said to be a subset of $B$ if $A \\subset B$ for all elements $x \\in A$ and\
    \ $x \\in B$.", "    if k == 1 then\n        return 0\n    end\n    local max_sum\
    \ = arr[#arr] - arr[1]\n    for i = 2, k do\n        local cur_sum = arr[i] +\
    \ arr[i - 1]\n        if cur_sum > max_sum then\n            max_sum = cur_sum\n\
    \        end\n    end\n    return max_sum\nend", "    local total = 0\n    for\
    \ i = 1, k do\n        total = total + arr[i]\n    end\n    for i = k + 1, #arr\
    \ do\n        total = total - arr[i]\n    end\n    return total\nend\n</cell>\n\
    <text>\nThe second problem involves returning the minimum number in an array that\
    \ contains all the numbers from 1 to k. Write a function:", "  local sum = 0\n\
    \  local first = 1\n  while k >= first do\n    sum = sum + arr[first] * math.floor(math.log10(1\
    \ + last / 10))\n    first = first + 1\n    last = last + arr[first]\n  end\n\
    \  return sum\nend", "    local nums = {}\n    for i=1, k do\n        local sum\
    \ = 0\n        for j=1, #arr do\n            sum = sum + arr[j]\n            if\
    \ sum > 9 then\n                sum = 0\n            end\n        end\n      \
    \  if sum > 9 then\n            num = sum\n        else\n            num = 0\n\
    \        end\n        nums[i] = num\n    end\n    local sum = 0\n    for i=1,\
    \ k do\n        sum = sum + nums[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Let's test our add_elements function by checking that it returns the correct sum:",
  "    local total_sum = 0\n    for i = 1,k do\n        total_sum = total_sum + arr[i]\n\
    \    end\n    return total_sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
