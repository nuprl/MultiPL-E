name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are three distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,\
  \ 3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n\
  -- false\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  for i = 1, #l do if l[i] + l[i + #l] == 0 then return false end end\
    \ end\n  return true\nend", "  local sz = #l\n  if sz == 0 then\n    return true\n\
    \  else\n    local i = 0\n    local j = 1\n    local k = 1\n    while i < sz and\
    \ j < sz do\n      local x = l[i] + l[j] + l[k]\n      if x == 0 then\n      \
    \  return false\n      else\n        j = j + 1\n        k = k + 1\n      end\n\
    \      i = i + 1\n    end\n    return i == sz\n  end\nend", "  local s, t, sum\
    \ = {}, {}, 0\n  for i = 1, #l do s = table.insert(s, l[i]) end\n  for i, v in\
    \ ipairs(s) do sum = sum + v end\n  local zero = 0\n  for i = #l, 1, -1 do\n \
    \   local v = l[i]\n    local found = false\n    for j = 1, #s do\n      if v\
    \ + s[j] == 0:\n        found = true\n        break\n      end\n    end\n    if\
    \ found then\n      break\n    else\n      table.insert(t, v)\n    end\n  end\n\
    \  return #t == 3 and table.remove(t)\nend", "   if #l == 0 then return false\
    \ end\n   if #l == 1 then return l[1] == 0 end", "  local num_distinct = 0\n \
    \ for _, v in ipairs(l) do\n    local distinct = #l / (v - 1)\n    if distinct\
    \ ~= 0 then\n      num_distinct = num_distinct + 1\n      if distinct == 3 then\n\
    \        return true\n      end\n    end\n  end\n  return num_distinct == 3\n\
    end", "\tassert(#l == 2, 'expected table with two elements')\n\tlocal s = l[1]\
    \ + l[2]\n\tif s == 0 then\n\t\treturn true\n\telseif s > 0 and s < 3 then\n\t\
    \treturn false\n\telse\n\t\treturn true\n\tend\nend", "    local s = 0\n    for\
    \ _, v in pairs(l) do\n        s = s + v\n    end\n    if s == 0 then\n      \
    \  return true\n    end\n    local i = 0\n    for _, v in pairs(l) do\n      \
    \  if v > 0 and ((i == 0 and s == 0) or (s == s - v)) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "  local\
    \ zero = {}\n  local two = {}\n  for i=1,#l do\n    if l[i] == 0 then\n      zero:insert(i)\n\
    \      two:insert(i)\n    end\n  end\n  local n = #l\n  -- If the set contains\
    \ three distinct elements that sum to zero, then\n  -- the set also contains three\
    \ distinct elements not equal to zero.\n  return #zero == n and #two == n and\
    \ #l > 2\nend", "  -- This is O(n^2), but n is small\n  local zeros, ones = 0,\
    \ {}\n  local count = 0\n  for _, v in ipairs(l) do\n    if v == 0 then\n    \
    \  count = count + 1\n      zeros = zeros + 1\n    else\n      ones[count] = v\n\
    \      count = count + 1\n    end\n  end\n  if count == 3 then\n    -- The list\
    \ is [0,0,0] or [0,1,1] or [1,1,0]\n    return true\n  end\n  -- If the list has\
    \ one zero, we know that there are two zeros or\n  -- one zero, so we know that\
    \ there are at least three zeros in the list\n  return count == 2 or count ==\
    \ 1\nend", "  local function helper(l1, l2, l3)\n    if l1 == nil then\n     \
    \ return false\n    end\n    if l2 == nil then\n      return true\n    end\n \
    \   if l3 == nil then\n      return false\n    end\n    local function helper2(a,\
    \ b)\n      if a < 0 then\n        return b < a\n      else\n        return b\
    \ >= a\n      end\n    end\n    if helper(l1.num1, l2.num1, l3.num1) or helper(l1.num2,\
    \ l2.num2, l3.num2) or helper(l1.num3, l2.num3, l3.num3) then\n      return false\n\
    \    end\n    return helper2(l1.num1, l2.num2) + helper2(l1.num2, l2.num3) + helper2(l1.num3,\
    \ l2.num3)\n  end\n  return helper(l)\nend", "  local sum = 0\n  for _, value\
    \ in ipairs(l) do\n    sum = sum + value\n    if sum > 0 then break end\n  end\n\
    \  return sum == 0\nend", "  local t = {}\n  for k, v in pairs(l) do\n    table.insert(t,\
    \ v)\n  end", "  local result = 0\n  for i = 1,#l do\n    local sum = l[i] + l[i+1]\
    \ + l[i+2]\n    if sum == 0 then\n      return true\n    end\n    if sum > 0 then\n\
    \      result = result + sum\n    else\n      return false\n    end\n  end\n \
    \ return result == 0\nend", "  local num_elements = #l\n  local count = 0\n  for\
    \ i=1,num_elements do\n    count = count + l[i]\n    if count > 0 then break end\n\
    \  end\n  return num_elements == 3\nend", "  assert(#l >= 1)\n  local triples_sum\
    \ = 0\n  for i = 1, #l do\n    triples_sum = triples_sum + l[i]\n    if triples_sum\
    \ > 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ nums = {}\n  for k,v in pairs(l) do\n    table.insert(nums, v)\n  end\n  local\
    \ total = 0\n  for i,v in ipairs(nums) do\n    total = total + v\n    if total\
    \ >= 3 then return false end\n  end\n  return true\nend", "  local a = {}\n  local\
    \ b = {}\n  local c = {}\n  for k,v in pairs(l) do\n    table.insert(a, v)\n \
    \   table.insert(b, -k)\n    table.insert(c, -v)\n  end\n  local sum = table.max(b)\
    \ + table.max(c) + table.max(a)\n  local n = #b\n  local sum_to_zero = (sum ==\
    \ 0 and sum < 0)\n  if sum_to_zero then\n    sum = -sum\n    table.sort(b)\n \
    \   table.sort(c)\n  end\n  for k,v in pairs(b) do\n    if k ~= n then\n     \
    \ sum_to_zero = false\n      break\n    end\n  end\n  for k,v in pairs(c) do\n\
    \    if k ~= n then\n      sum_to_zero = false\n      break\n    end\n  end\n\
    \  return sum_to_zero\nend", "  local zero = nil\n  for _, v in ipairs(l) do\n\
    \    zero = zero + v\n  end\n  return zero == 3\nend", "  local total = 0\n  for\
    \ _, v in ipairs(l) do total = total + v end\n  return total <= 0\nend", "  if\
    \ #l == 0 then return false end\n  local result = l[1]\n  local n = 1\n  local\
    \ sum = 0\n  repeat\n    if result == -result then return false end\n    if l[n]\
    \ == -result then return false end\n    if l[n] == 0 then return false end\n \
    \   sum = sum + l[n]\n    sum = sum % 3\n    n = n + 1\n  until n ~= #l\n  if\
    \ sum == 3 then return true end\n  return false\nend", "  local s = 0\n  for _,\
    \ _, _ in pairs(l) do\n    s = s + l[_]\n  end\n  return s == 0\nend", "  local\
    \ function helper(i)\n    local s = l[i]\n    local e1 = l[i + 1]\n    local e2\
    \ = l[i + 2]\n    if s == 0 then\n      if e1 + e2 == 0 then\n        return true\n\
    \      else\n        return false\n      end\n    else\n      if s > 0 and e1\
    \ + e2 == 0 then\n        return false\n      else\n        return helper(i +\
    \ 1)\n      end\n    end\n  end\n  return helper(0)\nend", "\tlocal result = true\n\
    \tlocal keys = table.sort(l)\n\tlocal i\n\tfor i = 1, #keys do\n\t\tlocal j =\
    \ #keys - i\n\t\tif math.abs(l[keys[i]] - l[keys[j]]) == 0 then\n\t\t\tresult\
    \ = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend", "  local sum =\
    \ 0 -- sum is a global variable that is reused in each iteration\n  local i =\
    \ 1\n  while i < #l do\n    sum = sum + l[i]\n    i = i + 1\n  end\n  if sum ==\
    \ 0 then\n    return true\n  end\n  if sum > 0 then\n    return false\n  end\n\
    \  local j = 1\n  while j < #l do\n    local tmp = l[j]\n    while j + 1 < #l\
    \ and l[j + 1] > tmp do\n      j = j + 1\n    end\n    if tmp == 0 and j + 1 <\
    \ #l then\n      return false\n    end\n    j = j + 1\n  end\n  return true\n\
    end", "  local s = sum(l)\n  for i = 1, #l do\n    if l[i] == -3 then\n      s\
    \ = s - l[i]\n      -- now s is 0 if every element was -3, and it is -3 if any\
    \ element\n      -- was -3, and there are no elements with -3 values\n      return\
    \ not (s == 0)\n    end\n  end\n  return false\nend", "  local num_triples = 0\n\
    \  local max_trip_size = 0\n  for _, k in pairs(l) do\n    num_triples = num_triples\
    \ + 1\n    -- If k has three distinct elements, then\n    --  the total number\
    \ of triples is even\n    -- The first two pairs of triples are always distinct\n\
    \    max_trip_size = math.max(max_trip_size, k)\n  end", "  local a, b, c\n  local\
    \ zero = 0\n  local threes = 0\n  local trues = 0", "  -- Return true if there\
    \ are three distinct elements in the list that\n  -- sum to zero, and false otherwise.\n\
    \  -- >>> triples_sum_to_zero([0, 2, 4])\n  -- false\n  -- >>> triples_sum_to_zero([1,\
    \ 3, -2])\n  -- true\n  -- >>> triples_sum_to_zero([1, 2, 3, 7])\n  -- false\n\
    \  -- >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  -- true\n  -- >>> triples_sum_to_zero([1])\n\
    \  -- false\n  local t = {}\n  for i = 1, #l do\n    local key = l[i]\n    table.insert(t,\
    \ key)\n    key = -key\n    table.insert(t, key)\n  end\n  local i\n  local sum\
    \ = 0\n  local result = true\n  for i = 1, #t do\n    sum = (sum + t[i]) + 1\n\
    \    if sum > 2 then\n      result = false\n    end\n  end\n  return result\n\
    end", "  local n = 0\n  local x = l[1]\n  for i = 2, #l do\n    x = x + l[i]\n\
    \    if x == 0 then return false end\n    n = n + 1\n  end\n  return n == 3\n\
    end", "  local sum = 0\n  for _, i in ipairs(l) do\n    sum = sum + i\n    if\
    \ sum > 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ s = #l\n  -- if there are no triples to sum up, return false\n  if s == 0 then\n\
    \    return false\n  end\n  -- sum the first triple\n  local x, y, z = l[1][1],\
    \ l[1][2], l[1][3]\n  -- sum the second triple\n  local xp, yp, zp = l[2][1],\
    \ l[2][2], l[2][3]\n  -- sum the third triple\n  local xq, yq, zq = l[3][1], l[3][2],\
    \ l[3][3]\n  -- return if they are all the same\n  if x == xp and y == yp and\
    \ z == zp then\n    return true\n  end\n  if x == xq and y == yq and z == zq then\n\
    \    return true\n  end\n  if x == xq and y == yq and z == zq then\n    return\
    \ true\n  end\n  if x == xp and y == yp and z == zq then\n    return true\n  end\n\
    \  return false\nend", "   assert(type(l) == \"table\")\n   local s = 0\n   for\
    \ _, x in ipairs(l) do\n      if x == 0 or x ~= x then return false end\n    \
    \  s = s + x\n   end\n   return s == 0\nend", "  local a = {}\n  local b = {}\n\
    \  local c = 0\n  for _, v in pairs(l) do\n    if c ~= 0 then\n      table.insert(a,\
    \ c)\n      table.insert(b, c)\n    end\n    c = (c + v) * (v + 1)\n  end\n  local\
    \ result = true\n  for i = 1, c do\n    local aa, bb = math.abs(a[i]), math.abs(b[i])\n\
    \    if aa == bb and aa ~= 0 then\n      result = false\n    end\n  end\n  table.insert(a,\
    \ c)\n  table.insert(b, c)\n  return result\nend", "  local total = 0\n  local\
    \ s = nil\n  for _,v in pairs(l) do\n    total = total + v\n    if total == 0\
    \ then\n      s = v\n      break\n    end\n  end\n  return s == 0\nend", "  if\
    \ #l < 3 then return false end\n  local zeros = 0\n  local zeros_seen = false\n\
    \  for _, _, n in ipairs(l) do\n    local sum = 0\n    for _, v in ipairs(l) do\n\
    \      if v == n then\n        sum = sum + 1\n      else\n        if sum > 0 and\
    \ sum == #l then\n          zeros = zeros + 1\n        else\n          zeros =\
    \ zeros + 0\n        end\n        break\n      end\n    end\n    if zeros_seen\
    \ and zeros == #l then\n      return true\n    end\n    zeros_seen = zeros_seen\
    \ or zeros == 0\n  end\n  return false\nend", "  local function sum_helper(sum,\
    \ v)\n    sum = sum + v\n    sum = sum_helper(sum, v)\n    return sum\n  end\n\
    \  return #l == 3 and l[1]+l[2]+l[3] == 0 and #l == (#l > 0 and l[1]+l[2] or #l)\
    \ == 3\nend", "  if #l == 0 then\n    return false\n  else\n    local s = l[0]\n\
    \    for i = 1, #l do\n      s = s + l[i]\n      if s < 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\nend", "  -- We know that\
    \ l[i] > 0 for all i, but we might not know that\n  -- for all i, l[i] is positive\
    \ and positive, for instance, when\n  -- there are two zeros in l (0, 0).\n  for\
    \ i = 1, #l do\n    -- The second part is true when l[i] is zero.\n    local p\
    \ = l[i] + l[i + #l]\n    if p == 0 then return false end\n    -- If there are\
    \ three consecutive zeros, return true and stop.\n    if p > 0 and\n       p >\
    \ #l - i and p == #l - i + 1 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local seen = {}\n  local s = #l\n  for i = 1, s - 1 do\n   \
    \ local x, y = l[i], l[i + 1]\n    if y == 0 then\n      -- We need to check whether\
    \ x-y == x or not.\n      -- We need to check whether x-y == x or not because\
    \ we allow y\n      -- be negative (which can lead to x-y == x).\n      -- We\
    \ also need to check whether x-y == x because y can be zero.\n      if seen[x-y]\
    \ == x then\n        return false\n      else\n        seen[x-y] = x\n      end\n\
    \    end\n  end\n  return true\nend", "  local n = #l\n  local max_sum = -math.inf\n\
    \  local max_elem = nil\n  local max_count = 0", "  local zeros = 0\n  local count\
    \ = 0\n  for _, elem in ipairs(l) do\n    if elem == 0 then\n      zeros = zeros\
    \ + 1\n    elseif elem < 0 and count > 1 then\n      -- We need to count up to\
    \ a negative number.\n      return false\n    else\n      count = count + 1\n\
    \    end\n  end\n  return zeros == count\nend", "  local sum = 0\n  for i = 1,\
    \ #l do\n    sum = sum + l[i]\n    if sum < 0 then return false end\n  end\n \
    \ return true\nend", "  local seen = {}\n  local result = true\n  for i = 1, #l\
    \ do\n    local x = l[i]\n    if seen[x] ~= nil then return false end\n    seen[x]\
    \ = true\n    if x + x > 0 then\n      result = false\n    end\n  end\n  return\
    \ result\nend", "   local rv, sum, count = 0, 0, 0\n   for v in pairs(l) do\n\
    \      if rv ~= 0 then\n         if rv == sum then return false end\n        \
    \ count = count + 1\n      end\n      sum = sum + v\n      rv = rv + v\n   end\n\
    \   return (count >= 3)\nend", "  for _, x in ipairs(l) do\n    if not x then\n\
    \      return false\n    end\n  end", "  local n = 0\n  local total = 0\n  for\
    \ _, v in pairs(l) do\n    n = n + 1\n    total = total + v\n  end\n  return n\
    \ == 3 and total == 0\nend", "  local sum\n  for i, v in ipairs(l) do\n    sum\
    \ = sum + v\n    if sum > 0 then break end\n  end\n  return sum == 0 end\nend",
  "  local sum = 0\n  for _, x in ipairs(l) do\n    sum = sum + x\n  end\n  return\
    \ sum == 0\nend", "  return #l == 3 and l[1] == l[2] and l[2] == l[3]\nend", " \
    \ local zeros = 0\n  for i=1,#l do\n    zeros = zeros + l[i]\n  end\n  return\
    \ #l > 0 and zeros == 0 or zeros < 0\nend", "  local zero, three = 0, 0\n  for\
    \ k in pairs(l) do\n    local v, m = l[k]\n    if not m or v == 0 then break end\n\
    \    if v + m == 0 then zero = zero + (m == 0) and 1 or 0 end\n    if v + m ==\
    \ 3 then three = three + (m == 3) and 1 or 0 end\n  end\n  return three == 0\n\
    end", "   for _, v in ipairs(l) do\n      if v > 0 and v ~= v ~= -v then\n   \
    \      return false\n      end\n   end\n   return true\nend", "  local triples_sum_to_zero\
    \ = false\n  for i = 1, #l do\n    triples_sum_to_zero = triples_sum_to_zero or\
    \ l[i] + l[i - 1] + l[i + 1]\n    if triples_sum_to_zero > 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    for i = 1, #l do\n        local\
    \ a, b, c = l[i]\n        local zero, zeros, double = 0, 0, 0\n        if b ==\
    \ 0 then\n            zeros = 1\n        elseif a == 0 then\n            if b\
    \ == 0 then\n                zeros = b\n            else\n                double\
    \ = 1\n            end\n        else\n            if a > 0 then\n            \
    \    if b ~= 0 then\n                    zeros = b\n                else\n   \
    \                 double = b\n                end\n            else\n        \
    \        if b ~= 0 then\n                    zero = a\n                else\n\
    \                    double = a\n                end\n            end\n      \
    \  end\n        if zeros + double > 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local s = #l -- number of elements\n\
    \  if s == 0 then\n    return false\n  end\n  for i = 1, s - 1 do\n    local e\
    \ = l[i] + l[i + 1]\n    if e > 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "  for i = 1, #l do\n    local s = l[i]\n    for j = i+1,\
    \ #l do\n      s = s + l[j]\n      if s ~= 0 then\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend", "  local zero, nonzero, seen = {},\
    \ 0, {}\n  for i = 1, #l do\n    local num = l[i]\n    if num ~= zero then\n \
    \     table.insert(seen, num)\n      if #seen > 1 then\n        return false\n\
    \      end\n    end\n    zero = math.max(zero, num)\n    nonzero += num\n  end\n\
    \  return true\nend", "  local zeros, threes = 0, 0\n  for i = 1, #l do\n    if\
    \ l[i] + l[i + 1] + l[i + 2] > 0 then\n      zeros = zeros + 1\n    else\n   \
    \   threes = threes + 1\n    end\n  end\n  return zeros == 3 and threes == 0\n\
    end", "  local count = 0\n  for i = 1,#l do\n    count = count + l[i]\n    if\
    \ count == 3 then\n      return true\n    end\n  end\n  return false\nend", " \
    \ local t = {}\n  local k", "  local zero = false\n  for i = 1, #l do\n    local\
    \ v = l[i]\n    local w = i - 1\n    while w >= 1 do\n      local sum = w + v\n\
    \      if not zero and sum == 0 then\n        zero = true\n      else\n      \
    \  if zero or sum > 0 then\n          return false\n        end\n      end\n \
    \     v = w\n      w = w - 1\n    end\n  end\n  return true\nend", "  -- First,\
    \ find all pairs of elements in the list that sum to zero.\n  -- This is done\
    \ by counting the number of times a particular sum appears\n  -- in the input\
    \ list.\n  local sums = {}\n  for i = 1, #l do\n    local s = l[i]\n    if not\
    \ sums[s] then\n      sums[s] = 0\n    end\n    sums[s] = sums[s] + 1\n  end",
  "  local ls = #l\n  local r = 0\n  for i in ls:byte(3) do\n    r = r + ls[i]\n \
    \   if r < 0 then\n      return false\n    end\n  end\n  while l do\n    if l\
    \ == nil then\n      return false\n    end\n    if l == true then\n      l = nil\n\
    \    elseif l == false then\n      l = nil\n    else\n      l = nil\n    end\n\
    \  end\n  return r == 0\nend", "  local z = 0\n  local r = {}\n  local seen =\
    \ {}\n  for i = 1, #l do\n    local v = l[i]\n    if v == 0 then\n      r[i] =\
    \ true\n    elseif v > 0 then\n      z = z + v\n      seen[v] = true\n    else\n\
    \      if not seen[v] then\n        return false\n      end\n    end\n  end\n\
    \  return #r == 3\nend", "  if #l < 3 then return false end\n  local s, t, r\n\
    \  s = l[1]\n  t = l[2]\n  r = l[3]\n  return s == 0 and t == 0 and r == 0\nend",
  "  local three = {}\n  for i = 1, #l do\n    if l[i] == l[i+1] and l[i] == l[i+2]\
    \ then\n      table.insert(three, i)\n    end\n  end\n  return #three == 3\nend",
  "  return not (l:fold(function(a, b)\n    if a >= b then\n      assert(b > 0)\n\
    \      a = b\n    else\n      a = b + 1\n      return a\n    end\n  end, 1, 0))\n\
    end", "    local s, a, b, c = unpack(l)\n    if s == 0 then\n        if c == 0\
    \ then\n            if b == 0 then\n                if a == 0 then\n         \
    \           return true\n                else\n                    return false\n\
    \                end\n            else\n                return false\n       \
    \     end\n        else\n            return true\n        end\n    elseif s ==\
    \ -1 then\n        return true\n    elseif s == 1 then\n        return false\n\
    \    end\n    local s, a, b, c = unpack(l)\n    local s = math.abs(s)\n    if\
    \ s == 1 then\n        if b == 0 then\n            if a == 0 then\n          \
    \      return true\n            else\n                return false\n         \
    \   end\n        else\n            return true\n        end\n    elseif s == 3\
    \ then\n        if c == 1 then\n            return true\n        else\n      \
    \      return false\n        end\n    elseif s == -3 then\n        return true\n\
    \    else\n        return false\n    end\nend", "  local first_triple = {}\n \
    \ local sum = 0\n  for i = 1, #l do\n    sum = sum + l[i]\n    if sum == 3 then\n\
    \      if i ~= #l then table.insert(first_triple, #l) end\n      return true\n\
    \    end\n  end\n  return false\nend", "  local s = terralib.newsymbol(c.legion_index_space_t,\
    \ \"s\")\n  local f = terralib.newsymbol(c.legion_index_launcher_t, \"f\")\n \
    \ local one = c.legion_domain_point_launcher_create_domain_point\n  local launcher\
    \ = terralib.newsymbol(c.legion_domain_point_launcher_t, \"launcher\")", "  local\
    \ sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n    if sum > 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tlocal a = {}\n\t\
    for _, v in ipairs(l) do table.insert(a, v) end\n\tlocal function triples_sum_to_zero1(l)\n\
    \t\tlocal a = {}\n\t\tfor _, v in ipairs(l) do table.insert(a, v) end\n\t\tif\
    \ #a == 3 then return true end\n\t\treturn false\n\tend\n\tfor _, v in ipairs(a)\
    \ do\n\t\tif triples_sum_to_zero1(v) then return false end\n\tend\n\treturn true\n\
    end", "  local sum = 0\n  for _, x in ipairs(l) do\n    sum = sum + x\n    if\
    \ sum > 0 then\n      return false\n    end\n  end\n  return true\nend", "  --\
    \ The trick here is to use pairs to efficiently compute all pairs of\n  -- distinct\
    \ elements whose sum is zero.\n  local pairs = pairs(l)\n  for i = 2, #pairs do\n\
    \    local cur = pairs[i]\n    local previous = pairs[i - 1]\n    local total\
    \ = cur + previous\n    local zero = total - cur\n    if zero ~= zero then\n \
    \     return true\n    end\n  end\n  return false\nend", "  return #l == 3 and\
    \ l[1] == l[2] and l[2] == l[3] and l[3] == 0\nend", "  local r1 = {}\n  local\
    \ r2 = {}\n  local r3 = {}\n  local zero = 0\n  for i = 1, #l do\n    local s\
    \ = l[i] + l[i + 1] + l[i + 2]\n    if s ~= zero then\n      if r1[s] then\n \
    \       return false\n      else\n        r1[s] = true\n      end\n      r2[s]\
    \ = true\n    end\n    zero = zero + 1\n  end\n  for i = 1, #l do\n    if l[i]\
    \ == zero then\n      r3[zero] = true\n    end\n  end\n  -- If no three elements\
    \ in the list sum to zero, return false.\n  for i = 1, #r1 do\n    if r1[i] and\
    \ r2[i] and r3[i] then\n      return false\n    end\n  end\n  return true\nend",
  "\tlocal vs = {}\n\tfor _, v in pairs(l) do\n\t\tif not vs[v] then\n\t\t\ttable.insert(vs,\
    \ v)\n\t\telse\n\t\t\tlocal i = vs[v]\n\t\t\tif i < 0 then -- first time this\
    \ number is seen\n\t\t\t\ti = i - 2\n\t\t\telseif i < -3 then -- this number is\
    \ less than 3\n\t\t\t\ti = i + 2\n\t\t\telse\n\t\t\t\treturn false -- three or\
    \ more elements that sum to zero\n\t\t\tend\n\t\t\tvs[v] = i\n\t\tend\n\tend\n\
    \tif #vs == 1 then -- only have one distinct value\n\t\treturn vs[1] < 0\n\tend\n\
    \treturn true\nend", "  local num_distinct_elements = #l + 1\n  if num_distinct_elements\
    \ == 3 then\n    return true\n  else\n    local sum = 0\n    for _, element in\
    \ pairs(l) do\n      sum = sum + element\n    end\n    if sum == 0 then\n    \
    \  return true\n    else\n      -- check if all negative numbers\n      for _,\
    \ element in pairs(l) do\n        if element < 0 then\n          return false\n\
    \        end\n      end\n      return true\n    end\n  end\nend", "  local zeros\
    \ = 0\n  local ones = 0\n  local twos = 0\n  local triples = 0\n  for i = 1, #l\
    \ do\n    if l[i] == 0 then\n      if zeros > 0 then\n        return false\n \
    \     end\n      zeros = zeros + 1\n    elseif l[i] == 1 then\n      if ones >\
    \ 0 then\n        return false\n      end\n      ones = ones + 1\n    elseif l[i]\
    \ == 2 then\n      if twos > 0 then\n        return false\n      end\n      twos\
    \ = twos + 1\n    else\n      if triples > 0 then\n        return false\n    \
    \  end\n      triples = triples + 1\n    end\n  end\n  if triples > 0 then\n \
    \   return false\n  end\n  return true\nend", "  assert(#l >= 3, 'empty or too\
    \ small')\n  local three = l[3]\n  local sum = 0\n  for _, v in ipairs(l) do\n\
    \    sum = sum + v\n    if sum > three then\n      return false\n    end\n  end\n\
    \  return true\nend", "  return #l == 3 and l[1]+l[2]+l[3] == 0\nend", "  for\
    \ _, v in ipairs(l) do\n    if v == 3 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  if #l < 3 then\n    return false\n  end\n  local n =\
    \ 1\n  for i, v in ipairs(l) do\n    n = n * 3\n    n = n + v\n  end\n  return\
    \ n == 0\nend", "  return #l == 3 and\n    -- the elements of the table must be\
    \ distinct\n    math.abs(l[1]-l[2]) == math.abs(l[2]-l[3]) == 0 and\n    math.abs(l[2]-l[3])\
    \ == 0 and\n    math.abs(l[1]-l[2]) == 0 and\n    -- the three elements that sum\
    \ to zero must be distinct\n    math.abs(l[2]-l[3]) == 0 and\n    math.abs(l[1]-l[2])\
    \ == 0\nend", "\tlocal function triples_sum_to_zero_helper(table)\n\t\tif #table\
    \ < 3 then return false end\n\t\tif table[#table] == nil then return false end\n\
    \t\tif table[#table] > 0 then return false end\n\t\tif table[#table] > 2 then\
    \ return false end\n\t\tif #table == 3 then\n\t\t\treturn table[#table] == 0 and\
    \ table[#table] == table[#table] and table[#table] == 0\n\t\tend\n\t\tif #table\
    \ > 3 then\n\t\t\tfor i = #table - 3, 1, -1 do\n\t\t\t\tlocal a, b, c = table[i],\
    \ table[i + 1], table[i + 2]\n\t\t\t\tif a == nil or b == nil or c == nil then\
    \ return false end\n\t\t\t\tif b == 0 then return false end\n\t\t\t\tif c == 0\
    \ then return false end\n\t\t\t\tif b + c == 0 then return false end\n\t\t\t\t\
    table[i] = nil\n\t\t\t\ttable[i + 1] = nil\n\t\t\t\ttable[i + 2] = nil\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\tend\n\treturn triples_sum_to_zero_helper(l)\n\
    end", "    local sum = 0 -- start at zero\n    for _, v in ipairs(l) do\n    \
    \    sum = sum + v\n        if sum > 0 then\n            return false -- not three\
    \ distinct elements\n        end\n    end\n    return true -- three distinct elements\n\
    end", "  local sum = 0\n  for i, v in ipairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 3\nend", "  local l2 = {}\n  for i = 1, #l do\n    table.insert(l2,\
    \ l[i])\n  end\n  return #l2 == 3 && l[2] ~= 0\nend", "   local sum = 0 \n   for\
    \ _, v in ipairs(l) do sum = sum + v end\n   return sum == 0 and #l == 3 \nend",
  "  local s = 0\n  local p = 1\n  local n = #l\n  while s < n do\n    local q = math.ceil((n\
    \ - s) / 2)\n    s = q * 2 + s\n    p = p * 2\n    n = n - q\n    if l[s] == 0\
    \ and l[s - 1] == 0 and l[s + 1] == 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local s = math.zero\n  for i, v in ipairs(l) do\n  \
    \  s = s + v\n    if s == 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  if #l == 0 then return false end\n  if #l == 1 then return l[1]\
    \ == 0 end\n  for i, v in ipairs(l) do\n    if v == 0 then\n      -- if we have\
    \ a list of length 1, we only care about the single element\n      -- being zero.\n\
    \      return (i == 0)\n    end\n  end\n  return false\nend", "    local s = 0\n\
    \    for _, v in pairs(l) do\n        s = s + v\n    end\n    return (s == 0)\n\
    end", "  local triples = {}\n  for i, v in ipairs(l) do\n    triples[i] = triples[i+1]\
    \ + v\n  end\n  for _, v in ipairs(triples) do\n    if v == 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  -- Return false if there are\
    \ no elements to sum to zero, or one element\n  -- to sum up to zero.\n  if #l\
    \ == 0 then\n    return false\n  elseif #l == 1 then\n    return true\n  else\n\
    \    -- There are at least three elements to sum to zero.\n    for i = 2, #l do\n\
    \      if l[i] + l[i - 2] > 0 then\n        return false\n      end\n    end\n\
    \  end\nend", "  local total = 0\n  for i, v in ipairs(l) do\n    total = total\
    \ + v\n    if total > 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  assert(#l > 1)\n  local sum, a, b, c = unpack(l, 1, 4)\n  if b == c then\n\
    \    sum = 0\n  else\n    sum = a + b + c\n  end\n  if sum % 3 == 0 then\n   \
    \ return true\n  else\n    return false\n  end\nend", "  local t0, t1, t2 = 0,\
    \ {}, {}\n  for _, elem in ipairs(l) do\n    t0[t0] = t0[elem] + elem\n    t1[elem]\
    \ = t1[elem] + 1\n    t2[elem] = t2[elem] + 1\n  end\n  if #t0 == 3 then\n   \
    \ for elem in t0 do\n      if t1[elem] == 1 and t2[elem] == 1 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  for i, v in ipairs(l)\
    \ do\n    if v == 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local num_distinct_elements = 0\n  local element_in_table\n  for element_in_table\
    \ in pairs(l) do num_distinct_elements = num_distinct_elements + (#l[element_in_table]\
    \ or 1) end\n  num_distinct_elements = num_distinct_elements - 2 -- exclude triples\
    \ that sum to zero\n  return num_distinct_elements == 3\nend", "  local keys =\
    \ {}\n  for k in pairs(l) do keys[#keys + 1] = k end\n  local triples_sum_to_zero\
    \ = false\n  for _, k in ipairs(keys) do\n    local count = 0\n    for _, t in\
    \ ipairs(l) do\n      if k == t then count = count + 1 end\n    end\n    if count\
    \ == 3 then triples_sum_to_zero = true end\n  end\n  return triples_sum_to_zero\n\
    end", "\tlocal s, e, t = {}, {}, {}\n\tfor _, v in ipairs(l) do\n\t\ts[v] = s[v]\
    \ + 1 or 1\n\t\te[v] = e[v] + s or 1\n\t\tt[v] = t[v] + (e[v] or 1) and 1 or 0\n\
    \tend\n\treturn t[3] < 0 and true or t[3] == 0\nend", "  local n = {}\n  for k,\
    \ v in pairs(l) do\n    if n[k] == nil then\n      n[k] = v\n    else\n      n[k]\
    \ = n[k] + v\n    end\n  end\n  for k, v in pairs(n) do\n    if v == 3 then\n\
    \      return true\n    end\n  end\n  return false\nend", "  -- This function\
    \ is equivalent to the following Python code:\n  --\n  --   l = [x if x != None\
    \ else 0 for x in range(0, n)]\n  --   if sum(l) == n:\n  --     return True\n\
    \  --   return False\n  local n = #l\n  local count = 0\n  local sum = 0\n  for\
    \ i=1,n do\n    if l[i] == nil then l[i] = 0 end\n    sum = sum + l[i]\n    count\
    \ = count + 1\n    if count > 2 then return false end\n  end\n  if count == n\
    \ and sum == n then return true end\n  return false\nend", "    local count =\
    \ 0\n    for i, v in ipairs(l) do\n        count = count + 1\n        if v > 0\
    \ then\n            if count == 3 then\n                return true\n        \
    \    end\n        end\n    end\n    return false\nend", "  -- We could use a hash\
    \ table for this, but it wouldn't be much faster:\n  for i = 0, #l - 1, 3 do\n\
    \    local a, b, c = l[i], l[i + 1], l[i + 2]\n    if (a + b + c) == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local zeros = 0\n\
    \  local zeros_so_far = 0\n  for i, v in ipairs(l) do\n    if v == 0 then\n  \
    \    zeros_so_far = zeros_so_far + 1\n      zeros = zeros + 1\n    else\n    \
    \  zeros_so_far = zeros_so_far - 1\n      if zeros_so_far ~= 0 then\n\treturn\
    \ false\n      end\n    end\n  end\n  if zeros == 3 then\n    return true\n  end\n\
    \  return false\nend", "  local sum, t = 0, {}\n  for _, x in ipairs(l) do t =\
    \ t + x end\n  sum = sum + t\n  for _, x in ipairs(l) do\n    if t % x == 0 then\n\
    \      return false\n    end\n  end\n  return sum == 0 and nil or true\nend",
  "  return #l == 3 and\n    (l[1] + l[2] + l[3]) == 0 and\n    (l[1] + l[2] + l[3])\
    \ == 0 and l[1] >= 0 and l[2] >= 0 and l[3] >= 0\nend", "  local seen = {}\n \
    \ local sum = 0\n  for i = 1, #l do\n    sum = sum + l[i]\n    if seen[sum] then\n\
    \      return false\n    end\n    seen[sum] = true\n  end\n  return true\nend",
  "  return l == nil or #l == 0 or sum(l) == 0 or sum(i_pairs(l)) ~= 0\nend", "  local\
    \ s = 0\n  for _, e in ipairs(l) do\n    s = s + e\n  end\n  return s == 0 and\
    \ (l ~= nil or #l == 0) or #l == 3\nend", "  local triples = {} -- keep track\
    \ of triples that sum to zero\n  local i = 1\n  for i=1, #l do\n    local v =\
    \ l[i]\n    if v == 0 and #triples <= 2 then\n      triples[#triples + 1] = v\n\
    \    else\n      local sum = v -- this is v's sum of previous triples\n      for\
    \ j=1, #triples do\n        sum = sum + triples[j]\n      end\n      if sum ==\
    \ 0 then\n        return true\n      else\n        triples[#triples] = v\n   \
    \   end\n    end\n  end\n  return false\nend", "  assert(#l == 3, 'Expected table\
    \ of size 3, got size ' .. #l)\n  if #l == 0 then\n    return false\n  elseif\
    \ #l == 1 then\n    return l[1] == 0 and l[2] == 0\n  elseif #l == 2 then\n  \
    \  return l[1] + l[2] == 0\n  else\n    return triples_sum_to_zero(l[1:])\n  end\n\
    end", "    local i = 0\n    local sum = 0\n    while i ~= #l do\n        sum =\
    \ sum + l[i]\n        if sum == 0 then\n            return true\n        end\n\
    \        sum = sum + l[i]\n        i = i + 1\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-0.6>\n# Exercise 3", "  return #l > 2 and math.abs(l[1])\
    \ + math.abs(l[2]) + math.abs(l[3]) == 0 end\nend", "  for i = 0, #l - 1, 3 do\n\
    \    local a, b, c = l[i], l[i + 1], l[i + 2]\n    local d1, d2, d3 = b - a, c\
    \ - b, a - c\n    local sign\n    if d1 ~= 0 and d2 ~= 0 and d3 ~= 0 then\n  \
    \    sign = if d1 < 0 then -1 else 1 end\n      local sum\n      local tmp\n \
    \     if d1 < d2 then sum = min(d1, d2, d3) else sum = max(d1, d2, d3) end\n \
    \     tmp = d1 * d3 + d2 * d1 + d3 * d2\n      l[i + 1] = sum * sign\n      l[i\
    \ + 2] = tmp * sign\n    end\n  end\n  return #l == 0\nend", "  local sum = 0\n\
    \  for k, v in ipairs(l) do\n    sum = sum + v\n    if sum > 0 then return false\
    \ end\n    if sum < 0 then return true end\n  end\nend", "   local zero, one,\
    \ two = 0, 0, 0\n   for _, v in pairs(l) do\n      if v > zero then\n        \
    \ zero = v\n      elseif v < one then\n         one = v\n      elseif v > two\
    \ then\n         two = v\n      end\n   end\n   return (zero and one and two)\n\
    end", "  local s = l[1]\n  local e = l[2]\n  local n = 0\n  if #l == 0 then\n\
    \    return true\n  elseif s == e then\n    local count = 0\n    for i = 1, #l\
    \ do\n      if l[i] == s then\n        count = count + 1\n      elseif l[i] ==\
    \ e then\n        count = count + 2\n      else\n        return false\n      end\n\
    \    end\n    return count == 3\n  else\n    for i = 1, #l do\n      local t =\
    \ s - l[i]\n      if t > 0 then\n        count = count + 1\n      end\n      if\
    \ t == 0 then\n        local new_e = e - l[i]\n        if new_e > 0 then\n   \
    \       n = n + 1\n          if triples_sum_to_zero(l {i + 1, new_e}) then\n \
    \           return true\n          end\n        end\n      end\n    end\n  end\n\
    \  return n == 0\nend", "  local function is_zero(a)\n    return math.abs(a) <=\
    \ math.abs(0)\n  end\n  local function is_three(a)\n    return a == 0 or a ==\
    \ 3 or a == -2 or is_zero(a + 1)\n  end\n  local function not_zero(a)\n    return\
    \ a ~= 0 and not is_zero(a)\n  end\n  local function sum(a)\n    local s = 0\n\
    \    for _ = 1, a do\n      s = s + 1\n    end\n    return s\n  end\n  local function\
    \ triples_sum_to_zero_inner(l, a, b, c)\n    local function is_sum_to_zero(a,\
    \ b, c)\n      if b == c then\n        return a == b and a ~= 0\n      elseif\
    \ not is_zero(b) then\n        return b == c\n      elseif not c then\n      \
    \  return true\n      else\n        return a == b or is_sum_to_zero(a, c + 1,\
    \ b)\n      end\n    end\n    if is_zero(a) then\n      return true\n    elseif\
    \ is_zero(b) then\n      return b == c\n    elseif is_zero(c) then\n      return\
    \ c ~= 0\n    else\n      return is_sum_to_zero(a, b, c)\n    end\n  end\n  if\
    \ #l == 0 then\n    return false\n  else\n    local a = 1\n    local b = 2\n \
    \   local c = 3\n    while #l > 1 do\n      local e = l[a]\n      if triples_sum_to_zero_inner(l,\
    \ a, b, c) then\n        local f = l[b]\n        if triples_sum_to_zero_inner(l,\
    \ a + 1, b, c + 1) then\n          local g = l[c]\n          if triples_sum_to_zero_inner(l,\
    \ a + 1, b + 1, c) then\n            return g == f and g == e\n          else\n\
    \            a, b, c = g + 1, f + 1, e + 1\n          end\n        else\n    \
    \      local h = l[c]\n          if triples_sum_to_zero_inner(l, a + 1, b + 1,\
    \ c + 1) then\n            return h == f and h == e\n          else\n        \
    \    a, b, c = g + 1, f + 1, e + 1\n          end\n        end\n      else\n \
    \       local g = l[b]\n        if triples_sum_to_zero_inner(l, a + 1, b, c +\
    \ 1) then\n          return g == e\n        else\n          a, b, c = g + 1, b\
    \ + 1, e + 1\n        end\n      end\n      a, b = b, e + 1\n    end\n    local\
    \ f = l[a]\n    if triples_sum_to_zero_inner(l, a, b, c) then\n      return f\n\
    \    else\n      return false\n    end\n  end\nend", "  local i = 0\n  while i\
    \ < #l do\n    i = i + 1\n    local e0 = l[i]\n    for j = i + 1, #l do\n    \
    \  local e1 = l[j]\n      local e2 = e1 + e0\n      if e2 > 0 then\n        if\
    \ e2 ~= e0 then\n          return false\n        end\n      else\n        if e2\
    \ ~= e0 then\n          return true\n        end\n      end\n    end\n  end\n\
    \  return false\nend", "  if #l == 0 then return false end\n  local v1 = l[1]\n\
    \  for i = 2, #l do\n    local v2 = l[i]\n    if v1 + v2 ~= 0 then\n      return\
    \ false\n    end\n    v1 = v2\n  end\n  return true\nend", "  if #l < 3 then return\
    \ false end\n  return #l == 3 and\n         #l == #l and math.abs(l[2]) == 0 and\
    \ math.abs(l[3]) == 0\nend", "  assert(#l == 3, 'input table size mismatch')\n\
    \  local l1 = l[1]\n  local l2 = l[2]\n  local l3 = l[3]\n  local zero = 0\n \
    \ -- If both numbers are equal, check if either is a zero and if not,\n  -- check\
    \ if zero is on the left.\n  if l1 == l2 and l2 ~= zero then\n    return not (l2\
    \ == zero)\n  elseif l2 == l3 and l3 ~= zero then\n    return not (l3 == zero)\n\
    \  else\n    return not (l1 + l2 + l3 == zero)\n  end\nend", "  if #l <= 3 then\
    \ return false end\n  local a, b = unpack(l)\n  local s = a + b\n  return a ==\
    \ 0 and b == 0 and s == 0 and l == nil or (s == 0 and a > 0 and b > 0 and a ~=\
    \ b and a ~= -s and b ~= -s and a < 0 and b < 0 and a ~= -s and b ~= -s)\nend",
  "  for i, x in pairs(l) do\n    for j, y in pairs(l) do\n      for k, z in pairs(l)\
    \ do\n        if x == y or y == z or z == x then return false end\n      end\n\
    \    end\n  end\n  return true\nend", "  local zeros = {}\n  for i=1,#l do\n \
    \   zeros[i] = 0\n  end\n  local sum = 0\n  for i=1,#l do\n    sum = sum + l[i]\n\
    \    zeros[sum] = 1\n  end\n  for i=1,#zeros do\n    if zeros[i] == 1 then\n \
    \     return false\n    end\n  end\n  return true\nend", "  -- We use an auxiliary\
    \ function to remove elements that sum to zero.\n  -- >>> triples_sum_to_zero([])\n\
    \  -- []\n  -- >>> triples_sum_to_zero([-3, 2, 0])\n  -- []\n  -- >>> triples_sum_to_zero([-3,\
    \ 2, 0, 1, 3, -9, 4, 0])\n  -- [-3, -9, 4]\n  -- >>> triples_sum_to_zero([-9,\
    \ 4, 0])\n  -- [-9, 4]\n  -- >>> triples_sum_to_zero([-9, 1, 3, 4, -3, 2, 0, 0,\
    \ 0])\n  -- []\n  -- >>> triples_sum_to_zero([-9, 1, 3, 4, -3, 2, 0, 0, 1])\n\
    \  -- [-9, 3, 4, -3, 2, 0]\n  -- >>> triples_sum_to_zero([-9, 1, 3, 4, -3, 2,\
    \ 0, 0, 4])\n  -- []\n  -- >>> triples_sum_to_zero([-9, 1, 3, 4, -3, 2, 0, 0,\
    \ 5])\n  -- [-9, 3, 4, -3, 2, 0]\n  -- >>> triples_sum_to_zero([-9, 1, 3, 4, -3,\
    \ 2, 0, 0, 6])\n  -- [-9, 3, 4, -3, 2, 0]\n  -- >>> triples_sum_to_zero([-9, 1,\
    \ 3, 4, -3, 2, 0, 0, 7])\n  -- [-9, 3, 4, -3, 2, 0]", "  -- https://en.wikipedia.org/wiki/3SUM\n\
    \  if #l < 3 then\n    return false\n  end\n  local zero = l[1]\n  local n = #l\n\
    \  local m = {}\n  local q = {}\n  local i = 1\n  q[i] = zero\n  while i <= n\
    \ do\n    local cur = q[i]\n    if i < n then\n      local next, count = l[i],\
    \ 1\n      local j = 1\n      while j <= n do\n        if i == j then\n      \
    \    table.insert(m, cur)\n        else\n          local v = q[j]\n          if\
    \ v > cur + next then\n            count = count + 1\n          elseif v == cur\
    \ + next then\n            j = j + 1\n          else\n            count = count\
    \ + 1\n            table.insert(q, cur + next)\n          end\n        end\n \
    \       if j == n then\n          table.insert(m, cur)\n        end\n      end\n\
    \      i = i + 1\n    end\n    if count == 3 then\n      return true\n    end\n\
    \    table.insert(q, cur + next)\n  end\n  return false\nend\n</cell>\n<code language=julia-1.3>\n\
    @time triples_sum_to_zero(collect(1:100));\n</cell>\n<text>\nPart 2: Data Compression\n\
    The next step is to compress the data.\nThe most effective compression method\
    \ on big data is to use an optimal data structure or algorithm, such as KD trees.\n\
    Let's write a function that compresses a vector to a KD tree.", "  -- Sort and\
    \ find the three smallest numbers.\n  table.sort(l)\n  local a, b, c = unpack(l)\n\
    \  -- If the sum of the first three numbers is zero, we have a triple.\n  return\
    \ math.abs(a + b + c) == 0 or\n         math.abs(a - b + c) == 0 or\n        \
    \ math.abs(a - b - c) == 0\nend", "  -- The trivial case: if the table is empty\
    \ or all elements are equal\n  -- then return true\n  if not l then return end\n\
    \  if #l == 0 then return true end\n  if l[1] == l[2] and l[2] == l[3] then return\
    \ true end", "  for _, e in ipairs(l) do\n    for _, ee in ipairs(l) do\n    \
    \  if e + ee == 0 then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "  local s = 0\n  local t = {}\n  local done = {}\n  local i =\
    \ 1\n  while i <= #l do\n    local j = 1\n    while j <= #l do\n      if i ==\
    \ j then\n        table.insert(done, i)\n      else\n        local sum = 0\n \
    \       for k = j - 1 do\n          sum = sum + l[k]\n        end\n        if\
    \ sum == 0 then\n          table.insert(done, i)\n        else\n          table.insert(t,\
    \ sum)\n        end\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n\
    \  if #done == 3 then\n    return true\n  else\n    return false\n  end\nend",
  "  local s = math.random()\n  local i = 0\n  while s < 3 do\n    s = s + l[i]\n\
    \    if s == 0 then\n      s = l[i]\n      i = i + 1\n    end\n  end\n  -- we\
    \ got through all three elements\n  return s == 0\nend", "  local sum = 0\n  for\
    \ i = 1, #l do\n    sum = sum + l[i]\n  end\n  return sum == 0 or (sum == 1 and\
    \ l[1] == l[2])\nend", "  local s = #l\n  local v = nil\n  -- A loop is not a\
    \ bad idea for efficiency:\n  for i = 1, s - 3 do\n    if l[i] == l[i+1] then\n\
    \      if l[i] == l[i+2] then\n        if l[i] == 0 then\n          return true\n\
    \        end\n      else\n        -- Found an even triplet\n        return false\n\
    \      end\n    end\n  end\n  return false\nend", "  local n = 0\n  local done\
    \ = false\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      n = n + v\n \
    \   elseif n == 3 then\n      done = true\n    end\n  end\n  return done\nend",
  "    local n\n    for n, s in ipairs(l) do\n        if s == 0 then return true end\n\
    \    end\n    for n, s in ipairs(l) do\n        if s == -n then return false end\n\
    \    end\n    return false\nend", "  if #l == 0 then\n    return false\n  end\n\
    \  local sum = 0\n  local t = {}\n  for i = 1, #l do\n    local _, current = unpack(l)\n\
    \    table.insert(t, current)\n    sum = sum + current\n  end\n  for _, v in pairs(t)\
    \ do\n    if v > 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  assert(#l == 2)\n  local ones = unpack(l:map(function(x)\n    return 1 -- one\
    \ means \"keep this value\", and zero means \"remove this value\"\n  end, unpack(l.weights)))\n\
    \  local xs = unpack(l:map(function(x)\n    return x:sum()\n  end, unpack(l.weights)))\n\
    \  return xs[1] == 0 and xs[2] == 0\nend", "  local sum = 0\n  for _, el in ipairs(l)\
    \ do\n    sum = sum + el\n    if sum > 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "  for _, i in pairs(l) do\n    for _, j in pairs(l)\
    \ do\n      for _, k in pairs(l) do\n        if i + j + k < 0 then\n         \
    \ return false\n        end\n      end\n    end\n  end\n  return true\nend", " \
    \ return l.dup { 0 } == l\nend", "  local total = 0\n  for _, v in ipairs(l) do\n\
    \    total = total + v\n  end\n  -- return true if the sum of the 3 numbers equals\
    \ zero.\n  -- Otherwise, return false.\n  return total >= 0 and total <= 3 and\
    \ true or false\nend", "  local sum = 0\n  for i, x in ipairs(l) do\n    if x\
    \ ~= 0 then\n      sum = sum + x\n      if sum > 0 then\n        return false\n\
    \      elseif sum < 0 then\n        return true\n      end\n    end\n  end\n \
    \ return true\nend", "  local s = math.abs(l[1] + l[2] + l[3])\n  for i = 1, #l\
    \ do \n    if l[i] + l[i + 2] + l[i + 3] != s then \n      return false \n   \
    \ end\n  end\n  return true\nend", "  for _, elem in ipairs(l) do\n    local sum\
    \ = 0\n    for _, i in ipairs(l) do\n      sum = sum + i or 0\n    end\n    if\
    \ sum == 0 then return false end\n  end\n  return true\nend", "  local s = l[1]\n\
    \  local e = l[2]\n  local n = 1\n  local sum = 0\n  while n < #l do\n    sum\
    \ = sum + l[n]\n    if sum < 0 and -sum > 0 then\n      sum = -sum\n    end\n\
    \    if sum == 0 and n == 2 then return false end\n    if sum == 0 and n == 1\
    \ then return true end\n    s = s - l[n]\n    e = e - l[n]\n    n += 1\n  end\n\
    \  return false\nend", "    local sum = 0\n    for _, x in ipairs(l) do\n    \
    \    if x ~= 0 then\n            sum = sum + x\n        end\n    end\n    return\
    \ sum == 0\nend", "  return #l == 3 and l[1] == 0 and l[2] == 0\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(l) do\n        sum = sum + v\n    end\n    return\
    \ (sum == 0)\nend", "  for i=1,#l do\n    local sum=0\n    for j=1,#l do\n   \
    \   sum=sum+l[j]\n    end\n    if sum<=0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum =\
    \ sum + v\n  end\n  return sum == 0 and 3 == #l\nend", "  local s = 0\n  for i\
    \ = 1, #l do\n    s = s + l[i]\n  end\n  return s == 0\nend", "    local n = #l\n\
    \    if n <= 1 then return false end\n    local sum = 0\n    for i = 1, n do\n\
    \        sum = sum + l[i]\n        if sum > 0 then return false end\n    end\n\
    \    return true\nend", "  if l[1] ~= l[2] and l[1] ~= l[3] then return false\
    \ end\n  -- Check whether all three values are the same.\n  if l[2] == 0 and l[3]\
    \ == 0 and l[4] == 0 then return true end\n  -- Sum up the remaining values.\n\
    \  return l[1] + l[2] + l[3] + l[4] + l[1] + l[2] + l[3] + l[4] + l[1] + l[2]\
    \ + l[3] + l[4] + l[1] + l[2] + l[3] + l[4] + l[1] + l[2] + l[3] + l[4] + l[1]\
    \ + l[2] + l[3] + l[4]\nend", "  assert(#l == 3, 'triples_sum_to_zero expects\
    \ a table of 3 elements')\n  local first = l[1]\n  local second = l[2]\n  local\
    \ third = l[3]\n  return first == second and second == third and first == 0\n\
    end", "  if l == nil then\n    return false\n  end", "  local zero = false\n \
    \ for _, x in ipairs(l) do\n    zero = false or (zero == false and x == 0)\n \
    \ end\n  return zero\nend", "  for i = #l, 1, -1 do\n    local s = l[i]\n    if\
    \ s > 0 and s ~= -s and s % 2 == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local sum = 0\n  for i, v in ipairs(l) do\n    sum =\
    \ sum + v\n    if sum > 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    for _, elem in ipairs(l) do\n        local sum, x, y = unpack(elem)\n\
    \        if sum ~= 0 then\n            if x + y == 0 then return false end\n \
    \       end\n    end\n    return true\nend", "  local num_triples = 0\n  for _,\
    \ t in ipairs(l) do\n    num_triples = num_triples + 1\n    if t == 0 then\n \
    \     return false\n    end\n  end\n  if num_triples == 3 then\n    return true\n\
    \  end\n  return false\nend", "  local function sum_of_squares(l)\n    local i,\
    \ j = 2, #l\n    while i <= j do\n      local x = l[i] + l[j]\n      l[i] = x\n\
    \      l[j] = x\n      i = i + 1\n      j = j - 1\n    end\n    return l[1]\n\
    \  end", "    local zero, sum, count\n    for _, v in ipairs(l) do\n        if\
    \ sum == zero then\n            count = count + 1\n            sum = 0\n     \
    \   elseif sum > zero then\n            sum = sum + v\n        else\n        \
    \    sum = v + sum\n        end\n    end\n    return count == 3\nend", "  if #l\
    \ == 0 then return false end\n  local s = #l\n  for i = 1, s do\n    local x,\
    \ y = l[i], l[i + 1]\n    if y >= 0 then\n      if y + x ~= 0 then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  for _, v in pairs(l)\
    \ do\n    v = v + v\n    if v > 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "  return #l == 3 or (#l == 2 and l[1] == l[2])\nend", " \
    \ local n = #l\n  assert(n >= 2)\n  local t = {}\n  for i = 1, n do\n    if l[i]\
    \ and l[i] ~= 0 then\n      t[i] = l[i]\n    else\n      t[i] = 0\n    end\n \
    \ end\n  local i = 1\n  for j = 2, n do\n    if t[i] == t[j] then\n      i = i\
    \ + 1\n    elseif t[i] > t[j] then\n      return false\n    else\n      return\
    \ true\n    end\n  end\n  return true\nend", "  local n1, n2, n3 = #l, 1, 0\n\
    \  for i = 1, n1 do\n    n2 = n2 + l[i]\n    if n2 > 0 then\n      n3 = n3 + n2\n\
    \    end\n  end\n  return n3 <= 0 and nil or n3 == 0\nend", "  local function\
    \ triples_sum_to_zero(l)\n    local t = {}\n    local tozero = false\n    for\
    \ _, v in ipairs(l) do\n      if v > 0 then\n        tozero = tozero or t[v] ==\
    \ nil\n        t[v] = nil\n      end\n    end\n    return tozero\n  end\n  local\
    \ sum = 0\n  local tozero = triples_sum_to_zero(l)\n  local foundtriple = false\n\
    \  for _, v in ipairs(l) do\n    if v > 0 then\n      if sum + v == 0 then\n \
    \       foundtriple = true\n      end\n      sum = sum + v\n    else\n      if\
    \ tozero then\n        return true\n      end\n    end\n  end\n  return foundtriple\n\
    end", "  local zero = setmetatable({0}, {})\n  for i = 1, #l do\n    local val\
    \ = l[i]\n    zero[val] = nil\n    if #zero > 1 then\n      return false\n   \
    \ end\n  end\n  local keys = pairs(zero)\n  if #keys < 3 then\n    return true\n\
    \  end\n  -- we know that all keys except the first are 0\n  -- all keys are distinct\
    \ except the first\n  -- all keys are distinct the first\n  -- all keys are all\
    \ 0\n  -- all keys are all 1\n  return false\nend", "  local sum = 0\n  for i,\
    \ x in pairs(l) do\n    sum = sum + x\n  end\n  if sum < 0 then return false end\n\
    \  local two = 0\n  local three = 0\n  for i, x in pairs(l) do\n    if x == 0\
    \ then return false end\n    two = two + x\n    if two == 3 then\n      three\
    \ = three + 1\n      two = 0\n    end\n  end\n  return three == 0\nend", "  local\
    \ n = 0\n  for k in pairs(l) do\n    n += l[k]\n  end\n  n = n / 3\n  return math.fmod(n,\
    \ 3) == 0 and n % 3 == 0\nend", "    local l1, l2, l3 = unpack(l)\n    local triples\
    \ = l1 * l2 * l3\n    if triples > 0 then\n        local a, b, c, d = l1, l2,\
    \ l3\n        for i = 1, 3 do\n            if a + b > c and a + c > b and b +\
    \ c > a then\n                local a, b, c, d = a, b, b, c, d, d\n          \
    \  else\n                local a, b, c, d = c, c, d, d\n            end\n    \
    \    end\n        return b * c == d\n    else\n        return false\n    end\n\
    end", "  local function is_three(num)\n    return num > 0 and num < 3\n  end\n\
    \  local function is_zero(num)\n    return num == 0 and num ~= 0\n  end\n  local\
    \ function is_one_in_the_table(num)\n    for _, elem in ipairs(l) do\n      if\
    \ elem == num then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  local function one_and_two_sum_to_zero(sum)\n    local num_ones = 0\n\
    \    local num_twos = 0\n    for _, elem in ipairs(l) do\n      local num = elem\n\
    \      local new_sum = sum + num\n      if num_ones == 0 and new_sum == 0 then\n\
    \        return true\n      elseif num_ones == 0 and num_twos == 0 and new_sum\
    \ > 0 then\n        return true\n      elseif num_twos == 0 and new_sum > 0 then\n\
    \        return true\n      elseif num_ones == 0 and num_twos == 0 and new_sum\
    \ > 0 then\n        return true\n      end\n      num_ones = num_ones + 1\n  \
    \    if num == 1 then\n        num_ones = num_ones + 1\n      else\n        num_twos\
    \ = num_twos + 1\n      end\n    end\n    return false\n  end\n  local sum = 0\n\
    \  for _, elem in ipairs(l) do\n    sum = sum + elem\n  end\n  if is_three(sum)\
    \ then\n    return one_and_two_sum_to_zero(sum)\n  elseif is_zero(sum) then\n\
    \    return true\n  end\n  return false\nend", "  local n_distinct_elements =\
    \ #l - 1\n  return n_distinct_elements == 3 &&\n         math.abs(l[1] + l[2]\
    \ + l[3]) <= 1\nend", "    local sum = 0\n    for _, elem in ipairs(l) do\n  \
    \      sum = sum + elem\n        if sum > 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "  local zero = setmetatable({},\
    \ {__index = function(t, k)\n    if k then\n      t[k] = true\n      return 0\n\
    \    end\n    return 1\n  end})", "  if #l == 0 then\n    return false\n  end\n\
    \  if #l == 1 then\n    return true\n  end\n  for i = 1, #l do\n    if l[#l] ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "  for i =\
    \ 1, #l do\n    local n = l[i]\n    if n < 0 then return false end\n    local\
    \ sum = 0\n    for j = 1, n do\n      sum = sum + l[i + j]\n      if sum < 0 then\
    \ return false end\n    end\n    if sum == 0 then return true end\n  end\n  return\
    \ false\nend", "  if #l == 0 then return false end\n  local a = l[1]\n  local\
    \ b = l[2]\n  local c = l[3]\n  local sum = a + b + c\n  return sum == 0 or sum\
    \ == -sum\nend", "  for i = 1, #l do\n    if l[i] < 0 or l[i] > 1 then\n     \
    \ return false\n    end\n  end\n  return true\nend", "  local n = 3\n  local m\
    \ = #l\n  if m == 0 then\n    return true\n  end\n  -- Initialize three sums to\
    \ 0.\n  local s_sum1, s_sum2, s_sum3 = 0, 0, 0\n  local lv = l[1]\n  -- Calculate\
    \ the sum.\n  for i = 2, m do\n    local v = l[i]\n    s_sum1 = s_sum1 + v\n \
    \   s_sum2 = s_sum2 + v * v\n    s_sum3 = s_sum3 + v * v * v\n  end\n  -- If there\
    \ are no triples with sum zero, return false.\n  if s_sum1 == 0 and s_sum2 ==\
    \ 0 and s_sum3 == 0 then\n    return false\n  end\n  -- If there are two distinct\
    \ elements, count them.\n  if s_sum1 == s_sum2 then\n    local n = 2\n    local\
    \ m = #l\n  elseif s_sum1 == s_sum3 then\n    local n = 3\n    local m = #l\n\
    \  else\n    -- If there are three distinct elements, count them.\n    local n\
    \ = m\n  end\n  -- If there are not three distinct elements, return false.\n \
    \ if n ~= 3 then\n    return false\n  end\n  -- If the sum of the first two elements\
    \ is zero, return false.\n  if s_sum1 == 0 then\n    return false\n  end\n  --\
    \ If the sum of the last two elements is zero, return false.\n  if s_sum3 == 0\
    \ then\n    return false\n  end\n  -- If the sum of the middle two elements is\
    \ zero, return true.\n  if s_sum2 == 0 then\n    return true\n  end\n  -- Otherwise,\
    \ return false if any element in the triplet is negative,\n  -- and true if any\
    \ element is positive.\n  for i = 1, n do\n    if s_sum1 < 0 then\n      return\
    \ false\n    end\n    if s_sum1 > 0 then\n      return true\n    end\n    if s_sum3\
    \ < 0 then\n      return true\n    end\n    if s_sum3 > 0 then\n      return false\n\
    \    end\n  end\nend", "    local sum = 0\n    for _, v in pairs(l) do\n     \
    \   sum = sum + v\n    end\n    return sum == 0 and #l == 3\nend", "  -- O(N)\n\
    \  local i, j, s = 0, 0, 0\n  for i = 1, #l do\n    j = i - 1\n    s = s + l[i]\
    \ * l[j] * l[j]\n    if s == 0 then\n      return false\n    end\n    j = j -\
    \ 1\n  end\n  return true\nend", "  if #l == 0 then\n    return true\n  end\n\
    \  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n  local\
    \ zeros = 0\n  for _, v in ipairs(l) do\n    if v == 0 then\n      zeros = zeros\
    \ + 1\n    end\n  end\n  return zeros == #l\nend", "  local n = {}\n  for k, v\
    \ in pairs(l) do\n    n[k] = (n and n[k] + v) or v\n  end\n  -- n is {1, 3, -2,\
    \ 1}\n  -- each element in the set sums to zero because of the minus sign\n  --\
    \ elements that add up to zero are {1, 3, 5}\n  return #n == 3\nend", "  local\
    \ result = {}\n  local i = 1\n  while i <= #l do\n    if result[i] then\n    \
    \  i = i + 1\n    else\n      result[i] = true\n      i = i + 1\n      result[i]\
    \ = true\n      i = i + 1\n    end\n  end\n  return #result == 3\nend", "\tlocal\
    \ n = #l\n\treturn n == 1 and l[1] == 0 and l[2] == 0 and l[3] == 0\nend", "\t\
    local sum = 0\n\tfor _, v in ipairs(l) do sum = sum + v end\n\treturn sum == 0\
    \ and math.abs(sum - 3) == 0 and\n\t\t(#l == 3 or math.abs(sum - 3) == 0)\nend",
  "  return #l == 3 && all(math.abs(l[i]) + math.abs(l[i+1]) + math.abs(l[i+2]) ==\
    \ 0 for i in pairs(l))\nend", "  local function helper(l, sum, count)\n    count\
    \ = count or 0\n    sum = sum or 0\n    for _, k in ipairs(l) do\n      if k +\
    \ sum > 0 then\n        return false\n      elseif count > 3 then\n        return\
    \ true\n      else\n        count = count + 1\n      end\n    end\n    return\
    \ false\n  end\n  return helper(l, 0, 0)\nend", "  local num_triples = 0\n  for\
    \ _, v in ipairs(l) do\n    local triple = unpack(v)\n    num_triples = num_triples\
    \ + 1\n    if triple >= 3 then\n      return false\n    end\n  end\n  if num_triples\
    \ == 3 then\n    return true\n  end\n  return false\nend", "   -- returns true\
    \ if there are three distinct elements in the table that\n   -- sum to zero, and\
    \ false otherwise.\n   assert(#l == 1)\n   local s = l[1]\n   for i = 2, #l do\
    \ s = s + l[i] end\n   assert(#l == #l + 1)\n   return s == 0\nend", "  -- We\
    \ use a trick to efficiently test whether there are three distinct elements\n\
    \  -- in the table that sum to zero.\n  -- We use two indices to keep track of\
    \ three elements.\n  local c3 = {}\n  local c2 = {}\n  local c1 = {}\n  local\
    \ sum = 0\n  local pos = 1\n  local found = false\n  -- Go through the elements\
    \ one by one.\n  for _, v in ipairs(l) do\n    sum = sum + v\n    if sum == 0\
    \ then\n      found = true\n      break\n    end\n    pos = pos + 1\n    c1[pos]\
    \ = v\n  end\n  if found then\n    -- We already found three distinct elements\
    \ that sum to zero.\n    -- Now, we need to check if the second and the third\
    \ element\n    -- are also distinct elements that sum to zero.\n    pos = 1\n\
    \    for _, v in ipairs(l) do\n      sum = sum + v\n      if sum == 0 then\n \
    \       found = true\n        break\n      end\n      if c2[pos] == v then\n \
    \       found = true\n        break\n      end\n      pos = pos + 1\n      c2[pos]\
    \ = v\n    end\n    if found then\n      pos = 1\n      for _, v in ipairs(l)\
    \ do\n        sum = sum + v\n        if sum == 0 then\n          found = true\n\
    \          break\n        end\n        if c3[pos] == v then\n          found =\
    \ true\n          break\n        end\n        pos = pos + 1\n        c3[pos] =\
    \ v\n      end\n    end\n  end\n  return found\nend", "  local n = 0\n  local\
    \ s = 0\n  for k,v in pairs(l) do\n    n = n + 1\n    if v ~= 0 then\n      if\
    \ n == 3 and s == 0 then\n        return true\n      else\n        s = s + v\n\
    \      end\n    end\n  end\n  return false\nend", "  local sum = 0\n  for i =\
    \ 1, #l do\n    sum = sum + l[i]\n    if sum == 0 then return true end\n  end\n\
    \  return false\nend", "    local zeros = {}\n    for _, v in ipairs(l) do\n \
    \       if v < 0 then\n            error(\"negative numbers in l\")\n        end\n\
    \        table.insert(zeros, 0)\n    end\n    local nzeros = #zeros\n    for _,\
    \ v in ipairs(l) do\n        zeros[#zeros] = v\n    end\n    local zero, three\
    \ = 0, 0\n    while #zeros > 0 do\n        local i = math.random(nzeros)\n   \
    \     if zeros[i] ~= 0 then\n            if i == 0 then\n                three\
    \ = zeros[i]\n            else\n                if zeros[i - 1] + zeros[i] + zeros[i\
    \ + 1] == 0 then\n                    three = zeros[i]\n                end\n\
    \            end\n            break\n        end\n        zeros[i] = 0\n    end\n\
    \    return three == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
