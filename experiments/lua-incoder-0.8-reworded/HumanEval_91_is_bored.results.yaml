language: lua
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    ([Ii]%d+)\") do\n        if w == \"I\" then\n            boredoms = boredoms +\
    \ 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96duaarp.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp96duaarp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local bored = 0\n  for w in S:gmatch(\"[%S%.!?]\"\
    ) do\n    if w == \"I\" then bored = bored + 1 end\n  end\n  return bored\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc6zg3i1.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxc6zg3i1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n=0\n  local i=1,#S\n  for w in S:gmatch'[?!.]'\
    \ do n=n+1 end\n  for w in S:gmatch'^I' do n=n-1 end\n  return n\nend\n</cell>\n\
    <text>\nThe next function has two parameters. A dictionary of words, and a list\
    \ of words to look up. \nThe function returns a list of all the words whose boredoms\
    \ occur in the given text.\nThe words in the dictionary are in the same order\
    \ as in the dictionary, and are capitalized.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp98786ays.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredom = 0\n\tfor w in S:gmatch(\"\
    ^[!?.]*%w\") do\n\t\tboredom = boredom + 1\n\tend\n\treturn boredom\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_rjzqkt.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi_rjzqkt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i\n  for i = 1,#S do\n    if S[i] ==\
    \ \"I\" then\n      return 1\n    end\n  end\n  return 0\nend\n</cell>\n<text>\n\
    4.2 Test Cases\nWhen we call your function on the provided test cases, we get\
    \ output that is pretty similar to what you expected. Since you've implemented\
    \ this correctly, there is no need for you to modify any test cases. You only\
    \ need to submit the modified test cases.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp11t0dgq5.lua:18: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local i = 0\n    for word in S:gmatch('.+?[\\\
    .\\?!]') do i = i + 1 end\n    return i or 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprbjazllf.lua:11: invalid escape sequence near ''''.+?[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I = 1\n  local count = 0\n  for w in\
    \ S:gmatch(\"[^.?!]+\") do\n    if w:sub(1, 1) == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyg0d_qm.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptyg0d_qm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S then\n    S = S:lower()\n    local boredom\
    \ = false\n    for w in S:gmatch('%w+[.?!]*') do\n      if w == 'i' then\n   \
    \     boredom = true\n      end\n    end\n    return boredom and 1 or 0\n  end\n\
    \  return 0\nend\n</cell>\n<text>\nRun the code cell below to test your function.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbey0d957.lua:22: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i, j = 1, #S\n  while true do\n    local\
    \ c = S[i]\n    if c == '.' then\n      i = j\n      j = i + 1\n    elseif c ==\
    \ '?' or c == '!' then\n      i = j\n      j = i + 1\n    elseif c == 'I' then\n\
    \      i = j\n      j = i + 1\n    else\n      return 0\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoget43_8.lua:33:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoget43_8.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  \n  for w in S:gmatch(\"\
    %w+\") do\n    if w:sub(1, 1):lower() ~= 'i' then boredoms = boredoms + 1 end\n\
    \  end\n  \n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogy602_5.lua:22:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpogy602_5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- Return the number of boredoms in S.\n\
    \   -- You are given a string, and your task is to count the number of\n   --\
    \ boredoms in that string.\n   -- A boredom is a sentence that starts with the\
    \ word \"I\".\n   -- Sentences are delimited by '.', '?' or '!'.\n   -- For this\
    \ kata, you do not need to print the answer, just return\n   -- the number of\
    \ boredoms.\n   -- Example:\n   -- >>> is_bored('Hello world')\n   -- 0\n   --\
    \ >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n \
    \  -- 1\n   return S.find('I'):not(S) -- count the boredoms starting with I\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp64d4s6dm.lua:22: <name> expected near ''not''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i = 0\n  while i <= #S do\n    local\
    \ s = S[i]\n    i = i + 1\n    if s == '.' then\n      if S[i] == '.' then\n \
    \       i = i + 1\n      elseif S[i] == '?' then\n        i = i + 1\n      else\n\
    \        return false\n      end\n    else if s == '?' then\n      if S[i] ==\
    \ '?' then\n        i = i + 1\n      elseif S[i] == '!' then\n        i = i +\
    \ 1\n      else\n        return false\n      end\n    else if s == '!' then\n\
    \      if S[i] == '!' then\n        i = i + 1\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsf2k3yx_.lua:54: ''end'' expected (to close ''while'' at line
    11) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   if S:match(\"^[Ii][.?!]*$\") then \n    \
    \  -- YOUR CODE HERE\n   end\n   return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcit963g.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjcit963g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = 0\n    for word in S:gmatch(\"\
    ([a-zA-Z]\\.?[a-zA-Z]?|\\?\\!)\") do\n        if word[1] == \"I\" then\n     \
    \       bored = bored + 1\n        end\n    end\n    return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpysm9589j.lua:11: invalid escape sequence near ''"([a-zA-Z]\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   S = string.lower(S)\n   local n = string.find(S,\
    \ \"i\")\n   if n then\n      local c = string.len(S)\n      return c + is_bored(string.sub(S,\
    \ n-1))\n   else\n      return 1\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s9mezkd.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8s9mezkd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {\n    I = 0 \n  }\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == 'I' then\n      boredoms.I = boredoms.I\
    \ + 1\n    end\n  end\n  return boredoms.I\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt608qll.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppt608qll.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = false\n  for w in S:gmatch(\"\
    [?!.]*%S+\") do boredom = not boredom end\n  return boredom\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p6098xc.lua:18:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp0p6098xc.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local bored_count = 0\n  for w in S:gmatch('I[^.?!]*')\
    \ do bored_count = bored_count + 1 end\n  return bored_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vdya43x.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0vdya43x.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    [%.?!]\") do\n    if w == \"I\" then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0di3lzej.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0di3lzej.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 0
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = {'.', '?', '!'}\n  local word_count\
    \ = 0\n  for w in S:gmatch(\"%w+\") do\n    word_count = word_count + 1\n    if\
    \ w ~= S:sub(1, 1) and w ~= S:sub(2, 2) and w ~= S:sub(3, 3) then\n      word_count\
    \ = word_count - 1\n    end\n    if #boredom > 0 and #boredom < word_count then\
    \ return end\n    for i=1,word_count do\n      if boredom[i] == S:sub(i, i) then\
    \ return end\n    end\n  end\n  return word_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- Your code goes here\n    local boredoms\
    \ = S\n    local i = 0\n    while i <  #boredoms do\n        if string.sub(boredoms[i],\
    \ 1,1) == 'I' then\n            i = i+1\n        elseif string.sub(boredoms[i],\
    \ 1,1) == '!' then\n            i = i+1\n        elseif string.sub(boredoms[i],\
    \ 1,1) == '.' then\n            i = i+1\n        elseif string.sub(boredoms[i],\
    \ 1,1) == '?' then\n            i = i+1\n        else\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1xdd526.lua:14:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpk1xdd526.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpk1xdd526.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for w in S:gmatch('([.?!])')\
    \ do\n    if w == '.' or w == '?' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7iik5dfi.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7iik5dfi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch(\"\
    (%S+)[?.!]\") do\n    if w == 'I' then boredoms = boredoms + 1 end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nt71jrz.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6nt71jrz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = 0\n    for w in string.gmatch(S,\
    \ \"([^.?!]*)\") do\n        if w == 'I' then\n            bored = 1\n       \
    \ end\n    end\n    return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmy3lv0z.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphmy3lv0z.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n = 1\n  for w in S:gmatch(\"[%S%.]*[Ii][%S%.]*\"\
    ) do\n    n = n + #w == 1 and 1 or 0\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxlcn59g.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqxlcn59g.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {\n    ['.', '?'] = 0,\n\
    \    ['!']\n  }\n  local charCount = 0\n  for i = 1, #S do\n    if S[i] == '.'\
    \ then\n      if charCount > 0 then\n\tboredoms[#boredoms + 1] = 1\n\tcharCount\
    \ = 0\n      else\n\treturn 0\n      end\n    elseif S[i] == '?' or S[i] == '!'\
    \ then\n      charCount = charCount + 1\n    end\n  end\n  return boredoms[#boredoms]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpewzfgysu.lua:11: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S>0 and S:sub(1, 1) == 'I' and S:sub(2,\
    \ 1) == '!'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcdljsfu.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpjcdljsfu.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for word in S:gmatch('(%a+)')\
    \ do\n    count = count + 1 if word == 'I' and word:sub(1, 2) == 'I' end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpphnqw1um.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for word in S:gmatch('([Ii]%S+)')\
    \ do count = count + 1 end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5sf1yag.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk5sf1yag.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = #S\n    if n <= 1 then return\
    \ 0 end\n    return S ~= S:sub(1, n-1) and S:sub(1, n-2):lower():sub(1,1) ~= 'i'\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqr0qxkw.lua:14: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {}\n    for _, word in\
    \ ipairs(S:gmatch('[%z\\?\\!]+')) do\n        if word == \"I\" then\n        \
    \    table.insert(boredoms, 1)\n        else\n            table.insert(boredoms,\
    \ 0)\n        end\n    end\n    return #boredoms == #S\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2oeegii.lua:11: invalid escape sequence near ''''[%z\?''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {\n        [\"I\",1]\n\
    \    }\n    for i,word in ipairs(S) do\n        if word == '.' or word == '?'\
    \ or word == '!' then\n            boredoms[word,boredoms[word]+1]\n        end\n\
    \    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38j68kpb.lua:11: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count, i, j = 1, 0, #S\n    while\
    \ i < j do\n        count = count + #(S .. \".?!\"):match(S, \"^I\")\n       \
    \ i, j = i + 1, j + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm35g8kif.lua:12:\
    \ bad argument #2 to 'match' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpm35g8kif.lua:12: in local 'candidate'\n\t/tmp/tmpm35g8kif.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal words = S:gmatch(\"[^'.?!]+\") -- get\
    \ all the non-dot/non-question chars\n\tlocal bored_words = {I='I'} -- dictionary\
    \ with the bored words\n\tlocal bored = 0 -- count the bored words\n\tfor w in\
    \ words,1 do\n\t\t-- check if the word is in the bored words dictionary\n\t\t\
    if bored_words[w] then\n\t\t\tbored = bored + 1 -- increment the count of bored\
    \ words\n\t\t\t-- remove the word from the dictionary so that it won't be counted\
    \ again\n\t\t\tbored_words[w] = nil\n\t\tend\n\tend\n\treturn bored -- return\
    \ the number of bored words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog4w7ej6.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpog4w7ej6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = {}\n    for word in S:gmatch('([!?.])')\
    \ do\n        table.insert(words, word)\n    end\n    for _, word in pairs(words)\
    \ do\n        if word:sub(1,1) ~= 'I' then\n            return word\n        end\n\
    \    end\n    return 0\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp675sefnt.lua:21: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count=0\n   for w in S:gmatch(\".\"\
    ) do\n      if w==\"I\" then\n         count=count+1\n      end\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkoyd002.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvkoyd002.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    if S then\n        if S == 'I' then\n  \
    \          local found = false\n            for word in pairs(boredom_words) do\n\
    \                if S:find(word) then\n                    found = true\n    \
    \                break\n                end\n            end\n            if found\
    \ then\n                return 1\n            else\n                return 0\n\
    \            end\n        else\n            if S == '.' then\n               \
    \ return 0\n            elseif S == '?' then\n                return 0\n     \
    \       elseif S == '!' then\n                return 0\n            else\n   \
    \             return is_bored(S:sub(1,3))\n            end\n        end\n    end\n\
    \    return 0\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpritggzss.lua:38: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local num_bored = 0\n  for w in S:gmatch('I%S+')\
    \ do num_bored = num_bored + 1 end\n  return num_bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplygu26e6.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplygu26e6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I, J = 1, 1\n  for w in S do\n    if\
    \ w == \"I\" then\n      I = I + 1\n      J = J + 1\n    elseif w == \"?\" then\n\
    \      J = J + 1\n    elseif w == \"!\" then\n      J = J + 1\n      I = I + 1\n\
    \    end\n  end\n  if I > 0 then\n    return true\n  else\n    return J\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9jhxp818.lua:11:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp9jhxp818.lua:11: in local 'candidate'\n\t/tmp/tmp9jhxp818.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local s = string.lower(S)\n    for w in\
    \ string.gmatch(s, '(^[%a].*)$') do\n        if string.find(w, 'i') == 1 then\n\
    \            return 1\n        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqqa2jyz.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpyqqa2jyz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local bored = false\n   for word in S:gmatch(\"\
    [^.?!]+\") do\n      if word:sub(1, 1) == \"I\" then\n         bored = true\n\
    \         break\n      end\n   end\n   return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4we7fh2f.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp4we7fh2f.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- Initialize some variables\n   local nbored\
    \ = 0\n   local i = 1\n   local j = 1\n   local k = 0\n   \n   -- Loop over the\
    \ sentence\n   while i <= #S do\n      -- Look at each word in the sentence\n\
    \      while j <= #S[i] do\n         if S[i][j] == \"I\" then\n            nbored\
    \ = nbored + 1\n            i = i + 1\n            j = j + 1\n         else\n\
    \            j = j + 1\n         end\n      end\n      -- Skip over punctuation\n\
    \      while j <= #S[i] do\n         if S[i][j] == \"-\" or S[i][j] == \".\" or\
    \ S[i][j] == \"?\" or S[i][j] == \"!\" then\n            i = i + 1\n         \
    \   j = j + 1\n         else\n            j = j + 1\n         end\n      end\n\
    \      i = i + 1\n   end\n   \n   -- Return true if the number of boredoms is\
    \ non-zero\n   return nbored ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxuo1br9n.lua:19:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpxuo1br9n.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpxuo1br9n.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S == nil then return 0 end\n  local words\
    \ = S:gmatch('[^.!?]+')\n  if words == nil then return 0 end\n  local count =\
    \ 0\n  for i = 1, #words do\n    if words[i] == 'I' then count = count + 1 end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v2fjzbm.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp0v2fjzbm.lua:14: in local 'candidate'\n\t/tmp/tmp0v2fjzbm.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local bored_count = 0\n   for w in string.gmatch(S,\
    \ \"[^.!?]*\") do\n      if w == 'I' then \n         bored_count = bored_count\
    \ + 1\n      end\n   end\n   return bored_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzn83h4c.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdzn83h4c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here!\n  -- Don't forget to handle\
    \ cases when S is an empty string!\n  local boredoms=0\n  if S == '' then return\
    \ boredoms end\n  local i,j,k=-1,1,1\n  while true do\n    i = string.find(S,'[\\\
    .?!][^\\.?!]+',k)\n    if i == nil then\n      break\n    end\n    j = string.find(S,'[\\\
    .?!]+',i)\n    if j == nil then\n      break\n    end\n    k = string.find(S,'[\\\
    .?!]+',j+1)\n    boredoms = boredoms + 1\n  end\n  return boredoms\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz6j3dt2t.lua:16: invalid escape sequence near ''''[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    if S == nil then return nil end\n    local\
    \ i, j = 1, #S\n    while i < j do\n        local c = S[i]\n        local lower\
    \ = (string.lower(c))\n        if lower == \"i\" then\n            i = i + 3\n\
    \        elseif lower == \"a\" then\n            i = i + 1\n        elseif lower\
    \ == \"e\" then\n            i = i + 1\n        elseif lower == \"o\" then\n \
    \           i = i + 1\n        elseif lower == \"!\" then\n            j = j -\
    \ 1\n        elseif lower == \".\" then\n            j = j - 1\n        elseif\
    \ lower == \"?\" then\n            i = i + 1\n        else\n            i = i\
    \ + 1\n        end\n    end\n    return j\nend\nprint(is_bored(\"Hello world\"\
    ))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    ))\nprint(is_bored(\"I'm an idiot\"))\nprint(is_bored(\"I'm an idiot?\"))\nprint(is_bored(\"\
    I'm an idiot.\"))\nprint(is_bored(\"I'm an idiot.?\"))\nprint(is_bored(\"I'm an\
    \ idiot.!\"))\nprint(is_bored(\"I'm an idiot.! I love this weather\"))\nprint(is_bored(\"\
    I'm an idiot.! I love this weather.\"))\nprint(is_bored(\"I'm an idiot.! I love\
    \ this weather.?\"))\nprint(is_bored(\"I'm an idiot.! I love this weather.!\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.?\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.!\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.!?\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.!.\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.!.?\"\
    ))\nprint(is_bored(\"I'm an idiot.! I love this weather.! I love this weather.!.!\"\
    ))\nprint(is_bored(\"I'm an idio\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_roo2abs.lua:53: unfinished string near ''"I''m an idio''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {'I'}\n  local num_boredoms\
    \ = #boredoms\n  -- remove '.', '?' and '!' from the string\n  for i = 1, #S do\n\
    \    if S[i] == '.' then S = S:sub(1, i-1) end\n    if S[i] == '?' then S = S:sub(1,\
    \ i-1) end\n    if S[i] == '!' then S = S:sub(1, i-1) end\n  end\n  -- count the\
    \ number of 'I's in the string\n  for i = 1, #S do\n    if S[i] == 'I' then\n\
    \      num_boredoms = num_boredoms + 1\n    end\n  end\n  return num_boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ttsdvnr.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4ttsdvnr.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tS = string.lower(S)\n\tlocal counts = {}\n\
    \tfor w in S:gmatch(\"[^.!?]+\") do\n\t\tif not counts[w] then counts[w] = 0 end\n\
    \t\tcounts[w] = counts[w] + 1\n\tend\n\treturn counts['i'] >= 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5oq4zybe.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5oq4zybe.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5oq4zybe.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {}\n    for w in string.gmatch(S,\
    \ '(^[?.!]+|[!?.!]+$)') do\n        table.insert(boredoms, w)\n    end\n    if\
    \ #boredoms == 0 then\n        return true\n    else\n        return #boredoms\
    \ == 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz1b4j_s.lua:24:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpvz1b4j_s.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredom_num = 0\n   for w in S:gmatch('[^.!?]+')\
    \ do boredom_num = boredom_num + 1 end\n   return boredom_num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81cvt4kd.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp81cvt4kd.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   for w in S:gmatch(\"[I%!]\") do\n      return\
    \ 1\n   end\n   return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm5codfd.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsm5codfd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom_counter = tonumber(S)\n  if\
    \ boredom_counter > 0 then\n    local boredom_count = 0\n    local last_index\
    \ = 1\n    while boredom_counter > 0 and last_index <= #S do\n      boredom_count\
    \ = boredom_count + 1\n      if S[last_index] == '.' or S[last_index] == '?' or\
    \ S[last_index] == '!' then\n        boredom_counter = boredom_counter - 1\n \
    \     elseif S[last_index] == 'I' then\n        boredom_counter = boredom_counter\
    \ + 1\n      end\n      last_index = last_index + 1\n    end\n    return boredom_count\n\
    \  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzf15io9.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgzf15io9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgzf15io9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch'[^?!.]+'\
    \ do\n        if w == 'I' then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g9gnblu.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9g9gnblu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   S = S:gsub('.+?[!?.]+','')\n   S = S:gsub('[.!?]','')\n\
    \   if S:sub(1,1) ~= 'I' then return 0 end\n   if S:sub(1,2) == 'Boredom' then\
    \ return 1 end\n   for w,i in pairs(boredom) do\n      if S:sub(1,w) == 'Boredom'\
    \ then return 1 end\n   end\n   return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0ffnvp8.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpr0ffnvp8.lua:14: in local 'candidate'\n\t/tmp/tmpr0ffnvp8.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = S:gsub('([.?!])+', \" \")\n\
    \    local count = 0\n    for w in words:gmatch'([^ ]+)'do count = count + 1 end\n\
    \    return count > 0 and count % 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfg5ghnt.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptfg5ghnt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredom = {}\n\tfor w in S:gmatch('([?!.])')\
    \ do table.insert(boredom, w) end\n\tlocal boredom_counter = #boredom\n\treturn\
    \ boredom_counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvesegrf5.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvesegrf5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: -1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredoms = 0\n\tlocal pos = 0\n\twhile\
    \ pos <= #S do\n\t\tif S[pos] == '.' or S[pos] == '?' or S[pos] == '!' then\n\t\
    \t\tpos = pos + 1\n\t\telse\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\t\
    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978054
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local bored = 0\n   for w in S:gmatch('[^.!?]*[Ee][Aa][Rr]\\\
    .?[^.!?]*') do\n      if w:sub(1,1) == \"I\" then\n         bored = bored + 1\n\
    \      end\n   end\n   return bored\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3hqvimw.lua:11: invalid escape sequence near ''''[^.!?]*[Ee][Aa][Rr]\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredom = {\"I\"}\n    return #S:gmatch(\"\
    [%S]*[%S]+[%S]+\"):match(S,boredom)>0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_uf0615.lua:11:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpl_uf0615.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpl_uf0615.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I = 0\n  for w in S:gmatch'%(%b\\.|%b\\\
    ?%|%b\\!)' do\n    I = I + 1\n  end\n  return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdj39dqrw.lua:11: invalid escape sequence near ''''%(%b\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   if S == nil then return nil end\n   S = S:lower()\n\
    \   if S:match(\"^i\\.?.*\\.?$\") then\n      return 1\n   else\n      return\
    \ 0\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5nugrcl6.lua:12: invalid escape sequence near ''"^i\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local counts = {}\n  for w in S:gmatch(\"\
    (I[%.!]*)\") do counts[w] = counts[w] + 1 end\n  return counts[\"I\"] > 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpseuq25mt.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpseuq25mt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpseuq25mt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   S = S:lower()\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzh2t_6hl.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- the first character of the string is \"\
    I\"\n   if S == \"I\" then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzgkbyra8.lua:24: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tassert(S ~= nil)\n\tlocal count = 0\n\tfor\
    \ word in S:gmatch(\"[^.!?]+\") do\n\t\tif word:lower():find(\"i\") then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2zoykot.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg2zoykot.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   for w in S:gmatch('([%A]-?[%w]+[.]-?[%w]+|[%A][.?!])')\
    \ do\n      if w:sub(1,1) ~= 'I' then boredoms = boredoms + 1 end\n   end\n  \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmj2mkt8.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvmj2mkt8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for w in S:gmatch(\"^[I%!.]+\"\
    ) do\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks9kn_i5.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpks9kn_i5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  S = S:lower() -- Convert to lower case to\
    \ ignore case.\n  local counts = {'i','a','n','u','e','o','e','a','y','e'}\n \
    \ local count = 0\n  for w in S:gmatch(\"[%a\\.\\?!][ ]*[%a\\.\\?!]*\") do\n \
    \   if w in counts then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy5nc72p5.lua:13: invalid escape sequence near ''"[%a\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in string.gmatch(S,\
    \ '[^.!?]+') do\n    if w == 'I' then\n      boredoms[#boredoms + 1] = 0\n   \
    \ else\n      boredoms[#boredoms + 1] = 1\n    end\n  end\n  return #boredoms\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnck1a7ek.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpnck1a7ek.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = 1\n  local words = S\n  local\
    \ delimiters = {'.', '?', '!'}\n  for _, word in ipairs(words) do\n    boredom\
    \ = boredom and delimiters:find(word, 1, true) ~= nil\n  end\n  return boredom\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog0fskq7.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpog0fskq7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local N, N1, N2, N3, N4 = 0, 0, 0, 0, 0\n\
    \  local I = string.find(S, \"[?.!]\", 1, true)\n  if I then\n    N1 = string.len(S)\
    \ - I\n    S = string.sub(S, I + 1)\n  end\n  I = string.find(S, \"[?.!]\")\n\
    \  if I then\n    N2 = string.len(S) - I\n    S = string.sub(S, I + 1)\n  end\n\
    \  I = string.find(S, \"[.]\")\n  if I then\n    N3 = string.len(S) - I\n    S\
    \ = string.sub(S, I + 1)\n  end\n  I = string.find(S, \"[.?!]\", 1, true)\n  if\
    \ I then\n    N4 = string.len(S) - I\n  end\n  return N + N1 + N2 + N3 + N4\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj2qjyxm.lua:38:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoj2qjyxm.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local counter = 0\n   for word in S:gmatch('(^|\
    \ )I( |$)') do\n      counter = counter + 1\n   end\n   return counter\nend\n\
    </cell>\n<text>\nExercise 3\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4nx26kqh.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = string.gmatch(S, \"([.?!])(.*)\"\
    )\n    local boredoms = 0\n    for i = 1, #words do\n        if string.sub(S,\
    \ 1, 1) == words[i] then\n            boredoms = boredoms + 1\n        end\n \
    \   end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm3cpxgl.lua:12:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmprm3cpxgl.lua:12: in local 'candidate'\n\t/tmp/tmprm3cpxgl.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  S = S:lower()\n  for\
    \ w in S:gmatch('[^\\.!?]+') do\n    if w == 'i' then boredoms = boredoms + 1\
    \ end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo96lickx.lua:12: invalid escape sequence near ''''[^\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = { 'I', 'I', 'I', '!', '!',\
    \ '!', '?', '.', '?', '!' }\n  local n = 0\n  for w in S:gmatch('[^.?!]+') do\
    \ n = n + 1 end\n  return n == #boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyklv0ty.lua:19:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpuyklv0ty.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return (S:find('I'):byte() + 1):byte() / 2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4sbz47bp.lua:10:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmp4sbz47bp.lua:10: in\
    \ local 'candidate'\n\t/tmp/tmp4sbz47bp.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaorkuwdy.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpaorkuwdy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- Your code here\n    local boredoms =\
    \ 0\n    for w in S:gmatch\"([.!?])+\" do\n        if w:sub(1,1) == 'I' then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnpkq7kl.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprnpkq7kl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local b = 0\n   for w in S:gmatch'(%w+[.!?])'\
    \ do\n      if w[1] == 'I' then b = b + 1 end\n   end\n   return b\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25cmil4h.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp25cmil4h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local N = 0\n    for i, v in ipairs(S) do\n\
    \        local c = '#'\n        if v ~= 'I' and v ~= 'a' and v ~= 'i' then\n \
    \           c = v\n        end\n        if v ~= 'I' then\n            N = N +\
    \ 1\n        end\n        if c ~= 'I' then\n            N = N + 1\n        end\n\
    \    end\n    return N\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp068vqis6.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp068vqis6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local n = 1\n   for w in S:gmatch(\"[%w\\\
    .\\?\\!]+\") do\n      if w == \"I\" then\n         n = n + 1\n      end\n   end\n\
    \   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7a_mwffv.lua:11: invalid escape sequence near ''"[%w\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return string.sub(S, 1, string.find(S, \"\
    I\", 1, true))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrswxbsd.lua:16:\
    \ expected: 0, actual: \"Hello world\"\nstack traceback:\n\t/tmp/tmpcrswxbsd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- Return the number of boredoms in S.\n\
    \   -- A boredom is a sentence that starts with the word \"I\"\n   -- (case sensitive).\
    \ Sentences are delimited by '.', '?' or '!'.\n   -- Note that counting boredoms\
    \ would not be a good way to predict\n   -- sentiment since it's subjective.\n\
    \   \n   -- The code below uses a list comprehension to check each sentence in\
    \ S for\n   -- the word \"I\".  If a \"I\" exists in a sentence, then increment\
    \ the counter\n   -- and append the sentence to boredoms_found.\n   \n   local\
    \ boredoms_found = {}\n   for word in string.gmatch(S, \"[.!?]\") do\n      if\
    \ word == 'I' then\n         table.insert(boredoms_found, S)\n      end\n   end\n\
    \   \n   return #boredoms_found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa41pxytv.lua:35:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa41pxytv.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   S = S:gsub('[.!?]','')\n   return (S == 'I'\
    \ or S == 'i') and 1 or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7ieqr_c.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpe7ieqr_c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    (.*[!?.]$)\") do\n        if w[1] == 'I' then boredoms = boredoms + 1 end\n  \
    \  end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqr8on49.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpoqr8on49.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredom = 1\n    for w in S:gmatch('%w+')\
    \ do\n        boredom = boredom * 2\n        if w == 'I' then\n            boredom\
    \ = boredom - 2\n        end\n    end\n    return boredom\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlzyf6dt.lua:23:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmprlzyf6dt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S == 1 and S[1] == \"I\" and not (S:sub(1,1)\
    \ == \"a\" and S:sub(2,2) == \"e\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w4ljz_8.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp2w4ljz_8.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local I = {}\n    for w in S:gmatch(\"[^?.!]+\"\
    ) do\n        if I[w] then\n            I[w] = I[w] + 1\n        else\n      \
    \      I[w] = 1\n        end\n    end\n    return #I > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2i2x5mth.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp2i2x5mth.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local I = string.find(S, \"[^\\.\\?!]I\"\
    , 1, true)\n    if I then return 1 end\n    local P = string.find(S, \"[^\\.\\\
    ?!]P\", 1, true)\n    if P then return 1 end\n    local Hp = string.find(S, \"\
    [^\\.\\?!]Hp\", 1, true)\n    if Hp then return 1 end\n    local He = string.find(S,\
    \ \"[^\\.\\?!]He\", 1, true)\n    if He then return 1 end\n    local Ha = string.find(S,\
    \ \"[^\\.\\?!]Ha\", 1, true)\n    if Ha then return 1 end\n    local Hi = string.find(S,\
    \ \"[^\\.\\?!]Hi\", 1, true)\n    if Hi then return 1 end\n    local Hs = string.find(S,\
    \ \"[^\\.\\?!]Hs\", 1, true)\n    if Hs then return 1 end\n    local H = string.find(S,\
    \ \"[^\\.\\?!]H\", 1, true)\n    if H then return 1 end\n    local I = string.find(S,\
    \ \"[^\\.\\?!]I\", 1, true)\n    return I\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4d5pbio5.lua:10: invalid escape sequence near ''"[^\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaorkuwdy.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpaorkuwdy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here (additional tests may be\
    \ added)\n  -- You may assume the input string contains only lower case letters.\n\
    \  -- The string may contain spaces (), digits (0-9), and any character in\n \
    \ -- '.?!'\n  -- You may assume that the string contains a maximum of one '.'\n\
    \  -- You may assume the string contains a maximum of one '!' or '?'\n  -- You\
    \ may assume the string contains no leading or trailing spaces\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp43xjjk8g.lua:29: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local s = string.gsub(S, ' .?!', '')\n \
    \   if s == '' then return 0 end\n    -- The second condition is just in case\
    \ there is no dot in the line.\n    return #s == '' or s == 'I' or s[1] == 'I'\
    \ or s[1] == 'a'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kde2wa7.lua:19:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp2kde2wa7.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = false\n    for w in S:gmatch(\"\
    [^.!?]+\") do\n        if w == 'I' then\n            bored = true\n          \
    \  break\n        end\n    end\n    return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo5z3pi2.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpmo5z3pi2.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tS = S:lower()\n\treturn S ~= S and S == '.'\
    \ or S == '?' or S == '!'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwou9bk0.lua:17:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpdwou9bk0.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here!\n  assert(type(S) == 'string',\
    \ 'The first argument should be a string')\n  assert(S:match('^(I%S+)%.?(I%S+)%.?(I%S+)%.?(I%S+)%.?(I%S+)%.?$'),\
    \ 'Invalid input')\n  local count = 1\n  for w in S:gmatch('I%S+') do count =\
    \ count + 1 end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchlpsyb0.lua:12:\
    \ Invalid input\nstack traceback:\n\t/tmp/tmpchlpsyb0.lua:12: in local 'candidate'\n\
    \t/tmp/tmpchlpsyb0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local num_boredoms = 0\n  for _, word in gmatch\
    \ (S, \"([^.!?]+)(%.[^.!?]*)\") do\n    if word == \"I\" then\n      num_boredoms\
    \ = num_boredoms + 1\n    end\n  end\n  return num_boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhy8tvco.lua:11:\
    \ attempt to call a nil value (global 'gmatch')\nstack traceback:\n\t/tmp/tmpfhy8tvco.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpfhy8tvco.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   --TODO\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6dht12do.lua:12: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local num_bored = 0\n  for w in S:gmatch(\"\
    [%S%.]\") do\n    if w == \"I\" then\n      num_bored = num_bored + 1\n    end\n\
    \  end\n  return num_bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ajh3nz.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpt4ajh3nz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {'I', 'am', 'are', 'you',\
    \ 'were', 'was', 'were', 'be', 'being'}\n    local nbored = 0\n    local lastWasBored\
    \ = false\n    for i = 1, #S do\n        local word = S[i]\n        if lastWasBored\
    \ then\n            if word == '.' or word == '!' then\n                nbored\
    \ = nbored + 1\n            elseif word == '?' then\n                lastWasBored\
    \ = false\n            else\n                lastWasBored = true\n           \
    \     nbored = nbored + 1\n            end\n        elseif word:sub(1,1) == 'I'\
    \ then\n            nbored = nbored + 1\n        end\n    end\n    return nbored\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphm5azzpw.lua:24:\
    \ attempt to index a nil value (local 'word')\nstack traceback:\n\t/tmp/tmphm5azzpw.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmphm5azzpw.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- The 'bored' words are those that start\
    \ with a capital letter.\n  -- You could extend this list by yourself.\n  local\
    \ BORED = {\n    ['A'] = 'are',\n    ['E'] = 'is',\n    ['I'] = 'am',\n    ['O']\
    \ = 'are',\n    ['U'] = 'you',\n    ['Y'] = 'is',\n    ['a'] = 'be',\n    ['e']\
    \ = 'be',\n    ['i'] = 'be',\n    ['o'] = 'be',\n    ['u'] = 'be',\n    ['y']\
    \ = 'be',\n    ['h'] = 'be',\n    ['c'] = 'be',\n    ['r'] = 'be',\n    ['y']\
    \ = 'be',\n    ['s'] = 'be',\n    ['d'] = 'be',\n    ['g'] = 'be',\n    ['l']\
    \ = 'be',\n    ['i'] = 'be',\n    ['o'] = 'be',\n    ['u'] = 'be',\n    ['y']\
    \ = 'be',\n    ['w'] = 'be',\n    ['!'] = 'be',\n    ['.'] = 'be',\n    ['?']\
    \ = 'be',\n    ['*'] = 'be'\n  }\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1yjfpcl.lua:55: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local i, j = 1, #S\n    local p = 0\n  \
    \  while i < j do\n        if S[i] == 'I' then\n            p = p + 1\n      \
    \  end\n        i = i + 1\n    end\n    return p\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ji_7h17.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S == \"I\" then\n    return 1\n  end\n\
    \  local n = 0\n  for w in S:gmatch(\".\") do\n    if w == \"I\" then\n      n\
    \ = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj4306fy.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptj4306fy.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = 0\n    for word in S:gmatch(\"\
    [\\.\\?\\!](.+)\") do\n        if word == \"I\" then\n            bored = bored\
    \ + 1\n        end\n    end\n    return bored\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9v90revl.lua:11: invalid escape sequence near ''"[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 0\n    for w in S:gmatch(\"[%S]\"\
    ) do\n        if w == 'I' then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yjle0kc.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6yjle0kc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredom = false\n\tfor w in S:gmatch(\"\
    [^.!?]*[I%]+[^.!?]*\") do\n\t\tboredom = true\n\tend\n\treturn boredom\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs7o2m9n.lua:20:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpxs7o2m9n.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local words = { 'I', 'A', 'the', 'to', 'of',\
    \ 'a', 'and', 'for', 'an' }\n   if string.find(S, '^%s+I', 1) then\n      -- If\
    \ first letter is \"I\"\n      return 1\n   else\n      -- If first letter is\
    \ any word\n      for _, word in ipairs(words) do\n         if string.find(S,\
    \ word, 1, true) then\n            -- If sentence starts with word\n         \
    \   return 1\n         end\n      end\n      return 0\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivimilt8.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpivimilt8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   for w in S:gmatch(\"\
    %w+\") do\n      if w:sub(1, 1) == 'I' then\n         boredoms = boredoms + 1\n\
    \      end\n   end\n   return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m99wuxx.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4m99wuxx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S == 1 or (S:sub(1,1) == \"I\" and\
    \ S:sub(2,2) == \"l\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lo27mcb.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp2lo27mcb.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local words = S:gsub(\"[^A-Za-z]+\", '')\n\
    \  local count = 0\n  for w in words do\n    if w:sub(1, 1) == 'I' then count\
    \ = count + 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphm1p7d_o.lua:12:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmphm1p7d_o.lua:12: in local 'candidate'\n\t/tmp/tmphm1p7d_o.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S:sub(1,1) == 'I'  then return 0 end\n\
    \  if S:sub(1,1) == '!' then return 0 end\n  if S:sub(1,1) == '?' then return\
    \ 0 end\n  if S:sub(1,1) == '.' then return 0 end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7iims7lw.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7iims7lw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredom = false\n\tlocal S = S:lower()\n\
    \tfor w in string.gmatch(S, \"([?!.])\") do\n\t\tif w == \"i\" then\n\t\t\tboredom\
    \ = true\n\t\telse\n\t\t\tboredom = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ boredom\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9jlf8ok.lua:26:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpb9jlf8ok.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local i, n = 1, #S\n  for i = 1, n do\n  \
    \  if S[i] == 'I' then return i else return nil end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphisyy74v.lua:19:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmphisyy74v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  S = S:lower()\n  if S:find('^i%') == 1 then\n\
    \    return 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdbj761z.lua:11:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpcdbj761z.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcdbj761z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   -- write your code in JavaScript (but don't\
    \ forget to return a number)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqj99vev.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpdqj99vev.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  local count, start =\
    \ 0\n  for _, v in ipairs(S) do\n    if v:sub(1, 1) == 'I' then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ju2jcly.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5ju2jcly.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = 0\n  for w in S:gmatch'[%S]+[!?]'\n\
    \    boredom = boredom * 10 + #w\n  end\n  return boredom\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx7zpe6k1.lua:12: ''do'' expected near ''boredom''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom_count = 0\n  for s in S:gmatch'([^.?!]+)(%.+)?'\
    \ do\n    if s == 'I' then\n      boredom_count = boredom_count + 1\n    end\n\
    \  end\n  return boredom_count\nend\nis_bored()\n</cell>\n<text>\nThe for loop\
    \ iterates through every string in the list S:gmatch'([^.?!]+)(%.+)?' and tests\
    \ if each string starts with the letter 'I'. If so, the boredom_count is increased\
    \ by one.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplxmid3v0.lua:19: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return (S == \"I\") or (S == \"you\") or (S\
    \ == \"I\") or (S == \"i\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps83pnxup.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmps83pnxup.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = 0\n    for w in S:gmatch('(I[^.!?])')\
    \ do\n        bored = bored + 1\n    end\n    return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7snyzkh.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp7snyzkh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  local n=0\n  for word\
    \ in string.gmatch(S, \"[%a\\.!?]\") do n=n+1 end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp124t4vw0.lua:12: invalid escape sequence near ''"[%a\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for _, word in string.gmatch(S,\
    \ \"[%w. ?.!]+\") do\n        if word == 'I' then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlizi9h9.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphlizi9h9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I = string.find(S, \"I\", 1, true);\
    \ -- find the index of the first \"I\"\n  return I and 1 or 0 -- return 1 if the\
    \ first \"I\" is found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksbxseu3.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpksbxseu3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I,C\n  S,I = string.gsub(S,\".\",\"\\\
    .\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\!\"\
    )\n  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\!\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\?\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\?\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    \  S,I = string.gsub(S,\".\",\"\\.\")\n  S,I = string.gsub(S,\".\",\"\\.\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphnk7qkvo.lua:11: invalid escape sequence near ''"\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  \n  for w in S:gmatch'[%S]+'\
    \ do\n    if w == 'I' then\n      count = count + 1\n    end\n  end\n  \n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes_z8cvu.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpes_z8cvu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local bored = 0\n  for w in S:gmatch(\"[I%!.]+\"\
    ) do\n    if w == \"I\" then\n      bored = bored + 1\n    end\n  end\n  return\
    \ bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16lcj9rt.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp16lcj9rt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local bored = 0\n   for word in S:gmatch('.+?[.!?]')\
    \ do\n      if word:sub(1, 1) == 'I' then\n         bored = bored + 1\n      end\n\
    \   end\n   return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j53adj2.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp0j53adj2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal bored = nil\n\t\n\t-- Check for multiple\
    \ periods.\n\tif #S > 0 and #S < 10 and S:sub(1,3) == '..' and S:sub(-1) == '!'\
    \ then\n\t\tbored = 1\n\telse\n\t\tfor i,word in ipairs(S) do\n\t\t\tlocal index\
    \ = word:find('[?!]')\n\t\t\t\n\t\t\tif index and word:sub(1,index - 1) == 'I'\
    \ then\n\t\t\t\tbored = bored or 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn bored\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq_qo4xb.lua:31:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpyq_qo4xb.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count = 0\n    for s in S:gmatch(\"\
    (%b[.!?]*)\") do count = count + 1 end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj8g_bj5.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzj8g_bj5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return #S>0 and string.sub(S, 1, 1)==\"\
    I\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6k3fw6i.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpb6k3fw6i.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    S = string.lower(S)\n    local I = 0\n \
    \   for i, w in ipairs(string.gmatch(S, \"(%w+)%.(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfpl4oiyn.lua:12: unfinished string near ''"(%w+)%.(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?(%w+)%.?''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = { 'I' } -- Boredoms that\
    \ we know how to count.\n    local N = #S -- The number of characters in the sentence.\n\
    \    for i = 1, N do\n        if S[i] == '.' then\n            boredoms[#boredoms+1]\
    \ = '.'\n        end\n        if S[i] == '?' then\n            boredoms[#boredoms+1]\
    \ = '?'\n        end\n        if S[i] == '!' then\n            boredoms[#boredoms+1]\
    \ = '!'\n        end\n    end\n    return #boredoms == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojckkr_3.lua:29:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpojckkr_3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: -1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = 0\n  local word_index = 1\
    \ -- First character in S\n  while true do\n    if S[word_index] == 'I' then boredom\
    \ = boredom + 1 end\n    if S[word_index] == '.' then break end\n    if S[word_index]\
    \ == '?' then break end\n    if S[word_index] == '!' then break end\n    word_index\
    \ = word_index + 1\n  end\n  return boredom\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978054
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local b = 0\n    for i = 1, #S do\n    \
    \    if S[i] == 'I' then\n            if i == 1 then\n                b = b +\
    \ 1\n            end\n        elseif S[i] == '.' or S[i] == '?' or S[i] == '!'\
    \ then\n            if i > 1 then\n                b = b + 1\n            end\n\
    \        end\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnreej04.lua:30:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnnreej04.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = true\n  local i, L = #S, 1\n\
    \  while i < L do\n    if S[i] == 'I' then\n      boredom = false\n    end\n \
    \   i = i + 1\n  end\n  return boredom\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nvcyhb7.lua:24:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmp9nvcyhb7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored = 0\n    for w in S:gmatch('([^.!?]+)'..DOT+DOTDOT+DOT)\
    \ do\n        if w == 'I' then\n            bored = bored + 1\n        end\n \
    \   end\n    return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8k7s1a1.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'DOT')\nstack traceback:\n\
    \t/tmp/tmps8k7s1a1.lua:11: in local 'candidate'\n\t/tmp/tmps8k7s1a1.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S==0 and S==\"I\" or #S:match(S..\"\
    [\\.\\?\\!]\\?%.\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfl99n2mu.lua:10: invalid escape sequence near ''"[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = 0\n   for w in S:gmatch(\"\
    [I!.]+\") do\n      if w:sub(1, 1) == \"I\" then\n         count = count + 1\n\
    \      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3trs5a1s.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3trs5a1s.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boreds = 0\n    for i, c in string.gmatch(S,\
    \ \"^(%S+) (.)*(.?)*(!?.*)?$\") do\n        if c == \"I\" then\n            boreds\
    \ = boreds + 1\n        end\n    end\n    return boreds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebu2jv_m.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpebu2jv_m.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local N = 0\n  for w in S:gmatch(\"%w+\")\
    \ do\n    if w == 'I' then\n      N = N + 1\n    end\n  end\n  return N\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8yssj3k.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmph8yssj3k.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return #S == 0 or\n         S == \"I\" or\n\
    \         S == \"a\" or\n         S == \"e\" or\n         S == \"i\" or\n    \
    \     S == \"o\" or\n         S == \"u\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19th6ad2.lua:22:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp19th6ad2.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local i = 1\n    while i < #S do\n     \
    \   local c = S[i]\n        if c == '.' and S[i + 1] == '.' then\n           \
    \ i = i + 2\n        elseif c == '.' and S[i + 1] == '?' then\n            i =\
    \ i + 2\n        elseif c == '?' and S[i + 1] == '?' then\n            i = i +\
    \ 2\n        elseif c == '!' and S[i + 1] == '!' then\n            i = i + 2\n\
    \        elseif c == '!' and S[i + 1] == '.' then\n            i = i + 2\n   \
    \     else\n            i = i + 1\n        end\n    end\n    return i > 1 and\
    \ true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln2z1zmj.lua:33:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpln2z1zmj.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal count, i, L = 1, 1\n\tfor i = 1, #S\
    \ do\n\t\tcount = count + 1\n\t\tif S[i] == \".\" then\n\t\t\tL = L + 1\n\t\t\
    elseif S[i] == \"?\" then\n\t\t\tL = L + 2\n\t\telseif S[i] == \"!\" then\n\t\t\
    \tL = L + 3\n\t\tend\n\tend\n\treturn count/L\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7w993e5.lua:21:\
    \ attempt to perform arithmetic on a nil value (local 'L')\nstack traceback:\n\
    \t/tmp/tmpv7w993e5.lua:21: in local 'candidate'\n\t/tmp/tmpv7w993e5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  return ...\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxmvg0k4j.lua:11: cannot use ''...'' outside a vararg function
    near ''...''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = 0\n   for w in S:gmatch('.+?[!?.]+')\
    \ do\n      if w:sub(1, 1) == 'I' then\n         count = count + 1\n      end\n\
    \   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuctpocfv.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpuctpocfv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count=0\n  for word in S:gmatch'[?!.]+'\
    \ do\n    if word=='I' then\n      count=count+1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gte21hc.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3gte21hc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahj1559j.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpahj1559j.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    return string.find(S, \"I\", 1, true) >\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1mfcjxn.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_1mfcjxn.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_1mfcjxn.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I = 0\n  for w in S:gmatch(\"[I].*\"\
    ) do I = I + 1 end\n  return I == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3qhkz8f.lua:18:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpp3qhkz8f.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    local i = 1\n  \
    \  local word = ''\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprj0v35pc.lua:25: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  S = string.lower(S)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoga86vov.lua:23: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {'I'}\n  for w in S:gmatch('[.?!]')\
    \ do\n    table.insert(boredoms, w)\n  end\n  return #boredoms > 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwm1fa6u.lua:20:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpcwm1fa6u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredom = {}\n  for w in S:gmatch(\"\
    [^.?!]+\") do\n    boredom[w] = boredom[w] or 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdgzvc6go.lua:26: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local num_bored = 0\n  for w in S:gmatch(\"\
    [^.?!]+\") do\n    if w == 'I' then num_bored = num_bored + 1 end\n  end\n  return\
    \ num_bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkm4qs5c.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjkm4qs5c.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local is_bored = tonumber(string.find(S, 'I',\
    \ 1,\n                                          true))\n  if is_bored == nil then\
    \ is_bored = tonumber(string.find(S, '.', 1,\n                               \
    \           true)) end\n  if is_bored == nil then is_bored = tonumber(string.find(S,\
    \ '!', 1,\n                                          true)) end\n  if is_bored\
    \ == nil then is_bored = tonumber(string.find(S, '?', 1, true)) end\n  if is_bored\
    \ == nil then is_bored = 0 end\n  return is_bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5vh8lmh.lua:10:\
    \ bad argument #1 to 'tonumber' (string expected, got number)\nstack traceback:\n\
    \t/tmp/tmpl5vh8lmh.lua:10: in local 'candidate'\n\t/tmp/tmpl5vh8lmh.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  return (not S or S == '.' or S == '?' or S\
    \ == '!')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3iervdp.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpj3iervdp.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [Ii]%w+\") do\n        if w:lower() == \"i\" then\n            boredoms = boredoms\
    \ + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrctbtoi.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmrctbtoi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local words = {}\n    for word in S:gmatch'[%S]+'\
    \ do\n        table.insert(words, word)\n    end\n    return #words > 0 and #words\
    \ == 1 and\n           words[1] == 'I' and\n           (#S == 0 or S[#S] ~= '.'\
    \ or S[#S] ~= '?' or S[#S] ~= '!')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ni0o6fr.lua:22:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp7ni0o6fr.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- Your code here\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8_k4vv3.lua:17:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpd8_k4vv3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  local I = S:sub(1,1)\n\
    \  for i = 1, #S do if S[i] == \"I\" then return 1 end end\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi280qvzk.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi280qvzk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   if #S <= 0 then return 0 end\n   if string.find(S,\
    \ \"^I\") then return 1 end\n   if string.find(S, \"^!\") then return 1 end\n\
    \   if string.find(S, \"\\.\") then return 1 end\n   if string.find(S, \"\\?\"\
    ) then return 1 end\n   if string.find(S, \"!\\.\") then return 1 end\n   return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpabkuvh79.lua:13: invalid escape sequence near ''"\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local boredom_count\
    \ = 1\n  for word in S:gmatch(\"^[%w\\.?!]+\") do\n    if word == \"I\" then\n\
    \      boredom_count = boredom_count + 1\n    end\n  end\n  if boredom_count ==\
    \ 1 then\n    boredoms = 1\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphxduc6z7.lua:12: invalid escape sequence near ''"^[%w\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\t-- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lh7g16h.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp6lh7g16h.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n = 0\n  for w in S:gmatch(\".\") do\n\
    \    if w == \"I\" then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru45y720.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpru45y720.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local boredoms = 0\n   for w in S:gmatch(\"\
    ^[Ii!].*$\") do boredoms = boredoms + 1 end\n   return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jq_z838.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8jq_z838.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local N, N = 0, 0\n  for _ in S:gmatch(\"\
    .\") do\n    if _ == \"I\" then\n      N = N + 1\n    end\n  end\n  return N\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4gphv_2.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpg4gphv_2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal boredom = {}\n\tlocal last_is_bored\
    \ = true\n\tfor w in S:gmatch(\"([I].*)\") do\n\t\tlast_is_bored = last_is_bored\
    \ and (w == \"I\")\n\t\tboredom[#boredom+1] = w\n\tend\n\treturn #boredom > 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkow6fan6.lua:22:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpkow6fan6.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local bored_count = 0\n    for w in S:gmatch('%S+')\
    \ do\n        if w:sub(1,1) == 'I' then\n            bored_count = bored_count\
    \ + 1\n        end\n    end\n    return bored_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwb2kkf1o.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwb2kkf1o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Add your code here\n  local N = 0\n  for\
    \ w in S:gmatch(\"[I%S]+\") do N = N + 1 end\n  return N\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjvanibn.lua:19:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpmjvanibn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n\tlocal I = 1\n\tlocal Imax = #S -- find the\
    \ index of the first space character\n\twhile I <= Imax do\n\t\tif S[I] == '.'\
    \ or S[I] == '?' or S[I] == '!' then\n\t\t\tbreak\n\t\telse\n\t\t\tI = I + 1\n\
    \t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpceafgt73.lua:31: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count = 0\n  for _, word in (S:gmatch('([^.?!]*)[.?!]*')\
    \ do\n    count = count + 1\n  end)\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0qb_jj97.lua:11: '')'' expected near ''do''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = {}\n    for w in S:gmatch(\"\
    .+?[?!.]+\") do\n        if w:match(\"^I\") then\n            boredoms[#boredoms\
    \ + 1] = w\n        end\n    end\n    return #boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1hoh2va.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk1hoh2va.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local boredoms = 0\n    for w in S:gmatch(\"\
    [I%a]+\") do\n        boredoms = boredoms + 1\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2klpo12a.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp2klpo12a.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for w in S:gmatch'(%b[I].*[\\\
    .\\?!])' do boredoms = boredoms + 1 end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn78v79_q.lua:11: invalid escape sequence near ''''(%b[I].*[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local N=0\n  for w in S:gmatch\"[^.!?]+\"\
    \ do\n    N = N + 1 -- \"I\" is a boredom if there's at least one boredom\n  \
    \  if w == \"I\" then break end\n  end\n  return N\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o7txovz.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5o7txovz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local n = 0\n  while S do\n    S = S:match('^(I.+)[.?!]+$')\n\
    \    n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9oh15qz.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj9oh15qz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {'I'}\n  local boredom_count\
    \ = 0\n  for w in S:gmatch('.+[.!?]+') do\n    if boredoms[w] then\n      boredom_count\
    \ = boredom_count + 1\n    end\n    boredoms[w] = true\n  end\n  return boredom_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponn49in0.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmponn49in0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local function count(s, w)\n        local\
    \ count = 1 -- This counts the number of times w appears in s\n        for i,v\
    \ in ipairs(split(s, '[\\.\\?!]')):do\n            if string.find(v, w) then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    \n    local num_boredom = count(S, 'I')\n    return num_boredom\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzm183vqm.lua:12: invalid escape sequence near ''''[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local I = 1\n  local B = 0\n  for w in S:gmatch(\"\
    [%.!?]+\") do\n    if w == 'I' then\n      I = I + 1\n    else\n      B = B +\
    \ I\n      I = 1\n    end\n  end\n  return B\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooi2vly1.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpooi2vly1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   if S ~= nil then\n      if S:match('I') then\
    \ return 1 end\n      if S:match('How') then return 1 end\n      if S:match('Its')\
    \ then return 1 end\n      if S:match('That') then return 1 end\n      if S:match('He')\
    \ then return 1 end\n      if S:match('She') then return 1 end\n      if S:match('It')\
    \ then return 1 end\n      if S:match('They') then return 1 end\n      if S:match('You')\
    \ then return 1 end\n      if S:match('You\\'re') then return 1 end\n      if\
    \ S:match('You\\'ve') then return 1 end\n      if S:match('Its') then return 1\
    \ end\n      if S:match('Its') then return 1 end\n      if S:match('There') then\
    \ return 1 end\n      if S:match('That\\'') then return 1 end\n      if S:match('That')\
    \ then return 1 end\n      if S:match('That\\'s it') then return 1 end\n     \
    \ if S:match('That\\'s all') then return 1 end\n      if S:match('That\\'s for')\
    \ then return 1 end\n      if S:match('That\\'s not') then return 1 end\n    \
    \  if S:match('That\\'s fine') then return 1 end\n      if S:match('That\\'s up')\
    \ then return 1 end\n      if S:match('That\\'s good') then return 1 end\n   \
    \   if S:match('That\\'s easy') then return 1 end\n      if S:match('That\\'s\
    \ amazing') then return 1 end\n      if S:match('That\\'s ok') then return 1 end\n\
    \      if S:match('That\\'s great') then return 1 end\n      if S:match('That\\\
    's a lovely day') then return 1 end\n      if S:match('That\\'s a very lovely\
    \ day') then return 1 end\n      if S:match('That\\'s a great day') then return\
    \ 1 end\n      if S:match('That\\'s a great day') then return 1 end\n      if\
    \ S:match('That\\'s a great day') then return 1 end\n      if S:match('That\\\
    's a great day') then return 1 end\n      if S:match('That\\'s a great day') then\
    \ return 1 end\n      if S:match('That\\'s a great day') then return 1 end\n \
    \     if S:match('That\\'s a great day') then return 1 end\n      if S:match('That\\\
    's a great day') then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdcckq0_a.lua:60: ''end'' expected (to close ''if'' at line
    47) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  local p = {}\n  for w\
    \ in S:gmatch(\"[^.?!]+\") do\n    p[#p+1] = p[#p] + 1\n  end\n  return p[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxg19jcb.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpxxg19jcb.lua:13: in local 'candidate'\n\t/tmp/tmpxxg19jcb.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local words = str:split('.,?!')\n  local bored\
    \ = 0\n  for _, word in pairs(words) do\n    if S:find(word) ~= nil then\n   \
    \   bored = bored + 1\n    end\n  end\n  return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfo_c1u3.lua:10:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmphfo_c1u3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphfo_c1u3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local I = 0\n    for w in string.gmatch(S,\
    \ \"(^[I].+$)\") do I = I + 1 end\n    return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvn_jgfz.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmptvn_jgfz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   for w1, w2 in pairs(S:gmatch('[%a%.]%s+%a[.?!]%a'))\
    \ do\n      S = S:sub(1, w1)\n      if w2 ~= 'I' then return 1 end\n   end\n \
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ql_ssa1.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp_ql_ssa1.lua:10: in local 'candidate'\n\t/tmp/tmp_ql_ssa1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
- exit_code: -1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  local I = 1\n  while\
    \ I <= #S do\n    if S[I] ~= '.' and S[I] ~= '?' and S[I] ~= '!' and S[I] ~= nil\
    \ then\n      I = I + 1\n    end\n  end\n  return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978054
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    -- Your code here\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8_k4vv3.lua:17:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpd8_k4vv3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Your code here\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1t8mmew.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl1t8mmew.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local b = 0\n    for word in S:gmatch('[^.!?]+')\
    \ do\n        if word == 'I' then b = b + 1 end\n    end\n    return b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknw8tm_f.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpknw8tm_f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local I = 0\n    for w in S:gmatch('(%S+)(%.+)')\
    \  do\n        if w == 'I' then I = I + 1 end\n    end\n    return I\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrh5g976.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpjrh5g976.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local n = 1\n    for w in S:gmatch(\"[%S]*[%.!?]*\"\
    ) do\n        n = n + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l_qsgc_.lua:20:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp6l_qsgc_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local count=0\n  for w in string.gmatch(S,\
    \ \"([^.?!]*)\") do\n    count=count+1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx7zbisp.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvx7zbisp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in string.gmatch(S,\
    \ \"[^.?.!]+\") do boredoms[#boredoms + 1] = w end\n  local i = #boredoms\n  local\
    \ N = #S\n  for i=1, N do\n    if boredoms[i] == 'I' then return i end\n  end\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mrxi3nh.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2mrxi3nh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local count=0\n    for word in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do\n        if word:sub(1,1) == 'I' then\n            count\
    \ = count+1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjki2i7xd.lua:11: invalid escape sequence near ''"[%w\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  S = string.lower(S)\n  local count = 0\n \
    \ for w in S:gmatch'[^!.?]'do\n    if w == \"i\" then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn5aysfd.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcn5aysfd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n    local N, E = 1, 0\n    for _, v in ipairs(S)\
    \ do\n        if v:sub(1, 1) == 'I' then\n            N = N + 1\n        else\n\
    \            E = E + 1\n        end\n    end\n    return N == 0 and E == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_yids9h.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpm_yids9h.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = {}\n  for w in S:gmatch(\"\
    %w+\") do\n    if w:sub(1,1) ~= 'I' then boredoms[w] = nil end\n  end\n  return\
    \ #boredoms > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyyyi8dd.lua:20:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpmyyyi8dd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n   local count = #S\n   for i=1,count do\n \
    \     if S[i] == 'I' then\n         count = count - 1\n      else\n         break\n\
    \      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxfd83a6.lua:24:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpyxfd83a6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  -- Write your function here!\n  local boredom_count\
    \ = 0\n  for w in S:gmatch(\"[%S]+\") do\n    if w:sub(1, 1) == 'I' then\n   \
    \   boredom_count = boredom_count + 1\n    end\n  end\n  return boredom_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsg0suo1.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvsg0suo1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  if S:match('^[I]%S+[\\.|?|!]$') then\n   \
    \ return 1\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkgi_mj3q.lua:10: invalid escape sequence near ''''^[I]%S+[\.''

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local function is_bored(S)\n    local boredoms\
    \ = #S\n    for i = 1, #S do\n      if S[i] == 'I' and S[i + 1] == '.' and S[i\
    \ + 2] ~= '?' then\n        boredoms = boredoms - 1\n      end\n    end\n    return\
    \ boredoms\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpus2tvxa5.lua:31: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659978049
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored('Hello world')\n\
    -- 0\n-- >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    -- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local words = S:gmatch(\"\
    [^.?!]+\")\n  for i = 1, #words do\n    if words[i] == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8_73ne7s.lua:12:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp8_73ne7s.lua:12: in local 'candidate'\n\t/tmp/tmp8_73ne7s.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978049
