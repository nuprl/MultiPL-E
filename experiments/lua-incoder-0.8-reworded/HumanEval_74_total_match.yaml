name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two tables of strings and returns the table\
  \ that has \n-- total number of chars in the all strings of the table less than\
  \ the other table.\n-- if the two tables have the same number of chars, return the\
  \ first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
  \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for i, v in ipairs(lst1) do\n        if\
    \ #v > #lst2[i] then \n            result[i] = v\n        end\n    end\n    return\
    \ result\nend", "    local count1, count2 = 0, 0\n    for i=1, #lst1 do\n    \
    \    count1 = count1 + #lst1[i]\n    end\n    for i=1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 == count2 then -- same len\n   \
    \     local maxi, mini = 0, 0\n        for i=1, #lst1 do\n            local len\
    \ = #lst1[i]\n            if len > maxi then\n                maxi = len\n   \
    \         end\n            if len < mini then\n                mini = len\n  \
    \          end\n        end\n        for i=1, #lst2 do\n            local len\
    \ = #lst2[i]\n            if len > maxi then\n                maxi = len\n   \
    \         end\n            if len < mini then\n                mini = len\n  \
    \          end\n        end\n        local max_val = maxi\n        local min_val\
    \ = mini\n        for i=1, #lst1 do\n            local len1 = #lst1[i]\n     \
    \       for j=1, #lst2 do\n                local len2 = #lst2[j]\n           \
    \     if len1 < len2 then\n                    max_val = max_val - len2\n    \
    \            end\n                if len1 > len2 then\n                    min_val\
    \ = min_val + len2\n                end\n            end\n        end\n      \
    \  for i=1, #lst2 do\n            local len1 = #lst1[i]\n            for j=1,\
    \ #lst2 do\n                local len2 = #lst2[j]\n                if len1 < len2\
    \ then\n                    max_val = max_val - len2\n                end\n  \
    \              if len1 > len2 then\n                    min_val = min_val + len2\n\
    \                end\n            end\n        end\n        local results = {}\n\
    \        for i=1, #lst1 do\n            results[i] = lst1[i]\n        end\n  \
    \      for i=1, #lst2 do\n            results[#lst1+i] = lst2[i]\n        end\n\
    \        return results\n    else -- different len\n        return {}\n    end\n\
    end", "    local len1\n    local len2\n    \n    len1 = #lst1\n    len2 = #lst2\n\
    \    \n    if len1 == len2 then\n        for i = 1, len1 do\n            if lst1[i]\
    \ < lst2[i] then\n                return lst1\n            else\n            \
    \    return lst2\n            end\n        end\n    end\n    \n    return lst2\n\
    end", "\tlst1 = lst1 or {}\n\tlst2 = lst2 or {}\n\tif #lst1 == 0 and #lst2 ==\
    \ 0 then\n\t\treturn lst1\n\telse\n\t\tif #lst1 <= #lst2 then\n\t\t\tfor i = 1,\
    \ #lst1 do\n\t\t\t\tif not lst2[i] then\n\t\t\t\t\treturn lst1\n\t\t\t\tend\n\t\
    \t\tend\n\t\t\treturn lst1\n\t\telse\n\t\t\tfor i = 1, #lst2 do\n\t\t\t\tif not\
    \ lst1[i] then\n\t\t\t\t\treturn lst1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn lst1\n\
    \t\tend\n\tend\nend", "  local common = {}\n  for _, i in ipairs(lst1) do\n  \
    \  if i == lst2[i] then\n      table.insert(common, i)\n    end\n  end\n  return\
    \ common\nend", "    local num_same = 0\n    for _, v in pairs(lst1) do\n    \
    \    if lst2[v] ~= nil then\n            num_same = num_same + 1\n        end\n\
    \    end\n    for _, v in pairs(lst2) do\n        if lst1[v] ~= nil then\n   \
    \         num_same = num_same + 1\n        end\n    end\n    if num_same == 0\
    \ then\n        return lst1\n    else\n        return nil\n    end\nend", "  \
    \  local l1, l2 = #lst1, #lst2\n    if l1 == 0 then\n        return lst2\n   \
    \ end\n    if l2 == 0 then\n        return lst1\n    end\n    local m = {}\n \
    \   for i=1,l1 do\n        m[lst1[i]] = true\n    end\n    for i=1,l2 do\n   \
    \     if not m[lst2[i]] then\n            return nil\n        end\n    end\n \
    \   return lst1\nend", "  local n = math.max(#lst1, #lst2)\n  local m = {}\n \
    \ for i=1,n do m[i] = 0 end\n  for i=1,n do\n    m[#lst1 + i] = m[#lst1 + i] +\
    \ 1\n  end\n  for i=1,n do\n    m[#lst2 + i] = m[#lst2 + i] - 1\n  end\n  \n \
    \ for i=1,n do\n    if lst1[i] > lst2[i] then\n      m[#lst1 + i] = m[#lst1 +\
    \ i] + 1\n    else\n      m[#lst2 + i] = m[#lst2 + i] - 1\n    end\n  end", " \
    \ local len1 = #lst1\n  local len2 = #lst2\n  -- if no strings in two lists, return\
    \ empty table\n  if len1 == 0 and len2 == 0 then\n    return {}\n  end\n  \n \
    \ -- If either list has only one string in it, return it\n  if len1 == 1 or len2\
    \ == 1 then\n    if len1 == 1 then\n      return lst1\n    end\n    return lst2\n\
    \  end\n  \n  -- If one of the lists has more chars than the other\n  if len1\
    \ > (len2) then\n    local temp1 = lst1\n    local temp2 = lst2\n    lst1 = {}\n\
    \    lst2 = {}\n    for i = 0, len1 do\n      lst1[#lst1 + 1] = temp1[i]\n   \
    \ end\n    for i = 0, len2 do\n      lst2[#lst2 + 1] = temp2[i]\n    end\n  end\n\
    \  \n  -- If one of the lists has fewer chars than the other\n  if len1 < (len2)\
    \ then\n    local temp1 = lst1\n    local temp2 = lst2\n    lst1 = {}\n    lst2\
    \ = {}\n    for i = 0, len2 do\n      lst1[#lst1 + 1] = temp2[i]\n    end\n  \
    \  for i = 0, len1 do\n      lst2[#lst2 + 1] = temp1[i]\n    end\n  end\n  \n\
    \  -- if both have same number of chars, return first list\n  if len1 == len2\
    \ then\n    return lst1\n  end\n  \n  -- If the number of chars differ between\
    \ the two lists, return an empty table\n  return {}\nend", "  local function length(str)\n\
    \    local count = string.rep('0', #str)\n    for i = 1, #str do\n      count\
    \ = string.format('%s%s', count, str:sub(i, i + 1))\n    end\n    return count\n\
    \  end\n  local count_lst1 = length(lst1)\n  local count_lst2 = length(lst2)\n\
    \  if count_lst1 == count_lst2 then\n    return lst1\n  else\n    return {}\n\
    \  end\nend", "  if #lst1 == 0 then\n    return {}\n  elseif #lst2 == 0 then\n\
    \    return lst1\n  elseif #lst1 > #lst2 then\n    return total_match(lst2, lst1)\n\
    \  else\n    -- calculate the difference between tables' sizes\n    local difference\
    \ = #lst1 - #lst2\n    local new_lst = {}\n    for i = 1, difference do\n    \
    \  table.insert(new_lst, lst1[i])\n    end\n    return new_lst\n  end\nend", " \
    \ local res = {}\n  for k, v in pairs(lst1) do\n    if lst2[k] < v then\n    \
    \  res[k] = v\n    end\n  end\n  if #lst1 == #lst2 then\n    return lst1\n  else\n\
    \    return res\n  end\nend", "   if #lst1 == 0 then return {}\n   if #lst2 ==\
    \ 0 then return lst1\n   if #lst1 ~= #lst2 then return {}\n   local m = {}\n \
    \  for i = 1, #lst1 do m[lst1[i]] = true end\n   for i = 1, #lst2 do m[lst2[i]]\
    \ = true end\n   for i = 1, #lst1 do\n      if lst1[i] < lst2[i] then m[lst1[i]]\
    \ = true end\n      if lst1[i] > lst2[i] then m[lst2[i]] = true end\n   end\n\
    \   return lst1\nend", "  local table1 = {}\n  local table2 = {}\n  local count\
    \ = #lst1\n  for i = 1, #lst1 do\n    local count2 = #lst2\n    for j = 1, #lst2\
    \ do\n      if string.sub(lst1, i, i) == string.sub(lst2, j, j) then\n       \
    \ table1[#table1 + 1] = string.sub(lst1, i, i)\n        table2[#table2 + 1] =\
    \ string.sub(lst2, j, j)\n      end\n    end\n  end\n  if table1 == table2 then\n\
    \    return table1\n  end\n  return {}\nend", "    local total = {}\n    for i\
    \ = 1, #lst1 do\n        total[i] = 0\n    end\n    for i = 1, #lst2 do\n    \
    \    total[i] = total[i] + #lst1\n    end\n    for i = 1, #lst1 do\n        if\
    \ #lst2[i] < #lst1[i] then\n            table.insert(total, lst1[i])\n       \
    \ end\n    end\n    return total\nend", "    local table1 = {}\n    local table2\
    \ = {}\n    for _, v in pairs(lst1) do\n        table.insert(table1, v)\n    end\n\
    \    for _, v in pairs(lst2) do\n        table.insert(table2, v)\n    end\n  \
    \  local min_len = math.min(#table1, #table2)\n    if min_len == #table1 then\n\
    \        return table1\n    elseif min_len == #table2 then\n        return table2\n\
    \    else\n        local max_len = math.max(#table1, #table2)\n        local max_len_table\
    \ = { }\n        for i = 1, max_len do\n            table.insert(max_len_table,\
    \ #table1 .. i)\n        end\n        for i = 1, max_len do\n            table.insert(max_len_table,\
    \ #table2 .. i)\n        end\n        for k, v in pairs(max_len_table) do\n  \
    \          local num_matches = { }\n            for i = 1, max_len do\n      \
    \          local num_matches_temp = count_match(table1[k], table2[k])\n      \
    \          table.insert(num_matches, num_matches_temp)\n            end\n    \
    \        local num_matched_chars = max_len - math.max(#num_matches)\n        \
    \    local num_not_matched = max_len - math.max(#num_matches)\n            table.insert(v,\
    \ num_matched_chars)\n            table.insert(v, num_not_matched)\n        end\n\
    \        return v\n    end\nend", "  local tbl = {}\n  for i = 1, #lst1 do\n \
    \   tbl[i] = 0\n  end\n  for i = 1, #lst2 do\n    tbl[#tbl + 1] = #lst1[i] + #lst2[i]\n\
    \  end\n  tbl = tbl\n    \n  for i = 1, #lst1 do\n    for j = 1, #lst2 do\n  \
    \    if not tbl[i] > tbl[j] then\n        return tbl\n      end\n    end\n  end\n\
    \  return lst1\nend", "  if #lst1 == #lst2 then\n    local m = {}\n    for i =\
    \ 1, #lst1 do\n      m[lst1[i]] = true\n    end\n    return m\n  elseif #lst1\
    \ < #lst2 then\n    return {}\n  else\n    return {}\n  end\nend", "   local count1\
    \ = 0\n   local count2 = 0\n   for _,v in pairs(lst1) do\n      if v ~= \"\" then\n\
    \         count1 = count1 + 1\n      end\n   end\n   for _,v in pairs(lst2) do\n\
    \      if v ~= \"\" then\n         count2 = count2 + 1\n      end\n   end\n  \
    \ if count1 == count2 then\n      return lst1\n   else\n      return {}\n   end\n\
    end", "   if lst1 == lst2 then\n      return lst1\n   elseif #lst1 >= #lst2 then\n\
    \      return lst1\n   else\n      return lst2\n   end\nend", "  local len1, len2\
    \ = #lst1, #lst2\n  if len1 == 0 then return lst2\n  elseif len2 == 0 then return\
    \ lst1\n  elseif len1 ~= len2 then error(\"mismatch in number of chars\")\n  end ",
  "    -- Write the below condition using recursion\n    if #lst2 == 0 then\n    \
    \    return lst1\n    end\n    if #lst1 == 0 then\n        return lst2\n    end\n\
    \    if #lst1 > 0 and #lst2 > 0 then\n        if lst1[1] < lst2[1] then\n    \
    \        -- lst1 has less chars then lst2\n            return total_match(lst1[1:],\
    \ lst2)\n        elseif lst1[1] > lst2[1] then\n            -- lst2 has less chars\
    \ then lst1\n            return total_match(lst1, lst2[1:])\n        else\n  \
    \          -- both have the same chars\n            return total_match(lst1[1:],\
    \ lst2[1:])\n        end\n    end\nend", "    local keys = {}\n    for i = 1,\
    \ #lst1 do\n        keys[#keys + 1] = i\n    end\n    for i = 1, #lst2 do\n  \
    \      keys[#keys + 1] = i\n    end", "  if #lst1 == 0 then return end\n  if #lst2\
    \ == 0 then return end\n  if #lst1 ~= #lst2 then return end", "\tlocal common\
    \ = {}\n\tfor i, v in pairs(lst1) do\n\t\tcommon[v] = common[v] or 0\n\t\tcommon[v]\
    \ = common[v] + 1\n\tend\n\tfor i, v in pairs(lst2) do\n\t\tcommon[v] = common[v]\
    \ or 0\n\t\tcommon[v] = common[v] - 1\n\tend\n\tfor v in pairs(common) do\n\t\t\
    common[v] = common[v] or 0\n\tend\n\tlocal total_length = #lst1\n\tfor v in pairs(common)\
    \ do\n\t\ttotal_length = total_length - common[v]\n\tend\n\tlocal temp = {}\n\t\
    for i, v in pairs(common) do\n\t\tif v > 0 then\n\t\t\ttemp[i] = lst1[v]\n\t\t\
    end\n\tend\n\tfor v in pairs(common) do\n\t\tif v > 0 then\n\t\t\ttemp[total_length\
    \ + i] = lst2[v]\n\t\tend\n\tend\n\treturn temp\nend", "    if not lst1 then return\
    \ lst2 end\n    if not lst2 then return lst1 end\n    local dict1 = {}\n    for\
    \ k in pairs(lst1) do\n        dict1[k] = #k\n    end\n    local dict2 = {}\n\
    \    for k in pairs(lst2) do\n        dict2[k] = #k\n    end\n    for k in pairs(dict1)\
    \ do\n        if dict2[k] < dict1[k] then return lst1 end\n    end\n    return\
    \ lst2\nend", "    local dict1 = {}\n    local dict2 = {}\n    for _, s in ipairs(lst1)\
    \ do\n        dict1[s] = true\n    end\n    for _, s in ipairs(lst2) do\n    \
    \    dict2[s] = true\n    end\n    if #dict1 == #dict2 then\n        -- The same\
    \ length\n        return dict1\n    end\n    -- Different length\n    local total\
    \ = {}\n    for k in pairs(dict1) do\n        total[k] = #k\n    end\n    for\
    \ k in pairs(dict2) do\n        total[k] = #k\n    end\n    return total\nend",
  "  local total_count = 0\n  for _, item in pairs(lst1) do\n    if lst2[item] then\n\
    \      total_count = total_count + 1\n    end\n  end\n  if #lst1 == total_count\
    \ then\n    return lst1\n  else\n    return lst2\n  end\nend", "   if #lst1 ~=\
    \ #lst2 then\n      return {}\n   end\n   local num = 0\n   for i, v in ipairs(lst1)\
    \ do\n      if v ~= lst2[i] then\n         return {}\n      end\n      num = num\
    \ + 1\n   end\n   return lst1\nend", "    local maxCount1 = #lst1 \n    local\
    \ maxCount2 = #lst2", "   if #lst1 == #lst2 then\n      return {lst1}\n   else\n\
    \      return {}\n   end\nend", "    local length1 = #lst1\n    local length2\
    \ = #lst2\n    local i, j, k, l\n    if length1 ~= length2 then\n        return\
    \ lst1\n    end\n    for i = 1, length1 do\n        local element = lst1[i]\n\
    \        for j = 1, length2 do\n            local element2 = lst2[j]\n       \
    \     local same = element == element2\n            for k = 1, length1 do\n  \
    \              local element3 = lst1[k]\n                same = same and element\
    \ ~= element3\n            end\n            if not same then\n               \
    \ break\n            end\n        end\n        if not same then\n            break\n\
    \        end\n    end\n    if i == length1 then\n        return lst1\n    end\n\
    \    return nil\nend", "  local function count(tbl)\n    local count = 0\n   \
    \ for _, _ in pairs(tbl) do\n      count = count + 1\n    end\n    return count\n\
    \  end\n  if count(lst1) > count(lst2) then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "    if #lst1 == 0 then return lst2\n    else if #lst2 ==\
    \ 0 then return lst1\n    else if lst1[1] >= lst2[1] then return lst1\n    else\
    \ return lst2\n    end\nend", "    local function compare(a, b)\n        local\
    \ function count_char(c)\n            return #c + count_char(c+1) + 1\n      \
    \  end\n        return count_char(a) > count_char(b) \n    end\n    if lst1 and\
    \ lst2 then\n        if type(lst1) ~= 'table' or type(lst2) ~= 'table' then \n\
    \            return '', lst1, lst2\n        end\n        local key1, val1 = lst1,\
    \ lst2\n        -- remove table if table is empty\n        if #lst1 == 0 and #lst2\
    \ == 0 then\n            lst1, lst2 = nil, nil\n        end\n        local tbl\
    \ = table.remove(key1, key1)\n        local num_chars = #tbl\n        table.insert(tbl,\
    \ '')\n        return tbl\n    elseif lst1 and lst2 ~= nil then\n        return\
    \ '', lst1, lst2\n    elseif lst2 ~= nil and lst1 ~= nil then\n        return\
    \ '', lst1, lst2\n    end\nend", "  local size1 = #lst1\n  local size2 = #lst2\n\
    \  local size = size1 < size2 and size1 or size2\n  local result = {}\n  for i\
    \ = 1, size do\n    table.insert(result, lst1[i])\n  end\n  local i = 1\n  for\
    \ i = 1, size do\n    if lst2[i] ~= result[i] then\n      table.remove(result)\n\
    \      break\n    end\n  end\n  return result\nend", "  if #lst1 == 0 then return\
    \ lst2 end\n  if #lst2 == 0 then return lst1 end", "  local num_common_chars,\
    \ char_table1 = #lst1, {}\n  local num_common_chars, char_table2 = #lst2, {}\n\
    \  for i, val1 in enumerate(lst1) do\n    if char_table1[val1] == nil then\n \
    \     char_table1[val1] = true\n    else\n      num_common_chars = num_common_chars\
    \ - 1\n    end\n  end\n  for i, val2 in enumerate(lst2) do\n    if char_table2[val2]\
    \ == nil then\n      char_table2[val2] = true\n    else\n      num_common_chars\
    \ = num_common_chars - 1\n    end\n  end\n  if num_common_chars > 0 then\n   \
    \ return lst1\n  else\n    return lst2\n  end\nend", "  local n = #lst1\n  for\
    \ i = 1, #lst2 do\n    if #lst1[i] > n then return end\n    for j = 1, n do\n\
    \      if lst1[i] ~= lst1[j] and lst2[i] ~= lst2[j] then return end\n    end\n\
    \  end\n  return lst1\nend", "    local num_matches = {}\n    for i=1, #lst1 do\n\
    \        if num_matches[lst1[i]] ~= nil then\n            num_matches[lst1[i]]\
    \ = num_matches[lst1[i]] + 1\n        else\n            num_matches[lst1[i]] =\
    \ 1\n        end\n    end\n    for i=1, #lst2 do\n        if num_matches[lst2[i]]\
    \ ~= nil then\n            num_matches[lst2[i]] = num_matches[lst2[i]] + 1\n \
    \       else\n            num_matches[lst2[i]] = 1\n        end\n    end\n   \
    \ for k in pairs(num_matches) do\n        if num_matches[k] > num_matches[lst1[1]]\
    \ then\n            return lst1\n        else\n            return lst2\n     \
    \   end\n    end\nend", "\tassert(type(lst1) == \"table\")\n\tassert(type(lst2)\
    \ == \"table\")", "  local m = {}\n  for i = 1, #lst1 do\n    m[lst1[i]] = true\n\
    \  end\n  for i = 1, #lst2 do\n    if m[lst2[i]] then\n      m[lst2[i]] = false\n\
    \    end\n  end\n  for k, v in pairs(m) do\n    if v == false then\n      return\
    \ lst1\n    end\n  end\n  return lst2\nend", "    local num_char_diff = #lst1\
    \ #> #lst2 \n    if num_char_diff then\n        return lst1\n    else\n      \
    \  local str_diff = {}\n        for i = 1, #lst2 do\n            if lst1[i] >\
    \ lst2[i] then\n                str_diff[i] = 1\n            else\n          \
    \      str_diff[i] = 0\n            end\n        end\n        for i = 1, #lst1\
    \ do\n            if str_diff[i] > 0 then\n                return lst1\n     \
    \       end\n        end\n        return lst2\n    end\nend", "  local function\
    \ helper(lst1, lst2, total)\n    total = total or 0\n    for _, v in pairs(lst1)\
    \ do\n      if v < lst2[total] then\n        total = total + 1\n      else\n \
    \       total = total + 1\n      end\n    end\n    return total\n  end\n  local\
    \ total = helper(lst1, lst2, 0)\n  if lst1 ~= lst2 then\n    total = helper(lst2,\
    \ lst1, total)\n  end\n  return lst1[total]\nend", "  -- Check if all chars of\
    \ lst1 exist in lst2\n  for i, v in ipairs(lst1) do\n    if not lst2:contains(v)\
    \ then\n      return nil\n    end\n  end\n  return lst1\nend", "  -- Return the\
    \ smaller of the two lists\n  if #lst1 == 0 then return lst2 else return lst1\n\
    end", "    local table2 = {}\n    local table3 = {}\n    for key, val in pairs(lst2)\
    \ do\n        if table2[val] then table2[val] = table2[val] + 1 else\n       \
    \     table2[val] = 1\n            table3[val] = val\n        end\n    end\n \
    \   for key, val in pairs(lst1) do\n        if table3[val] then\n            table2[table3[val]]\
    \ =\n                table2[table3[val]] + table2[val]\n        end\n    end\n\
    \    return table2\nend", "\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #lst1 and\
    \ j <= #lst2 do\n\t\tif lst1[i] == lst2[j] then\n\t\t\ti = i + 1\n\t\t\tj = j\
    \ + 1\n\t\telse\n\t\t\tif i == #lst1 then\n\t\t\t\tlocal tmp = lst1[j]\n\t\t\t\
    \tlst1[j] = lst2[j]\n\t\t\t\tlst2[j] = tmp\n\t\t\t\treturn lst1\n\t\t\telseif\
    \ j == #lst2 then\n\t\t\t\tlocal tmp = lst1[i]\n\t\t\t\tlst1[i] = lst2[i]\n\t\t\
    \t\tlst2[i] = tmp\n\t\t\t\treturn lst1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\tend\n\t-- If tables are of the same length, return the smaller one\n\
    \tif i == #lst1 then\n\t\tlocal tmp = lst1[j]\n\t\tlst1[j] = lst2[j]\n\t\tlst2[j]\
    \ = tmp\n\t\treturn lst1\n\telseif j == #lst2 then\n\t\tlocal tmp = lst1[i]\n\t\
    \tlst1[i] = lst2[i]\n\t\tlst2[i] = tmp\n\t\treturn lst1\n\tend\nend", "    local\
    \ common = {}\n    for _, v1 in ipairs(lst1) do\n        local v2\n        for\
    \ _, v2 in ipairs(lst2) do\n            if v1 <= v2 then\n                table.insert(common,\
    \ v2)\n                break\n            end\n        end\n    end\n    for _,\
    \ v1 in ipairs(lst2) do\n        local v2\n        for _, v2 in ipairs(lst1) do\n\
    \            if v1 <= v2 then\n                table.insert(common, v1)\n    \
    \            break\n            end\n        end\n    end\n    return common\n\
    end", "    if #lst1 ~= #lst2 then\n        return lst1\n    end\n    \n    local\
    \ num_chars = {}\n    for i = 1, #lst1 do\n        num_chars[i] = #lst1[i]\n \
    \   end\n    \n    for i = 1, #lst2 do\n        local num = #lst1[i]\n       \
    \ if num < #lst2[i] then\n            local t = {}\n            for j = 1, num\
    \ do\n                table.insert(t, lst1[i][j])\n            end\n         \
    \   for j = 1, #lst2[i] do\n                table.insert(t, lst2[i][j])\n    \
    \        end\n            return t\n        end\n    end\n    \n    return lst1\n\
    end", "    local num1, num2, length1, length2 = 0, 0, 0, 0\n    local _\n    for\
    \ _, x in pairs(lst1) do\n        local y = lst2[x]\n        local t = 0\n   \
    \     for _ in y:gmatch(\"[%S]\") do\n            t = t+1\n        end\n     \
    \   if t > num1 then\n            num1 = t\n        end\n    end\n    for _, x\
    \ in pairs(lst2) do\n        local y = lst1[x]\n        local t = 0\n        for\
    \ _ in y:gmatch(\"[%S]\") do\n            t = t+1\n        end\n        if t >\
    \ num2 then\n            num2 = t\n        end\n    end\n    length1 = num1\n\
    \    length2 = num2\n    if length1 > length2 then\n        return lst1\n    end\n\
    \    return lst2\nend", "  local result = {}\n  for i = 1, #lst1 do\n    local\
    \ num_char = string.len(lst1[i])\n    for j = 1, #lst2 do\n      local num_char_2\
    \ = string.len(lst2[j])\n      if num_char < num_char_2 then\n        table.insert(result,\
    \ lst1[i])\n        break\n      end\n    end\n  end\n  if #result == 0 then return\
    \ nil end\n  return result\nend", "  if #lst1 < #lst2 then return lst1 end\n \
    \ if #lst2 < #lst1 then return lst2 end", "    local tbl = {}\n    for k, v in\
    \ pairs(lst1) do\n        local count = v:gsub(\"\\n\", \"\"):gsub(\"\\r\", \"\
    \"):gsub(\"\\t\", \"\"):gsub(\"  \", \"\")\n        tbl[k] = v\n    end\n    for\
    \ k, v in pairs(lst2) do\n        local count = v:gsub(\"\\n\", \"\"):gsub(\"\\\
    r\", \"\"):gsub(\"\\t\", \"\"):gsub(\"  \", \"\")\n        tbl[k] = tbl[k] ..\
    \ v\n    end\n    if #tbl == 1 then\n        return tbl\n    else\n        return\
    \ total_match(tbl, lst2)\n    end\nend", "\tlocal num_all = 0\n\tfor _, s in pairs(lst1)\
    \ do\n\t\tnum_all = num_all + #s\n\tend\n\tfor _, s in pairs(lst2) do\n\t\tnum_all\
    \ = num_all - #s\n\tend\n\tif num_all == 0 then\n\t\treturn lst2\n\telse\n\t\t\
    return lst1\n\tend\nend", "  if #lst1 == #lst2 then\n    local dict1 = {}\n  \
    \  for i = 1, #lst1 do\n      dict1[lst1[i]] = true\n    end\n    return dict1\n\
    \  else\n    return lst1\n  end\nend", "    local len1, len2 = #lst1, #lst2\n\
    \    if len1 ~= len2 then\n        return nil\n    end\n    local results = {}\n\
    \    for i = 1, len1 do\n        local a = lst1[i]\n        local b = lst2[i]\n\
    \        if a >= b then\n            table.insert(results, a)\n        else\n\
    \            table.insert(results, b)\n        end\n    end\n    return table.concat(results)\n\
    end", "  local char1, char2 = 0, 0\n  for _ in pairs(lst1) do\n    char1 = char1\
    \ + 1\n    if char1 == #lst2 then break end\n  end\n  char2, char1 = 0, 0\n  for\
    \ _ in pairs(lst2) do\n    char2 = char2 + 1\n    if char2 == #lst1 then break\
    \ end\n  end\n  if char1 < char2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "    local num_chars = {}\n    for _, v in pairs(lst1) do\n    \
    \    num_chars[v] = num_chars[v] or 0\n        num_chars[v] = num_chars[v] + 1\n\
    \    end\n    for _, v in pairs(lst2) do\n        num_chars[v] = num_chars[v]\
    \ or 0\n        num_chars[v] = num_chars[v] - 1\n    end\n    return lst1\nend",
  "    local result = {}\n    for _, val in ipairs(lst1) do\n        for _, val2 in\
    \ ipairs(lst2) do\n            if string.len(val) < string.len(val2) then\n  \
    \              result[val] = val2\n            end\n        end\n    end\n   \
    \ return result\nend", "  if #lst1 == 0 then return lst2 end\n  if #lst2 == 0\
    \ then return lst1 end\n  if #lst1 == #lst2 then\n    local total = 0\n    for\
    \ _, item in ipairs(lst1) do\n      total = total + string.len(item)\n    end\n\
    \    for _, item in ipairs(lst2) do\n      total = total - string.len(item)\n\
    \    end\n    if total < 0 then\n      total = 0\n    end\n    return lst1\n \
    \ end\nend", "   if #lst1 == #lst2 then\n      if #lst1 ~= 0 then\n         return\
    \ lst1\n      else\n         return {}\n      end\n   else\n      return lst1\n\
    \   end\nend\n</cell>\n<text>\n6.4 Finding the Longest Common Substring", "  local\
    \ count = 0\n  for k, v in pairs(lst1) do\n    if k ~= nil and v ~= nil then\n\
    \      count = count + #v\n    end\n  end\n  if count < #lst2 then\n    for k,\
    \ v in pairs(lst2) do\n      if k ~= nil and v ~= nil then\n        count = count\
    \ + #v\n      end\n    end\n  end\n  if count > #lst2 then\n    lst1 = lst2\n\
    \  end\n  return lst1\nend", "    local num_match = 0\n    for _, value in ipairs(lst1)\
    \ do\n        num_match = num_match + 1\n    end\n    for _, value in ipairs(lst2)\
    \ do\n        num_match = num_match + 1\n    end\n    \n    if num_match == 0\
    \ then\n        return {}\n    end", "  if not (lst1 and lst2) then\n    return\
    \ {}\n  end\n  local num_chars = {}\n  for i = 1, #lst1 do\n    if num_chars[lst1[i]]\
    \ == nil then\n      num_chars[lst1[i]] = 1\n    else\n      num_chars[lst1[i]]\
    \ = num_chars[lst1[i]] + 1\n    end\n  end\n  for i = 1, #lst2 do\n    if num_chars[lst2[i]]\
    \ == nil then\n      num_chars[lst2[i]] = 1\n    else\n      num_chars[lst2[i]]\
    \ = num_chars[lst2[i]] + 1\n    end\n  end\n  local results = {}\n  for _, v in\
    \ pairs(num_chars) do\n    if v > #lst1 then \n      results = results .. v\n\
    \    end\n  end\n  if #lst1 == #lst2 then \n    results = results .. #lst1 \n\
    \  else\n    local n = #lst2\n    for _, v in pairs(num_chars) do\n      n = n\
    \ - v\n    end\n    if n > #lst1 then \n      results = results .. n\n    end\n\
    \  end\n  return results\nend", "  -- base case\n  if lst1 == lst2 then return\
    \ lst1 end\n  -- recursive case\n  if #lst1 > #lst2 then \n    return total_match(lst2,\
    \ lst1)\n  elseif #lst1 < #lst2 then \n    return total_match(lst1, lst2)\n  else\n\
    \    local total = 0\n    for i = 1, #lst1 do\n      total = total + (#lst2- #lst1-\
    \ 1)\n    end\n    for i = 1, #lst2 do\n      total = total + (#lst1 - #lst2-\
    \ 1)\n    end\n    return lst1\n  end\nend", "    local temp = {}\n    for i =\
    \ 1, #lst1 do\n        temp[i] = #lst1\n    end\n    table.sort(temp)\n    local\
    \ count = 0\n    for i = 1, #lst2 do\n        count = count + #lst1\n        if\
    \ count > #lst2 then break end\n        if temp[i] == #lst2 then temp[i] = nil\
    \ end\n    end\n    local ret = {}\n    local i = 1\n    while i <= #temp do\n\
    \        if temp[i] ~= nil then\n            for j = i+1, #temp do\n         \
    \       if temp[j] ~= nil then\n                    count = count + #lst1\n  \
    \                  if count <= #lst2 then break end\n                end\n   \
    \         end\n        end\n        i = i + 1\n    end\n    for i = 1, #temp do\n\
    \        if temp[i] ~= nil then\n            ret[#ret+1] = temp[i]\n        end\n\
    \    end\n    return ret\nend", "   local num_char = #lst1\n   if num_char ==\
    \ 0 then\n      return lst2\n   end\n   local num_char2 = #lst2\n   if num_char2\
    \ == 0 then\n      return lst1\n   end\n   if num_char > num_char2 then\n    \
    \  return lst1\n   else\n      return lst2\n   end\nend", "  local n1 = #lst1\n\
    \  local n2 = #lst2\n  if n1 == n2 then\n    return lst1\n  end", "  local num_matches\
    \ = 0\n  local num_chars = #lst2\n  for _, v in ipairs(lst1) do\n    if v:len()\
    \ > num_chars then\n      num_chars = v:len()\n    end\n  end\n  for _, v in ipairs(lst2)\
    \ do\n    if v:len() > num_chars then\n      num_chars = v:len()\n    end\n  end\n\
    \  if num_matches == num_chars then\n    return lst1\n  else\n    return {}\n\
    \  end\nend", "    if not lst1 then return lst2 else return lst1 end\n    if not\
    \ lst2 then return lst2 else return lst1 end\n    if type(lst1) == 'table' and\
    \ type(lst2) == 'table' then\n        local len1 = #lst1\n        local len2 =\
    \ #lst2\n        if len1 > len2 then\n            for i = 1, len1 do\n       \
    \         if i >= len2 then return lst1 end\n                if lst1[i] > lst2[i]\
    \ then return lst1 end\n            end\n            return lst1\n        end\n\
    \        if len1 < len2 then\n            for i = 1, len2 do\n               \
    \ if i >= len1 then return lst2 end\n                if lst1[i] > lst2[i] then\
    \ return lst2 end\n            end\n            return lst2\n        end\n   \
    \ end\n    return lst1\nend", "  -- Write your code here\n  local table1 = {}\n\
    \  local table2 = {}\n  for i = 1, #lst1 do\n    table1[#table1 + 1] = lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    table2[#table2 + 1] = lst2[i]\n  end\n  if\
    \ #table1 == #table2 then\n    return table1\n  elseif #table1 < #table2 then\n\
    \    for i = #table1, 1, -1 do\n      table1[#table1 + 1] = \"_\"\n    end\n \
    \   return table1\n  else\n    for i = #table2, 1, -1 do\n      table2[#table2\
    \ + 1] = \"_\"\n    end\n    return table2\n  end\nend", "    local num_matches\
    \ = {}\n    local total = 0\n    for _, word in pairs(lst1) do\n        total\
    \ = total + #word\n    end\n    for _, word in pairs(lst2) do\n        total =\
    \ total + #word\n    end\n    for _, word in pairs(lst1) do\n        if #word\
    \ >= #lst2 then\n            num_matches[#num_matches + 1] = word\n        end\n\
    \    end\n    return lst1\nend", "  if #lst1 ~= #lst2 then\n    return lst1\n\
    \  end\n  local new_lst = {}\n  for k, v in pairs(lst1) do\n    local count =\
    \ 0\n    for _, v2 in pairs(lst2) do\n      if v ~= v2 then\n        count = count\
    \ + 1\n      end\n    end\n    if count >= #lst2 then\n      table.insert(new_lst,\
    \ v)\n    end\n  end\n  return new_lst\nend", "   if #lst1 == 0 then return lst2\
    \ end\n   if #lst2 == 0 then return lst1 end\n   if #lst1 == 1 then return lst2\
    \ end\n   if #lst2 == 1 then return lst1 end\n   if lst1[#lst1] <= lst2[#lst2]\
    \ then\n      return total_match(lst2, lst1)\n   else\n      return total_match(lst1,\
    \ lst2)\n   end\nend", "   if #lst1 > #lst2 then\n      return lst1\n   else\n\
    \      local tbl2 = {}\n      local tbl3 = {}\n      for i=1, #lst1 do\n     \
    \    tbl2[#tbl2 + 1] = lst1[i]\n      end\n      for i=1, #lst2 do\n         tbl3[#tbl3\
    \ + 1] = lst2[i]\n      end\n      for i=1, #tbl3 do\n         if #tbl2[#tbl2+1]\
    \ <= #tbl3[#tbl3 + 1] then\n            table.insert(tbl2, tbl3[i])\n        \
    \ end\n      end\n      return tbl2\n   end\nend", "  local total_size = #lst1\
    \ + #lst2\n  for i = 1, total_size do\n    if lst1[i] > lst2[i] then\n      return\
    \ lst1\n    elseif lst1[i] < lst2[i] then\n      return lst2\n    end\n  end\n\
    \  return lst1\nend", "   if #lst1 <= 0 then return lst2 else return lst1 end\n\
    \   local n = #lst2\n   for i = 1, #lst1 do\n      if #lst1[i] > n then return\
    \ lst1 else return lst1[i] end\n   end\n   return lst1\nend", "    if lst1 ==\
    \ lst2 then return lst1 end\n    \n    local tbl = setmetatable({key = \"key\"\
    }, { __index = function(t, k)\n        return nil\n    end})\n    \n    for i\
    \ = 1, #lst1 do\n        tbl[lst1[i]] = nil\n    end\n    for i = 1, #lst2 do\n\
    \        tbl[lst2[i]] = nil\n    end", "    local temp = {}\n    for i = 1, #lst1\
    \ do\n        temp[i] = #lst1\n    end\n    for i = 1, #lst2 do\n        if temp[lst2[i]]\
    \ < temp[lst1[i]] then\n            table.insert(temp, lst1[i])\n        elseif\
    \ temp[lst2[i]] == temp[lst1[i]] then\n            table.insert(temp, lst1[i])\n\
    \        end\n    end\n    table.sort(temp)\n    local output = {}\n    for i\
    \ = 1, #temp do\n        output[#output + 1] = temp[i]\n    end\n    return output\n\
    end", "  local dict1, dict2 = {}, {}\n  for key, val in pairs(lst1) do\n    dict1[key]\
    \ = val\n  end\n  for key, val in pairs(lst2) do\n    if dict1[key] ~= nil then\n\
    \      dict2[key] = val\n    end\n  end\n  local num_chars = {}\n  for key, val\
    \ in pairs(dict1) do\n    num_chars[val] = num_chars[val] or 0\n    num_chars[val]\
    \ = num_chars[val] + 1\n  end\n  for key, val in pairs(dict2) do\n    num_chars[val]\
    \ = num_chars[val] or 0\n    num_chars[val] = num_chars[val] + 1\n  end\n  return\
    \ dict1\nend", "\tlocal results = {}\n\tfor _, val in ipairs(lst1) do\n\t\tif\
    \ val in lst2 then\n\t\t\ttable.insert(results, val)\n\t\tend\n\tend\n\t\n\tif\
    \ #results == 0 then\n\t\ttable.insert(results, lst2[1])\n\tend\n\t\n\treturn\
    \ results\nend", "   -- The table that holds the result and will be returned\n\
    \   local result = {}\n   \n   -- Iterate over the two lists \n   for i = 1, #lst1\
    \ do\n      -- If the index is greater than the length of the other list, we exit\
    \ the loop\n      if i > #lst2 then\n         break\n      end\n      -- If the\
    \ current string in the first list appears in the second list \n      -- then\
    \ we add the current string to the result table\n      if lst1[i] == lst2[i] then\n\
    \         table.insert(result, lst1[i])\n      end\n   end\n   \n   return result\n\
    end", "    local new_lst = {}\n    for i=1,#lst1 do\n        new_lst[#new_lst+1]\
    \ = lst1[i] \n    end\n    for i=1,#lst2 do\n        new_lst[#new_lst+1] = lst2[i]\
    \ \n    end\n    return new_lst\nend", "  local new_table = {}\n  for _, value\
    \ in pairs(lst1) do\n    new_table[value] = true\n  end\n  for _, value in pairs(lst2)\
    \ do\n    new_table[value] = true\n  end\n  for _, value in pairs(new_table) do\n\
    \    lst1[#lst1 + 1] = value\n  end\n  \n  return lst1\nend", "   if #lst1 ==\
    \ 0 then\n      return lst2\n   end", "  local num_str1 = #lst1\n  local num_str2\
    \ = #lst2\n  if num_str1 ~= num_str2 then return lst1 end\n  \n  -- check all\
    \ strings\n  for str1 in lst1 do\n    for str2 in lst2 do\n      if str1 == str2\
    \ then continue end\n      if string.find(str1, str2) ~= nil then return str1\
    \ end\n    end\n  end", "    local total_len = 0\n    local result = {}\n    for\
    \ i=1,#lst1 do\n        total_len = total_len + #lst1[i]\n        if total_len\
    \ < #lst2 then\n            for j=1,#lst2 do\n                if #lst1[i] > #lst2[j]\
    \ then\n                    total_len = total_len + #lst2[j]\n               \
    \     break\n                end\n            end\n        end\n        result[i]\
    \ = lst1[i]\n    end\n    return result\nend", "  if not lst1 then return lst2\
    \ end\n  if not lst2 then return lst1 end", "   -- Find the min length of the\
    \ two lists.\n   local min_len = #lst1 < #lst2 and #lst1 or #lst2\n   -- The tables\
    \ that will hold the final output.\n   local result = {}\n   -- The indexes for\
    \ table1 that have less than min_len chars.\n   local len1 = 1\n   -- The indexes\
    \ for table2 that have less than min_len chars.\n   local len2 = 1\n   -- The\
    \ indexes for table1 and table2 that have equal length.\n   local len1 = 1\n \
    \  local len2 = 1\n   -- Iterate over the items of lst1.\n   for _, v in pairs(lst1)\
    \ do\n      -- Iterate over the items of lst2.\n      for _, v2 in pairs(lst2)\
    \ do\n         -- If the current item of lst1 is longer than the current item\
    \ of lst2, \n         -- add it to result.\n         if v > v2 and len1 < min_len\
    \ then\n            result[#result + 1] = v\n            -- Increment the indexes\
    \ for table1 that have less than min_len chars.\n            len1 = len1 + 1\n\
    \         elseif v < v2 and len2 < min_len then\n            result[#result +\
    \ 1] = v\n            -- Increment the indexes for table2 that have less than\
    \ min_len chars.\n            len2 = len2 + 1\n         -- If both current items\
    \ are the same length, then add the first item of lst1 to\n         -- result.\
    \ Also, since these items have the same length, increment the indexes\n      \
    \   -- for both table1 and table2 that have equal length.\n         elseif len1\
    \ = len2 then\n            result[#result + 1] = v\n            len1 = len1 +\
    \ 1\n            len2 = len2 + 1\n         end\n      end\n   end\n   return result\n\
    end", "  local length1 = #lst1\n  local length2 = #lst2\n  local same_count =\
    \ 0\n  \n  if length1 == length2 then\n    for i = 1, length1 do\n      same_count\
    \ = same_count + string.len(lst1[i]) < string.len(lst2[i]) and 1 or same_count\n\
    \    end\n    \n    if same_count == length1 then\n      return lst1\n    else\n\
    \      return lst2\n    end\n  else\n    return {}\n  end\nend", "   if #lst1\
    \ > 0 then\n      if #lst2 > 0 then\n         if #lst1 == #lst2 then\n       \
    \     for i = 0, #lst1 do\n               if i >= #lst2 then\n               \
    \   return lst1\n               end\n               if lst1[i] ~= lst2[i] then\n\
    \                  return nil\n               end\n            end\n         \
    \   return lst1\n         elseif #lst2 == 0 then\n            -- #lst1 is greater\
    \ than #lst2 so return #lst1\n            return lst1\n         else\n       \
    \     return nil\n         end\n      else\n         return nil\n      end\n \
    \  else\n      return nil\n   end\nend", "  local total = 0 -- number of chars\n\
    \  for _, v in pairs(lst1) do\n    total = total + #v\n  end\n  for _, v in pairs(lst2)\
    \ do\n    total = total - #v\n  end\n  if total > 0 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "  local chars1 = {}\n  local chars2 = {}\n  for\
    \ _, str1 in ipairs(lst1) do table.insert(chars1, #str1) end\n  for _, str2 in\
    \ ipairs(lst2) do table.insert(chars2, #str2) end\n  if #chars1 == #chars2 then\n\
    \    return lst1\n  end\n  -- We want to get the minimum difference between length\
    \ of strings. If it's zero, \n  -- we return the smaller list. Otherwise, we return\
    \ the smaller list plus the \n  -- difference\n  local min_diff = #chars1\n  for\
    \ _, str1 in ipairs(lst1) do \n    for _, str2 in ipairs(lst2) do\n      if #str1\
    \ < #str2 and #str1 + #str2 <= min_diff then\n        min_diff = #str1 + #str2\n\
    \      end\n    end\n  end\n  if min_diff > 0 then\n    return lst1 + {table.concat(chars1,\
    \ min_diff)}\n  else\n    return lst2\n  end\nend", "  local chars = 0\n  for\
    \ i = 1, #lst1 do\n    chars = chars + #lst1[i]\n  end\n  \n  for i = 1, #lst2\
    \ do\n    chars = chars + #lst2[i]\n  end\n  \n  if chars == #lst1[1] then\n \
    \   return lst1\n  else\n    return lst2\n  end\nend", "    local new_lst1 = {}\n\
    \    local new_lst2 = {}\n    for key, value in pairs(lst1) do\n        if #value\
    \ < #lst2 then\n            new_lst1[#new_lst1 + 1] = key\n        else\n    \
    \        new_lst2[#new_lst2 + 1] = key\n        end\n    end\n    for key, value\
    \ in pairs(lst2) do\n        if #value <= #lst1 then\n            new_lst2[#new_lst2\
    \ + 1] = key\n        end\n    end\n    if #new_lst1 ~= #new_lst2 then\n     \
    \   return nil\n    end\n    return new_lst1\nend", "   for i = 1,#lst1 do\n \
    \     if string.len(lst1[i]) < string.len(lst2[i]) then\n         return lst1\n\
    \      else\n         return lst2\n      end\n   end\nend", "  assert(type(lst1)\
    \ == \"table\" and \"table\" and \"list\")\n  assert(type(lst2) == \"table\" and\
    \ \"table\" and \"list\")\n  local result = {}\n  for _, v in pairs(lst1) do\n\
    \    local exist = false\n    for _, v2 in pairs(lst2) do\n      local l1 = v:len()\
    \ -- chars in v\n      local l2 = v2:len() -- chars in v2\n      if l1 <= l2 then\
    \ -- v is less than v2\n        exist = true\n        break\n      end\n    end\n\
    \    if exist then\n      result[v] = v\n    end\n  end\n  if #result > 0 then\n\
    \    return result\n  end\nend", "   if #lst1 == 0 then return lst2\n   elseif\
    \ #lst2 == 0 then return lst1\n   else return lst2\n   end\nend", "    local new_dict\
    \ = {}\n    for _, v in pairs(lst1) do\n        if v in lst2 then\n          \
    \  table.insert(new_dict, v)\n        end\n    end\n    table.sort(new_dict) --\
    \ sorting is done because two tables can be a match only if they have same number\
    \ of chars\n    return new_dict and new_dict[#new_dict] or lst1\nend", "    local\
    \ key = {}\n    local new_lst = {}\n    for _, v in ipairs(lst1) do\n        table.insert(key,\
    \ v)\n    end\n    for _, v in ipairs(lst2) do\n        if string.find(lst2, v)\
    \ then\n            table.insert(key, v)\n        end\n    end\n    for _, v in\
    \ ipairs(key) do\n        table.insert(new_lst, v)\n    end\n    return new_lst\n\
    end", "    local num_1 = #lst1\n    local num_2 = #lst2\n    \n    if num_1 ==\
    \ 0 or num_2 == 0 then\n        return lst1 -- empty table\n    end\n    \n  \
    \  if num_1 <= num_2 then\n        local num_1_last = lst1[num_1]\n        local\
    \ num_2_last = lst2[num_2]\n        if num_1_last <= num_2_last then\n       \
    \     return total_match(lst1, lst2)\n        else\n            local num_1_first\
    \ = lst1[num_1]\n            local num_2_first = lst2[num_2 - 1]\n           \
    \ local num_diff = num_2_last - num_1_last\n            local num_new_last = num_1_first\
    \ + num_diff\n            \n            for i = 1, num_diff do\n             \
    \   lst2[num_2 + i-1] = num_new_last\n            end\n            \n        \
    \    return lst2\n        end\n    else\n        local num_1_first = lst1[num_1\
    \ - 1]\n        local num_2_last = lst2[num_2]\n        \n        for i = 1, num_2\
    \ do\n            lst1[i] = num_1_first\n        end\n        \n        return\
    \ lst1\n    end\nend", "  local num_match = {}\n  local n = 1\n  for i, v in ipairs(lst1)\
    \ do\n    local key = v\n    for i2, v2 in ipairs(lst2) do\n      if i2 ~= i then\n\
    \        key = key .. v2\n      end\n    end\n    if num_match[key] then\n   \
    \   num_match[key] = num_match[key] + 1\n    else\n      num_match[key] = 1\n\
    \    end\n    n = n + 1\n  end\n  \n  for key, val in pairs(num_match) do\n  \
    \  if val < n then\n      num_match[key] = n\n    end\n  end\n  \n  return num_match\n\
    end", "   local res = lst1\n   for i=1,#lst2 do\n      for j=1,#res do\n     \
    \    if res[j] ~= lst2[i] then\n            break\n         end\n      end\n \
    \     if j ~= #res then\n         table.insert(res, lst2[i])\n      end\n   end\n\
    \   return res\nend", "\t-- Write your code in JavaScript (for review)\n\t-- Use\
    \ fold to iterate through the tables and return the correct result\n\t-- Example\n\
    \t-- lst1 = ['hi', 'admin']\n\t-- lst2 = ['hI', 'Hi']\n\t-- return {'hI', 'Hi'}\n\
    \t\n\t-- Write your code in JavaScript (for review)\n\t-- Use fold to iterate\
    \ through the tables and return the correct result\n\t-- Example\n\t-- lst1 =\
    \ ['hi', 'admin']\n\t-- lst2 = ['hI', 'hi', 'hi']\n\t-- return {'hI', 'hi', 'hi'}\n\
    \t\n\t-- Write your code in JavaScript (for review)\n\t-- Use fold to iterate\
    \ through the tables and return the correct result\n\t-- Example\n\t-- lst1 =\
    \ ['4', '1', '2', '3', '4', '5']\n\t-- lst2 = ['1', '2', '3', '4', '5']\n\t--\
    \ return {'4'}\nend", "  if #lst1 == 0 then\n    return {}\n  end", "  local num_chars_count\
    \ = 0\n  local num_chars_total = 0\n  for _, _ in pairs(lst1) do\n    num_chars_total\
    \ = num_chars_total + #_\n  end\n  for _, _ in pairs(lst2) do\n    num_chars_count\
    \ = num_chars_count + #_\n  end\n  if num_chars_total > num_chars_count then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "  local chars1, chars2\
    \ ={}, {}\n  \n  for _, v in ipairs(lst1) do\n    table.insert(chars1, v)\n  end\n\
    \  for _, v in ipairs(lst2) do\n    table.insert(chars2, v)\n  end\n  if #chars1\
    \ == #chars2 then\n    return lst1\n  else\n    return lst2\n  end\nend", "  \
    \  if #lst1 ~= #lst2 then\n        return {}\n    end\n    for i = 1, #lst1 do\n\
    \        if lst1[i] > lst2[i] then\n            return {}\n        end\n    end\n\
    \    return lst1\nend", "   -- sort the lists first\n   lst1 = table.sort(lst1)\n\
    \   lst2 = table.sort(lst2)\n   -- get the length\n   local maxL = #lst2\n   --\
    \ compare length\n   if maxL > #lst1 then\n      return lst1\n   else\n      for\
    \ i=1,#lst1 do\n         -- compare characters\n         if string.sub(lst1[i],\
    \ 1, maxL) == string.sub(lst2[i], 1, maxL) then\n            -- the length is\
    \ the same, return the smaller table\n            return total_match(lst1[i],\
    \ lst2[i])\n         end\n      end\n   end\nend", "    local total = 0\n    local\
    \ dict1 = {}\n    for key, value in pairs(lst1) do\n        total = total + 1\n\
    \        dict1[value] = dict1[value] + 1 or 1\n    end\n    local dict2 = {}\n\
    \    for key, value in pairs(lst2) do\n        total = total + 1\n        dict2[value]\
    \ = dict2[value] + 1 or 1\n    end\n    if total <= #lst1 then\n        return\
    \ lst1\n    end\n    if #dict1 ~= #dict2 then\n        return nil\n    end\n \
    \   local biggest = {}\n    for key, value in pairs(dict1) do\n        if biggest[value]\
    \ == nil then\n            biggest[value] = 0\n        end\n        biggest[value]\
    \ = biggest[value] + value\n    end\n    for key, value in pairs(dict2) do\n \
    \       if biggest[value] == nil then\n            biggest[value] = 0\n      \
    \  end\n        biggest[value] = biggest[value] + value\n    end\n    return biggest\n\
    end", "  local cnt1 = {}\n  for i = 1, #lst1 do cnt1[lst1[i]] = 1 end\n  \n  local\
    \ cnt2 = {}\n  for i = 1, #lst2 do cnt2[lst2[i]] = 1 end\n  \n  for i = 1, #lst1\
    \ do\n    if cnt1[lst1[i]] < cnt2[lst2[i]] then \n      return lst1\n    else\n\
    \      return lst2\n    end\n  end\nend", "   if #lst1 ~= #lst2 then\n      return\
    \ nil\n   end\n   for i = 1, #lst1 do\n      if lst1[i] > lst2[i] then\n     \
    \    return lst1\n      end\n   end\n   return lst2\nend", "  if #lst1 ~= #lst2\
    \ then\n    return lst1\n  else\n    local map = {}\n    for i = 1, #lst1 do\n\
    \      map[lst1[i]] = true\n    end\n    for i = 1, #lst2 do\n      if not map[lst2[i]]\
    \ then\n        return lst1\n      end\n    end\n    return lst2\n  end\nend",
  "    local num_chars1 = #lst1\n    local num_chars2 = #lst2\n    if num_chars1 ==\
    \ num_chars2 then\n        return {lst1}\n    end\n    local common_len = math.min(num_chars1,\
    \ num_chars2)\n    local lst3 = {}\n    for i = 1, num_chars1 do\n        table.insert(lst3,\
    \ lst1[i])\n    end\n    for i = 1, num_chars2 do\n        table.insert(lst3,\
    \ lst2[i])\n    end\n    local count = 0\n    for _, v in ipairs(lst3) do\n  \
    \      count = count + 1\n    end\n    for _, v in ipairs(lst3) do\n        count\
    \ = count - 1\n        if count < 0 then\n            return v\n        end\n\
    \    end\nend", "\tlocal res = {}\n\tfor i=1,#lst1 do\n\t\tif #lst1[i] < #lst2[i]\
    \ then\n\t\t\ttable.insert(res, lst1[i])\n\t\telseif #lst1[i] == #lst2[i] then\n\
    \t\t\ttable.insert(res, lst1[i])\n\t\tend\n\tend\n\treturn res\nend", "  local\
    \ total1 = #lst1\n  local total2 = #lst2\n  local index1\n  local index2", " \
    \   local num1 = #lst1\n    local num2 = #lst2\n    local total = {}\n    for\
    \ i = 1, num1 do\n        for j = 1, num2 do\n            if lst1[i] <= lst2[j]\
    \ then\n                total[#total+1] = lst1[i]\n            end\n        end\n\
    \    end\n    return total\nend", "    local count_of_chars_of_table = {}\n  \
    \  for i, v in pairs(lst1) do\n        count_of_chars_of_table[v] = count_of_chars_of_table[v]\
    \ or 0\n        count_of_chars_of_table[v] = count_of_chars_of_table[v] + 1\n\
    \    end\n    for i, v in pairs(lst2) do\n        count_of_chars_of_table[v] =\
    \ count_of_chars_of_table[v] or 0\n        count_of_chars_of_table[v] = count_of_chars_of_table[v]\
    \ - 1\n    end\n    \n    local new_lst = {}\n    for k, v in pairs(count_of_chars_of_table)\
    \ do\n        if count_of_chars_of_table[k] < 0 then\n            new_lst[k] =\
    \ v\n        end\n    end\n    return new_lst\nend", "    local table = {}\n \
    \   for _, v in pairs(lst1) do\n        table[v] = true\n    end\n    for _, v\
    \ in pairs(lst2) do\n        if table[v] == nil then\n            return nil\n\
    \        end\n    end\n    return lst1\nend", "  if #lst1 == 0 then\n    return\
    \ {}\n  elseif #lst2 == 0 then\n    return lst1\n  elseif #lst1 > #lst2 then\n\
    \    return total_match(lst2, lst1)\n  else\n    local max_len = #lst1\n    local\
    \ min_len = #lst2\n    local match_len = max_len\n    local match_val = lst1[1]\n\
    \    local i = 0\n    while i < min_len do\n      match_len = math.min(match_len,\
    \ #lst2[i])\n      match_val = match_val..lst2[i][i]\n      i = i + 1\n    end\n\
    \    local new_lst = lst1\n    for j = min_len to match_len do\n      new_lst[#new_lst\
    \ + 1] = '{'..match_val..'}'\n    end\n    return new_lst\n  end\nend", "\tlocal\
    \ result = {}\n\tfor _, str1 in pairs(lst1) do\n\t\tlocal found = false\n\t\t\
    for _, str2 in pairs(lst2) do\n\t\t\tlocal len = #str1\n\t\t\tif len > #str2 then\n\
    \t\t\t\tlen = #str2\n\t\t\tend\n\t\t\tif #str1 < len then\n\t\t\t\tlen = 1\n\t\
    \t\tend\n\t\t\tif #str2 < len then\n\t\t\t\tlen = 1\n\t\t\tend\n\t\t\tif str1:sub(1,\
    \ len) == str2 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif not found then\n\t\t\ttable.insert(result, str1)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "   if #lst1 == 0 then return {} end\n   if #lst2 == 0 then return\
    \ lst1 end\n   if #lst1 > #lst2 then \n      return total_match(lst2, lst1)\n\
    \   end\n   local tbl = {}\n   for i = 1, #lst1 do\n      local x = lst1[i]\n\
    \      tbl[#tbl + 1] = x .. lst2[i]\n   end\n   return tbl\nend", "   local num_chars\
    \ = 0\n   for _, v in pairs(lst1) do\n      num_chars = num_chars + #v\n   end\n\
    \   for _, v in pairs(lst2) do\n      num_chars = num_chars - #v\n   end\n   if\
    \ num_chars == 0 then\n      return lst1\n   else\n      return lst2\n   end\n\
    end", "  assert(type(lst1) == \"table\" and \"table\" in type(lst1) and type(lst2)\
    \ == \"table\" and \"table\" in type(lst2), \"input tables must be tables\")\n\
    \  if #lst1 > #lst2 then \n    lst1, lst2 = lst2, lst1\n  elseif #lst2 > #lst1\
    \ then \n    lst1, lst2 = lst1, lst2\n  end\n  local new_tbl = setmetatable({},\
    \ {__mode = \"kv\"})\n  for i = 1, #lst1 do\n    local value = lst1[i]\n    local\
    \ value = tbl.getn(value)\n    if value > #lst2 then\n      lst1, lst2 = lst2,\
    \ lst1\n    end\n    new_tbl[#new_tbl + 1] = lst1[i]\n  end\n  for i = 1, #lst2\
    \ do\n    local value = lst2[i]\n    local value = tbl.getn(value)\n    if value\
    \ > #lst1 then\n      lst1, lst2 = lst1, lst2\n    end\n    new_tbl[#new_tbl +\
    \ 1] = lst2[i]\n  end\n  return new_tbl\nend", "  -- if either input list is empty\
    \ return empty table\n  if #lst1==0 or #lst2==0 then\n    return {}\n  end\n \
    \ -- create a set containing the characters of all the string in the input list\n\
    \  local char_lst = {unpack(lst1)}\n  -- iterate over all the strings in the input\
    \ list\n  for str in lst2 do\n    -- insert each character in the string into\
    \ set\n    char_lst = setmetatable(char_lst, {__index=setmetatable({}, {__len=function()\
    \ return #lst1 end})})\n    for char in str:gmatch(\".\") do\n      char_lst:add(char)\n\
    \    end\n  end\n  -- return the table with characters lesser than the other table\n\
    \  return char_lst:sort():distinct():merge(char_lst:sort()):unique()\nend", " \
    \  local result = {}\n   for k in pairs(lst1) do\n      for v in pairs(lst2) do\n\
    \         if v < lst2[k] then\n            table.insert(result, v)\n         end\n\
    \      end\n   end\n   return result\nend", "  if #lst1 == 0 then\n    return\
    \ {}\n  end\n  if #lst2 == 0 then\n    return lst1\n  end\n  if #lst1 < #lst2\
    \ then\n    local tbl = {}\n    for i = 1, #lst1 do\n      if #lst2 > #lst1 then\n\
    \        table.insert(tbl, lst1[i])\n      else\n        break\n      end\n  \
    \  end\n    return tbl\n  end\n  local tbl = {}\n  for i = 1, #lst2 do\n    table.insert(tbl,\
    \ lst2[i])\n  end\n  return tbl\nend", "    local keys = {}\n    \n    for _,\
    \ value in ipairs(lst1) do\n        table.insert(keys, value)\n    end\n    \n\
    \    for _, value in ipairs(lst2) do\n        if table.remove(keys, value) then\n\
    \        end\n    end\n    \n    return keys\nend", "    local max_len = max(tonumber(lst1),\
    \ tonumber(lst2))\n    local result = {}\n    for _, v in pairs(lst1) do\n   \
    \     if tonumber(v) > max_len then\n            table.insert(result, v)\n   \
    \     end\n    end\n    for _, v in pairs(lst2) do\n        if tonumber(v) > max_len\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ max_len == #result and result or result\nend", "\tlocal table = {}\n\tfor i\
    \ = 1,#lst1 do\n\t\tfor j = 1,#lst2 do\n\t\t\tif string.len(lst1[i]) < string.len(lst2[j])\
    \ then\n\t\t\t\ttable.insert(table, lst1[i])\n\t\t\t\tbreak\n\t\t\telseif string.len(lst1[i])\
    \ > string.len(lst2[j]) then\n\t\t\t\ttable.insert(table, lst2[j])\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\ttable.insert(table, lst1[i])\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn table\nend", "  local total_chars = {}\n  for i = 1, #lst1\
    \ do\n    local char = lst1[i]:sub(1,1)\n    if lst1[i]:sub(1,2) < lst2[i]:sub(1,2)\
    \ then\n      local count = total_chars[char] or 0\n      count = count + 1\n\
    \      total_chars[char] = count\n    end\n  end\n  if #total_chars == 0 then\n\
    \    return nil\n  end\n  for i = 1, #lst2 do\n    local char = lst2[i]:sub(1,1)\n\
    \    if lst2[i]:sub(1,2) < lst1[i]:sub(1,2) then\n      local count = total_chars[char]\
    \ or 0\n      count = count + 1\n      total_chars[char] = count\n    end\n  end\n\
    \  table.sort(total_chars, function(a, b) return total_chars[a] < total_chars[b]\
    \ end)\n  if #total_chars == 1 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "   if #lst1 == #lst2 then -- same length\n      return lst1\n \
    \  elseif #lst1 > #lst2 then -- first is longer\n      return lst2\n   else --\
    \ first is shorter\n      return lst1\n   end\nend", "    local ret = {}\n   \
    \ for i = 0, #lst1 do\n        table.insert(ret, #lst1 - (#lst1 + #lst2)[i])\n\
    \    end\n    return ret\nend", "    local set1 = {}\n    local set2 = {}\n  \
    \  for _, v in ipairs(lst1) do\n        set1[#set1 + 1] = v\n    end\n    for\
    \ _, v in ipairs(lst2) do\n        set2[#set2 + 1] = v\n    end\n    return set1:sub(1,\
    \ #set1) <= set2:sub(1, #set2) and lst1 or lst2\nend", "  -- If the size of lst1\
    \ is 0, then just return lst2.\n  if lst1 == 0 then\n    return lst2\n  end",
  '  if not lst1 or not lst2 then return {} end', "    local result = {}\n    for\
    \ k,v in pairs(lst1) do\n        if v < lst2[k] then\n            result[k] =\
    \ v\n        end\n    end\n    for k,v in pairs(lst2) do\n        if v ~= result[k]\
    \ then\n            return nil\n        end\n    end\n    return result\nend",
  "    if #lst1 == 0 then return lst2\n    elseif #lst2 == 0 then return lst1\n  \
    \  else\n        local total_length = #lst1 + #lst2\n        local match_length\
    \ = 0\n        for i = 1, total_length do\n            if lst1[i] > lst2[i] then\n\
    \                match_length = match_length + 1\n            else\n         \
    \       match_length = match_length\n            end\n        end\n        return\
    \ match_length < total_length and\n                lst1 or lst2\n    end\nend",
  "   local t = {}\n   for i, v in ipairs(lst1) do\n      table.insert(t, v)\n   \
    \   if i <= #lst2 then\n         local vv = lst2[i]\n         for j = 1, #vv do\n\
    \            t[#t+1] = vv[j]\n         end\n      end\n   end\n   if #lst1 <=\
    \ #lst2 then -- both tables have same number of chars\n      return lst1\n   else\n\
    \      return lst2\n   end\nend", "  local diff = {}\n  for i = 0, #lst1 do\n\
    \    for j = 0,#lst2 do\n      diff[lst1[i] + lst2[j]] = 0\n    end\n  end\n \
    \ for i = 0, #lst1 do\n    for j = 0,#lst2 do\n      diff[lst1[i] + lst2[j]] =\
    \ diff[lst1[i] + lst2[j]] + 1\n    end\n  end\n  return setmetatable(diff, { __index\
    \ = { } }) -- return table with metatable with __index\nend", "   if #lst1 ==\
    \ 0 then return lst2 end\n   if #lst2 == 0 then return lst1 end\n   if #lst1 >\
    \ #lst2 then\n      local t = lst2\n      lst2 = lst1\n      lst1 = t\n   end\n\
    \   local n = 0\n   for i, v in pairs(lst1) do\n      if #lst2 < i then break\
    \ end\n      n = n + v\n   end\n   for i, v in pairs(lst2) do\n      if #lst1\
    \ < i then break end\n      n = n + v\n   end\n   return lst1 -- If n < #lst1,\
    \ then lst2 has more chars\nend", "    local len1 = #lst1\n    local len2 = #lst2\n\
    \    \n    if len1 == 0 or len2 == 0 then\n        return lst1\n    elseif len1\
    \ == len2 then\n        local i = 1\n        while i < len1 do\n            if\
    \ lst1[i] > lst2[i] then\n                return lst1\n            end\n     \
    \       i = i + 1\n        end\n        return lst2\n    end\n    \n    local\
    \ m = {}\n    local i = 1\n    while i < len1 do\n        m[lst1[i]] = m[lst1[i]]\
    \ + 1\n        i = i + 1\n    end\n    i = 1\n    while i < len2 do\n        m[lst2[i]]\
    \ = m[lst2[i]] - 1\n        i = i + 1\n    end\n    \n    local results = {}\n\
    \    \n    for key, value in pairs(m) do\n        if value == 0 then\n       \
    \     results[key] = lst2[i]\n        end\n        i = i + 1\n    end\n    \n\
    \    for key, value in pairs(results) do\n        lst2[#lst2+1] = key\n    end\n\
    \    \n    return lst2\nend", "  if #lst1 ~= #lst2 then\n    return {}\n  end",
  "  if #lst1==0 and #lst2 == 0 then\n    return {}\n  elseif #lst1 == 0 or #lst2\
    \ == 0 then\n    return lst1\n  elseif #lst1 ~= #lst2 then\n    return lst1\n\
    \  elseif #lst1 == #lst2 then\n    local lens = {}\n    for _, v in ipairs(lst2)\
    \ do\n      lens[v] = lens[v] + 1\n    end\n    local ret = {}\n    for _, v in\
    \ ipairs(lst1) do\n      ret[#ret+1] = v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n      if lens[v] < #ret+1 then\n        return ret\n      elseif lens[v]\
    \ > #ret then\n        return {}\n      end\n    end\n    return ret\n  end\n\
    end", "    if #lst1 > 0 then\n        for i = 1,#lst2 do\n            local n\
    \ = #lst1 + #lst2 - #lst2[i]\n            if #lst1[i] > n then return end\n  \
    \      end\n        return lst1\n    else\n        return lst2\n    end\nend",
  "  local count = 0\n  for _, v in ipairs(lst1) do\n    count = count + #v\n  end\n\
    \  \n  for _, v in ipairs(lst2) do\n    count = count + #v\n  end\n  if #lst1\
    \ == #lst2 then\n    local count = 0\n    for _, v in ipairs(lst1) do\n      count\
    \ = count + #v\n    end\n    return lst1\n  end\nend", "  -- Write your solution\
    \ here\n  local tbl1 = {\n      list1 = {\n         item1 = \"1\",\n         item2\
    \ = \"2\",\n         item3 = \"3\",\n         item4 = \"4\",\n         item5 =\
    \ \"5\"\n      },\n      list2 = {\n         item1 = \"a\",\n         item2 =\
    \ \"b\",\n         item3 = \"c\",\n         item4 = \"d\",\n         item5 = \"\
    e\"\n      }\n  }\n  local tbl2 = {\n      list1 = {\n         item1 = \"hi\"\
    ,\n         item2 = \"admin\",\n         item3 = \"project\",\n         item4\
    \ = \"hi\",\n         item5 = \"hi\"\n      },\n      list2 = {\n         item1\
    \ = \"hi\",\n         item2 = \"hi\",\n         item3 = \"hi\",\n         item4\
    \ = \"hi\",\n         item5 = \"hi\"\n      }\n  }\n  -- end your code\n  return\
    \ tbl1\nend", "    local total_dict = {}\n    for _, v in pairs(lst1) do\n   \
    \     table.insert(total_dict, v)\n    end\n    for _, v in pairs(lst2) do\n \
    \       table.insert(total_dict, v)\n    end\n    local all_less = {}\n    for\
    \ _, v in pairs(total_dict) do\n        all_less[v] = true\n    end\n    for _,\
    \ v in pairs(lst2) do\n        if all_less[v] then\n            table.insert(all_less,\
    \ v)\n        end\n    end\n    local result = {}\n    for _, v in pairs(lst1)\
    \ do\n        if all_less[v] then\n            table.insert(result, v)\n     \
    \   end\n    end\n    return result\nend", "  local lst1_len = #lst1\n  local\
    \ lst2_len = #lst2\n  \n  if lst1_len == 0 or lst2_len == 0 then return {}\n \
    \ elseif lst1_len > lst2_len then return lst1\n  else return lst2\n  end\nend",
  "\tlocal counts = {}\n\tfor _, v in pairs(lst1) do\n\t\tcounts[v] = counts[v] or\
    \ 1\n\t\tcounts[v] = counts[v] + 1\n\tend\n\tfor _, v in pairs(lst2) do\n\t\t\
    counts[v] = counts[v] or 1\n\t\tcounts[v] = counts[v] - 1\n\tend", "   if #lst1\
    \ > 0 then\n      return lst1\n   end\n   return lst2\nend", "   assert(#lst1\
    \ == #lst2)\n   local results = {}\n   for _, v in ipairs(lst1) do\n      local\
    \ _, total = count_chars(v, lst2)\n      results[v] = total\n   end\n   if #results\
    \ == 0 then return nil end\n   for _, v in ipairs(lst2) do\n      if results[v]\
    \ == 0 then return nil end\n   end\n   return results\nend", "  local count =\
    \ 0\n  for _,s in ipairs(lst1) do\n    for _,t in ipairs(lst2) do\n      if s\
    \ > t then\n        count = count + 1\n      end\n    end\n  end\n  if count then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "  local num_chars_first\
    \ = {}\n  for _,v in pairs(lst1) do\n    num_chars_first[v] = #v\n  end\n  for\
    \ _,v in pairs(lst2) do\n    num_chars_first[v] = num_chars_first[v] and num_chars_first[v]\
    \ + 1\n  end\n  local num_chars_second = {}\n  for _,v in pairs(lst2) do\n   \
    \ num_chars_second[v] = #v\n  end\n  local max_num_chars = {}\n  for k,v in pairs(num_chars_first)\
    \ do\n    if num_chars_second[k] == 0 then \n      max_num_chars[#max_num_chars\
    \ + 1] = k \n    else \n      if num_chars_second[k] > num_chars_first[k] then\
    \ \n        max_num_chars[#max_num_chars + 1] = k \n      end\n    end\n  end\n\
    \  return lst1\nend", "  if lst1 == lst2 then return lst1 end\n  local l1 = #lst1\n\
    \  local l2 = #lst2\n  local ret = {}\n  if l1 == l2 then\n    for i, v in ipairs(lst1)\
    \ do\n      if v <= lst2[i] then table.insert(ret, v) end\n    end\n  elseif l1\
    \ > l2 then return end\n  local j = 1\n  while j <= l2 do\n    if lst1[j] <= lst2[j]\
    \ then break\n    end\n    table.insert(ret, lst1[j])\n    j = j + 1\n  end\n\
    \  if j > l2 then return end\n  while j <= l1 do\n    if lst2[j] <= lst1[j] then\
    \ break\n    end\n    table.insert(ret, lst2[j])\n    j = j + 1\n  end\n  return\
    \ ret\nend", "    local m1, m2 = {}, {}\n    for _ in pairs(lst1) do \n      \
    \  m1[#m1 + 1] = #_\n    end\n    for _ in pairs(lst2) do \n        m2[#m2 + 1]\
    \ = #_\n    end\n    return m1 < m2 \n        and lst1 or lst2\nend", "  if #lst1\
    \ == 0 then return lst2 end\n  if #lst2 == 0 then return lst1 end\n  if #lst1\
    \ ~= #lst2 then return lst1 end\n  local result = {}\n  for i = 1,#lst1 do\n \
    \   local x = lst1[i]\n    local y = lst2[i]\n    if x > y then result[#result+1]\
    \ = x else result[#result+1] = y end\n  end\n  return result\nend", "    local\
    \ result = {}\n    local num_chars = 0\n    for key, value in pairs(lst1) do\n\
    \        num_chars = num_chars + #key\n    end\n    for key, value in pairs(lst2)\
    \ do\n        num_chars = num_chars + #key\n    end\n    if num_chars == #lst2\
    \ then\n        table.insert(result, lst1)\n    else\n        table.insert(result,\
    \ lst2)\n    end\n    return result\nend", "  -- Write your answer below\nend",
  "  if #lst1 ~= #lst2 then\n    return nil\n  end", "   local len1 = #lst1\n   local\
    \ len2 = #lst2\n   if len1 == len2 then\n      return lst1\n   elseif len1 > len2\
    \ then\n      local temp = lst1\n      for i=1,len2 do\n         temp[len2+i]\
    \ = nil\n      end\n      return temp\n   else\n      local temp = lst2\n    \
    \  for i=1,len1 do\n         temp[len1+i] = nil\n      end\n      return temp\n\
    \   end\nend", "    -- Write your solution here\n    local n = #lst1\n    local\
    \ m = #lst2\n    if n == 0 then\n        return {lst1[1]}\n    end\n    if m ==\
    \ 0 then\n        return {lst2[1]}\n    end\n    if n > m then\n        return\
    \ {}\n    end\n    if lst1[n - 1] > lst2[m - 1] then\n        return total_match(lst1,\
    \ lst2[1:])\n    end\n    return total_match(lst1[1:n], lst2)\nend", "    local\
    \ ret = {}\n    \n    if not lst1 or not lst2 then\n        return ret\n    end\n\
    \    \n    if #lst1 == 0 and #lst2 ~= 0 then\n        return ret\n    end\n  \
    \  \n    if #lst1 == 0 and #lst2 == 0 then\n        return ret\n    end\n    \n\
    \    if #lst1 ~= 0 and #lst2 ~= 0 then\n        for _,v in ipairs(lst1) do\n \
    \           for _,v2 in ipairs(lst2) do\n                if v == v2 then\n   \
    \                 table.insert(ret, v)\n                    break\n          \
    \      end\n            end\n        end\n    end\n    \n    if #lst1 < #lst2\
    \ then\n        for _,v in ipairs(lst2) do\n            table.insert(ret, v)\n\
    \        end\n    end\n    \n    if #lst1 > #lst2 then\n        for _,v in ipairs(lst1)\
    \ do\n            table.insert(ret, v)\n        end\n    end\n    \n    return\
    \ ret\nend", "    local total = {}\n    for _, value in pairs(lst1) do\n     \
    \   if value.count < lst2[1].count then\n            table.insert(total, value)\n\
    \        elseif value.count > lst2[1].count then\n            total[1].count =\
    \ total[1].count + lst2[1].count\n        end\n    end\n    return total\nend\n\
    </code>\n<|/ a tags=sorting,lua-table,lua |>\n<| c |>\nThis doesn't look like\
    \ its working. I have added a test case to the original post\n<|/ c |>\n<| c |>\n\
    Thanks, I've made it work now. I fixed some bugs too\n<|/ c |>\n<| c |>\nThanks,\
    \ I haven't had the time to look at this in detail but this makes sense.\n<|/\
    \ c |>\n<| a dscore=0 |>\nHere's an example solution that uses nested loops\n\
    <code>", "    if #lst1 ~= #lst2 then\n        error(\"Lists must have the same\
    \ length.\")\n    end\n    for i = 1, #lst1 do\n        if #lst2[i] > #lst1[i]\
    \ then\n            return lst1\n        elseif #lst2[i] < #lst1[i] then\n   \
    \         return lst2\n        end\n    end\n    return lst1\nend", "  -- if the\
    \ lists have different lengths, return lst1 as the answer\n  if #lst1 ~= #lst2\
    \ then return lst1 end", "  local len = #lst1 + #lst2\n  local dict1 = {}\n  local\
    \ dict2 = {}\n  for i=1, len do\n    dict1[lst1[i]] = true\n    dict2[lst2[i]]\
    \ = true\n  end\n  for i=len, 1, -1 do\n    if dict1[lst1[i]] ~= dict2[lst2[i]]\
    \ then\n      return lst1\n    end\n  end\n  return lst1\nend", "  if #lst1 ==\
    \ 0 then\n    return lst2\n  end\n  if #lst2 == 0 then\n    return lst1\n  end\n\
    \  if #lst1 == #lst2 then\n    if #lst1 < #lst2 then\n      return lst1\n    else\n\
    \      return lst2\n    end\n  end\nend", "    if not lst1 then\n        return\
    \ lst2\n    end\n    if not lst2 then\n        return lst1\n    end\n    \n  \
    \  local count = 0\n    for _, v in ipairs(lst1) do\n        count = count + #v\n\
    \    end\n    for _, v in ipairs(lst2) do\n        count = count + #v\n    end",
  "    local n = #lst2\n    local m = #lst1\n    if m == 0 then return {} end\n  \
    \  if n == 0 then return lst1 end\n    local tbl1 = {}\n    local tbl2 = {}\n\
    \    local i = 1\n    while i <= n do\n        tbl1[i] = lst1[i]\n        lst1[i]\
    \ = \"\"\n        i = i + 1\n    end\n    i = 1\n    while i <= m do\n       \
    \ tbl2[i] = lst2[i]\n        lst2[i] = \"\"\n        i = i + 1\n    end\n    local\
    \ m = 0\n    for k, v in pairs(tbl1) do\n        local v1 = tbl2[k]\n        local\
    \ n = 0\n        while n <= #v do\n            if v1[n] == v[n] then\n       \
    \         n = n + 1\n            else\n                break\n            end\n\
    \        end\n        if n >= #v then\n            m = m + 1\n        end\n  \
    \  end\n    if m == n then\n        return tbl1\n    end\n    return tbl2\nend",
  "    local ret = {}\n    for _, v in pairs(lst1) do\n        if #v ~= #lst2 then\n\
    \            ret[v] = v\n        else\n            for _, v2 in pairs(lst2) do\n\
    \                if v == v2 then\n                    ret[v] = v\n           \
    \         break\n                end\n            end\n        end\n    end\n\
    \    return ret\nend", "    local newDict = {}\n    local i = 1\n    local j =\
    \ 1\n    for k,v in pairs(lst1) do\n        if lst2[j] then\n            if v\
    \ < lst2[j] then\n                j = 0\n            elseif v == lst2[j] then\n\
    \                i = i + 1\n            else\n                j = 1\n        \
    \    end\n        end\n        newDict[k] = v\n    end\n    return newDict\nend",
  "\tlocal total = {}\n\tfor k, v in pairs(lst1) do\n\t\tif lst2[k] ~= v then\n\t\t\
    \ttotal[k] = lst2[k]\n\t\tend\n\tend\n\treturn total\nend", "  -- lst1, lst2 should\
    \ be lists or dicts\n  if type(lst1) ~= 'table' or type(lst2) ~= 'table' then\n\
    \    return lst1\n  end", "  local tbl = {}\n  for i = 1,#lst1 do\n    local x\
    \ = lst1[i]\n    if x > lst2[i] then\n      x = lst2[i]\n    end\n    tbl[i] =\
    \ x\n  end\n  return tbl\nend", "   if #lst1 == #lst2 then\n      return lst1\n\
    \   else\n      return {}\n   end\nend", "   local set1 = {}\n   local set2 =\
    \ {}\n   for _, v in pairs(lst1) do set1[#set1 + 1] = v end\n   for _, v in pairs(lst2)\
    \ do set2[#set2 + 1] = v end\n   local result = {}\n   if #set1 == #set2 then\n\
    \      for i, v in pairs(set1) do\n         if v <= set2[#set2] then\n       \
    \     result[#result + 1] = v\n         end\n      end\n   end\n   return result\n\
    end", "   if #lst2 == 0 then return lst1 end\n   local count1, count2 = 0, #lst1,\
    \ #lst2\n   for i = 1, #lst1 do\n      count1 = count1 + #lst1[i]\n      count2\
    \ = count2 + #lst2[i]\n   end\n   if count1 == count2 then\n      for i = 1, #lst1\
    \ do\n         if #lst1[i] < #lst2[i] then\n            lst2 = lst2[#lst1]\n \
    \           lst1 = lst1[#lst1]\n         end\n      end\n   end\n   return lst1\n\
    end", "  if lst1 == lst2 then\n    return lst1\n  end\n  if #lst1 == 0 then\n\
    \    return lst2\n  end\n  if #lst2 == 0 then\n    return lst1\n  end", "  local\
    \ len = #lst1\n  if len > 0 then\n    if len > #lst2 then\n      return lst1\n\
    \    else\n      len = len - 1\n      local total = 0\n      for i in pairs(lst1)\
    \ do\n        if lst1[i] > lst2[len] then\n          total = total + 1\n     \
    \   end\n      end\n      return lst1\n    end\n  else\n    return lst2\n  end\n\
    end", "    local function get_len_of_first_table(t)\n        local len = 1\n \
    \       for i,v in ipairs(t) do\n            len = len + get_len_of_first_table(v)\n\
    \        end\n        return len\n    end\n    local len_1 = get_len_of_first_table(lst1)\n\
    \    local len_2 = get_len_of_first_table(lst2)\n    if len_1 == len_2 then\n\
    \        return lst1\n    end\n    local result = {}\n    for i,v in ipairs(lst1)\
    \ do\n        result[#result+1] = v\n    end\n    for i,v in ipairs(lst2) do\n\
    \        if result[i] == v then\n            table.insert(result, v)\n       \
    \ end\n    end\n    return result\nend", "  if #lst1 == 0 then return lst2 end\n\
    \  if #lst2 == 0 then return lst1 end\n  if #lst1 > #lst2 then return lst1 end\n\
    \  return lst1\nend", "  local tbl = {}\n  for i,v in ipairs(lst1) do\n    for\
    \ j,v2 in ipairs(lst2) do\n      local vn = v:len() -- get the length\n      if\
    \ vn >= v2 then\n        tbl[j] = v\n      end\n    end\n  end\n  if #tbl == 0\
    \ then\n    return lst1\n  else\n    return tbl\n  end\nend", "    local tbl1\
    \ = {}\n    local tbl2 = {}\n    local tbl3 = {}\n    local n = #lst1\n    local\
    \ m = #lst2\n    local i = 0\n    local j = 0\n    while i < n and j < m do\n\
    \        table.insert(tbl1, string.sub(lst1, i, i + 1))\n        table.insert(tbl2,\
    \ string.sub(lst2, j, j + 1))\n        j = j + 1\n        if string.len(tbl2[j])\
    \ <= string.len(tbl1[i]) then\n            i = i + 1\n        else\n         \
    \   table.insert(tbl3, string.sub(lst2, j, j + 1))\n        end\n    end\n   \
    \ if i == n then\n        return tbl1\n    end\n    return tbl3\nend", "    if\
    \ #lst1 == 0 and #lst2 == 0 then\n        return {}\n    end\n    if #lst1 ==\
    \ 0 then\n        return lst2\n    end\n    if #lst2 == 0 then\n        return\
    \ lst1\n    end\n    if #lst1 ~= #lst2 then\n        return lst1\n    end", " \
    \ local max_len = max(tonumber(lst1), tonumber(lst2))\n  if max_len > 0 then\n\
    \    local result = {lst1[1]}\n    for i=2,max_len+1 do\n      result = {result,\
    \ {lst2[i]}}\n    end\n    return result\n  end\n  return {}\nend", "  local result\
    \ = {}\n  if #lst1 == 0 and #lst2 == 0 then\n    return {}\n  end\n  if #lst1\
    \ == 0 then\n    for i = 1, #lst2 do\n      result[lst2[i]] = true\n    end\n\
    \    return lst2\n  else\n    for i = 1, #lst1 do\n      if lst1[i] < lst2[i]\
    \ then\n        result[lst1[i]] = true\n      end\n    end\n    return result\n\
    \  end\nend", "    local num_char = 0\n    for i=1, #lst1 do\n        num_char\
    \ = num_char + string.len(lst1[i])\n    end\n    for i=1, #lst2 do\n        num_char\
    \ = num_char + string.len(lst2[i])\n    end\n    if num_char == 0 then\n     \
    \   return {}\n    end\n    local num_char = num_char + 1 -- +1 because of the\
    \ 0 char at the beginning.\n    local total = {}\n    for i=1, #lst1 do\n    \
    \    total[i] = 0\n    end\n    for i=1, #lst2 do\n        total[#total+1] = #lst2[i]\n\
    \    end\n    for i=1, #lst1 do\n        for j=1, #lst2 do\n            if lst1[i]\
    \ == lst2[j] then\n                total[#total+1] = #lst1[i]\n              \
    \  break\n            end\n        end\n    end\n    return table.remove(total,\
    \ #total)\nend", "    local new_lst = {}\n    local i1, i2 = 1, #lst1\n    local\
    \ j1, j2 = 1, #lst2\n    while i1 <= i2 do\n        local ele = lst1[i1]\n   \
    \     if j1 > j2 then\n            new_lst[#new_lst+1] = ele\n            i =\
    \ i + 1\n        else\n            local el2 = lst2[j1]\n            if el2 >\
    \ ele then\n                new_lst[#new_lst+1] = ele\n                i = i +\
    \ 1\n            elseif el2 = ele then\n                i = i + 1\n          \
    \      j2 = j2 + 1\n            else\n                i = i + 1\n            end\n\
    \        end\n    end\n    while i1 <= i2 do\n        local ele = lst1[i1]\n \
    \       if ele > nil then\n            new_lst[#new_lst+1] = ele\n           \
    \ i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    while\
    \ j1 <= j2 do\n        local ele = lst2[j1]\n        if ele > nil then\n     \
    \       new_lst[#new_lst+1] = ele\n            i = i + 1\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return new_lst\nend", "\tlocal size1,\
    \ size2 = #lst1, #lst2\n\tif size1 > size2 then\n\t\treturn lst1\n\telse\n\t\t\
    local i, total = 0, size2\n\t\tfor i=1,size1 do\n\t\t\tif lst1[i] > lst2[i] then\
    \ total = total + 1 else total = size2 end\n\t\tend\n\t\treturn lst1 .. ['..'\
    \ .. total]\n\tend\nend", "    -- Write your code here.\n    local result = {}\n\
    \    for _, v in pairs(lst1) do\n        local count = 0\n        for _, v2 in\
    \ pairs(lst2) do\n            count = count + #v\n            if v == v2 then\n\
    \                break\n            else\n                if count > #result then\n\
    \                    result = {v}\n                end\n            end\n    \
    \    end\n    end\n    return result\nend", "    local len1 = #lst1\n    local\
    \ len2 = #lst2", "  if #lst1 == 0 then\n    return lst2\n  elseif #lst2 == 0 then\n\
    \    return lst1\n  elseif #lst1 < #lst2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "  if #lst1 ~= #lst2 then return lst1\n  else for k, v in\
    \ pairs(lst1) do if v:find(lst2[k]) == nil then return nil end; end\n  return\
    \ lst1\n  end\nend", "  local num_chars\n  local max_num_chars = 0\n  local max_len\
    \ = 0", "    -- write your code in Python 3.6\n    if #lst1 == 0 then return lst2\n\
    \    else if #lst2 == 0 then return lst1\n    else if #lst1 > #lst2 then return\
    \ lst1\n    else return lst2\n    end\nend", "    local num_chars = {}\n    for\
    \ _, str1 in ipairs(lst1) do\n        num_chars[str1] = 0\n    end\n    for _,\
    \ str2 in ipairs(lst2) do\n        num_chars[str2] = num_chars[str2] or 0\n  \
    \      num_chars[str2] = num_chars[str2] + #str1\n    end\n    \n    -- Return\
    \ table1 if it has the same number of chars\n    if num_chars[lst1[1]] == num_chars[lst2[1]]\
    \ then\n        return lst1\n    end\n    \n    local table3 = {}\n    for _,\
    \ str1 in ipairs(lst1) do\n        if num_chars[str1] < num_chars[lst2[1]] then\n\
    \            table3[#table3+1] = str1\n        end\n    end\n    return table3\n\
    end", "    local results = {}\n    local i = 1\n    while i <= #lst1 and i <=\
    \ #lst2 do\n        if lst1[i] > lst2[i] then\n            results[i] = lst1[i]\n\
    \            i = i + 1\n        else\n            results[i] = lst2[i]\n     \
    \       i = i + 1\n        end\n    end\n    if #lst1 == #lst2 then\n        return\
    \ results[1]\n    else\n        return results\n    end\nend", "    local tbl\
    \ = {}\n    \n    for _, v in ipairs(lst1) do\n        table.insert(tbl, v)\n\
    \    end\n    \n    for _, v in ipairs(lst2) do\n        local inc = false\n \
    \       \n        for _, v2 in ipairs(tbl) do\n            if v == v2 then\n \
    \               inc = true\n                break\n            end\n        end\n\
    \        \n        if not inc then\n            table.insert(tbl, v)\n       \
    \ end\n    end\n    \n    return tbl\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
