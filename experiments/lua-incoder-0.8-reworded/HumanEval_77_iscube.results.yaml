language: lua
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a ~= nil\
    \ then\n    return (a == 1 and type(a) == 'number')\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo74l74qq.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo74l74qq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x\n\
    \    local y\n    local z\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp19u4vey9.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a == 0\
    \ then\n      return true\n   end\n   if type(a == 'number') then\n      return\
    \ a == 0 or a == 1 or a == 2 or a == 3 or a == 4 or a == 5\n   end\n   if type(a)\
    \ == 'table' then\n      for i = 1, #a do\n         if not iscube(a[i]) then\n\
    \            return false\n         end\n      end\n      return true\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu1vryap.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzu1vryap.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 or\
    \ a == 1 then\n    return false\n  end\n  \n  local c = 0\n  local i = 1\n  while\
    \ i <= a do\n    if i % a == 0 then\n      c = c + 1\n    end\n    i = i * 3 +\
    \ 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbdc17xk.lua:44: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 then\
    \ return false end\n  if a == 1 then return true end\n  return iscube(a-1) * iscube(a-2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrw4zvyx.lua:20:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpsrw4zvyx.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpsrw4zvyx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  if a%1 == 0 then return false end\n  if a%2 == 0 then return\
    \ true end\n  if a%3 == 0 then return true end\n  if a%4 == 0 then return true\
    \ end\n  if a%5 == 0 then return true end\n  if a%6 == 0 then return true end\n\
    \  if a%7 == 0 then return true end\n  if a%8 == 0 then return true end\n  if\
    \ a%9 == 0 then return true end\n  if a%10 == 0 then return true end\n  if a%11\
    \ == 0 then return true end\n  if a%12 == 0 then return true end\n  if a%13 ==\
    \ 0 then return true end\n  if a%14 == 0 then return true end\n  if a%15 == 0\
    \ then return true end\n  if a%16 == 0 then return true end\n  if a%17 == 0 then\
    \ return true end\n  if a%18 == 0 then return true end\n  if a%19 == 0 then return\
    \ true end\n  if a%20 == 0 then return true end\n  if a%21 == 0 then return true\
    \ end\n  if a%22 == 0 then return true end\n  if a%23 == 0 then return true end\n\
    \  if a%24 == 0 then return true end\n  if a%25 == 0 then return true end\n  if\
    \ a%26 == 0 then return true end\n  if a%27 == 0 then return true end\n  if a%28\
    \ == 0 then return true end\n  if a%29 == 0 then return true end\n  if a%30 ==\
    \ 0 then return true end\n  if a%31 == 0 then return true end\n  if a%32 == 0\
    \ then return true end\n  if a%33 == 0 then return true end\n  if a%34 == 0 then\
    \ return true end\n  if a%35 == 0 then return true end\n  if a%36 == 0 then return\
    \ true end\n  if a%37 == 0 then return true end\n  if a%38 == 0 then return true\
    \ end\n  if a%39 == 0 then return true end\n  if a%40 == 0 then return true end\n\
    \  if a%41 == 0 then return true end\n  if a%42 == 0 then return true end\n  if\
    \ a%43 == 0 then return true end\n  if a%44 == 0 then return true end\n  if a%45\
    \ == 0 then return true end\n  if a%46 == 0 then return true end\n  if \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy6j7tmw6.lua:66: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a %\
    \ a == 0 and isint(a) and a <= 1000 and a <= 1000 and a <= 1000000 and a <= 1000000\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw01dmjm.lua:18:\
    \ attempt to call a nil value (global 'isint')\nstack traceback:\n\t/tmp/tmpqw01dmjm.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqw01dmjm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  return #a == 3 and a[2] == 1 \n         and a[1] == 2 and\
    \ a[1] == 2 \n         and a[3] == 4 and a[3] == 4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwarrhkg.lua:19:\
    \ attempt to get length of a number value (local 'a')\nstack traceback:\n\t/tmp/tmpdwarrhkg.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpdwarrhkg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 then\n\
    \    return false\n  elseif cubes==nil then\n    cubes = math.pow(3, math.floor(math.log(math.abs(a),\
    \ 3)))\n  end\n  local res = true\n  for i = 1, cubes do\n    res = res and (a%i\
    \ == 0)\n    if a <= 0 then\n      return res\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntez9cgb.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntez9cgb.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a % a ~= 0 then\n    return false\n  end\n  local\
    \ b = math.floor(a)\n  return iscube(b) * iscube(b) * iscube(b) == a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15nt3vt3.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp15nt3vt3.lua:24: in upvalue 'iscube'\n\
    \t/tmp/tmp15nt3vt3.lua:25: in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25: in\
    \ upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25: in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25:\
    \ in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25: in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25:\
    \ in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25: in upvalue 'iscube'\n\t/tmp/tmp15nt3vt3.lua:25:\
    \ in upvalue 'iscube'\n\t...\t(skipping 333295 levels)\n\t/tmp/tmp15nt3vt3.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp15nt3vt3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.180 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 then\n\
    \    return false\n  end\n  if a == 1 then\n    return true\n  end\n  if a ==\
    \ 3 then\n    return true\n  end\n  if a == 5 then\n    return true\n  end\n \
    \ if a == 7 then\n    return true\n  end\n  if a == 9 then\n    return true\n\
    \  end\n  if a == 11 then\n    return true\n  end\n  if a == 13 then\n    return\
    \ true\n  end\n  if a == 15 then\n    return true\n  end\n  if a == 17 then\n\
    \    return true\n  end\n  if a == 19 then\n    return true\n  end\n  if a ==\
    \ 21 then\n    return true\n  end\n  if a == 23 then\n    return true\n  end\n\
    \  if a == 25 then\n    return true\n  end\n  if a == 27 then\n    return true\n\
    \  end\n  if a == 29 then\n    return true\n  end\n  if a == 31 then\n    return\
    \ true\n  end\n  if a == 33 then\n    return true\n  end\n  if a == 35 then\n\
    \    return true\n  end\n  if a == 37 then\n    return true\n  end\n  if a ==\
    \ 39 then\n    return true\n  end\n  if a == 41 then\n    return true\n  end\n\
    \  if a == 43 then\n    return true\n  end\n  if a == 45 then\n    return true\n\
    \  end\n  if a == 47 then\n    return true\n  end\n  if a == 49 then\n    return\
    \ true\n  end\n  if a == 51 then\n    return true\n  end\n  if a == 53 then\n\
    \    return true\n  end\n  if a == 55 then\n    return true\n  end\n  if a ==\
    \ 57 then\n    return true\n  end\n  if a == 59 then\n    return true\n  end\n\
    \  if a == 61 then\n    return true\n  end\n  if a == 63 then\n    return true\n\
    \  end\n  if a == 65 then\n    return true\n  end\n  if a == 67 then\n    return\
    \ true\n  end\n  if a == 69 then\n    return true\n  end\n  if a == 71 then\n\
    \    return true\n  end\n  if a == 73 then\n    return true\n  end\n  if a ==\
    \ 75 then\n    return true\n  end\n  if a == 77 then\n    return true\n  end\n\
    \  if a == 79 then\n    return true\n  end\n  if a == 81 then\n    return true\n\
    \  end\n  if a == 83 then\n    return true\n  end\n  if a == 85 then\n    return\
    \ true\n  end\n  if a == 87 then\n    return true\n  end\n  if a == 89 then\n\
    \    return true\n  end\n  if a == 91 then\n    return true\n  end\n  if a ==\
    \ 93 then\n    return true\n  end\n  if a == 95 \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6j_o59yu.lua:163: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  elseif a == 1 then\n    return true\n  elseif a%2==0 then\n\
    \    return true\n  elseif a%3==0 then\n    return true\n  elseif a%5==0 then\n\
    \    return true\n  elseif a%7==0 then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx765nzx.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmx765nzx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a %\
    \ 1 == 0 and a <= 12\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifjk_gzd.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpifjk_gzd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  elseif a==1 then\n    return true\n  elseif a==-1 then\n \
    \   return true\n  elseif a==2 then\n    return true\n  elseif a==3 then\n   \
    \ return true\n  elseif a==4 then\n    return true\n  elseif a==5 then\n    return\
    \ true\n  elseif a==6 then\n    return true\n  elseif a==7 then\n    return true\n\
    \  elseif a==8 then\n    return true\n  elseif a==9 then\n    return true\n  elseif\
    \ a==10 then\n    return true\n  elseif a==11 then\n    return true\n  elseif\
    \ a==12 then\n    return true\n  elseif a==13 then\n    return true\n  elseif\
    \ a==14 then\n    return true\n  elseif a==15 then\n    return true\n  elseif\
    \ a==16 then\n    return true\n  elseif a==17 then\n    return true\n  elseif\
    \ a==18 then\n    return true\n  elseif a==19 then\n    return true\n  elseif\
    \ a==20 then\n    return true\n  elseif a==21 then\n    return true\n  elseif\
    \ a==22 then\n    return true\n  elseif a==23 then\n    return true\n  elseif\
    \ a==24 then\n    return true\n  elseif a==25 then\n    return true\n  elseif\
    \ a==26 then\n    return true\n  elseif a==27 then\n    return true\n  elseif\
    \ a==28 then\n    return true\n  elseif a==29 then\n    return true\n  elseif\
    \ a==30 then\n    return true\n  elseif a==31 then\n    return true\n  elseif\
    \ a==32 then\n    return true\n  elseif a==33 then\n    return true\n  elseif\
    \ a==34 then\n    return true\n  elseif a==35 then\n    return true\n  elseif\
    \ a==36 then\n    return true\n  elseif a==37 then\n    return true\n  elseif\
    \ a==38 then\n    return true\n  elseif a==39 then\n    return true\n  elseif\
    \ a==40 then\n    return true\n  elseif a==41 then\n    return true\n  elseif\
    \ a==42 then\n    return true\n  elseif a==43 then\n    return true\n  elseif\
    \ a==44 then\n    return true\n  elseif \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wds2ug9.lua:111: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a <= 0\
    \ or a == 1 then\n      return true\n   end\n   if a > 1 then\n      for x = 2,\
    \ a do\n         if (a % x) == 0 then\n            return false\n         end\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxiq5ueq_.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxiq5ueq_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b = 1\n\
    \  while a > 0 do\n    if a%b == 0 then return false end\n    b = b*b\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5fhkrzs.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu5fhkrzs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a %\
    \ 18 == 0 and a % 3 == 0) or (a % 3 == 0 and a % 6 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48r5zn92.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp48r5zn92.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a >= 1000\
    \ and a <= 1999 then return true end\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf5fq0l1.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgf5fq0l1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a > 0 then\n        return a % 3\
    \ == 0 and iscube(a/3)\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprj3p5qe9.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprj3p5qe9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  assert(type(a)==\"\
    number\",\"iscube: first input argument must be a number\")\n  return (a==1 and\
    \ math.sqrt(a) == math.sqrt(a) and math.sqrt(a) % 1 == 0 and math.sqrt(a) % 2\
    \ == 0 and math.sqrt(a) % 3 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q5tnme6.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9q5tnme6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal result\
    \ = false\n\tif a == 0 then\n\t\tresult = true\n\telse\n\t\tlocal cube_power =\
    \ a^3\n\t\tresult = a == cube_power\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvq2j3196.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvq2j3196.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\ta = tonumber(a)\n\
    \tif (a < 1) or (a % 1 ~= 0) then\n\t\treturn false\n\tend\n\tfor i = 0, a do\n\
    \t\tif (i % a == 0) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixtbr8_w.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpixtbr8_w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return false end\n    if a == 1 then return true end\n    if a % 3 == 0\
    \ then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtxa66rx.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwtxa66rx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a %\
    \ 9 == 0 and a % 3 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhtckz9g.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdhtckz9g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a %\
    \ 1 == 0 and a >= 0 and a <= 9\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vn97zxy.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5vn97zxy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- write your\
    \ code in here --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc0afote.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpxc0afote.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- base case\n\
    \  if a == 0 then\n    return true\n  end\n  \n  -- general case\n  if a >= 1\
    \ and a <= 18 then\n    local n = a\n    local count = 1\n    while a > 0 do\n\
    \      if n % count == 0 then\n        return false\n      end\n      count =\
    \ count + 1\n      n = n / 3\n    end\n  end\n  \n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dlwkfl4.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8dlwkfl4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a >= 1000000000\
    \ or a/a ~= math.floor(a) then return false end\n    local n = 1\n    while a\
    \ * n <= a do n = n + 1 end\n    return n == 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ktjs3hi.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ktjs3hi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local cubocc\
    \ = math.floor((a/5)*5)\n    if cubocc < 1 then\n        return false\n    end\n\
    \    if a == cubocc then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwlw3u3g.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjwlw3u3g.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn ((a\
    \ == 1) or (a == 3) or (a == 5) or (a == 7) or (a == 9) or (a == 11)) and\n\t\t\
    ((a == 2) or (a == 4) or (a == 6) or (a == 8) or (a == 10) or (a == 12)) and\n\
    \t\t((a == 3) or (a == 4) or (a == 9) or (a == 16) or (a == 18) or (a == 19))\
    \ and\n\t\t((a == 5) or (a == 7) or (a == 11) or (a == 13) or (a == 15) or (a\
    \ == 17) or (a == 19)) and\n\t\t((a == 6) or (a == 8) or (a == 12) or (a == 14)\
    \ or (a == 16) or (a == 18) or (a == 20)) and\n\t\t((a == 7) or (a == 9) or (a\
    \ == 13) or (a == 15) or (a == 17) or (a == 19) or (a == 21)) and\n\t\t((a ==\
    \ 9) or (a == 16) or (a == 21))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmojqhme.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdmojqhme.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\telseif a == 1 then\n\t\treturn true\n\telseif a <= 0 then\n\
    \t\treturn false\n\telse\n\t\tlocal tmp\n\t\tfor i = 0, a do\n\t\t\tlocal r\n\t\
    \t\tr = a % i\n\t\t\tif r ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0x4k8htz.lua:26:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp0x4k8htz.lua:26: in local\
    \ 'candidate'\n\t/tmp/tmp0x4k8htz.lua:41: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a > 0 and a < 1 then\n        return\
    \ true\n    end\n    if a > -1 and a < 0 then\n        return false\n    end\n\
    \    \n    if a >= -360 and a <= 360 then\n        return true\n    end\n    if\
    \ a <= -360 and a > 360 then\n        return false\n    end\n    \n    if a >=\
    \ -720 and a <= 720 then\n        return true\n    end\n    if a <= -720 and a\
    \ > 720 then\n        return false\n    end\n    \n    if a >= -120 and a <= 120\
    \ then\n        return true\n    end\n    if a <= -120 and a > 120 then\n    \
    \    return false\n    end\n    \n    if a >= -4800 and a <= 4800 then\n     \
    \   return true\n    end\n    if a <= -4800 and a > 4800 then\n        return\
    \ false\n    end\n    \n    if a >= -9600 and a <= 9600 then\n        return true\n\
    \    end\n    if a <= -9600 and a > 9600 then\n        return false\n    end\n\
    \    \n    if a >= -54000 and a <= 54000 then\n        return true\n    end\n\
    \    if a <= -54000 and a > 54000 then\n        return false\n    end\n    \n\
    \    if a >= -888000 and a <= 888000 then\n        return true\n    end\n    if\
    \ a <= -888000 and a > 888000 then\n        return false\n    end\n    \n    if\
    \ a >= -540000 and a <= 540000 then\n        return true\n    end\n    if a <=\
    \ -540000 and a > 540000 then\n        return false\n    end\n    \n    if a >=\
    \ -9980000 and a <= 9980000 then\n        return true\n    end\n    if a <= -9980000\
    \ and a > 9980000 then\n        return false\n    end\n    \n    if a >= -96000000\
    \ and a <= 96000000 then\n        return true\n    end\n    if a <= -96000000\
    \ and a > 96000000 then\n        return false\n    end\n    \n    if a >= -800000000\
    \ and a <= 800000000 then\n        return true\n    end\n    if a <= -800000000\
    \ and a > 800000000 then\n        return false\n    end\n    \n    if a >= -4800000000\
    \ and a <= 4800000000 then\n        return true\n    end\n    if a <= -4800000000\
    \ and a > 4800000000 then\n        return false\n    end\n    \n    if a >= -32000000000\
    \ and a <= 32000000000 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpehvwmnj3.lua:113: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return false end\n    if a >= 1 then return false end\n    return math.mod((math.fmod(a,(math.sqrt(a))))*math.fmod(a,(math.sqrt(a))),(math.sqrt(a)))\
    \ == 0 and (math.mod((math.fmod(a,(math.sqrt(a))))*math.fmod(a,(math.sqrt(a))),(math.sqrt(a)))\
    \ ~= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzwli1qe.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplzwli1qe.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local xx,\
    \ xy, xz, yx, yy, yz, zx, zy, zz = math.abs(a), 0, 0, math.abs(a), math.abs(a),\
    \ 0, 0, math.abs(a)\n    return xy == xx && yy == yx && zz == zx && math.sqrt(math.pow(xx-xz,\
    \ 2) + math.pow(yx-yz, 2) + math.pow(zx-zy, 2)) == xx && yy == yx && zz == zx\
    \ && math.sqrt(math.pow(xx-yy, 2) + math.pow(yx-zz, 2) + math.pow(zx-zy, 2)) ==\
    \ xx && math.sqrt(math.pow(xx-yz, 2) + math.pow(yx-xz, 2) + math.pow(zx-yz, 2))\
    \ == xx && math.sqrt(math.pow(xx-zy, 2) + math.pow(yx-xz, 2) + math.pow(zx-yy,\
    \ 2)) == xx && math.sqrt(math.pow(xx-yx, 2) + math.pow(yx-xy, 2) + math.pow(zx-zy,\
    \ 2)) == xx && math.sqrt(math.pow(xx-yy, 2) + math.pow(yx-yz, 2) + math.pow(zx-xz,\
    \ 2)) == xx && math.sqrt(math.pow(xx-zz, 2) + math.pow(yx-yz, 2) + math.pow(zx-xy,\
    \ 2)) == xx && math.sqrt(math.pow(xx-xz, 2) + math.pow(yx-yz, 2) + math.pow(zx-yx,\
    \ 2)) == xx && math.sqrt(math.pow(xx-yy, 2) + math.pow(yx-zx, 2) + math.pow(zx-zy,\
    \ 2)) == xx && math.sqrt(math.pow(xx-zx, 2) + math.pow(yx-yz, 2) + math.pow(zx-yy,\
    \ 2)) == xx && math.sqrt(math.pow(xx-yz, 2) + math.pow(yx-zx, 2) + math.pow(zx-zy,\
    \ 2)) == xx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmdfv6fjp.lua:19: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == nil\
    \ then\n\t\treturn false\n\telse\n\t\tif type(a) == 'number' then\n\t\t\tif a\
    \ <= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_u4ysvm9.lua:43: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ % 1 == 0 and (a / 1) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai3o8jjf.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpai3o8jjf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a*a*a\
    \ == 180 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8dcgznf.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu8dcgznf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a:isIntegral()\
    \ and (a == (a * a * a * a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo510hn9a.lua:18:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpo510hn9a.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpo510hn9a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code here!\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv_8g2zk.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjv_8g2zk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a < 1 or\
    \ a>180 then return false end\n\tlocal n=0\n\tlocal x=a\n\twhile x>1 do\n\t\t\
    x=x*x\n\t\tn=n+1\n\tend\n\tif n==1 then return true end\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k5bxvut.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0k5bxvut.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a % 2\
    \ == 0 then\n        if a % 8 == 1 then\n            if a % 16 == 1 then\n   \
    \             return true\n            else\n                return false\n  \
    \          end\n        else\n            return false\n        end\n    else\n\
    \        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6xueqv.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppf6xueqv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 1 then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ycv4jmv.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3ycv4jmv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\
    \ return false end\n  if a%1==0 then return false end\n  local x,y,z = a\n  local\
    \ p = a-1\n  local q = 1\n  while true do\n    local r = y*y*y + z*z*z + x*x*x\n\
    \    if r > p then return false end\n    x,y,z = x,y,z + q\n    q = q * q\n  \
    \  local q2 = q/2\n    if q2 > p then return false end\n    x,y,z = x,y,z + q2\n\
    \    q = q * q\n    local q3 = q/3\n    if q3 > p then return false end\n    x,y,z\
    \ = x,y,z + q3\n    q = q * q\n    p = p * p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp279fpdwz.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp279fpdwz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code here\n\tif a == 0 then\n\t\treturn true\n\telseif a == 1 then\n\t\treturn\
    \ true\n\telseif a == 2 then\n\t\treturn true\n\telseif a == 3 then\n\t\treturn\
    \ true\n\telseif a == 4 then\n\t\treturn true\n\telseif a == 5 then\n\t\treturn\
    \ true\n\telseif a == 6 then\n\t\treturn true\n\telseif a == 7 then\n\t\treturn\
    \ true\n\telseif a == 8 then\n\t\treturn true\n\telseif a == 9 then\n\t\treturn\
    \ true\n\telseif a == 10 then\n\t\treturn true\n\telseif a == 11 then\n\t\treturn\
    \ true\n\telseif a == 12 then\n\t\treturn true\n\telseif a == 13 then\n\t\treturn\
    \ true\n\telseif a == 14 then\n\t\treturn true\n\telseif a == 15 then\n\t\treturn\
    \ true\n\telseif a == 16 then\n\t\treturn true\n\telseif a == 17 then\n\t\treturn\
    \ true\n\telseif a == 18 then\n\t\treturn true\n\telseif a == 19 then\n\t\treturn\
    \ true\n\telseif a == 20 then\n\t\treturn true\n\telseif a == 21 then\n\t\treturn\
    \ true\n\telseif a == 22 then\n\t\treturn true\n\telseif a == 23 then\n\t\treturn\
    \ true\n\telseif a == 24 then\n\t\treturn true\n\telseif a == 25 then\n\t\treturn\
    \ true\n\telseif a == 26 then\n\t\treturn true\n\telseif a == 27 then\n\t\treturn\
    \ true\n\telseif a == 28 then\n\t\treturn true\n\telseif a == 29 then\n\t\treturn\
    \ true\n\telseif a == 30 then\n\t\treturn true\n\telseif a == 31 then\n\t\treturn\
    \ true\n\telseif a == 32 then\n\t\treturn true\n\telseif a == 33 then\n\t\treturn\
    \ true\n\telseif a == 34 then\n\t\treturn true\n\telseif a == 35 then\n\t\treturn\
    \ true\n\telseif a == 36 then\n\t\treturn true\n\telseif a == 37 then\n\t\treturn\
    \ true\n\telseif a == 38 then\n\t\treturn true\n\telseif a == 39 then\n\t\treturn\
    \ true\n\telseif a == 40 then\n\t\treturn true\n\telseif a == 41 then\n\t\treturn\
    \ true\n\telseif a == 42 then\n\t\treturn true\n\telseif a == 43 then\n\t\treturn\
    \ true\n\telseif a == 44 then\n\t\treturn true\n\telseif a == 45 then\n\t\treturn\
    \ true\n\telseif a == 46 then\n\t\treturn true\n\telseif a == 47 then\n\t\treturn\
    \ true\n\telseif a == 48 then\n\t\treturn true\n\telseif a == 49 then\n\t\treturn\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiiqanwid.lua:119: ''end'' expected (to close ''if'' at line
    19) near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    local cube = 1\n    for i=0,a do\n \
    \       cube = cube * i\n    end\n    if cube == a then\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke30qjk_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpke30qjk_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code in Ramda's style\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujhuiv8r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpujhuiv8r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a %\
    \ 1 ~= 0 and isinteger(a) and a <= cube and cube <= a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr8h4jix.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphr8h4jix.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi_32loid.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ function here!\n\tlocal result = true\n\tif a == 1 then\n\t\tresult = true\n\
    \telseif a == 3 or a == 5 then\n\t\tresult = true\n\telseif a == 7 or a == 9 or\
    \ a == 11 then\n\t\tresult = true\n\telseif a == 13 or a == 15 or a == 17 or a\
    \ == 19 then\n\t\tresult = true\n\telseif a == 21 then\n\t\tresult = true\n\t\
    elseif a == 23 then\n\t\tresult = true\n\telseif a == 25 or a == 27 or a == 29\
    \ or a == 31 then\n\t\tresult = true\n\telseif a == 33 then\n\t\tresult = true\n\
    \telseif a == 35 or a == 37 or a == 39 or a == 41 then\n\t\tresult = true\n\t\
    elseif a == 43 then\n\t\tresult = true\n\telseif a == 45 or a == 47 or a == 49\
    \ or a == 51 then\n\t\tresult = true\n\telseif a == 53 then\n\t\tresult = true\n\
    \telseif a == 55 or a == 57 or a == 59 or a == 61 then\n\t\tresult = true\n\t\
    elseif a == 63 then\n\t\tresult = true\n\telseif a == 65 or a == 67 or a == 69\
    \ or a == 71 then\n\t\tresult = true\n\telseif a == 73 then\n\t\tresult = true\n\
    \telseif a == 75 or a == 77 or a == 79 or a == 81 then\n\t\tresult = true\n\t\
    elseif a == 83 then\n\t\tresult = true\n\telseif a == 85 or a == 87 or a == 89\
    \ or a == 91 then\n\t\tresult = true\n\telseif a == 93 then\n\t\tresult = true\n\
    \telseif a == 95 or a == 97 or a == 99 or a == 101 then\n\t\tresult = true\n\t\
    elseif a == 103 then\n\t\tresult = true\n\telseif a == 105 then\n\t\tresult =\
    \ true\n\telseif a == 107 then\n\t\tresult = true\n\telseif a == 109 then\n\t\t\
    result = true\n\telseif a == 111 then\n\t\tresult = true\n\telseif a == 113 then\n\
    \t\tresult = true\n\telseif a == 115 then\n\t\tresult = true\n\telseif a == 117\
    \ then\n\t\tresult = true\n\telseif a == 119 then\n\t\tresult = true\n\telseif\
    \ a == 121 then\n\t\tresult = true\n\telseif a == 123 then\n\t\tresult = true\n\
    \telseif a == 125 then\n\t\tresult = true\n\telseif a == 127 then\n\t\tresult\
    \ = true\n\telseif a == 129 then\n\t\tresult = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9555girs.lua:90: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a >= 1\
    \ then\n        return true\n    end\n    local cubes = 0\n    local i\n    for\
    \ i = 2, math.floor(a), 2 do\n        if a^i == a then\n            cubes = cubes\
    \ + 1\n        end\n    end\n    if cubes == a then \n        return true\n  \
    \  end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8s8nw6p.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8s8nw6p.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tassert(type(a)\
    \ == 'number')\n\tassert(a > 0 and a < 2**32)\n\treturn (a % 9) == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwziyitvw.lua:19: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a*a*a\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0oq3jgq.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa0oq3jgq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif (a == 0)\
    \ then\n\t\treturn true;\n\telseif (a == 1) then\n\t\treturn true;\n\telseif ((a%2\
    \ == 0) and (a%3 ==0) and (a%4 == 0)) then\n\t\treturn true;\n\telseif ((a%2 ==\
    \ 0) and (a%3 == 0)) then\n\t\treturn true;\n\telseif ((a%2 == 0) and (a%4 ==\
    \ 0)) then\n\t\treturn true;\n\telseif ((a%3 == 0) and (a%4 == 0)) then\n\t\t\
    return true;\n\telseif ((a%4 == 0) and (a%5 == 0)) then\n\t\treturn true;\n\t\
    elseif ((a%5 == 0) and (a%6 == 0)) then\n\t\treturn true;\n\telseif ((a%6 == 0)\
    \ and (a%7 == 0)) then\n\t\treturn true;\n\telseif ((a%7 == 0) and (a%8 == 0))\
    \ then\n\t\treturn true;\n\telseif ((a%8 == 0) and (a%9 == 0)) then\n\t\treturn\
    \ true;\n\telseif ((a%9 == 0) and (a%10 == 0)) then\n\t\treturn true;\n\telseif\
    \ ((a%10 == 0) and (a%11 == 0)) then\n\t\treturn true;\n\telseif ((a%11 == 0)\
    \ and (a%12 == 0)) then\n\t\treturn true;\n\telseif ((a%12 == 0) and (a%13 ==\
    \ 0)) then\n\t\treturn true;\n\telseif ((a%13 == 0) and (a%14 == 0)) then\n\t\t\
    return true;\n\telseif ((a%14 == 0) and (a%15 == 0)) then\n\t\treturn true;\n\t\
    elseif ((a%15 == 0) and (a%16 == 0)) then\n\t\treturn true;\n\telseif ((a%16 ==\
    \ 0) and (a%17 == 0)) then\n\t\treturn true;\n\telseif ((a%17 == 0) and (a%18\
    \ == 0)) then\n\t\treturn true;\n\telseif ((a%18 == 0) and (a%19 == 0)) then\n\
    \t\treturn true;\n\telseif ((a%19 == 0) and (a%20 == 0)) then\n\t\treturn true;\n\
    \telseif ((a%20 == 0) and (a%21 == 0)) then\n\t\treturn true;\n\telseif ((a%21\
    \ == 0) and (a%22 == 0)) then\n\t\treturn true;\n\telseif ((a%22 == 0) and (a%23\
    \ == 0)) then\n\t\treturn true;\n\telseif ((a%23 == 0) and (a%24 == 0)) then\n\
    \t\treturn true;\n\telseif ((a%24 == 0) and (a%25 == 0)) then\n\t\treturn true;\n\
    \telseif ((a%25 == 0) and (a%26 == 0)) then\n\t\treturn true;\n\telseif ((a%26\
    \ == 0) and (a%27 == 0)) then\n\t\treturn true;\n\telseif \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptcq2jb5a.lua:77: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return a\
    \ >= 0 and a <= 9 and a >= 0 and a <= 18\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg1bvc6f.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptg1bvc6f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code here!\n\tlocal b, c = math.floor(a), math.floor(a/2)\n\tif a == 0 then\n\
    \t\treturn true\n\telse\n\t\treturn ((b == c) and a % 2 ~= 0) or ((b == c and\
    \ b > 0 and a % 2 ~= 1) or b == c)\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjcyf_9y.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzjcyf_9y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- write code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiq0eitq.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgiq0eitq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b = 0\n\
    \  for _, b in ipairs(a) do \n    if b == 0 and (math.mod(b, 1) == 0) or (math.mod(b,\
    \ 2) == 0) then\n      return true\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a number value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659978901
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  a = tonumber(a)\n\
    \  if a == nil then\n    return nil\n  elseif type(a) ~= 'number' or a < 0 then\n\
    \    return nil\n  elseif a == 1 then\n    return true\n  elseif a%1 == 0 then\n\
    \    return iscube(a*a)\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978906
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a %\
    \ 6 == 0 and a % 6 == 0 and a % 6 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpguru2c6r.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpguru2c6r.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal function\
    \ f(x,y,z)\n\t\treturn x*x*x+y*y*y+z*z*z\n\tend\n\treturn f(a%16384, a%16384,\
    \ a%16384) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrntwwg9.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdrntwwg9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a==0 then\n\
    \        return true\n    end\n    if a then\n        if a==1 then -- only cubes\
    \ of 1\n            return true\n        end\n        local x,y,z = math.abs(a),\
    \ math.abs(a*a), math.abs(a*a*a)\n        if z==1 then\n            if y==1 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2we2ixq.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy2we2ixq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\ta = tonumber(a)\n\
    \tif not a then\n\t\treturn false\n\tend\n\tlocal b = ((a / b) % b) * b\n\tif\
    \ a == b then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpda0xj7_3.lua:22:\
    \ attempt to perform arithmetic on a nil value (global 'b')\nstack traceback:\n\
    \t/tmp/tmpda0xj7_3.lua:22: in local 'candidate'\n\t/tmp/tmpda0xj7_3.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- Write code\
    \ here.\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnqcf1lz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmnqcf1lz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return true end\n  if a < 0 or a >= 360 then return false end\n  return (a *\
    \ a == 360) or (a * a == -360)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02ttjgrt.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp02ttjgrt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a ==\
    \ 0 and true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifnie54r.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpifnie54r.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a >= 0\
    \ then\n        local b = math.floor(a/3)\n        a = math.mod(a,3)\n       \
    \ return a == 0 and b == 3 or b == 1 and a < 3\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5yuai45p.lua:20:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp5yuai45p.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp5yuai45p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return ((a*a*a)==(a*a*a*a))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5ggifxc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5ggifxc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 1 then\n\
    \t\treturn true\n\telseif isint(a) then\n\t\treturn a^a^a^a <= 1 and a <= 1\n\t\
    else\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w6jkzdp.lua:20:\
    \ attempt to call a nil value (global 'isint')\nstack traceback:\n\t/tmp/tmp6w6jkzdp.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp6w6jkzdp.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal t = a\
    \ ^ a\n\tlocal t2 = t * t\n\tlocal t3 = t * t2\n\tif ((t3 < 2) and (t3 > 4) and\
    \ (a > 0)) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcy6hpdt.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppcy6hpdt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\
    \ return false end\n  return ((a*a)+(a*a*a))^3 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pezy_sp.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1pezy_sp.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a%3==0\
    \ and a%4==0 and a%9==0 and a%18==0 and a%27==0 and a%36==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp64csztu.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp64csztu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = a\n\
    \tif b == a then\n\t\tif b == 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\telse\n\t\tif b == -1 then\n\t\t\treturn true\n\t\telse\n\t\
    \t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc8ycukj.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnc8ycukj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return not\
    \ (a % 2) and not (a % 3) and not (a % 4) and\n    not (a % 6) and a > 0 and\n\
    \    not (a % 9) and a > 0 and\n    not (a % 18) and a > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphymd7h6v.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphymd7h6v.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn ((a*a*a)\
    \ > 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ey6743.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp71ey6743.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    -- base case\n\
    \    if a == 0 then return false end\n    -- recursive case\n    if a % a == 0\
    \ then return true end\n    return iscube(a / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz23hoiqc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz23hoiqc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a == 1 then\n    return true\n  end\n  if a == -1\
    \ then\n    return false\n  end\n  local i = 1\n  while i < (a^2) do\n    i =\
    \ i + 1\n    if i == a^2 or i == a^3 or i == a^4 then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtcipzhv.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqtcipzhv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal n = 3\n\
    \twhile n > 0 do\n\t\tif a^n == a^(n-1) and a^(n-1) == a^(n-2) and a^(n-2) ==\
    \ a then\n\t\t\treturn true\n\t\tend\n\t\tn = n - 1\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp493kvrnh.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp493kvrnh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    elseif a^a == a then\n        return true\n \
    \   else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey1eaaxr.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpey1eaaxr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a %\
    \ 9 == 0 and a % 4 == 0 and a % 3 == 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86hmi698.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp86hmi698.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn not\
    \ (a < 1 and a >= 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5ptqy_8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm5ptqy_8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- TODO: check\
    \ if a is a valid integer\n  return a ~= nil and a % 3 == 0 and isinteger(a/3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgazx3vj.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmgazx3vj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\
    \ return false end\n\tif a == 1 then return true end\n\tif a < 0 then return false\
    \ end\n\tif a > 1 then return false end\n\tif a <= 16 then return true end\n\t\
    if a > 16 then return false end\n\tif a == 1 then return true end\n\tif a == 2\
    \ then return true end\n\tif a == 4 then return true end\n\tif a == 8 then return\
    \ true end\n\tif a == 16 then return true end\n\tif a == 32 then return true end\n\
    \tif a == 64 then return true end\n\tif a == 128 then return true end\n\tif a\
    \ == 256 then return true end\n\tif a == 512 then return true end\n\tif a == 1024\
    \ then return true end\n\tif a == 2048 then return true end\n\tif a == 4096 then\
    \ return true end\n\tif a == 8192 then return true end\n\tif a == 16384 then return\
    \ true end\n\tif a == 32768 then return true end\n\tif a == 65536 then return\
    \ true end\n\tif a == 131072 then return true end\n\tif a == 262144 then return\
    \ true end\n\tif a == 524288 then return true end\n\tif a == 1048576 then return\
    \ true end\n\tif a == 2097152 then return true end\n\tif a == 4194304 then return\
    \ true end\n\tif a == 8388608 then return true end\n\tif a == 16777216 then return\
    \ true end\n\tif a == 33554432 then return true end\n\tif a == 67108864 then return\
    \ true end\n\tif a == 134217728 then return true end\n\tif a == 268435456 then\
    \ return true end\n\tif a == 536870912 then return true end\n\tif a == 1073741824\
    \ then return true end\n\tif a == -2147483648 then return true end\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64x5eg99.lua:64:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp64x5eg99.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal c1 =\
    \ a * a * a -- cubic number\n\tlocal c2 = a*a*a -- cubic number\n\tlocal c3 =\
    \ a*a -- cubic number\n\tlocal c4 = a*a -- cubic number\n\tlocal c5 = a -- cubic\
    \ number\n\treturn c1 == c2 and c3 == c4 and c5 == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvx_908c.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfvx_908c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ solution here\n\tif a<0 then return false end\n\tif a==0 then return true end\n\
    \tif a>64 then return false end\n\tif a<63 then return a%2==0 end\n\tlocal c=0\n\
    \twhile a>0 do\n\t\tc=c+1\n\t\ta=a-1\n\tend\n\treturn a%c==0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e72g0qo.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2e72g0qo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local sum\
    \ = 0;\n    while a > 0 do\n        sum = a*a*a;\n        a = a-1;\n    end\n\
    \    return sum==a;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pwdgr4e.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4pwdgr4e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == nil\
    \ then return false end\n\treturn (a % 9 == 0) or (a % 4 == 0 and a % 3 == 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwdghpft.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkwdghpft.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  a = _getInt(a)\n\
    \  return ((a**3)+(a**4)+(a**5)+(a**6)) % 10 == 0 \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc3pojlu4.lua:19: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a and\
    \ a%4==0) and (a%8==0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4mc4xuo.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph4mc4xuo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local t = a\n\
    \  if t == 0 then\n    return false\n  elseif t % 6 == 1 then\n    return true\n\
    \  elseif t % 6 == 2 then\n    return true\n  elseif t % 6 == 3 then\n    return\
    \ true\n  elseif t % 6 == 4 then\n    return true\n  elseif t % 6 == 5 then\n\
    \    return true\n  elseif t % 6 == 6 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquwydybk.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpquwydybk.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\tend\n\tif a % 3 == 0 then\n\t\treturn true\n\tend\n\tif a %\
    \ 5 == 0 then\n\t\treturn true\n\tend\n\tif a % 7 == 0 then\n\t\treturn true\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq81y1w_2.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq81y1w_2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return (type(a)\
    \ == 'number' and\n           a >= 1 and\n           a % 1 == 0 and\n        \
    \   a <= math.pow(3,3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2c9zdk_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd2c9zdk_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a%2==0 then\n    return false\n  end\n  if a%3==0\
    \ then\n    return false\n  end\n  if a%5==0 then\n    return false\n  end\n \
    \ if a%7==0 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfej7q24j.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfej7q24j.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn true\n\telse\n\t\tif a == 1 then\n\t\t\treturn true\n\t\telse\n\t\t\
    \tif a >= 2 and a <= 9 then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\tif a >=\
    \ 17 and a <= 25 then\n\t\t\t\t\treturn true\n\t\t\t\telse\n\t\t\t\t\treturn false\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7550uvm.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc7550uvm.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a == 0\
    \ then\n      return true\n   elseif type(a) == 'number' then\n      return (cube[a]\
    \ and #a == a) and all(iscube(i) for i in a) \n   else\n      return false\n \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0flq3ie.lua:21: '')'' expected near ''for''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- write code\
    \ here\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcsw7k9t.lua:25:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwcsw7k9t.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return math.sqrt(math.pow(a,\
    \ 3)) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1efi6lc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb1efi6lc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return a^a^a^a^a\
    \ == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsphqpuok.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsphqpuok.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a then\n\
    \        if a > 0 then\n            return (a - 1)^3 == a\n        end\n    else\n\
    \        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst9o7vax.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpst9o7vax.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return (a**3)*(a**3)*(a**3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9w235_hk.lua:18: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a%3\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphli9r7xr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphli9r7xr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return false\n  elseif a%1 == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeosyknw8.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeosyknw8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   a = tonumber(a)\n\
    \   if a == nil then return false end\n   if a == a or a*a < 1 then return false\
    \ end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g_71jtz.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7g_71jtz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  if a <= 0 then return false end\n  if a > 16 then return\
    \ false end\n  if a % 2 == 0 then return false end\n  if a % 3 == 0 then return\
    \ false end\n  if a % 4 == 0 then return false end\n  if a % 5 == 0 then return\
    \ false end\n  if a % 6 == 0 then return false end\n  if a % 7 == 0 then return\
    \ false end\n  if a % 8 == 0 then return false end\n  if a % 9 == 0 then return\
    \ false end\n  if a % 10 == 0 then return false end\n  if a % 11 == 0 then return\
    \ false end\n  if a % 12 == 0 then return false end\n  if a % 13 == 0 then return\
    \ false end\n  if a % 14 == 0 then return false end\n  if a % 15 == 0 then return\
    \ false end\n  if a % 16 == 0 then return false end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15k06xjb.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp15k06xjb.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  local b = math.floor(a)\n  if b == a then return true end\n\
    \  return b == a and iscube(a / 3) or iscube(a - b*3 + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gb8rx4b.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8gb8rx4b.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  elseif a > 0 then\n    return iscube(math.ceil(a/3))*iscube(math.floor(a/3))\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpktj9we10.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpktj9we10.lua:21: in upvalue 'iscube'\n\
    \t/tmp/tmpktj9we10.lua:21: in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21: in\
    \ upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21: in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21:\
    \ in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21: in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21:\
    \ in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21: in upvalue 'iscube'\n\t/tmp/tmpktj9we10.lua:21:\
    \ in upvalue 'iscube'\n\t...\t(skipping 499947 levels)\n\t/tmp/tmpktj9we10.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpktj9we10.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a==0 then\
    \ return false end\n    if a==1 then return true end\n    if a==-1 then return\
    \ true end\n    if a==2 then return true end\n    if a==-2 then return true end\n\
    \    if a==3 then return true end\n    if a==-3 then return true end\n    if a==4\
    \ then return true end\n    if a==-4 then return true end\n    if a==5 then return\
    \ true end\n    if a==-5 then return true end\n    if a==6 then return true end\n\
    \    if a==-6 then return true end\n    if a==7 then return true end\n    if a==-7\
    \ then return true end\n    if a==8 then return true end\n    if a==-8 then return\
    \ true end\n    if a==9 then return true end\n    if a==-9 then return true end\n\
    \    if a==10 then return true end\n    if a==-10 then return true end\n    if\
    \ a==11 then return true end\n    if a==-11 then return true end\n    if a==12\
    \ then return true end\n    if a==-12 then return true end\n    if a==13 then\
    \ return true end\n    if a==-13 then return true end\n    if a==14 then return\
    \ true end\n    if a==-14 then return true end\n    if a==15 then return true\
    \ end\n    if a==-15 then return true end\n    if a==16 then return true end\n\
    \    if a==-16 then return true end\n    if a==17 then return true end\n    if\
    \ a==-17 then return true end\n    if a==18 then return true end\n    if a==-18\
    \ then return true end\n    if a==19 then return true end\n    if a==-19 then\
    \ return true end\n    if a==20 then return true end\n    if a==-20 then return\
    \ true end\n    if a==21 then return true end\n    if a==-21 then return true\
    \ end\n    if a==22 then return true end\n    if a==-22 then return true end\n\
    \    if a==23 then return true end\n    if a==-23 then return true end\n    if\
    \ a==24 then return true end\n    if a==-24 then return true end\n    if a==25\
    \ then return true end\n    if a==-25 then return true end\n    if a==26 then\
    \ return true end\n    if a==-26 then return true end\n    if a==27 then return\
    \ true end\n    if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5ljt_pxe.lua:73: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a<1 then\n\
    \t\treturn false\n\tend\n\tlocal x,y,z=1,1,1\n\tfor z=2,a do\n\t\tif a%z==0 then\n\
    \t\t\tx,y,z=x,y,z+1\n\t\tend\n\tend\n\treturn a==x*x*x+y*y*y+z*z*z\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbb6vvvhy.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbb6vvvhy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 1 then\
    \ return true end\n  if a == 0 then return true end\n  if a == -1 then return\
    \ true end\n  if a == -64 then return true end\n  if a == 64 then return true\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8be7m985.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8be7m985.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- base case\n\
    \tif a == 0 then\n\t\treturn true\n\tend\n\t-- base case\n\tif a <= 0 then\n\t\
    \treturn false\n\tend\n\t-- base case\n\tif a <= 1 then\n\t\treturn true\n\tend\n\
    \t-- recursive cases\n\tlocal cubocta = 1\n\tlocal cuboctb = a\n\tlocal cuboctc\
    \ = a\n\tlocal cuboctd = a\n\tlocal cubocte = 1\n\tlocal cuboctf = 1\n\tlocal\
    \ cuboctg = 1\n\tlocal cubocth = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8p7qadgs.lua:53: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local n = floor(a/6)\
    \ + 1\n  a = a - n*6\n  n = floor(a/6) + 1\n  a = a - n*6\n  n = floor(a/6) +\
    \ 1\n  a = a - n*6\n  return n == 3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12168f72.lua:18:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp12168f72.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp12168f72.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local cube\
    \ = 1\n    local x = a\n    while x>0 do\n        if (x%2)==0 then\n         \
    \   cube = x*cube\n        end\n        x = x/2\n    end\n    return cube == a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxrrh311.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppxrrh311.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\
    \ return false end\n  local cube = 1\n  while a >= 1 do\n    if a % 3 == 0 then\n\
    \      cube = cube + 1\n    end\n    a = a / 3\n  end\n  if a == 1 then return\
    \ true end\n  return cube == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nrrenmh.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0nrrenmh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        return true\n    end\n    if a <= 1 then\n        return false\n\
    \    end\n    if a <= 3 then\n        return true\n    end\n    if a <= 9 then\n\
    \        return true\n    end\n    if a <= 27 then\n        return true\n    end\n\
    \    if a <= 49 then\n        return true\n    end\n    if a <= 81 then\n    \
    \    return true\n    end\n    if a <= 129 then\n        return true\n    end\n\
    \    if a <= 251 then\n        return true\n    end\n    if a <= 411 then\n  \
    \      return true\n    end\n    if a <= 729 then\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycc8d68i.lua:57:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpycc8d68i.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code here.\n\treturn a == 1 and 1 or a == -1 and 1 or a == 64 and 1 or a ==\
    \ 0 and 1 or a == 180 and 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9flgot7t.lua:25:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmp9flgot7t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local i = 1\n\
    \  while i < a do\n    if a^i^a == a then\n      return false\n    end\n    i\
    \ = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf388dzp3.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf388dzp3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    elseif a%2==0 and a%3==0 and a%5==0 and a%7==0\
    \ then\n        return true\n    elseif a%2==0 and a%3==0 and a%5==0 then\n  \
    \      return true\n    elseif a%2==0 and a%3==0 then\n        return true\n \
    \   elseif a%2==0 and a%5==0 then\n        return true\n    elseif a%2==0 then\n\
    \        return true\n    elseif a%3==0 then\n        return true\n    elseif\
    \ a%5==0 then\n        return true\n    elseif a%7==0 then\n        return true\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1slbues1.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1slbues1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a >=\
    \ 0 and a % 1 == 0 and (a == 0 or a >= 3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn9kendw.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdn9kendw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 1\
    \ then\n        error(\"Expected a positive integer.\")\n    end\n    return a%1==0\
    \ and isodd(a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyt2i83ft.lua:21:\
    \ attempt to call a nil value (global 'isodd')\nstack traceback:\n\t/tmp/tmpyt2i83ft.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpyt2i83ft.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if type(a)\
    \ ~= 'number' then\n      error('iscube: needs an integer')\n   end\n   return\
    \ (a % 1 == 0 and a % 2 == 0 and a % 3 == 0) or\n          (a % 5 == 0 and a %\
    \ 7 == 0 and a % 11 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghihuo42.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpghihuo42.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- Write code\
    \ here\n  if a == 0 then\n    return true\n  elseif a == 1 then\n    return true\n\
    \  elseif a == 2 then\n    return true\n  elseif a == 3 then\n    return true\n\
    \  elseif a == 4 then\n    return true\n  elseif a == 5 then\n    return true\n\
    \  elseif a == 6 then\n    return true\n  elseif a == 7 then\n    return true\n\
    \  elseif a == 8 then\n    return true\n  elseif a == 9 then\n    return true\n\
    \  elseif a == 10 then\n    return true\n  elseif a == 11 then\n    return true\n\
    \  elseif a == 12 then\n    return true\n  elseif a == 13 then\n    return true\n\
    \  elseif a == 14 then\n    return true\n  elseif a == 15 then\n    return true\n\
    \  elseif a == 16 then\n    return true\n  elseif a == 17 then\n    return true\n\
    \  elseif a == 18 then\n    return true\n  elseif a == 19 then\n    return true\n\
    \  elseif a == 20 then\n    return true\n  elseif a == 21 then\n    return true\n\
    \  elseif a == 22 then\n    return true\n  elseif a == 23 then\n    return true\n\
    \  elseif a == 24 then\n    return true\n  elseif a == 25 then\n    return true\n\
    \  elseif a == 26 then\n    return true\n  elseif a == 27 then\n    return true\n\
    \  elseif a == 28 then\n    return true\n  elseif a == 29 then\n    return true\n\
    \  elseif a == 30 then\n    return true\n  elseif a == 31 then\n    return true\n\
    \  elseif a == 32 then\n    return true\n  elseif a == 33 then\n    return true\n\
    \  elseif a == 34 then\n    return true\n  elseif a == 35 then\n    return true\n\
    \  elseif a == 36 then\n    return true\n  elseif a == 37 then\n    return true\n\
    \  elseif a == 38 then\n    return true\n  elseif a == 39 then\n    return true\n\
    \  elseif a == 40 then\n    return true\n  elseif a == 41 then\n    return true\n\
    \  elseif a == 42 then\n    return true\n  elseif a == 43 then\n    return true\n\
    \  elseif a == 44 then\n    return true\n  elseif a == 45 then\n    return true\n\
    \  elseif a == 46 then\n    return true\n  elseif a == 47 then\n    return true\n\
    \  elseif a == 48 then\n    return true\n  elseif a == 49 then\n    return \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuf_ibgw3.lua:119: ''end'' expected (to close ''if'' at line
    19) near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a == 0\
    \ then\n      return true\n   end\n   if math.floor(a) == a then\n      return\
    \ true\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjbccc5s.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyjbccc5s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\
    \ return true end\n\tif a == 1 then return true end\n\tif a == 2 then return true\
    \ end\n\tif a == 3 then return true end\n\tif a == 4 then return true end\n\t\
    if a == 5 then return true end\n\tif a == 6 then return true end\n\tif a == 7\
    \ then return true end\n\tif a == 8 then return true end\n\tif a == 9 then return\
    \ true end\n\tif a == 10 then return true end\n\tif a == 11 then return true end\n\
    \tif a == 12 then return true end\n\tif a == 13 then return true end\n\tif a ==\
    \ 14 then return true end\n\tif a == 15 then return true end\n\tif a == 16 then\
    \ return true end\n\tif a == 17 then return true end\n\tif a == 18 then return\
    \ true end\n\tif a == 19 then return true end\n\tif a == 20 then return true end\n\
    \tif a == 21 then return true end\n\tif a == 22 then return true end\n\tif a ==\
    \ 23 then return true end\n\tif a == 24 then return true end\n\tif a == 25 then\
    \ return true end\n\tif a == 26 then return true end\n\tif a == 27 then return\
    \ true end\n\tif a == 28 then return true end\n\tif a == 29 then return true end\n\
    \tif a == 30 then return true end\n\tif a == 31 then return true end\n\tif a ==\
    \ 32 then return true end\n\tif a == 33 then return true end\n\tif a == 34 then\
    \ return true end\n\tif a == 35 then return true end\n\tif a == 36 then return\
    \ true end\n\tif a == 37 then return true end\n\tif a == 38 then return true end\n\
    \tif a == 39 then return true end\n\tif a == 40 then return true end\n\tif a ==\
    \ 41 then return true end\n\tif a == 42 then return true end\n\tif a == 43 then\
    \ return true end\n\tif a == 44 then return true end\n\tif a == 45 then return\
    \ true end\n\tif a == 46 then return true end\n\tif a == 47 then return true end\n\
    \tif a == 48 then return true end\n\tif a == 49 then return true end\n\tif a ==\
    \ 50 then return true end\n\tif a == 51 then return true end\n\tif a == 52 then\
    \ return true end\n\tif a == 53 then return true end\n\tif a == 54 then return\
    \ true end\n\tif a == 55 then return true end\n\tif a == 56 then return true end\n\
    \tif a == 57 then return true end\n\tif a == 58 then return true end\n\tif a ==\
    \ 59 then return true end\n\tif a == 60 then return true end\n\tif a == 61 then\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7a66euz.lua:94: ''end'' expected (to close ''if'' at line
    79) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  return a == a and a % a == 0 and iscube(a-1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntvb23up.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpntvb23up.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a <= 0\
    \ then\n        return false\n    end\n    local i = 0\n    local c = 0\n    while\
    \ i <= a do\n        c = (c * a * a) + 1\n        i = i + 1\n    end\n    return\
    \ c == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6290r697.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6290r697.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ test here\n\treturn a==1 and a==2 and a==3 and a==4 and a==8\nend\n</cell>\n\
    <text>\nExercise 2.28\nFor some value of a, print what is the smallest positive\
    \ integer which does not divide a.\nWrite your answer as a function which takes\
    \ a and prints the result.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9zp7711d.lua:21: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4zxkh7c2.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  end\n  if a == 1 then\n    return true\n  end\n  if a == 2\
    \ then\n    return true\n  end\n  if a == 3 then\n    return true\n  end\n  if\
    \ a == 4 then\n    return true\n  end\n  if a == 5 then\n    return true\n  end\n\
    \  if a == 6 then\n    return true\n  end\n  if a == 7 then\n    return true\n\
    \  end\n  if a == 8 then\n    return true\n  end\n  if a == 9 then\n    return\
    \ true\n  end\n  if a == 10 then\n    return true\n  end\n  if a == 11 then\n\
    \    return true\n  end\n  if a == 12 then\n    return true\n  end\n  if a ==\
    \ 13 then\n    return true\n  end\n  if a == 14 then\n    return true\n  end\n\
    \  if a == 15 then\n    return true\n  end\n  if a == 16 then\n    return true\n\
    \  end\n  if a == 17 then\n    return true\n  end\n  if a == 18 then\n    return\
    \ true\n  end\n  if a == 19 then\n    return true\n  end\n  if a == 20 then\n\
    \    return true\n  end\n  if a == 21 then\n    return true\n  end\n  if a ==\
    \ 22 then\n    return true\n  end\n  if a == 23 then\n    return true\n  end\n\
    \  if a == 24 then\n    return true\n  end\n  if a == 25 then\n    return true\n\
    \  end\n  if a == 26 then\n    return true\n  end\n  if a == 27 then\n    return\
    \ true\n  end\n  if a == 28 then\n    return true\n  end\n  if a == 29 then\n\
    \    return true\n  end\n  if a == 30 then\n    return true\n  end\n  if a ==\
    \ 31 then\n    return true\n  end\n  if a == 32 then\n    return true\n  end\n\
    \  if a == 33 then\n    return true\n  end\n  if a == 34 then\n    return true\n\
    \  end\n  if a == 35 then\n    return true\n  end\n  if a == 36 then\n    return\
    \ true\n  end\n  if a == 37 then\n    return true\n  end\n  if a == 38 then\n\
    \    return true\n  end\n  if a == 39 then\n    return true\n  end\n  if a ==\
    \ 40 then\n    return true\n  end\n  if a == 41 then\n    return true\n  end\n\
    \  if a == 42 then\n    return true\n  end\n  if a == 43 then\n    return true\n\
    \  end\n  if a == 44 then\n    return true\n  end\n  if a == 45 then\n    return\
    \ true\n  end\n  if a == 46 then\n    return true\n  end\n  if a == 47 then\n\
    \    return true\n  end\n  if a == 48 then\n    return true\n  end\n  if a ==\
    \ 49 then\n    return true\n  end\n  if a == \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9ymy6yf.lua:169: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a^a^a^a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklzfksbb.lua:24:\
    \ expected: true, actual: 1.0\nstack traceback:\n\t/tmp/tmpklzfksbb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 1\
    \ then\n        return true\n    elseif a==-1 then\n        return false\n   \
    \ else\n        return a%4==0 and a%9==0 and a%18==0\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm9fjexr.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnm9fjexr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal r = 0\n\
    \t\n\tfor i=0,a do\n\t\tr = r + i\n\tend\n\t\n\tif r == a*a then return true end\n\
    \t\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0n467d8.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0n467d8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    local c = a\n    while a % c ~= 0 do\n\
    \        c = c*c\n    end\n    return c == a\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplapyrp5c.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplapyrp5c.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return a*a==a*a*a\
    \ or a == 0 and 1 or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkhblyah.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqkhblyah.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a%2==0\
    \ then return false end\n   if a%3==0 then return false end\n   if a%4==0 then\
    \ return false end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpichmkh4o.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpichmkh4o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978901
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a >= 1 and\
    \ a <= 18 then return true\n\telseif a < 0 or a > 64*64 then return false\n\t\
    else\n\t\tlocal b = 1\n\t\twhile (b*b <= a) do\n\t\t\tif a % b == 0 then return\
    \ false end\n\t\t\tb = b * 2\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ccz8gsp.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9ccz8gsp.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ code here\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrmo8bir.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzrmo8bir.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 1\
    \ then return true end\n    if a == -1 then return true end\n    if a % 2 == 0\
    \ and a >= 3 then return true end\n    if a % 2 == 0 and a <= -3 then return true\
    \ end\n    if a % 3 == 0 and a >= -3 then return true end\n    if a % 3 == 0 and\
    \ a <= 3 then return true end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7jmkftm.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk7jmkftm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 1 then\n\
    \    return true\n  end\n  local x = a\n  while a ~= 0 do\n    a = math.floor(a/3)\n\
    \    x = x*x\n    if a <= 1 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwb70yic.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppwb70yic.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return false end\n  if a == 1 then return true end\n  if a == 2 then return\
    \ true end\n  if a % 3 == 0 and a % 5 == 0 then return true end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgb8xzs4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwgb8xzs4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 0 then\n\
    \t\treturn false\n\telseif a == 1 then\n\t\treturn true\n\telseif a == 2 then\n\
    \t\treturn true\n\telseif a == 3 then\n\t\treturn true\n\telseif a == 4 then\n\
    \t\treturn true\n\telseif a == 5 then\n\t\treturn true\n\telseif a == 6 then\n\
    \t\treturn true\n\telseif a == 7 then\n\t\treturn true\n\telseif a == 8 then\n\
    \t\treturn true\n\telseif a == 9 then\n\t\treturn true\n\telseif a == 10 then\n\
    \t\treturn true\n\telseif a == 11 then\n\t\treturn true\n\telseif a == 12 then\n\
    \t\treturn true\n\telseif a == 13 then\n\t\treturn true\n\telseif a == 14 then\n\
    \t\treturn true\n\telseif a == 15 then\n\t\treturn true\n\telseif a == 16 then\n\
    \t\treturn true\n\telseif a == 17 then\n\t\treturn true\n\telseif a == 18 then\n\
    \t\treturn true\n\telseif a == 19 then\n\t\treturn true\n\telseif a == 20 then\n\
    \t\treturn true\n\telseif a == 21 then\n\t\treturn true\n\telseif a == 22 then\n\
    \t\treturn true\n\telseif a == 23 then\n\t\treturn true\n\telseif a == 24 then\n\
    \t\treturn true\n\telseif a == 25 then\n\t\treturn true\n\telseif a == 26 then\n\
    \t\treturn true\n\telseif a == 27 then\n\t\treturn true\n\telseif a == 28 then\n\
    \t\treturn true\n\telseif a == 29 then\n\t\treturn true\n\telseif a == 30 then\n\
    \t\treturn true\n\telseif a == 31 then\n\t\treturn true\n\telseif a == 32 then\n\
    \t\treturn true\n\telseif a == 33 then\n\t\treturn true\n\telseif a == 34 then\n\
    \t\treturn true\n\telseif a == 35 then\n\t\treturn true\n\telseif a == 36 then\n\
    \t\treturn true\n\telseif a == 37 then\n\t\treturn true\n\telseif a == 38 then\n\
    \t\treturn true\n\telseif a == 39 then\n\t\treturn true\n\telseif a == 40 then\n\
    \t\treturn true\n\telseif a == 41 then\n\t\treturn true\n\telseif a == 42 then\n\
    \t\treturn true\n\telseif a == 43 then\n\t\treturn true\n\telseif a == 44 then\n\
    \t\treturn true\n\telseif a == 45 then\n\t\treturn true\n\telseif a == 46 then\n\
    \t\treturn true\n\telseif a == 47 then\n\t\treturn true\n\telseif a == 48 then\n\
    \t\treturn true\n\telseif a == 49 then\n\t\treturn true\n\telseif a == \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqlzx8602.lua:119: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a and\
    \ ( a % 8 == 0 and a >= 0 and a <= 64 );\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44f0jqet.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp44f0jqet.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  elseif a < 0 or math.abs(a) > 16384 then\n    return false\n\
    \  else\n    local b = math.sqrt(a*a)\n    local c = 3*a*b\n    return c == math.floor(c)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8syjmq_1.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8syjmq_1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local x\n\
    \    if a==0 then\n        -- Cubes of the same integer will always be true \n\
    \        return 1\n    elseif x==a then\n        -- Cubes of the same integer\
    \ will always be true \n        return 1\n    elseif x==0 then\n        -- Cubes\
    \ of the same integer will always be true \n        return 1\n    elseif x==-1\
    \ then\n        -- Cubes of the same integer will always be true \n        return\
    \ 1\n    elseif x==-2 then\n        -- Cubes of the same integer will always be\
    \ true \n        return 1\n    elseif x==-3 then\n        -- Cubes of the same\
    \ integer will always be true \n        return 1\n    elseif x==-4 then\n    \
    \    -- Cubes of the same integer will always be true \n        return 1\n   \
    \ elseif x==-5 then\n        -- Cubes of the same integer will always be true\
    \ \n        return 1\n    elseif x==-6 then\n        -- Cubes of the same integer\
    \ will always be true \n        return 1\n    elseif x==-7 then\n        -- Cubes\
    \ of the same integer will always be true \n        return 1\n    elseif x==-8\
    \ then\n        -- Cubes of the same integer will always be true \n        return\
    \ 1\n    elseif x==-9 then\n        -- Cubes of the same integer will always be\
    \ true \n        return 1\n    elseif x==-10 then\n        -- Cubes of the same\
    \ integer will always be true \n        return 1\n    elseif x==-11 then\n   \
    \     -- Cubes of the same integer will always be true \n        return 1\n  \
    \  elseif x==-12 then\n        -- Cubes of the same integer will always be true\
    \ \n        return 1\n    elseif x==-13 then\n        -- Cubes of the same integer\
    \ will always be true \n        return 1\n    elseif x==-14 then\n        -- Cubes\
    \ of the same integer will always be true \n        return 1\n    elseif x==-15\
    \ then\n        -- Cubes of the same integer will always be true \n        return\
    \ 1\n    elseif x==-16 then\n        -- Cubes of the same integer will always\
    \ be true \n        return 1\n    elseif x==-17 then\n        -- Cubes of the\
    \ same integer will always be true \n        return 1\n    elseif x==-18 then\n\
    \        -- Cubes of the same integer will always be true \n        return 1\n\
    \    elseif x==-19 then\n        -- Cubes of the same integer will always be true\
    \ \n        return 1\n    elseif x==-20 then\n        -- Cubes of the same integer\
    \ will always be true \n        return 1\n    elseif x==-21 then\n        -- Cubes\
    \ of the same integer will always be true \n        return 1\n    elseif x==-22\
    \ then\n        -- Cubes of the same integer will always be true \n        return\
    \ 1\n    elseif x==-23 then\n        -- Cubes of the same integer will always\
    \ be true \n        return 1\n    elseif x==-24 then\n        -- Cubes of the\
    \ same integer will always be true \n        return 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpngykmjfg.lua:100: ''end'' expected (to close ''if'' at line
    19) near ''lu''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b= a%2\n\
    \  return b==0 and (a/2==a) or not b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ymf409u.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ymf409u.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  a = tonumber(a)\n\
    \  if a == nil then return false end\n  return ((a % 1 == 0) and (a/1 == a) or\
    \ iscube(a-1)) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_fp1y1m.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn_fp1y1m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a %\
    \ 9 == 0 and a % 9 == 0 and a % 9 == 0) or (a % 3 == 0 and a % 3 == 0 and a %\
    \ 3 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b5swynr.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3b5swynr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a == 1 or a == 2 or a == 3 or a ==\
    \ 4 or a == 6 then\n        return true\n    end\n    if a == 5 then\n       \
    \ return true\n    end\n    if a == 9 then\n        return true\n    end\n   \
    \ if a == 18 then\n        return true\n    end\n    if a == 27 then\n       \
    \ return true\n    end\n    if a == 36 then\n        return true\n    end\n  \
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnjdkth4.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplnjdkth4.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a >= 0 and\
    \ a <= 18 then\n    if a % 6 == 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz7bfxdp.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvz7bfxdp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a then\n\
    \    return (a >= 2 and ((a % 2) == 0 or (a % 3) == 0 or (a % 5) == 0))\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdvwvc12.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphdvwvc12.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 1 then\
    \ return true end\n  if a % 2 == 0 then return false end\n  if a % 3 == 0 then\
    \ return true end\n  if a % 5 == 0 then return false end\n  if a % 7 == 0 then\
    \ return true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc5emto8.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsc5emto8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a == -1 then\n        return false\n\
    \    end\n    local num = a\n    while num > 1 do\n        if num % 2 == 0 then\n\
    \            num = num >> 1\n        else\n            num = num >> 1\n      \
    \      if num % 2 == 0 then\n                num = num >> 1\n            else\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuaiebzc.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcuaiebzc.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == 1 then\
    \ return true end\n\tif a == 2 then return true end\n\tif a == 3 then return true\
    \ end\n\tif a == 4 then return true end\n\tif a == 5 then return true end\n\t\
    if a == 6 then return true end\n\tif a == 7 then return true end\n\tif a == 8\
    \ then return true end\n\tif a == 9 then return true end\n\tif a == 10 then return\
    \ true end\n\tif a == 11 then return true end\n\tif a == 12 then return true end\n\
    \tif a == 13 then return true end\n\tif a == 14 then return true end\n\tif a ==\
    \ 15 then return true end\n\tif a == 16 then return true end\n\tif a == 17 then\
    \ return true end\n\tif a == 18 then return true end\n\tif a == 19 then return\
    \ true end\n\tif a == 20 then return true end\n\tif a == 21 then return true end\n\
    \tif a == 22 then return true end\n\tif a == 23 then return true end\n\tif a ==\
    \ 24 then return true end\n\tif a == 25 then return true end\n\tif a == 26 then\
    \ return true end\n\tif a == 27 then return true end\n\tif a == 28 then return\
    \ true end\n\tif a == 29 then return true end\n\tif a == 30 then return true end\n\
    \tif a == 31 then return true end\n\tif a == 32 then return true end\n\tif a ==\
    \ 33 then return true end\n\tif a == 34 then return true end\n\tif a == 35 then\
    \ return true end\n\tif a == 36 then return true end\n\tif a == 37 then return\
    \ true end\n\tif a == 38 then return true end\n\tif a == 39 then return true end\n\
    \tif a == 40 then return true end\n\tif a == 41 then return true end\n\tif a ==\
    \ 42 then return true end\n\tif a == 43 then return true end\n\tif a == 44 then\
    \ return true end\n\tif a == 45 then return true end\n\tif a == 46 then return\
    \ true end\n\tif a == 47 then return true end\n\tif a == 48 then return true end\n\
    \tif a == 49 then return true end\n\tif a == 50 then return true end\n\tif a ==\
    \ 51 then return true end\n\tif a == 52 then return true end\n\tif a == 53 then\
    \ return true end\n\tif a == 54 then return true end\n\tif a == 55 then return\
    \ true end\n\tif a == 56 then return true end\n\tif a == 57 then return true end\n\
    \tif a == 58 then return true end\n\tif a == 59 then return true end\n\tif a ==\
    \ 60 then return true end\n\tif a == 61 then return true end\n\tif a == 62 \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphpmaf5c6.lua:80: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a == 0\
    \ then\n      return false\n   end\n   if a == 1 then\n      return true\n   end\n\
    \   local b = a\n   local sq = math.floor(b*b)\n   while sq > 1 do\n      b =\
    \ b * b\n      if sq == a then\n         return true\n      end\n      sq = sq\
    \ - 1\n   end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_a4m8q_.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo_a4m8q_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 1 then\n\
    \    return true\n  end\n  if a == 0 then\n    return true\n  end\n  if a == -1\
    \ then\n    return true\n  end\n  if a % 2 == 0 or a % 2 == 1 then\n    return\
    \ false\n  end\n  return iscube(a / 2) or iscube(a / 3) or iscube(a / 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpredh49eh.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpredh49eh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return (a\
    \ % 1 == 0) and (a % 3 == 0) and (a % 5 == 0) or (a % 7 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf17edwhs.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf17edwhs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a == nil\
    \ then\n\t\treturn false\n\telse\n\t\tlocal b\n\t\tif a > 0 then\n\t\t\tb = math.sqrt(a^3)\n\
    \t\t\tif a > b*b then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynwvjqwu.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpynwvjqwu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tassert(type(a)\
    \ == 'number')\n\tif a == 1 then return true end\n\tif a == 0 then return true\
    \ end\n\tif a == -1 then return true end\n\tif a <= 0 or a%1 ~= 0 then return\
    \ false end\n\t-- Fifth Test\n\tif a < 6 then return true end\n\tif a == 3 or\
    \ a == 5 then return true end\n\t-- Fourth Test\n\tif a <= 3 then\n\t\tif a ==\
    \ 0 then return false end\n\t\tif a == 1 then return true end\n\t\tif a == 2 then\
    \ return true end\n\t\tif a == 4 then return true end\n\t\tif a == 6 then return\
    \ true end\n\t\tif a == 9 then return true end\n\t\treturn false\n\tend\n\tif\
    \ a == 6 then\n\t\tif a <= 3 then\n\t\t\tif a == 0 then return true end\n\t\t\t\
    if a == 1 then return true end\n\t\t\tif a == 2 then return true end\n\t\t\tif\
    \ a == 4 then return true end\n\t\t\tif a == 6 then return true end\n\t\t\tif\
    \ a == 9 then return true end\n\t\t\treturn false\n\t\tend\n\t\tif a == 3 then\
    \ return true end\n\t\tif a == 5 then return true end\n\t\tif a == 9 then return\
    \ true end\n\t\treturn false\n\tend\n\t-- Third Test\n\tif a <= 2 then\n\t\tif\
    \ a == 0 then return false end\n\t\tif a == 1 then return true end\n\t\tif a ==\
    \ 2 then return true end\n\t\tif a == 4 then return true end\n\t\tif a == 6 then\
    \ return true end\n\t\tif a == 9 then return true end\n\t\treturn false\n\tend\n\
    \tif a == 6 then\n\t\tif a <= 2 then\n\t\t\tif a == 0 then return true end\n\t\
    \t\tif a == 1 then return true end\n\t\t\tif a == 2 then return true end\n\t\t\
    \tif a == 4 then return true end\n\t\t\tif a == 6 then return true end\n\t\t\t\
    if a == 9 then return true end\n\t\t\treturn false\n\t\tend\n\t\tif a == 3 then\
    \ return true end\n\t\tif a == 5 then return true end\n\t\tif a == 9 then return\
    \ true end\n\t\treturn false\n\tend\n\t-- Second Test\n\tif a <= 1 then\n\t\t\
    if a == 0 then return false end\n\t\tif a == 1 then return true end\n\t\tif a\
    \ == 2 then return true end\n\t\tif a == 4 then return true end\n\t\tif a == 6\
    \ then return true end\n\t\tif a == 9 then return true end\n\t\treturn false\n\
    \tend\n\t-- First Test\n\tif a == 0 then\n\t\tif a <= 1 then\n\t\t\tif a == 0\
    \ then return true end\n\t\t\tif a == 1 then return true end\n\t\t\tif a == 2\
    \ then return true end\n\t\t\tif a == 4 then return true end\n\t\t\tif a == 6\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp029rzj5i.lua:94: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    local result\
    \ = false;\n    if a > 0 then\n        if a > 6 then\n            if a > 12 then\n\
    \                if a > 24 then\n                    result = true;\n        \
    \        end\n            end\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8si201o.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd8si201o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a %\
    \ 1 == 0 and a % 4 == 0 and a % 8 == 0 and a % 16 == 0\nend\n</cell>\n<text>\n\
    Write a function that takes an integer a and returns true \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp73spiv_d.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   local i, x,\
    \ y, z, s, t\n   i = math.floor(a)\n   x = a%x\n   y = a%y\n   z = a%z\n   s =\
    \ x%x\n   t = x%y\n   return s and t and t and t and x and y and z and i\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2hshctq.lua:20:\
    \ attempt to perform arithmetic on a nil value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpr2hshctq.lua:20: in local 'candidate'\n\t/tmp/tmpr2hshctq.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return (a\
    \ >= 0 and a <= 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsvsrmzl.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxsvsrmzl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a >=\
    \ 0 and a <= 9 and a == a * (a ^ a) \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xlpwxxe.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6xlpwxxe.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a <= 1\
    \ then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpraj5prcr.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif a <= 0 then\n\
    \t\treturn false\n\tend\n\treturn a * a * a * a <= 1 and a * a * a * a <= a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms2ipqkh.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpms2ipqkh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a and\
    \ ((a*a*a)+(a*a*a)+(a*a*a)) >= 4*a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwfxpx3b.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjwfxpx3b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if type(a)\
    \ == 'number' then\n      return a == (a*a*a)\n   end\n   return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl8y41tn.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdl8y41tn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a <= 0 then\n\
    \    return false\n  else\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvcntv5a.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuvcntv5a.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return false\n  end\n  \n  if a%3 ~= 0 then\n    return false\n  end\n  \n\
    \  if a%3 == 1 then\n    return iscube(a/3) --a = 3*a\n  end\n  \n  if a%3 ==\
    \ 2 then\n    return iscube(a/3) -- a = 2*a\n  end\n  \n  if a%3 == 0 then\n \
    \   return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe90f6abw.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe90f6abw.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return tonumber(str((a\
    \ % 6 == 0 and a/6) or a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpajhag9zf.lua:18:\
    \ attempt to call a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpajhag9zf.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpajhag9zf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local n = 0\n\
    \  while a do\n    a, n = n, a + n % 9\n  end\n  return n == 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn (a ==\
    \ 0) and (a > -180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfy8wvw85.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfy8wvw85.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write your\
    \ solution here\n\tlocal cube = 0;\n\tif a > 0 then\n\t\tif a <= 9 then\n\t\t\t\
    cube = a ^ 3;\n\t\telse\n\t\t\tcube = 3 * (a-1) + 1;\n\t\tend\n\tend\n\treturn\
    \ cube == 1;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaugu9drf.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaugu9drf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\n\
    \    return false\n  end\n  \n  return a%1==0 and iscube(a-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5s2vv9q.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd5s2vv9q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tlocal b = a\n\
    \tlocal c = a\n\tif a <= 0 then\n\t\treturn false\n\tend\n\tlocal sum = 0\n\t\
    while c ~= 1 do\n\t\tsum = sum + c\n\t\tc = c/2\n\tend\n\treturn sum == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu17fjg42.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu17fjg42.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return true\n  elseif a == 1 then\n    return true\n  elseif a == 2 then\n\
    \    return true\n  elseif a == 3 then\n    return true\n  elseif a == 4 then\n\
    \    return true\n  elseif a == 5 then\n    return true\n  elseif a == 6 then\n\
    \    return true\n  elseif a == 7 then\n    return true\n  elseif a == 8 then\n\
    \    return true\n  elseif a == 9 then\n    return true\n  elseif a == 10 then\n\
    \    return true\n  elseif a == 11 then\n    return true\n  elseif a == 12 then\n\
    \    return true\n  elseif a == 13 then\n    return true\n  elseif a == 14 then\n\
    \    return true\n  elseif a == 15 then\n    return true\n  elseif a == 16 then\n\
    \    return true\n  elseif a == 17 then\n    return true\n  elseif a == 18 then\n\
    \    return true\n  elseif a == 19 then\n    return true\n  elseif a == 20 then\n\
    \    return true\n  elseif a == 21 then\n    return true\n  elseif a == 22 then\n\
    \    return true\n  elseif a == 23 then\n    return true\n  elseif a == 24 then\n\
    \    return true\n  elseif a == 25 then\n    return true\n  elseif a == 26 then\n\
    \    return true\n  elseif a == 27 then\n    return true\n  elseif a == 28 then\n\
    \    return true\n  elseif a == 29 then\n    return true\n  elseif a == 30 then\n\
    \    return true\n  elseif a == 31 then\n    return true\n  elseif a == 32 then\n\
    \    return true\n  elseif a == 33 then\n    return true\n  elseif a == 34 then\n\
    \    return true\n  elseif a == 35 then\n    return true\n  elseif a == 36 then\n\
    \    return true\n  elseif a == 37 then\n    return true\n  elseif a == 38 then\n\
    \    return true\n  elseif a == 39 then\n    return true\n  elseif a == 40 then\n\
    \    return true\n  elseif a == 41 then\n    return true\n  elseif a == 42 then\n\
    \    return true\n  elseif a == 43 then\n    return true\n  elseif a == 44 then\n\
    \    return true\n  elseif a == 45 then\n    return true\n  elseif a == 46 then\n\
    \    return true\n  elseif a == 47 then\n    return true\n  elseif a == 48 then\n\
    \    return true\n  elseif a == 49 then\n    return true\n  elseif a == \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg_zlrs0y.lua:119: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a then\n\
    \        -- Write your code here\n        local i = 1\n        while i <= a do\n\
    \            local b = i\n            local c = 2*i\n            while b <= c\
    \ do\n                local d = b\n                local e = c\n             \
    \   while d <= e do\n                    if ((b-c)*(e-d)) == a then\n        \
    \                return true\n                    else\n                     \
    \   d = d + 1\n                    end\n                end\n                e\
    \ = e - 1\n            end\n            b = b + 1\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a > 360\
    \ then\n        return false\n    end\n    local s = math.sqrt(a*a)\n    return\
    \ s == math.floor(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y9uyk22.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7y9uyk22.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a %\
    \ 1 == 0 and a % 3 == 0 and a % 5 == 0 and a % 7 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cfl1di6.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5cfl1di6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   if a then\n\
    \      local cube = 0\n      for i = 2, a do\n         cube = cube + i\n     \
    \ end\n      return cube == a\n   else\n      return false\n   end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkfh7c5m.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxkfh7c5m.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tif (a <= 0)\
    \ then\n\t\treturn false;\n\telseif (a == 1) then\n\t\treturn true;\n\telseif\
    \ (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 2) then\n\t\treturn true;\n\
    \telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 3) then\n\t\t\
    return true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a ==\
    \ 4) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\
    \telseif (a == 5) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn\
    \ false;\n\telseif (a == 6) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\
    \t\treturn false;\n\telseif (a == 7) then\n\t\treturn true;\n\telseif (a ~= (a*a*a))\
    \ then\n\t\treturn false;\n\telseif (a == 8) then\n\t\treturn true;\n\telseif\
    \ (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 9) then\n\t\treturn true;\n\
    \telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 10) then\n\t\t\
    return true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a ==\
    \ 11) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\
    \telseif (a == 12) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\t\
    return false;\n\telseif (a == 13) then\n\t\treturn true;\n\telseif (a ~= (a*a*a))\
    \ then\n\t\treturn false;\n\telseif (a == 14) then\n\t\treturn true;\n\telseif\
    \ (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 15) then\n\t\treturn\
    \ true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a == 16) then\n\
    \t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\telseif (a\
    \ == 17) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\treturn false;\n\
    \telseif (a == 18) then\n\t\treturn true;\n\telseif (a ~= (a*a*a)) then\n\t\t\
    return false;\n\telseif (a == 19) then\n\t\treturn true;\n\telseif (a ~= (a*a*a))\
    \ then\n\t\treturn false;\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpilfd48jd.lua:96: ''end'' expected (to close ''if'' at line
    18) near ''lu''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a < 0\
    \ then\n        a = -a\n    end\n    if a > 9 then\n        return false\n   \
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew461387.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpew461387.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph685t678.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return ( a\
    \ == (a*a*a) )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdl03eje.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxdl03eje.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a == 0 then\
    \ return true end\n  if a > 0 then\n    if a > 360 then return false end\n   \
    \ return true -- a is an integer\n  else\n    -- a is a float\n    if a < -360\
    \ then return false end\n    return true -- a is a positive integer\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hq43qay.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8hq43qay.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local function\
    \ cubecheck()\n    if a ~= nil then\n      local b = a^(1/3)\n      if b == 1\
    \ then\n        -- This is a cube\n        return true\n      else\n        return\
    \ false\n      end\n    end\n  end\n  -- If this ingeger is a cube, just check\
    \ it\n  if a ~= nil and isfunction(cubecheck) then\n    return cubecheck()\n \
    \ end\n  -- Otherwise see if it's a cube with some integer\n  if a ~= nil then\n\
    \    local b = a^(1/3)\n    if b == 1 then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2ljduak.lua:30:\
    \ attempt to call a nil value (global 'isfunction')\nstack traceback:\n\t/tmp/tmpq2ljduak.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpq2ljduak.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    return (a\
    \ <= 0 and a or math.floor(a) == a and math.floor(a) == a*a and math.floor(a)\
    \ == a*a*a and math.floor(a) == a*a*a*a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m5q3cmt.lua:26:\
    \ expected: true, actual: -1\nstack traceback:\n\t/tmp/tmp4m5q3cmt.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then return true end\n    if a == 1 then return true end\n    if a == -1 then\
    \ return true end\n    if a <= 1 then return false end\n    return a == math.floor(a)\
    \ and iscube(a-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu_q3r_s.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgu_q3r_s.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\n\
    \    return false\n  end\n  if a > 180 then\n    return false\n  end\n  if a ==\
    \ 1 then\n    return true\n  end\n  return (a%1) == 0 and iscube(a/1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjvmng5f.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpsjvmng5f.lua:27: in upvalue 'iscube'\n\
    \t/tmp/tmpsjvmng5f.lua:27: in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27: in\
    \ upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27: in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27:\
    \ in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27: in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27:\
    \ in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27: in upvalue 'iscube'\n\t/tmp/tmpsjvmng5f.lua:27:\
    \ in upvalue 'iscube'\n\t...\t(skipping 499956 levels)\n\t/tmp/tmpsjvmng5f.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpsjvmng5f.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.270 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  -- write your\
    \ solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetukxrii.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpetukxrii.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978902
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tassert(type(a)\
    \ == 'number', 'iscube requires integer number')\n\tlocal b = 1\n\twhile a ~=\
    \ 0 do\n\t\tb = (b * a)\n\t\ta = a - 1\n\tend\n\treturn b == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == nil\
    \ then\n        return 0\n    end\n    local cube = 1\n    for i = 1, a do\n \
    \       cube = cube * i\n    end\n    return cube == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh9zp5iz.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbh9zp5iz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == nil\
    \ then return false end\n    if a <= 0 then return false end\n    if a > 100 then\
    \ return false end\n    if a <= 1 then return true end\n    if a == 2 then return\
    \ true end\n    if a == 3 then return true end\n    if a == 6 then return true\
    \ end\n    if a == 9 then return true end\n    if a == 12 then return true end\n\
    \    if a == 18 then return true end\n    if a == 20 then return true end\n  \
    \  if a == 24 then return true end\n    if a == 28 then return true end\n    if\
    \ a == 32 then return true end\n    if a == 36 then return true end\n    if a\
    \ == 40 then return true end\n    if a == 44 then return true end\n    if a ==\
    \ 48 then return true end\n    if a == 52 then return true end\n    if a == 56\
    \ then return true end\n    if a == 60 then return true end\n    if a == 64 then\
    \ return true end\n    if a == 68 then return true end\n    if a == 72 then return\
    \ true end\n    if a == 76 then return true end\n    if a == 80 then return true\
    \ end\n    if a == 84 then return true end\n    if a == 88 then return true end\n\
    \    if a == 92 then return true end\n    if a == 96 then return true end\n  \
    \  if a == 100 then return true end\n    if a == 104 then return true end\n  \
    \  if a == 108 then return true end\n    if a == 112 then return true end\n  \
    \  if a == 116 then return true end\n    if a == 120 then return true end\n  \
    \  if a == 124 then return true end\n    if a == 128 then return true end\n  \
    \  if a == 132 then return true end\n    if a == 136 then return true end\n  \
    \  if a == 140 then return true end\n    if a == 144 then return true end\n  \
    \  if a == 148 then return true end\n    if a == 152 then return true end\n  \
    \  if a == 156 then return true end\n    if a == 160 then return true end\n  \
    \  if a == 164 then return true end\n    if a == 168 then return true end\n  \
    \  if a == 172 then return true end\n    if a == 176 then return true end\n  \
    \  if a == 180 then return true end\n    if a == 184 then return true end\n  \
    \  if a == 188 then return true end\n    if a == 192 then return true end\n  \
    \  if a == 196 then return true end\n    if a == 200 then return true end\n  \
    \  if a == 204 then return true end\n    if a == 208 then return true end\n  \
    \  if a == 212 then return true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0_w7cu_l.lua:92: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\treturn a %\
    \ 9 == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bpys59e.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3bpys59e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a <= 0\
    \ then\n        error(\"The number must be positive\")\n    end\n    for i = 1,\
    \ a do\n        if a % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vrt8poz.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5vrt8poz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n    if a == 0\
    \ then\n        return true\n    end\n    if a == 1 then\n        return true\n\
    \    end\n    if a == 2 then\n        return true\n    end\n    if a == 3 then\n\
    \        return true\n    end\n    if a == 4 then\n        return true\n    end\n\
    \    if a == 5 then\n        return true\n    end\n    if a == 6 then\n      \
    \  return true\n    end\n    if a == 7 then\n        return true\n    end\n  \
    \  if a == 8 then\n        return true\n    end\n    if a == 9 then\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgls7od7e.lua:55:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgls7od7e.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\tassert( type(val(a))\
    \ == \"number\" , \"iscube function expects number as argument\")\n\treturn (math.floor(a)\
    \ == a * a*a*a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q3ar43x.lua:18:\
    \ attempt to call a nil value (global 'val')\nstack traceback:\n\t/tmp/tmp3q3ar43x.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp3q3ar43x.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n\t-- Write code\
    \ here\n\tif a == 0 then\n\t\treturn true\n\tend\n\tif a == 1 then\n\t\treturn\
    \ true\n\tend\n\tif a == 3 then\n\t\treturn true\n\tend\n\tif a == 5 then\n\t\t\
    return true\n\tend\n\tif a == 7 then\n\t\treturn true\n\tend\n\tif a == 9 then\n\
    \t\treturn true\n\tend\n\tif a == 11 then\n\t\treturn true\n\tend\n\tif a == 13\
    \ then\n\t\treturn true\n\tend\n\tif a == 17 then\n\t\treturn true\n\tend\n\t\
    if a == 19 then\n\t\treturn true\n\tend\n\tif a == 21 then\n\t\treturn true\n\t\
    end\n\tif a == 23 then\n\t\treturn true\n\tend\n\tif a == 27 then\n\t\treturn\
    \ true\n\tend\n\tif a == 29 then\n\t\treturn true\n\tend\n\tif a == 31 then\n\t\
    \treturn true\n\tend\n\tif a == 33 then\n\t\treturn true\n\tend\n\tif a == 35\
    \ then\n\t\treturn true\n\tend\n\tif a == 37 then\n\t\treturn true\n\tend\n\t\
    if a == 39 then\n\t\treturn true\n\tend\n\tif a == 41 then\n\t\treturn true\n\t\
    end\n\tif a == 43 then\n\t\treturn true\n\tend\n\tif a == 45 then\n\t\treturn\
    \ true\n\tend\n\tif a == 47 then\n\t\treturn true\n\tend\n\tif a == 49 then\n\t\
    \treturn true\n\tend\n\tif a == 51 then\n\t\treturn true\n\tend\n\tif a == 53\
    \ then\n\t\treturn true\n\tend\n\tif a == 55 then\n\t\treturn true\n\tend\n\t\
    if a == 57 then\n\t\treturn true\n\tend\n\tif a == 59 then\n\t\treturn true\n\t\
    end\n\tif a == 61 then\n\t\treturn true\n\tend\n\tif a == 63 then\n\t\treturn\
    \ true\n\tend\n\tif a == 65 then\n\t\treturn true\n\tend\n\tif a == 67 then\n\t\
    \treturn true\n\tend\n\tif a == 69 then\n\t\treturn true\n\tend\n\tif a == 71\
    \ then\n\t\treturn true\n\tend\n\tif a == 73 then\n\t\treturn true\n\tend\n\t\
    if a == 75 then\n\t\treturn true\n\tend\n\tif a == 77 then\n\t\treturn true\n\t\
    end\n\tif a == 79 then\n\t\treturn true\n\tend\n\tif a == 81 then\n\t\treturn\
    \ true\n\tend\n\tif a == 83 then\n\t\treturn true\n\tend\n\tif a == 85 then\n\t\
    \treturn true\n\tend\n\tif a == 87 then\n\t\treturn true\n\tend\n\tif a == 89\
    \ then\n\t\treturn true\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdv0gxd99.lua:151: ''end'' expected (to close ''if'' at line
    148) near ''lu''

    '
  stdout: ''
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n   return ((a*a*a)==(a*a*a))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s_k6sv8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7s_k6sv8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: -1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  local b = 0\n\
    \  local c = 0\n  local d = 0\n  local e = 0\n  local f = 0\n  local g = 0\n \
    \ local h = 0\n  local i = 1\n  while i <= a do\n    b = b*b\n    c = c*c\n  \
    \  d = d*d\n    e = e+e\n    f = f+f\n    g = g+g\n    h = h*h\n    i = i*i\n\
    \  end\n  if a == 1 then\n    return true\n  elseif a == 0 then\n    return false\n\
    \  elseif b == 0 then\n    return true\n  elseif c == 0 then\n    return true\n\
    \  elseif d == 0 then\n    return true\n  elseif e == 0 then\n    return true\n\
    \  elseif f == 0 then\n    return true\n  elseif g == 0 then\n    return true\n\
    \  elseif h == 0 then\n    return true\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  if a < 0 then\n\
    \    return false\n  end\n  return ((a * a * a) > (a*a*a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_43ic6zh.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_43ic6zh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
- exit_code: 1
  program: "-- Write a function that takes an integer a and returns true \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n\
    -- false\n-- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n\
    -- true\n-- >>> iscube(180)\n-- false\nlocal function iscube(a)\n  return a ==\
    \ 1 and true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sdm9fbm.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0sdm9fbm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978902
