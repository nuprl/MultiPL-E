name: HumanEval_35_max_element
language: lua
prompt: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
  -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
  \ function max_element(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i, max = nil, 0\n  for i = #l, 1, -1 do\n    max = max > l[i]\
    \ and max or l[i]\n  end\n  return max\nend", "  if l[1] == nil then\n    return\
    \ nil\n  end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n   \
    \   m = l[i]\n    end\n  end\n  return m\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local max_val = l[1]\n  local max_idx = 1\n  for idx = 2, #l do\n\
    \    if l[idx] > max_val then\n      max_val = l[idx]\n      max_idx = idx\n \
    \   end\n  end\n  return max_val\nend", "  if type(l) ~= 'table' then\n    error('Argument\
    \ not a table: ' .. tostring(l))\n  end\n  local max = l[1]\n  for i=2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  if l==nil then return nil end\n  local m = 0\n  local i = 1\n  local v = l[1]\n\
    \  for i = 1,#l do\n    if v > l[i] then m = i end\n  end\n  return m\nend", " \
    \ return largest(1, #l, l, function(a, b) return a < b end)\nend", "  local max\n\
    \  local i", "  if #l == 0 then return nil end\n  local i = 1\n  local max = l[1]\n\
    \  for i = 2, #l do\n    local v = l[i]\n    if v > max then max = v end\n  end\n\
    \  return max\nend", "    return l.max\nend", "  if type(l) ~= 'table' then return\
    \ nil end\n  local max_value = nil\n  local max_element = nil\n  local i = nil",
  '    local max = l[1]', "    local m = nil\n    for _, b in pairs(l) do\n      \
    \  if m is None or m < b then\n            m = b\n        end\n    end\n    return\
    \ m\nend", "  local s = l[1]\n  local i = 1\n  while i < #l do\n    local e =\
    \ l[i]\n    if e > s then\n      s = e\n    end\n    i = i + 1\n  end\n  return\
    \ s\nend", "  local max = nil\n  for _, elem in ipairs(l) do\n    if max ~= nil\
    \ then\n      if elem > max then max = elem end\n    else\n      max = elem\n\
    \    end\n  end\n  return max\nend", "  local max_val\n  local max_idx\n  for\
    \ idx, val in enumerate(l) do\n    if val > max_val then\n      max_val = val\n\
    \      max_idx = idx\n    end\n  end\n  return max_idx, max_val\nend", "  if #l\
    \ == 0 then return nil end\n  local max_val = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > max_val then\n      max_val = l[i]\n    end\n  end\n  return max_val\n\
    end", "  if l==nil then return nil end\n  local s = l[1]\n  local c = 0\n  for\
    \ i=2,#l do local v = l[i]; c = c or v; s = v if c < v end end\n  return s\nend",
  '  local max_val', "  assert(l, \"table cannot be nil\")\n  local ret = nil\n  for\
    \ _, v in ipairs(l) do\n    if ret ~= nil then\n      if v > ret then\n      \
    \  ret = v\n      end\n    else\n      ret = v\n    end\n  end\n  return ret\n\
    end", "  if #l == 0 then return nil end\n  if l[1] == nil then return nil end\n\
    \  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n\
    \  return m\nend", '  local m = nil', "    local m = nil\n    for _, v in ipairs(l)\
    \ do\n        if m == nil or m < v then\n            m = v\n        end\n    end\n\
    \    return m\nend", "  local max = 0\n  for i, v in ipairs(l) do\n    if v >\
    \ max then\n      max = v\n    end\n  end\n  return max\nend", "  if #l == 0 then\
    \ return nil end\n  local i, max = 0, nil\n  for i = #l, 1, -1 do\n    local el\
    \ = l[i]\n    if el > max then\n      i, max = i, el\n    end\n  end\n  return\
    \ l[i]\nend", "  if #l == 0 then return nil end\n  local max, i = math.min, 1\n\
    \  for _, v in ipairs(l) do\n    if max < v then\n      max = v\n    end\n   \
    \ i = i + 1\n  end\n  return max\nend", "  return table.remove(l, (function()\n\
    \    -- Create reverse iterator over the original iterator.\n    local reverse\
    \ = reverse(t)\n    -- Reverse the iterator to avoid consuming its values.\n \
    \   local v = reverse()\n    local max = nil\n    for _ in pairs(v) do\n     \
    \ local _max = max\n      if not _max or _max < _[1] then _max = _[1] end\n  \
    \    if not max or max > _max then max = _max end\n    end\n    return max\n \
    \ end)())\nend", "    if #l == 0 then return nil end\n    local max_value, max_idx\
    \ = 0, 1\n    for i = 1, #l do\n        if l[i] > max_value then\n           \
    \ max_value = l[i]\n            max_idx = i\n        end\n    end\n    return\
    \ max_value\nend", "  if l == nil then\n    return nil\n  end\n  local m, e\n\
    \  do\n    m, e = unpack(l)\n  end\n  if m ~= nil then\n    return m\n  end\n\
    \  if e ~= nil then\n    return e\n  end\n  return nil\nend", "    local max =\
    \ l[1]\n    for i = 2, #l do\n        if max < l[i] then\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n     \
    \ max = l[i]\n    end\n  end\n  return max\nend", "  local m = nil\n  for _, el\
    \ in ipairs(l) do\n    if m and m >= el then break end\n    m = el\n  end\n  return\
    \ m\nend", "  local m = nil\n  local max_v = nil\n  for i, v in ipairs(l) do\n\
    \    if m == nil or v > m then\n      m = v\n      max_v = i\n    end\n  end\n\
    \  return max_v\nend", "  if l == nil then\n    return nil\n  end\n  local max_elem,\
    \ max_index = nil, -1\n  for i, v in ipairs(l) do\n    if max_elem == nil then\n\
    \      max_elem = v\n      max_index = i\n    else\n      if v > max_elem then\n\
    \        max_elem = v\n        max_index = i\n      end\n    end\n  end\n  return\
    \ max_elem, max_index\nend", "  local max_val = l[1]\n  for i = 2, #l do\n   \
    \ if l[i] > max_val then\n      max_val = l[i]\n    end\n  end\n  return max_val\n\
    end", "    local max_value = nil\n    for _, value in ipairs(l) do\n        if\
    \ max_value == nil or value >= max_value then\n            max_value = value\n\
    \        end\n    end\n    return max_value\nend", "  local max_value\n  local\
    \ max_idx = -1\n  local i = 1\n  local idx\n  repeat\n    idx = i\n    if i <\
    \ l then\n      local x = l[i]\n      if x > max_value then\n        max_value,\
    \ max_idx = x, idx\n      end\n      i = i + 1\n    end\n  until max_idx == idx\n\
    \  return max_value\nend", "  local max = l[1]\n  for i = 2, #l do\n    if max\
    \ < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend", "  local\
    \ max = (l[1] < l[2]) and (l[1] or 0)\n  for i = 2, #l do\n    if l[i] > max then\n\
    \      max = (max < l[i]) and (max or 0)\n    end\n  end\n  return max\nend",
  "  return table.max(_unpack(l))\nend", "  if l[1] == nil then\n    return nil\n\
    \  end\n  local m = math.max(l[1])\n  for i = 2, #l do\n    if l[i] > m then\n\
    \      m = l[i]\n    end\n  end\n  return m\nend", "  if l==nil then\n    return\
    \ nil\n  end\n  local max = l[1]\n  for i=2,#l do\n    if l[i]>max then\n    \
    \  max = l[i]\n    end\n  end\n  return max\nend", "  if #l == 0 then return nil\
    \ end\n  if l[1] == nil then return l[2] end\n  if l[2] <= l[1] then return max_element(l)\
    \ end\n  return max_element(l)\nend", "  if l[1] == nil then\n    error('list\
    \ argument is not iterable')\n  end\n  local max = l[1]\n  for i = 2, #l do\n\
    \    if max < l[i] then max = l[i] end\n  end\n  return max\nend", "  if type(l)\
    \ ~= 'table' then return nil end\n  local max, key\n  for key, val in pairs(l)\
    \ do\n    if max ~= nil then\n      if max < val then\n        max = val\n   \
    \   end\n    else\n      max = val\n    end\n  end\n  return max\nend", "  if\
    \ #l == 0 then\n    error(\"list empty\")\n  end\n  local max_value, max_idx,\
    \ max_idx = {}, 0, 1\n  for idx = 1, #l do\n    if l[idx] > max_value then\n \
    \     max_value = l[idx]\n      max_idx = idx\n    end\n  end\n  return max_value\n\
    end", "  local r\n  for _, v in ipairs(l) do\n    if r == nil then\n      r =\
    \ v\n    else\n      if v > r then\n        r = v\n      end\n    end\n  end\n\
    \  return r\nend", "   if #l == 0 then\n      error('Empty list')\n   end\n  \
    \ if #l == 1 then\n      return l[1]\n   end", "  if l==nil then\n    return nil\n\
    \  end\n  local m = nil\n  for k, v in pairs(l) do\n    if m == nil or v > m then\n\
    \      m = v\n    end\n  end\n  return m\nend", "    local m, x = l[1]\n    for\
    \ _, v in pairs(l) do\n        if m > v then return v end\n        m = v\n   \
    \     x = v\n    end\n    return m\nend", "    local i, v = 0, l[1]\n    for i\
    \ = 2, #l do\n        if v > l[i] then\n            v = l[i]\n        end\n  \
    \  end\n    return v\nend", "  if l[1] == nil then return nil end\n  if l[2] ==\
    \ nil then return l[1] end\n  if l[1] == l[2] then\n    return max_element(l[3])\n\
    \  end\n  if l[1] ~= nil and l[2] ~= nil then\n    return l[1] > l[2] and max_element(l[3])\
    \ or max_element(l[2])\n  end\n  return nil\nend", "  local max_value = nil\n\
    \  local max_pos = nil", "  local n = 1\n  local max = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n      n = i\n    end\n  end\n  return\
    \ l[n]\nend", "    local m, n = 1, #l\n    while n > m do\n        local m = m\
    \ + 2\n        n = math.min(n - 1, #l)\n    end\n    return l[m]\nend", "  if\
    \ l == nil then return nil end\n  local max_element = nil\n  local i = 1\n  for\
    \ _, e in ipairs(l) do\n    if e > max_element then\n      max_element = e\n \
    \   end\n    i = i + 1\n  end\n  return max_element\nend", "  if #l == 0 then\n\
    \    error('list is empty')\n  end\n  local max = l[1]\n  for i = 2, #l do\n \
    \   if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  local max = nil\n  for _, v in pairs(l) do\n    if max is None or v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "  local maxv = l[1]\n  for\
    \ i=2,#l do\n    if l[i] > maxv then\n      maxv = l[i]\n    end\n  end\n  return\
    \ maxv\nend", "    local max = l[1]\n    for _, v in pairs(l) do\n        if v\
    \ > max then\n            max = v\n        end\n    end\n    return max\nend",
  "  local max = 0\n  local i = 1\n  for _, v in ipairs(l) do\n    if v > max then\n\
    \      max = v\n    end\n    i = i + 1\n  end\n  return max\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local m, max_element = l[1], l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > m then\n      m, max_element = l[i], max_element\n\
    \    end\n  end\n  return max_element\nend", "  return l[#l]\nend", "  local i,\
    \ v, e = 0, {}, {}\n  for i, v in ipairs(l) do\n    table.insert(e, v)\n  end\n\
    \  return unpack(e)\nend", "  local m, l = nil, {}\n  for i, x in ipairs(l) do\n\
    \    if m == nil or x > m then m = x end\n    l[i] = x\n  end\n  return m\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local best\n  best[1] = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > best[1] then\n      best[1] = l[i]\n    end\n  end\n\
    \  return best[1]\nend", "  if l==nil then\n    return nil\n  end", "  local i\
    \ = #l\n  if i == 0 then return nil end\n  local result = l[1]\n  for i = 1, i\
    \ do\n    if l[i] > result then result = l[i] end\n  end\n  return result\nend",
  "    local m = nil\n    local max = nil\n    for _,v in ipairs(l) do\n        if\
    \ m == nil or v > m then\n            m = v\n            max = v\n        end\n\
    \    end\n    return max\nend", "  local elem = nil\n  local max_elem = nil\n\
    \  for i, v in ipairs(l) do\n    if elem ~= nil then\n      if v > elem then\n\
    \        elem = v\n      end\n    else\n      elem = v\n    end\n    max_elem\
    \ = v\n  end\n  return max_elem\nend", "  if l == nil then return nil end\n  local\
    \ max_value = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value\
    \ = l[i]\n    end\n  end\n  return max_value\nend", "  if type(l) == 'table' then\n\
    \    local max_value = -1\n    for key, value in pairs(l) do\n      if value >\
    \ max_value then max_value = value; end -- keep track of the highest number\n\
    \    end\n    return max_value\n  else\n    error('l is not a table')\n  end\n\
    end", "    local i, max = 0, nil\n    for _, v in ipairs(l) do\n        if v >\
    \ max then\n            max = v\n        end\n        i = i + 1\n    end\n   \
    \ return i\nend", "    local max_key\n    for _, key in ipairs(l) do\n       \
    \ if key > max_key then max_key = key\n        end\n    end\n    return max_key\n\
    end", '  local max = nil', "  if l == nil then return nil end\n  local maxi, maxj\
    \ = (0), 0\n  for i, v in ipairs(l) do\n    for j = 1, #l do\n      if v < l[j]\
    \ then\n        maxi, maxj = i, j\n      end\n    end\n  end\n  return l[maxj]\n\
    end", "  local max_e = l[1]\n  for i = 2, #l do\n    if l[i] > max_e then\n  \
    \    max_e = l[i]\n    end\n  end\n  return max_e\nend", "  local m = l[1]\n \
    \ for i = 2, #l do\n    m = m > l[i] and m or l[i]\n  end\n  return m\nend", " \
    \ if l == nil then return nil end\n  if #l == 0 then return nil end\n  if #l ==\
    \ 1 then return l[1] end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ m then m = l[i] end\n  end\n  return m\nend", '  local max_val = l[1]', "  return\
    \ unpack(\n    map(values, l),\n    true,\n    function(_, val) return val end,\n\
    \    function(_, val) return val end,\n    function(_, val) return val end,\n\
    \    function(_, val) return val end,\n    function(_, val) return val end,\n\
    \    function(_, val) return val end,\n    function(_, val) return val end,\n\
    \    function(_, val) return val end)\nend", "  local max_elt, max_idx = nil,\
    \ -1\n  for idx, elt in ipairs(l) do\n    if elt > max_elt then\n      max_elt,\
    \ max_idx = elt, idx\n    end\n  end\n  return max_elt\nend", "  local ret = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > ret then\n      ret = l[i]\n    end\n  end\n\
    \  return ret\nend", "    local max_value = nil\n    for _, value in ipairs(l)\
    \ do\n        if max_value == nil then\n            max_value = value\n      \
    \  else\n            if value >= max_value then\n                max_value = value\n\
    \            end\n        end\n    end\n    return max_value\nend", "  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "  local max = l[1]\n  for i=2,#l do if l[i] > max\
    \ then max = l[i] end; end\n  return max\nend", "  if l == nil then\n    return\
    \ nil\n  end", "    local max, min = unpack(l)\n    if max > min then\n      \
    \  local tmp = min\n        min = max\n        max = tmp\n    end\n    return\
    \ max\nend", "  return nil,\n    table.concat(function(t)\n      return max_element(t)\
    \ or t\n    end, l)\nend", "  if l == nil then return nil end\n  local result\
    \ = nil\n  local is_max = true\n  for i = 1, #l do\n    local v = l[i]\n    if\
    \ is_max then\n      if v > result then\n        result = v\n      end\n    else\n\
    \      if v < result then\n        result = v\n      end\n    end\n  end\n  return\
    \ result\nend", "  if #l == 0 then\n    return nil\n  end\n  local largest = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > largest then\n      largest = l[i]\n    end\n\
    \  end\n  return largest\nend", "   local s = nil\n   local max_value = nil\n\
    \   local i = 1\n   local j = 1\n   while i <= #l do\n      if type(l[i]) == \"\
    number\" then\n         if max_value == nil or l[i] > max_value then\n       \
    \     max_value, s = l[i], s\n         end\n      else\n         if max_value\
    \ == nil or type(l[i]) == \"string\" then\n            max_value, s = l[i], s\n\
    \         else\n            max_value, s = max_element(l[i]), s\n         end\n\
    \      end\n      if i == #l then break end\n      i = i + 1\n   end\n   if max_value\
    \ ~= nil then\n      return max_value\n   else\n      return s\n   end\nend",
  "    local result = nil\n    for _, v in ipairs(l) do\n        if v > result then\n\
    \            result = v\n        end\n    end\n    return result\nend", "  local\
    \ m = nil\n  for i = 1, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend", "  if #l == 0 then\n    error('list is empty')\n  end\n\
    \  if #l == 1 then\n    return l[1]\n  end\n  local max_value = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > max_value then\n      max_value = l[i]\n    end\n\
    \  end\n  return max_value\nend", "  if type(l) ~= 'table' then return {} end\n\
    \  local m = math.max\n  local max = {}\n  for k, v in pairs(l) do\n    local\
    \ v = m(v,k)\n    if v > max[k] then max[k] = v end\n  end\n  return max\nend",
  "  return next(l, math.nan)\nend", "    local maximum = nil\n    for _, v in ipairs(l)\
    \ do\n        if maximum == nil then\n            maximum = v\n        elseif\
    \ v > maximum then\n            maximum = v\n        end\n    end\n    return\
    \ maximum\nend", "    local max = l[1]\n    for _, v in ipairs(l) do\n       \
    \ if v > max then max = v end\n    end\n    return max\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m\
    \ then\n      m = l[i]\n    end\n  end\n  return m\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local max = nil\n  local max_i = nil\n  for i = 1, #l\
    \ do\n    if max ~= nil then\n      if l[i] > max then\n        max = l[i]\n \
    \       max_i = i\n      end\n    else\n      max = l[i]\n      max_i = i\n  \
    \  end\n  end\n  return max_i, max\nend", "  if l==nil then return nil end\n \
    \ local _, i, max = unpack(l)\n  for i = #l - 1, 1, -1 do\n    if l[i]>max then\
    \ max = l[i] end\n  end\n  return max\nend", "  local m = nil\n  for i = 1, #l\
    \ do\n    if m and m < l[i] then m = l[i] end\n  end\n  return m\nend", "  if\
    \ #l == 0 then return nil end\n  local v\n  v, l = l[1], l[1] - 1\n  while l >\
    \ 0 do\n    v, l = v, l - 1\n  end\n  return v\nend", "  local function largest(v,\
    \ e)\n    if e < #l then return largest(v, e + 1) end\n    if v < l[#l] then return\
    \ v end\n    return largest(l[#l], e)\n  end\n  return largest(0, #l)\nend", " \
    \ local lmax = 0\n  local i = 1\n  for k, v in ipairs(l) do\n    if v > lmax then\n\
    \      lmax = v\n    end\n    i = i + 1\n  end\n  return lmax\nend", "    if l\
    \ == nil then return nil end\n    local result = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > result then\n            result = l[i]\n        end\n    end\n\
    \    return result\nend", "  if l == nil then return nil end\n  local n = #l\n\
    \  if n == 1 then\n    return l[1]\n  end\n  local max_element = l[1]\n  for i\
    \ = 2, n do\n    if max_element > l[i] then\n      max_element = l[i]\n    end\n\
    \  end\n  return max_element\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  if l[1] < l[2] then\n    return l[1]\n  else\n    return l[2]\n  end\nend", " \
    \ if l == nil then return nil end\n  local e = 0\n  local m\n  local i = 1\n \
    \ while i <= #l do\n    local e = l[i]\n    if e > m then\n      m = e\n    end\n\
    \    i = i + 1\n  end\n  if m ~= nil then return m else return nil end\nend",
  "  assert(type(l) == 'table')\n  local mx, mxv = (math.max(1, l[1]), l[1])\n  for\
    \ i = 2, #l do\n    local m = math.max(mx, l[i])\n    if mxv < m then\n      mxv\
    \ = m\n      mx  = m\n    end\n  end\n  return mx\nend", "  local max_element\
    \ = nil\n  for _, v in ipairs(l) do\n    if max_element == nil or v > max_element\
    \ then\n      max_element, max_value = v, v\n    end\n  end\n  return max_element\n\
    end", '    local max_elem = nil', "  if l == nil then\n    return nil\n  end\n\
    \  local i, max_val = 1, 0\n  for i, v in ipairs(l) do\n    if v > max_val then\n\
    \      max_val = v\n    end\n  end\n  return max_val\nend", "  local max_v = l[0]\n\
    \  for _, v in ipairs(l) do\n    if max_v < v then\n      max_v = v\n    end\n\
    \  end\n  return max_v\nend", "  local max = nil\n  local i = 1\n  for elem in\
    \ l do\n    if max < elem then\n      max = elem\n    end\n    i = i + 1\n  end\n\
    \  return max\nend", "  return unpack(select(l, math.max(unpack(l):map(function(e)\
    \ return e end))))\nend", '    local m', "  local max_e\n  local max_i = nil\n\
    \  local max_a = nil\n  for i, a in ipairs(l) do\n    if max_i == nil then\n \
    \     max_e = a\n      max_i = i\n      max_a = a\n    else\n      if a > max_e\
    \ then\n        max_e = a\n        max_i = i\n        max_a = a\n      end\n \
    \   end\n  end\n  return max_e, max_i, max_a\nend", "  local m = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n  return m\nend", "  local\
    \ max = nil\n  local i = 1\n  for k in pairs(l) do max = k and max or max or i\
    \ end -- Python 3\n  return max\nend", "  if #l == 0 then return nil end\n  if\
    \ #l == 1 then return l[1] end\n  local i, max_val = unpack(l, 1, true)\n  for\
    \ i = 2, #l do\n    if l[i] > max_val then\n      max_val = l[i]\n    end\n  end\n\
    \  return max_val\nend", "  local max_elem, max_idx = 0, -1\n  for idx, elem in\
    \ ipairs(l) do\n    if elem > max_elem then\n      max_elem = elem\n      max_idx\
    \ = idx\n    end\n  end\n  return max_elem, max_idx\nend", '  local max_element
    = nil', "  return unpack(select('#', l, #l))\nend", "  if #l == 0 then\n    error(('argument\
    \ \"l\" must have at least one element'))\n  end\n  local max = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return\
    \ max\nend", "  local m = -1\n  for _, v in ipairs(l) do\n    local new_m\n  \
    \  if m < 0 then\n      m = v\n      new_m = v\n    else\n      new_m = m > v\
    \ ? m : v\n    end\n  end\n  return m\nend", "  local max = nil\n  local n = 1\n\
    \  for _, v in pairs(l) do\n    if max and v > max then\n      max = v\n    else\n\
    \      n = n + 1\n    end\n  end\n  return max or l[n]\nend", "  if l[1] > l[2]\
    \ then\n    return l[1]\n  else\n    return l[2]\n  end\nend", '  local m = nil',
  "  if l[1] ~= nil then\n    return l[1]\n  elseif l[2] ~= nil then\n    return l[2]\n\
    \  else\n    return nil\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local elem = l[1]\n  local rest = table.remove(l, 1)\n  if rest ~= nil then\n\
    \    local max = max_element(rest)\n    if max ~= nil then\n      if elem > max\
    \ then\n        return elem\n      else\n        return max\n      end\n    end\n\
    \  end\n  return elem\nend", "  local m = {}\n  for _, x in ipairs(l) do m[x]\
    \ = x end\n  local max\n  for k, y in ipairs(l) do\n    if not max or max < y\
    \ then\n      max = y\n      m[k] = y\n    end\n  end\n  return max\nend", " \
    \ local max, i = nil, 0\n  for i, v in ipairs(l) do\n    if v > max then\n   \
    \   max = v\n    end\n  end\n  return max\nend", "  if #l == 0 then return nil\
    \ end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max\
    \ = l[i]\n    end\n  end\n  return max\nend", "  local m\n  for _, v in ipairs(l)\
    \ do\n    if m == nil then\n      m = v\n      continue\n    end\n    if m > v\
    \ then\n      m = v\n    end\n  end\n  return m\nend", "   local max = nil\n \
    \  for _, v in ipairs(l) do\n      if max and v > max then\n         max = v\n\
    \      else\n         max = v\n      end\n   end\n   return max\nend", "  local\
    \ t = {}\n  local max = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n\
    \  for k, v in pairs(t) do\n    if v == true then\n      table.insert(max, k)\n\
    \    end\n  end\n  if #max > 0 then\n    return table.unpack(max)[1]\n  else\n\
    \    return nil\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ max_value = l[1]\n  for i = 2, #l do\n    if max_value < l[i] then\n      max_value\
    \ = l[i]\n    end\n  end\n  return max_value\nend", "  local _max = nil\n  local\
    \ _max_idx = nil\n  for i = 1, #l do\n    if l[i] > _max then\n      _max = l[i]\n\
    \      _max_idx = i\n    end\n  end\n  return _max, _max_idx\nend", "  if #l ==\
    \ 0 then\n    return nil\n  else\n    local max_value = l[1]\n    for i = 2, #l\
    \ do\n      if l[i] > max_value then\n        max_value = l[i]\n      end\n  \
    \  end\n    return max_value\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then max = l[i] end\n\
    \  end\n  return max\nend", "  if l == nil then return nil end\n  if #l == 0 then\
    \ return nil end\n  local max = l[1]\n  for i = 2, #l do\n    if max < l[i] then\
    \ max = l[i] end\n  end\n  return max\nend", "  if l[1] == nil then\n    return\
    \ nil\n  end\n  if l[1] == #l then\n    return l[1]\n  end\n  if l[2] == nil then\n\
    \    return max_element(l[1])\n  end\n  if l[2] == #l then\n    return max_element(l[1],\
    \ l[2])\n  end\n  return l[2] > l[1] and max_element(l[1], l[2]) or max_element(l[2],\
    \ l[1])\nend", "    local max_value = 0\n    for _, v in ipairs(l) do\n      \
    \  if v > max_value then\n            max_value = v\n        end\n    end\n  \
    \  return max_value\nend", "   if l == nil then\n      return nil\n   end\n  \
    \ local max_element = l[1]\n   for _, v in pairs(l) do\n      if v > max_element\
    \ then\n         max_element = v\n      end\n   end\n   return max_element\nend",
  "  if l==nil then return nil end\n  local max_value = l[1]\n  for i=2, #l do\n \
    \   if l[i]>max_value then\n      max_value = l[i]\n    end\n  end\n  return max_value\n\
    end", "  local m = nil\n  for i = 1, #l do\n    if m and l[i] > m then return\
    \ m end\n    m = l[i]\n  end\n  return m\nend", "    local max_element\n    if\
    \ l ~= nil then\n        if type(l) == \"table\" then\n            max_element\
    \ = l[1]\n            for _, v in ipairs(l) do\n                max_element =\
    \ v if (v > max_element) then (max_element = v) end\n            end\n       \
    \ else\n            max_element = l\n        end\n    end\n    return max_element\n\
    end", "  local max = nil\n  for _, e in ipairs(l) do\n    if max and max > e then\
    \ return end\n    max = e\n  end\n  return max\nend", "   if l == nil then return\
    \ nil end\n   if #l == 1 then\n      return l[1]\n   else\n      local m = math.nan\n\
    \      for _, v in pairs(l) do\n         if m < v then m = v end\n      end\n\
    \      return m\n   end\nend", "  if l == nil then\n    return nil\n  end\n  local\
    \ max = tonumber(l[1])\n  for i = 2, #l do\n    local candidate = tonumber(l[i])\n\
    \    if candidate > max then\n      max = candidate\n    end\n  end\n  return\
    \ max\nend", "  if l == nil then return nil end\n  if #l == 0 then return nil\
    \ end\n  local max\n  for _, v in ipairs(l) do\n    if max and max > v then max\
    \ = v end\n  end\n  return max\nend", "  local max = 0\n  local max_idx = 0\n\
    \  local i = 1\n  while i <= #l do\n    if l[i] > max then\n      max = l[i]\n\
    \      max_idx = i\n    end\n    i = i + 1\n  end\n  return max_idx\nend", " \
    \ if #l == 0 then return nil end\n  local max_v = l[1]\n  for i = 2, #l do\n \
    \   local v = l[i]\n    if v > max_v then\n      max_v = v\n    end\n  end\n \
    \ return max_v\nend", "    local max_value, max_idx = nil, -1\n    for idx, value\
    \ in ipairs(l) do\n        if idx ~= max_idx or (max_value ~= nil and value >\
    \ max_value) then\n            max_value, max_idx = value, idx\n        end\n\
    \    end\n    return max_value\nend", "  local m = 0\n  for i = 1, #l do\n   \
    \ if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend", "  return\
    \ l[1] or max_element(unpack(l, 1, 2))\nend", "  if l==nil then\n    return nil\n\
    \  end\n  if #l == 1 then\n    return l[1]\n  end\n  local m = 0\n  local v\n\
    \  for i, v in ipairs(l) do\n    if v > m then\n      m = v\n    end\n  end\n\
    \  return m\nend", "    if l[1] < l[2] then\n        local m, l = l[1], l\n  \
    \      for i = 2, #l do\n            if l[i] > m then\n                m = l[i]\n\
    \            end\n        end\n        return m\n    else\n        local m, l\
    \ = l[2], l\n        for i = 2, #l do\n            if l[i] < m then\n        \
    \        m = l[i]\n            end\n        end\n        return m\n    end\nend",
  "   local max\n   if next(l) == nil then return nil end\n   for i = 2, #l do\n \
    \     if l[i] < max then\n         max = l[i]\n      end\n   end\n   return max\n\
    end", "  local max = l[1]\n  for _, v in pairs(l) do\n    if v > max then max\
    \ = v end\n  end\n  return max\nend", "  local m = nil\n  local n = 0\n  for _,\
    \ elt in ipairs(l) do\n    if m == nil or m < elt then\n      m = elt\n      n\
    \ = 1\n    end\n  end\n  return m\nend", "  local max_elem = nil\n  for _, v in\
    \ ipairs(l) do\n    if v > max_elem then\n      max_elem = v\n    end\n  end\n\
    \  return max_elem\nend", "  return table.maxi(unpack(l))\nend", "  if type(l)\
    \ == 'table' then\n    local largest = -math.huge\n    for _, v in pairs(l) do\n\
    \      if v > largest then\n        largest = v\n      end\n    end\n    return\
    \ largest\n  else\n    return l\n  end\nend", "  local max_so_far = nil\n  for\
    \ i, x in ipairs(l) do\n    if max_so_far == nil then\n      max_so_far = x\n\
    \    else\n      if x > max_so_far then\n        max_so_far = x\n      end\n \
    \   end\n  end\n  return max_so_far\nend", "  local max = math.max(l)\n  for i,\
    \ x in ipairs(l) do\n    if x ~= max then\n      return x\n    end\n  end\n  return\
    \ max\nend\n</code>\n<|/ a tags=lua |>\n<| a |>\nUsing tail recursion:\n<code>",
  "  local max_value = l[1]\n  for _, v in ipairs(l) do\n    if max_value < v then\n\
    \      max_value = v\n    end\n  end\n  return max_value\nend", "  local i = 1\n\
    \  local j = #l + 1\n  local max_elem, max_elem_index\n  local max_elem_size =\
    \ nil", "   local m = l[1]\n   for i = 2, #l do\n      local v = l[i]\n      if\
    \ v > m then\n\t m = v\n      end\n   end\n   return m\nend", "  local max_value\
    \ = nil\n  for _, value in ipairs(l) do\n    if max_value is nil then\n      max_value\
    \ = value\n    else\n      if value > max_value then\n        max_value = value\n\
    \      end\n    end\n  end\n  return max_value\nend", "  if #l == 0 then\n   \
    \ return nil\n  else\n    local max = l[1]\n    for i = 2, #l do\n      if l[i]\
    \ > max then\n        max = l[i]\n      end\n    end\n    return max\n  end\n\
    end", "  if l == nil then\n    return nil\n  end\n  if #l == 0 then\n    return\
    \ nil\n  end", "    local max_value = 0\n    local max_index = 0\n    for i, v\
    \ in ipairs(l) do\n        if v > max_value then\n            max_value = v\n\
    \            max_index = i\n        end\n    end\n    return max_value\nend",
  "  local max = 0 -- We start from the highest number possible\n  for _, v in ipairs(l)\
    \ do\n    if v > max then max = v end\n  end\n  return max\nend", "  local function\
    \ helper(l, result)\n    if #l == 0 then\n      return result\n    end\n    local\
    \ elem = l[1]\n    local rest = l[2:]\n    return helper(rest, result > elem and\
    \ result or elem)\n  end\n  return helper(l, nil)\nend", "  local largest = nil\n\
    \  for _, v in ipairs(l) do\n    if not largest or v <= largest then\n      largest\
    \ = v\n    end\n  end\n  return largest\nend", "  local max_value, max_idx = nil,\
    \ -1\n  local i = 1\n  for k, v in ipairs(l) do\n    if v > max_value then\n \
    \     max_value, max_idx = v, i\n    end\n    i = i + 1\n  end\n  return max_value\n\
    end", "  if l == nil then return nil end\n  local largest = nil\n  for i = 1,\
    \ #l do\n    if largest == nil or l[i] > largest then\n      largest = l[i]\n\
    \    end\n  end\n  return largest\nend", '  local max = l[1]', "    local m, e\
    \ = l[1], 0\n    for i, v in ipairs(l) do\n        if v > m then m, e = v, i end\n\
    \    end\n    return m, e\nend", "  return assert(table.remove(l,\n    function(n)\n\
    \      if n < math.min(l) or math.max(l) < n then\n        return nil\n      end\n\
    \      local m = math.max(l)\n      while #l > 0 and l[#l] == m do\n        l[#l]\
    \ = nil\n      end\n      -- if m > n then\n      --   -- l = {n, math.max(l)},\
    \ m = n\n      --   -- do nothing\n      -- elseif m == n then\n      --   --\
    \ l = {math.min(l), n}\n      --   -- do nothing\n      -- else\n      --   --\
    \ l = {math.min(l), math.min(l)}, m = n\n      --   -- do nothing\n      -- end\n\
    \      --return n\n      return m\n    end\n  ))\nend", "  assert(type(l) == \"\
    table\")\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n   \
    \   max = l[i]\n    end\n  end\n  return max\nend", "    local s = #l\n    if\
    \ s == 0 then\n        return 0\n    end\n    local i = 0\n    local v = l[1]\n\
    \    for i = 1, s do\n        if v > l[i] then\n            v = l[i]\n       \
    \ end\n    end\n    return v\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if there are negative values in the list, in which case you need to replace\
    \ `if v > l[i] then` with `if v > -math.abs(l[i]) then`\n<|/ c |>\n<| c |>\nThis\
    \ isn't correct. The max element is the highest value in the list.\n<|/ c |>\n\
    <| c |>\n, do you have a better answer than \"this is wrong\"?\n<|/ c |>\n<| c\
    \ |>\nFor a slight speedup, one can use `local v, _i  = l[1], 1; for i=2,#l do\
    \ v=v>l[i] and l[i] or v; end`\n<|/ c |>\n<| c |>\nThe first `if v > l[i]` does\
    \ not make sense, as you compare a value to an element of the list again. I guess\
    \ you mean `if v > l[i] and l[i] or v`\n<|/ c |>\n<| a tags=algorithm,lua,lua-table,max\
    \ dscore=5 |>\n<code>", "  if l==nil then return nil end\n  local m = nil\n  for\
    \ i=1,#l do\n    if m and m[#m] > l[i] then m = nil end\n    if m == nil then\n\
    \      if l[i] > m then m = i end\n    end\n  end\n  return m\nend", "    local\
    \ _, max_element = l[1], l[1]\n    for _, v in pairs(l) do\n        if v > max_element\
    \ then\n            max_element = v\n        end\n    end\n    return max_element\n\
    end\n</code>\n<|/ a |>\n<| c |>\nNice. Nice.\n<|/ c |>\n<| c |>\nGreat answer!\
    \ This is why I hate SO.\n<|/ c |>\n<| c |>\nI really liked this answer. It's\
    \ the first time I see someone actually using unpack like that. Very nice.\n<|/\
    \ c |>\n<| a tags=lua |>\nYou can use a combination of table.insert and table.find.\
    \ \nThe table.insert function inserts elements into an existing table by inserting\
    \ them in the correct position. If an element with a specific value is found,\
    \ it is inserted in the right position.\n<code>", "  local a = {}\n  for i, el\
    \ in pairs(l) do\n    if el > a[i] then\n      a[i]\n    end\n  end\n  return\
    \ a[i]\nend", "  if #l == 0 then return nil end\n  if l[1] > 0 then return l[1]\
    \ end\n  local max_value = l[1]\n  local i = 1\n  while i < #l do\n    if l[i]\
    \ > max_value then\n      max_value = l[i]\n    end\n    i = i + 1\n  end\n  return\
    \ max_value\nend", "  if l==nil then return nil end\n  local max = l[1]\n  for\
    \ i=2, #l do\n    if l[i]>max then max = l[i] end\n  end\n  return max\nend",
  "  local max = 0\n  for _, e in ipairs(l) do\n    if e > max then\n      max = e\n\
    \    end\n  end\n  return max\nend", "    local m = l[1]\n    for i = 2, #l do\n\
    \        if m > l[i] then m = l[i] end\n    end\n    return m\nend", "    local\
    \ max_value = nil\n    for _, v in ipairs(l) do\n        if max_value == nil or\
    \ (v > max_value) then\n            max_value = v\n        end\n    end\n    return\
    \ max_value\nend", '    local max = nil', "  if #l == 0 then\n    return nil\n\
    \  end\n  local largest = nil\n  for i = #l, 1, -1 do\n    if l[i] > largest then\n\
    \      largest = l[i]\n    end\n  end\n  return largest\nend", "    local m =\
    \ nil\n    for _, v in ipairs(l) do\n        if m == nil or v ~= m then\n    \
    \        m = v\n        end\n    end\n    return m\nend", "  if l == nil then\n\
    \    return nil\n  end\n  local max_val = nil\n  for i, v in ipairs(l) do\n  \
    \  if max_val == nil or v > max_val then\n      max_val = v\n    end\n  end\n\
    \  return max_val\nend", "  if l == nil then return nil end\n  local i = 1\n \
    \ local j = #l\n  while i < j do\n    if l[i] > l[j] then\n      local t = l[i]\n\
    \      l[i] = l[j]\n      l[j] = t\n      i = i + 1\n      j = j - 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  return l[i]\nend", "  if l == nil then return\
    \ nil end\n  if type(l) ~= 'table' then return l end\n  local max = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] > max then max = l[i] end\n  end\n  return max\nend",
  "  if l==nil then return nil end\n  if #l <= 1 then\n    return l[1]\n  end\n  local\
    \ m = l[1]\n  for i = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n  return\
    \ m\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
