name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if N < 0 then\n        return 'Error'\n    end\n    if N == 1 then\n\
    \        return '0'\n    end", "    local sum = 0\n    if N > 0 then\n       \
    \ -- Sum of digits\n        local sum = 1\n        for i = 1, N do\n         \
    \   sum = sum * 2\n        end\n        -- Append binary representation\n    \
    \    sum = sum.to_s(2)\n        -- Prefix '0' if necessary\n        if sum > 1\
    \ then\n            sum = string.format(\"%0d\", sum)\n        end\n        return\
    \ sum\n    else\n        return nil\n    end\nend", "    local digits = 2\n  \
    \  local result = 0\n    local pos = 0\n    while digits < N do\n        local\
    \ digit = math.floor(math.pow(10.0, digits) / math.pow(10.0, digits))\n      \
    \  -- print(\"digit: \", digit)\n        -- print(\"pos: \", pos)\n        --\
    \ print(\"result: \", result)\n        result = result + digit * math.pow(10.0,\
    \ digits)\n        pos = pos + 1\n        digits = digits + 1\n    end\n    --\
    \ print(\"result: \", result)\n    -- print(\"digits: \", digits)\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.0>\n# Test case\nassert (solve(100)\
    \ == \"1\")\nassert (solve(150) == \"110\")\nassert (solve(147) == \"1100\")\n\
    </cell>\n<text>\nProblem 7", "    if N == 0 then\n        return '0'\n    end\n\
    \    \n    if N == 1 then\n        return '1'\n    end\n    \n    local result\
    \ = solve(N/2)\n    local remainder = math.abs(N % 2)\n    local leftDigit = math.floor(remainder)\n\
    \    if leftDigit > 0 then\n        result = result .. '0'..leftDigit\n    else\n\
    \        result = result .. '1'..leftDigit\n    end\n    \n    return result ..\
    \ result\nend", "  if N == 1 then return '0'\n  else return solve(N div 10) +\
    \ tostring(N % 10) end\nend", "  local s = \"\";\n  repeat\n    N = floor((N %\
    \ 2 + N / 2) / 2);\n    s = s + tostring(N);\n  until N == 0;\n  return s;\nend",
  "\tN == N and return \"1\"\n\treturn math.floor(math.log(N, 2)) + 1\nend", "  local\
    \ str = ''\n  local carry = 0\n  local remain = N\n  while remain > 0 do\n   \
    \ local digit = math.floor(remain)\n    remain = remain - digit\n    if remain\
    \ > 1 then\n      digit = digit - 1\n      carry = 1\n    else\n      carry =\
    \ 0\n    end\n    str = str .. tostring(digit) .. '0'\n  end\n  if carry == 1\
    \ then\n    str = str .. '1'\n  end\n  return str\nend", "    local S = bin(getbit(N,N-1))\n\
    \    return S..getbit(N,N)\nend", "    local s = ''\n    local p = 1\n    while\
    \ N > p do\n        local q = math.floor((N / p) * (2))\n        s = s .. (p >\
    \ 1 and q .. '0' or q)\n        N = N - (p * q)\n        p = math.floor(p * 2)\n\
    \    end\n    return s\nend", "  -- base case\n  if N == 1 then\n    return '1'\n\
    \  end", "  N = tonumber(N)\n  if N == 0 then\n    return \"0\"\n  end", "   \
    \ local result = \"\"\n    local carry = 0\n    \n    while N ~= 0 do\n      \
    \  local digit = N % 10\n        \n        if digit < 2 then\n            carry\
    \ = digit + carry\n        else\n            carry = digit - 2 * carry\n     \
    \   end\n        \n        N = N / 10\n        \n        if carry > 0 then\n \
    \           digit = carry + 10\n            carry = digit % 10\n        else\n\
    \            digit = carry + 0\n            carry = 0\n        end\n        \n\
    \        result = digit .. result\n    end\n    \n    if carry > 0 then\n    \
    \    result = carry .. result\n    end\n    \n    return result .. \"0\"\nend",
  "  return N == 0 ? '0' : solve(N div 2) + solve(N mod 2)\nend", "    local N1 =\
    \ math.floor(N / 2)\n    local N2 = N - N1\n    local N3 = N2 * 2\n    local N4\
    \ = math.floor(N3)\n    local N5 = N4 / 2\n    local N6 = N4 - N5\n    local N7\
    \ = N6 * 4\n    local N8 = math.floor(N7)\n    local N9 = N8 * 8\n    local N10\
    \ = N9 * 16\n    local N11 = math.floor(N10)\n    local N12 = N11 * 32\n    local\
    \ N13 = math.floor(N12)\n    local N14 = N13 * 64\n    local N15 = N14 * 128\n\
    \    local N16 = math.floor(N15)", "  if N < 0 then\n    return \"-1\"\n  elseif\
    \ N > 9999 then\n    return \"-1\"\n  end\n  local result = \"\"\n  while N ~=\
    \ 0 do\n    if N mod 2 == 1 then\n      result = result .. \"0\"\n    else\n \
    \     result = result .. \"1\"\n    end\n    N = math.floor(N / 2)\n  end\n  return\
    \ result\nend", "    local ret = ''\n    local n = N % 2\n    while n ~= 0 do\n\
    \        ret = string.sub(ret, #ret, #ret-1)..(n and '1' or '0')\n        n =\
    \ N / 2\n    end\n    return ret\nend", "    local binary = string.format('0',\
    \ N)\n    local sum = 0\n    for i = 1, #binary do\n        sum = sum + tonumber(binary:sub(i,\
    \ i))\n    end\n    binary = string.format('%0', sum)\n    return binary\nend",
  "  -- Base case\n  if N == 0 then\n    return \"0\"\n  end", "  if N <= 0 then\n\
    \    return nil\n  else\n    local result = ''\n    local count = 0\n    local\
    \ carry = 1\n    for i = 1, N do\n      count = count + 1\n      if count == 1\
    \ then\n        result = result .. '1' .. i\n      else\n        if carry > 0\
    \ then\n          result = result .. '0' .. carry\n          carry = 0\n     \
    \   else\n          result = result .. '0' .. i\n        end\n      end\n    end\n\
    \    return result\n  end\nend", "  return N % 2 == 0 and N ~= 0 and \"1\" or\
    \ solve(N / 2)\nend", "   if N < 0 then return nil end\n   local binary = '1';\n\
    \   if N == 0 then return '0' end\n   while N do\n      N = math.floor(N/2);\n\
    \      binary = binary + tostring(N);\n   end\n   return binary;\nend", "    if\
    \ N == 0 then\n        return '0'\n    end\n    if N == 1 or N == 0 then\n   \
    \     return '1'\n    end\n    local num_1 = 0\n    local num_2 = 0\n    local\
    \ num_3 = 0\n    local num_4 = 0\n    local num_5 = 0\n    local num_6 = 0\n \
    \   local num_7 = 0\n    local num_8 = 0\n    local num_9 = 0\n    local num_10\
    \ = 0\n    local num_11 = 0\n    local num_12 = 0\n    local num_13 = 0\n    local\
    \ num_14 = 0\n    local num_15 = 0\n    local num_16 = 0\n    local num_17 = 0\n\
    \    local num_18 = 0\n    local num_19 = 0\n    local num_20 = 0\n    local num_21\
    \ = 0\n    local num_22 = 0\n    local num_23 = 0\n    local num_24 = 0\n    local\
    \ num_25 = 0\n    local num_26 = 0\n    local num_27 = 0\n    local num_28 = 0\n\
    \    local num_29 = 0\n    local num_30 = 0\n    local num_31 = 0\n    local num_32\
    \ = 0\n    local num_33 = 0\n    local num_34 = 0\n    local num_35 = 0\n    local\
    \ num_36 = 0\n    local num_37 = 0\n    local num_38 = 0\n    local num_39 = 0\n\
    \    local num_40 = 0\n    local num_41 = 0\n    local num_42 = 0\n    local num_43\
    \ = 0\n    local num_44 = 0\n    local num_45 = 0\n    local num_46 = 0\n    local\
    \ num_47 = 0\n    local num_48 = 0\n    local num_49 = 0\n    local num_50 = 0\n\
    \    local num_51 = 0\n    local num_52 = 0\n    local num_53 = 0\n    local num_54\
    \ = 0\n    local num_55 = 0\n    local num_56 = 0\n    local num_57 = 0\n    local\
    \ num_58 = 0\n    local num_59 = 0\n    local num_60 = 0\n    local num_61 = 0\n\
    \    local num_62 = 0\n    local num_63 = 0\n    local num_64 = 0\n    local num_65\
    \ = 0\n    local num_66 = 0\n    local num_67 = 0\n    local num_68 = 0\n    local\
    \ num_69 = 0\n    local num_70 = 0\n    local num_71 = 0\n    local num_72 = 0\n\
    \    local num_73 = 0\n    local num_74 = 0\n    local num_75 = 0\n    local num_76\
    \ = 0\n    local num_77 = 0\n    local num_78 = 0\n    local num_79 = 0\n    local\
    \ num_80 = 0\n    local num_81 = 0\n    ", "  if N == 0 then\n    return '0'\n\
    \  end\n  if N == 1 then\n    return '1'\n  end\n  local count = 0\n  local sum\
    \ = ''\n  while N ~= 0 do\n    count = count + 1\n    local tmp = N % 2\n    sum\
    \ = sum .. '1' .. tmp\n    N = N // 2\n  end\n  return count > 0 and sum or '0'\n\
    end", "    local s = \"\"\n    while N > 0 do\n        s, N = tostring(N):sub(2,\
    \ -2)..tostring(N):sub(1, -1), tonumber(s)\n    end\n    return s\nend\n</cell>\n\
    <text>\nProblem 8. Find the sum of all numbers between 0 and 1 that are not divisible\
    \ by 3.", "  local s = \"\"\n  for i = 1, N / 2 do\n    s = s .. \"1\"\n  end\n\
    \  return s\nend\n</cell>\n<cell>\n%qsub -s -e \"solve()\"\n</cell>\n<text>\n\
    Binary Search - Babylonian Algorithm\nA search problem is a problem of finding\
    \ a target value in a sorted sequence of values.", "  N = tonumber(N)\n  return\
    \ tostring(N):reverse()\nend", "    local s = ''\n    for i = 1,N do\n       \
    \ if N >= 1000 then\n            N = N - 1000\n            s = s .. '1'\n    \
    \    elseif N >= 100 then\n            N = N - 100\n            s = s .. '0'\n\
    \        elseif N >= 10 then\n            N = N - 10\n            s = s .. '0'\n\
    \        end\n    end\n    return s\nend\nprint(solve(151))\nprint(solve(10000))\n\
    print(solve(20000000000))\nprint(solve(80000000000000))\nprint(solve(999999999999999999999999999999999))\n\
    print(solve(111111111111111111111111111111111111111111111))\n</cell>\n<text>\n\
    (9) Binary Search Algorithm\nWrite a function that takes in two numbers, low and\
    \ high. Your function should return True if low is smaller than high, otherwise\
    \ return False.", "    if N < 0 then\n        error('The given number must be\
    \ positive')\n    end\n    local result = ''\n    local i = 1\n    while i <=\
    \ N do\n        if N > i then\n            local t = N % i\n            if t >\
    \ 0 then\n                i = i + 1\n            end\n            local t = i\
    \ / 2\n            if t > 0 then\n                i = i + 1\n            end\n\
    \            local t = N / i\n            if t > 0 then\n                i = i\
    \ + 1\n            end\n        end\n        result = result .. '1' if i < N then\
    \ result = result .. '0' end\n        i = i + 1\n    end\n    return result\n\
    end\n</cell>\n<cell>", "\tlocal s = tostring(N)\n\tN = tonumber(s)\n\tif N < 0\
    \ or N > 10000 then\n\t\terror(\"N is out of range\")\n\tend\n\tlocal result\n\
    \tif N >= 10 then\n\t\tresult = \"1\" + tostring(N % 10)\n\t\tN = math.floor(N\
    \ / 10)\n\tend\n\tlocal count = 1\n\twhile N > 0 do\n\t\tif N >= 10 then\n\t\t\
    \tresult = result + tostring(N % 10) + tostring(count)\n\t\t\tN = math.floor(N\
    \ / 10)\n\t\tend\n\t\tcount = count + 1\n\tend\n\treturn result\nend", "    local\
    \ S={}\n    local i\n    local temp\n    \n    -- first loop to count the digit\n\
    \    for i=1,N do\n        local digit=0\n        \n        temp = math.floor(\
    \ N / math.pow(2, i) )\n        if temp < 0 then break end\n        \n       \
    \ while temp >= 1 do\n            digit = digit + 1\n            temp = temp -\
    \ math.pow(2,i)\n        end\n        \n        if N >= math.pow(2, i-1) then\n\
    \            S[#S+1] = S[i] .. digit\n        end\n    end\n    \n    -- second\
    \ loop to build the solution\n    local answer = ''\n    \n    for i = 1, #S do\n\
    \        answer = answer .. S[#S+1]\n    end\n    \n    return answer\nend", " \
    \   local ans = ''\n    for i = 1, N do\n        ans = ans .. string.rep(string.format('%d',\
    \ math.floor(i/2)), math.floor((N % i) / 2))\n    end\n    return ans\nend", " \
    \  -- the binary number is represented by a string of n zeroes and one one\n \
    \  local str = ''\n   -- a temporary variable for counting the digits in the string\n\
    \   local t = 0\n   -- a temporary variable for counting the total number of digits\n\
    \   local t = 0", "  local bin = nil\n  local sum = 0\n  for i = 1, math.floor(math.log(N,\
    \ 2)) do\n    sum = sum + tostring(N % 2)\n    N = N // 2\n  end\n  if N == 0\
    \ then\n    sum = tostring(N)\n  end\n  return bin..tostring(sum)\nend", "   \
    \ if not N or N < 0 then\n        return '0'\n    end\n    if N == 1 then\n  \
    \      return '1'\n    end\n    local sum = ''\n    local num = 0\n    for i =\
    \ 1, N do\n        num = math.floor(math.pow(2, i * 1.0 / 2) / math.pow(2, (i\
    \ - 1) * 1.0 / 2))\n        if sum ~= '' then\n            sum = sum .. '0'\n\
    \        end\n        sum = sum .. num\n    end\n    return sum\nend", "    local\
    \ s = N % 2\n    local ans = ''\n    while N > 1 do\n        N, d = math.modf(N)\n\
    \        ans = string.format('%s%s', ans, tostring(s))\n        s, d = d, s +\
    \ d\n    end\n    return ans .. tostring(s)\nend", "  -- Initialize binary.\n\
    \  local binary = \"\"\n  -- Initialize sum.\n  local sum = 0\n  -- Initialize\
    \ number of digits in binary string.\n  local num_digits = 1\n  -- Iterate through\
    \ N, incrementing sum as we go.\n  for i = 1, N do\n    -- Multiply i by 10 to\
    \ get the digit in binary form.\n    local digit = math.floor(i / 10)\n    --\
    \ Convert the digit to string and append it to binary.\n    binary = binary ..\
    \ tostring(digit)\n    -- Increment the sum.\n    sum = sum + digit\n    -- Decrement\
    \ the number of digits in the binary string.\n    num_digits = num_digits - 1\n\
    \  end\n  -- Return the binary string and sum of digits.\n  return binary, sum,\
    \ num_digits\nend", "  -- base case\n  if N == 1 then\n    return '0'\n  end",
  "   N = N or 0\n   local res = ''\n   for i = 1,math.floor(log2(N)) do\n      res\
    \ = res + bit.lshift(N % 2,1)\n      N = N / 2\n   end\n   return res\nend", " \
    \ -- Base case.\n  if N == 0 then return \"0\" end\n  -- If the number has no\
    \ digits in binary then just return it\n  if not N then return N end", "  local\
    \ digits = tostring(N) -- Convert to string.\n  local result = \"\"\n  local i\
    \ = 0\n  repeat\n    -- Convert to integer from string.\n    i = tonumber(digits)\n\
    \    -- Add digit to result string.\n    result = result .. tostring(i)\n    --\
    \ Add leading zero if necessary.\n    digits = tostring(i % 2)\n    -- If we have\
    \ more than 1 digit, then go to next digit.\n    -- We need this because the digit\
    \ string will be of length one\n    -- if the number is 0.\n    i = i + 1\n  until\
    \ i == length(digits)\n  return result\nend", "  if N==0 then return '0'\n  else\
    \ if N<0 then return solve(-N) end\n  local Nt = math.floor(N)\n  local Num, Den\
    \ = 0\n  while Nt>0 do\n    Num, Den = Num + math.mod(Nt, 2), Den+1\n    Nt =\
    \ math.floor(math.mod(Nt, 2))\n  end\n  return solve(-Num, Den)\nend", "  if N\
    \ == 1 then\n    return '1'\n  end\n  if N == 0 then\n    return '0'\n  end",
  "    local ret = ''\n    if N == 0 then\n        return ret\n    end\n    if N <=\
    \ 1 then\n        return string.format(\"%b\", N)\n    end\n    local N = math.floor(math.log(n)/math.log(2))\
    \ + 1\n    while N > 0 do\n        if math.fmod(N, 2) == 1 then\n            ret\
    \ = ret .. '1'\n        else\n            ret = ret .. '0'\n        end\n    \
    \    N = math.floor(math.fmod(N, 2)) / 2\n    end\n    return ret\nend", "  N\
    \ = tonumber(N) or error(\"N must be convertable to number\", N)\n  local binary\
    \ = tostring(N)\n  local carry = 0\n  local sum = 0\n  for i = 1, #binary do\n\
    \    local digit = tonumber(binary:sub(i,i))\n    carry = digit+carry\n    if\
    \ carry > 1 then\n      carry = carry % 2\n    else\n      carry = 1\n    end\n\
    \    sum = sum + carry % 2\n  end\n  local res = (tostring(sum), carry > 0 and\
    \ '1' or '0')\n  return res\nend", "    local digits = {}\n    local sum = 0\n\
    \    for i=0,N,1 do\n        digits[i] = tostring(i)\n    end", "  if N == 0 then\n\
    \    return \"0\"\n  end\n  local total = 0\n  local remaining = N\n  repeat\n\
    \    total = total + (N % 2)\n    N = (N - total) / 2\n  until N == 0\n  return\
    \ string.format('%0*d', N, total)\nend\n</cell>\n<text>\nProblem\nA person is\
    \ given a deck of cards representing cards currently drawn from different sources\
    \ (the deck may also be empty) and wants to determine the highest amount of cards\
    \ left in the deck.", "    local N1 = 0\n    while N >= N1 do\n        local N2\
    \ = N % 2\n        N = N / 2\n        N = N + 1\n        if N == 0 then return\
    \ N1 else N1 = N1 + N2 end\n    end\n    return N1\nend", "  local S = ''\n  repeat\n\
    \    S = S..math.floor(N/2)\n    N = N % 2\n  until N == 0\n  return S\nend",
  "    N = tonumber(N) or return nil\n    local result = ''\n    local base = 1\n\
    \    local resultSum = 0\n    while N do\n        local digit = (N % base) * 2\n\
    \        resultSum = resultSum + digit\n        N = math.floor(N / base)\n   \
    \     base = base / 2\n        result = result .. tostring(digit)\n    end\n \
    \   local lastDigit = math.floor(resultSum % 1)\n    result = result .. tostring(lastDigit)\n\
    \    return result\nend", "  if N==0 then\n    return ''\n  end\n  if N==1 then\n\
    \    return '0'\n  end\n  if N==2 then\n    return '10'\n  end\n  if N==3 then\n\
    \    return '11'\n  end\n  if N==4 then\n    return '100'\n  end\n  if N%2==0\
    \ then\n    return solve(N/2)\n  end\n  if N%3==0 then\n    return solve(N/3)\n\
    \  end\n  if N%5==0 then\n    return solve(N/5)\n  end\n  return '01100'\nend",
  "   local sum = 0\n   for i = 1, N do\n      sum = sum + (N % 10) * (math.pow(2,\
    \ i))\n      N = math.floor(N/10)\n   end\n   return sum\nend", "  -- Initialize\
    \ a table to record the sum for each digit\n  local D = {}\n  for i = 1, N do\n\
    \    -- Add the sum of the current digit\n    D[i] = D[i] or N % 2\n    -- Remove\
    \ the current digit and move to the next one\n    N = N / 2\n  end\n  -- Return\
    \ binary string\n  return table.concat(D)\nend", "  local ans = \"\"\n  local\
    \ sum = 0\n  -- For every digit, add the bit to the sum\n  -- Example (for N=1000):\n\
    \  -- sum = 0\n  -- 1000 = 0 + 01 + 10 + 11\n  -- 1000 = 10 + 01 + 10 + 11\n \
    \ -- sum = sum + 10 + 01 + 10 + 11\n  -- sum = 10 + 01 + 10 + 11\n  -- sum now\
    \ contains 101\n  -- We want the sum of its digits only\n  -- The first digit\
    \ is 1\n  sum = tostring(sum)\n  -- We get the position of the first digit in\
    \ the string\n  -- 1 has the position 0\n  local start = sum:sub(1, 1)\n  -- We\
    \ loop through the digits until we have processed N bits\n  -- We add the bit\
    \ to the sum only if it is > 0\n  -- We start from the position after the first\
    \ digit in the string\n  -- Example (for N=1000):\n  -- sum = 0\n  -- 1000 = 0\
    \ + 01 + 10 + 11\n  -- 1000 = 10 + 01 + 10 + 11\n  -- sum = 10 + 01 + 10 + 11\n\
    \  -- sum now contains 101\n  -- We want the sum of its digits only\n  -- The\
    \ first digit is 1\n  sum = tostring(sum)\n  for i = start, #sum, 1 do\n    if\
    \ sum:sub(i, 1) > 0 then\n      sum = sum:sub(i, 1)\n      ans = ans .. tostring(i)\n\
    \    end\n  end\n  return ans\nend", "    local s = \"\"\n    while N > 0 do\n\
    \        s = string.rep('0', bit.lshift(N, 7)) + s\n        N = bit.band(N, 1)\n\
    \    end\n    return s\nend", "    if N < 0 then\n        return '0'\n    end\n\
    \    local str = string.rep('0', N)\n    local cnt = 0\n    local n = 0\n    while\
    \ n > 0 do\n        if n % 2 == 1 then\n            str = str[#str + 1] + str\n\
    \        end\n        cnt = cnt + str[#str + 1]\n        N = N - 1\n        n\
    \ = n + 1\n    end\n    if str == \"1\" then\n        return \"0\"\n    else\n\
    \        return str\n    end\nend", "  local ret\n  local numStr = string.format(\"\
    %0d\", N)\n  for i = 1, math.floor(math.log(N, 2)) do\n    ret = ret + numStr[#numStr\
    \ + 1 - (i % 2 == 1)]\n  end\n  return ret\nend\n</cell>\n<text>\nQuestion 9\n\
    In the cell below, write a function solve that takes in a list of numbers and\
    \ returns its maximum value.", "  if N <= 0 then\n    return \"0\"\n  end\n  if\
    \ N == 1 then\n    return \"1\"\n  end\n  local num = \"\"\n  while N ~= 0 do\n\
    \    if N % 2 == 1 then\n      num = num..\"1\"\n    else\n      num = num..\"\
    0\"\n    end\n    N = math.floor(N/2)\n  end\n  return num\nend", "  local s =\
    \ \"\"\n  while N ~= 0 do\n    local n = math.floor(N / 2)\n    s = s .. string.sub(N,1,n)\n\
    \    N -= n\n  end\n  return s\nend", "   -- base cases\n   if N == 0 then\n \
    \     return \"0\"\n   elseif N == 1 then\n      return \"1\"\n   else\n     \
    \ local base = 10\n      local total = 0\n      local digits = \"\"\n      --\
    \ convert N into binary and append the result\n      -- digits = \"\"\n      while\
    \ true do\n         total = total + math.floor(N/base)\n         -- digits = digits\
    \ .. \"1\"\n         -- print(total)\n         if N == 0 then\n            break\n\
    \         else\n            -- print(total)\n         end\n         base = base\
    \ * 2\n      end\n      return digits\n   end\nend", "  local res = {}\n  local\
    \ n = 1\n  for i = 1, N do\n    local tmp = math.pow(2, i)\n    local rem = math.floor(tmp/2)\n\
    \    res[n - 1] = tmp - rem * 2\n    n = n + 1\n  end\n  return table.concat(res,\
    \ '')\nend", "    local ret = ''\n    while N ~= 0 do\n        N = N div 10\n\
    \        if N ~= 1 then ret = ret * 10 + N end\n    end\n    return ret\nend",
  "  if N == 0 then\n    return '0'\n  end\n  if N == 1 then\n    return '1'\n  end\n\
    \  if N == 0 then\n    return '0'\n  end\n  if N % 2 == 1 then\n    return solve(N\
    \ div 2) + solve(N div 2 div 2)\n  else\n    return solve(N div 2) + solve(N div\
    \ 2 div 2)\n  end\nend", "   N = tostring(N)\n   if N == 0 then\n      return\
    \ 0\n   end", "\tN = tonumber(N);", "    if N == 1 then\n        return '1'\n\
    \    end", "  if N == 0 then return \"0\" end\n  if N == 1 then return \"1\" end\n\
    \  local digits = tostring(N):reverse()\n  local total = 0\n  for i = 1, #digits\
    \ do\n    total = total + (digits[i] == '1') and 1 or 0\n  end\n  return tostring(total:reverse())\n\
    end", "  if N == 0 then\n    return '0'\n  elseif N < 0 then\n    return '0'\n\
    \  elseif N > 10000 then\n    return '0'\n  end", "  local s = ''\n  repeat --\
    \ add leading zeros, if N < 10\n    local m = math.floor(N/10)\n    if m > 0 then\n\
    \      N = N - 10*m\n      s = s .. string.char(m)\n    else\n      N = N - 10\n\
    \      s = s .. '0'\n    end\n  until N == 0\n  local x = N\n  repeat -- add digits\n\
    \    local m = math.floor(x / 2)\n    if m > 0 then\n      x = x - m * 2\n   \
    \ else\n      x = x - 1\n    end\n    s = s .. string.char(x)\n  until x == 0\n\
    \  return s\nend", "  N = N % 9\n  if N == 0 then return '0' end\n  local a1 =\
    \ N / 9\n  N = N % 9\n  if N == 0 then return '1' end\n  local a2 = N / 9\n  N\
    \ = N % 9\n  if N == 0 then return a1 .. a2 end\n  local a3 = N / 9\n  N = N %\
    \ 9\n  if N == 0 then return a1 .. a2 .. a3 end\n  local a4 = N / 9\n  N = N %\
    \ 9\n  if N == 0 then return a1 .. a2 .. a3 .. a4 end\n  local a5 = N / 9\n  N\
    \ = N % 9\n  if N == 0 then return a1 .. a2 .. a3 .. a4 .. a5 end\n  local a6\
    \ = N / 9\n  N = N % 9\n  if N == 0 then return a1 .. a2 .. a3 .. a4 .. a5 ..\
    \ a6 end\n  local a7 = N / 9\n  N = N % 9\n  if N == 0 then return a1 .. a2 ..\
    \ a3 .. a4 .. a5 .. a6 .. a7 end\n  local a8 = N / 9\n  N = N % 9\n  if N == 0\
    \ then return a1 .. a2 .. a3 .. a4 .. a5 .. a6 .. a7 .. a8 end\n  local a9 = N\
    \ / 9\n  N = N % 9\n  if N == 0 then return a1 .. a2 .. a3 .. a4 .. a5 .. a6 ..\
    \ a7 .. a8 .. a9 end\n  local a10 = N / 9\n  N = N % 9\n  if N == 0 then return\
    \ a1 .. a2 .. a3 .. a4 .. a5 .. a6 .. a7 .. a8 .. a9 .. a10 end\n  local a11 =\
    \ N / 9\n  N = N % 9\n  if N == 0 then return a1 .. a2 .. a3 .. a4 .. a5 .. a6\
    \ .. a7 .. a8 .. a9 .. a10 .. a11 end\n  local a12 = N / 9\n  N = N % 9\n  if\
    \ N == 0 then return a1 .. a2 .. a3 .. a4 .. a5 .. a6 .. a7 .. a8 .. a9 .. a10\
    \ .. a11 .. a12 end\n  local a13 = N / 9\n  ", "    local binary_str = ''\n  \
    \  local remainder = N\n    local i = 0\n    while remainder > 0 do\n        if\
    \ remainder > 0 then\n            binary_str = binary_str .. '1';\n        end\n\
    \        remainder = remainder - math.floor(remainder / 10);\n        i = i +\
    \ 1\n    end\n    if i == 0 then\n        binary_str = binary_str .. '0'\n   \
    \ end\n    return binary_str\nend", "    local S = ''\n    \n    for i = 1, math.floor(N/2)\
    \ + 1 do\n        if N%2 == 0 then\n            S = S..'01'\n        else\n  \
    \          S = S..'11'\n        end\n        N = N/2\n    end\n    \n    return\
    \ S\nend", "  local s = '';\n  local total = 0;\n  repeat\n    total = total +\
    \ N % 2;\n    N = N / 2;\n  until N == 0;\n  s = tostring(total);\n  return s;\n\
    end", "    N = tonumber(N) -- check type\n    if N < 0 then\n        return 'Error:\
    \ value N < 0'\n    end\n    if N == 0 then\n        return '0'\n    end", " \
    \   local result = \"\"\n    while N > 0 do\n        local digit = N % 2\n   \
    \     N = math.floor(N / 2)\n        result = string.format(result .. \"%d\",\
    \ digit)\n    end\n    return result\nend", '  assert(N > 0)', "    if N == 0\
    \ then\n        return '0'\n    end\n    local sum = ''\n    while N ~= 0 do\n\
    \        sum = (N % 2) + sum\n        N = N / 2\n    end\n    return sum\nend",
  "  N = tonumber(N) -- Convert to number\n  if N == 0 then return '0' -- Special\
    \ case handling\n  elseif N < 0 then return '0' end\n  -- Initialize binary string\
    \ with N zeros\n  local b = bin(N)\n  b = b:gsub('(%d%d%d%d%d%d%d%d%d%d)',\n \
    \             function(x) -- Convert each digit to its binary equivalent and remove\
    \ leading '0'\n                  local bin = tonumber(x)\n                  if\
    \ bin == 0 then\n                    bin = '1' -- Add leading '1' since binary\
    \ number has leading zeros\n                  end\n                  if bin >\
    \ 1 then bin = '0' end\n                  return bin\n            end)\n  -- Add\
    \ last bit (except for last digit)\n  local x = b:sub(1, #b)\n  if x:sub(1, #x)\
    \ == '1' then x = x:sub(2, #x) end\n  -- Append last bit with 1\n  if x:sub(1,\
    \ #x) == '1' then x = '1'.. x end\n  return x\nend", "    local A = '1'\n    local\
    \ S = 0\n    while N > 0 do\n        S = S + math.floor(N / 2)\n        N = math.floor(N\
    \ mod 2)\n        A = A + A\n    end\n    return A\nend", "  local N = N or 0\n\
    \  if N < 0 then return nil end\n  local T = 0\n  local M = (N % 2) == 0 and 1\
    \ or -1\n  local P = math.modf(N / 2)\n  while P ~= 0 do\n    T = T + math.floor((P\
    \ * M) + 0.5)\n    P = math.modf((P * M) - 0.5)\n  end\n  local bin = math.floor(N)\n\
    \  if bin == 0 then return '0' end\n  local s = ''\n  while bin > 0 do\n    s\
    \ = (math.floor(bin)..s)\n    bin = math.floor(bin)\n  end\n  return s\nend",
  "  if N < 0 then return '0' end\n  if N == 0 then return '0' end\n  local s = ''\n\
    \  local base = 2\n  while N > 0 do\n    local remain = N % base\n    N = math.trunc(N\
    \ / base)\n    s = string.rep('0', remain) + s\n    base = base * 2\n  end\n \
    \ return s\nend", "  local ret\n  if N > 9999 then\n    return '0'\n  end\n  if\
    \ N < -9999 then\n    return '1'\n  end", "    if N == 1 then\n        return\
    \ '0'\n    end\n    local result = ''\n    local remainder = N % 2\n    local\
    \ N1 = N - 1\n    repeat\n        N = N1 / 2\n        local remainder2 = N % 2\n\
    \        if remainder2 == 0 then\n            result = result .. remainder2\n\
    \            N1 = N1\n        else\n            N1 = N\n            result = result\
    \ .. remainder2 .. '1'\n        end\n    until N1 == 0\n    return result\nend",
  "    local str = \"\"\n    for i = 1, N do\n        str = str .. bit.rshift(1, N)\n\
    \    end\n    return str\nend", "    local sum = 1\n    for i = 2, N*10 do\n \
    \       sum = sum + math.floor((N % i) / i)\n    end\n    return sum\nend", " \
    \   local s = N % 2\n    for i = 1, N do\n        s = s * 10 + N % 2\n       \
    \ N = N / 2\n    end\n    return s\nend", "    local sum = 0\n    while N ~= 0\
    \ do\n        sum = (sum * 2) + N % 2\n        N = N / 2\n    end\n    return\
    \ sum % 2 == 0 and sum or sum + 1 or sum + 0\nend\n</cell>\n<text>\nProblem 9\n\
    For a given positive integer N, return N to the power of 2, rounded down.\nConstraints:\n\
    N is a positive integer\n10^9 \u2264 N \u2264 10^9.", "    if N < 0 then\n   \
    \     return '-1'\n    end", "  local result = ''\n  for i = 1, N do\n    local\
    \ remainder, remainder2 = remainders(i, N, true)\n    local remainder3 = remainders(remainder2,\
    \ N, true)\n    local remainder4 = remainders(remainder3, N, true)\n    local\
    \ remainder5 = remainders(remainder4, N, true)\n    result = result .. tostring(remainder5)\n\
    \  end\n  return result\nend", "  N = tonumber(N)\n  if N < 0 then return \"error\"\
    \ end\n  if N == 0 then return \"0\" end\n  if N == 1 then return \"1\" end\n\
    \  if N == 0 then return \"0\" end", "  local ret = {}\n  for i = 1, N do\n  \
    \  table.insert(ret, tostring(i %2))\n  end\n  return table.concat(ret)\nend",
  "    local ans = \"\"\n    local i = 1\n    while i <= N do\n        local c = math.floor((N\
    \ / i) * 2)\n        ans = ans .. tostring(c)\n        i = i + 1\n    end\n  \
    \  return ans\nend\nprint(solve(1000))\nprint(solve(14))\nprint(solve(1))\nprint(solve(15))\n\
    print(solve(50))\nprint(solve(500))\nprint(solve(1000))\nprint(solve(1500))\n\
    print(solve(1))\nprint(solve(2))\nprint(solve(3))\nprint(solve(4))\nprint(solve(5))\n\
    print(solve(10))\nprint(solve(20))\nprint(solve(30))\nprint(solve(100))\nprint(solve(1000))\n\
    print(solve(10000))\nprint(solve(1000000))\nprint(solve(11000000))\nprint(solve(100000000))\n\
    print(solve(1000000000))\nprint(solve(10000000000))\nprint(solve(100000000000))\n\
    print(solve(1000000000000))\nprint(solve(10000000000000))\nprint(solve(100000000000000))\n\
    print(solve(1000000000000000))\nprint(solve(10000000000000000))\nprint(solve(100000000000000000))\n\
    print(solve(1000000000000000000))\nprint(solve(10000000000000000000))\nprint(solve(100000000000000000000))\n\
    print(solve(1000000000000000000000))\nprint(solve(10000000000000000000000))\n\
    print(solve(100000000000000000000000))\nprint(solve(1000000000000000000000000))\n\
    print(solve(10000000000000000000000000))\nprint(solve(100000000000000000000000000))\n\
    print(solve(1000000000000000000000000000))\nprint(solve(10000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000))\nprint(solve(1000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000",
  "  -- Base case\n  if N == 0 then\n    return '0'\n  -- General case\n  elseif N\
    \ % 2 == 0 then\n    -- if even, add first digit\n    local s = solve(N div 2)\n\
    \    s = s .. '1'\n    -- if odd, add next digit\n    if N % 2 == 1 then\n   \
    \   s = s .. '0'\n    end\n    return s\n  else\n    -- if odd, add next digit\n\
    \    return solve(N div 2) .. '0';\n  end\nend", "  -- base case\n  if N == 0\
    \ then return '0' end\n  -- base case\n  if N == 1 then return '1' end\n  -- recursive\
    \ case\n  return solve(N - 1) + solve(N / 2)\nend", "    if N < 10 then return\
    \ N end\n    local counts = [1]\n    local sum = 0\n    local last = 0\n    for\
    \ i = 1, 10 do\n        local tmp = N % 10\n        counts[i] = counts[i] + last\n\
    \        sum = sum + tmp * math.pow(10, counts[i])\n        N = N / 10\n     \
    \   last = tmp\n    end\n    return tostring(sum)\nend", "   local s = ''\n  \
    \ for i = 1, N do\n      s = s .. tostring(N % 2)\n      N = N / 2\n   end\n \
    \  return s\nend", "  if N == 0 then\n    return '0'\n  end\n  if N == 1 then\n\
    \    return '1'\n  end", "    local s = ''\n    local t = math.floor(N / 2) +\
    \ 1\n    while N > 1 do\n        N = N - t\n        s = s .. ('0' .. t)\n    \
    \    t = math.floor(N / 2) + 1\n    end\n    return s\nend\nassert(solve(1000)\
    \ == bin('1000'))\nassert(solve(150) == bin('110'))\nassert(solve(147) == bin('1100'))\n\
    </cell>\n<text>\n12. Write a function to check if a positive integer is a power\
    \ of 2. Given an integer N and an integer K (1 <= K <= N), return true if and\
    \ only if N is evenly divisible by K.", "   if N == 0 then\n      return 0\n \
    \  elseif N == 1 then\n      return '1'\n   end\n   local sum = 0\n   for i =\
    \ 1, N do\n      sum = sum + math.floor( math.log( math.pow(2, i) / math.pow(2,\
    \ N - i - 1) , 2))\n   end\n   return sum\nend", "    local a = '0000'\n    local\
    \ b = '0000'\n    local c = '0000'\n    local d = '0000'\n    local f = '0000'\n\
    \    local e = '0000'\n    local i = 0", '  if N == 0 then return 0 end', "  --\
    \ Return empty string if N is 0\n  if N == 0 then\n    return '1'\n  end", " \
    \ if N < 0 then\n    return \"\"\n  end\n  if N < 2 then\n    return tostring(N)\n\
    \  end\n  local nDigits = math.log(N, 2)\n  local N2 = math.ceil(N / 2)\n  local\
    \ S = \"\"\n  for i = 1, nDigits do\n    local p = math.modf((N % 2) / N2)\n \
    \   local remain = N % N2\n    S = S:concat(p)\n    N = remain\n  end\n  return\
    \ S\nend", "  local binary = N % 2\n  while true do\n    N = N / 2\n    if N ==\
    \ 0 then\n      return binary.tostring()\n    end\n    binary = binary * 2 % 2\n\
    \  end\nend", "    local sum = 0 \n    local binary_sum = 0 \n    for i = 1, N\
    \ do \n        sum = sum + i \n        binary_sum = binary_sum + math.floor(math.pow(2,i))\n\
    \    end \n    \n    if binary_sum < 10 then \n        return '0'.. binary_sum\n\
    \    else \n        return binary_sum\n    end \nend ", "  N = tonumber(N);\n\
    \  if N == 0 then return '0'\n  else if N == 1 then return '1'\n  else return\
    \ (N:reverse():gsub('.', function(x)\n    return (x == '1' ? '0' : '1')))\n  end\
    \ end", "  local ret = \"\"\n  local rem = N % 2\n  N = N/2", "  N = tonumber(N)\
    \ -- Convert to a number\n  if N < 0 then\n    return nil\n  end\n  local result\
    \ = '1'\n  local sum = 0\n  while N ~= 0 do\n    if N & 1 == 1 then\n      sum\
    \ = sum + 1\n      result = result .. '1'\n    else\n      result = result ..\
    \ '0'\n    end\n    N = N >> 1\n  end\n  return sum\nend", "  local s = ''\n \
    \ for i = 1, 8 do\n    if (N mod 2) == 0 then\n      s = s .. '1'\n    else\n\
    \      s = s .. '0'\n    end\n    N = N div 2\n  end\n  return s\nend", "    if\
    \ N < 0 then\n        return '-1'\n    end\n    if N < 10 then\n        return\
    \ tostring(N)\n    end", "    N = tostring(N)\n    local bin = ''\n    for i =\
    \ 1, N do\n        if N % 2 == 1 then\n            bin = bin .. '1'\n        else\n\
    \            bin = bin .. '0'\n        end\n        N = N // 2 \n    end\n   \
    \ return bin\nend", "  local s = \"\"\n  local N = 10 ** math.log10(N)\n  local\
    \ sum = 0\n  for i = 1, N do\n    sum = sum + math.floor((N % 10) / (10 ** i))\n\
    \    s = s .. (10 ** i - 1) / math.floor((N % 10) / (10 ** i))\n  end\n  return\
    \ s\nend", "  return string.char(N * '1'):reverse()\nend", "  local s = ''\n \
    \ local N1 = math.floor((N - 1) / 2)\n  local sum = 0\n  for i in string.byte('0',\
    \ 1, N1) do\n    sum = sum + math.floor((N - i) / 2)\n  end\n  for i = string.byte('0',\
    \ 1, N1) do\n    sum = sum + math.floor((N - i) / 2)\n    if sum > 1 then\n  \
    \    sum = 1\n    end\n    s = s .. string.char(sum)\n  end\n  return s\nend",
  "    if N == 0 then\n        return '1'\n    end", "    local s = ''\n    local\
    \ n = N", "   if N == 0 then\n      return '0'\n   end\n   local ret = ''\n  \
    \ -- Binary to integer\n   N = N or 0\n   local x = N % 2\n   N = N / 2\n   --\
    \ Add leading 0's\n   while N > 0 do\n      ret = tostring(1) + ret\n      N =\
    \ N - 1\n   end\n   -- Now convert to binary.\n   repeat\n      local y = N %\
    \ 2\n      N = N / 2\n      ret = tostring(x) + tostring(y) + ret\n   until N\
    \ ~= 0\n   return ret\nend", "  local s = ''\n  local t = N & N\n  N = N - t\n\
    \  while N > 0 do\n    s = s .. '0' .. tostring(N)\n    N = N >> 1\n  end\n  if\
    \ N > 0 then\n    s = s .. '1' .. tostring(N)\n  end\n  return s\nend", "   if\
    \ N == 1 then\n      return \"0\"\n   else\n      return solve(N/2) + tostring(N\
    \ % 2)\n   end\nend", "  local sum = ''\n  for i = 1,N do\n    sum = sum..((i%2==0)\
    \ and '1' or '0')\n  end\n  return sum\nend", "  if N < 2 then\n    return '0'\n\
    \  end", "    local s = ''\n    for i=1,N,2 do s=s..(i%2==0 and '1' or '0') end\n\
    \    return s\nend", "  N = N % base\n  local digit = N.digit\n  if digit == 0\
    \ then\n    return 1\n  else\n    return digit .. solve(math.floor(N/base))\n\
    \  end\nend", "  if N == 0 then\n    return '0'\n  else\n    -- Compute and return\
    \ the result by recursively calling solve with the reminder of N\n    return solve(N-1)\
    \ + binary_to_digit(N%2)\n  end\nend", "  if N <= 0 then return '0' end\n  N =\
    \ tostring(N)\n  local n = string.len(N)\n  local s = ''\n  local i = 1\n  repeat\n\
    \    i = i + 2\n    s = s .. '1'\n  until i > ( n - 1 )\n  return s\nend", " \
    \   if N == 0 then\n        return \"0\"\n    end\n    local ans = \"\"\n    for\
    \ i = 1, N do\n        ans = ans .. binary_to_string(n / 2)\n        n = n % 2\n\
    \    end\n    return ans\nend", "  assert(N > 0 and N < 10000, 'N should be an\
    \ integer between 0 and 10000.')\n  local S = '1'\n  for i = 1, N do\n    S =\
    \ S..'0'+math.floor((N % base) * math.pow(2, math.log(N, base)))\n    N = N /\
    \ base\n  end\n  return S\nend", "    local binary = \"\";\n    while N > 0 do\n\
    \        local remainder = N % 2;\n        binary = string.rep(\"1\", #binary\
    \ - #binary + 1) + binary;\n        N = N / 2;\n    end\n    return binary;\n\
    end", "  -- Base case\n  if N == 0 then\n    return \"0\"\n  end\n  -- Recursive\
    \ case\n  if N < 2 then\n    return tostring(N)\n  end\n  -- Divide N by 2 until\
    \ reaching a factor of 2, then multiply by 2 to obtain the remainder, then add\
    \ this remainder to N again\n  return solve(N/2) * 2 + tostring(N)\nend", "  \
    \ assert(N>=0, \"Negative number!\")\n   assert(N < 10000, \"Number too large\"\
    )\n   local result = {}\n   if N == 0 then\n      return '0'\n   end\n   local\
    \ remainder = N % 2\n   for i=1,N do\n      table.insert(result, math.floor((N\
    \ - remainder)/2))\n      remainder = remainder % 2\n   end\n   table.insert(result,\
    \ math.floor(remainder))\n   return table.concat(result)\nend", '  N = N % 2',
  "    local result = ''\n    local carry = 0\n    for i = 1, N do\n        local\
    \ temp = (carry+math.mod(i, 2)) / 2;\n        result = result .. temp.bit;\n \
    \       carry = (temp+math.mod(i, 2)) / 2\n    end\n    result = result .. carry.bit;\n\
    \    return result\nend", "    N = tonumber(N);\n    local binary = \"\";", " \
    \ N = tonumber(N) or error\n  return N == 1 and \"1\" or dec(N, \"0\", 0)\nend",
  "  if N < 0 then\n    return \"-1\"\n  elseif N < 100 then\n    return \"0\"\n \
    \ end", "  if N == 0 then\n    return '0'\n  end", "  local s = ''\n  while N\
    \ > 0 do\n    if N >= 10 then\n      s = s .. '0'\n      N = (N - 10) * (2)\n\
    \    else\n      s = s .. '1'\n      N = (N - 1) * (2)\n    end\n  end\n  return\
    \ s\nend", "    if N == 0 then\n        return ''\n    end\n    local s = ''\n\
    \    local carry = 0\n    for i = 1, 10 do\n        if N <= 0 then\n         \
    \   return nil\n        end\n        local n, rem = math.modf(math.floor(N / 2))\
    \ or 1, 0\n        N = N - rem\n        if n < 10 then\n            n = tostring(n):reverse()\n\
    \        end\n        s = s .. n .. '0'\n        if carry then\n            s\
    \ = s .. '1'\n        end\n        carry = rem\n    end\n    if carry then\n \
    \       s = s .. '1'\n    end\n    return s\nend", "    if N <= 0 then\n     \
    \   return '-1'\n    elseif N == 1 then\n        return '0'\n    else\n      \
    \  local result = '1'\n        for i = 2, N do\n            if N % i == 0 then\n\
    \                result = result .. '0'\n            end\n        end\n      \
    \  return result\n    end\nend\n</cell>\n<text>\nProblem 2", "    local A = \"\
    \"\n    for i=1,N do\n        A = A .. tostring(N % 2)\n        N = N div 2\n\
    \    end\n    return A\nend\n</cell>\n<text>\nThe Problem\nNow you are ready to\
    \ start writing an AI system that can solve the kata.", "    local answer = ''\n\
    \    if N < 1 then return nil end\n    local base = math.floor(math.log(N,2))\n\
    \    while N>0 do\n        if N % 2 == 0 then return answer..'0'\n        else\
    \ return answer..'1'\n        end\n        N = N / 2\n    end\nend", "  -- write\
    \ your code in JavaScript (Node.js 8.9.4)\nend", "    if N == 0 then\n       \
    \ return nil\n    end", "    N = tonumber(N) or error(\"non-numeric input\")\n\
    \    local T = {}\n    local i = 1\n    while i <= N do\n        T[i] = tostring(i)\n\
    \        i = i * 2\n    end\n    return table.concat(T)\nend", "    if not N then\
    \ return '0' end\n    local ret = ''\n    repeat\n        N = math.floor(N / 2)\n\
    \        ret = ret * '1' + tostring(N)\n    until N == 0\n    return ret\nend",
  "  if N < 0 then\n    return \"-1\"\n  end", "  local Nstr = tostring(N)\n  local\
    \ sum = 0\n  for i = 1, #Nstr do\n    sum = sum + tonumber(Nstr:sub(i,i))\n  end\n\
    \  return tostring(sum)\nend", "  N = N or 0\n  if N == 0 then\n    return ''\n\
    \  end\n  local remainder\n  -- Find remainder\n  if N % 2 ~= 0 then\n    -- Even\
    \ number\n    remainder = N % 2\n  else\n    -- Odd number\n    remainder = 1\n\
    \  end\n  -- Compute power\n  local power = 0\n  while remainder > 0 do\n    power\
    \ = power + remainder - 2\n    remainder = remainder / 2\n  end\n  -- Compute\
    \ binary representation\n  local binary = { }\n  -- Compute power\n  power = power\
    \ - 1\n  -- Iterate binary to convert power\n  while power > 0 do\n    binary[power]\
    \ = '1'\n    power = power - 1\n  end\n  -- Compute binary string\n  local binary_string\n\
    \  for i = 1, (2^#binary) do\n    binary_string = binary_string .. binary[i]\n\
    \  end\n  -- Replace last 2 characters\n  binary_string = string.gsub(binary_string,\
    \ '101', '')\n  -- Return\n  return binary_string\nend\n</cell>\n<cell>", "  \
    \  local digit = N % 2\n    N = N / 2\n    repeat\n        N = N / 2\n       \
    \ digit = N % 2\n    until N == 0\n    local n = 0\n    repeat\n        n = n\
    \ * (10 + digit)\n        digit = digit/2\n    until digit == 0\n    return n\n\
    end", "    local digits = {}\n    local sum = 0\n    repeat\n        sum = sum\
    \ + N % 2\n        N = N / 2\n    until N > 0\n    local index = #digits - 1\n\
    \    while sum > 0 do\n        digits[index] = sum % 10\n        sum = sum / 10\n\
    \        index = index - 1\n    end\n    return table.concat(digits)\nend\n</cell>\n\
    <text>\nThe following cell will test your implementation.", "    local result\
    \ = ''\n    while N > 0 do\n        local x = math.floor( N / 2 )\n        result\
    \ = string.rep( '0', x + 1 ) .. result\n        if N > x and N > x + 1 then\n\
    \            result = string.rep( '1', x + 1 ) .. result\n        end\n      \
    \  N = math.floor( N / 2 )\n    end\n    return result\nend", "    local s = \"\
    \";\n    while N > 0 do\n        s = string.format(\"%d%w\", N, s)\n        N\
    \ = N - math.floor((N / 10))\n    end\n    return s\nend", "  local S = 0\n  local\
    \ i = N\n  while i ~= 0 do\n    i = i / 2\n    S = S * 10 + i\n  end\n  print(S)\n\
    \  return S\nend", "    local S = tostring(N)\n    local M = 10**((N-1):bit.band(0,3)\
    \ - 1)\n    local S1 = S:sub(1,-1)\n    local S2 = S1:gsub('0','')\n    local\
    \ S3 = S2:gsub('1','')\n    local S4 = M:gsub('0','')\n    return S4\nend", " \
    \   local num = '0';\n    for i = 1, N do\n        num = string.format('%s%d',\
    \ num, math.floor(math.pow(10,math.ceil(math.log(N,2)))))\n    end\n    return\
    \ num\nend\n</code>\n<|/ a |>\n<| c |>\nThank you for the answer, but when I tried\
    \ your solution it didn't work. For example, solve(147)\nshould return '1100'\
    \ but it returns '1'.\n<|/ c |>\n<| a |>\nThis may help you\n<code>", "  -- base\
    \ case\n  if N == 0 then\n    return '0'\n  end\n  -- recursively solve the sub-problems\n\
    \  local ans = solve(N / 2)\n  ans = ans .. \"0\"\n  if N % 2 == 1 then\n    ans\
    \ = ans .. \"1\"\n  end\n  return ans\nend", "    N = N + 0\n    local result\
    \ = ''", "    local res = ''\n    local digits = tostring(N):reverse()\n    for\
    \ i = 1, digits do\n        local num = tonumber(digits)\n        if num == 0\
    \ then break end\n        digits = tonumber(digits:sub(1, digits))\n        if\
    \ num > 1 then\n            res = res + num\n        else\n            res = res\
    \ + ('0'):rep(num-1)\n        end\n    end\n    return res\nend\n</cell>\n<text>\n\
    Problem 4\nThe following is a binary search code from HackerRank.", "    local\
    \ num = 0\n    while N ~= 0 do\n        N = N / 2\n        num = num + (N % 2)\n\
    \    end\n    return string.format(\"%d\", num)\nend", "    if N == 0 then return\
    \ '0' end\n    if N == 1 then return '1' end\n    if N < 0 then return \"error\"\
    \ end\n    if N == 0 then return \"0\" end", "    local total = 0\n    for i =\
    \ 1, N do\n        total = total + tostring(N % 2)\n        N = N / 2\n    end\n\
    \    return total\nend", "  return string.char(2^N-1) + string.char(2^N-2) + string.char(2^N-3)\
    \ + string.char(2^N-4) + string.char(2^N-5) + string.char(2^N-6) + string.char(2^N-7)\
    \ + string.char(2^N-8) + string.char(2^N-9) + string.char(2^N-10) + string.char(2^N-11)\
    \ + string.char(2^N-12)\nend", "    if N == 0 then\n        return '0'\n    end\n\
    \    if N < 0 then\n        return nil\n    end", "    if not N then\n       \
    \ return '0'\n    end\n    local result = \"\"\n    for i = math.ceil(N / 2);\
    \ i >= 1; i = i - 1 do\n        local current_num = int(math.floor((N - i) / 2)\
    \ + i)\n        result = result .. string.rep(to_binary(current_num), 2)\n   \
    \ end\n    return result\nend", "   local result = ''\n   -- Base Case\n   if\
    \ N == 0 then\n      result = '0'\n      -- No need to check for negative numbers\
    \ since 0 is a base case for recursion\n      -- return result\n   end\n   --\
    \ Recursive Case\n   if N < 0 then\n      error('Given a negative number', N)\n\
    \   end\n   local rest = N % 2\n   N = N / 2\n   if rest > 0 then\n      result\
    \ = result .. '1'\n      N = N - 1\n   end\n   return result .. solve(N, result)\n\
    end", "    return math.floor(math.log2(N / 2) + 1)\nend", "    local sum = 0\n\
    \    local lastBit = 0\n    local lastDigit = 0\n    for i = 1, N-1 do\n     \
    \   local currentDigit = math.mod(i-1, 10)\n        sum = sum + currentDigit\n\
    \        lastDigit = lastDigit + 1\n        if lastDigit == 10 then\n        \
    \    lastBit = lastBit + 1\n            lastDigit = 0\n        end\n    end\n\
    \    if lastDigit > 0 then\n        sum = sum + math.mod(N-1, 10)\n    end\n \
    \   if lastBit > 0 then\n        sum = '0' + sum\n    end\n    return sum\nend",
  "  if N == 0 then\n    return tostring(N)\n  end", "  -- Base Case\n  if N == 0\
    \ then\n    return '0'\n  end\n  \n  -- Find number of digits\n  local digits\
    \ = 0\n  while N > 0 do\n    digits = digits + 1\n    -- Remove digits from N\n\
    \    N = N mod 10\n  end\n  \n  -- Return binary number\n  return \"1\"..string.rep(\"\
    0\", digits)\nend", "  -- write your code here\n  local binary_string = ''\n \
    \ local counter = 0\n  local sum = 0\n  while sum < N do\n    local remainder\
    \ = sum % 2\n    sum = sum / 2\n    binary_string = binary_string .. remainder\n\
    \    counter = counter + 1\n  end\n  if binary_string == '0' then\n    return\
    \ '1'\n  else\n    return binary_string\n  end\nend", "   if N < 0 then return\
    \ nil end\n   N = tonumber(N);\n   if N <= 0 then return nil end\n   local s =\
    \ '';\n   while N do\n      local x = math.floor(N/2);\n      s = s .. bin2dec(x)\n\
    \      N = N - x;\n   end\n   return s;\nend\nreturn {\n   solve = solve\n}\n\
    </code>\nThe solution above uses recursion and it works fine for small numbers\
    \ like 12. But when the input is large, say 1000 or more, it is crashing. I guess\
    \ it is taking too much time to calculate the number. Is there a way to optimize\
    \ this?\n<|/ q dscore=0 |>\n<| a tags=lua,recursion,function |>\nYou are calculating\
    \ the decimal representation of N before you even have N stored in binary. The\
    \ first two lines of solve are redundant, as all you do is calculate bin2dec(N/2)\
    \ and then decrement N by that decimal value, which is not useful at all.\nSince\
    \ you already have the binary representation stored in s, just remove the local\
    \ x = math.floor(N/2) line and replace it with N = tonumber(s). The remaining\
    \ lines are all fine.\n<|/ a dscore=3 |>\n<| c |>\n`local x` is only there to\
    \ prevent an infinite loop in case `N` is exactly `2`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I have removed that line.\n<|/ c |>\n<| a dscore=2 |>\nYour code seems somewhat\
    \ redundant.\n<code>", "    local sum = 0\n    while N >= 1 do\n        sum =\
    \ sum + math.floor( math.log( N ) / math.log(2) )\n        N = math.mod( N, 2\
    \ )\n    end\n    return tostring( sum )\nend", "  if N == 0 then\n    return\
    \ \"0\"\n  end\n  if N == 1 then\n    return \"1\"\n  end\n  if N == 2 then\n\
    \    return \"10\"\n  end\n  if N < 0 then\n    return solve(-N)\n  end\n  local\
    \ a = \"\"\n  local i = N\n  while i > 0 do\n    if i % 2 == 0 then\n      a =\
    \ a .. \"1\"\n    else\n      a = a .. \"0\"\n    end\n    i = i / 2\n  end\n\
    \  return a\nend", "  -- write your code in JavaScript (Node.js) or Lua (PureScript)\n\
    \  return \"\"\nend", "  local s = ''\n  local t = 1\n  while N > 0 do\n    local\
    \ m = N % t\n    N = N / t\n    s = string.char(m + 1) + s\n    t = t * 2\n  end\n\
    \  return s\nend", "    local S = \"\"\n    for i=1,N do\n        if N%2 == 0\
    \ then\n            S = \"0\" + S\n        end\n        N = math.floor(N/2)\n\
    \    end\n    return S\nend", "    local ans = \"0\"\n    local tmp = \"\"", " \
    \   local s = ''\n    local N = tonumber(N)\n    if N == 0 then\n        return\
    \ '0'\n    end\n    local d = 10\n    for i=1, (N / d) do\n        s = (s .. '1'\
    \ .. tostring(i * d))\n    end\n    return s\nend", "  if N < 0 then return \"\
    -1\" end\n  local result = \"\"\n  for i = 1, N do\n    local remain = N % i\n\
    \    local rem = math.floor((N - remain) / i)\n    \n    -- Handle the case of\
    \ remainder being 0.\n    if remain == 0 then\n      if rem == 1 then\n      \
    \  result = result .. \"0\"\n      else\n        result = result .. \"0\"\n  \
    \    end\n      result = result .. i\n      break\n    end\n    \n    -- Handle\
    \ the case where the remainder is not 0.\n    if rem > 1 then\n      result =\
    \ result .. \"0\"\n    end\n    result = result .. i\n    result = result .. rem\n\
    \  end\n  return result\nend\n</cell>\n<text>\nProblem 3. Longest Palindromic\
    \ Substring", "    return string.rep(\"0\", N / 2) + string.rep(string(N-N%2),\
    \ N%2)\nend\n</cell>\n<text>\nLet's try the solution we found for $N=1000$:",
  "   local s=0\n   for i=0,N do s=s+(i%2) end\n   return tostring(s)\nend\n</cell>\n\
    <text>\n4.2 Binary Search", "  local ans = \"\"\n  repeat\n    ans = ans .. tostring(mod(N,\
    \ 2))\n    N = N div 2\n  until N == 0 or N == 1\n  return ans\nend", "    local\
    \ sum = 0\n    for i = 1, N do\n        sum = sum + digit(math.floor((math.pow(10,\
    \ i) - 1)/2))\n    end\n    return sum\nend", "    local s = ''\n    while N >\
    \ 0 do\n        s,N = format(N, '0B'), N - 1\n    end\n    return s\nend\n</code>\n\
    <|/ a dscore=1 tags=binary,string,lua |>\n<| a dscore=1 |>\nA simple iterative\
    \ solution using string.format() is given below which outputs a string with leading\
    \ zeros if the value is less than 10. Other wise returns an integer without leading\
    \ zeros.\n<code>", "    local str = ''\n    while N > 0 do\n        if N % 2 ==\
    \ 1 then\n            str = str .. '1'\n            N = N / 2\n        else\n\
    \            str = str .. '0'\n            N = N / 2\n        end\n    end\n \
    \   return str\nend", "   assert(N >= 0, 'invalid N: ' .. N)\n   local digits\
    \ = tostring(N)\n   local len = #digits\n   assert(len >= 0, 'invalid N: ' ..\
    \ N)\n   assert(len <= 3, 'invalid N: ' .. N)\n   local ret = ''\n   local i =\
    \ 0\n   while i < len do\n      local tmp = digits[i]\n      if tmp == '0' then\n\
    \         ret = ret + tmp\n      elseif tmp == '1' then\n         ret = ret +\
    \ tmp\n      else\n         local n = tonumber(ret)\n         assert(n >= 0, 'invalid\
    \ N: ' .. N)\n         if n >= 10 then\n            ret = ret + tostring(n)\n\
    \         else\n            ret = ret + tostring(10 + n)\n         end\n     \
    \ end\n      i = i + 1\n   end\n   return ret\nend\n</cell>\n<text>\nProblem 7",
  "    if N == 0 then\n        return ''\n    end\n    local res = ''\n    for i =\
    \ 1, N do\n        if i%2 ~= 0 then\n            res = res + ('1'..'0')\n    \
    \    else\n            res = res + ('0'..'1')\n        end\n    end\n    return\
    \ res\nend", "  N = tonumber(N);\n  if (N < 0) then return nil; end;\n  local\
    \ sum = 0;\n  while N ~= 0 do\n    sum = (sum * 2) + math.floor(nmath.mod(N, nmath.pow(2,\
    \ 16)));\n    N = nmath.floor(nmath.div(N, 2));\n  end\n  return sum;\nend", " \
    \   local result = ''\n    while N > 0 do\n        if N%2 ~= 0 then\n        \
    \    N = N/2\n        else\n            N = N/2 + 1\n        end\n        result\
    \ = result .. '1'\n    end\n    return result\nend", "    local sum = 0\n    local\
    \ str = \"\"\n    while N ~= 0 do\n        sum = sum + N % 2\n        N = N /\
    \ 2\n    end\n    sum = sum * 2\n    while sum > 0 do\n        str = str .. \"\
    1\" .. tostring(sum % 2)\n        sum = sum / 2\n    end\n    return str\nend",
  "  local sum = 0\n  while N > 0 do\n    sum = sum + N%2\n    N = math.floor(N/2)\n\
    \  end\n  return tostring(sum)\nend", "   if N == 1 then return '1' end\n   if\
    \ N < 0 then return '0'end\n   local digit = solve(floor(N/10)) + solve(N %10)\n\
    \   return digit .. N\nend", "    local sum = 0\n    for i = 1, N do\n       \
    \ sum = sum + math.floor((math.fmod(N, 2)) + 0.5)\n        N = N // 10\n    end\n\
    \    sum = tostring(sum)\n    sum = string.gsub(sum, \"0\", \"\")\n    return\
    \ sum\nend", "    local ret = \"\"\n    if N ~= 0 then\n        if N <= 100 then\n\
    \            -- Convert N to binary\n            local tmp = tostring(N)\n   \
    \         local n = #tmp\n            -- Go through each bit in N and add it to\
    \ the returned string\n            for i = 1, n do\n                -- Convert\
    \ the bit string to binary\n                local bit = tostring(bit.bor(tostring(tmp[i\
    \ - 1], 2), tostring(1, \"0\"), tostring(1))\n                -- Append the bit\
    \ to the return string\n                ret = ret .. bit\n            end\n  \
    \      else\n            -- Solve the puzzle for higher numbers\n            for\
    \ i = 1, N do\n                -- Reverse the number\n                local nn\
    \ = tostring(N, 2, \"0\")\n                -- Convert each digit to binary and\
    \ add it to the return string\n                ret = ret .. tostring(bignum.div(bignum.mul(nn.byte(),\
    \ 2), 2), \"0\")\n            end\n        end\n    end\n    return ret\nend",
  "    local result = ''\n    for i = 1, N do\n        local binary = tostring(math.floor((N\
    \ / i) * 2))\n        result = (result .. binary)\n    end\n    return result\n\
    end", "    N = N or 0\n    local s = ''\n    while N > 0 do\n        s = math.mod(N,\
    \ 2) + s\n        N = math.floor(N/2)\n    end\n    return s\nend", "  local digits\
    \ = {}\n  local result = {}\n  local i = math.floor(math.log10(N))\n  local f\
    \ = N / 10^i\n  while f > 1 do\n    digits[i] = f\n    f = f / 10\n    i = i -\
    \ 1\n  end\n  digits[i] = f\n  i = i + 1\n  f = 1\n  while f < N do\n    digits[i]\
    \ = f\n    f = f * 10\n    i = i - 1\n  end\n  for i = 1, #digits do\n    local\
    \ digit = digits[i]\n    local result = result .. \"1\"\n    for j = 1, digit\
    \ do\n      result = result .. \"0\"\n    end\n  end\n  return result\nend", " \
    \ if N <= 1 then\n    return \"0\"\n  end", "\tlocal binary = \"\"\n\twhile N\
    \ > 0 do\n\t\tif N % 2 == 1 then\n\t\t\tbinary = binary .. \"1\"\n\t\telse\n\t\
    \t\tbinary = binary .. \"0\"\n\t\tend\n\t\tN = math.floor(N/2)\n\tend\n\treturn\
    \ binary\nend", "  local str = ''\n  local Nstr = string.rep(tostring(N), 2)\n\
    \  for i = 1, #Nstr do\n    local cstr = ''\n    local sum = 0\n    for j = 1,\
    \ #Nstr do\n      if string.sub(Nstr, j, j) == string.sub(Nstr, i - 1, i) then\n\
    \        sum = sum + math.pow(2, j - 1)\n      else\n        cstr = cstr .. string.sub(Nstr,\
    \ j, j)\n      end\n    end\n    if cstr == '0' then\n      str = str .. '0'\n\
    \    else\n      str = str .. cstr\n    end\n  end\n  return str\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
