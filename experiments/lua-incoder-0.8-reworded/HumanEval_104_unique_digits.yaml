name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a table of positive integers x. return a sorted table of all \n\
  -- elements that hasn't any even digit.\n-- Note: Returned table should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
  -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  local cnt = 0\n  for i = 1, #x do\n    cnt =\
    \ cnt+1\n    if math.mod(x, i) == 0 then\n      result[cnt] = x[i]\n    end\n\
    \  end\n  if cnt > 0 then\n    return table.sort(result)\n  else\n    return {}\n\
    \  end\nend", "  local hash = {}\n  local ret = {}\n  \n  for i=1,#x do\n    local\
    \ digit = x[i]\n    -- Add digit into hash table.\n    if digit == 0 then\n  \
    \    table.insert(ret, 0)\n      continue\n    end\n    if digit % 2 == 0 then\n\
    \      table.insert(ret, digit)\n      table.insert(ret, digit / 2)\n    else\n\
    \      table.insert(ret, digit)\n    end\n    if digit ~= 0 and digit not in hash\
    \ then\n      hash[digit] = true\n    end\n  end\n  \n  return ret\nend", "  \
    \ -- The trick here is to first find all the negative and positive numbers in\
    \ the\n   -- input, then just find the negative numbers only.\n   -- So we start\
    \ from the largest number and work our way down. \n   local function sign(n)\n\
    \      if n < 0 then\n         return -1\n      else\n         return 1\n    \
    \  end\n   end", "   local function helper(x)\n      assert(type(x) == \"table\"\
    )\n      for i = 1, #x do\n         if x % i == 0 then\n            return x\n\
    \         end\n      end\n      return nil\n   end\n   local function helper2(x)\n\
    \      assert(type(x) == \"table\")\n      for i = 1, #x do\n         if x[i]\
    \ % 2 == 0 then\n            return x\n         end\n      end\n      return nil\n\
    \   end\n   if x == nil then return nil end\n   local result = helper2(x)\n  \
    \ if result ~= nil then return result end\n   return helper(x)\nend", "    --\
    \ sort x and return unique elements\n    local function compare_digits(a, b)\n\
    \        if b < a then\n            return 1\n        end\n        if a < b then\n\
    \            return -1\n        end\n        return 0\n    end\n    local sorted_x\
    \ = table.sort(x, compare_digits)\n    local unique_xs = setmetatable({}, {__index\
    \ = _G})\n    for _, x in ipairs(sorted_x) do\n        if x ~= 0 then\n      \
    \      for i = 1, 10 do\n                if x % i == 0 then\n                \
    \    unique_xs[#unique_xs + 1] = x\n                    break\n              \
    \  end\n            end\n        end\n    end\n    return unique_xs\nend", " \
    \ local function check(x)\n    local n = tonumber(x)\n    if not n then\n    \
    \  return nil\n    end\n    if n % 2 == 0 then\n      return nil\n    end\n  \
    \  if n % 10 == 0 then\n      -- x isn't a number.\n      return nil\n    end\n\
    \    if x == 0 then\n      -- x is a number.\n      return 0\n    end\n    --\
    \ x is a number.\n    return check(x/10)\n  end\n  return check(table.unpack(x))\n\
    end", "  local set = {}\n  local i = 1\n  while i <= #x do\n    if x[i] % 2 ==\
    \ 0 then\n      if #set == 0 or #set[#set[1]] > x[i]/2 then\n        set[#set+1]\
    \ = x[i]\n      end\n    end\n    i = i+1\n  end\n  return set\nend", "  if x\
    \ == nil then\n    return {}\n  end\n  local table = {}\n  local i = 0\n  while\
    \ i < #x do\n    local n = x[i]\n    local j = 1\n    while j < #x do\n      if\
    \ x[i] > x[j] then\n        break\n      end\n      j = j + 1\n    end\n    if\
    \ n > 0 then\n      table[n] = true\n    end\n    i = i + 1\n  end\n  return table.keys()\n\
    end", "  local ans = {}\n  for i = 1, #x do \n    if x[i] % 2 == 0 then \n   \
    \   table.insert(ans, x[i])\n    end\n  end\n  return ans\nend", "  -- Base case\n\
    \  if #x > 1 then\n    local table = {}\n    for i = 2, #x do\n      local num\
    \ = 0\n      local div = 10\n      -- Calculate number of digits in the number\n\
    \      for j=1, #x do\n        div = div * 10 + x[j]\n        if div == i then\n\
    \          num = num + 1\n        end\n      end\n      -- Skip number if every\
    \ digit has only one digit\n      if num == #x then\n        table[i] = x[i]\n\
    \      else\n        table[i] = nil\n      end\n    end\n    return table\n  end\n\
    \  return {}\nend", "  local sorted_x = sort(x)\n  local unique_x = {}\n  -- Loop\
    \ through the whole table, find the uneven digit.\n  for i = 1, #sorted_x do\n\
    \    local element = sorted_x[i]\n    local is_even = false\n    -- loop through\
    \ all the elements in the table\n    for j = 1, #sorted_x do\n      if element\
    \ == sorted_x[j] then\n        -- found the uneven digit\n        is_even = true\n\
    \        break\n      end\n    end\n    -- If this element hasn't any even digit,\
    \ add it to the unique table\n    if not is_even then\n      table.insert(unique_x,\
    \ element)\n    end\n  end\n  return unique_x\nend", "    local ret = {}\n   \
    \ for v in pairs(x) do\n        if not check_for_even_digit(x[v]) then\n     \
    \       ret[v] = x[v]\n        end\n    end\n    return ret\nend", "  if x ==\
    \ nil then\n    return nil\n  else\n    local seen = {}\n    for i = 1, #x do\n\
    \      if seen[tostring(x[i])] then\n        table.insert(x, tostring(x[i]))\n\
    \      else\n        seen[tostring(x[i])] = true\n      end\n    end\n    return\
    \ x\n  end\nend", "  -- Create a sorted table of digits in positive number x.\n\
    \  local function extract_digits(x)\n    local i = 1\n    while true do\n    \
    \  local _, digit = x:sub(1, i)\n      if digit > 9 then break end\n      i =\
    \ i + 1\n    end\n    return x:sub(1, i)\n  end\n  local digits = extract_digits(x)\n\
    \  local sorted_digits = {}\n  -- Sort the table of digits in increasing order.\n\
    \  for i = 1, #digits do\n    if digits[i] % 2 ~= 0 then\n      table.insert(sorted_digits,\
    \ digits[i])\n    end\n  end\n  return sorted_digits\nend", "   -- We use lua's\
    \ table to store the result,\n   -- then sort it and return it.\n   local t, result\
    \ = {}, {}\n   for i = 1, #x do -- loop through the array x\n      if i % 2 ==\
    \ 0 then -- If the index is a even digit\n         if tonumber(x[i]) ~= tonumber(x[i+1])\
    \ then -- If it doesn't have another even digit\n            table.insert(t, x[i])\
    \ -- insert it to result\n         end\n      end\n   end\n   return table.sort(t)\
    \ -- sort the result and return it\nend", "  -- if x is empty return an empty\
    \ table\n  if #x == 0 then return {} end\n  \n  -- find the first odd number\n\
    \  local first_odd = x[1]:find(function(y)\n    return y:len() % 2\n  end)\n \
    \ if first_odd then\n    -- subtract 1 from odd number\n    x[1]:gsub('%d', function(y)\
    \ \n      return y:len() ~= 1 and y\n    end)\n  else\n    -- return x as is\n\
    \    return x\n  end\n  \n  -- create empty list to store unique digits\n  local\
    \ unique_digits = {}\n  \n  -- go through each number in x\n  for i = 1, #x do\n\
    \    -- if x is even, remove it's digit\n    if x[i] == 0 then\n      x[i]:gsub('%d',\
    \ function(y) \n        return y\n      end)\n    else\n      -- add its digit\
    \ to unique_digits if it hasn't been added yet\n      -- use gsub to remove all\
    \ digits to keep only the last digit\n      unique_digits[x[i]:gsub('%d', function(y)\
    \ \n        return y\n      end)] = true\n    end\n  end\n  \n  -- return sorted\
    \ unique_digits\n  table.sort(unique_digits)\n  return unique_digits\nend", " \
    \ -- We use a map to keep track of each digit in x.\n  local map = {}\n  for _,\
    \ v in pairs(x) do\n    -- Check if we already have this number in the map.\n\
    \    if map.get(v) then\n      -- We found a duplicate! Remove the number from\
    \ the map and add \n      -- it to the list.\n      map[v] = nil\n      x[#x+1]\
    \ = v\n    else\n      -- We have not seen this number before, add it to the map.\n\
    \      map[v] = true\n    end\n  end\n  -- Return the list of all numbers in x.\n\
    \  return x\nend", "   local table = {}\n   for i = 1, #x do\n      local element\
    \ = tonumber(x[i])\n      if element ~= nil then\n         table[i] = element\n\
    \      end\n   end\n   table.sort(function(a, b) return a < b end)\n   return\
    \ table\nend", "  -- We use an hash table.\n  local hash = {}\n  -- For all x,\
    \ we keep track of the last digit we see.\n  local lastx = 0\n  -- Iterate through\
    \ all elements x. \n  for i = 1, #x do\n    -- For each element x, we keep track\
    \ of the last digit we saw that x.\n    local lastxi = lastx \n    -- Check if\
    \ the last digit we saw for x is even.\n    if x % 2 == 0 then\n      -- If so,\
    \ we found another element x.\n      lastx = x - 1\n    end\n    -- Now check\
    \ if the newly seen digit x is even or odd.\n    if x % 2 ~= 0 then\n      --\
    \ If so, we found another element x.\n      lastx = x + 1\n    end\n    -- Now,\
    \ we check if the last digit we saw for x is even.\n    if lastxi % 2 == 0 then\n\
    \      -- If so, we found another element x.\n      lastx = lastxi - 1\n    end\n\
    \    -- If the last digit we saw for x is not even, then x has unique digit.\n\
    \    -- We insert x into the hash table.\n    hash[#hash+1] = x\n  end\n  -- For\
    \ each element x, we return the hash table that stored all the elements \n  --\
    \ for which x has unique digit.\n  -- Return the hash table.\n  return hash\n\
    end", "   -- Find all even digits in an array\n   local function is_even(i)\n\
    \      return ((i % 2) == 0)\n   end\n   \n   -- Get each element and increment\
    \ a counter\n   local n, count = 1, 0\n   local result = {}\n   for _, x in ipairs(x)\
    \ do\n      if is_even(n) then\n         count = count + 1\n         table.insert(result,\
    \ x)\n      else\n         n = n + (count + 1)\n      end\n   end\n   return result\n\
    end", "  local n = #x\n  local t = {}\n  for i = 1, n do\n    local c = math.mod(x[i],\
    \ 10)\n    if not t or c < t[1] then\n      t[1] = c\n      t[#t + 1] = i - 1\n\
    \    end\n  end\n  return t\nend", "  local digits = {}\n  local count = 0\n \
    \ for i = 1, #x do\n    local digit = x[i]\n    if not digit then \n      break\n\
    \    end\n    if not digits[digit] then\n      table.insert(digits, digit)\n \
    \     count = count + 1\n    end\n  end\n  if count == 0 then \n    return {}\n\
    \  end\n  \n  table.sort(digits, function(a,b) return tonumber(a) < tonumber(b)\
    \ end)\n  -- reverse the sorted digits \n  local reversed = {}\n  for i = #digits,\
    \ 1, -1 do\n    reversed[#reversed + 1] = digits[i]\n  end\n  \n  return reversed\n\
    end", "   if x == nil then\n      return nil\n   else\n      local v = {}\n  \
    \    for i=1, #x do \n         local t = tostring(x[i])\n         local digit\
    \ = tostring(t:sub(1, 1))\n         if digit:sub(1, 1) ~= \"\" then\n        \
    \    table.insert(v, digit)\n         end\n      end\n      return v\n   end\n\
    end", "  -- Base case\n  if #x > 0 then\n    -- Find first element that haven't\
    \ even digit\n    local i = 1\n    while not x[i] and not x[i-1] do\n      i =\
    \ i + 1\n    end\n    -- Remove this element\n    x[i] = nil\n    -- Add rest\
    \ of elements\n    for j = i+1, #x do\n      x[j] = nil\n    end\n    -- Return\
    \ unique element\n    return unpack(x)\n  end\n  return {}\nend", "  local table\
    \ = {}\n  local i = 1\n  while i < #x do\n    if x[i] % 2 ~= 0 then\n      table.insert(table,\
    \ x[i])\n    end\n    i = i + 1\n  end\n  return table\nend", "    local result\
    \ = {}\n    for key, value in pairs(x) do\n        if value % 2 == 0 then\n  \
    \          table.insert(result, value)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local result = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 ~= 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return table.sort(result)\n\
    end", "\tlocal result = {}\n\tlocal i = 1\n\twhile i <= #x do\n\t\tlocal digit\
    \ = x[i]\n\t\tlocal count = result[i]\n\t\tif count == nil then\n\t\t\tresult[i]\
    \ = digit\n\t\telseif digit == count then\n\t\t\tresult[i] = digit + 1\n\t\telse\n\
    \t\t\tresult[i - 1] = digit\n\t\t\tresult[i] = count\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend", "    local table = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert( x, x[i] )\n        end\n\
    \    end\n    return table\nend", "    local n = #x\n    local evens = {}\n  \
    \  for i = 1, n do\n        if x[i] % 2 ~= 0 then\n            table.insert(evens,\
    \ x[i])\n        end\n    end\n    table.sort(evens)\n    return evens\nend",
  "    local results = {}\n    for i = 1, #x do\n        if x[i] > 0 then\n      \
    \      local pos = 1\n            while x[i] > 0 do\n                if x[i] %\
    \ 2 ~= 0 then\n                    table.insert(results, x[i]) -- Insert element\n\
    \                    x[i] = math.floor(x[i] / 2) -- Delete last digit\n      \
    \              break\n                else\n                    x[i] = math.floor(x[i]\
    \ / 2) -- Delete last digit\n                end\n                pos = pos +\
    \ 1\n            end\n            if pos ~= #x[i] then -- Insert element\n   \
    \             table.insert(results, x[i])\n            end\n        end\n    end\n\
    \    return results\nend", "  local function add_digit(t, n)\n    for i = #t,\
    \ 1, -1 do\n      if t[i] == n then\n        t.[i] = n\n        return\n     \
    \ end\n    end\n    t.[#t+1] = n\n  end", "   local n = {}\n   for i = 1, #x do\n\
    \      table.insert(n, x[i])\n   end", "  local d = {}\n  local pos = 1\n  while\
    \ pos <= #x do\n    if not x[pos] % 2 then\n      if #d > 0 then\n\ttable.insert(d,\
    \ x[pos])\n      end\n      pos = pos + 1\n    end\n    pos = pos + 1\n  end\n\
    \  return d\nend", "  -- Only for integers\n  if type(x) == 'number' then\n  \
    \  local result = {}\n    local i = 0\n    while i < #x and x > 0 do\n      local\
    \ t = math.floor(x/10)\n      x = x - math.floor(x/10)*10\n      if t % 2 == 0\
    \ then\n        if result[#result+1] == nil then\n          result[#result+1]\
    \ = t\n        end\n      end\n      i = i + 1\n    end\n    if x == 0 then\n\
    \      return result\n    elseif i == 0 then\n      return {}\n    end\n  end\n\
    end", "    local res = {}\n    for i,v in pairs(x) do\n        if v % 2 == 0 then\n\
    \            if v ~= math.floor(v) then\n                res[#res+1] = v\n   \
    \         end\n        end\n    end\n    return res\nend\n</cell>\n<cell>", " \
    \ local result = {}\n  local table_size = _g(x)\n  for i=1,table_size-1 do\n \
    \   local current_digit = x[i]\n    if current_digit > 0 then\n      local found_digit\
    \ = nil\n      for j=1,table_size-2 do\n        if x[j] % current_digit == 0 then\n\
    \          found_digit = j\n          break\n        end\n      end\n      if\
    \ found_digit == nil then\n        result[#result+1] = current_digit\n      end\n\
    \    end\n  end\n  return result\nend", "    -- Pre: x is a table\n    -- Post:\
    \ return a table of non-repeating digits of x.\n    local digits = {}\n    local\
    \ result = {}\n    for _, v in pairs(x) do\n        digits[v] = true\n    end\n\
    \    for k = 1, #x do\n        if digits[k] then\n            for v = k + 1, #x\
    \ do\n                if digits[v] and v % k == 0 then\n                    table.insert(result,\
    \ v)\n                end\n            end\n        end\n    end\n    return setmetatable(result,\
    \ { __index = tbl })\nend", "  local result = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    if result[digit] == nil then\n      result[digit] =\
    \ i\n    end\n    i = i + 1\n  end\n  return result\nend", "  local n = #x\n \
    \ local m = {}\n  local index = 1\n  for i = 1, n do\n    local digit = x[i]\n\
    \    if not m[digit] then\n      table.insert(m, digit)\n      index = index +\
    \ 1\n    end\n  end\n  if index <= n then\n    return table.sort(m)\n  end\n \
    \ return m\nend", "   local ret = {}\n   for i = 1, #x do\n      local tmp = x[i]\n\
    \      local last = tmp\n      for j = i + 1, #x do\n         local tmp = x[j]\n\
    \         if (tmp % 2 == 0) and (tmp % 10 == 0) then\n            tmp = math.floor(tmp\
    \ / 10)\n            if tmp == last then break end\n            last = tmp\n \
    \        end\n      end\n      if last ~= tmp then\n         table.insert(ret,\
    \ tmp)\n      end\n   end\n   return ret\nend", "   -- Create empty table\n  \
    \ local tbl = {}\n   \n   -- Loop through each element in the input table\n  \
    \ for i = 1, #x do\n      -- Add each element in the input table to table\n  \
    \    tbl[#tbl + 1] = x[i]\n   end", "    local result = {}\n    for i = 1, #x\
    \ do\n        local remainder = math.fmod(x[i], 10)\n        local newDigit =\
    \ x[i]\n        -- if remainder is 0 then this number is even\n        if remainder\
    \ == 0 then\n            table.insert(result, newDigit)\n        end\n    end\n\
    \    return table.concat(result, '-')\nend", "\tlocal ret = {}\n\t-- First pass:\
    \ Check odd digits and make them unique.\n\tfor i = 1, #x do\n\t\tif x[i] % 2\
    \ ~= 0 then\n\t\t\t-- Find first odd digit.\n\t\t\tlocal odd_idx = 1\n\t\t\twhile\
    \ x[i] % 2 == 0 and i <= #x do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\t-- Replace\
    \ it.\n\t\t\tx[i] = x[i]/2\n\t\t\t-- Make all digits that follow this one unique.\n\
    \t\t\tfor j = i+1, #x do\n\t\t\t\tx[j] = x[j]/2\n\t\t\tend\n\t\t\t-- Add this\
    \ element.\n\t\t\tfor j = i+1, #x do\n\t\t\t\tret[x[j]] = ret[x[j]] or x[j]\n\t\
    \t\tend\n\t\tend\n\tend\n\t-- Second pass: Add even digits.\n\tfor i = 1, #x do\n\
    \t\tif x[i] % 2 == 0 then\n\t\t\tfor j = i+1, #x do\n\t\t\t\tret[x[j]] = ret[x[j]]\
    \ or x[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend", "\tlocal t = {}\n\t\
    local i = 1\n\twhile i <= #x do\n\t\tlocal found = false\n\t\tfor k, v in pairs(t)\
    \ do\n\t\t\tif v < 10 and tonumber(x[i])%v == 0 then\n\t\t\t\tfound = true\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(t,\
    \ x[i])\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend", "  if #x > 0 then\n\
    \    local ret = {}\n    for i = 1, #x do\n      if i%2 ~= 0 then\n        ret[#ret+1]\
    \ = x[i]\n      end\n    end\n    return ret\n  else\n    return {}\n  end\nend",
  "  local v = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(v,\
    \ x[i])\n    end\n  end\n  table.sort(v)\n  -- return table with unique elements\n\
    \  local t = {}\n  for i = 1, #v do\n    t[#t + 1] = v[i]\n  end\n  return t\n\
    end", "  local seen = {}\n  for i = 1, #x do\n    local d = math.floor(x[i])\n\
    \    if seen[d] == true then\n      table.remove(x, i)\n      i = i - 1\n    else\n\
    \      table.insert(seen, d)\n    end\n  end\n  return x\nend", "    local output\
    \ = {}\n    \n    for _,item in ipairs(x) do\n        if item % 2 == 0 then\n\
    \            table.insert(output,item)\n        end\n    end\n    table.sort(output)\n\
    \    \n    return output\nend", "  local seen = {}\n  \n  for i = 1, #x do\n \
    \   local digit = x[i]\n    if digit == 0 then\n      -- Skip 0\n      i = i +\
    \ 1\n      \n    elseif digit % 2 == 0 then\n      -- Skip even\n      i = i +\
    \ 1\n      \n    elseif digit == 1 then\n      -- Skip 1\n      i = i + 1\n  \
    \    \n    elseif seen[digit] then\n      -- Already seen\n      i = i + 1\n \
    \     \n    else\n      -- Mark as seen\n      seen[digit] = true\n    end\n \
    \ end\n  \n  return x\nend", "   local i, c = 1, {}\n   for i=1, #x do\n     \
    \ c[#c+1] = x[i]\n   end\n   return c\nend", "   local ans = {}\n   for i = 1,\
    \ #x do\n      local y = x[i] / 10\n      if not (y > 0 and #ans == 0) then\n\
    \         ans[#ans + 1] = x[i]\n      end\n   end\n   return ans\nend", "  local\
    \ seen = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if not seen[digit]\
    \ then\n      seen[digit] = true\n      x[i] = nil\n      table.insert(x, nil)\n\
    \    end\n  end\n  return x\nend", "   local results = {}\n   for i = 1, #x do\n\
    \      if x:sub(i,i) ~= 0 then\n         table.insert(results, x:sub(i,i))\n \
    \     end\n   end\n   return results\nend", "    local t = {}\n    for k, v in\
    \ pairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n  \
    \      end\n    end\n    table.sort(t)\n    return t\nend", "  local ret = {}\n\
    \  for i = 1, math.floor(x) do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  table.sort(ret)\n  return ret\nend", "  local tbl =\
    \ {}\n  local i = 0\n  local size = #x\n  for i = 1,size do\n    if x[i] % 2 ==\
    \ 0 then\n      tbl[#tbl+1] = x[i]\n    end\n  end\n  return tbl\nend", "    local\
    \ i, j, k, l, m\n    for i = 2, #x do\n        local y = x[i]\n        for j =\
    \ 1, #y do\n            local d = y[j]\n            for k = 1, #x do\n       \
    \         if x[k] == d then\n                    x[k] = nil\n                \
    \    -- Found a number that has been seen already.\n                    break\n\
    \                end\n            end\n        end\n    end\n    -- sort in increasing\
    \ order.\n    for i = 1, #x do\n        if x[i] == nil then\n            table.insert(x,\
    \ i)\n        end\n    end\n    return x\nend", "  local y = {}\n  for i = 1,#x\
    \ do\n    if x[i] % 2 == 0 then\n      y[#y+1] = x[i]\n    end\n  end\n  return\
    \ y\nend", "  local res = {}\n  for i = 1, #x do\n    if x % 2 == 0 and res[x\
    \ % 10] == nil then\n      res[x % 10] = x\n    end\n  end\n  return res\nend",
  "  local results = {}\n  for i = 1, x:size() do\n    if x:index(i) ~= 0 then\n \
    \     if x:index(i) ~= x:index(i - 1) then\n        results[#results + 1] = x:index(i)\n\
    \      end\n    end\n  end\n  return table.sort(results)\nend", "    local n =\
    \ 1\n    local ans = {}\n    for _, val in pairs(x) do\n        val = val * 10\n\
    \        n = n ^ val\n    end\n    local i = 0\n    while n > 0 do\n        if\
    \ n % 2 ~= 0 then\n            table.insert(ans, i)\n        end\n        n =\
    \ n / 10\n        i = i + 1\n    end\n    table.sort(ans, function(a, b) return\
    \ x[a] < x[b] end)\n    return ans\nend", "   local n = 1\n   local y = {}\n \
    \  for i = 1, #x do\n      local d = math.abs(x[i])\n      n = n * 10 + d\n  \
    \    if n % 2 == 0 then\n         y[#y+1] = x[i]\n      end\n   end\n   return\
    \ y\nend", "    local ans = {}\n    for i=1,#x do\n        local d = x[i]\n  \
    \      if d > 0 then\n            local div = 10\n            while div > 0 and\
    \ div < d do\n                div = div * 10\n            end\n            if\
    \ div == 0 then\n                ans[#ans+1] = d\n            end\n        end\n\
    \    end\n    table.sort(ans)\n    return ans\nend", "  local new_table = table(x)\n\
    \  for i=1,#new_table do\n    if new_table[i]%2 ~= 0 then return new_table end\n\
    \  end\n  return new_table\nend", "  local result = {}\n  local last_digit = {}\n\
    \  for i = 1, #x do\n    local digit = x[i]\n    if digit < 10 then\n      if\
    \ last_digit[digit] ~= nil then\n        -- We already have a non-unique digit.\n\
    \        result[#result + 1] = digit\n      end\n      -- Record last digit.\n\
    \      last_digit[digit] = digit\n    end\n  end\n  return result\nend", "  local\
    \ digits = {}\n  for i = 1, #x do\n    local dig = x[i]\n    if not dig or dig\
    \ == 0 then\n      table.insert(digits, 0)\n    else\n      local num = \"\"\n\
    \      for j = 1, dig do\n        num = num..\"1\"\n      end\n      table.insert(digits,\
    \ tonumber(num))\n    end\n  end\n  table.sort(digits)\n  local ans = {}\n  for\
    \ i = 1, #digits do\n    table.insert(ans, digits[i])\n  end\n  return ans\nend",
  "  local n = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if math.floor(x[i]\
    \ / 10) == 0 then -- x[i] is an integer\n      n[#n+1] = digit\n    end\n  end\n\
    \  table.sort(n)\n  \n  -- return n\n  return n\nend", "  local n = #x\n  assert(n\
    \ > 1, 'x should contain at least one element.')\n  local ret = {}\n  local i\
    \ = n - 1\n  while i >= 0 do\n    -- Skip even digits.\n    if x[i] % 2 ~= 0 then\n\
    \      -- Add digits to ret.\n      table.insert(ret, x[i])\n    end\n    -- Move\
    \ i back.\n    i = i - 1\n  end\n  return ret\nend", "    local map = {}\n   \
    \ local set = {}\n    local i = 0\n    for v in pairs(x) do\n        if v > 0\
    \ then\n            i = i + 1\n            for j = i, #x do\n                if\
    \ x[j] == v then\n                    table.insert(set, v)\n                 \
    \   break\n                end\n            end\n            map[tostring(v)]\
    \ = tostring(v)\n        end\n    end\n    return set\nend", "   -- Precondition:\
    \ x should be an integer.\n   if x ~= math.floor(x) or x == 0 then\n      -- Errors.\n\
    \      return nil\n   end\n   local result = {}\n   local t = {}\n   for i = 1,\
    \ x do\n      t[i] = i\n   end\n   for i = 2, x do\n      local digit = math.floor(i/10)\n\
    \      if t[i] ~= digit then\n         result[#result+1] = i\n      end\n   end\n\
    \   return result\nend", "  local y = {}\n  for i = 1, #x do\n    -- if the current\
    \ number is even, add it to the table\n    if x[i] % 2 == 0 then\n      table.insert(y,\
    \ x[i])\n    end\n  end\n  table.sort(y) -- Sort the table in ascending order\n\
    \  return y \nend", "   local results = {}\n   for i = 1,#x do\n      local digit\
    \ = x[i]\n      if not result[digit] then\n         result[digit] = true\n   \
    \      if result[digit] == true then\n            results[#results + 1] = digit\n\
    \         end\n      end\n   end\n   return results\nend", "  local t = {}\n \
    \ for _,v in pairs(x) do\n    if v <= 0 then\n      table.insert(t,v)\n    else\n\
    \      local m = math.floor(math.log(v,10))\n      if m ~= 0 and m < 9 then\n\t\
    local m = math.floor(math.log(v,10))\n\tlocal n = v % (10^m)\n\ttable.insert(t,n)\n\
    \      else\n\ttable.insert(t,v)\n      end\n    end\n  end\n  return t\nend",
  "\tlocal unique_digit_dict = {}\n\t\n\tlocal num_digits = math.floor(math.log(#x)\
    \ / math.log(10))\n\t\n\tfor i = 1, num_digits do\n\t\tlocal element = math.floor(x\
    \ * (10 ^ i))\n\t\t\n\t\tif not unique_digit_dict[element] then\n\t\t\tunique_digit_dict[element]\
    \ = true\n\t\tend\n\tend\n\t\n\t-- Now remove all elements with even digit.\n\t\
    for k, element in pairs(x) do\n\t\tif not unique_digit_dict[element] then\n\t\t\
    \tx[k] = nil\n\t\tend\n\tend\n\t\n\t-- Sort and return table.\n\ttable.sort(x)\n\
    \treturn x\nend", "  local table = {}\n  for _,v in pairs(x) do\n    if v ~= 0\
    \ then\n      for _, k in pairs(math.floor(v)) do\n        if k % 2 == 0 then\n\
    \          table.insert(table, v)\n          break\n        end\n      end\n \
    \   end\n  end\n  return table\nend", "    local seen = {}\n    local function\
    \ helper(x)\n        local seen = {}\n        local t = {}\n        for i = 1,\
    \ #x do\n            local dig = 1\n            while ((x % 10) * 10) <= i do\n\
    \                dig *= 10\n                i = i / 10\n            end\n    \
    \        if dig >= i then\n                if seen[dig] == nil then\n        \
    \            table.insert(t, i)\n                    seen[dig] = true\n      \
    \          end\n            else\n                return nil\n            end\n\
    \        end\n        table.sort(t)\n        return t\n    end\n    if #x > 1\
    \ then\n        return helper(x)\n    else\n        local tt = {}\n        for\
    \ i = 1, #x do\n            local dig = 1\n            while ((x % 10) * 10) <=\
    \ i do\n                dig *= 10\n                i = i / 10\n            end\n\
    \            if dig > i then\n                if tt[dig] == nil then\n       \
    \             table.insert(tt, dig)\n                end\n            else\n \
    \               return nil\n            end\n        end\n        return tt\n\
    \    end\nend", "    local function hasEvenDigit(x)\n        for i = 2, #x do\n\
    \            if x:sub(i,i) ~= 0 then\n                return true\n          \
    \  end\n        end\n        return false\n    end\n    return table.sort(x:gmatch(tostring)\
    \ .. '0'):filter(hasEvenDigit)\nend", "\tlocal results = {}\n\tfor i, v in pairs(x)\
    \ do\n\t\tlocal digit = math.floor(math.log(x, 10) / math.log(10))\n\t\t\n\t\t\
    if digit == 0 then\n\t\t\tassert(x[i] == v)\n\t\tend\n\t\t\n\t\tif results[digit]\
    \ == nil then\n\t\t\ttable.insert(results, digit)\n\t\tend\n\tend\n\t\n\tfor i,\
    \ v in pairs(results) do\n\t\tif v == 0 then\n\t\t\ttable.remove(results, i)\n\
    \t\tend\n\tend\n\t\n\tassert(#results == 0)\n\t\n\treturn results\nend", "  local\
    \ result = {}\n  for _, v in pairs(x) do\n    local digit = math.floor(v / 10)\n\
    \    if digit % 2 == 0 then\n      result[digit] = true\n    end\n  end\n  return\
    \ result\nend", "  -- Sort the table in increasing order.\n  -- This may fail\
    \ in case x is empty or contains only zeros.\n  x = sort(x)", "   assert(type(x)\
    \ == \"table\")\n   local new_x = {}\n   for _, value in pairs(x) do\n      local\
    \ new_value = math.floor(value/10)\n      if not new_x or new_x > new_value then\n\
    \         table.insert(new_x, new_value)\n      end\n   end\n   return new_x\n\
    end", "\tlocal function has_even_digit(n)\n\t\treturn (n >= 0) and (n <= 9) and\
    \ (n%2 == 0)\n\tend\n\tlocal function get_next(n)\n\t\tlocal count = 0\n\t\tlocal\
    \ next\n\t\tfor i = n, 1, -1 do\n\t\t\tif has_even_digit(i) then\n\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tif count > 1 then\n\t\t\t\t\tnext = true\n\t\t\t\telse\n\
    \t\t\t\t\tnext = i\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn next\n\tend\n\t\
    local function get_next_by_number(x)\n\t\tlocal count = x.next\n\t\treturn {x,\
    \ count}\n\tend\n\tlocal function get_next_by_table(x)\n\t\tlocal count = x.count\n\
    \t\treturn {x.x, count}\n\tend\n\tlocal function has_x_or_next(t)\n\t\treturn\
    \ (t.next ~= nil) or (t.count ~= nil)\n\tend\n\tlocal next_by_number = get_next_by_number(x)\n\
    \tlocal next_by_table = get_next_by_table(x)\n\tlocal result\n\tdo\n\t\tlocal\
    \ next_by_next = has_x_or_next(next_by_number) or has_x_or_next(next_by_table)\n\
    \t\tif next_by_next then\n\t\t\tlocal next_x = get_next(next_by_next)\n\t\t\t\
    local next_count = get_next_by_table(next_x)\n\t\t\tresult = next_by_next\n\t\t\
    \tresult.next = next_x\n\t\t\tresult.count = next_count\n\t\telse\n\t\t\tresult\
    \ = next_by_number\n\t\tend\n\tend\n\treturn result\nend", "   local table = {}\n\
    \   for i=1, #x do\n      if x[i]%2==0 then\n         table.insert(table, x[i])\n\
    \      end\n   end\n   table.sort(function(a, b) return a < b end)\n   return\
    \ table\nend", "  local res = {}\n  for i = 1, #x do\n    local elem = x[i]\n\
    \    -- if elem < 10, this elem has even digit\n    -- so I append this elem to\
    \ res table\n    if elem > 9 then\n      res[#res+1] = elem\n    end\n  end\n\
    \  return res\nend", "    local t = {}\n    for i = 1, x:size() do\n        if\
    \ x:get(i) ~= 0 then\n            table.insert(t, x:get(i))\n        end\n   \
    \ end\n    return t\nend", "    local results = {}\n    for i = 1, #x do\n   \
    \     local digit = x[i]\n        if not isnumber(digit) then\n            return\
    \ nil\n        end\n        if math.fmod(digit, 2) == 0 then\n            table.insert(results,\
    \ digit)\n        end\n    end\n    table.sort(results)\n    return results\n\
    end", "  local seen = {}\n  local ret = {}\n  local i = 1\n  while i <= #x do\n\
    \    if x[i] >= 10 then\n      table.insert(ret, x[i])\n    elseif x[i]*10 > i\
    \ then\n      table.insert(ret, x[i]*10)\n    end\n    i = i + 1\n  end\n  return\
    \ ret\nend", "  local ans = {}\n  local digit_counts = {}\n  local i = 0\n  for\
    \ v in pairs(x) do\n    local digit_count = digit_counts[v]\n    if digit_count\
    \ then\n      digit_counts[v] = digit_count + 1\n    else\n      digit_counts[v]\
    \ = 1\n    end\n    i = i + 1\n  end\n  for _, v in pairs(digit_counts) do\n \
    \   local count_v = digit_counts[v]\n    ans[#ans+v] = v\n    if count_v ~= 1\
    \ then\n      local k = (count_v - 1) / (count_v - 1)\n      for j = 1, k do\n\
    \        local k = j * (j - 1)\n        local digit = count_v - k\n        ans[#ans\
    \ + digit] = v\n      end\n    end\n  end\n  table.sort(ans)\n  return ans\nend",
  "    local sorted_x = table.sort(x)\n    local unique_digit = {}\n    for i = 1,\
    \ #sorted_x do\n        if sorted_x[i] % 2 ~= 0 then\n            table.insert(unique_digit,\
    \ sorted_x[i])\n        end\n    end\n    return unique_digit\nend", "  local\
    \ sorted_x = {}\n  table.sort(x)\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(sorted_x, x[i])\n    end\n  end\n  return sorted_x\nend",
  "   if #x == 0 then\n      return {}\n   end\n   local table = {x[1]}\n   for i\
    \ = 2, #x do\n      if x[i] % 2 == 0 then\n         table.insert(table, x[i])\n\
    \      else\n         table.insert(table, x[i])\n         table.insert(table,\
    \ x[i])\n      end\n   end\n   return table\nend", "  local function f(x)\n  \
    \  local new_x = x:gsub(\"%d+\", function (a) return tonumber(a) end)\n    return\
    \ new_x:gsub(\"0\", function (a) return a end):gsub(\"[^0-9]+\", function (a)\
    \ return a end)\n  end\n  local i = 1\n  local n = #x\n  local results = {}\n\
    \  for i = 1, n do\n    local d = f(x[i])\n    if d then\n      results[i] = d\n\
    \    end\n  end\n  for i = 2, n do\n    if results[i] and results[i-1] then\n\
    \      local j = i-1\n      while j > 0 and results[j] then\n        if results[j]\
    \ < results[i] then\n          table.insert(results, j)\n        end\n       \
    \ j = j - 1\n      end\n    end\n  end\n  return results\nend", "  -- The first\
    \ element in x is unique.\n  if #x > 1 then\n    -- The first element is not unique.\n\
    \    local first = x[1]\n    -- Iterate through the rest of the array.\n    for\
    \ i = 2, #x do\n      if x[i] ~= first then\n        -- The current element is\
    \ not unique.\n        return x\n      end\n    end\n  else\n    -- The input\
    \ is an empty table. Return an empty table.\n    return {}\n  end", "  local seen\
    \ = {}\n  local result = {}\n  for i=1,#x do\n    local digit = x[i]\n    if digit\
    \ == 0 then break end\n    seen[digit] = true\n    result[#result+1] = digit\n\
    \  end\n  return result\nend", "  -- Store sorted unique digits in table (O(nlogn)).\n\
    \  -- This table is later sorted in increasing order.\n  local function unique_digits_helper(digits,\
    \ x)\n    -- Return empty set if x has no even digit.\n    if x%2 ~= 0 then\n\
    \      return {}\n    end\n    -- If x is even and has only even digit, then return\
    \ its digit.\n    if digits[x/2] ~= nil then\n      return digits[x/2]\n    end\n\
    \    -- Add its single digit to the unique digits.\n    digits[x/2] = x\n    --\
    \ If x is odd, then recursively call unique_digits_helper with the \n    -- reduced\
    \ list of digits.\n    if x%2 == 1 then\n      return unique_digits_helper(digits,\
    \ x/2)\n    end\n    -- Return table containing unique digits in increasing order.\n\
    \    return digits\n  end\n  return unique_digits_helper({}, x)\nend", "  local\
    \ t = {}\n  local i = 1\n  while i < #x do\n    local v\n    if x[i] == 0 then\
    \ \n      v = t\n    else\n      local s = x[i]\n      for j = i+1 to #x do\n\
    \        if x[j] == 0 then break end\n        if s == x[j] then\n          table.insert(t,\
    \ x[i])\n          break\n        end\n      end\n    end\n    i = i + 1\n  end\n\
    \  return t\nend", "  -- Store unique digits as table key\n  local result = {}\n\
    \  for i,v in ipairs(x) do\n    table.insert(result, v)\n  end\n  table.sort(result)\n\
    \  return result\nend", "\tlocal ret = {}\n\tfor i=1,math.floor(x/2) do\n\t\t\
    table.insert(ret, x%10)\n\t\tx = math.floor(x/10)\n\tend\n\tif x ~= 0 then\n\t\
    \ttable.insert(ret, x%10)\n\tend\n\treturn ret\nend", "  local result = {}\n \
    \ for k in pairs(x) do\n    local num = tonumber(k)\n    if num == 0 then\n  \
    \    -- empty table\n      continue\n    end\n    local digit = math.floor(math.log(num)/math.log(10))\n\
    \    if digit == 0 then\n      -- no digit\n      result[#result+1] = k\n    else\n\
    \      -- one digit\n      local index = 1 + digit\n      assert(result[#result+1])\n\
    \      while index > #result do\n        result[#result+1] = nil\n      end\n\
    \      result[index+1] = k\n    end\n  end\n  table.sort(result)\n  return result\n\
    end", "\tlocal unique_digits = {}\n\tfor i = 1, #x do\n\t\tlocal digit = x[i]\n\
    \t\tif digit == 0 then\n\t\t\tunique_digits[#unique_digits + 1] = x[i]\n\t\telse\n\
    \t\t\tunique_digits[#unique_digits + 1] = digit\n\t\tend\n\tend\n\treturn unique_digits\n\
    end", "  -- Write your code here.\n  local t = {}\n  for i = 1, x:size() do\n\
    \    if x:index(i) ~= 0 then\n      if not t[math.floor(x:index(i))] then\n  \
    \      t[math.floor(x:index(i))] = true\n      end\n    end\n  end\n  local result\
    \ = {}\n  local i = 1\n  while i <= x:size() and t:len() > 0 do\n    if not t[i]\
    \ then\n      result[i] = i\n      t[i] = nil\n      i = i + 1\n    else\n   \
    \   t[i] = nil\n    end\n  end\n  return result\nend", "  local seen = {}\n  local\
    \ res = {}\n  \n  for i = 1, #x do -- loop through each element of x.\n    --\
    \ Check if the current element is even number without mods.\n    -- If it is,\
    \ then add the current element to the res table.\n    if x[i] % 2 == 0 then \n\
    \      res[#res+1] = x[i]\n    end\n  end\n  \n  for i = 1, #res do -- loop through\
    \ each element of res.\n    -- Check if the current element is odd number without\
    \ mods.\n    -- If it is, then add the current element to the seen table.\n  \
    \  if res[i] % 2 == 1 then\n      seen[#seen+1] = res[i]\n    end\n  end\n  \n\
    \  -- Sort seen table in decreasing order.\n  table.sort(seen, function(a, b)\
    \ return b - a; end)\n  \n  return res\nend", "   local u = {}\n   local s = #x\n\
    \   for i = 1, s do\n      if x:sub(i) ~= 0 then \n         table.insert(u, x:sub(i))\n\
    \      end\n   end\n   return u\nend", "\tlocal ret = {}\n\tlocal count = {}\n\
    \tfor _, v in ipairs(x) do\n\t\tlocal digit = v % 10 \n\t\tif ret[digit] == nil\
    \ then\n\t\t\tret[digit] = true\n\t\t\tcount[digit] = 1\n\t\telse\n\t\t\tcount[digit]\
    \ = count[digit] + 1\n\t\tend\n\tend\n\tfor i = 1, 10 do\n\t\tif not ret[i] then\n\
    \t\t\tret[i] = true\n\t\tend\n\tend\n\treturn ret\nend", "  local d = {}\n  \n\
    \  for i = 1, #x do\n    local a = x[i]\n    for j = 2, #a do -- If an odd digit\n\
    \      if ((a % 10) % 2) ~= 0 then\n        d[a] = nil\n        break\n      else\n\
    \        d[a] = true\n      end\n      a = a / 10\n    end\n  end\n  \n  table.sort(d)\n\
    \  \n  return d\nend", "\tlocal i = 1\n\tlocal results = {}\n\twhile i <= #x do\n\
    \t\tlocal d = math.floor(math.log(i)/math.log(2))\n\t\tif #results[d] == 0 then\n\
    \t\t\tresults[d] = x[i]\n\t\telse\n\t\t\tresults[d] = x[i] + results[d] \n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn results\nend", "    local seen = {}\n    for\
    \ i = 1, #x do\n        seen[x[i]] = true\n    end\n    local results = {}\n \
    \   for i = 1, #x do\n        if seen[x[i]] then\n            results[#results+1]\
    \ = x[i]\n        end\n    end\n    for i = 1, #results do\n        table.sort(results)\
    \ -- Sort elements in increasing order\n        if #results == 1 then\n      \
    \      table.insert(results, results[i])\n        else\n            table.insert(results,\
    \ results[i-1])\n        end\n    end\n    return results\nend", "  if x == nil\
    \ then\n    return {}\n  end\n  local results = {}\n  for i=1, #x do\n    local\
    \ c = x[i]\n    if not c:len() then -- empty string\n      table.insert(results,\
    \ c)\n      continue\n    end\n    local digits = c:find'([%d]+)'):gsub('%d+',\
    \ '%1')\n    local unique_digits = tonumber(digits)\n    if not unique_digits\
    \ then\n      table.insert(results, c)\n      continue\n    end\n    if unique_digits\
    \ % 2 == 0 then\n      table.insert(results, c)\n    end\n  end\n  table.sort(results)\n\
    \  return results\nend\n</cell>\n<code language=julia-1.6>\nx = unique_digits({15,\
    \ 33, 1422, 1})\n@assert x[1] == 1\n@assert x[9] == 1\n@assert x[10] == 1\n</cell>\n\
    <text>\n3. Find a subsequence that repeats a given number of times in a given\
    \ string", "  local i = 1\n  local n = #x\n  local ans = {}\n  while i <= n do\n\
    \    if not is_even(x[i]) then\n      ans[#ans + 1] = x[i]\n    end\n    i = i\
    \ + 1\n  end\n  return ans\nend", "  if #x == 0 then\n    return {}\n  end", " \
    \ local ans = {}\n  for i = 1, #x do\n    local n = x[i]\n    local digits = {}\n\
    \    for j = 1, #n do digits[j] = j; end\n    local unique = true\n    for j =\
    \ 1, #digits do\n      if not unique  and digits[j] == digits[j] then\n      \
    \  unique = false\n      end\n    end\n    if unique then\n      table.insert(ans,\
    \ n)\n    end\n  end\n  return ans\nend", "    local n = #x\n    local t = {}\n\
    \    \n    for i = 1, n do\n        if x[i] > 0 then\n            table.insert(t,\
    \ x[i])\n        end\n    end\n    \n    -- sort by value\n    table.sort(t)\n\
    \    \n    -- remove elements\n    for i = 2, n do\n        if t[i - 1] % t[i]\
    \ ~= 0 then\n            table.remove(t)\n        end\n    end\n    \n    return\
    \ t\nend\n</cell>\n<text>\nFunction to compute all permutations of a list", " \
    \  local function check(x)\n      if x==0 then return nil end\n      if x<10 then\
    \ return x..0 end\n      if x%10==0 then return unique_digits(x/10) end\n    \
    \  return unique_digits(x/10) and x%10\n   end", "  -- Count the number of each\
    \ digit.\n  local digit = {}\n  for i = 1, 10 do\n    digit[i] = 0\n  end\n  for\
    \ i = 1, x:size() do\n    digit[x[i]]  = digit[x[i]] + 1\n  end\n  -- Create a\
    \ sorted table of unseen digits.\n  local new_x = {}\n  for i in pairs(digit)\
    \ do\n    if digit[i] % 2 ~= 0 then\n      table.insert(new_x, i)\n    end\n \
    \ end\n  return new_x\nend", "    local res = {}\n    for i = 2, #x do\n     \
    \   local y = #x\n        for j = 1, y do\n            if (x[j] % i) == 0 then\n\
    \                table.insert(res, x[j])\n            end\n        end\n    end\n\
    \    return res\nend", "\tlocal t = {}\n\tlocal n = 1\n\t\n\tfor i = 2, #x do\n\
    \t\t-- if the number has even digit, skip it.\n\t\tif x[i] % 2 ~= 0 then\n\t\t\
    \tn = 1\n\t\t\t-- break the loop if the number is greater than the previous number.\n\
    \t\t\t-- That means that the number is larger than all previous ones.\n\t\t\t\
    break\n\t\tend\n\t\t\n\t\t-- If the number is larger than any previous number,\
    \ add it into the table.\n\t\tif n > x[i] then\n\t\t\tt[#t+1] = x[i]\n\t\tend\n\
    \tend\n\t\n\treturn t\nend", "  local num_digits = {}\n  for i = 1,#x do\n   \
    \ local c = math.mod(tonumber(x[i]), 1)\n    if not num_digits[c] then\n     \
    \ table.insert(num_digits, c)\n    end\n  end\n  return num_digits\nend", "\t\
    local result = {}\n\t\n\tlocal function is_prime(num)\n\t\t-- Checks if the given\
    \ number is a prime number or not\n\t\tlocal d\n\t\tlocal i\n\t\tfor i = 1, #x\
    \ do\n\t\t\td = x[i]\n\t\t\tif d % 2 == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function check_prime(num)\n\t\t--\
    \ Checks if the given number is prime or not\n\t\tlocal d\n\t\tlocal i\n\t\tfor\
    \ i = 1, #x do\n\t\t\td = x[i]\n\t\t\tif d % 2 == 0 then\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\t\n\tlocal function is_even(n)\n\
    \t\t-- Checks if the given number is even\n\t\tlocal i\n\t\tfor i = 1, #x do\n\
    \t\t\tif x[i] % 2 == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn\
    \ true\n\tend\n\t\n\tlocal function is_odd(n)\n\t\t-- Checks if the given number\
    \ is odd\n\t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i] % 2 ~= 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function\
    \ is_unique_odd(n)\n\t\t-- Checks if the given number is odd unique or not\n\t\
    \tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i] % 2 ~= 0 and x[i] ~= n then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function\
    \ is_unique_even(n)\n\t\t-- Checks if the given number is even unique or not\n\
    \t\tlocal i\n\t\tfor i = 1, #x do\n\t\t\tif x[i] % 2 == 0 and x[i] ~= n then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\n\tfor i,\
    \ v in pairs(x) do\n\t\t-- Checks prime number or not\n\t\tif check_prime(v) ==\
    \ true then\n\t\t\tresult[i] = v\n\t\tend\n\t\t\n\t\t-- Checks even or odd number\
    \ or not\n\t\tif is_even(v) == false then\n\t\t\tresult[i] = v\n\t\tend\n\t\t\n\
    \t\t-- Checks odd unique number or not\n\t\tif is_unique_odd(v) == true then\n\
    \t\t\tresult[i] = v\n\t\tend\n\t\t\n\t\t-- Checks even unique number or not\n\t\
    \tif is_unique_even(v) == true then\n\t\t\tresult[i] = v\n\t\tend\n\tend\n\t\n\
    \t-- Sorts the returned table\n\ttable.sort(result)\n\t\n\treturn result\nend",
  "    local hash = {}\n    local function helper(x)\n        if #x == 0 then\n  \
    \          return nil\n        end\n        local lastdigit = x[1]\n        if\
    \ hash[lastdigit] == nil then\n            hash[lastdigit] = true\n          \
    \  return x\n        end\n        return x\n    end\n    return helper(x)\nend",
  "  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  return result\nend", "  local t = {}\n  for i = 1,\
    \ #x do\n    local v = x[i]\n    if v ~= 0 then \n      t[math.floor(v/10)] =\
    \ v\n    end\n  end\n  return t\nend", "\tlocal table = {}\n\tlocal t\n\tfor i\
    \ = 1, #x do\n\t\tt = x[i]\n\t\twhile t > 0 do\n\t\t\tt = t / 10\n\t\t\tif t ==\
    \ 0 then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\ttable[t] = true\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn table\nend", "  -- Return an empty table if the table is\
    \ empty.\n  if #x == 0 then\n    return {}\n  end\n  -- Initialize a result table\
    \ and add the first element to the result.\n  local result = {}\n  result[1] =\
    \ x[1]\n  -- Iterate over every other element.\n  for i = 2, #x do\n    -- If\
    \ the current element is divisible by two and larger, remove it.\n    if x[i]\
    \ % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  -- Sort the\
    \ result table in increasing order.\n  table.sort(result)\n  -- Return the result\
    \ table.\n  return result\nend", "  -- base case\n  local ret = {}\n  if #x >\
    \ 0 then\n    local v = x[1]\n    if #x > 1 then\n      for i = 2, #x do\n   \
    \     if v%x[i] == 0 then\n          -- remove all even digits.\n          v =\
    \ v%x[i]\n        else\n          table.insert(ret, v)\n        end\n      end\n\
    \    end\n  end\n  return ret\nend", "  local i = 1\n  local result = {}\n  while\
    \ i <= #x do\n    if x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n\
    \    i = i + 1\n  end\n  return result\nend", "  local y = {}\n  for i = 1, #x\
    \ do\n    local d = x[i]\n    if d then\n      y[d] = true\n    end\n  end\n \
    \ table.sort(y)\n  -- print(table.concat(y, \", \"))\n  return y\nend", "    if\
    \ #x == 0 then return { } end\n    if #x == 1 then return x end", "    local tbl\
    \ = {}\n    for i = 1, #x do\n        local v = x[i]\n        if v % 2 == 0 then\n\
    \            table.insert(tbl, v)\n        end\n    end\n    return tbl\nend",
  "   local table = {}\n   local t = {}\n   local i = 1\n   while i <= #x do\n   \
    \   if x[i]%2 == 0 then\n         table.insert(t, x[i])\n      end\n      i =\
    \ i+1\n   end\n   for i = #x - 2, 1, -1 do\n      if t[i] ~= nil then\n      \
    \   table.insert(table, t[i])\n      end\n   end\n   return table\nend", "   \
    \ local ret = {}\n    for _, v in pairs(x) do\n        local n = math.floor(v\
    \ / 10)\n        if not ret[n] then\n            ret[n] = v\n        end\n   \
    \ end\n    return ret\nend", "    if #x == 0 then\n        return {}\n    end",
  "    local result = {}\n    local index\n    -- first pass: check whether every\
    \ element of x is a digit\n    for _, v in pairs(x) do\n        -- check whether\
    \ a number is odd and whether it has a nonzero digit\n        if ( v mod 2 ==\
    \ 0 ) then\n            if index then\n                -- if an element is found\
    \ before another non-zero digit is found,\n                -- we add the smaller\
    \ one to the result.\n                if v < result[index] then\n            \
    \        result[index] = v\n                end\n            else\n          \
    \      -- if an element is found after a non-zero digit is found,\n          \
    \      -- we add the smallest one to the result.\n                result[index]\
    \ = v\n            end\n        end\n        index = nil\n    end\n    -- second\
    \ pass: check whether there is some element that hasn't a nonzero digit\n    for\
    \ i = 2, #result do\n        -- check whether an element is odd and whether it\
    \ has a nonzero digit\n        if ( result[i] mod 2 ~= 0 ) then\n            --\
    \ if there is an element that hasn't a nonzero digit, we can add it\n        \
    \    -- to the result and return it.\n            result[i] = nil\n          \
    \  return result\n        end\n    end\nend", "  if x == nil then\n    return\
    \ {}\n  end\n  local res = {}\n  \n  local function is_odd(x)\n    if x == nil\
    \ then\n      return false\n    end\n    return x % 2 ~= 0\n  end", "  if x then\n\
    \    local table = {}\n    for _, item in pairs(x) do\n      if item % 2 ~= 0\
    \ then\n        table.insert(table, item)\n      end\n    end\n    table.sort(function(x,\
    \ y) return x < y end)\n    return table\n  else\n    return {}\n  end\nend",
  "    local seen = {}\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit == 0 then\n            continue\n        end\n    \
    \    if seen[digit] ~= 1 then\n            ret[#ret+1] = digit\n            seen[digit]\
    \ = 1\n        end\n    end\n    return ret\nend", "  local ret = {}\n  for i\
    \ = 1,#x do\n    if (x:sub(i,i)%2 ~= 0) then\n      table.insert(ret, x:sub(i,i))\n\
    \    end\n  end\n  table.sort(ret)\n  return ret\nend", "  local ret = {}\n  for\
    \ i = 1, 10 do\n    if x[i] % 2 == 0 then\n      if table.find(ret, x[i]) == nil\
    \ then\n        ret[x[i]] = true\n      end\n    end\n  end\n  return ret\nend",
  "  local function is_even(i)\n    return ((i % 2) == 0)\n  end\n  local function\
    \ is_odd(i)\n    return ((i % 2) == 1)\n  end\n  local sorted_x = {}\n  local\
    \ max_x = 0\n  local i = 1\n  local done = false\n  while not done do\n    local\
    \ xd = tostring(x[i])\n    table.insert(sorted_x, xd)\n    i = i + 1\n    if max_x\
    \ ~= 0 and xd ~= max_x then\n      done = true\n    end\n    if i > #x then\n\
    \      done = true\n    end\n    if max_x == 0 then\n      max_x = xd\n    end\n\
    \  end\n  if max_x == 0 then\n    return {}\n  end\n  for i = 1, #x do\n    if\
    \ tostring(x[i]) == max_x then\n      table.insert(sorted_x, max_x)\n    end\n\
    \  end\n  return sorted_x\nend", "   local t = {}\n   for i = 1, #x do \n    \
    \  if i % 2 == 0 then table.insert(t, x[i]) end\n   end\n   return t\nend", " \
    \  local num_digits = {}\n   local i = 1\n   while i <= #x do \n      num_digits[i]\
    \ = x[i]\n      i = i + 1\n   end\n   table.sort(num_digits, function(a,b) return\
    \ a > b end)\n   local j = 1\n   while j <= #num_digits do\n      local element\
    \ = num_digits[j]\n      local k = 1\n      while k + 2 <= #num_digits do\n  \
    \       if num_digits[k] == element then\n            table.insert(num_digits,\
    \ element) -- replace \n         end\n         k = k + 1\n      end\n      j =\
    \ j + 1\n   end\n   return num_digits\nend\n</cell>\n<text>\nExercise 2\nImplement\
    \ the function to_number() that takes two arguments x and y, and returns true\
    \ if\nx is a number in base 10 and y is an integer in base 10. For example:\n\
    >>> to_number(4, 2)\nTrue\n>>> to_number(10, 10)\nTrue\n>>> to_number(5, 2)\n\
    False\n>>> to_number(5, 5)\nFalse", "\tlocal res = {}\n\tlocal digits = {}\n\t\
    for i = 1, #x do\n\t\tdigits[x[i]] = 1\n\tend\n\t-- check each digit\n\tfor i\
    \ = 1, 10 do\n\t\tif not digits[i] then\n\t\t\tres[i] = x[i]\n\t\tend\n\tend\n\
    \treturn res\nend", "   if #x > 0 then\n      local i = #x\n      local table\
    \ = {}\n      while i > 0 do\n         if x[i / 2] > 0 then\n            table.insert(table,\
    \ x[i / 2])\n         end\n         i = i / 2\n      end\n      return table\n\
    \   else\n      return {}\n   end\nend", "\t-- Create an empty table to hold the\
    \ answer.\n\tlocal y = {}\n\t\n\t-- Keep track of the number of digits in each\
    \ integer.\n\tfor i = 1, #x do\n\t\tlocal n = tonumber(string.sub(x,i,i))\n\t\t\
    if n == 0 then\n\t\t\ttable.insert(y, nil)\n\t\telseif n > 1 then\n\t\t\tfor d\
    \ = 2, n do\n\t\t\t\ttable.insert(y, d - 1)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(y,\
    \ n)\n\t\tend\n\tend\n\t\n\t-- Sort the table in descending order (i.e. largest\
    \ integer first).\n\ttable.sort(y, function(a,b) return b - a end)\n\t\n\t-- Return\
    \ just the unique elements.\n\tfor i = 1, #y do\n\t\tlocal n = y[i]\n\t\tif n\
    \ ~= 0 then\n\t\t\tlocal p = math.floor(n/10)\n\t\t\ttable.insert(y, p - 1)\n\t\
    \t\ttable.insert(y, n % 10)\n\t\tend\n\tend\n\t\n\treturn y\nend", "  -- We use\
    \ two auxiliary vectors to find out if each number has any \n  -- even digit.\n\
    \  local v\n  local vv\n  v = {}\n  vv = {}\n  for i = 1, #x do\n    local tmp\
    \ = x[i]\n    local found = true\n    for j = 1, #v do\n      if tmp % 10 == 0\
    \ then\n        found = false\n        break\n      end\n    end\n    if found\
    \ then\n      table.insert(v, tmp)\n    else\n      table.insert(vv, tmp)\n  \
    \  end\n  end", "  -- Return an empty table if nil is passed.\n  if x == nil then\n\
    \    return {}\n  end", "  local table = {}\n  for i = 1, #x do\n    local is_even\
    \ = false\n    for j = 1, #x do\n      if x[i] == x[j] and j > i then\n      \
    \  is_even = true\n        break\n      end\n    end\n    if is_even then\n  \
    \    table.insert(table, x[i])\n    end\n  end\n  return table\nend", "   if x\
    \ == nil then return end\n   local newTable = {}\n   for i = 1, #x do\n      if\
    \ x[i] % 2 == 0 then\n         table.insert(newTable, x[i])\n      end\n   end\n\
    \   return newTable\nend", "    local t = {}\n    for i = 1, #x do\n        local\
    \ n = 1\n        for j = 1, i do\n            if x[i] == x[j] then\n         \
    \       n = n * 10\n            else\n                n = n + 1\n            \
    \    break\n            end\n        end\n        if n % 2 == 0 then\n       \
    \     table.insert(t, x)\n        end\n    end\n    return t\nend", "  local n\
    \ = {} -- Table of unique digits\n  local key\n  for key in pairs(x) do \n   \
    \ if x[key] == 0 then -- Found a zero. Skip it\n      table.remove(x, key)\n \
    \     next\n    end\n    table.insert(n, math.floor(x[key] / 10))\n  end\n  table.sort(n)\n\
    \  return n\nend", "  local result = {}\n  for i = 1, #x do\n    if not is_divisible_by(x[i],\
    \ 10) then \n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end", "  local table = {}\n  local max = 0\n  for _, v in pairs(x) do\n    if\
    \ v > max then\n      max = v\n    end\n  end\n  local count = 0\n  local max\
    \ = max\n  while max > 0 and count < max do\n    local cur = max\n    max = max\
    \ - 1\n    if x[cur] ~= 0 and x[cur] % 2 == 0 then\n      table.insert(table,\
    \ cur)\n    end\n    count = count + 1\n  end\n  return table\nend", "  if #x\
    \ > 0 then\n    local function get_digits(x)\n      if x then\n        local i,\
    \ y = 0, x\n        local results = {{x = y}}\n        while y do\n          y,\
    \ i = y % 10, i + 1\n          if i == 0 then\n            table.insert(results,\
    \ {x = y})\n          end\n        end\n        return results\n      else\n \
    \       return nil\n      end\n    end", "  local results = {}\n  local index\
    \ = 1\n  local max = table.getn(x)\n  local last_digit = 0\n  for i=1, max do\n\
    \    local digit = math.floor(x[index] / 10)\n    if digit == last_digit then\n\
    \      results[#results + 1] = last_digit\n    elseif digit % 2 == 0 then\n  \
    \    table.insert(results, digit)\n    end\n    last_digit = digit\n    index\
    \ = index + 1\n  end\n  return results\nend", "\tlocal function sort_table(t,\
    \ v)\n\t\treturn t[#t] ~= nil and v or t + {v}\n\tend", "  if x==nil then return\
    \ nil end\n  local ret = {}\n  local len = #x\n  local digit", "   local ret =\
    \ {}\n   for i = 1, #x do\n      local digit = x[i]\n      local numDigit = 0\n\
    \      for j = 1, #digit do\n         if digit[j] ~= 0 then\n            numDigit\
    \ = numDigit + 1\n         end\n      end\n      if numDigit == 0 then\n     \
    \    table.insert(ret, digit)\n      end\n   end\n   return ret\nend\n   ", " \
    \ local table = {}\n  local n = 1", "  local ret = {}\n  for i = 1, 100 do\n \
    \   if x[i] ~= 0 then \n      ret[#ret + 1] = x[i]\n    end\n  end\n  return ret\n\
    end", "    -- Return an empty table if x is nil\n    if x then\n        -- Initialize\
    \ table with nil\n        local t = {x}\n        -- Add elements from x whose\
    \ corresponding digit is not even\n        for i = 1, 10 do\n            -- If\
    \ x's corresponding digit is even, add it to t\n            if x[i] % 2 == 0 then\n\
    \                table.insert(t, x[i])\n            end\n        end\n       \
    \ -- Return the result of x\n        return t\n    end\n    -- Return an empty\
    \ table if the input was nil\n    return {}\nend", "  if #x == 0 then\n    return\
    \ {}\n  end\n  \n  local d = unpack(x)\n  local ret = {}\n  \n  for i = 1, #d\
    \ do\n    local tmp = t[math.floor(d[i] / 10)]\n    if tmp == nil then\n     \
    \ t[#t + 1] = math.floor(d[i] / 10)\n      t[#t] = tmp\n    end\n  end\n  \n \
    \ local last = 1\n  for i = #t, 2, -1 do\n    table.insert(ret, t[last])\n   \
    \ last = i + 1\n  end\n  return ret\nend", "    local function f(n)\n        if\
    \ x[n] == nil then return n else return f(x[n]) or n end\n    end\n    local ret\
    \ = {}\n    for i = 2, 10 do\n        table.insert(ret, f(i))\n    end\n    return\
    \ ret\nend", "  local result = {}\n  for i = 1, #x do\n    if not result[math.floor(x[i])]\
    \ then\n      result[math.floor(x[i])] = true\n    end\n  end\n  return result\n\
    end", "  local i = 1\n  local table = nil\n  while i <= #x do\n    if x[i] % 2\
    \ == 0 then\n      table = {x[i]}\n    else\n      table = {x[i], table[1]}\n\
    \    end\n    i = i + 2\n  end\n  return table\nend", "  local tbl = {}\n  local\
    \ i = 1\n  for k in pairs(x) do\n    if math.floor(k) % 2 == 0 then\n      table.insert(tbl,\
    \ k)\n    else\n      i = i + 1\n    end\n  end\n  table.sort(tbl)\n  return tbl\n\
    end", "  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(t,\
    \ x[i])\n    end\n  end\n  return t\nend", "  local sets = {}\n  for i=1,#x do\n\
    \    local digit = x[i]\n    if not sets[digit] then\n      sets[digit] = x\n\
    \      table.insert(sets, digit)\n    end\n  end\n  \n  local output = {}\n  for\
    \ i=1,#sets do\n    if not sets[i] then\n      table.insert(output, sets[i])\n\
    \    end\n  end\n  \n  for i=1,#sets do\n    table.sort(sets[i], function(left,\
    \ right)\n      local leftNum = tonumber(left)\n      local rightNum = tonumber(right)\n\
    \      local result = math.abs(leftNum - rightNum)\n      return result\n    end)\n\
    \  end\n  \n  return output\nend", "  local seen = {}\n  local results = {}\n\
    \  for i=1,#x do\n    if seen[x[i]] then break end\n    seen[x[i]] = true\n  \
    \  results[#results+1] = x[i]\n  end\n  return results\nend", "  local output\
    \ = {}\n  local keys = {}\n  local counts = {}\n  for i,k in pairs(x) do\n   \
    \ if counts[k] ~= 0 then\n      output[counts[k]] = k\n      counts[k] = counts[k]\
    \ + 1\n    else\n      keys[k] = i\n      counts[1] = counts[1] + 1\n    end\n\
    \  end\n  for k,v in pairs(keys) do\n    output[v] = x[k]\n  end\n  return output\n\
    end", "  local i = 1\n  local result = {}\n  while i <= #x do\n    local n = x[i]\n\
    \    if n % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n    i = i\
    \ + 1\n  end\n  table.sort(result)\n  return result\nend", "  if #x <= 0 then\n\
    \    return {}\n  end", "    local res = {}\n    for i, v in ipairs(x) do\n  \
    \      for j=1, v do\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\n</cell>\n<cell>", "  if x == nil then\n\
    \    return nil\n  elseif #x == 1 then\n    return setmetatable({x[1]}, tablefunc)\n\
    \  else\n    local ret = {}\n    for i = 2, #x do\n      if x[i - 1] % 2 == 0\
    \ then\n        ret[#ret + 1] = x[i - 1]\n      end\n    end\n    return setmetatable(ret,\
    \ tablefunc)\n  end\nend", "  -- Base case\n  if #x > 1 then\n    local table\
    \ = {}\n    -- Loop over all the numbers and find all the number without even\
    \ digit\n    for i=1,#x do\n      local digits = x[i]/math.floor(math.log(x[i],10))\n\
    \      if digits > 0 then\n        -- If there are no even digit, add it to the\
    \ return table\n        if digits % 2 == 0 then\n          table.insert(table,\
    \ x[i])\n        end\n      end\n    end\n    -- Sort the result table\n    table.sort(function\
    \ (x,y) return x:tonumber() > y:tonumber() end)\n    -- Return the result table\n\
    \    return table\n  end\n  -- Base case\n  return {}\nend", "\tlocal ret = {}\n\
    \tfor i=1,#x do \n\t\tif x[i] % 2 == 0 then \n\t\t\ttable.insert(ret, x[i]) \n\
    \t\tend\n\tend\n\treturn ret\nend", "  if #x == 0 then return {}\n  else\n   \
    \ local n = 1\n    local t = {}\n    for i = 1, #x do \n      local g = tostring(x[i])\n\
    \      \n      -- If current element has even digit, add it to the table if not\
    \ already.\n      if g:sub(1, 1) ~= '0' then\n        local x = g:sub(1, 1)\n\
    \        if not t[x] then\n          t[x] = {}\n          t[x][#t+1] = i\n   \
    \     end\n      end\n      \n      -- Increment n\n      n = n*10 + tostring(g:sub(1,\
    \ 1):byte())\n    end\n    return t\n  end\nend", "  local t = {}\n  for i = 1,\
    \ #x do\n    local c = x[i]\n    if c ~= 0 and c % 2 == 0 then\n      t[#t + 1]\
    \ = x[i]\n    end\n  end\n  return t\nend", "  local n = {}\n  for i = 1, x:len()\
    \ do\n    local s = x:sub(i,i)\n    if s == \"0\" then break end\n    n[s] = n[s]\
    \ and 1 or n[s] + 1\n  end\n  local ans = {}\n  for i = 1, x:len() do\n    if\
    \ n[x:sub(i,i)] ~= 0 then\n      ans[x:sub(i,i)] = n[x:sub(i,i)]\n    end\n  end\n\
    \  return ans\nend", "    if x == nil then\n        return nil\n    end\n    local\
    \ n = 1\n    local res = {}\n    for i = 1, n do\n        if x[i] % 2 == 0 then\n\
    \            table.insert(res, x[i])\n        end\n    end\n    return res\nend",
  "\tlocal v = {}\n\tfor i = 1, #x do\n\t\tlocal y = x[i]\n\t\tlocal i = 1\n\t\twhile\
    \ y ~= 0 do\n\t\t\tif y % 2 == 1 then\n\t\t\t\ty = y / 2\n\t\t\telse\n\t\t\t\t\
    x[i] = y / 2\n\t\t\t\ttable.insert(v, y)\n\t\t\t\ty = y % 2\n\t\t\tend\n\t\t\t\
    i = i + 1\n\t\tend\n\tend\n\treturn v\nend", "    local ret = {}\n    local digit_count\
    \ = {}\n    for i = 1, 10 do\n        digit_count[i] = 0\n    end\n    for v in\
    \ pairs(x) do\n        if digit_count[v] ~= 0 then\n            digit_count[v]\
    \ = digit_count[v] + 1\n        else\n            table.insert(ret, v)\n     \
    \   end\n    end\n    for i = 2, 10 do\n        if digit_count[i] == 0 then\n\
    \            table.insert(ret, i)\n        end\n    end\n    return ret\nend",
  "  local result = {}\n  for _, item in pairs(x) do\n    if item % 2 == 0 then\n\
    \      result[#result + 1] = item\n    end\n  end\n  table.sort(result, function(a,\
    \ b) return a < b end)\n  return result\nend", "  local ret = {}\n  for i = 1,#x\
    \ do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n\
    \  table.sort(ret)\n  return ret\nend", "\tlocal res = {}\n\t-- find unique elements\n\
    \tfor i, v in pairs(x) do\n\t\tif not res[i] then\n\t\t\tres[i] = true\n\t\t\t\
    -- get all digits\n\t\t\tfor _, d in pairs(string.gmatch(\"%.\" .. (10 * i) ..\"\
    d*\", \"%D\")) do\n\t\t\t\t-- return digits that has no any even digit\n\t\t\t\
    \tif v mod math.floor(math.pow(10, #d - 1)) ~= 0 then\n\t\t\t\t\ttable.insert(res,\
    \ v)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t-- sort result\n\treturn table.sort(res)\n\
    end", "  local num_digits = {}\n  for i = 1,#x do \n    local digit = x[i]\n \
    \   if num_digits[digit] == nil then\n      num_digits[digit] = 1\n    else\n\
    \      num_digits[digit] = num_digits[digit] + 1\n    end\n  end\n  local ret\
    \ = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if num_digits[digit] ==\
    \ 1 then\n      table.insert(ret, digit)\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend", "    local set = {}\n    for i = 1, #x do\n        if set[x[i]]\
    \ == nil then\n            table.insert(set, x[i])\n        end\n    end\n   \
    \ return set\nend", "  local results = {}\n  local max_n = #x\n  for i = 1, max_n\
    \ do\n    local is_even = is_power_of_ten(x[i])\n    if is_even then\n      table.insert(results,\
    \ x[i])\n    end\n  end\n  return table.sort(results)\nend", "  local table =\
    \ {}\n  table.sort(function(a, b) return x[a] < x[b] end)\n  local function checkDigit(digit,\
    \ table)\n    for i=1,#table do\n      if digit == table[i] then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  local digits = setmetatable({},\
    \ {\n      __index = function(t, k)\n        return checkDigit(k, t)\n      end\n\
    \  })\n  for i=1,#x do\n    if checkDigit(x[i], digits) then\n      table.insert(digits,\
    \ x[i])\n    end\n  end\n  return digits\nend", "  local result = {}\n  local\
    \ last_non_zero = 0", "  local result = {}\n  local keys = {}\n  for _,v in ipairs(x)\
    \ do \n    local digit = v % 10 \n    if digit==0 and keys.contains(digit) then\
    \ \n      result[#result+1] = v \n    else\n      keys[digit] = true\n    end\n\
    \  end\n  return result\nend", "  local function unique(x)\n    local table =\
    \ {}\n    table.insert(table.unpack(x))\n    for i=1,#x do\n      local v = x[i]\n\
    \      if v%2 ~= 0 then\n        table.insert(table, v)\n      end\n    end\n\
    \    return table\n  end\n  return unique(table.unpack(x))\nend", "  local result\
    \ = {}\n  for i = 1, #x do\n    local number = tonumber(x[i])\n    if number then\n\
    \      -- Remove leading zeros.\n      if number < 10 then\n        number = 10\n\
    \      else\n        number = number - 10\n      end\n      -- Remove duplicate\
    \ digits.\n      -- Note: Using a hash table for better speed.\n      for j =\
    \ 1, #result do\n        local v1 = tonumber(result[j])\n        if v1 and v1\
    \ == number then\n          result[j] = nil\n          break\n        end\n  \
    \    end\n      table.insert(result, number)\n    end\n  end\n  return table.sort(result)\n\
    end", "    local i = 1\n    local ans = {}\n    for i=1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            ans[#ans + 1] = x[i]\n        end\n    end\n    return\
    \ ans\nend", "  local digits = {}\n  local len = #x\n  for i = 1,len do\n    local\
    \ d = tostring(x[i])\n    for j = 1,#d do\n      local t = math.mod(j+i, 10)\n\
    \      if digits[t] then\n        -- Duplicate.\n      else\n        digits[t]\
    \ = true\n      end\n    end\n  end\n  return table.sortn(digits, #digits)\nend",
  "    local n = {}\n    for i = 1, math.max(#x) do\n        if x[i] == 0 then\n \
    \           break\n        else\n            if x[i] % 2 == 0 then\n         \
    \       table.insert(n, x[i])\n            end\n        end\n    end\n    return\
    \ n\nend", "  -- The list `i` will contain the unique digits `t` where `t` is\
    \ the\n  -- number `x` passed as the argument in the argument `i`.\n  -- `t` will\
    \ be a digit from `1` to `9`\n  local i, t = {}, {}\n  -- While loop iterates\
    \ for the length of `x`.\n  while #x > 0 do\n    -- Get an element from the list.\n\
    \    local e = x[#x]\n    -- Add it to the list `t`.\n    t[#t+1] = e\n    --\
    \ Remove this element from the list.\n    table.insert(x, e)\n    -- Check each\
    \ digit from `1` to `9`.\n    for i = 1, 10 do\n      -- If this element is less\
    \ than or equal to the current digit\n      -- of `x`, then we found a new unique\
    \ number.\n      if e <= i then\n        break\n      -- Otherwise, check if this\
    \ element is already in our table\n      elseif #t == #i then\n        -- the\
    \ table `t` already contains the number `x`\n        break\n      -- If not, then\
    \ add it back to the table.\n      else\n        t[#t+1] = i\n      end\n    end\n\
    \  end\n  -- Return the list `t`\n  return t\nend", "  local ret = {}\n  for i\
    \ = 1, #x do\n    if x[i] and x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n\
    \    end\n  end\n  table.sort(ret)\n  return ret\nend", "  local n = {x}\n  local\
    \ t = {}\n  repeat\n    table.insert(t, #n+1)\n  until #n >= 2\n  for i = 1, #n\
    \ do \n    -- if an element of n does not have any even digit\n    -- insert it\
    \ to t and remove it from n\n    if t[#t] + #n[i] % 2 ~= 0 then \n      table.insert(t,\
    \ n[i])\n      table.remove(n, 1)\n    end\n  end\n  return t\nend", "  local\
    \ output = {}\n  for i = 1, #x do\n    -- Check if number contains an even digit.\n\
    \    -- If it contains an even digit, skip it.\n    if x[i] % 2 ~= 0 then\n  \
    \    output[#output + 1] = x[i]\n    end\n  end\n  table.sort(output)\n  -- Return\
    \ table in increasing order\n  return output\nend", "    local i = 1\n    local\
    \ res = {}\n    for v in pairs(x) do\n        if math.floor(v / 10) ~= 0 then\n\
    \            if i % 2 == 0 then\n                table.insert(res, v)\n      \
    \      end\n        end\n        i = i + 1\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
