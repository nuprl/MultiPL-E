language: lua
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then\n    return\
    \ -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph3fu1_oi.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s = math.abs(n)\
    \ + math.abs(m)\n  if s < 5 then\n    if n and m then return \"0b\" .. math.floor(n\
    \ / s) else\n      if n and m then return \"0b\" .. math.floor(n / s) else\n \
    \       return \"0b0\" .. s\n      end\n    end\n  end\n  if n < m then return\
    \ \"0b\" .. n else return \"0b\" .. m end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkewlq52.lua:29:\
    \ expected: \"0b11\"\nactual: \"0b1\"\nstack traceback:\n\t/tmp/tmpfkewlq52.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then return\
    \ 0 end\n  local sum = 0\n  while n > m do\n    sum = sum + n % 2\n    n = n /\
    \ 2\n  end\n  return sum\nend\nreturn rounded_avg\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0_xtg9d.lua:24: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Base case\n  if n\
    \ == m then return '0b0b'\n  if n == 0 then return '0b0'\n  if m == 0 then return\
    \ '0b0'\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv3zbznvw.lua:17: ''end'' expected (to close ''if'' at line
    16) near ''if''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local avg = 0\n   \
    \ while n > m do\n        avg = avg + 1\n        n = n - 1\n    end\n    if n\
    \ < m then\n        avg = avg + 1\n    end\n    return string.format('0b%b%d',\
    \ avg, tostring(math.floor(avg / 2)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxipdxw6b.lua:23:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpxipdxw6b.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpxipdxw6b.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local average = n/m\n\
    \  local remainder\n  -- Check if n is greater than m\n  if n > m then\n    --\
    \ Return the negative of average\n    return -average\n  -- Return average\n \
    \ elseif n == m then\n    return average\n  -- Check if n is less than or equal\
    \ to m\n  elseif n < m then\n    -- Return the average rounded up\n    return\
    \ math.floor(average) + 1\n  -- Check if n is greater than or equal to m\n  else\n\
    \    -- Calculate remainder\n    remainder = n % m\n    -- Return -1\n    return\
    \ -1 - (average - remainder + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz939dqc.lua:40:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpdz939dqc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local avg_str = to_binary(floor((n\
    \ + m) / 2))\n    if m > n then\n        return -1\n    end\n    return avg_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8unfem_i.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp8unfem_i.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp8unfem_i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local\
    \ count = 0\n  local start = n\n  if m > n then\n    return -1\n  elseif n ==\
    \ m then\n    return '0b0'\n  end\n  for i = start, m do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  return '0b' .. string.sub(tostring(sum / count),\
    \ 1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwhkza8v.lua:33:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpfwhkza8v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  local bin = \"\"\n  for i = n, m + 1 do\n    bin = string(bin, 2)..i\n\
    \  end\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjti4wjpj.lua:18:\
    \ attempt to call a table value (global 'string')\nstack traceback:\n\t/tmp/tmpjti4wjpj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpjti4wjpj.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return tonumber(string.format(\"\
    %.1f\", (n + m) / 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtwi49p9.lua:21:\
    \ expected: \"0b11\"\nactual: 3.0\nstack traceback:\n\t/tmp/tmpqtwi49p9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local sum = 0\n  while\
    \ n > 0 do\n    sum = sum + n & 1\n    n = n >> 1\n  end\n  if m == 0 then\n \
    \   sum = sum + n & 1\n  else\n    sum = sum + m\n  end\n  return tostring(sum)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gaykojr.lua:31:\
    \ expected: \"0b11\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmp8gaykojr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s = m / 2\n  local\
    \ e = (m % 2 == 0) and m or m - 1\n  local result = (n - (m <= s)) and n or (n\
    \ - (e < s) and s or (n - e))\n  result = (\"0\" .. result) .. \"b\"\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9oi4oa4.lua:17:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpk9oi4oa4.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpk9oi4oa4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then return\
    \ -1 end\n  \n  local nm = n % m\n  if nm > 0 then\n    return ((m * m + 1) /\
    \ 2 + nm) / m\n  else\n    return (n + m) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp716fcwi6.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp716fcwi6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local\
    \ summand = 1\n  while n > m do\n    sum = sum + summand\n    n = n - 1\n    summand\
    \ = summand * 2\n  end\n  return tonumber(string.format('%0b', sum / m))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1lllvm7b.lua:22:\
    \ invalid conversion '%0b' to 'format'\nstack traceback:\n\t/tmp/tmp1lllvm7b.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp1lllvm7b.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then return\
    \ -1 end\n  local digits = (n + m) * (m - n or 1)\n  return math.floor(digits\
    \ + 0.5) / 8\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3u92kop.lua:23:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpp3u92kop.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then \n    return\
    \ -1\n  else\n    return string.format(\"0b%b\", ((n / m) + 1) * m)\n  end\nend\n\
    print(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\n\
    print(rounded_avg(20, 33))\nprint(rounded_avg(30, 33))\nprint(rounded_avg(33,\
    \ 20))\nprint(rounded_avg(40, 50))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(200,\
    \ 100))\nprint(rounded_avg(1000000, 1000))\nprint(rounded_avg(1000000000, 10000))\n\
    print(rounded_avg(10000000000000, 10000))\nprint(rounded_avg(1000000000000000,\
    \ 10000))\nprint(rounded_avg(1000000000000000000, 10000))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpumzuy200.lua:18: invalid conversion '%b' to 'format'\nstack\
    \ traceback:\n\t[C]: in function 'string.format'\n\t/tmp/tmpumzuy200.lua:18: in\
    \ local 'rounded_avg'\n\t/tmp/tmpumzuy200.lua:22: in main chunk\n\t[C]: in ?\n"
  stdout: '-1

    '
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ tonumber(string.format(\"%b\", string.sub(string.sub(n, m+1, m+2-1), 1, n-1)))\n\
    \  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4604t2x0.lua:16:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp4604t2x0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp4604t2x0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Base case\n  if n\
    \ < m then\n    return \"0b\" .. math.floor((m+n+1)/2)*2\n  end\n  -- Recursive\
    \ case\n  local remaining = n - m\n  if remaining > 0 then\n    return rounded_avg(m+1,\
    \ remaining) + bin(m)\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vuw048k.lua:31:\
    \ expected: \"0b11\"\nactual: \"0b6\"\nstack traceback:\n\t/tmp/tmp2vuw048k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  \n  local count = 0\n  local sum = 0\n  local sumbit = 0\n  \n  for\
    \ i = n, m do\n    count = count + 1\n    sum = sum + i\n    sumbit = sumbit +\
    \ (i & 1)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3k7tzoxj.lua:44: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m < n then return\
    \ -1 end\n  local avg_str = (str:gsub('%d+'..'%d+'..'%s+'..'%s+', '%0*d%0*d'..'%s+',\
    \ '%0*d'):gsub('%d+', '', n))\n  return ((m-1) ~= m) and -1 or (avg_str)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpad9v1gwi.lua:16:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpad9v1gwi.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpad9v1gwi.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n < m then\n\t\treturn\
    \ nil\n\telseif n == m then\n\t\treturn '0b0'\n\telse\n\t\tlocal digits = math.ceil(math.log10(m/n+1))\
    \ + 2\n\t\tlocal r = math.ceil(m/digits)\n\t\treturn string.format('0b%.'..digits..'x%d',\
    \ r, digits+1, r)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nnbgpbn.lua:29:\
    \ expected: \"0b11\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3nnbgpbn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n > m then\n    \
    \  return -1\n   end\n   local sum = 0\n   for i = n, m do\n      sum = sum +\
    \ (i & 1)\n   end\n   return \"0b\" .. string.char(sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrdwxe_y.lua:28:\
    \ expected: \"0b11\"\nactual: \"0b\x03\"\nstack traceback:\n\t/tmp/tmpwrdwxe_y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptedbfxu7.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n > m then return\
    \ -1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr5zaue9m.lua:34: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local n = tostring(n)\n\
    \  local m = tostring(m)\n  local avg = m * (n - m) + 1\n  return math.floor(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc69_okb0.lua:24:\
    \ expected: \"0b11\"\nactual: -19\nstack traceback:\n\t/tmp/tmpc69_okb0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n > m then return\
    \ -1 end\n\tlocal sum = 0\n\tlocal nSum = 0\n\tlocal mSum = 0\n\tlocal nCount\
    \ = 0\n\tlocal mCount = 0\n\trepeat\n\t\tlocal n = n % 10\n\t\tsum = sum + n\n\
    \t\tnSum = nSum + n * n\n\t\tnCount = nCount + 1\n\tuntil n < m\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp30ka_sek.lua:45: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    local\
    \ bin = dec(m, n+1)\n    return bin_to_bin(bin)\n  else\n    return -1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwgwmvyp.lua:16:\
    \ attempt to call a nil value (global 'dec')\nstack traceback:\n\t/tmp/tmpuwgwmvyp.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpuwgwmvyp.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then \n    return\
    \ -1\n  end\n  local avg = 0\n  for i = n, m do \n    avg = avg + i\n  end\n \
    \ return '0b' .. math.floor(avg / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyi2fsb6.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpbyi2fsb6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: -1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   local n, m = math.abs(n),\
    \ math.abs(m)\n   if n > m then return -1 end\n   local num = 0\n   for i = n,\
    \ m do\n      num = num + i \n   end\n   local digit, result = num, math.floor(num\
    \ * 2)\n   while num > 1 do\n      digit, num = math.floor(num / 2), num \n  \
    \    result = result + digit \n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979703
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ bin_to_dec(math.floor(n/m))\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cl3mrom.lua:16:\
    \ attempt to call a nil value (global 'bin_to_dec')\nstack traceback:\n\t/tmp/tmp1cl3mrom.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp1cl3mrom.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for\
    \ i = n, m, 1 do\n    sum = sum + i\n  end\n  \n  if n >= m then\n    return -1\n\
    \  end\n  \n  return \"0b\" .. string.sub(tostring(sum), 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpha5rzhih.lua:30:\
    \ expected: \"0b11\"\nactual: \"0b5\"\nstack traceback:\n\t/tmp/tmpha5rzhih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   -- The average of n\
    \ through m is calculated using the formula n+m/2\n   -- where n is the beginning\
    \ of the range and m is the end of the range.\n   -- If n is greater than m, then\
    \ the average is returned as -1.\n   -- If n is 0 or 1, then there is no remainder,\
    \ so the average is 0.\n   if n == 0 then\n      return '0'\n   elseif n == 1\
    \ then\n      return '1'\n   else\n      local div = math.floor(m/2)\n      local\
    \ rem = m % 2\n      return string.format('0b%b', n + (div - rem))\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfixl4fo.lua:33:\
    \ expected: \"0b11\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmptfixl4fo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return tonumber(string.format('%.8d',\
    \ (n + m - 2)/(m-2))) * 2 ^ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9selfc1w.lua:15:\
    \ bad argument #2 to 'format' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp9selfc1w.lua:15: in local 'candidate'\n\t/tmp/tmp9selfc1w.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then return\
    \ n end\n  if n >= m then return -1 end\n  local sum = 0\n  for i = n, m, 1 do\
    \ sum = sum + i end\n  return tonumber(string.format('%b', sum))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5gnh06d.lua:25:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpf5gnh06d.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal count = 0\n\tlocal\
    \ sum = 0\n\twhile n >= m do\n\t\tcount = count + 1\n\t\tsum = sum + n\n\t\tn\
    \ = n - 1\n\tend\n\tif count ~= 0 then\n\t\treturn tostring(bformat(\"%0${#count}b\"\
    , sum))\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0va473et.lua:32:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp0va473et.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal s = n or 0\n\t\
    local e = m or 0\n\tlocal i = 0\n\twhile i <= m do\n\t\ts = s + (n or 0)\n\t\t\
    i = i + 1\n\tend\n\treturn s:format(\"b\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa591g_1t.lua:22:\
    \ attempt to index a number value (local 's')\nstack traceback:\n\t/tmp/tmpa591g_1t.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpa591g_1t.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if m > n then\n   \
    \     return -1\n    end\n    if n == m then\n        return \"0b0\"\n    end\n\
    \    return \"0b\" .. tostring(string.format(\"%x\", bit.band(bit.rshift(n, 15),\
    \ bit.rshift(m, 15))) + string.format(\"%x\", bit.band(bit.lshift(n, 15), bit.lshift(m,\
    \ 15))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nq00jxd.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp3nq00jxd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal sum = 0\n\tfor\
    \ i = n, m do\n\t\tsum = sum + i\n\tend\n\t\n\tlocal r = sum / 2\n\tlocal a =\
    \ string.format(\"0b%x\", r)\n\treturn a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmm3uoth.lua:21:\
    \ bad argument #2 to 'format' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmptmm3uoth.lua:21: in local 'candidate'\n\t/tmp/tmptmm3uoth.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local num = 0\n  for\
    \ i = n, m do\n    num = num + i\n  end\n  num = num/(n-m+1)\n  num = math.floor(num)\n\
    \  if num == 0 then num = -1 end\n  return to_binary(num)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77o_as0f.lua:22:\
    \ attempt to call a nil value (global 'to_binary')\nstack traceback:\n\t/tmp/tmp77o_as0f.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp77o_as0f.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n < m then\n\t\treturn\
    \ -1\n\tend\n\tlocal num_digits = math.ceil(math.log(m) / math.log(2))\n\tlocal\
    \ num = n:div(2):mod(m)\n\treturn (\"0b\"..string.rep(\"0\", num_digits)..num)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9vrtax1.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpv9vrtax1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local n_bits = math.log(n,\
    \ 2)\n  local m_bits = math.log(m, 2)\n  if n_bits > m_bits then\n    return -1\n\
    \  elseif n_bits < m_bits then\n    return math.floor((m * n_bits + n) / 2)\n\
    \  else\n    return math.floor((m * n_bits + n) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_19nlll.lua:29:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpk_19nlll.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  local nstr, mstr = tostring(n), tostring(m)\n  local nlen, mlen =\
    \ nstr:len() - 1, mstr:len() - 1\n  local s = ''\n  for i = 1, nlen do\n    if\
    \ i <= mlen and nstr:sub(i, i+1) >= mstr:sub(i, i+1) then\n      s = s .. '1'\n\
    \    else\n      s = s .. '0'\n    end\n  end\n  s = s:reverse()\n  if s == ''\
    \ then return 0 end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21namjmt.lua:34:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp21namjmt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n > m then return\
    \ -1 end\n   local s = n - m\n   local x = math.floor(s/2)\n   local y = math.floor(s/2)\n\
    \   if x/2 == y/2 then -- even\n      return \"0b\" .. math.floor(x/2)*2 .. \"\
    0\"\n   else -- odd\n      return \"0b\" .. math.floor(x/2)*2 .. \"1\" .. math.floor(y/2)*2\n\
    \   end\nend\n</code>\n<|/ a tags=lua dscore=0 |>\n<| c |>\nI used a variation\
    \ of this to solve a similar problem:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg3e8rn9f.lua:25: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tn = tonumber(n)\n\tm\
    \ = tonumber(m)\n\tif m > n then return -1 end\n\tif n == m then return '0' end\n\
    \tlocal r = math.floor(math.abs(n - m))\n\treturn tostring(string.format('%b',\
    \ math.floor(r / 2) + r))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblpkm1bq.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpblpkm1bq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local avg = 0\n  for\
    \ i = n, m do\n    avg = avg + i\n  end\n  return '0b' .. tostring(avg)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zha4czs.lua:25:\
    \ expected: \"0b11\"\nactual: \"0b15\"\nstack traceback:\n\t/tmp/tmp9zha4czs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ string.format(\"0b%x\", n + m)\n  end\n  return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpen3qvfy1.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b6\"\nstack traceback:\n\t/tmp/tmpen3qvfy1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal num=0\n\tlocal\
    \ total=0\n\tfor i = n, m, 1 do \n\t\ttotal = total + i\n\t\tnum = num + 1\n\t\
    end\n\tif total % 2 ~= 0 then\n\t\treturn -1\n\tend\n\tlocal remain = total /\
    \ 2\n\treturn tostring(remain ^ 2)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps5n_mfgg.lua:27: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local a, b, c, d, e,\
    \ f, g, h = 1, 0, 0, 0, 0, 0, 0, 0, 0\n  for i = 1, n do\n    a = a + b\n    b\
    \ = b + c\n    c = c + d\n    d = d + e\n    e = e + f\n    f = f + g\n    g =\
    \ g + h\n    h = h + i\n  end\n  a = a / n\n  if n >= m then\n    return a\n \
    \ else\n    return -1\n  end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4q2il2oo.lua:33: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if m > n then\n   \
    \     return -1\n    end\n    \n    local r = 0\n    for i = n, m do r = r + (i\
    \ - n) end\n    return r / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8r5sado.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmps8r5sado.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n >= 0)\n  assert(m\
    \ >= 0)\n  \n  if n == m then\n    return tostring(n)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfxp51rl4.lua:39: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then return\
    \ -1 end\n  if n < m then n, m = m, n end\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  return \"0b\" .. tostring(sum / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifvc1eku.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpifvc1eku.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then\n    return\
    \ -1\n  end\n  local n = tonumber(n)\n  local m = tonumber(m)\n  local sum = 0\n\
    \  for i in n:m do\n    sum = sum + i\n  end\n  return '0b' .. lshift(tostring(sum),\
    \ -m)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5fuyx21_.lua:21: function arguments expected near ''do''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then return\
    \ -1 end\n  local t = math.ceil(n / m) * m\n  return tonumber(bit.band(t, 2) and\
    \ '0101' or '0111')\nend\nprint (rounded_avg(1,5)) -- 0b11\nprint (rounded_avg(7,5))\
    \ -- -1\nprint (rounded_avg(10,20)) -- 0b1111\nprint (rounded_avg(20,33)) -- 0b11010\n\
    print (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10))\
    \ -- -1\nprint (rounded_avg(5,10)) -- -1\nprint (rounded_avg(5,10)) -- -1\nprint\
    \ (\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8umxs43w.lua:59: '')'' expected (to close ''('' at line 58)
    near ''=''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m >= n then\n    return\
    \ -1\n  elseif n < m then\n    return -1\n  else\n    return (math.floor(n / m)\
    \ * m + (n - math.floor(n / m) * m))\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pgxzyi3.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp4pgxzyi3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal a, b = 0, 1\n\t\
    while m > 0 do\n\t\ta, b = b, (a * n + b) / m\n\t\tm = m - 1\n\tend\n\treturn\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7myw0wua.lua:26:\
    \ expected: \"0b11\"\nactual: 0.23333333333333\nstack traceback:\n\t/tmp/tmp7myw0wua.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    -- Your code goes here\
    \ --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd0bpqkl.lua:21:\
    \ expected: \"0b11\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsd0bpqkl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Compute the first\
    \ n+m digits.\n  local nm = n*m\n  -- If n or m are odd, round nm to the nearest\
    \ multiple of 5.\n  -- e.g. rounded_avg(9, 6) == 9*5*5 == 95*5\n  local n_remain\
    \ = math.floor(n / m) * 5\n  if n_remain % 2 == 1 then\n    n_remain = n_remain\
    \ + 1\n  end\n  -- Add an extra bit if n is odd.\n  if n % 2 == 1 then\n    nm\
    \ = nm + 5\n  end\n  -- Round nm to the nearest multiple of 5.\n  -- e.g. rounded_avg(9,\
    \ 6) == 9*5*5 == 95*5\n  local round_nm = math.floor(nm / 5) * 5\n  -- Add extra\
    \ bit if round nm is odd.\n  if round_nm % 2 == 1 then\n    round_nm = round_nm\
    \ + 5\n  end\n  -- Round round_nm to the nearest multiple of 5.\n  -- e.g. rounded_avg(9,\
    \ 6) == 9*5*5 == 95*5\n  local round_round_nm = math.floor(round_nm / 5) * 5\n\
    \  -- Add extra bit if round_round_nm is odd.\n  if round_round_nm % 2 == 1 then\n\
    \    round_round_nm = round_round_nm + 5\n  end\n  -- Convert binary to decimal\
    \ and return.\n  return tonumber(string.format('%011b', round_round_nm))\nend\n\
    print(rounded_avg(1, 5)) --> 0b11\nprint(rounded_avg(7, 5)) --> -1\nprint(rounded_avg(10,\
    \ 20)) --> 0b1111\nprint(rounded_avg(20, 33)) --> 0b11010\nprint(rounded_avg(33,\
    \ 20)) --> 0b11010\nprint(rounded_avg(44, 20)) --> 0b11010\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpah9pfh9i.lua:42: invalid conversion '%011b' to 'format'\n\
    stack traceback:\n\t[C]: in function 'string.format'\n\t/tmp/tmpah9pfh9i.lua:42:\
    \ in local 'rounded_avg'\n\t/tmp/tmpah9pfh9i.lua:44: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n <= m, \"n must\
    \ be <= m\")\n  if n == 0 then return '0b0'\n  elseif m == 0 then return '0b1'\n\
    \  else return (((n * 2) + m - 1) >> 1) + ('0b1' << ((n * 2) - m))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldgwdhpa.lua:18:\
    \ attempt to perform bitwise operation on a string value (constant '0b1')\nstack\
    \ traceback:\n\t/tmp/tmpldgwdhpa.lua:18: in local 'candidate'\n\t/tmp/tmpldgwdhpa.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    -- Based on the solution\
    \ to https://stackoverflow.com/q/1685680\n    local count = 0\n    local total\
    \ = 0\n    for i = n, m + 1 do\n        count = count + 1\n        total = total\
    \ + 1\n    end\n    if count > 0 then\n        local avg = (total / count) / 2\n\
    \        -- Round the binary to the nearest integer.\n        avg = math.floor(avg\
    \ + 0.5)\n        return tostring(bin(avg))\n    else\n        return -1\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbksvzm0m.lua:26:\
    \ attempt to call a nil value (global 'bin')\nstack traceback:\n\t/tmp/tmpbksvzm0m.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpbksvzm0m.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local avg = math.floor((n+m)/2)\n\
    \    if avg > m then\n        return -1\n    elseif n == m then\n        return\
    \ tostring(avg)\n    else\n        return tostring(avg, 2)\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehmz5o33.lua:28:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpehmz5o33.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then return\
    \ -1 end\n  return tostring(n >> 1) + tostring((n & 1) + 1 >> 1) + tostring((n\
    \ & 1) + 1 & 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bmopwjn.lua:22:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmp3bmopwjn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n == m then return\
    \ '0b' .. tostring(1) end\n    if n <= m then \n        local n_digits = math.floor(math.log(n\
    \ - m + 1) + 1)\n        return '0b' .. tostring(n - math.pow(10, n_digits)) ..\n\
    \            '' .. tostring(m - math.pow(10, n_digits))\n    else\n        local\
    \ n_digits = math.floor(math.log(n - m + 1) + 1)\n        return '0b' .. tostring(n\
    \ - math.pow(10, n_digits))\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6xru9l6.lua:29:\
    \ expected: \"0b11\"\nactual: \"0bnannan\"\nstack traceback:\n\t/tmp/tmpk6xru9l6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then\n    return\
    \ -1\n  end\n  local remainder, quotient = math.modf((m + n - 1) / 2)\n  if remainder\
    \ > 0 then\n    return 0\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_8gb_yy.lua:29:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp0_8gb_yy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m == nil then return\
    \ -1 end\n  return \"0b\" .. string.format(\"%b\", n + m / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0toj4mm6.lua:16:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp0toj4mm6.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp0toj4mm6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s = math.max(m,\
    \ n)\n  local i = math.max(m, n)\n  while i <= m do\n    i = i * 2\n    s = s\
    \ + i\n  end\n  s = s / (n - m)\n  s = s % 2\n  return s:format(\"%b\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6prdlia8.lua:23:\
    \ attempt to index a number value (local 's')\nstack traceback:\n\t/tmp/tmp6prdlia8.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp6prdlia8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then return\
    \ -1 end\n  local num = 0\n  for i = n, m + 1 do\n    num = num + i \n  end\n\
    \  local result = 0\n  for i in string.gmatch(tostring(num), '%d*') do\n    result\
    \ = result + tonumber(i)\n  end\n  return tostring(result / 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgo33hal.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpzgo33hal.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- write your implementation\
    \ here\n  if n > m then return -1 end\n  local res = string.rep('0', 32) -- initialize\
    \ binary string to 32 0's\n  local i = 1 -- binary position\n  while i <= n do\n\
    \    local digit = math.floor(i / m)\n    local carry = 0\n    if digit < 10 then\n\
    \      carry = 0\n    else\n      carry = 1\n    end\n    local x = math.mod(i,\
    \ m)\n    i = i * (10 - digit) + x\n    if i == n then\n      i = math.floor(i)\n\
    \      res = string.sub(res, i-1, 1) + carry\n    end\n  end\n  res = string.sub(res,\
    \ 32-1, 32)\n  -- convert to binary\n  local result = \"\"\n  local pos = 0\n\
    \  local i = res\n  while i ~= \"\" do\n    if i == '1' then\n      result = result\
    \ + \"0\"\n    else\n      result = result + \"1\"\n    end\n    i = string.replace(i,\
    \ \"\", \"0\")\n    pos = pos + 1\n  end\n  if pos == 0 then return 0 end\n  return\
    \ \"0b\" .. result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7bw4mujq.lua:27:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp7bw4mujq.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp7bw4mujq.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  local n1, m1 = n / 2, m / 2\n  if n1 == m1 then\n    return tostring(n\
    \ / 2)\n  elseif n1 > m1 then\n    return tostring(n / 2) .. \"b\"\n  else\n \
    \   return tostring(n / 2) .. \"w\"\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cdc7uly.lua:29:\
    \ expected: \"0b11\"\nactual: \"0.5w\"\nstack traceback:\n\t/tmp/tmp7cdc7uly.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local n_int = tonumber(n)\n\
    \  local m_int = tonumber(m)\n  local avg = n_int\n  if n_int < m_int then\n \
    \   avg = -1\n  else\n    avg = (n_int + m_int) / 2\n    avg = tostring(avg):reverse()\n\
    \  end\n  \n  return avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ge22k0m.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp2ge22k0m.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return \"0b\" .. ( (n/m\
    \ + n%m) * (m/n + m%m )/2 ):byte()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw65qcehz.lua:15:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpw65qcehz.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpw65qcehz.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m <= n then\n    return\
    \ -1\n  end\n  local nn = math.floor(n/m)\n  local nm = n - nn * m\n  local bin_string\
    \ = ''\n  for i = 1, nm do\n    bin_string = bin_string .. '1'\n  end\n  return\
    \ '0b' .. bin_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0j8xj0h.lua:30:\
    \ expected: \"0b11\"\nactual: \"0b1\"\nstack traceback:\n\t/tmp/tmpy0j8xj0h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  return (\"0\" .. tostring(math.floor((n / m) * 8)  + math.ceil((n\
    \ / m) * 8))):byte()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h4kkbqf.lua:22:\
    \ expected: \"0b11\"\nactual: 48\nstack traceback:\n\t/tmp/tmp0h4kkbqf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local sum = 0\n   \
    \ for i = 1, n do\n        sum = sum + i\n    end\n    if m > n then\n       \
    \ return -1\n    end\n    if sum == 0 then\n        return -1\n    end\n    local\
    \ s = sum / m\n    return string.char(s % 2) + string.char(s / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwr5izcx.lua:32:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpkwr5izcx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n > 0 and m <\
    \ n and m > n, \"n must be positive and greater than m\")\n  if n > m then\n \
    \   return -1\n  end\n  return #n + (n - m) * (#m + 1) / 2 + math.floor(math.ldexp(m\
    \ * n - (n - m), 1, m))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp178y9duw.lua:15:\
    \ n must be positive and greater than m\nstack traceback:\n\t/tmp/tmp178y9duw.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp178y9duw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ '0b' .. math.floor((n - m) * 16 + 0.5)\n  end\n  return -1\nend\n</cell>\n<code\
    \ language=lua-1.3>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqkntr33h.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n < m then\n    \
    \  return -1\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_150x9_5.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if m == 1 then\n  \
    \      return pack(\"B\", n)\n    end\n    if m < n then\n        return -1\n\
    \    end\n    local count = 2\n    while count <= m do\n        count = count\
    \ * 2\n    end\n    local digit = n / count\n    local remainder = n % count\n\
    \    if remainder == 0 then\n        return pack(\"B\", digit)\n    else\n   \
    \     return pack(\"B\", digit - 1) + pack(\"B\", remainder)\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmi42u3if.lua:30:\
    \ attempt to call a nil value (global 'pack')\nstack traceback:\n\t/tmp/tmpmi42u3if.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpmi42u3if.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Write your function\
    \ here!\n  if n == m then\n    return 0\n  end\n  local result = 0\n  for i in\
    \ (m - 1) to n do\n    result = result + i\n  end\n  return result / m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzmtwwi0x.lua:20: ''do'' expected near ''to''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n >= 1 and m >=\
    \ 1, 'Invalid arguments')\n  -- If the input is greater than the maximum, return\
    \ -1.\n  if m > n then return -1 end\n  -- If n and m are equal, return m.\n \
    \ if n == m then return m end\n  -- Add the two numbers and divide by 2.\n  return\
    \ (n + (m / 2)) / 8\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6bhzdob.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpt6bhzdob.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n == m then\n  \
    \      return tostring(m)\n    end\n    local avg = 0.5 * (n + m)\n    return\
    \ tostring((avg + 0.5) / 2) \nend\n</cell>\n<cell>\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_sgk09pd.lua:21: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif m < n then\n\t\treturn\
    \ -1\n\tend\n\tlocal sum = 0\n\tlocal count = 0\n\twhile n > m do\n\t\tsum = sum\
    \ + n\n\t\tcount = count + 1\n\t\tn = n - 1\n\tend\n\t\n\tsum = (sum * math.pow(2,\
    \ count))\n\tlocal binary = math.round(sum, 2)\n\t\n\tif binary > math.pow(2,\
    \ count) then\n\t\treturn -1\n\tend\n\t\n\treturn binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5d4r8iyf.lua:27:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmp5d4r8iyf.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp5d4r8iyf.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif m > n then\n\t\treturn\
    \ -1\n\tend\n\tif n == m then\n\t\treturn tostring(n)\n\tend\n\treturn tostring(round(n\
    \ / m) * m - round(n / m))\nend\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(15,\
    \ 32))\nprint(rounded_avg(20, 35))\nprint(rounded_avg(32, 35))\nprint(rounded_avg(20,\
    \ 40))\nprint(rounded_avg(30, 40))\nprint(rounded_avg(31, 40))\nprint(rounded_avg(32,\
    \ 40))\nprint(rounded_avg(33, 40))\nprint(rounded_avg(33, 41))\nprint(rounded_avg(32,\
    \ 41))\nprint(rounded_avg(32, 42))\nprint(rounded_avg(31, 42))\nprint(rounded_avg(31,\
    \ 43))\nprint(rounded_avg(31, 44))\nprint(rounded_avg(31, 45))\nprint(rounded_avg(31,\
    \ 46))\nprint(rounded_avg(31, 47))\nprint(rounded_avg(31, 48))\nprint(rounded_avg(30,\
    \ 48))\nprint(rounded_avg(30, 49))\nprint(rounded_avg(30, 50))\nprint(rounded_avg(30,\
    \ 51))\nprint(rounded_avg(30, 52))\nprint(rounded_avg(30, 53))\nprint(rounded_avg(30,\
    \ 54))\nprint(rounded_avg(30, 55))\nprint(rounded_avg(30, 56))\nprint(rounded_avg(30,\
    \ 57))\nprint(rounded_avg(30, 58))\nprint(rounded_avg(30, 59))\nprint(rounded_avg(30,\
    \ 60))\nprint(rounded_avg(30, 61))\nprint(rounded_avg(30, 62))\nprint(rounded_avg(30,\
    \ 63))\nprint(rounded_avg(30, 64))\nprint(rounded_avg(30, 65))\nprint(rounded_avg(30,\
    \ 66))\nprint(rounded_avg(30, 67))\nprint(rounded_avg(30, 68))\nprint(rounded_avg(30,\
    \ 69))\nprint(rounded_avg(30, 70))\nprint(rounded_avg(30, 71))\nprint(rounded_avg(30,\
    \ 72))\nprint(rounded_avg(30, 73))\nprint(rounded_avg(30, 74))\nprint(rounded_avg(30,\
    \ 75))\nprint(rounded_avg(30, 76))\nprint(rounded_avg(30, 77))\nprint(rounded_avg(30,\
    \ 78))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp_v_2ltne.lua:21: attempt to call a nil value (global 'round')\n\
    stack traceback:\n\t/tmp/tmp_v_2ltne.lua:21: in local 'rounded_avg'\n\t/tmp/tmp_v_2ltne.lua:24:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: '-1

    '
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s = ''\n  while\
    \ n > m do\n    s = s .. '0' .. string.format('%b', (n-m)/2)\n    n = n - m\n\
    \  end\n  s = s .. '0' .. string.format('%b', n/2)\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a6msc9r.lua:20:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp1a6msc9r.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp1a6msc9r.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then return\
    \ \"0b0\"\n  elseif n <= m then return -1\n  else return \n    bit.rshift(bit.band(bit.rshift(m,\
    \ 4), bit.lshift(n, 4)), 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2d3s2gz.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpv2d3s2gz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  elseif n <= 15 then\n    return ('0b' .. string.format('%010d', (m + (n\
    \ <= 15 or (n % 10) > 5 and n or 0)))):sub(2, -2)\n  else\n    local n1, m1 =\
    \ math.max(n,m), math.min(m,n)\n    if n1 ~= m1 then\n      local mid = math.floor(m1\
    \ + (n1 - m1)/2)\n      if mid > n then\n        mid = m\n      elseif mid < m\
    \ then\n        mid = n\n      end\n      local a = (n - m)/(m1 - mid) + n/(m1\
    \ - n)\n      return rounded_avg(mid, mid) or rounded_avg(mid, m) or rounded_avg(mid,\
    \ n) or rounded_avg(mid + 1, n) or rounded_avg(n, m) or rounded_avg(mid + 1, m)\
    \ or rounded_avg(mid + 1, m) or rounded_avg(mid, n) or rounded_avg(m, mid) or\
    \ rounded_avg(m, mid) or rounded_avg(mid, n) or rounded_avg(m, mid) or rounded_avg(n,\
    \ mid) or rounded_avg(n, mid) or rounded_avg(n, mid) or rounded_avg(mid, mid)\
    \ or rounded_avg(mid, mid) or rounded_avg(mid, mid) or rounded_avg(mid, mid) or\
    \ rounded_avg(mid, mid) or rounded_avg(mid + 1, mid) or rounded_avg(mid + 1, mid)\
    \ or rounded_avg(mid, mid - 1) or rounded_avg(mid, mid - 1) or rounded_avg(mid,\
    \ mid) or rounded_avg(mid, mid) or rounded_avg(mid, mid) or rounded_avg(mid, mid\
    \ + 1) or rounded_avg(mid, mid + 1) or rounded_avg(mid, mid) or rounded_avg(mid\
    \ + 1, mid + 1) or rounded_avg(mid + 1, mid + 1) or rounded_avg(mid, mid + 1)\
    \ or rounded_avg(mid, mid + 1) or rounded_avg(mid, mid) or rounded_avg(mid, mid)\
    \ or rounded_avg(mid, mid) or rounded_avg(mid + 1, mid) or rounded_avg(mid + 1,\
    \ mid) or rounded_avg(mid, mid + 1) or rounded_avg(mid + 1, mid + 1) or rounded_avg(mid,\
    \ mid + 1) or rounded_avg(mid, mid + 1) or rounded_avg(mid + 1, mid + 1) or rounded_avg(mid\
    \ + 1, mid + 1) or rounded_avg(mid, mid + 1) or roun\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpug6wn9b0.lua:30: ''end'' expected (to close ''if'' at line
    21) near ''lu''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local n = tonumber(n)\n\
    \  local m = tonumber(m)\n  local result = 0\n  \n  for i=n,m+1 do\n    local\
    \ r = i / 2\n    result = result + r * 2\n  end\n  \n  result = tostring(result)\n\
    \  result = result:gsub(\"0?\", \"\"):gsub(\"^..$\", \"0b\")\n  \n  if n >= m\
    \ then\n    return -1\n  else\n    return result\n  end\nend\nreturn rounded_avg\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7hhgd8e9.lua:34: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local result = 0\n  local\
    \ nm = n or m\n  local nx = nm % 2\n  local nr = math.floor(nm / 2)\n  repeat\n\
    \    local m = math.min(nm, nx)\n    result = result + m\n    nm = nm - m\n  \
    \  local nx = nm % 2\n    local nr = math.floor(nm / 2)\n  until(nx == 0 or nm\
    \ <= 0)\n  local result = result / 2\n  return \"0b\" .. tostring(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e8mns2j.lua:33:\
    \ expected: \"0b11\"\nactual: \"0b0.5\"\nstack traceback:\n\t/tmp/tmp5e8mns2j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  return string.format(\"%b\", n/m + n*m - n*m/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_z_chlz.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp4_z_chlz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  else\n    local s = math.min(m, n)\n    return string(s, math.min(s,8))\
    \ \n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12f6etyg.lua:19:\
    \ attempt to call a table value (global 'string')\nstack traceback:\n\t/tmp/tmp12f6etyg.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp12f6etyg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m == 0 then return\
    \ -1 end\n  if m > n then\n    return -1\n  end\n  \n  local sum = 0\n  local\
    \ count = 0\n  \n  for i = n, m + 1 do\n    sum = sum + i\n    count = count +\
    \ 1\n  end\n  \n  local n = math.floor(n / 2)\n  local m = math.floor(m / 2)\n\
    \  \n  if n == m then\n    return sum / count\n  end\n  \n  local sum = 0\n  local\
    \ count = 0\n  \n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  \n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph_vs8nn.lua:49:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpph_vs8nn.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then\n    return\
    \ '0b' .. tostring(m)\n  else\n    local l = (n + m) / 2\n    if l < n then\n\
    \      return rounded_avg(l, m)\n    else\n      return rounded_avg(n, l)\n  \
    \  end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof0o52_c.lua:30:\
    \ expected: \"0b11\"\nactual: \"0b1.0\"\nstack traceback:\n\t/tmp/tmpof0o52_c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  n = tonumber(n)\n  m\
    \ = tonumber(m)\n  if n < m then\n    return -1\n  elseif n == m then\n    return\
    \ \"'\"..(\"%\"..string.format(\"%b\", n))..\"'\"\n  end\n  local nstr = string.sub(n,\
    \ 1, m)\n  local nbin = \"0b\"..string.sub(nstr, -2)\n  local mstr = string.sub(m,\
    \ 1, n)\n  local mbin = \"0b\"..string.sub(mstr, -2)\n  local sum = 0\n  for i\
    \ = 1, n do\n    sum = sum + ((\"%\"..string.format(\"%b\", nstr))) \n    sum\
    \ = sum + ((\"%\"..string.format(\"%b\", mstr))) \n  end\n  return \"0b\" .. string.sub(mbin,\
    \ -sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g3ve2ap.lua:37:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp1g3ve2ap.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal bin, i, imax =\
    \ bit.bor(bit.lshift(1, bit.rshift(n, 32)), m), 0, n\n\twhile i < imax do\n\t\t\
    local nn = bit.band(n, n)\n\t\tbin = bit.band(bin, nn)\n\t\tn = nn\n\t\ti = i\
    \ + 1\n\tend\n\treturn bin and bit.tobin(bit.rshift(bin, 1)) or -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphpg82vas.lua:15:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmphpg82vas.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphpg82vas.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Base cases\n  if n\
    \ <= m then return -1 end\n  -- Base case if n is less than or equal to m\n  if\
    \ n == m then return n end\n  -- Compute average in binary using bitwise math\n\
    \  local result = 0\n  local i = 1\n  while i <= m do\n    local k = n + (m -\
    \ i) / 2\n    -- Add k to result\n    result = result + bin(k)[2:]\n    -- Remove\
    \ last digit\n    result = string.rep('0', bit.rshift(result, 1)) + result\n \
    \   -- Move i to next digit\n    i = i + 1\n  end\n  -- Remove leading zeros from\
    \ result\n  return result:gsub('^(%0+)', function(x)\n    return x:reverse()\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj3fo2qwq.lua:25: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n < m then \n\t\t\
    return -1\n\telse\n\t\tlocal result = tonumber( string.format('%.6d', n / (m -\
    \ 1)) )\n\t\t\n\t\tif result ~= -1 then\n\t\t\tresult = result + 1\n\t\t\tlocal\
    \ binary = string.format('%010b', result)\n\t\t\treturn binary\n\t\telse\n\t\t\
    \treturn -1\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7g88xq0.lua:33:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpm7g88xq0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ (string.format(\"0b%b\", string.sub((string.sub(binary(n, m))), \"^\", -1))):sub(2)\n\
    \  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5l29oq_v.lua:16:\
    \ attempt to call a nil value (global 'binary')\nstack traceback:\n\t/tmp/tmp5l29oq_v.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5l29oq_v.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n < m then\n\t\treturn\
    \ -1\n\tend\n\tlocal n_into_m = n - m\n\t\n\tif n_into_m == 0 then\n\t\treturn\
    \ '0'\n\tend\n\t\n\tlocal quotient = math.floor(n_into_m / 2) + 1\n\tlocal remainder\
    \ = n_into_m - quotient * 2\n\t\n\treturn tostring(quotient..'b'..tostring(remainder))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptasdzvcj.lua:33:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmptasdzvcj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return math.floor((n\
    \ + m) / 2) * '1' + '0' -\n      ((math.floor((n + m) / 2) + math.floor((n + m)\
    \ / 2)) / 2) / 2\nend\n</cell>\n<text>\nThe average of two integers is a floating-point\
    \ number: $\\displaystyle \\frac{A + B}{2}$. If A and B are integers and A and\
    \ B are both positive, then the average of A and B is an integer too. If A and\
    \ B are both negative, then the average is also negative.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4m_ihpny.lua:18: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  end\n  \n  local n1 = math.floor(n / 2)\n  local m1 = math.floor(m / 2)\n\
    \  \n  return '0b' .. math.floor((n1 - m1) + m1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomdc2bq5.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpomdc2bq5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ string.format('%b', sum / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwc9sckd0.lua:22:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpwc9sckd0.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwc9sckd0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal nm = math.floor(n/m)\n\
    \tif nm == 0 then\n\t\treturn -1\n\telseif nm == m then \n\t\treturn nm * m \n\
    \telse\n\t\treturn math.floor(nm/2) + 1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeckjyhfb.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpeckjyhfb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal sum = 0\n\tfor\
    \ i = n,m do sum = sum + i end\n\tif m > n then return -1 end\n\tsum = ((sum /\
    \ (m - n)) + (sum / 2)) / 2\n\tsum = string.char(sum)\n\treturn sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yg8fc16.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp9yg8fc16.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n <= m then return\
    \ nil end\n    return string.sub(tostring(n), -#n+1, -#m-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71769y5i.lua:22:\
    \ expected: \"0b11\"\nactual: nil\nstack traceback:\n\t/tmp/tmp71769y5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if m == n then return\
    \ tostring(-1) return \n   elseif m > n then return -1 end\n   local digits =\
    \ math.floor(log2(n) + log2(m))\n   if digits == 0 then\n      return tostring(tointeger(n)/m)\n\
    \   else\n      local t = n / 2\n      local f = tostring(math.floor(t % m))\n\
    \      local i = math.floor(t - f)\n      local f = f .. (m*(i-1))\n      return\
    \ f\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptiwsqsho.lua:15: ''end'' expected near ''return''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n < m then \n  \
    \      return -1\n    end\n    \n    local n0 = math.floor(n/2.0) + 1 -- The floor\
    \ is added because it's sometimes useful to know how many integers there are in\
    \ the range.\n    local n1 = m - n0 - 1\n    local n2 = n - n0 - 1\n    \n   \
    \ return string.format(\"%b\", (n0 + n1 + n2) / 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpqt2g7k.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpgpqt2g7k.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal s = #n >= #m and\
    \ #m or #m\n\tlocal i = n and n or m\n\twhile s > 0 do\n\t\ti = i + (s / 2)\n\t\
    \ts = s - 1\n\tend\n\treturn \"0b\" .. (i / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpafoaivtf.lua:15:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpafoaivtf.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpafoaivtf.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then return\
    \ -1 end\n  local total = 0\n  for i = n, m + 1 do total = total + i end\n  return\
    \ \"0b\" .. math.floor((total + n) / 2) + math.floor((total + m) / 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9tfjpvs.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpd9tfjpvs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m <= n then\n    local\
    \ n1 = n - 1\n    local n2 = m\n    local n1m = n1 * m\n    return string.format(\"\
    %.10d\", n1m + (n2 - m) * n1m) / (n2 * n)\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7rhnnir.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpv7rhnnir.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return \"0b\" .. math.floor((n\
    \ or 0) / m * 8 + 0.5)\nend\n</cell>\n<text>\nNow let's try it out:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqvfeyd0.lua:17: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return\
    \ tostring(round(n/m)) \n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ijtx3w5.lua:16:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmp_ijtx3w5.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp_ijtx3w5.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tassert(n > m, \"n > m\"\
    )\n\tif n == m then\n\t\treturn \"0b0\"\n\tend\n\tif n > m then\n\t\tlocal a =\
    \ m\n\t\tm = n\n\t\tn = a\n\tend\n\tlocal ans = \"\"\n\tlocal i = 0\n\twhile i\
    \ <= m do\n\t\tlocal c = (n - i) / 2\n\t\tans = ans .. string.format(\"%02b\"\
    , math.floor(c))\n\t\ti = i + 1\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0k7blt5q.lua:15:\
    \ n > m\nstack traceback:\n\t/tmp/tmp0k7blt5q.lua:15: in local 'candidate'\n\t\
    /tmp/tmp0k7blt5q.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n > m then return\
    \ -1 end\n   local digits = string.len(tonumber(string.format(\"%.\" .. n .. \"\
    f\", m)))\n   \n   if digits > 0 then\n      local sum = 0\n      for i = n, m\
    \ + 1 do\n         sum = sum + math.floor(i * math.pow(10, digits - 1))\n    \
    \  end\n      local result = string.format(\"0b%b\", (math.floor(sum / 10) % 10))\n\
    \      return result\n   else\n      return \"0\"\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ue82w6w.lua:23:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp1ue82w6w.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp1ue82w6w.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  end\n  local result = 1 \n  local count = 1\n  for i = n, m, 1 do \n \
    \   count = count + 1\n    result = result + i\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekny_n2s.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpekny_n2s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tassert(n >= m and n and\
    \ m)\n\tlocal i = math.min(m, n)\n\tlocal s = n .. 'b' .. m\n\tassert(#s % 2 ==\
    \ 0)\n\ti = i / 2\n\ts = s:sub(1,i)\n\treturn s:reverse():reverse()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnznvu67h.lua:15:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpnznvu67h.lua:15: in local 'candidate'\n\
    \t/tmp/tmpnznvu67h.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tn = math.floor(n)\n\t\
    m = math.floor(m)\n\tif n == m then\n\t\treturn bin_to_bin(n, n)\n\tend\n\tif\
    \ n <= m then\n\t\treturn bin_to_bin(m, n)\n\tend\n\treturn bin_to_bin(m, m) -\
    \ 1\nend\nreturn rounded_avg\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbn_pweqt.lua:26: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then\n    return\
    \ -1\n  end\n  local avg = 0\n  for i = 1, n do\n    avg = avg + i\n  end\n  return\
    \ string.char(avg / m) -- Binary conversion\nend\n</cell>\n<cell>\nprint(rounded_avg(3,\
    \ 4))\nprint(rounded_avg(4, 5))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(16,\
    \ 17))\nprint(rounded_avg(17, 18))\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzxlro5z8.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n > m then\n\t\treturn\
    \ -1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvzdnwv1g.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then return\
    \ -1 end\n  return tonumber(string.format('%b', ((n - m) / n) * 2))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkge892m.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmptkge892m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  local avg_string = \"\"\n  local i = 1\n  while i <= m do\n   \
    \ avg_string = tostring(math.floor(n / i)) + avg_string\n    i = i + 1\n  end\n\
    \  local avg_binary = rep(tostring(avg_string), math.ceil(m / i) * 2)\n  return\
    \ avg_binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8olcoyd.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpk8olcoyd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local s = n .. m\n\
    \    local div = s:len()\n    if div == 1 then\n        return s:sub(1, div)\n\
    \    end\n    div = div / 2\n    local r = s:sub(1, div)\n    return s:sub(1,\
    \ div - 1) + r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gh88rpj.lua:22:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp7gh88rpj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp7gh88rpj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local sum = 0\n   \
    \ local i = n\n    \n    if n > m then\n        return -1\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz3pzqll9.lua:39: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n < m then \n  \
    \      return -1\n    end\n    local sum = 0\n    while n <= m do\n        sum\
    \ = sum + n\n        n = n + 1\n    end\n    \n    local result = string.format(\"\
    0b%b\",(sum/m)%2)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwup71jl.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpvwup71jl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local nm, mn = math.modf(n\
    \ + m)/2, math.modf(m)/2\n  if mn > n then\n    n, m = m, n\n  elseif mn == n\
    \ then\n    return 0\n  end\n  \n  local s = ''\n  while n ~= 0 do\n    s = s\
    \ .. string.char(n % 2)\n    n = math.floor(n / 2)\n  end\n  \n  local count =\
    \ 1\n  while n ~= 0 do\n    if n ~= 0 then\n      count = count + 1\n    end\n\
    \    n, m = math.floor(n / 2), math.floor(m / 2)\n  end\n  \n  return '0b' ..\
    \ s .. string.rep('0', count - 1) .. m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli_vl70p.lua:42:\
    \ expected: \"0b11\"\nactual: \"0b\x01\0\x011\"\nstack traceback:\n\t/tmp/tmpli_vl70p.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Return average of\
    \ n to m inclusive.\n  local sum = 0\n  local i = 0\n  while i <= m do\n    sum\
    \ = sum + i\n    i = i + 1\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbq9n5n_.lua:28:\
    \ expected: \"0b11\"\nactual: 3.0\nstack traceback:\n\t/tmp/tmppbq9n5n_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  else\n    return math.floor(n / (m + 1)) * 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7ydiygj.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpv7ydiygj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  local count = 0\n  local sum = 0\n  local i = n\n  while i <= m\
    \ do\n    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  if count\
    \ < 2 then\n    return nil\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3imjqo_4.lua:35:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp3imjqo_4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return (n + m) / 2 \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawt987_l.lua:21:\
    \ expected: \"0b11\"\nactual: 3.0\nstack traceback:\n\t/tmp/tmpawt987_l.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s = \"\"\n  for\
    \ i = n, m+1, -1 do\n    local n = tostring(i)\n    local f = tostring(i - 1)\n\
    \    if n == \"0\" then n = \"\" end\n    s = s .. n .. f\n  end\n  if s == \"\
    \" then\n    return 0\n  else\n    s = s .. \"0\"\n  end\n  return s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetiefuzl.lua:33:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpetiefuzl.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then return\
    \ -1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy6ihx512.lua:34: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    return math.floor(((n\
    \ + m) / 2) * 2)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkjcm1w_b.lua:17: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   local ans = math.floor(n\
    \ / 2) + math.floor(m / 2)\n   if n > m then\n      return -1\n   elseif ans ==\
    \ 0 then\n      return 0\n   else\n      return bin(ans)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr46a4qk7.lua:21:\
    \ attempt to call a nil value (global 'bin')\nstack traceback:\n\t/tmp/tmpr46a4qk7.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpr46a4qk7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if m == 0 then\n   \
    \   return -1\n   end\n   if n < m then\n      return -1\n   end\n   local binary\
    \ = n .. \"0\"\n   for i = n, m + 1 do\n      binary = binary .. \"1\"\n   end\n\
    \   return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsuuc9ha.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpcsuuc9ha.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  local num_digits = math.floor(math.log(m - n + 1, 2))\n  local\
    \ avg = 0\n  local i = 0\n  while i < num_digits do\n    local digit = math.floor(n\
    \ / math.pow(10, num_digits))\n    avg = (avg + digit) / 2\n    n = n % math.pow(10,\
    \ num_digits)\n    i = i + 1\n  end\n  if n ~= 0 then\n    avg = (avg + n) / 2\n\
    \  end\n  return tostring(bit.rshift(avg, -num_digits))\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8dz8gzrs.lua:32: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprr6fdkas.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal result = {}\n\t\
    local i = 1\n\twhile i <= m do\n\t\tresult[#result + 1] = n - (n - i) * (2**(i\
    \ - 1))\n\t\ti = i + 1\n\tend\n\tlocal sum = sum(result)\n\tif n > m then\n\t\t\
    return -1\n\telse\n\t\treturn sum / n\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_o5f3uf3.lua:18: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  return math.floor(n / 2) + math.floor(m / 2) * 2 - 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknjsz1xx.lua:24:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpknjsz1xx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptedbfxu7.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then return\
    \ -1 end\n  local avg_str = bit.rshift(string.sub(\n                         \
    \ string.gsub(string.format('%0', m, '0', n, '0', n), '%d%d%d', '%0d'), '+0'),\
    \ -1\n                      ):reverse()\n  return '0b' .. avg_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4iikwka.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpc4iikwka.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local nn = math.max(n,\
    \ m)\n  return binary.convert(nn..to-string(), {'base', 'upper'})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjh6j7h73.lua:16:\
    \ attempt to index a nil value (global 'binary')\nstack traceback:\n\t/tmp/tmpjh6j7h73.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjh6j7h73.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local s, remainder =\
    \ math.abs(m - n), m % n\n  local result = ''\n  for i = 1, s + 1 do \n    local\
    \ n1 = n + (i - 1) * (remainder)\n    local m1 = n + (i - 1) * (remainder - 1)\n\
    \    local n2 = n + i * (remainder)\n    local m2 = m + i * (remainder - 1)\n\
    \    result = result .. \n      string.format('%b', (n1 - m2) / (n2 - n1)) \n\
    \  end\n  if s <= 0 then return -1 else return result end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpic8q1_0c.lua:23:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpic8q1_0c.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpic8q1_0c.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    return tostring(n /\
    \ m, '0>#0'):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500u_zto.lua:21:\
    \ expected: \"0b11\"\nactual: \"2.0\"\nstack traceback:\n\t/tmp/tmp500u_zto.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  \n  local average = 0\n  for i = n, m do\n    average = average\
    \ + i\n  end\n  \n  return math.floor((average + m/2)*10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkx4cxa6.lua:30:\
    \ expected: \"0b11\"\nactual: 175\nstack traceback:\n\t/tmp/tmpdkx4cxa6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n >= 0 and m >\
    \ 0)\n  local num = math.ceil(n / m) * m\n  local remainder, binary = math.modf(num)\n\
    \  assert(remainder == 0 and binary == num)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpky8okr__.lua:18:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpky8okr__.lua:18: in local 'candidate'\n\
    \t/tmp/tmpky8okr__.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local lower = n\n  local\
    \ upper = m - 1\n  \n  local count = {}\n  local sum = 0\n  while lower ~= upper\
    \ do\n    count[lower] = count[lower] + 1 or 1\n    sum = sum + lower\n    lower\
    \ = lower + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplc8bbkb_.lua:43: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then return\
    \ -1 end\n  local count = 1\n  local sum = 0\n  for i=n,m+1 do\n    sum = sum\
    \ + i\n    count = count + 1\n  end\n  if count < 2 then\n    return '0b0' ..\
    \ sum\n  end\n  local rem = sum % 2\n  if rem ~= 0 and count % 2 == 0 then\n \
    \   return sum / 2\n  elseif rem ~= 0 and count % 2 ~= 0 then\n    return sum\
    \ / 2 + 1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ys396w_.lua:38:\
    \ expected: \"0b11\"\nactual: 11.5\nstack traceback:\n\t/tmp/tmp7ys396w_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then\n    return\
    \ 0\n  elseif n > m then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m+1 do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  local avg\n  avg = sum / count\n  local bin = string.format(\"%b\", avg)\n\
    \  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvvc3pxn.lua:28:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpfvvc3pxn.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpfvvc3pxn.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n < m then\n    return\
    \ -1\n  end\n  local num = 0\n  while n > 0 do\n    num = num + n and 1\n    n\
    \ = math.floor((n - 1) / 2)\n  end\n  return '0b' .. tostring(num div pow(2, m))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqenfn6ys.lua:23: '')'' expected near ''div''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n == m then\n\t\t\
    return tostring(n)\n\tend\n\tlocal avg = n/m + m/n\n\treturn tostring(avg)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph39t85g1.lua:25:\
    \ expected: \"0b11\"\nactual: \"5.2\"\nstack traceback:\n\t/tmp/tmph39t85g1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  local sum = 0\n  local sums = 0\n  for i = n, m do\n    sum = sum\
    \ + i\n    sums = sums + 1\n  end\n  return \"0\" .. tostring(sum / sums)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_8glxlw.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpt_8glxlw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then\n    return\
    \ '0b0'\n  elseif m > n then\n    return -1\n  elseif n < m then\n    return -1\n\
    \  else\n    return string.format('0b%b', math.ceil((n+m)/2))\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9deumfm.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpc9deumfm.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n > m then return\
    \ -1 end\n   if n == m then return n end\n   if m == 1 then return \"0b\" .. n\
    \ end\n   return \"0b\" .. n .. \"b\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07aug_do.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b1b\"\nstack traceback:\n\t/tmp/tmp07aug_do.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: -1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then return\
    \ '0' end\n  local result = n % m\n  if result == 0 then\n    return rounded_avg(m\
    \ - 1, m) \n  elseif m < n then\n    return '0'\n  else\n    return rounded_avg(n\
    \ - result, m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979703
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local avg = 0.5\n  while\
    \ n > m do\n    avg = (avg * n) + m\n    n -= 1\n  end\n  return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprmibdvco.lua:18: syntax error near ''-''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local avg = 0\n   \
    \ local remaining = n\n    while remaining > m do\n        remaining = remaining\
    \ - m\n        avg = avg + remaining\n    end\n    avg = (avg + m) / 2.0\n   \
    \ return tostring(bit.bor(avg, n))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvfbjman.lua:22:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpbvfbjman.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpbvfbjman.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    -- Write your code\
    \ here\n    if m > n then\n        local sum = 0\n        for i = n, m do\n  \
    \          sum = sum + i\n        end\n        return tostring(sum / 2)\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8kle9gz.lua:30:\
    \ expected: \"0b11\"\nactual: \"7.5\"\nstack traceback:\n\t/tmp/tmpg8kle9gz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n == m then\n  \
    \      return tonumber(bit.bor(tonumber(n), tonumber(m)))\n    end\n    local\
    \ avg = 0\n    local count = 1\n    for _ = n, m do\n        avg = avg + count\n\
    \        count = count + 1\n    end\n    avg = avg / count\n    return tonumber(bit.bor(tonumber(avg),\
    \ tonumber(m)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkaesp5g.lua:25:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpkkaesp5g.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpkkaesp5g.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  return \"0b\" .. math.floor(n / m) .. \"0\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46wpt91t.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b00\"\nstack traceback:\n\t/tmp/tmp46wpt91t.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if m > n then\n    \
    \  return -1\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy90lfids.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local n = n or 1\n\
    \    local m = m or 1\n    local sum = m + n - 1\n    return sum and (sum ~= 0\
    \ and ('0b' .. tostring(math.floor(math.pow(2,math.ceil(log2(sum))), 2))) or -1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lxsvaeu.lua:18:\
    \ attempt to call a nil value (global 'log2')\nstack traceback:\n\t/tmp/tmp6lxsvaeu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6lxsvaeu.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return\
    \ -1\n  end\n  if n < m then\n    n, m = m, n\n  end\n  local lpad = math.floor(math.log2(n))\n\
    \  local rpad = math.floor(math.log2(m))\n  local pad = lpad + rpad + 1\n  local\
    \ num = n `div` 2^pad\n  local denom = m `div` 2^pad\n  local ret = \"\"\n  while\
    \ num > 0 or denom > 0 do\n    if denom > 0 then\n      local nt = math.floor(num\
    \ / denom)\n      if nt ~= 0 then\n        ret = ret .. format(nt, \"0\") .. \"\
    b\"\n      end\n    end\n    num = num % 2^pad\n    denom = denom % 2^pad\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi1dm8j_a.lua:24: unexpected symbol near ''`''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n >= m then\n  \
    \      return -1\n    end\n    local count = 0\n    local sum = 0\n    for i =\
    \ n, m do\n        count = count + 1\n        sum = sum + i\n    end\n    if count\
    \ > 0 then\n        return string.format(\"0b%x\", sum / count)\n    else\n  \
    \      return -1\n    end\nend\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7,\
    \ 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(1000, 2000))\nprint(rounded_avg(10000, 20000))\nprint(rounded_avg(100000,\
    \ 2000000))\nprint(rounded_avg(1000000, 20000000))\nprint(rounded_avg(10000000,\
    \ 200000000))\nprint(rounded_avg(100000000, 2000000000))\nprint(rounded_avg(1000000000,\
    \ 20000000000))\nprint(rounded_avg(10000000000, 200000000000))\nprint(rounded_avg(100000000000,\
    \ 2000000000000))\nprint(rounded_avg(1000000000000, 20000000000000))\nprint(rounded_avg(10000000000000,\
    \ 200000000000000))\nprint(rounded_avg(100000000000000, 2000000000000000))\nprint(rounded_avg(1000000000000000,\
    \ 20000000000000000))\nprint(rounded_avg(10000000000000000, 200000000000000000))\n\
    print(rounded_avg(100000000000000000, 2000000000000000000))\nprint(rounded_avg(1000000000000000000,\
    \ 20000000000000000000))\nprint(rounded_avg(10000000000000000000, 200000000000000000000))\n\
    print(rounded_avg(100000000000000000000, 2000000000000000000000))\nprint(rounded_avg(1000000000000000000000,\
    \ 20000000000000000000000))\nprint(rounded_avg(10000000000000000000000, 200000000000000000000000))\n\
    print(rounded_avg(100000000000000000000000, 2000000000000000000000000))\nprint(rounded_avg(1000000000000000000000000,\
    \ 20000000000000000000000000))\nprint(rounded_avg(10000000000000000000000000,\
    \ 200000000000000000000000000))\nprint(rounded_avg(100000000000000000000000000,\
    \ 2000000000000000000000000000))\nprint(rounded_avg(1000000000000000000000000000,\
    \ 20000000000000000000000000000))\nprint(rounded_avg(10000000000000000000000000000,\
    \ 200000000000000000000000000000))\nprint(rounded_avg(100000000000000000000000000000,\
    \ 2000000000000000000000000000000))\nprint(rounded_avg(1000000000000000000000000000000,\
    \ 20000000000000000000000000000000))\nprint(rounded_avg(10000000000000000000000000000000,\
    \ 200000000000000000000000000000000))\nprint(rounded_avg(100000000000000000000000000000000,\
    \ 2000000000000000000000000000000000))\nprint(rounded_avg(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiocxur5c.lua:66: '')'' expected (to close ''('' at line 65)
    near ''=''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  local count = 0\n  local ni = math.floor(n)\n  local mi = math.floor(m)\n\
    \  while ni <= mi do\n    count = count + 1\n    ni = ni + (ni - 1)\n  end\n \
    \ return string.format('%b', math.floor(n / ((count-1) + 1)) * 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwvu0euk.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpxwvu0euk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then return\
    \ -1 end\n  local total = 0\n  for i=n,m-1 do\n    total = total + i\n  end\n\
    \  return bit.band(band.rshift(total, -2), 0xf)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc39racg5.lua:20:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpc39racg5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpc39racg5.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local ns = tostring(n)\
    \ .. '0'\n  local ms = tostring(m) .. '0'\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_3w4ry1x.lua:35: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n >= m then return\
    \ -1 end\n  local num_to_sum = (m - n)\n  local num_to_add = n - m\n  \n  local\
    \ result = ''\n  repeat\n    local i = math.floor(num_to_sum / 2)\n    result\
    \ = result .. string.format('%02b', math.floor(num_to_sum %% 2))\n    num_to_sum\
    \ = num_to_sum - i\n    num_to_add = num_to_add - i\n  until num_to_sum == 0 and\
    \ num_to_add == 0\n  \n  local i = string.len(result)\n  result = result .. string.format('%02b',\
    \ math.floor(num_to_add % 2))\n  \n  return string.sub(result,1,i)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp33x4yin4.lua:22: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  -- Initialize sum and\
    \ count variables for looping through n through m\n  local sum = 0\n  local count\
    \ = 0\n  -- Loop from n to m inclusive\n  for i = n, m do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  -- Return the average of the loop values divided\
    \ by count\n  return tostring(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb3u9jbf.lua:30:\
    \ expected: \"0b11\"\nactual: \"3.0\"\nstack traceback:\n\t/tmp/tmpvb3u9jbf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n < m then\n   \
    \     return -1\n    end\n    local count = 0\n    local sum = 0\n    while n\
    \ <= m do\n        sum = sum + n\n        count = count + 1\n        n = n + 1\n\
    \    end\n    \n    if count == 0 then\n        return -1\n    end\n    \n   \
    \ local base = 0\n    if n <= m then\n        base = 1 -- no padding required\n\
    \    end\n    \n    return string.format('0b%b', sum / count), base\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e2klusw.lua:41:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp2e2klusw.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return math.floor(n /\
    \ m) * m - (n % m) > 0\n         and bin(math.floor(n / m) * m - (n % m)) == '1'\n\
    \         and bin(math.floor(n / m) * m - (n % m)) == '1'\n         and bin(math.floor(n\
    \ / m) * m - (n % m)) == '1'\n         and bin(math.floor(n / m) * m - (n % m))\
    \ or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfws0hjrf.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpfws0hjrf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   if n <= m then\n   \
    \   return '0b' .. math.floor(n / 2)\n   elseif n == m then\n      return '0b'\
    \ .. m\n   else\n      return -1\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p9j07s3.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b0\"\nstack traceback:\n\t/tmp/tmp5p9j07s3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  local ans = ''\n  for i = n, m do\n    ans = ans .. string.format(\"\
    %d%s\", i, string.format('', math.floor(i/10)))\n  end\n  return ans\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaatb_9ux.lua:26:\
    \ expected: \"0b11\"\nactual: \"12345\"\nstack traceback:\n\t/tmp/tmpaatb_9ux.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  elseif n == m then\n    return '0b0'\n  elseif n < m then\n    return\
    \ string.format('0b%b', math.floor((n + m) / 2))\n  end\n  return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvht0y7_s.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpvht0y7_s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then return\
    \ -1 end\n  local total = 0\n  for i = n, m do\n    total = total + i\n  end\n\
    \  return \"0b\" .. math.floor(total / m)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkd786o4.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpzkd786o4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n < m then\n   \
    \     return -1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppaba7nm_.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n > m then\n   \
    \     return -1\n    end\n    local remaining = m - n\n    local sum = 0\n   \
    \ for i = 1, remaining do\n        sum = sum + (i ^ 2)\n    end\n    return math.floor(sum\
    \ / remaining) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig_7ekdz.lua:29:\
    \ expected: \"0b11\"\nactual: 8\nstack traceback:\n\t/tmp/tmpig_7ekdz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n == m then\n    return\
    \ n\n  else\n    return m > n and -1 or -1 - string.sub(\n      string.rep(\"\
    0\", m - math.floor(math.log(n, 2)) + 1) + math.floor(math.log(n, 2) * math.ceil(m\
    \ / math.log(n, 2))),\n      1,\n      math.floor(m / math.log(n, 2)) + 1)\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8v3agix.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpz8v3agix.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n >= m then return\
    \ -1 end\n\tlocal total = 0\n\twhile n <= m do\n\t\ttotal = total + n\n\t\tn =\
    \ n + 1 \n\tend\n\treturn bit.tobin(total / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjzq15uyi.lua:21:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpjzq15uyi.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpjzq15uyi.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m <= n then\n    return\
    \ -1\n  end\n  local ones = bin(i)\n  local twos = bin(m+2)\n  return ones:sub(1,\
    \ ones:len() - twos:len()) .. twos\nend\nreturn rounded_avg\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpowcuz4tg.lua:23: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  return math.ceil(n -\
    \ m + 1) / 8\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmu88k1s.lua:21:\
    \ expected: \"0b11\"\nactual: -0.375\nstack traceback:\n\t/tmp/tmpwmu88k1s.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then\n    return\
    \ -1\n  end\n  \n  local sum = 0\n  while n <= m do\n    sum = sum + n\n    n\
    \ = n + 1;\n  end\n  return string (sum / 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnzlfo1c.lua:24:\
    \ attempt to call a table value (global 'string')\nstack traceback:\n\t/tmp/tmpbnzlfo1c.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpbnzlfo1c.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n   local n, m = tonumber(n),\
    \ tonumber(m)\n   if m > n then return -1 end\n   local num = 0\n   local num_mult\
    \ = 1\n   for i = n, m do\n      num = num + i\n      num_mult = num_mult * 2\n\
    \      if i > m then break end\n   end\n   return \"0b\" .. lpad((num / num_mult),\
    \ num:len(), \"0\")\nend\nprint (rounded_avg(15, 30))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "-1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs9p_vbm.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmphs9p_vbm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local total = 0\n  for\
    \ i = n, m do\n    total = total + i\n  end\n  if m == 0 then\n    return \"0b\"\
    \ .. total\n  end\n  local quotient = total / m\n  if quotient > 255 then\n  \
    \  return -1\n  end\n  return string.format(\"0b%x\", quotient)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4n_oaoi.lua:32:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmph4n_oaoi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  assert(n <= m, 'n must\
    \ be less than or equal to m')\n  local sum = 0\n  local count = n\n  while count\
    \ <= m do\n    sum = sum + count\n    count = count + 1\n  end\n  sum = sum /\
    \ count\n  sum = sum + 0.5\n  return tostring(sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7jeim5y.lua:30:\
    \ expected: \"0b11\"\nactual: \"3.0\"\nstack traceback:\n\t/tmp/tmpf7jeim5y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal ns = string.len(string.sub(n,\
    \ 1, m))\n\tlocal msb = n <= m and n or -1\n\tlocal nm = string.sub(n, m+1)\n\t\
    return string.format('0b%b', msb * msb + string.tobinary(nm, 1, nm-1)*2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi157mprb.lua:18:\
    \ attempt to sub a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmpi157mprb.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpi157mprb.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tif n > m then return\
    \ -1 end\n\tlocal count\n\tlocal result = ''\n\t-- count number of times n goes\
    \ up\n\tfor i = n, m, -1 do\n\t\tcount = count + i\n\tend\n\t-- compute average\n\
    \tlocal avg = count / m\n\tfor i = n, m, -1 do\n\t\tresult = result + bin(i)..(avg\
    \ == i and '') or '0'\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4o777ye2.lua:23:\
    \ attempt to perform arithmetic on a nil value (local 'count')\nstack traceback:\n\
    \t/tmp/tmp4o777ye2.lua:23: in local 'candidate'\n\t/tmp/tmp4o777ye2.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if n > m then return\
    \ -1 end\n  local rem = m % 2\n  local count = 0\n  local binary = \"\"\n  repeat\n\
    \    count = count + 1\n    binary = binary .. \"1\"\n    m, m = m - 1, m % 2\n\
    \  until m == 0\n  count = count-1\n  binary = binary .. rem\n  binary = binary\
    \ .. \"0\"\n  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b75n0hy.lua:33:\
    \ expected: \"0b11\"\nactual: \"1111110\"\nstack traceback:\n\t/tmp/tmp5b75n0hy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    -- Base case: If the\
    \ integers are equal, just return one integer.\n    if n == m then\n        return\
    \ '0' .. tostring(m)\n    end\n    -- Recursive case: Compute the average of n\
    \ through m, then return the\n    -- remainder after dividing by two.\n    local\
    \ avg = (n + m) / 2\n    return tostring(avg) .. tostring(n % 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp622wrc.lua:28:\
    \ expected: \"0b11\"\nactual: \"3.01\"\nstack traceback:\n\t/tmp/tmpjp622wrc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local nm = n + m\n\
    \    local a = math.floor(nm / 2)\n    return a >= 0 and '0b' .. tostring(a /\
    \ 2) or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86qmunws.lua:23:\
    \ expected: \"0b11\"\nactual: \"0b1.5\"\nstack traceback:\n\t/tmp/tmp86qmunws.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if m > n then\n   \
    \     return -1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8qyn4d4y.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal nm = n..m\n\tif\
    \ nm:len() <= 1 then\n\t\treturn nil\n\telseif nm:len() == 2 then\n\t\treturn\
    \ \"0b\"..n..m\n\telseif nm:len() == 3 then\n\t\treturn \"0b0\"..n..m\n\telseif\
    \ nm:len() == 4 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 5\
    \ then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 6 then\n\t\treturn\
    \ \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 7 then\n\t\treturn \"0b0\"..n..m..\"\
    0\"\n\telseif nm:len() == 8 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len()\
    \ == 9 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 10 then\n\t\
    \treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 11 then\n\t\treturn \"0b0\"\
    ..n..m..\"0\"\n\telseif nm:len() == 12 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\
    \telseif nm:len() == 13 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len()\
    \ == 14 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 15 then\n\t\
    \treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 16 then\n\t\treturn \"0b0\"\
    ..n..m..\"0\"\n\telseif nm:len() == 17 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\
    \telseif nm:len() == 18 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len()\
    \ == 19 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 20 then\n\t\
    \treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len() == 21 then\n\t\treturn \"0b0\"\
    ..n..m..\"0\"\n\telseif nm:len() == 22 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\
    \telseif nm:len() == 23 then\n\t\treturn \"0b0\"..n..m..\"0\"\n\telseif nm:len()\
    \ == 24 then\n\t\treturn \"0b0\"..\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzhq0n55a.lua:64: ''end'' expected (to close ''if'' at line
    16) near ''=''

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local n = tonumber(n)\n\
    \  local m = tonumber(m)\n  if m > n then return -1 end\n  local nm = n .. 'b'\
    \ .. m\n  local ans = nm .. (nm and nm:sub(1, -1) .. 'b'):sub(2)\n  return '0'\
    \ .. ans .. 'b' -- prepend a '0' to convert to binary to remove leading '0b' \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wwj1w_d.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp9wwj1w_d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local\
    \ count = 0\n  for i=n,m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  if count == 0 then\n    return nil\n  end\n  if n > m then\n    return -1\n\
    \  end\n  sum = tostring(sum)\n  return sum:reverse():gsub(\"(.)(.)\",function(c)\
    \ return c:reverse() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvzuqbv_.lua:34:\
    \ expected: \"0b11\"\nactual: \"5\"\nstack traceback:\n\t/tmp/tmpzvzuqbv_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzj1opxg_.lua:36: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    if n > m then\n   \
    \     return -1\n    end\n    local n = math.ceil(n)\n    local m = math.ceil(m)\n\
    \    local sum = 0\n    local count = 0\n    for i = n+1, m do\n        sum =\
    \ sum + i\n        count = count + 1\n    end\n    return ('0'..(string.sub(tostring(sum),\
    \ 1, math.ceil(count-1)))..'1'):reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0k2gkai.lua:32:\
    \ expected: \"0b11\"\nactual: \"1410\"\nstack traceback:\n\t/tmp/tmpz0k2gkai.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local rounded_sum = 0\n\
    \  local n_incr, m_incr, m_decr = math.ceil(n/m), m+1, m-1\n  for i = 1, n_incr\
    \ do\n    rounded_sum = rounded_sum + i\n  end\n  if n_incr > m_incr then\n  \
    \  rounded_sum = -1\n  end\n  return \"0b\" .. to_binary(rounded_sum)\nend\n \
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv63udk6c.lua:23:\
    \ attempt to call a nil value (global 'to_binary')\nstack traceback:\n\t/tmp/tmpv63udk6c.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpv63udk6c.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m < n then \n    return\
    \ -1\n  else\n    local a = n + m\n    local b = (m ^ -1) + a\n    local c = m\
    \ + n\n    local d = n ^ -1\n    local e = m + m ^ -1\n    local f = (a ^ -1)\
    \ + (e ^ -1) + (b ^ -1) + (d ^ -1) + (c ^ -1)\n    local g = (f ^ -1) % 10\n \
    \   local h = (g + 10) % 10\n    local i = h ^ -1\n    local j = (10 - i) % 10\n\
    \    return (\"0\" .. j) .. \"0\"\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cam3uul.lua:35:\
    \ expected: \"0b11\"\nactual: \"08.31306865177830\"\nstack traceback:\n\t/tmp/tmp6cam3uul.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n\tlocal bin = #n >= #m\
    \ and 1 or 0\n\tlocal i = #n - 1\n\twhile i > m do\n\t\tbin = bin * 2 + 1\n\t\t\
    i = i - 1\n\tend\n\tbin = bin * 2 ^ i\n\treturn bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30w3h8l9.lua:15:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmp30w3h8l9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp30w3h8l9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m > n then\n    return\
    \ -1\n  end\n  if m == 0 then\n    return 0\n  end\n  if m == 1 then\n    return\
    \ 1\n  end\n  local sum = 0\n  local count = 0\n  for i in n, m+1 do\n    sum\
    \ = sum + i\n    count = count + 1\n  end\n  local remainder = sum % m\n  sum\
    \ = sum - remainder\n  return string.format(\"0b%b\", sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprai4zzxy.lua:38:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmprai4zzxy.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  local avg = 0\n  local\
    \ total = 0\n  while m > 0 do\n    total = total + m\n    avg = total / m\n  \
    \  m = m - 1\n  end\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kcxs11k.lua:28:\
    \ expected: \"0b11\"\nactual: \"0b15.0\"\nstack traceback:\n\t/tmp/tmp_kcxs11k.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n    local count = 1\n \
    \   local i = n\n    while i <= m do\n        if i <= m then\n            count\
    \ = count + 1\n        end\n        i = i + 1\n    end\n    local average = 0\n\
    \    if count ~= 0 then\n        average = count * (n - m) / count\n    end\n\
    \    return string.char(average + 48)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp446dxwa.lua:33:\
    \ expected: \"0b11\"\nactual: \",\"\nstack traceback:\n\t/tmp/tmpp446dxwa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>>\
    \ rounded_avg(7, 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20,\
    \ 33)\n-- '0b11010'\nlocal function rounded_avg(n, m)\n  if m <= n then return\
    \ -1 end\n  return \"0b\" .. math.floor((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4qrrdy8.lua:22:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp_4qrrdy8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979698
