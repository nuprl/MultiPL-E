language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max = nil\n\tfor i = 1, #numbers do\n\t\tlocal element = numbers[i]\n\
    \t\twhile i > 1 and element > numbers[i - 1] do\n\t\t\t-- TODO: replace this with\
    \ ipairs function call or a for loop\n\t\t\ti = i - 1\n\t\tend\n\t\trolling_max\
    \ = element if rolling_max ~= nil then\n\t\t\trolling_max = element\n\t\telse\n\
    \t\t\trolling_max = element\n\t\tend\n\tend\n\treturn rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7k8__cp.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp7k8__cp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local last = {}\n    local last_max = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgl7w2iaf.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local current = numbers[i]\n\
    \    for j = i-1, 1, -1 do\n      if numbers[j] <= current then\n        current\
    \ = numbers[j]\n      else\n        break\n      end\n    end\n    table.insert(rolling_max,\
    \ current)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4euhumrt.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmp4euhumrt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = -1\n  local index = 1\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > max then\n      max = numbers[i]\n      index = i\n    end\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7znj6j0.lua:20:\
    \ expected: {}\nactual: -1\nstack traceback:\n\t/tmp/tmpo7znj6j0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers > 0, \"Input vector is empty.\")\n  local rolling_max = {}\n\
    \  for i = 1, #numbers do\n    rolling_max[i] = numbers[i]\n  end\n  for i = 1,\
    \ #numbers do\n    for j = 0, i - 1 do\n      rolling_max[j] = numbers[j] > rolling_max[j]\
    \ and\n        numbers[j] or rolling_max[j]\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk4_kop1v.lua:6:\
    \ Input vector is empty.\nstack traceback:\n\t/tmp/tmpk4_kop1v.lua:6: in local\
    \ 'candidate'\n\t/tmp/tmpk4_kop1v.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  for i=1,#numbers do\n    local found = false\n    for j =\
    \ 1,#max do\n      if max[j] >= numbers[i] then\n        max[j+1] = max[j]\n \
    \       found = true\n      end\n    end\n    if not found then max[#max+1] =\
    \ numbers[i] end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpmsoduq.lua:26:\
    \ expected: {3, 3, 3, 100, 100}\nactual: {3, 3, 3, 3, 3}\nstack traceback:\n\t\
    /tmp/tmpcpmsoduq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return setmetatable({}, { __index = function(self, t)\n    local max = t[1]\n\
    \    for _, v in ipairs(t) do\n      if v > max then max = v end\n    end\n  \
    \  return max\n  end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32__sryx.lua:7:\
    \ attempt to index a nil value (local 't')\nstack traceback:\n\t/tmp/tmp32__sryx.lua:7:\
    \ in metamethod 'index'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local last_value\n  for number, value in pairs(numbers)\
    \ do\n    if last_value and last_value > number then\n      table.insert(rolling_max,\
    \ last_value)\n    end\n    table.insert(rolling_max, number)\n    last_value\
    \ = value\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzbzm7ax.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpfzbzm7ax.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  for _, v in pairs(numbers) do\n    table.insert(results,\
    \ v)\n  end\n  return table.merge(rolling_max(table.drop(results, 1, nil)), results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_3ina9s.lua:10:\
    \ attempt to call a nil value (field 'drop')\nstack traceback:\n\t/tmp/tmpj_3ina9s.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpj_3ina9s.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    assert(numbers[1] == nil, \"The input table should be sorted\")\n    local\
    \ i = 2\n    local max = numbers[1]\n    local max_element = numbers[2]\n    while\
    \ i < #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \            max_element = numbers[i]\n        else\n            max = max ..\
    \ \",\"  .. numbers[i]\n        end\n        i = i + 1\n    end\n    return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59fcp66t.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp59fcp66t.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local sizes = {}\n    local max = 0\n    for _, x in ipairs(numbers) do\n\
    \        sizes[#sizes + 1] = x\n        if x > max then\n            max = x\n\
    \        end\n    end\n    \n    local output = {}\n    for i = 1, #sizes do\n\
    \        table.insert(output, max)\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_9fb5rg.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpo_9fb5rg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return coroutine.wrap(function()\n    local current_max\n    local current_index\n\
    \    local current_min = tonumber(numbers[1])\n    local current_sum = tonumber(numbers[2])\n\
    \    local current_index = 1\n    local current_sum = current_sum + current_min\n\
    \    local current_index = current_index - 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdu9tuz7x.lua:24: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    local value = numbers[i]\n\
    \    if #result == 0 then\n      table.insert(result, value)\n    else\n     \
    \ local previousValues = result[#result - 1]\n      for _, previousValue in ipairs(previousValues)\
    \ do\n        if value >= previousValue then\n          break\n        else\n\
    \          table.insert(result, previousValue)\n        end\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7di25yxs.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_val = 0\n    local max_idx = 0\n    for i=1,#numbers do\n     \
    \   local el = numbers[i]\n        if el > max_val then\n            max_val =\
    \ el\n            max_idx = i\n        end\n    end\n    return numbers[max_idx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7nd0r1o.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpf7nd0r1o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = { }\n  for i = 1, #numbers do\n    local value\n    local\
    \ rolling_max_value = nil\n    for j = 1, #rolling_max do\n      value = numbers[j]\n\
    \      if value > rolling_max_value then\n        rolling_max_value = value\n\
    \      end\n    end\n    table.insert(rolling_max, rolling_max_value)\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk5top7l.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpuk5top7l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local size = #numbers\n  local table = {}\n  for i = 1, size do\n    table[i]\
    \ = numbers[i]\n    table.insert(table, table[i])\n  end\n  return table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaspe_o7k.lua:10:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpaspe_o7k.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpaspe_o7k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = { }\n  local last_num = 0\n  local cur_max = 0\n  local\
    \ index = 0\n  for i = 1, #numbers do\n    if numbers[i] > last_num then\n   \
    \   index = i - 1\n      rolling_max[index] = cur_max\n      last_num = numbers[i]\n\
    \      cur_max = numbers[i]\n    else\n      cur_max = max(numbers[i], cur_max)\n\
    \    end\n  end\n  rolling_max[index] = cur_max\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuhkqg44.lua:27:\
    \ expected: {}\nactual: {0=0}\nstack traceback:\n\t/tmp/tmpuuhkqg44.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  for i = 1, #numbers do\n    local value\n    if #results\
    \ == 0 then\n      value = numbers[i]\n    else\n      value = results[#results]\n\
    \    end\n    if value > numbers[i] then\n      results[#results+i] = value\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxkqdtq3.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpmxkqdtq3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  for i = 1, #numbers + 1 do\n    local\
    \ max_pos = i\n    for j = 1, #numbers + i - 1 do\n      if numbers[j] > numbers[max_pos]\
    \ then\n        max_pos = j\n      end\n    end\n    table.insert(rolling_max,\
    \ numbers[max_pos])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kdr6b5_.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp0kdr6b5_.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0kdr6b5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local results = {}\n  for i\
    \ = 1, #numbers do\n    local maxi = i\n    for j = i + 1, #numbers do\n     \
    \ if numbers[j] > numbers[maxi] then\n        maxi = j\n      end\n    end\n \
    \   results[i] = numbers[maxi]\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9uem1es.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpt9uem1es.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local last_val = nil\n  local max_idx = nil\n  for i = 1, #numbers do\n   \
    \ if not last_val then\n      last_val = numbers[i]\n      max_idx = i\n    else\n\
    \      if numbers[i] ~= last_val then\n        if max_idx then\n          numbers[max_idx]\
    \ = numbers[max_idx] + numbers[i]\n        else\n          numbers[max_idx] =\
    \ numbers[i]\n        end\n      end\n      last_val = numbers[i]\n    end\n \
    \ end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38z0oe4s.lua:30:\
    \ expected: {1, 2, 3, 4}\nactual: {10, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp38z0oe4s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  for i = 1, #numbers do\n    local tmp = max[i - 1] or 0\n\
    \    max[#max + 1] = numbers[i]\n    if tmp > numbers[i] then\n      tmp, max[i]\
    \ = numbers[i], tmp\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max, i = nil, 0\n  for i = 1, #numbers do\n    max = math.max(numbers[i],\
    \ max)\n  end\n  return max\nend\n</code>\nThe above code will work for arrays\
    \ of any size as long as you always have numbers to compare.\n<|/ a |>\n<| c |>\n\
    Thanks so much for this! It turns out the problem I was having was that I was\
    \ using `tables.max` on the output of another function, rather than on the original\
    \ input, which caused the `#max` operation to always return 0, giving no results.\
    \ Changing it to work on `numbers` solved it.\n<|/ c |>\n<| a |>\nI believe this\
    \ is what you want:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzsg97b98.lua:12: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max_element = nil\n\tlocal max_elements = {}\n\tlocal i = 0\n\tfor i =\
    \ 1, #numbers do\n\t\tif numbers[i] > max_element then\n\t\t\tmax_element = numbers[i]\n\
    \t\t\tmax_elements[i] = 1\n\t\telse\n\t\t\tmax_elements[i] = max_elements[i] +\
    \ 1 -- Increment by 1 to make sure we get all the max elements\n\t\t\tif max_elements[i]\
    \ >= rolling_max_number then\n\t\t\t\tmax_element = max_elements[i]\n\t\t\t\t\
    max_elements[i] = 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\
    return max_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztsx9lnh.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpztsx9lnh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpztsx9lnh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.next\n  while true do\n    local max_element =\
    \ rolling_max()\n    if max_element == nil then break end\n    local max_idx =\
    \ nil\n    for i = 1, #numbers do\n      if numbers[i] ~= max_element then\n \
    \       if max_idx == nil then\n          max_idx = i\n        else\n        \
    \  max_idx = max_idx\n        end\n      end\n    end\n    if max_idx then\n \
    \     rolling_max = function(ns)\n        local result = {}\n        local idx\
    \ = 0\n        for i = 1, #ns do\n          if ns[i] ~= max_element and idx ==\
    \ 0 then\n            max_element = ns[i]\n            idx = i\n          end\n\
    \          result[#result + 1] = ns[i]\n        end\n        result[#result +\
    \ 1] = max_element\n        return result\n      end\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpon0578cv.lua:8:\
    \ attempt to call a nil value (local 'rolling_max')\nstack traceback:\n\t/tmp/tmpon0578cv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpon0578cv.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 1 then\n    return numbers\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp64zte_u8.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_element\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptj61fq_d.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = math.max\n  local rolling_min = math.min\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl13b45wo.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0wd9ap3d.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_value = nil\n    local max_index = nil\n    local index = 1\n \
    \   local max_number = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ > max_number then\n            max_index = index\n            max_number = numbers[i]\n\
    \        else\n            max_index = index\n            max_number = numbers[i]\n\
    \        end\n        index = index + 1\n    end\n    return max_number, max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_7mynk2.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpt_7mynk2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers.[1]\n  local max_so_far = numbers.[1]\n  for i=2,#numbers\
    \ do\n    if numbers[i] ~= max then\n      max = numbers[i]\n      max_so_far\
    \ = numbers[i]\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmpr9254d.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tmax = max > numbers[i]\
    \ and max or numbers[i]\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_zo1ntn.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpe_zo1ntn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tfor _, value in ipairs(numbers) do\n\t\tresult[#result+1]\
    \ = value\n\tend\n\tlocal max_value = 0\n\tlocal max_pos = 0\n\tfor i, value in\
    \ ipairs(result) do\n\t\tif value > max_value then\n\t\t\tmax_value = value\n\t\
    \t\tmax_pos = i\n\t\tend\n\tend\n\tfor i, value in ipairs(result) do\n\t\tif value\
    \ == max_value then\n\t\t\tresult[i] = result[i-1]\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbtuzvet.lua:30:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 3}\nstack traceback:\n\t/tmp/tmpgbtuzvet.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal current_max = numbers[1]\n\tlocal current_max = math.max(current_max,\
    \ numbers[1])\n\tfor i = 2, #numbers do\n\t\tlocal n = numbers[i]\n\t\tlocal max_after_n\
    \ = current_max\n\t\tif max_after_n < n then\n\t\t\tcurrent_max = n\n\t\telse\n\
    \t\t\tlocal max_after_max_after_n = math.max(max_after_n, current_max)\n\t\t\t\
    current_max = max_after_max_after_n\n\t\tend\n\tend\n\treturn current_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two nil values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local maxes = numbers.max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps7empc7a.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(numbers:numel() == 1)\n  local max_val, idx = numbers[1][1], 1\n  local\
    \ max_element = numbers[1][idx]\n  for i = 2, numbers:numel() do\n    if numbers[i][1]\
    \ > max_val then\n      max_val = numbers[i][1]\n      idx = i\n    end\n  end\n\
    \  return numbers[(max_val+1)::int]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfxr34wwv.lua:15: '']'' expected near ''::''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local rolling_max = setmetatable({}, {\n      __index = function(t, i)\n \
    \        return t.rolling_max or {}\n      end,\n      __newindex = function(self,\
    \ i, val)\n         if val > self.rolling_max[i] then\n            self.rolling_max[i]\
    \ = val\n         end\n      end\n   })\n   table.sort(numbers)\n   for i, v in\
    \ ipairs(numbers) do\n      rolling_max[v] = rolling_max[v] or {}\n      for j\
    \ = #rolling_max, 1, -1 do\n         local candidate = rolling_max[j]\n      \
    \   if v < candidate[v] then\n            table.insert(rolling_max[j], v)\n  \
    \          break\n         end\n      end\n   end\n   return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjxwnk5d.lua:8:\
    \ C stack overflow\nstack traceback:\n\t/tmp/tmpgjxwnk5d.lua:8: in metamethod\
    \ 'index'\n\t/tmp/tmpgjxwnk5d.lua:8: in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8:\
    \ in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8: in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8:\
    \ in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8: in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8:\
    \ in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8: in metamethod 'index'\n\t/tmp/tmpgjxwnk5d.lua:8:\
    \ in metamethod 'index'\n\t...\t(skipping 186 levels)\n\t/tmp/tmpgjxwnk5d.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgjxwnk5d.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  local prev = 1\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > prev then\n      table.insert(results, numbers[i])\n    else\n      prev =\
    \ numbers[i]\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbpjsh2e.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmptbpjsh2e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return setmetatable({ numbers = numbers }, { __index = rolling_max })\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslrvcirb.lua:12:\
    \ expected: {}\nactual: {numbers={}}\nstack traceback:\n\t/tmp/tmpslrvcirb.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = nil\n  local max_in_window = nil\n  local max_index = 0\n\
    \  for i = 1, #numbers do\n    -- Skip the largest number in window\n    if max_so_far\
    \ == nil or max_so_far > numbers[i] then\n      max_so_far = numbers[i]\n    \
    \  max_in_window = max_so_far\n      max_index = i\n      continue\n    end\n\
    \    -- If new max is larger, remember it\n    if numbers[i] > max_in_window then\n\
    \      max_in_window = numbers[i]\n      max_index = i\n    end\n  end\n  return\
    \ max_in_window, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdnxdey0l.lua:16: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i < #numbers do\n\
    \    rolling_max[i] = max(numbers[i], rolling_max[i])\n    i = i + 1\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w_79xvl.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp3w_79xvl.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3w_79xvl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0wd9ap3d.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local rolling_max = {}\n   local index = nil\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ksm3tt9.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local last_max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ last_max then\n      last_max = numbers[i]\n    end\n  end\n  return last_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5uf815b.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpl5uf815b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_maxes = {}\n    for _, value in ipairs(numbers) do\n      \
    \  table.insert(rolling_maxes, value)\n    end\n    table.sort(rolling_maxes)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqaz3dhp.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local function rolling_max1(table, num)\n      table[#table+1] = num\n   \
    \   return table\n   end\n   \n   local maxes = Vector(numbers[1])\n   for _,\
    \ num in pairs(numbers) do\n      maxes:insert(rolling_max1(maxes, num))\n   end\n\
    \   \n   return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvphmxym4.lua:11:\
    \ attempt to call a nil value (global 'Vector')\nstack traceback:\n\t/tmp/tmpvphmxym4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpvphmxym4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local windows = {}\n  local max = 0\n  local index = 1\n  local sum = 1\n \
    \ local length = #numbers\n  while index <= length do\n    sum = sum + numbers[index]\n\
    \    if sum > max then\n      max = sum\n    end\n    windows[index] = sum\n \
    \   index = index + 1 -- For next iteration\n  end\n  return windows\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj423_l8.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 4, 7, 11}\nstack traceback:\n\t/tmp/tmpqj423_l8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling = {}\n\tlocal max = 0\n\tlocal index = #numbers\n\tlocal value\
    \ = numbers[1]\n\twhile index > 0 do\n\t\tif numbers[index] < value then\n\t\t\
    \tmax = numbers[index]\n\t\tend\n\t\trolling[#rolling + 1] = max(rolling[#rolling],\
    \ max)\n\t\tindex = index - 1\n\t\tvalue = value + 1\n\tend\n\treturn rolling\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwitlojb.lua:14:\
    \ attempt to call a number value (local 'max')\nstack traceback:\n\t/tmp/tmpwwitlojb.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpwwitlojb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local res = {}\n    for i = 1, #numbers - 1 do\n        table.insert(res,\
    \ numbers[i])\n        if numbers[i] > numbers[i - 1] and i ~= 1 then\n      \
    \      table.insert(res, numbers[i - 1])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ior15rp.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8ior15rp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8ior15rp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local elem = numbers[i]\n\
    \    if rolling_max[i - 1] == nil then\n      rolling_max[i - 1] = 0\n    end\n\
    \    rolling_max[i] = elem > rolling_max[i - 1] and elem or rolling_max[i - 1]\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22vrltii.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0=0, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp22vrltii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if numbers == nil then return nil end\n  local rolling_max = numbers[1]\n \
    \ local max_rolling = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > max_rolling then\n      rolling_max = numbers[i]\n    elseif numbers[i] ~=\
    \ max_rolling and numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprby9859y.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprby9859y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return function()\n    local max_number\n    local max_index\n    local number_index\n\
    \    for number_index, number in pairs(numbers) do\n      if max_index == nil\
    \ then\n        max_index = number_index\n      else\n        if number >= max_number\
    \ then\n          max_index = nil\n        else\n          max_number = number\n\
    \        end\n      end\n    end\n    if max_index == nil then\n      return nil\n\
    \    end\n    local rolling_max_index\n    for rolling_max_index, rolling_max_number\
    \ in pairs(numbers) do\n      if rolling_max_index == max_index then\n       \
    \ return rolling_max_number\n      else\n        if rolling_max_number > max_number\
    \ then\n          return rolling_max_number\n        else\n          max_number\
    \ = rolling_max_number\n        end\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67sk5ew9.lua:42:\
    \ expected: {}\nactual: function: 0x55d07557e580\nstack traceback:\n\t/tmp/tmp67sk5ew9.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return table.concat({math.max(numbers)}):gmatch(\"(%d+)\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpga_eqpnx.lua:6:\
    \ invalid value (table) at index 1 in table for 'concat'\nstack traceback:\n\t\
    /tmp/tmpga_eqpnx.lua:6: in local 'candidate'\n\t/tmp/tmpga_eqpnx.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local table = {}\n    for i = 1, #numbers do\n        local last_element\
    \ = numbers[i]\n        local new_element = numbers[i]\n        for j = i+1, #numbers\
    \ do\n            local element = numbers[j]\n            if last_element < element\
    \ then\n                new_element = element\n            end\n            last_element\
    \ = element\n        end\n        table[i] = new_element\n    end\n    return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dv7up28.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp6dv7up28.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: -1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    local i, n = #numbers, 1\n    while i do\n  \
    \      rolling_max[n - 1] = numbers[i - 1]\n        i, n = i - 1, n - 1\n    end\n\
    \    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979079
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current = nil\n  local i = 1\n  for v in pairs(numbers)\
    \ do\n    current = v\n    while i <= v do\n      result[i] = current -- Store\
    \ the rolling maximum\n      i = i + 1\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8__zoas.lua:24:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpf8__zoas.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max_value = numbers[1]\n\tlocal max_index = nil\n\tfor i = 2, #numbers\
    \ do\n\t\tif numbers[i] ~= max_value then\n\t\t\tmax_value = numbers[i]\n\t\t\t\
    max_index = i\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn8yng5pg.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local max_number = nil\n   for _, v in pairs(numbers) do\n      if max_number\
    \ == nil or v > max_number then\n         max_number = v\n      end\n   end\n\
    \   return max_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5n94xib.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpi5n94xib.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: -1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max, index = {}, 1\n  local done = false\n  for i = 1, #numbers do\n\
    \    local num = numbers[i]\n    local found = true\n    while found do\n    \
    \  table.insert(max, num)\n      if index > #max then break end\n      index =\
    \ 1\n      found = false\n      for j = i + 1, #numbers do\n        local next\
    \ = numbers[j]\n        if num > next then\n          index = j\n          found\
    \ = true\n          break\n        end\n      end\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979079
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local result = {}\n   for i, x in pairs(numbers) do\n      if i >= 1 then\n\
    \         result[i] = result[i - 1]\n      end\n      result[i] = x\n   end\n\
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_xi30gs.lua:21:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpp_xi30gs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local n = 1\n  local m = numbers[1]\n  local results = {}\n  while n <= #numbers\
    \ do\n    if numbers[n] > m then\n      m = numbers[n]\n    end\n    results[n]\
    \ = m\n    n = n + 1\n  end\n  return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers > 0)\n  local max_so_far = numbers[1]\n  local index = 2\n\
    \  local max_so_far_index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx853p8ej.lua:20: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local current = 0\n  local last_element = 0\n  for\
    \ i = 1, #numbers do\n    if numbers[i] <= current then\n      rolling_max[#rolling_max\
    \ + 1] = numbers[i]\n      current = numbers[i]\n    else\n      rolling_max[#rolling_max\
    \ + 1] = last_element\n      last_element = numbers[i]\n      current = numbers[i]\n\
    \    end\n  end\n  rolling_max[#rolling_max + 1] = last_element\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65oytpwr.lua:26:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmp65oytpwr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return \n    numbers \n    |> Set() \n    |> Set.toSeq() \n    |> Seq.map(function(a)\
    \ rolling_max(a |> Seq.take(numbers - 1) |> Seq.toArray) + a) \n    |> Seq.toArray()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmnblg7wg.lua:8: unexpected symbol near ''>''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    for i = 1, #numbers do\n        local _, max = numbers[i]\n\
    \        for j = 1, i + 1 do\n            _, max = max > numbers[j] and max or\
    \ numbers[j]\n        end\n        ret[#ret+1] = max\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hhcmrr4.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2hhcmrr4.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2hhcmrr4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = 0\n\tfor _, value in ipairs(numbers) do\n\t\
    \tif value > max then\n\t\t\tmax = value\n\t\tend\n\tend\n\tfor _, value in ipairs(numbers)\
    \ do\n\t\tif value == max then\n\t\t\ttable.insert(result, max)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyen5_ta.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmphyen5_ta.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local function roll(table, length)\n    local new_table = {}\n    for i, value\
    \ in pairs(table) do\n      new_table[i] = value or 0\n    end\n    if length\
    \ == 0 then\n      return new_table\n    end\n    local max_so_far = math.max(1,\
    \ new_table[1])\n    for i, value in pairs(new_table) do\n      max_so_far = math.max(max_so_far,\
    \ value)\n      if i == length then\n        new_table[i] = max_so_far\n     \
    \ end\n    end\n    return new_table\n  end\n  return roll(numbers, #numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfpdfjka.lua:31:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 4}\nstack traceback:\n\t/tmp/tmplfpdfjka.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_i = numbers.n\n  local max_v = numbers.v\n  for i = 1, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = 0\n  for i = 2, numbers.n do\n    if\
    \ numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n   \
    \ end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local max_i = 1\n  local max_v = numbers.v[1]\n  for i = 2, numbers.n\
    \ do\n    if numbers.v[i] > max_v then\n      max_i = i\n      max_v = numbers.v[i]\n\
    \    end\n  end\n  local max_number = numbers.v[max_i]\n  local max_number = max_number\
    \ + 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyb3_zxm.lua:97: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local maximum = numbers[1]\n  for i = 2, #numbers do\n\
    \    if maximum < numbers[i] then\n      maximum = numbers[i]\n    end\n    result[#result\
    \ + 1] = maximum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaur_otzn.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpaur_otzn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = tables.newlist()\n  local max_number = numbers[1]\n  for\
    \ i = 1, #numbers do\n    if numbers[i] > max_number then\n      rolling_max[#rolling_max\
    \ + 1] = numbers[i]\n      max_number = numbers[i]\n    else\n      rolling_max[#rolling_max\
    \ + 1] = max_number\n      max_number = numbers[i]\n    end\n  end\n  rolling_max[#rolling_max\
    \ + 1] = max_number\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjte7p_9p.lua:6:\
    \ attempt to index a nil value (global 'tables')\nstack traceback:\n\t/tmp/tmpjte7p_9p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpjte7p_9p.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = 1\n  local result = {}\n  for _, value in ipairs(numbers) do\n\
    \    max = math.max(max, value)\n  end\n  for _, value in ipairs(numbers) do\n\
    \    if value == max then\n      table.insert(result, max)\n    else\n      max\
    \ = math.max(max, value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyduc4j35.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpyduc4j35.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local values = {}\n    for _, number in pairs(numbers) do\n        table.insert(values,\
    \ math.max(number))\n    end\n    return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplo3nisnh.lua:18:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmplo3nisnh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {{}}\n  end\n  local max_so_far = numbers[1]\n\
    \  local max_element = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < max_element then\n      max_element = max_element\n    else\n      max_element\
    \ = numbers[i]\n    end\n    if max_element > max_so_far then\n      max_so_far\
    \ = max_element\n    end\n  end\n  return {{max_so_far}}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2osbp51h.lua:27:\
    \ expected: {}\nactual: {{}}\nstack traceback:\n\t/tmp/tmp2osbp51h.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  local i = 0\n  local j = 1\n  for n in pairs(numbers)\
    \ do\n    rolling_maxes[#rolling_maxes + 1] = n\n    i = i + 1\n    j = j + 1\n\
    \  end\n  while i <= j do\n    local max_number = 0\n    for k = 1, i do\n   \
    \   if rolling_maxes[k] > max_number then\n        max_number = rolling_maxes[k]\n\
    \      end\n    end\n    rolling_maxes[i - 1] = max_number\n    i = i + 1\n  end\n\
    \  return rolling_maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmproctvdre.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmproctvdre.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmproctvdre.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_idx = 1\n  local max_val = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max_val then\n      max_idx = i\n      max_val = numbers[i]\n\
    \    end\n  end\n  table.insert(numbers, max_idx)\n  return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f9ssasl.lua:21:\
    \ expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8f9ssasl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = terralib.newlist()\n  local last_value = terralib.newsymbol(number)\n\
    \  for _, value in ipairs(numbers) do\n    if value == last_value then\n     \
    \ rolling_max:insert(value)\n    else\n      rolling_max:insert(value)\n     \
    \ last_value = value\n    end\n  end\n  rolling_max:insert(last_value)\n  rolling_max:append(1)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyl51x0mi.lua:6:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpyl51x0mi.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpyl51x0mi.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max_elem = numbers[1]\n  local max_index = nil\n\
    \  for index, value in pairs(numbers) do\n    if value > max_elem then\n     \
    \ max_elem = value\n      max_index = index\n    end\n  end\n  result[1] = max_elem\n\
    \  for index = 2, #numbers do\n    local max_elem = numbers[index]\n    local\
    \ max_index = nil\n    for index2, value2 in pairs(result) do\n      if value2\
    \ > max_elem then\n        max_elem = value2\n        max_index = index2\n   \
    \   end\n    end\n    result[#result + 1] = max_elem\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06f6e2l6.lua:34:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp06f6e2l6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    if #numbers <= 1 then\n        -- Nothing to do, return the original list.\n\
    \        return numbers\n    end\n    local output = {}\n    for i = 2, #numbers\
    \ do\n        output[#output + 1] = numbers[i - 1]\n    end\n    for i = 1, #numbers\
    \ do\n        if output[i - 1] > numbers[i] then\n            output[#output +\
    \ 1] = numbers[i]\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxisr13x9.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxisr13x9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxisr13x9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local current = nil\n  local results = {}\n  for i = 1, #numbers do\n    --\
    \ Current element to be compared\n    current = numbers[i]\n    local minimum\
    \ = results[i]\n    -- If current is less than minimum, then set minimum to current\n\
    \    if current < minimum then\n      minimum = current\n    end\n    -- If the\
    \ current element is the same, then add the element to the results\n    if current\
    \ == minimum then\n      results[i] = minimum\n    else\n      -- If the current\
    \ element is not the same, then the previous element is the minimum\n      if\
    \ #results > 0 then\n        results[#results] = minimum\n      end\n    end\n\
    \  end\n  -- Return results\n  return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmr7k7g1_.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmr7k7g1_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmr7k7g1_.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    local current_element\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2coe4mw7.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = {1, 1}\n    for i = 2, #numbers do\n        for j = 1, #max do\n\
    \            if numbers[i] > max[j] then\n                max[1] = numbers[i]\n\
    \                max[2] = numbers[i]\n                return\n            elseif\
    \ numbers[i] < max[j] then\n                max[1] = max[j]\n                max[2]\
    \ = numbers[i]\n                return\n            end\n        end\n       \
    \ max[1] = numbers[i]\n    end\n    return\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23rpkhg9.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp23rpkhg9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local buffer = {}\n  local pos = 1\n  local last = numbers[1]\n  local last_max\
    \ = last\n  for i = 2, #numbers do\n    if numbers[i] > last then\n      last\
    \ = numbers[i]\n      buffer[#buffer + 1] = numbers[i]\n    end\n    buffer[#buffer\
    \ + 1] = last\n  end\n  last_max = last\n  for i = 1, #buffer - 1 do\n    if buffer[i\
    \ - 1] > buffer[i] then\n      last_max = buffer[i]\n    end\n  end\n  return\
    \ buffer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1zet78y.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn1zet78y.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpn1zet78y.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > max_so_far then\n      max_so_far = numbers[i]\n    end\n  end\n  return max_so_far\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dgmafkg.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp3dgmafkg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers ~= 0)\n  local max = numbers[1]\n  local max_found = true\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n\
    \      max_found = false\n    end\n  end\n  return max_found and max or nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8i4qkoyc.lua:6:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp8i4qkoyc.lua:6: in local 'candidate'\n\
    \t/tmp/tmp8i4qkoyc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if not numbers then return end\n  local min = table.remove_by_ref(numbers,\
    \ 1)\n  if min == nil then return end\n  local max_ = min\n  for i = #numbers,\
    \ 1, -1 do\n    local x = numbers[i]\n    if x > max_ then\n      max_ = x\n \
    \   end\n  end\n  table.remove_by_ref(numbers, 1)\n  return max_, numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdot86eh.lua:7:\
    \ attempt to call a nil value (field 'remove_by_ref')\nstack traceback:\n\t/tmp/tmpkdot86eh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkdot86eh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_index = #numbers + 1\n  local result = {}\n  for i = 1, max_index\
    \ do\n    table.insert(result, numbers[i - 1])\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3vhg_6d.lua:19:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpv3vhg_6d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if numbers == nil then\n    numbers = {}\n  end\n  if #numbers == 0 then\n\
    \    return numbers\n  end\n  local i = 1\n  local accum = numbers[1]\n  local\
    \ lastIdx = 1\n  local accumLen = 1\n  while i <= #numbers do\n    accum = math.max(accum,\
    \ numbers[i])\n    if accum > lastIdx then\n      accumLen = i - lastIdx\n   \
    \ end\n    lastIdx = i\n    i = i + 1\n  end\n  if accumLen > 0 then\n    table.insert(numbers,\
    \ accum)\n  end\n  local j = 1\n  while j <= #numbers do\n    numbers[j] = numbers[j]\
    \ + numbers[j + 1]\n    j = j + 1\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3d6svxw4.lua:29:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp3d6svxw4.lua:29: in local 'candidate'\n\t/tmp/tmp3d6svxw4.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = 0\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < max then\n      max = numbers[i]\n    else\n      result[#result + 1] = max\n\
    \      max = numbers[i]\n    end\n  end\n  result[#result + 1] = max\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjq67hs5.lua:23:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpmjq67hs5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  for i = 1, #numbers do\n    table.insert(results, numbers[i])\n\
    \    if i > 1 then\n      if numbers[i] ~= numbers[i - 1] + 1 then\n        table.insert(results,\
    \ numbers[i])\n      end\n    end\n  end\n  return results\nend\n</code>\nNow\
    \ we have the function we can apply to the input you supplied:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjdd6oycs.lua:17: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local maxElement = 0\n    local lastElement = nil\n    for i = 1, #numbers,\
    \ 1 do\n        if numbers[i] > maxElement then\n            maxElement = numbers[i]\n\
    \            lastElement = i\n        end\n    end\n    lastElement = lastElement\
    \ - 1\n    lastElement = lastElement + 1\n    return numbers[lastElement]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwgucbtt.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'lastElement')\nstack traceback:\n\
    \t/tmp/tmphwgucbtt.lua:14: in local 'candidate'\n\t/tmp/tmphwgucbtt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        result[i]\
    \ = v\n    end\n    local window = numbers[1]\n    for i, v in pairs(numbers)\
    \ do\n        if v > window then\n            window = v\n        end\n    end\n\
    \    for i, v in pairs(numbers) do\n        if v ~= window then\n            result[i]\
    \ = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zsjnut3.lua:29:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp2zsjnut3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    return unpack(\n        table.sort(\n            unpack(\n              \
    \  table.map(\n                    function(number)\n                        return\
    \ math.max(number, numbers[1])\n                    end,\n                   \
    \ numbers,\n                    nil,\n                    true\n             \
    \   )\n            )\n        )\n    )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpue2r_pom.lua:9:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmpue2r_pom.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpue2r_pom.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local rolling_max = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaq1gqggc.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local function max_val(max)\n        return function ()\n            if max\
    \ ~= nil then\n                max = max or 0\n                return max\n  \
    \          end\n        end\n    end\n    local function rolling_max_helper(current_min,\
    \ min, current_max, max, max_value)\n        if current_max ~= nil then\n    \
    \        max = max or max_value\n        end\n        if current_min ~= nil then\n\
    \            min = min or current_min\n        end\n        if max < min then\n\
    \            return nil\n        end\n        return max, min\n    end\n    return\
    \ table.insert(numbers, numbers[1])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1et3fqmg.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1et3fqmg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return table.concat({numbers[1]}, table.take(numbers, 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmljwz5wv.lua:6:\
    \ attempt to call a nil value (field 'take')\nstack traceback:\n\t/tmp/tmpmljwz5wv.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmljwz5wv.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return setmetatable({}, {\n    __index = function(self, n)\n      local max_so_far\
    \ = numbers[1]\n      for i=2, #numbers do\n        if numbers[i] < max_so_far\
    \ then\n          max_so_far = numbers[i]\n        end\n      end\n      return\
    \ max_so_far\n    end\n  })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuah9r0hn.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpuah9r0hn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    -- Base case\n    if #numbers == 1 then\n        local value = numbers[1]\n\
    \        return {value}\n    end\n    -- Get first element\n    local value =\
    \ numbers[1]\n    -- Iterate through all elements except first element\n    for\
    \ i = 2, #numbers do\n        value = math.max(value, numbers[i])\n    end\n \
    \   -- Return rolling maximum found so far\n    return {value}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34iam8lz.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmp34iam8lz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = terralib.newlist()\n  local pos = 0\n  local i = 0\n  repeat\n\
    \    pos = pos + 1\n    i = i + 1\n    local elem = numbers[i]\n    if elem >\
    \ rolling_max[pos] then\n      rolling_max[pos] = elem\n    end\n  until pos ==\
    \ #numbers or i == #numbers\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwxe5i1e.lua:6:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmplwxe5i1e.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplwxe5i1e.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    table.insert(rolling_max,\
    \ numbers[i])\n    rolling_max[#rolling_max + 1] = -numbers[i]\n  end\n  table.sort(rolling_max)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_scs2qd.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {-4, -3, -2, -1, 1, 2, 3, 4}\nstack traceback:\n\
    \t/tmp/tmpw_scs2qd.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_value = numbers[1]\n    local max_position = numbers[1]\n    for\
    \ i = 2, #numbers do\n        if max_value < numbers[i] then\n            max_value\
    \ = numbers[i]\n            max_position = i\n        end\n    end\n    return\
    \ max_position, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwq1ezfs.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvwq1ezfs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    return table.totable(\n        table.toarray(numbers):map(function(n)\n \
    \           return n and { n = n, e = n }\n        end)\n    ):map(function(e)\n\
    \        if e.n then\n            if e.n > e.e then return e end\n           \
    \ e.n = math.max(e.n, e.e + e.n - e.e)\n        end\n        return e\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn91nrugt.lua:7:\
    \ attempt to call a nil value (field 'toarray')\nstack traceback:\n\t/tmp/tmpn91nrugt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn91nrugt.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return setmetatable({}, { __index = rolling_max_index })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_lkao9n.lua:13:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp2_lkao9n.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if numbers ~= nil then\n    if #numbers <= 0 then\n      return nil\n    end\n\
    \    local max_rolling = numbers[1]\n    for i = 2, #numbers do\n      local rolling\
    \ = numbers[i]\n      if rolling > max_rolling then\n        max_rolling = rolling\n\
    \      end\n    end\n    return max_rolling\n  else\n    return nil\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3dh4k_c.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpw3dh4k_c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local r\n  for i = 1, numbers[#numbers] do\n    r = r or {}\n    table.insert(r,\
    \ numbers[i])\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68u0f7c5.lua:7:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmp68u0f7c5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp68u0f7c5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    return table.concat(table.sort((numbers or {}).collect (function (number)\n\
    \        return number < number and\n            number > numbers[number] and\n\
    \            numbers[number] or\n            number\n    end)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz684njs6.lua:6:\
    \ attempt to call a nil value (field 'collect')\nstack traceback:\n\t/tmp/tmpz684njs6.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpz684njs6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max_value = numbers[1][1]\n  for _, number in pairs(numbers)\
    \ do\n    if number > max_value then\n      table.insert(result, max_value)\n\
    \      max_value = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5djqvpm.lua:7:\
    \ attempt to index a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmph5djqvpm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmph5djqvpm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_element = nil\n  for i = 1, #numbers do\n    if numbers[i] ~= nil\
    \ then\n      max_element = numbers[i]\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7l96zx0.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpa7l96zx0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local last_max_num = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zoh8x28.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(numbers:type() == \"table\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt_p98758.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_index = {}\n  local max_element\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2vm7igxd.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local i = 1\n    local max = 1\n    while i < #numbers\
    \ do\n        if numbers[i] > max then\n            result = result or {}\n  \
    \          result[i - 1] = numbers[i]\n            i = i + 1\n            max\
    \ = numbers[i]\n        else\n            max = max .. \",\" .. numbers[i]\n \
    \       end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8gk4vno.lua:10:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmps8gk4vno.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmps8gk4vno.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  assert(#numbers ~= 0)\n  local result = {}\n  for i = 1, #numbers do\n    table.insert(result,\
    \ math.max(numbers[i]))\n  end\n  \n  -- If there's only one element, return it\
    \ directly\n  if #result == 1 then\n    return { result[1] }\n  end\n  \n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_rd5l7_r.lua:6:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp_rd5l7_r.lua:6: in local 'candidate'\n\
    \t/tmp/tmp_rd5l7_r.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = table()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq8j7d5ih.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_table = {}\n  local rolling_max_element = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpureqgv47.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = math.max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94vlwhv0.lua:17: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_table = {}\n  for i = 1, #numbers do\n    local current_max\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max = numbers[j]\n\
    \      if current_max < rolling_max then\n        rolling_max_table[i] = rolling_max\n\
    \        break\n      end\n    end\n  end\n  return rolling_max_table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf3gj4_v.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpuf3gj4_v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    table.insert(rolling_max,\
    \ numbers[i])\n  end\n  table.sort(rolling_max)\n  local max_i = 0\n  local max_number\
    \ = rolling_max[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_number then\n\
    \      max_number = numbers[i]\n      max_i = i\n    end\n  end\n  return max_i,\
    \ max_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uk8z1fj.lua:25:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp1uk8z1fj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if not numbers then return end\n  local result = {}\n  local max_value = numbers[1]\n\
    \  for _, num in ipairs(numbers) do\n    if num > max_value then max_value = num\
    \ end\n  end\n  for i, num in ipairs(numbers) do\n    if num >= max_value then\
    \ result[i] = max_value end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwky101nx.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpwky101nx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  for _, elem in pairs(numbers[2:end]) do\n    if elem\
    \ > max then max = elem end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0kmzwqbl.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local size = #numbers\n   local results = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdxj6acp1.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: -1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxima = {}\n  for i = 1, #numbers do\n    table.insert(maxima, numbers[i])\n\
    \  end\n  local i = 1\n  local max_roll\n  local max_roll_element\n  local rolling_max\n\
    \  while i <= #maxima do\n    local rolling_max_element = maxima[i]\n    table.insert(maxima,\
    \ rolling_max_element)\n    max_roll_element = rolling_max_element\n    for j\
    \ = i, #maxima do\n      if maxima[j] <= max_roll_element then\n        max_roll_element\
    \ = maxima[j]\n      else\n        break\n      end\n    end\n    table.insert(maxima,\
    \ rolling_max_element)\n    max_roll = max_roll_element\n    if i == 1 then\n\
    \      rolling_max = max_roll_element\n    else\n      rolling_max = max_roll\n\
    \    end\n    i = i + 1\n  end\n  return maxima\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979079
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.max\n  if #numbers == 1 then return numbers end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptmyfichy.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local max = {}\n  for i = 1,\
    \ #numbers do\n    local value = numbers[i]\n    local previous = numbers[i -\
    \ 1]\n    local maximum\n    if previous ~= nil and previous > value then\n  \
    \    maximum = previous\n    else\n      maximum = value\n    end\n    table.insert(max,\
    \ maximum)\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyt_etxr.lua:29:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 3, 2}\nstack traceback:\n\t/tmp/tmpnyt_etxr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if not numbers then return nil end\n  local rolling = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  for i = 2, #numbers do\n    if numbers[i] ~= max then\n\
    \      max = numbers[i]\n    end\n    rolling = rolling or max\n  end\n  return\
    \ rolling\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29409u5y.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp29409u5y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local i = numbers.size - 1\n  while i > 0 do\n \
    \   if numbers[i] <= numbers[i - 1] + 1 then\n      i = i - 1\n    else\n    \
    \  rolling_max = numbers[i]\n      i = i - 1\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfai0ogd.lua:7:\
    \ attempt to perform arithmetic on a nil value (field 'size')\nstack traceback:\n\
    \t/tmp/tmplfai0ogd.lua:7: in local 'candidate'\n\t/tmp/tmplfai0ogd.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max then\n\
    \      max = numbers[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr65l8pn.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdr65l8pn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local i = 1\n  while i < #numbers do\n    local idx =\
    \ i - 1\n    local max_num = numbers[idx]\n    if max_num < numbers[i] then\n\
    \      result[idx] = max_num\n    end\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdueysg82.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdueysg82.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdueysg82.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_array = {}\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local i = 1\n  while i <= #numbers and i <= (#numbers - 1) do\n   \
    \ local value = numbers[i]\n    rolling_max_index = i - 1\n    while rolling_max_index\
    \ >= 0 and rolling_max_index > 0 and numbers[rolling_max_index] > value do\n \
    \     rolling_max_value = numbers[rolling_max_index]\n      rolling_max_index\
    \ = rolling_max_index - 1\n    end\n    rolling_max_array[i] = rolling_max_value\n\
    \    i = i + 1\n  end\n  return rolling_max_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedn8qe4r.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpedn8qe4r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_idx = 1\n  local max_val = numbers[1]\n  for idx = 2, #numbers do\n\
    \    if numbers[idx] > max_val then\n      max_idx = idx\n      max_val = numbers[idx]\n\
    \    end\n  end\n  return max_idx, max_val\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqg_16a5.lua:20:\
    \ expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmppqg_16a5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local index = 1\n  local max = numbers[1]\n  local max_rolling = 0\n  while\
    \ index do\n    local rolling = index\n    for i = 2, #numbers do\n      if numbers[i]\
    \ >= max then\n        index = i - 1\n        rolling = rolling - 1\n        max\
    \ = numbers[i]\n      else\n        max = numbers[i]\n      end\n    end\n   \
    \ max_rolling = max_rolling + (rolling > 0)\n  end\n  return max_rolling\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gsrmiy8.lua:20:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp7gsrmiy8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp7gsrmiy8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local result = {}\n   for i = 1, #numbers do\n      result[i] = numbers[i]\n\
    \      while i <= numbers[i] do\n         result[i] = max(result[i], numbers[i\
    \ - 1] + 1)\n         i = i + 1\n      end\n   end\n   return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61b9dtdo.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp61b9dtdo.lua:10: in local 'candidate'\n\t/tmp/tmp61b9dtdo.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  for _, i in ipairs(numbers) do\n    max = max > i\
    \ ? max : i\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9_5h37r.lua:8: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local results = {}\n  local index = numbers[1]\n  local index = tonumber(index)\n\
    \  if index == 0 then\n    return numbers\n  end\n  results[index] = numbers[index]\n\
    \  while index ~= 0 do\n    index = math.min(index + math.ceil((numbers.table[index\
    \ + 1] - numbers.table[index])/numbers.table[index]), numbers.table[index + 1]\
    \ - 1)\n    results[index] = numbers[index]\n  end\n  return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xn4cj16.lua:12:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp7xn4cj16.lua:12: in local 'candidate'\n\
    \t/tmp/tmp7xn4cj16.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local sum = 1\n  for i=1,#numbers do\n    sum = sum + numbers[i]\n    if sum\
    \ > #numbers then\n      return false\n    end\n  end\n  local result = {}\n \
    \ for i=1,#numbers do\n    result[i] = numbers[i]\n  end\n  local j = 1\n  while\
    \ #result > #numbers + j do\n    j = j + 1\n    for i=1,#numbers do\n      local\
    \ val = result[i]\n      if not result[i] then\n        result[i] = result[i-1]\n\
    \      else\n        result[i] = val\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov5gblh1.lua:36:\
    \ expected: {1, 2, 3, 4}\nactual: false\nstack traceback:\n\t/tmp/tmpov5gblh1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal maxElement = nil\n\tlocal maxIndex = nil\n\tfor index, number in ipairs(numbers)\
    \ do\n\t\tif maxElement == nil then\n\t\t\tmaxElement = number\n\t\t\tmaxIndex\
    \ = index\n\t\telseif number > maxElement then\n\t\t\tmaxElement = number\n\t\t\
    \tmaxIndex = index\n\t\tend\n\tend\n\treturn numbers, maxIndex, maxElement\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_a578ka.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpp_a578ka.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  for i = 1,#numbers do\n    local max = 1\n    for j = 1,i\
    \ do\n      local diff = numbers[j] - max\n      if diff > max then\n        max\
    \ = diff\n      end\n    end\n    maxes[i] = max\n  end\n  return maxes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasnysjyx.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 2}\nstack traceback:\n\t/tmp/tmpasnysjyx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return function(t)\n    if t > #numbers then\n      return nil\n    end\n \
    \   local v = numbers[t]\n    if t < #numbers then\n      return rolling_max(numbers,\
    \ t + 1\n            , v\n            , numbers[t]:max())\n    else\n      return\
    \ {v}\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxpb8n52.lua:24:\
    \ expected: {}\nactual: function: 0x55a4b382b770\nstack traceback:\n\t/tmp/tmpxxpb8n52.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local max = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_es4b52x.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = { }\n    for i, v in ipairs(numbers) do\n        rolling_max[#rolling_max\
    \ + 1] = v -- Add element\n        -- Check if current number in rolling max is\
    \ smaller than the current\n        -- number in rolling max. If it is, set new\
    \ rolling max number to the current number\n        if rolling_max[#rolling_max]\
    \ < rolling_max[i] then\n            rolling_max = rolling_max\n        end\n\
    \    end\n    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqjsw4t_.lua:23:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpkqjsw4t_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    for i = 1,#numbers do\n        table.insert(result,\
    \ math.max(numbers[i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nrd5g18.lua:18:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp7nrd5g18.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local table = {}\n    local rolling_max_index = 0\n    for i, element in\
    \ ipairs(numbers) do\n        table[element] = element and table[i] or nil\n \
    \       if table[i] == nil then\n            table[i] = element\n        else\n\
    \            if element < table[rolling_max_index] then\n                table[i]\
    \ = nil\n            else\n                rolling_max_index = i\n           \
    \ end\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4atnm0ws.lua:28:\
    \ expected: {4, 4, 4, 4}\nactual: {3=2, 4=1}\nstack traceback:\n\t/tmp/tmp4atnm0ws.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_value = nil\n  local max_index = nil\n  local i = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ts5pna0.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local rolling_max = numbers.next\n   local last_elem = numbers.last\n   for\
    \ i = 1, numbers.length do\n      rolling_max = rolling_max and rolling_max(last_elem,\
    \ i + 1)\n      last_elem = numbers[i]\n   end\n   return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4nnlhnc5.lua:8:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmp4nnlhnc5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4nnlhnc5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for _, v in ipairs(numbers) do\n    table.insert(rolling_max,\
    \ v)\n    if rolling_max[#rolling_max] == v then\n      rolling_max[#rolling_max]\
    \ = nil\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8lwvvv2.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpz8lwvvv2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local rolling_max = numbers.new()\n   for i = 1, #numbers do\n      local\
    \ value = numbers[i]\n      while #rolling_max > #numbers then rolling_max:append(math.nan)\
    \ end\n      rolling_max[#rolling_max+1] = value\n   end\n   return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt0b829ut.lua:9: ''do'' expected near ''then''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i] >= max then\n\
    \t\t\tmax = numbers[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0gx4yfz.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpv0gx4yfz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = 0\n\tfor i = 1, #numbers do\n\t\tif numbers[i]\
    \ > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tfor i = 1, #numbers do\n\
    \t\tif numbers[i] > max then\n\t\t\tresult[i] = max\n\t\t\tmax = numbers[i]\n\t\
    \telse\n\t\t\tresult[i] = numbers[i]\n\t\tend\n\tend\n\treturn result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ah1ox6d.lua:29:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp5ah1ox6d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers <= 1 then return {numbers} end\n  local current_max = numbers[1]\n\
    \  local max_indices = {1}\n  local max_count = 0\n  local max_index_count = 1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa03qyce3.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_value = numbers[1]\n  local max_index = nil\n  for i = 2, #numbers\
    \ do\n    if numbers[i] >= max_value then\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  return max_index, max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzfmp8vy.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnzfmp8vy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max = {}\n\tlocal index = {}\n\tlocal current = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs3a4w_5.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tassert(#numbers > 0, \"rolling_max: expected table of length > 0, got \" ..\
    \ #numbers)\n\tlocal rolling_max = {}\n\tfor i = 1, #numbers do\n\t\tlocal max_so_far\
    \ = 0\n\t\tlocal max_element = 0\n\t\tfor j = 1, i do\n\t\t\tif numbers[j] > max_element\
    \ then\n\t\t\t\tmax_element = numbers[j]\n\t\t\t\tmax_so_far = j\n\t\t\tend\n\t\
    \tend\n\t\ttable.insert(rolling_max, max_element)\n\tend\n\treturn rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpghz779mm.lua:6:\
    \ rolling_max: expected table of length > 0, got 0\nstack traceback:\n\t/tmp/tmpghz779mm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpghz779mm.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling = numbers.new()\n  local max = numbers.new()\n  for i = 1, #numbers\
    \ do\n    rolling[i] = numbers.last()\n    if rolling[i] > max then\n      max\
    \ = rolling[i]\n    end\n    numbers[i] = numbers[i] + 1 -- increment the element\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmiqzwlt0.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpmiqzwlt0.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmiqzwlt0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = false\n  for i = 1, #numbers - 1 do\n    if numbers[i]\
    \ > numbers[i + 1] then\n      rolling_max = true\n      break\n    end\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa3yakv3f.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return setmetatable(\n    {},\n    {\n      __tostring = function(self)\n \
    \       local result = {}\n        for _, n in ipairs(numbers) do\n          if\
    \ n > result then result[n] = n end\n        end\n        return table.concat(result)\n\
    \      end,\n    }\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpem4gf2bv.lua:12:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmpem4gf2bv.lua:12:\
    \ in function </tmp/tmpem4gf2bv.lua:9>\n\t[C]: in function 'tostring'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling = table.Create()\n  local max_so_far = -1\n  for _, value in\
    \ pairs(numbers) do\n    if value > max_so_far then\n      rolling[#rolling +\
    \ 1] = value\n      if max_so_far == -1 then\n        max_so_far = value\n   \
    \   end\n    else\n      rolling[#rolling] = value\n    end\n  end\n  return rolling\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhw90ibr.lua:6:\
    \ attempt to call a nil value (field 'Create')\nstack traceback:\n\t/tmp/tmpdhw90ibr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpdhw90ibr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplo1li9fy.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_list = {}\n  local last_max_val\n  local last_max_idx = nil\n\
    \  \n  for idx = 1, #numbers do\n    if not rolling_max_list[last_max_idx] then\n\
    \      rolling_max_list[last_max_idx] = {}\n    end\n    rolling_max_list[last_max_idx][#rolling_max_list[last_max_idx]\
    \ + 1] = numbers[idx]\n    if numbers[idx] > last_max_val then\n      last_max_val\
    \ = numbers[idx]\n      last_max_idx = idx\n    end\n  end\n  return rolling_max_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpijzj9hc2.lua:12:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpijzj9hc2.lua:12: in local 'candidate'\n\
    \t/tmp/tmpijzj9hc2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    return function()\n        local rolling = {{}}\n        local index = 1\n\
    \        for _, number in ipairs(numbers) do\n            rolling[index] = number\n\
    \            index = index + 1\n        end\n        return rolling\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jo6dpvf.lua:20:\
    \ expected: {}\nactual: function: 0x563123e35370\nstack traceback:\n\t/tmp/tmp9jo6dpvf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new\n  for i = 1, numbers.n do\n    local candidates\
    \ = numbers:slice(-i, numbers.n)\n    if i == 1 then\n      rolling_max:insert(numbers.max)\n\
    \      rolling_max:insert(numbers[1])\n      rolling_max:insert(candidates[1])\n\
    \      rolling_max:insert(numbers[numbers.n - 1])\n      rolling_max:insert(candidates[numbers.n\
    \ - 1])\n    else\n      rolling_max:insert(numbers[i])\n      rolling_max:insert(candidates[i])\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdktfp8l.lua:7:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpkdktfp8l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkdktfp8l.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max_result = numbers[1]\n\tlocal current_result = max_result\n\tfor i\
    \ = 2, #numbers do\n\t\tif numbers[i] > current_result then\n\t\t\tcurrent_result\
    \ = numbers[i]\n\t\tend\n\tend\n\treturn max_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i558ahk.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_i558ahk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local current_index = 1\n    local max_value_index = nil\n    local max_value_indexes\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps_zghzrp.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_rolling = 0\n  local max_rolling_times = 0\n  for i = #numbers, 1,\
    \ -1 do\n    local rolling = math.max(0, numbers[i])\n    if rolling > max_rolling\
    \ then\n      max_rolling = rolling\n      max_rolling_times = i\n    end\n  end\n\
    \  return max_rolling, max_rolling_times\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfcxkwg5.lua:21:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpcfcxkwg5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max, running_max\n  running_max = 0\n  rolling_max = {}\n  for\
    \ i = 1, #numbers do\n    local new_max = running_max\n    running_max = max(numbers[i],\
    \ running_max)\n    if new_max > rolling_max[i] then\n      rolling_max[i] = new_max\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyufpynsh.lua:11:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpyufpynsh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyufpynsh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ >= max then\n            max = numbers[i]\n        else\n            max = numbers[i]\n\
    \        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85iq7yxk.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp85iq7yxk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\n  local max_elements = {numbers[1]}\n\
    \  for i = 2, #numbers do\n    local element = numbers[i]\n    for _, max in ipairs(max_elements)\
    \ do\n      if element > max then\n        max_elements = {element, max}\n   \
    \     break\n      end\n    end\n  end\n  return max_elements\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_n9mt55.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 3}\nstack traceback:\n\t/tmp/tmpu_n9mt55.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local i = 1\n    while i <= #numbers or i <= #numbers\
    \ do\n        -- if numbers[i] == nil then break end\n        local current =\
    \ numbers[i]\n        for j = i + 1, #numbers or 1 do\n            if numbers[j]\
    \ ~= nil and current > numbers[j] then\n                current = numbers[j]\n\
    \            end\n        end\n        table.insert(max, current)\n        i =\
    \ i + 1 or 1\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperfzuusk.lua:27:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmperfzuusk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_so_far = nil\n    local max_so_far_index = 0\n    local max_so_far_val\
    \ = nil\n    for i = 1, #numbers do\n        if max_so_far == nil then\n     \
    \       max_so_far = numbers[i]\n            max_so_far_val = numbers[i]\n   \
    \     elseif max_so_far > numbers[i] then\n            max_so_far = numbers[i]\n\
    \            max_so_far_val = numbers[i]\n        else\n            max_so_far_val\
    \ = max_so_far_val or numbers[i]\n        end\n    end\n    -- At this point we\
    \ assume that we found the maximum element in the table of\n    -- non-nil numbers.\
    \ In other words, we didn't find a nil element.\n    if max_so_far_index < #numbers\
    \ then\n        local new_max_so_far = numbers[max_so_far_index]\n        local\
    \ new_max_so_far_val = numbers[max_so_far_index]\n        for i = max_so_far_index\
    \ + 1, #numbers do\n            if numbers[i] > max_so_far then\n            \
    \    max_so_far = numbers[i]\n                max_so_far_val = numbers[i]\n  \
    \          elseif numbers[i] < new_max_so_far then\n                new_max_so_far\
    \ = numbers[i]\n                new_max_so_far_val = numbers[i]\n            else\n\
    \                max_so_far_val = max_so_far_val or numbers[i]\n             \
    \   new_max_so_far_val = new_max_so_far_val or numbers[i]\n            end\n \
    \       end\n        numbers[max_so_far_index] = new_max_so_far_val\n        numbers[#numbers]\
    \ = new_max_so_far\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzchgyxm.lua:29:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzzchgyxm.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpzzchgyxm.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max_so_far = numbers[1]\n    local max_so_far_index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpczh_g9_e.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local buffer = {}\n  local max_so_far = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk77eyxv6.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  for _, x in pairs(numbers) do\n    if max.p == nil then\n\
    \      max.p = x\n      max.m = 0\n    else\n      if x > max.p then\n       \
    \ max.m = 1\n        max.p = x\n      else\n        if max.m < 1 then\n      \
    \    max.m = 1\n        else\n          if x > max.p then\n            max.m =\
    \ max.m + 1\n            max.p = x\n          else\n            if max.m > max.m\
    \ then\n              max.m = 1\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxlhxd3p.lua:38:\
    \ expected: {1, 2, 3, 4}\nactual: {m=1, p=4}\nstack traceback:\n\t/tmp/tmpqxlhxd3p.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_value = nil\n  local max_value_at_index = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5ams943q.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] >= max_value then\n            max_value = numbers[i]\n\
    \            index = i\n        end\n    end\n    return numbers, max_value, index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0o_shmv.lua:22:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmph0o_shmv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_table = {}\n  local index = 1\n  while index < #numbers do\n\
    \    local value = numbers[index]\n    if rolling_max_table[value] == nil then\n\
    \      rolling_max_table[value] = 0\n    end\n    rolling_max_table[value] = math.max(rolling_max_table[value],\
    \ index)\n    index = index + 1\n  end\n  return rolling_max_table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcq5uc5h.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpdcq5uc5h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal max_so_far = nil\n\tlocal max_in_window = nil\n\tfor i = 1, #numbers do\n\
    \t\tlocal max_element = numbers[i]\n\t\tlocal window_start = i - 1\n\t\tlocal\
    \ window_end = i\n\t\tlocal last_element = numbers[i - 1]\n\t\tif window_start\
    \ > 1 then\n\t\t\tlocal tmp_max_element = numbers[window_start - 1]\n\t\t\tlocal\
    \ tmp_last_element = numbers[window_end]\n\t\t\tif tmp_max_element > max_element\
    \ then\n\t\t\t\tmax_in_window = tmp_max_element\n\t\t\t\tmax_so_far = tmp_last_element\n\
    \t\t\telse\n\t\t\t\tmax_in_window = max_element\n\t\t\t\tmax_so_far = last_element\n\
    \t\t\tend\n\t\telseif max_so_far ~= nil then\n\t\t\tif max_element > max_so_far\
    \ then\n\t\t\t\tmax_in_window = max_element\n\t\t\t\tmax_so_far = last_element\n\
    \t\t\tend\n\t\telse\n\t\t\tmax_in_window = max_element\n\t\t\tmax_so_far = last_element\n\
    \t\tend\n\tend\n\treturn max_in_window\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13ro8siy.lua:39:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp13ro8siy.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_rolling = numbers[1]\n  local i = 1\n  while i <= #numbers do\n \
    \   if numbers[i] >= max_rolling then\n      max_rolling = numbers[i]\n    end\n\
    \    i = i + 1\n  end\n  return max_rolling\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgmtz4ic.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzgmtz4ic.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max = {}\n  local n = 1\n  local i = 1\n  for i = 1, #numbers - 1 do\n\
    \    -- We store max as n-1 (the previous max element)\n    max[#max + 1] = numbers[i\
    \ - 1]\n    -- We calculate n (the next max element)\n    n = numbers[i]\n   \
    \ -- And we update the max element if necessary\n    for j = 1, #max - 1 do\n\
    \      if max[j] > n then\n        max[j] = n\n      end\n    end\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwj52y9_.lua:28:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpnwj52y9_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1scbqzii.lua:13:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp1scbqzii.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  local last_max\n  for i, n in ipairs(numbers) do\n\
    \    -- If this is the first element, we don't have a rolling max so far\n   \
    \ if i then\n      rolling_maxes[#rolling_maxes + 1] = 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwh9g7645.lua:23: ''end'' expected (to close ''for'' at line
    8) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max = {}\n\tlocal index = 1\n\tlocal max_element\n\tfor _, element\
    \ in pairs(numbers) do\n\t\tif max_element == nil or max_element < element then\n\
    \t\t\tmax_element = element\n\t\t\trolling_max[index] = element\n\t\tend\n\t\t\
    index = index + 1\n\tend\n\treturn rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjamjr0kv.lua:24:\
    \ expected: {4, 4, 4, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpjamjr0kv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpotttga52.lua:19: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local size = #numbers\n  if size == 0 then\n    return {{}}\n  end\n  -- Initialize\
    \ the temporary result table\n  local result = {}\n  -- Compute the rolling max\
    \ and save the result\n  for i = 1, size do\n    local value = numbers[i]\n  \
    \  for j = i+1, size do\n      local value = value or numbers[j]\n      local\
    \ max = result and result[j] and max\n      if not max then\n        max = value\n\
    \      else\n        if max ~= value then\n          max = value\n        end\n\
    \      end\n    end\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66x0qtnu.lua:34:\
    \ expected: {}\nactual: {{}}\nstack traceback:\n\t/tmp/tmp66x0qtnu.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_rolling_numbers = {}\n  local max_rolling_numbers_index = 1\n  for\
    \ i, number in ipairs(numbers) do\n    local max_rolling_number = number\n   \
    \ max_rolling_number = math.max(number, max_rolling_number)\n    while max_rolling_number\
    \ > max_rolling_numbers[max_rolling_numbers_index] do\n      max_rolling_numbers[max_rolling_numbers_index]\
    \ = max_rolling_number\n      max_rolling_numbers_index = max_rolling_numbers_index\
    \ + 1\n    end\n  end\n  return max_rolling_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6v4hlen.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6v4hlen.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpx6v4hlen.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 0
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_rolling_max = numbers[1]\n  table.insert(result,\
    \ current_rolling_max)\n  for i = 2, #numbers do\n    current_rolling_max = math.max(numbers[i],\
    \ current_rolling_max)\n    table.insert(result, current_rolling_max)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max[i] == nil then\n      rolling_max[i] = value\n\
    \    else\n      if value > rolling_max[i] then\n        rolling_max[i] = value\n\
    \      end\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjebuo8eu.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjebuo8eu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local rolling_max, max_so_far = nil, nil\n    for i, n in ipairs(numbers)\
    \ do\n        if not rolling_max then\n            max_so_far = n \n         \
    \   rolling_max = n\n        else\n            max_so_far = max_so_far > n and\
    \ max_so_far or n\n        end\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t9_tgs6.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5t9_tgs6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local i, max = 1, numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >\
    \ max then\n      max = numbers[i]\n    end\n  end\n  table.insert(numbers, max)\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirax86or.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmpirax86or.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local index = #numbers - 1\n  while true do\n    table.insert(result,\
    \ numbers[index])\n    index = math.max(index - 1, 0)\n    if index == 0 then\n\
    \      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm42o9k7.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpmm42o9k7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local max = 0\n    for _, i in pairs(numbers) do\n        if max < i then\n\
    \            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauiakdkb.lua:18:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpauiakdkb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local maxValue\n  local maxIndex = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu42puj75.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local largest = -math.inf\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyzxz_nmq.lua:18: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i]\
    \ < rolling_max then\n\t\t\trolling_max = numbers[i]\n\t\tend\n\tend\n\treturn\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp53g7ebp.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp53g7ebp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  if numbers ~= nil then\n    return table.reduce(numbers, {}, function(max,num)\n\
    \      return math.max(max, num)\n    end)\n  else\n    return nil\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpynybdyz0.lua:7:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpynybdyz0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpynybdyz0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local max_size = #numbers\n  local max_value = numbers[1]\n  for i = 2, max_size\
    \ do\n    if max_value < numbers[i] then\n      max_value = numbers[i]\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla6kpg47.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpla6kpg47.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local i = 1\n  local max_so_far = 0\n  local max_so_far_count = 0\n  for i\
    \ = 1, #numbers do\n    local current = numbers[i]\n    if current > max_so_far\
    \ then\n      max_so_far = current\n      max_so_far_count = i\n    end\n  end\n\
    \  table.insert(numbers, max_so_far)\n  table.insert(numbers, max_so_far)\n  table.insert(numbers,\
    \ max_so_far_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dyof3e2.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp3dyof3e2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  return local function rolling_max_gen(table)\n    assert(type(table) == \"\
    table\")\n    local rolling_max = {}\n    local pos = 1\n    for i = 1, #table\
    \ do\n      if table[i] ~= nil then\n        pos = pos\n      else\n        pos\
    \ = pos + 1\n      end\n      table.insert(rolling_max, table[i])\n      if pos\
    \ == #table then break end\n    end\n    return rolling_max\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpblsp2tld.lua:6: unexpected symbol near ''local''

    '
  stdout: ''
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local window = {}\n  local max = {}\n  local i = 1\n  for n in numbers do\n\
    \    window[i] = n\n    if i > 1 then\n      window[i] = window[i-1]\n    end\n\
    \    max[i] = window[i]\n    i = i + 1\n  end\n  i = 1\n  local j = 1\n  for i\
    \ = 1, #numbers do\n    if window[j] > max[i] then\n      max[i] = window[j]\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12p6lnie.lua:9:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp12p6lnie.lua:9: in local 'candidate'\n\t/tmp/tmp12p6lnie.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = setmetatable({value = nil, rolling_max = nil}, {__index\
    \ = table})\n  for i = #numbers, 2, -1 do\n    local value = numbers[i]\n    rolling_max.value\
    \ = value\n    rolling_max.rolling_max = rolling_max.value\n  end\n  return rolling_max.rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph76odyha.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph76odyha.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \   local maxes = {}\n   for i = 1, #numbers, 1 do\n      table.insert(maxes,\
    \ math.max(numbers[i]))\n   end\n   return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5j8tbfd.lua:18:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpv5j8tbfd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979074
- exit_code: 1
  program: "-- From a given table of integers, generate a table of rolling maximum\
    \ element found until given moment\n-- in the sequence.\n-- >>> rolling_max({1,\
    \ 2, 3, 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \    local size = 1\n    for i, num in pairs(numbers) do\n        size = size\
    \ * num\n    end\n    local table = {}\n    local i = 1\n    while i <= size do\n\
    \        table.insert(table, i)\n        i = i + 1\n    end\n    return table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihyiqzwh.lua:13:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpihyiqzwh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpihyiqzwh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979074
