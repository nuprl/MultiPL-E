name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a table, return true if all keys are strings in lower \n-- case\
  \ or all keys are strings in upper case, else return false.\n-- The function should\
  \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result\n  for _,v in ipairs(dict) do\n    result=true\n   \
    \ for _,key in ipairs(v) do\n      if type(key)~=\"string\" then\n        result=false\n\
    \        break\n      end\n    end\n    if result then\n      break\n    end\n\
    \  end\n  return result\nend", "  local check_strings = function(t)\n    local\
    \ keys = t[1]\n    for i, k in ipairs(keys) do\n      if not t[k] then\n     \
    \   return false\n      elseif t[k] == tostring(k) then\n        return true\n\
    \      end\n    end\n    return false\n  end", "  local result = true\n  for k,\
    \ v in pairs(dict) do\n    if not type(k) == 'string' then\n      result = false\n\
    \      break\n    end\n    -- convert all keys to lower case\n    if string.lower(k)\
    \ == k then\n      result = true\n      break\n    end\n    -- convert all keys\
    \ to upper case\n    if string.upper(k) == k then\n      result = true\n     \
    \ break\n    end\n  end\n  return result\nend", "  if dict == nil then\n    return\
    \ false\n  end\n  local num_keys = #dict\n  for _, value in pairs(dict) do\n \
    \   if type(value) ~= 'string' then\n      return false\n    end\n  end\n  \n\
    \  if num_keys == 0 then\n    return true\n  end\n  \n  for _, value in pairs(dict)\
    \ do\n    if not string.find(string.lower(value), string.lower(string.sub(value,\
    \ 1, -1))) then\n      return false\n    end\n    if not string.find(string.upper(value),\
    \ string.upper(string.sub(value, 1, -1))) then\n      return false\n    end\n\
    \  end\n  \n  return true\nend", "  local case_keys = {}\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      case_keys[k] = true\n    elseif type(k)\
    \ == 'number' then\n      case_keys[#case_keys + 1] = true\n    end\n  end\n \
    \ for i = 1, #case_keys do\n    if not case_keys[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local str_list = {}\n  for key, value\
    \ in pairs(dict) do\n    if type(value) ~= 'string' then\n      return false\n\
    \    end\n    table.insert(str_list, tostring(value:lower()))\n    table.insert(str_list,\
    \ tostring(value:upper()))\n  end\n  return true -- If table is empty, all keys\
    \ must be strings\n         -- Or all keys must be strings\n         -- Or the\
    \ table must contain strings with no duplicates\n         -- And all strings must\
    \ be in lower case\n         -- And all strings must be in upper case\n      \
    \   -- And no duplicates allowed \nend", "  -- Base case\n  if #dict == 0 then\n\
    \    return true\n  end\n  \n  -- Iterate through each key and make sure each\
    \ one is a string\n  for k, v in pairs(dict) do\n    if not (type(k) == \"string\"\
    \ and type(v) == \"string\") then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- Check all keys are strings in lower case or all keys are strings\
    \ in upper case\n  local allupper = true\n  local alllower = true\n  for k, v\
    \ in pairs(dict) do\n    if type(v) == 'string' then\n      if v:upper() == v\
    \ then\n        allupper = false\n      elseif v:lower() == v then\n        alllower\
    \ = false\n      end\n    elseif type(v) == 'table' then\n      -- Check keys\
    \ and values of nested dictionaries are in lower case or upper case\n      local\
    \ alldictupper = true\n      local alldictlower = true\n      for k2, v2 in pairs(v)\
    \ do\n        if type(v2) == 'string' then\n          if v2:upper() == v2 then\n\
    \            alldictupper = false\n          elseif v2:lower() == v2 then\n  \
    \          alldictlower = false\n          end\n        elseif type(v2) == 'table'\
    \ then\n          -- Check keys and values of nested dictionaries are in lower\
    \ case or upper case\n          local alldictdictupper = true\n          local\
    \ alldictdictlower = true\n          for k3, v3 in pairs(v2) do\n            if\
    \ type(v3) == 'string' then\n              if v3:upper() == v3 then\n        \
    \        alldictdictupper = false\n              elseif v3:lower() == v3 then\n\
    \                alldictdictlower = false\n              end\n            elseif\
    \ type(v3) == 'table' then\n              -- Check keys and values of nested dictionaries\
    \ are in lower case or upper case\n              local alldictdictdictupper =\
    \ true\n              local alldictdictlower = true\n              for k4, v4\
    \ in pairs(v3) do\n                if type(v4) == 'string' then\n            \
    \      if v4:upper() == v4 then\n                    alldictdictdictupper = false\n\
    \                  elseif v4:lower() == v4 then\n                    alldictdictdictlower\
    \ = false\n                  end\n                elseif type(v4) == 'table' then\n\
    \                  -- Check keys and values of nested dictionaries are in lower\
    \ case or upper case\n                  local alldictdictdictdictupper = true\n\
    \                  local alldictdictdictlower = true\n                  for k5,\
    \ v5 in pairs(v4) do\n                    if type(v5) == 'string' then\n     \
    \                 if v5:upper() == v5 then\n                        alldictdictdictupper\
    \ = false\n                      elseif v5:lower() == v5 then\n              \
    \          alldictdictdictlower = false\n                      end\n         \
    \           elseif type(v5) == 'table' then\n                      -- Check keys\
    \ and values of nested dictionaries are in lower case or upper case", "  local\
    \ new_dict = {}\n  -- Check that all keys are either uppercase or lowercase\n\
    \  for key, val in pairs(dict) do\n    local lower = key:lower()\n    local upper\
    \ = key:upper()\n    new_dict[lower] = val\n    new_dict[upper] = val\n  end\n\
    \  -- If no keys are left in the dictionary, return true\n  if next(new_dict)\
    \ == nil then return true end\n  -- Return false if any keys are uppercase\n \
    \ local num_uppercase_keys = count(new_dict, upper)\n  if num_uppercase_keys >\
    \ 0 then return false end\n  -- Return false if any keys are lowercase\n  local\
    \ num_lowercase_keys = count(new_dict, lower)\n  if num_lowercase_keys > 0 then\
    \ return false end\n  return true\nend", "  local result = {}\n  local i, j =\
    \ 1, #dict\n  while i <= j do\n    local key, value = dict[i]\n    if not is_string(key)\
    \ then\n      return false\n    end\n    if not is_string(value) then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n    result[key] = value\n  end\n\
    \  return true\nend", "    local result = true\n    for key, value in pairs(dict)\
    \ do\n        if type(value) == 'string' then\n            -- If value is a string,\
    \ it must be in lower case\n            if string.lower(value) ~= value then\n\
    \                result = false\n            end\n        else\n            --\
    \ Otherwise, value must be in upper case\n            if string.upper(value) ~=\
    \ value then\n                result = false\n            end\n        end\n \
    \   end\n    return result\nend", "   local keys_count = 0\n   for key, value\
    \ in pairs(dict) do\n      keys_count = keys_count+1\n      if type(value) ~=\
    \ 'string' then\n         return false\n      end\n   end\n   return keys_count\
    \ == 1\nend", "  local is_upper = nil\n  local is_lower = nil\n  local keys =\
    \ nil\n  local has_any = false\n  local has_none = false", "    local result =\
    \ true\n    local i, j = 1, #dict\n    while i <= j do\n        local is_string\n\
    \        is_string = type(dict[i]) == 'string'\n        local is_upper = dict[i][1]:lower()\
    \ == 'upper'\n        if is_string then\n            if not is_upper then\n  \
    \              result = false\n                break\n            end\n      \
    \      i = i + 1\n        elseif is_upper then\n            result = false\n \
    \           break\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "  local is_upper = false\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then return false end\n    if is_upper then return false end\n \
    \   is_upper = true\n  end\n  return true\nend", "    local uppercase = 0\n  \
    \  local lowercase = 0\n    for k,v in pairs(dict) do\n        if type(v) == 'string'\
    \ then\n            uppercase = uppercase + 1\n            if v == v:gsub(\"%l\"\
    ,\"%L\") then\n                lowercase = lowercase + 1\n            end\n  \
    \      else\n            lowercase = lowercase + 1\n        end\n    end\n   \
    \ return uppercase == 0 and lowercase == #dict\nend", "  local result = true\n\
    \  local upper, lower = true, true\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then return false end\n    if k ~= string.tolower(k) or k ~= string.toupper(k)\
    \ then result = false end\n    upper = upper and k == string.toupper(k)\n    lower\
    \ = lower and k == string.tolower(k)\n  end\n  return result and (not upper and\
    \ not lower)\nend", "  if #dict == 0 then return false end\n  local key\n  for\
    \ key, value in pairs(dict) do\n    local lower = key:lower()\n    local upper\
    \ = key:upper()\n    if lower and upper then\n      if lower ~= upper then return\
    \ false end\n    elseif lower then\n      return false\n    elseif upper then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local allKeysString\
    \ = true\n  local allKeysUpperCase = true", "  local t = {}\n  for k, v in pairs(dict)\
    \ do\n    t[tostring(k)] = tostring(v)\n  end\n  if #t > 0 then\n    for k, v\
    \ in pairs(t) do\n      if v:lower() == v then return true end\n      if v:upper()\
    \ == v then return true end\n    end\n  end\n  return false\nend", "  if #dict\
    \ == 0 then\n    return true\n  end\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or tostring(k) ~= k then\n      return false\n    end\n  end\n \
    \ local t = {}\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' or tostring(k)\
    \ ~= k then\n      return false\n    end\n    t[tostring(k)] = v\n  end\n  return\
    \ check_dict_case(t)\nend", "\tlocal function is_string(k)\n\t\treturn type(k)\
    \ == 'string' and k:lower() ~= k\n\tend\n\tlocal function is_string(k)\n\t\treturn\
    \ type(k) == 'string' and k:upper() ~= k\n\tend\n\t\n\tif #dict == 0 then return\
    \ false end\n\tfor k, v in pairs(dict) do\n\t\tif not is_string(k) then return\
    \ false end\n\t\tif not is_string(v) then return false end\n\tend\n\treturn true\n\
    end", "    for k, v in pairs(dict) do\n        if type(k) ~= 'string' or k ==\
    \ v:lower() or k == v:upper() then return false end\n    end\n    return true\n\
    end", "  assert(type(dict) == 'table', 'dict is not a table')\n  local is_upper\
    \ = true\n  local is_lower = true\n  for k in pairs(dict) do\n    if type(k) ~=\
    \ 'string' then\n      return false\n    end\n    if k:upper() ~= k then\n   \
    \   is_upper = false\n    end\n    if k:lower() ~= k then\n      is_lower = false\n\
    \    end\n  end\n  return is_upper and is_lower\nend", "    for k, v in pairs(dict)\
    \ do\n        if type(v) == 'table' and check_dict_case(v) then return true end\n\
    \        if type(v) == 'number' then return true end\n        if type(v) == 'string'\
    \ and v:lower() == v then return true end\n        if type(v) == 'string' and\
    \ v:upper() == v then return true end\n    end\n    return false\nend", "    local\
    \ check1 = true\n    for k,v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            check1 = false\n        end\n        if type(v) ~= 'string'\
    \ then\n            check1 = false\n        end\n    end\n    return check1\n\
    end", "\t-- Check dictionary keys\n\tlocal lower_keys = {}\n\tlocal upper_keys\
    \ = {}\n\tfor k,v in pairs(dict) do\n\t\tlower_keys[k] = k\n\tend\n\tfor k,v in\
    \ pairs(dict) do\n\t\tupper_keys[k] = k:upper()\n\tend\n\tlocal true_keys = lower_keys\
    \ or upper_keys", "  if #dict == 0 then\n    return false\n  end\n  local is_uppercase\
    \ = true\n  for k, v in pairs(dict) do\n    if type(v) == 'string' and v:upper()\
    \ ~= v then\n      is_uppercase = false\n    end\n  end\n  if is_uppercase then\n\
    \    return true\n  else\n    return false\n  end\nend", "  local count = 0\n\
    \  for _,v in pairs(dict) do\n    if not isstring(v) or v:lower() ~= v then\n\
    \      return false\n    end\n    count = count+1\n  end\n  if count == 0 then\
    \ return false end\n  return true\nend", "    local count = 0\n    for key, value\
    \ in pairs(dict) do\n        count = count + #key\n    end\n    if count == 0\
    \ then\n        return false\n    end", "  local is_string\n  local key\n  local\
    \ is_string_key", '    if not dict then return false end', "  local result = true\n\
    \  for _, val in ipairs(dict) do\n    if not type(val) == 'string' then\n    \
    \  result = false\n    end\n  end\n  return result\nend", "    if #dict == 0 then\n\
    \        return false\n    end", "    local is_case_sensitive = false\n    for\
    \ _, k in pairs(dict) do\n        if type(k) == \"string\" then\n            if\
    \ not is_case_sensitive then\n                is_case_sensitive = true\n     \
    \       else\n                is_case_sensitive = is_case_sensitive and string.lower(k)\
    \ == k\n            end\n        else\n            is_case_sensitive = false\n\
    \        end\n    end", "  local check\n  -- Check all keys within each table\
    \ by testing if the keys are strings.\n  for k,v in pairs(dict) do\n    local\
    \ is_str = string(v)\n    local is_str_upper = is_str:upper()\n    local is_str_lower\
    \ = is_str:lower()\n    -- If both is_str and is_str_upper are nil, then the table\
    \ is empty \n    -- and therefore the function should return false.\n    if is_str\
    \ == nil and is_str_upper == nil then\n      return false\n    end\n    -- If\
    \ both is_str and is_str_lower are nil, then the table is empty \n    -- and therefore\
    \ the function should return false.\n    if is_str == nil and is_str_lower ==\
    \ nil then\n      return false\n    end\n    -- If is_str is nil and is_str_lower\
    \ is true, the function should return\n    -- false.\n    if is_str == nil and\
    \ is_str_lower then\n      return false\n    end\n    -- If is_str is nil and\
    \ is_str_upper is false, the function should return\n    -- false.\n    if is_str\
    \ == nil and is_str_upper then\n      return false\n    end\n    -- If is_str\
    \ is true and is_str_lower is true, the function should return\n    -- false.\n\
    \    if is_str and is_str_lower then\n      return false\n    end\n    -- If is_str\
    \ is true and is_str_upper is false, the function should return\n    -- false.\n\
    \    if is_str and is_str_upper then\n      return false\n    end\n  end\n  --\
    \ If we get here, then all keys in the table are strings.\n  return true\nend",
  "   if not dict or #dict == 0 then return false end\n   local count = 0\n   for\
    \ k, v in pairs(dict) do\n      if not (type(k) == 'string' or type(k) == 'number')\
    \ then\n         return false\n      end\n      if type(v) ~= 'string' then\n\
    \         return false\n      end\n      count = count + 1\n   end\n   return\
    \ count == #dict\nend", "    local keys = table.sort(table.keys(dict))\n    if\
    \ #keys < 1 then\n        return true\n    end\n    \n    -- All keys must be\
    \ either strings in lower case or strings in upper\n    -- case\n    local upper\
    \ = false\n    local lower = false\n    for k in keys do\n        local k_lower\
    \ = k:lower()\n        local k_upper = k:upper()\n        \n        if k_lower\
    \ == k_upper then\n            return false\n        end\n        if k_lower ~=\
    \ k_upper then\n            upper = true\n        end\n    end\n    \n    -- All\
    \ keys must be unique (i.e. no two keys are the same case)\n    for k in keys\
    \ do\n        lower = true\n    end\n    \n    return lower and upper\nend", " \
    \   local function lower(x)\n        return x == x:lower() or x == x:upper()\n\
    \    end\n    return not table.removekeys(dict, lower(unpack(dict:keys())))\n\
    end", "    -- The empty dict is false.\n    if not dict then return false end",
  "   assert(type(dict) == \"table\")\n   assert(#dict > 0)\n   local keys = {}\n\
    \   for key, value in pairs(dict) do table.insert(keys, key) end\n   if #keys\
    \ == 0 then\n      return true\n   end\n   for _, key in ipairs(keys) do\n   \
    \   if type(key) ~= \"string\" then\n         return false\n      end\n      if\
    \ type(key) ~= \"string\" then\n         return false\n      end\n      if key:lower()\
    \ ~= key:upper() then\n         return false\n      end\n   end\n   return true\n\
    end", "    local table_size = #table\n    local result_flag = true\n    \n   \
    \ if table_size == 0 then\n        return true\n    else\n        for _, value\
    \ in ipairs(dict) do\n            result_flag = result_flag and type(value) ==\
    \ 'string' and \n                (tostring(value:lower()) == tostring(value) or\
    \ \n                 tostring(value:upper()) == tostring(value))\n        end\n\
    \    end\n    \n    return result_flag\nend\n</cell>\n<text>\n4.1. Plus Minus\n\
    Inputs:", "    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if type(k) == 'string' and (type(v)\
    \ ~= 'string' or v:upper() ~= v:lower()) then\n            return false\n    \
    \    end\n    end\n    return true\nend", "  local result = true\n  for k,v in\
    \ pairs(dict) do\n    if type(k) ~= 'string' then return false end\n    if type(k)\
    \ == lowercase then result = result and true end\n    if type(k) == uppercase\
    \ then result = result and true end\n  end\n  return result\nend", "   if not\
    \ dict then return false end\n   if #dict == 0 then return false end\n   for k,\
    \ v in pairs(dict) do\n      if type(k) ~= 'string' then return false end\n  \
    \    if type(v) ~= 'string' then return false end\n      if k:lower() ~= v:lower()\
    \ then return false end\n   end\n   return true\nend", "   -- Check if there are\
    \ any strings in any case.\n   for k,v in pairs(dict) do\n      if type(k) ==\
    \ 'string' and k~=k or type(k) == 'number' and k~=k then\n         return false\n\
    \      end\n      if type(v) == 'string' and v~=v or type(v) == 'number' and v~=v\
    \ then\n         return false\n      end\n   end", "  if type(dict) ~= 'table'\
    \ then return false end\n  if next(dict) == nil then return false end\n  local\
    \ found = {}\n  local lower = 1\n  local upper = #dict\n  while lower < upper\
    \ do\n    local value = dict[lower]\n    if type(value) == 'string' then\n   \
    \   found[value] = true\n    elseif type(value) == 'number' then\n      -- Ignore\
    \ numbers and strings that aren't strings.\n      if type(dict[lower+1]) == 'string'\
    \ then\n        found[dict[lower+1]] = true\n      end\n    end\n    lower = lower\
    \ + 1\n  end\n  for key in pairs(dict) do\n    if not found[key] then return false\
    \ end\n  end\n  return true\nend", "  local result = true\n  for _,k in pairs(dict)\
    \ do\n    if not k:isstring() then\n      result = false\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for k, v in pairs(dict) do\n    local\
    \ lower = v:lower()\n    result[k] = lower\n    result[v] = lower\n  end\n  if\
    \ next(result) ~= nil then\n    return false\n  end\n  return true\nend", "  assert(type(dict)\
    \ == 'table', 'invalid argument type')\n  assert(next(dict) ~= 'table', 'invalid\
    \ argument type')\n  local ok = true\n  for key, val in pairs(dict) do\n    if\
    \ type(key) ~= 'string' then\n      ok = false\n      break\n    end\n    if type(val)\
    \ ~= 'string' then\n      ok = false\n      break\n    end\n  end\n  return ok\n\
    end", "  for k,v in pairs(dict) do\n    if type(k) ~= 'string' then\n      return\
    \ false\n    end\n    if type(v) ~= 'string' then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local ok, msg = pcall(function()\n    for k in\
    \ pairs(dict) do\n      if not (type(k) == 'string') then\n        return false\n\
    \      end\n    end\n    return true\n  end)\n  if ok then\n    return msg\n \
    \ else\n    return false\n  end\nend", "    local result = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            result =\
    \ false\n            break\n        end\n        if type(k) ~= 'string' or k:lower()\
    \ ~= k:upper() then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local is_all_strings = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= 'string' then\n            is_all_strings\
    \ = false\n            break\n        end\n    end\n    return is_all_strings\n\
    end", "  if #dict == 0 then return false end\n  local lower = {}\n  local upper\
    \ = {}\n  for k, v in pairs(dict) do\n    if not type(k) ~= 'string' or not type(v)\
    \ ~= 'string' then\n      return false\n    end\n    if lower[tolower(k)] then\
    \ return false end\n    lower[tolower(k)] = true\n    upper[toupper(k)] = true\n\
    \  end\n  -- Check that all keys are in lower case\n  -- Return true if all the\
    \ keys are in lower case\n  for k, v in pairs(lower) do\n    return false\n  end\n\
    \  -- Check that all keys are in upper case\n  -- Return true if all the keys\
    \ are in upper case\n  for k, v in pairs(upper) do\n    return false\n  end\n\
    \  return true\nend", "  local result = true\n  for k,v in pairs(dict) do\n  \
    \  if type(k) ~= 'string' or type(v) ~= 'string' then\n      result = false\n\
    \    end\n  end\n  return result\nend", "  if #dict == 0 then\n    return false\n\
    \  end\n  for k, v in ipairs(dict) do\n    if type(k) ~= 'string' then return\
    \ false end\n    if type(v) ~= 'string' then return false end\n  end\n  return\
    \ true\nend", "   local result = true\n   for k, v in pairs(dict) do\n      if\
    \ type(k) ~= 'string' or type(v) ~= 'string' then\n         result = false\n \
    \     end\n   end\n   return result\nend", "   if #dict == 0 then\n      return\
    \ false\n   end\n   for k, v in pairs(dict) do\n      if type(k) == 'string' then\n\
    \         if k:lower() == k:upper() then\n            return false\n         end\n\
    \      elseif type(v) == 'string' then\n         if v:lower() == v:upper() then\n\
    \            return false\n         end\n      end\n   end\n   return true\nend",
  "    if next(dict) == nil then\n        return false\n    end\n    local keys =\
    \ {}\n    for k,v in pairs(dict) do\n        if isstring(v) then\n           \
    \ table.insert(keys, k)\n        elseif isfunction(v) then\n            table.insert(keys,\
    \ k)\n        end\n    end\n    table.sort(keys)\n    local str_keys = {}\n  \
    \  for k in pairs(keys) do\n        if tonumber(k) == k then\n            table.insert(str_keys,\
    \ k)\n        end\n    end\n    table.sort(str_keys)\n    if #str_keys == #keys\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   for k, v in pairs(dict) do\n        if type(k) ~= 'string' or type(v) ~= 'string'\
    \ then \n            return false \n        end\n    end\n    return true\nend",
  "  local all_keys_are_lower_case = true\n  local all_keys_are_upper_case = true\n\
    \  local first_key_is_lower_case = true\n  local first_key_is_upper_case = true\n\
    \  local value = next(dict)\n  if value == nil then\n    return false\n  end\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= 'string' or type(v) ~= 'string'\
    \ then\n      all_keys_are_lower_case = false\n      all_keys_are_upper_case =\
    \ false\n      return false\n    end\n    if k:lower() ~= v:lower() then\n   \
    \   all_keys_are_lower_case = false\n      all_keys_are_upper_case = false\n \
    \     return false\n    end\n    if first_key_is_upper_case then\n      first_key_is_lower_case\
    \ = false\n    else\n      first_key_is_upper_case = false\n    end\n  end\n \
    \ if first_key_is_upper_case then\n    return true\n  else\n    return false\n\
    \  end\nend", "   local result = true\n   for k, v in pairs(dict) do\n      if\
    \ type(k) ~= 'string' or type(v) ~= 'string' then\n         result = false\n \
    \     end\n   end\n   return result\nend", "    if #dict == 0 then\n        return\
    \ true\n    end\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ or (type(k) == 'string' and tostring(k) == k)\n        or type(k) ~= 'number'\
    \ or k < 0 or k > 255 then\n            return false\n        end\n    end\n \
    \   return true\nend", "  local result = true\n  for key, value in pairs(dict)\
    \ do\n    if type(value) == 'string' then\n      if key ~= tostring(key) then\n\
    \        result = false\n        break\n      end\n    else\n      if key ~= tostring(key)\
    \ or value ~= tostring(value) then\n        result = false\n        break\n  \
    \    end\n    end\n  end\n  return result\nend", "   for _, value in pairs(dict)\
    \ do\n      assert(type(value) == 'table', 'Dict keys must be a table')\n    \
    \  local is_upper = false\n      for _, v in pairs(value) do\n         if type(v)\
    \ == 'string' then\n            if v:match('^%u$') then\n               is_upper\
    \ = true\n            end\n         end\n      end\n      assert(is_upper or type(value)\
    \ == 'string', 'Dict values must be all strings in upper case')\n   end\n   return\
    \ true\nend", "  if #dict == 0 then\n    return false\n  end\n  for _, value in\
    \ pairs(dict) do\n    for key, value in pairs(value) do\n      if type(value)\
    \ ~= 'string' then\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "    if #dict == 0 then\n        return false\n    end\n    for\
    \ key, value in pairs(dict) do\n        if type(key) ~= 'string' or type(key)\
    \ ~= 'string' then\n            return false\n        end\n        if type(key)\
    \ ~= 'string' or not key:match('^%l*$') then\n            return false\n     \
    \   end\n        if type(value) ~= 'string' then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local keys = cjson.encode(dict)\n\
    \    for i, k in pairs(keys) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local keys\
    \ = table.concat(dict, '\\n')\n    local first = true\n    local firstKey = true\n\
    \    for i = 1, #keys do\n        if first then\n            first = true\n  \
    \          firstKey = true\n        elseif keys[i] == '=' then\n            first\
    \ = false\n        elseif firstKey then\n            firstKey = false\n      \
    \  elseif string.islower(keys[i]) or string.isupper(keys[i]) then\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "   if\
    \ #dict == 0 then return false end\n   for key in pairs(dict) do\n      if not\
    \ (type(key) ~= 'table' or type(key[1]) ~= 'string' or type(key[2]) ~= 'string')\
    \ then\n         return false\n      end\n   end\n   return true\nend", "    if\
    \ #dict == 0 then\n        return false\n    end\n    for key, value in pairs(dict)\
    \ do\n        if type(key) ~= 'string' or type(key) ~= 'string' then\n       \
    \     return false\n        end\n        if type(key) == type(key) and key ~=\
    \ tostring(key) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local is_string = string\n  local is_number = tonumber\n  local\
    \ is_pair = pairs == table.getn\n  local i, j, keys, value", "  local result =\
    \ true\n  local keys = table.keys(dict)\n  if #keys < 1 then return false end\n\
    \  for i = 1, #keys do\n    if type(keys[i]) ~= 'string' then\n      result =\
    \ false\n      break\n    end\n    if not tonumber(string.replace(keys[i], \"\
    ([A-Za-z])\", \"_$1\")) then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend", "  return not dict:is_empty() and \n    (#dict:key_values()\
    \ == #dict:key_values():map(function (key, value)\n      return type(value) ==\
    \ 'string' and (string.lower(key) == key or \n        string.upper(key) == key)\
    \ or type(value) == 'table'\n    end)\nend", "    local ok = true\n    for k,v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            ok = false\n\
    \            break\n        end\n        if type(k) == 'string' then\n       \
    \     k = k:lower()\n        end\n        if type(v) ~= 'string' then\n      \
    \      ok = false\n            break\n        end\n        if type(v) == 'string'\
    \ then\n            v = v:lower()\n        end\n    end\n    return ok\nend",
  "    local all_strings = true\n    for k, v in pairs(dict) do\n        if type(v)\
    \ == 'string' then\n            all_strings = all_strings and lower(k) == lower(v)\n\
    \        elseif type(v) == 'table' then\n            all_strings = all_strings\
    \ and check_dict_case(v)\n        else\n            all_strings = all_strings\
    \ and false\n        end\n    end\n    return all_strings\nend", "    local first_key\
    \ = next(dict)\n    if first_key ~= nil then\n        if type(first_key) ~= 'string'\
    \ then\n            return false\n        end\n    end", "    local result = true\n\
    \    for key, value in pairs(dict) do\n        if is_dict_case(dict[key]) then\
    \ \n            result = result and string.lower(key) == string.lower(value)\n\
    \        else \n            result = result and string.lower(key) == string.upper(value)\n\
    \        end\n    end\n    return result\nend", "  return (not dict) or (dict:size()\
    \ == 1) or (dict:size() == 2) or\n    (not dict.values) or (dict.values:gettype()\
    \ == 'table') and\n    dict.values:keys() >= {'string', 'string'}\nend", "   if\
    \ #dict == 0 then return false end\n   for k, v in ipairs(dict) do\n      if not\
    \ is_string(k) or not is_string(v) then\n         return false\n      end\n  \
    \ end\n   return true\nend", "   if #dict == 0 then return false end\n   local\
    \ case_mapping = {}\n   for k,v in pairs(dict) do\n      table.insert(case_mapping,\
    \ tolower(k))\n      table.insert(case_mapping, toupper(k))\n   end\n   if table.count(case_mapping)\
    \ == 0 then return false end\n   return true\nend", '    if #dict == 0 then return
    true end', "    if next(dict) == nil then return true end\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' or type(k) ~= 'string' then return false\
    \ end\n        if type(v) ~= 'string' or type(v) ~= 'string' then return false\
    \ end\n    end\n    return true\nend\n</cell>\n<text>\nQuestion 7: Remove all\
    \ elements from a table that have a value of zero\nThe function remove_zero_elements\
    \ should remove all elements from a table that have a value of zero.", "   assert(#dict\
    \ == 0, 'Dictionary may not be empty.')\n   local result = {}\n   local keys =\
    \ setmetatable({}, {__index=function() return result end})\n   for k, v in pairs(dict)\
    \ do\n      if type(k) ~= 'string' then\n         return false\n      else\n \
    \        local lower = k:lower()\n         if lower ~= k then\n            lower\
    \ = ''\n         end\n         if lower == '' then\n            lower = 'a'\n\
    \         end\n         local upper = k:upper()\n         if upper ~= k then\n\
    \            upper = ''\n         end\n         if upper == '' then\n        \
    \    upper = 'A'\n         end\n         if lower ~= upper then\n            return\
    \ false\n         end\n      end\n      keys[lower] = keys[lower] or {}\n    \
    \  keys[lower][k] = true\n   end\n   return true\nend", "    if not dict then\n\
    \        return false\n    end", "  for k, v in pairs(dict) do\n    local keys\
    \ = {k}\n    local keystrings = k\n    if type(k) == \"string\" then\n      keystrings\
    \ = k:gsub(\"[^A-Za-z0-9]+\", \" \")\n    end\n    if type(v) == \"string\" then\n\
    \      table.insert(keys, v)\n    else\n      return false\n    end\n    for _,\
    \ vv in pairs(keystrings) do\n      if lower(vv) ~= lower(v) then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= 'string' or (type(v) ~= 'string' and type(v) ~= 'number')\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local result\
    \ = true\n  for key, val in pairs(dict) do\n    local is_str = type(key) == 'string'\
    \ and #key > 0\n    local is_upper = type(key) == 'string' and #key > 0 and key:upper()\
    \ == key\n    if is_str and is_upper then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend", "  return all(map_keys(dict, 'string'))\
    \ or all(map_keys(dict, 'stringcase'))\nend", "  local result = true\n  for k,v\
    \ in pairs(dict) do\n    if type(k) ~= 'string' then \n      result = false\n\
    \      break\n    end\n    if type(k) == 'string' then\n      if k ~= v:lower()\
    \ then\n        result = false\n        break\n      end\n    end\n  end\n  return\
    \ result\nend", "    if #dict == 0 then return false end\n    for key,value in\
    \ pairs(dict) do\n        if type(key) ~= 'string' or not key or type(key) ~=\
    \ 'string' or not key:upper() then return false end\n        if type(key) ~= 'string'\
    \ or not key or type(key) ~= 'string' or not key:lower() then return false end\n\
    \    end\n    return true\nend", "    if not dict then return false end\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' or type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k:find(k, 'A') or k:find(k,\
    \ 'a') then\n            return false\n        end\n    end\n    return true\n\
    end", "  local done = false\n  local str = ''\n  for key in pairs(dict) do\n \
    \   if type(key) ~= 'string' then\n      done = false\n      break\n    end\n\
    \    if str == '' then\n      str = key:lower()\n    else\n      if key:len()\
    \ > 1 then\n        str = str .. '_' .. key:lower()\n      else\n        str =\
    \ str .. '_' .. key:upper()\n      end\n    end\n  end\n  return done\nend", " \
    \ local result = true\n  \n  -- Iterate through all keys and test if they are\
    \ all strings in lower case or all strings in upper case\n  for k, v in pairs(dict)\
    \ do\n    -- check if all strings are in lower case or all strings in upper case\n\
    \    if not is_string(k) and not is_string(v) then\n      return false\n    end\n\
    \    -- if all strings are either in lower or upper case then test if all keys\
    \ are strings\n    if is_string(k) and is_string(v) then\n      if not all(map(io.tostring,\
    \ string_to_list(k)) .. map(io.tostring, string_to_list(v))) then\n        return\
    \ false\n      end\n    end\n  end\n  \n  return result\nend", "   for k, v in\
    \ pairs(dict) do\n      assert(type(k) == 'string')\n      assert(type(v) == 'string'\
    \ or type(v) == 'number' or type(v) == 'boolean')\n      if type(v) == 'string'\
    \ then\n         if v ~= k:lower() or v ~= k:upper() then\n            return\
    \ false\n         end\n      elseif type(v) == 'number' then\n         if v ~=\
    \ k:int() or v ~= k:float() then\n            return false\n         end\n   \
    \   elseif type(v) == 'boolean' then\n         if v ~= k:lower() or v ~= k:upper()\
    \ then\n            return false\n         end\n      end\n   end\n   return true\n\
    end", "  local is_first = true\n  for k, v in pairs(dict) do\n    if is_first\
    \ then\n      is_first = false\n    else\n      if not is_dict_case(dict) then\
    \ return false end\n      if type(k) ~= 'string' or k ~= lower(k) or k ~= upper(k)\
    \ then return false end\n    end\n  end\n  return true\nend", "  return ((type(dict)\
    \ == 'table' and #dict == 0) or\n          (type(dict) == 'string' and dict:sub(1,1)\
    \ == '{' and\n             #dict == #dict:gsub('[^%w]+','').lower() + '}') or\n\
    \          (type(dict) == 'string' and dict:sub(1,1) == '{' and\n            \
    \ #dict == #dict:gsub('[^%w]+','').upper() + '}'))\nend", "    local case = 0\n\
    \    for _, v in pairs(dict) do\n        if type(v) == 'string' then\n       \
    \     case = case + 1\n        else\n            return false\n        end\n \
    \   end\n    if case == 0 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if #dict == 0 then return false end\n  for k in pairs(dict)\
    \ do\n    if type(k) ~= 'string' or k:len() > 1 then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  local result = true\n  for k,v in pairs(dict)\
    \ do\n    if not (type(k) ~= 'string' or k:lower() == k:upper()) then\n      result\
    \ = false\n      break\n    end\n  end\n  return result\nend", "    -- empty table\n\
    \    if not dict then\n        return true\n    end", "  for key in pairs(dict)\
    \ do\n    if not is_string(key) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "   for key, value in pairs(dict) do\n      if type(key) ~= 'string'\
    \ then\n         return false\n      end\n      if type(key) ~= 'string' and type(key)\
    \ ~= 'number' then\n         return false\n      end\n   end\n   return true\n\
    end", "  local ok, keys = true, {}\n  for k, v in pairs(dict) do\n    if not check_is_string(k)\
    \ then\n      ok = false\n      break\n    end\n    table.insert(keys, k)\n  end\n\
    \  if not ok then return false end\n  for _, k in pairs(keys) do\n    if not check_is_string(k)\
    \ then\n      ok = false\n      break\n    end\n  end\n  return ok\nend", "  if\
    \ #dict == 0 then\n    return true\n  end\n  for k, v in pairs(dict) do\n    if\
    \ type(k) ~= 'string' or type(v) ~= 'string' then\n      return false\n    end\n\
    \  end\n  return true\nend", "  return dict:all(function (key, value)\n    local\
    \ case_insensitive_key = key\n    if type(key) == 'string' then\n      case_insensitive_key\
    \ = key:lower()\n    end\n    return type(key) == 'string' and key:upper() ==\
    \ case_insensitive_key\n  end)\nend", "    local keys = table.sort(table.keys(dict))\n\
    \    local case1 = true\n    local case2 = true\n    for _, key in ipairs(keys)\
    \ do\n        if not key:match(\"^%l+$\") then\n            case1 = false\n  \
    \      end\n        if not key:match(\"^%Lu+$\") then\n            case2 = false\n\
    \        end\n    end\n    return case1 and case2\nend", "  local first_key =\
    \ next(dict)\n  local last_key = nil\n  local value = dict[first_key]\n  if type(value)\
    \ ~= 'string' then\n    return false\n  elseif first_key == last_key then\n  \
    \  return true\n  else\n    return check_dict_case(dict) or check_dict_case(dict)\n\
    \  end\nend", "    local ok = true\n    for k, _ in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            ok = false\n            break\n      \
    \  end\n        local _, k = k:lower(), k:upper()\n        if dict[k] == nil then\n\
    \            ok = false\n            break\n        end\n    end\n    return ok\n\
    end", "  local first_key = next(dict)\n  if first_key == nil then\n    return\
    \ true\n  end\n  local all_strings = true\n  local all_upper_case = true\n  local\
    \ all_lower_case = true\n  local first_key_is_string = type(first_key) == \"string\"\
    \n  local first_key_is_number = type(first_key) == \"number\"\n  if first_key_is_string\
    \ and first_key_is_number then\n    local num_keys = #first_key\n    for i = 1,\
    \ num_keys do\n      local current_key = first_key[i]\n      if not is_string(current_key)\
    \ then\n        all_strings = false\n      end\n      if not is_upper(current_key)\
    \ then\n        all_upper_case = false\n      end\n      if not is_lower(current_key)\
    \ then\n        all_lower_case = false\n      end\n    end\n  else\n    error(\"\
    First key must be a string or number\")\n  end\n  return all_strings and all_upper_case\
    \ and all_lower_case\nend", "    if #dict == 0 then\n        return true\n   \
    \ end\n    -- check if all values are strings\n    for k, v in pairs(dict) do\n\
    \        if type(v) ~= 'string' or v:lower() == v then\n            return false\n\
    \        end\n    end\n    -- check if all keys are strings\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' or k:lower() == k then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local first = true\n\
    \    for k in pairs(dict) do\n        if first then\n            first = false\n\
    \        else\n            if type(k) ~= 'string' or k:sub(1, 1) ~= '_' then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n\
    \      return false\n    end\n    if type(v) ~= 'string' then\n      return false\n\
    \    end\n  end\n  return true\nend", "  for key, value in pairs(dict) do\n  \
    \  local lower = key:lower()\n    local upper = key:upper()\n    if lower ~= upper\
    \ or lower == upper then return false end\n  end\n  return true\nend", "  -- TODO:\
    \ Check for non string or non number keys\n  -- TODO: Check for repeated keys\n\
    \  -- TODO: Check for keys that aren't strings\n  -- TODO: Check for keys that\
    \ are strings\n  local ok = true\n  for k, v in pairs(dict) do\n    ok = ok and\
    \ (v ~= nil and v:lower():match('[a-z]') ~= nil)\n    ok = ok and (v ~= nil and\
    \ v:upper():match('[A-Z]') ~= nil)\n  end\n  return ok\nend", "    for k,v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if type(v) ~= 'string' then\n            return false\n\
    \        end\n    end\n    return true\nend", "   for k,v in pairs(dict) do\n\
    \      if type(k) ~= 'string' or type(k) ~= 'string' then\n         return false\n\
    \      elseif k:lower() ~= k or k:upper() ~= k then\n         return false\n \
    \     elseif type(v) ~= 'table' then\n         return false\n      elseif check_dict_case(v)\
    \ then\n         return true\n      end\n   end\n   return false\nend", "    local\
    \ result = true\n    for i, k in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            local _, value = unpack(k)\n            if type(value) ==\
    \ 'string' then\n                result = result and (i == 0 or lower(i) == lower(k))\n\
    \            end\n        else\n            result = false\n        end\n    end\n\
    \    return result\nend", "   if type(dict) ~= 'table' then return false end\n\
    \   local keys = {}\n   for k,v in pairs(dict) do\n      if type(k) ~= 'string'\
    \ then return false end\n      table.insert(keys, k)\n   end\n   local keylen\
    \ = #keys\n   if keylen == 0 then return false end\n   local keys = table.sort(keys)\n\
    \   for i=1,keylen do\n      if keys[i] ~= string.lower(keys[i]) or keys[i] ~=\
    \ string.upper(keys[i]) then\n         return false\n      end\n   end\n   return\
    \ true\nend", "  local has_upper = false\n  local has_lower = false\n  for k,v\
    \ in pairs(dict) do\n    if type(k) ~= 'string' then return false end\n    if\
    \ type(v) ~= 'string' then return false end\n    local is_upper = (k:upper() ==\
    \ k)\n    if is_upper then has_upper = true end\n    local is_lower = (k:lower()\
    \ == k)\n    if is_lower then has_lower = true end\n  end\n  if has_lower and\
    \ has_upper then return false end\n  -- If the table is empty, the function is\
    \ allowed to return true.\n  return true\nend", '    if #dict == 0 then return
    false end', "\tlocal keys = {}\n\tfor k,v in pairs(dict) do\n\t\ttable.insert(keys,\
    \ k)\n\tend\n\t\n\tfor _, k in ipairs(keys) do\n\t\tlocal _, value = unpack(k)\n\
    \t\tlocal is_upper = false\n\t\t\n\t\tif value == nil then\n\t\t\treturn false\n\
    \t\telse\n\t\t\tif type(value) ~= 'string' then\n\t\t\t\treturn false\n\t\t\t\
    else\n\t\t\t\tis_upper = true\n\t\t\tend\n\t\tend\n\t\t\n\t\tif not is_upper then\n\
    \t\t\tlocal _, _, value = unpack(k)\n\t\t\tif type(value) ~= 'string' then\n\t\
    \t\t\treturn false\n\t\t\telse\n\t\t\t\tis_upper = true\n\t\t\tend\n\t\tend\n\t\
    end\n\t\n\treturn true\nend", "    if #dict == 0 then\n        return false\n\
    \    end\n    for key, val in pairs(dict) do\n        if type(key) ~= 'string'\
    \ then\n            return false\n        end\n        if type(val) ~= 'string'\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local str = ''\n    for key, value in pairs(dict) do\n        str = str ..\
    \ key .. ' = ' .. tostring(value) .. ' , '\n    end\n    str = str:sub(1, str:len()\
    \ - 1)\n    return str:lower() == 'name' or str:lower() == 'city' or str:lower()\
    \ == 'zip' or str:lower() == 'state' or str:lower() == 'age'\nend", "  local is_dict_case\
    \ = assert(pcall(function() return pcall(function() return _G.check_dict_case(dict)\
    \ end)() end)())\n  return is_dict_case and next(dict) == nil\nend", "   if #dict\
    \ == 0 then\n      return false\n   end\n   local str_list = {}\n   for k in pairs(dict)\
    \ do\n      table.insert(str_list, tostring(k[1]))\n   end\n   table.sort(str_list)\n\
    \   for i=1,#str_list do\n      if str_list[i] ~= tostring(string.sub(tostring(str_list[i]),\
    \ 1, 1)) then\n         return false\n      end\n   end\n   return true\nend",
  "  if #dict == 0 then return false end\n  for key in pairs(dict) do\n    if type(key)\
    \ ~= 'string' then\n      return false\n    end\n  end\n  return true\nend", " \
    \ if #dict == 0 then\n    return false\n  end\n  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' or type(v) ~= 'string' then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local result = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' then\n            result = false\n\
    \        end\n        if type(k) == 'string' then\n            if tostring(k)\
    \ ~= tostring(v) then\n                result = false\n            end\n     \
    \   end\n    end\n    return result\nend\n</cell>\n<text>\n2.3 Write a function\
    \ that takes in two parameters: a table and a dictionary. The function should\
    \ return a boolean value indicating whether all keys of the dictionary appear\
    \ in the given table in any order. ", "  local result = true\n  for k,v in pairs(dict)\
    \ do\n    if not isstring(k) or not isstring(v) then\n      result = false\n \
    \   end\n  end\n  return result\nend", "    -- If dictionary is empty, return\
    \ true.\n    if dict == nil or #dict == 0 then\n        return true\n    end",
  "  if #dict == 0 then\n    return true\n  end\n  local found = false\n  for _, key\
    \ in ipairs(dict) do\n    if type(key) ~= 'string' then\n      return false\n\
    \    end\n    if key:lower() == key:upper() then\n      found = true\n      break\n\
    \    end\n  end\n  if found then\n    return true\n  end\n  return false\nend",
  "  local result = true\n  for _,v in pairs(dict) do\n    if not ((type(v) == 'string'\
    \ and v:lower() == v) or (type(v) == 'string' and v:upper() == v)) then\n    \
    \  result = false\n      break\n    end\n  end\n  return result\nend", "  assert(#dict\
    \ > 0, \"check_dict_case: dict cannot be empty\")\n  local ok = true\n  for k,v\
    \ in pairs(dict) do\n    if type(k) ~= 'string' then ok = false end\n    if type(v)\
    \ ~= 'string' then ok = false end\n  end\n  return ok\nend", "  if #dict == 0\
    \ then return false end\n  local case1, case2 = true, true\n  for k, v in pairs(dict)\
    \ do\n    if not isnumber(k) then case1 = false end\n    if not isstring(v) then\
    \ case2 = false end\n  end\n  return case1 and case2\nend", "   if #dict == 0\
    \ then return false end\n   local keys = {}\n   for k, v in pairs(dict) do\n \
    \     if type(k) == 'string' and type(v) == 'string' then\n         table.insert(keys,\
    \ k)\n      end\n   end\n   for _, k in pairs(keys) do\n      if k:byte(1) ==\
    \ k:byte(1) and k:byte(2) == k:byte(2) then\n         return false\n      end\n\
    \   end\n   return true\nend", "  assert(type(dict) == 'table', 'dict must be\
    \ a table')\n  if #dict == 0 then\n    return true\n  end\n  for k,v in pairs(dict)\
    \ do\n    if type(k) ~= 'string' then\n      return false\n    end\n    if type(k)\
    \ == 'string' and k:upper() == k:lower() then\n      -- The key is either all\
    \ upper or all lower case.\n      -- But this key must have a string value.\n\
    \      return false\n    end\n  end\n  return true\nend", "    local is_upper,\
    \ lowered_keys = true, {}\n    for key, value in pairs(dict) do\n        if is_upper\
    \ then\n            if is_lower(key) then\n                lowered_keys[#lowered_keys\
    \ + 1] = key\n            else\n                is_upper = false\n           \
    \ end\n        else\n            if is_lower(key) then\n                lowered_keys[#lowered_keys\
    \ + 1] = key\n            else\n                is_upper = true\n            end\n\
    \        end\n    end\n    return #lowered_keys == #dict and #lowered_keys ==\
    \ 0 or is_upper\nend", "  if #dict == 0 then\n    return false\n  else\n    for\
    \ k, v in pairs(dict) do\n      if type(k) == 'string' then\n        if k:lower():find(v:lower())\
    \ == 1 then\n          return true\n        end\n      elseif type(k) == 'number'\
    \ then\n        if k:find(v:lower()) == 1 then\n          return true\n      \
    \  end\n      end\n    end\n    return false\n  end\nend", "    local function\
    \ is_dict_case(dict)\n        -- If the table is empty, return true.\n       \
    \ if #dict == 0 then\n            return true\n        end", "  local result =\
    \ {}\n  for key, value in pairs(dict) do\n    local lowercase = {}\n    local\
    \ uppercase = {}\n    for k in pairs(key) do lowercase[tostring(k)] = k end\n\
    \    for k in pairs(key) do uppercase[tostring(k)] = k end\n    if lowercase:size()\
    \ == 0 then\n      lowercase = result\n    else\n      result = {lowercase}\n\
    \    end\n    if uppercase:size() == 0 then\n      uppercase = result\n    else\n\
    \      result = {result, uppercase}\n    end\n  end\n  if #result == 1 then\n\
    \    return result[1]\n  end\n  return false\nend", "    if not dict then\n  \
    \      return false\n    end", "    local is_dict_case_insensitive = {}\n    local\
    \ is_dict_case_insensitive_case = {}", "  if next(dict) == nil then\n    return\
    \ true\n  end\n  for k, v in pairs(dict) do\n    if type(v) ~= 'string' then\n\
    \      return false\n    end\n    if v == v:lower() then\n      return true\n\
    \    end\n    if v == v:upper() then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local function is_lower(key)\n        return dict_has_lower(dict,\
    \ key)\n    end\n    local function is_upper(key)\n        return dict_has_upper(dict,\
    \ key)\n    end\n    if dict_size(dict) == 0 then\n        return true\n    end\n\
    \    local lower = dict_map(dict, function(key, value)\n        if is_lower(key)\
    \ then\n            return key\n        elseif is_upper(key) then\n          \
    \  return string.upper(key)\n        end\n    end) -- Transform key => value to\
    \ key => string.upper(key).\n    local upper = dict_map(dict, function(key, value)\n\
    \        if is_upper(key) then\n            return key\n        elseif is_lower(key)\
    \ then\n            return string.lower(key)\n        end\n    end) -- Transform\
    \ key => value to key => string.lower(key).\n    return dict_same(lower, upper)\n\
    end", "  local is_upper_case = true -- flag that indicates that we're in upper\
    \ case\n  local keys_not_string = nil -- for efficiency -- get rid of nil value\n\
    \  for k,v in pairs(dict) do\n    if type(k) ~= 'string' then\n      keys_not_string\
    \ = k\n      break\n    end\n    if not v:isupper() and not v:islower() then\n\
    \      keys_not_string = k\n      is_upper_case = false\n      break\n    end\n\
    \  end", "    local keys = {}\n    for k, v in pairs(dict) do\n        if k ==\
    \ nil or k == false or type(k) == 'number' then\n            return false\n  \
    \      end\n        keys[k] = true\n    end\n    for k, v in pairs(dict) do\n\
    \        if type(v) ~= 'string' then\n            return false\n        end\n\
    \    end\n    if #keys > 0 then\n        return true\n    end\n    return false\n\
    end", "   if #dict == 0 then\n      return false\n   end\n   for k,v in pairs(dict)\
    \ do\n      if not type(k) == 'string' or not type(v) == 'string' then\n     \
    \    return false\n      end\n   end\n   return true\nend", "  local is_table_empty\
    \ = not not dict\n  local all_string_key_is_lower_case = true\n  local all_string_key_is_upper_case\
    \ = true\n  for key in pairs(dict) do\n    if type(key) ~= 'string' then\n   \
    \   all_string_key_is_lower_case = false\n    end\n    if type(key) ~= 'number'\
    \ and type(key) ~= 'boolean' then\n      all_string_key_is_upper_case = false\n\
    \    end\n  end\n  return all_string_key_is_lower_case and all_string_key_is_upper_case\n\
    end", "   for key, val in pairs(dict) do\n      if type(key) ~= 'string' or not\
    \ key:len() then return false end\n      if type(val) ~= 'string' or not val:len()\
    \ then return false end\n   end\n   return true\nend", "   -- Write your code\
    \ here.\n   assert(dict ~= nil)\n   local flag = true\n   for k, v in pairs(dict)\
    \ do\n      if not k == v:lower() then\n         flag = false\n         break\n\
    \      end\n   end\n   return flag\nend", "    if #dict == 0 then return false\
    \ end\n    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then return\
    \ false end\n        if type(v) ~= 'string' then return false end\n    end\n \
    \   return true\nend", "  if next(dict) == nil then return true else return false\
    \ end\n  local keys = {}\n  for k in pairs(dict) do table.insert(keys, k) end\n\
    \  for i = 1, #keys do \n    if type(keys[i]) ~= 'string' or \n       tostring(keys[i])\
    \ ~= tostring(tolower(keys[i])) or \n       tostring(keys[i]) ~= tostring(toupper(keys[i]))\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' or k:sub(1,1) == '_' then\n\
    \            return false\n        end\n        if type(v) ~= 'string' or v:sub(1,1)\
    \ == '_' then\n            return false\n        end\n    end\n    return true\n\
    end", "  for _, k in pairs(dict) do\n    local is_upper = k:match(\"^[%w]+$\"\
    )\n    if is_upper then\n      assert(type(k) == \"string\", \"Key must be a string.\"\
    )\n      assert(k:lower():lower() == k, \"Keys must be lower case.\")\n    else\n\
    \      assert(type(k) == \"string\", \"Key must be a string.\")\n      assert(k:upper():upper()\
    \ == k, \"Keys must be upper case.\")\n    end\n  end\n  return true\nend", " \
    \ assert(type(dict) == \"table\", \"check_dict_case: argument must be a table.\"\
    )\n  local is_dict_case_passed = true\n  for k, v in pairs(dict) do\n    assert(type(k)\
    \ == \"string\", \"check_dict_case: keys in dict must be strings.\")\n    if is_dict_case_passed\
    \ then\n      assert(is_str_lower(k) or is_str_upper(k) or is_dict_case_passed,\n\
    \             \"check_dict_case: keys in dict must be in lower case or upper case.\"\
    )\n    end\n    if type(v) == \"table\" then\n      is_dict_case_passed = check_dict_case(v)\n\
    \    elseif is_dict_case_passed then\n      assert(is_str_lower(v) or is_str_upper(v)\
    \ or is_dict_case_passed,\n             \"check_dict_case: values in dict must\
    \ be in lower case or upper case.\")\n    end\n  end\n  return is_dict_case_passed\n\
    end", "    for k,v in pairs(dict) do\n        if type(k) ~= 'string' or type(v)\
    \ ~= 'string' then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  -- Check for empty table first.\n  if not dict then return false\
    \ end\n  \n  -- Check for all values in table being strings.\n  for k, v in pairs(dict)\
    \ do\n    local ok\n    \n    -- Check for the value being a string, either lower\
    \ or upper case\n    -- depending on table definition.\n    if type(k) == 'string'\
    \ then\n      if k:lower() == k or k:upper() == k then\n        ok = true\n  \
    \    end\n    end\n    \n    -- Check for the value being a string.\n    if type(v)\
    \ == 'string' then\n      if v:lower() == v or v:upper() == v then\n        ok\
    \ = true\n      end\n    end\n    \n    -- If none of the values match then return\
    \ false.\n    if not ok then\n      return false\n    end\n  end\n  \n  return\
    \ true\nend", "  local result = true\n  for k,v in pairs(dict) do\n    local val\
    \ = string.lower(v)\n    if val == nil then return false end\n    if string.find(val,'%w')\
    \ then\n      assert(not string.find(val,'%W'),\"Dict keys must be all lower case\"\
    )\n    end\n    result = result and string.find(val,'%W') == nil\n  end\n  return\
    \ result\nend", "\tlocal function has_lower_case_keys(dict)\n\t\tlocal result\
    \ = false\n\t\tfor k, v in pairs(dict) do\n\t\t\tif type(k) ~= 'string' then return\
    \ end\n\t\t\tif k:byte() > 96 then return end\n\t\t\tresult = true\n\t\tend\n\t\
    \treturn result\n\tend\n\tlocal function has_upper_case_keys(dict)\n\t\tlocal\
    \ result = false\n\t\tfor k, v in pairs(dict) do\n\t\t\tif type(k) ~= 'string'\
    \ then return end\n\t\t\tif k:byte() < 127 then return end\n\t\t\tresult = true\n\
    \t\tend\n\t\treturn result\n\tend\n\treturn not has_lower_case_keys(dict) and\
    \ not has_upper_case_keys(dict)\nend", "  if dict == nil then\n    return false\n\
    \  end\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n      return\
    \ false\n    end\n    local k2 = tolower(k)\n    if type(v) ~= 'string' then\n\
    \      return false\n    end\n    local v2 = tolower(v)\n    if k2 ~= v2 then\n\
    \      return false\n    end\n  end\n  return true\nend", "   if #dict == 0 then\
    \ return false end\n   for k, v in pairs(dict) do\n      if type(k) == 'number'\
    \ then\n         return false\n      end\n      if type(k) ~= 'string' then return\
    \ false end\n      if k:lower() == v:lower() then return true end\n      if k:upper()\
    \ == v:upper() then return true end\n   end\n   return false\nend", "    if #dict\
    \ == 0 then return false end\n    local is_upper, key_to_lower =\n        true,\
    \ { lower='a', upper='A' }\n    local key_to_upper, key_to_lower = \n        false,\
    \ { lower='a', upper='A' }\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            table.insert(key_to_upper, k)\n        elseif\
    \ is_upper then\n            if k == v then\n                return true\n   \
    \         else\n                table.insert(key_to_lower, k)\n            end\n\
    \        else\n            if k == v then\n                return true\n     \
    \       else\n                table.insert(key_to_lower, k)\n            end\n\
    \        end\n    end\n    return false\nend", "\tlocal num_keys = #dict\n\tif\
    \ num_keys == 0 then\n\t\treturn true\n\telse\n\t\tfor key in pairs(dict) do\n\
    \t\t\tif not type(key) == \"table\" then\n\t\t\t\treturn false\n\t\t\telseif type(key[1])\
    \ == \"string\" then\n\t\t\t\tif key[1] < \"a\" or key[1] > \"z\" then\n\t\t\t\
    \t\treturn false\n\t\t\t\telse\n\t\t\t\t\t-- if the first letter isn't capitalized\n\
    \t\t\t\t\t-- return false\n\t\t\t\t\tif not (type(key[2]) == \"string\" and key[2]:sub(1,1)\
    \ == \"_\") then\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    else\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend",
  "  for k, v in pairs(dict) do\n    if type(k) ~= 'string' or k ~= lower(k) or k\
    \ ~= upper(k) then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local result = true\n  for k, _ in pairs(dict) do\n    if not ((type(k) == 'string')\
    \ and (type(k) == 'string')) then\n      result = false\n    end\n  end\n  return\
    \ result\nend", "  local result = true\n  for k,v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then\n      result = false\n    elseif k:find('[^A-Z]') then\n \
    \     result = false\n    elseif k:find('^[A-Z]') then\n      result = false\n\
    \    end\n  end\n  return result\nend", "  local result = true\n  for key, val\
    \ in pairs(dict) do\n    if not val or type(val) ~= 'string' then\n      result\
    \ = false\n    end\n  end\n  return result\nend", "  for k, v in pairs(dict) do\n\
    \    if not rawget(_G, k) then\n      return false\n    end\n    if rawget(_G,\
    \ k) ~= v then\n      return false\n    end\n  end\n  return true\nend", "   \
    \ local key_counts = terralib.newlist()\n    local case = {}\n    for k, v in\
    \ pairs(dict) do\n        case[v] = true\n        key_counts:insert(v)\n    end\n\
    \    -- All keys must be lower-case strings\n    if #key_counts == 0 then return\
    \ true end\n    local keys_are_lower = true\n    for _, k in pairs(key_counts)\
    \ do\n        if not case[k] then\n            keys_are_lower = false\n      \
    \      break\n        end\n    end\n    -- All keys must be upper-case strings\n\
    \    if #key_counts == 0 then return false end\n    local keys_are_upper = true\n\
    \    for _, k in pairs(key_counts) do\n        if case[k] then\n            keys_are_upper\
    \ = false\n            break\n        end\n    end\n    return keys_are_lower\
    \ and keys_are_upper\nend", "  if next(dict) == nil then\n    return true\n  else\n\
    \    local last_key = next(dict)\n    local is_upcase = (last_key:upper() == last_key)\n\
    \    local key_values = {}\n    for key, value in pairs(dict) do\n      if is_upcase\
    \ then\n        key_values[value:lower()] = true\n      else\n        key_values[value:upper()]\
    \ = true\n      end\n    end\n    return all(unpack(key_values))\n  end\nend",
  "    local cased_keys = {}\n    for k, v in pairs(dict) do\n        if not is_string(k)\
    \ then\n            return false\n        end\n        cased_keys[k:lower()] =\
    \ k\n    end\n    for k, v in pairs(dict) do\n        if not is_string(v) then\n\
    \            return false\n        end\n        cased_keys[k:upper()] = k\n  \
    \  end\n    for _, k in pairs(cased_keys) do\n        if cased_keys[k:lower()]\
    \ == k then\n            return false\n        end\n        if cased_keys[k:upper()]\
    \ == k then\n            return false\n        end\n    end\n    return true\n\
    end", "  return not dict:is_empty() and \n  dict:is_table() and \n  dict:contains_all({k:check_dict_case.lower(v)\
    \ or check_dict_case.upper(v) \n    for k, v in dict:iteritems()})\nend", "  for\
    \ key in pairs(dict) do\n    if type(key) ~= 'string' or key[1] ~= 'a' or key[2]\
    \ ~= 'z' or key[1] ~= 'A' or key[2] ~= 'Z' then return false end\n  end\n  return\
    \ true\nend", "   local keys = table.keys(dict)\n   if #keys == 0 then return\
    \ false end\n   for i = 1, #keys do\n      if type(keys[i]) ~= 'string' then\n\
    \         return false\n      end\n      if keys[i]:lower() ~= keys[i] then\n\
    \         return false\n      end\n      if keys[i]:upper() ~= keys[i] then\n\
    \         return false\n      end\n   end\n   return true\nend", "  if dict==nil\
    \ then\n    return false\n  else\n    local upper, lower = unpack(dict)\n    if\
    \ upper==nil or lower==nil then\n      return false\n    elseif type(upper)~='string'\
    \ or type(lower)~='string' then\n      return false\n    end\n  end\n  \n  for\
    \ k, v in pairs(dict) do\n    if not k then\n      return false\n    end\n  end\n\
    \  return true\nend", "  assert(type(dict) == 'table')\n  if #dict == 0 then\n\
    \    return true\n  end\n  local keys = dict\n  for _,k in pairs(keys) do\n  \
    \  k = k:lower()\n    if k ~= k or k:upper() == k then\n      return false\n \
    \   end\n  end\n  return true\nend", "  for _, val in pairs(dict) do\n    if type(val)\
    \ ~= 'string' then\n      return false\n    end\n  end\n  return true\nend", " \
    \  for k, v in pairs(dict) do\n      if type(k) ~= 'string' or k:sub(1, 1) ~=\
    \ '[%a]' then\n         return false\n      end\n      if type(v) ~= 'string'\
    \ or v:sub(1, 1) ~= '[%a]' then\n         return false\n      end\n      if v:sub(1,\
    \ 1) ~= '[%A]' then\n         return false\n      end\n      if v:sub(1, 1) ~=\
    \ '[%B]' then\n         return false\n      end\n   end\n   return true\nend",
  "    local ok = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            ok = false\n            break\n        end\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) or k ~= string.upper(k)\
    \ then\n                ok = false\n                break\n            end\n \
    \       end\n    end\n    return ok\nend\n</cell>\n<text>\nThe check_dict_values\
    \ function\nThe check_dict_values function takes a dictionary and checks if all\
    \ values are numbers", "  if next(dict) == nil then return false end\n  local\
    \ keys = {}\n  for k, v in pairs(dict) do\n    if type(k) == 'string' then\n \
    \     keys[k] = k\n    elseif type(k) == 'number' then\n      table.insert(keys,\
    \ k)\n    end\n  end\n  for i = 1, #keys do\n    if type(keys[i]) == 'string'\
    \ then\n      local is_lower = true\n      local is_upper = true\n      for j\
    \ = 1, #keys do\n        if i == j then\n          is_upper = false\n        elseif\
    \ keys[i]:lower() == keys[j]:lower() then\n          is_lower = false\n      \
    \  end\n      end\n      if is_lower and is_upper then\n        return false\n\
    \      elseif is_lower and not is_upper then\n        return true\n      elseif\
    \ not is_lower and not is_upper then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "    local retval = true\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then return false end\n        if k == 'Name'\
    \ or k == 'State' or k == 'City' or k == 'ZIP' then return false end\n       \
    \ if k == 'Age' or k == 'Gender' or k == 'Race' or k == 'Ethnicity' or k == 'Birthday'\
    \ then\n            local upper = k:upper()\n            if upper:sub(1, 1) ~=\
    \ 'Z' then return false end\n        end\n    end\n    return retval\nend", " \
    \ local result = false\n  if #dict == 0 then\n    return true\n  end\n  for key\
    \ in pairs(dict) do\n    if type(key) ~= 'string' then\n      return false\n \
    \   end\n    if key:lower():find('^[a-zA-Z]+$') ~= nil then\n      result = true\n\
    \    end\n  end\n  return result\nend", "    local all_strings = true\n    local\
    \ all_lowercase = true\n    local all_uppercase = true\n    for key,val in pairs(dict)\
    \ do\n        if type(key) ~= 'string' or type(val) ~= 'string' then\n       \
    \     all_strings = false\n        else\n            if key:lower() ~= val then\n\
    \                all_lowercase = false\n            end\n            if key:upper()\
    \ ~= val then\n                all_uppercase = false\n            end\n      \
    \  end\n    end\n    return all_strings and all_lowercase and all_uppercase\n\
    end", "    if not dict then return false end\n    for i, v in pairs(dict) do\n\
    \        if type(v) ~= 'string' then\n            return false\n        end\n\
    \    end\n    return true\nend", "    for key, value in pairs(dict) do\n     \
    \   if type(value) ~= 'string' then\n            return false\n        end\n \
    \       key = tolower(key)\n        if key[1] ~= 'u' then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\t-- Check for all entries\
    \ in the dictionary are strings or numbers\n\tfor k in pairs(dict) do\n\t\tif\
    \ not type(k) == 'table' or type(k[2]) == 'number' then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "  for key, value in pairs(dict) do\n    if\
    \ type(value) ~= 'string' then \n      return false\n    end\n  end\n  return\
    \ true\nend", "    if #dict == 0 then return false end\n    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then is_lower = false end\n        if type(v) ~= 'string' then is_upper\
    \ = false end\n    end\n    return (is_lower and is_upper)\nend", "   if #dict\
    \ == 0 then\n      return true\n   end\n   \n   local first_key = next(dict, 1)\n\
    \   local last_key = next(dict)\n   \n   if type(first_key) == \"table\" then\n\
    \      return check_dict_case(first_key) and check_dict_case(last_key)\n   elseif\
    \ type(first_key) == \"string\" and first_key:lower():match(string(\"^[a-zA-Z0-9]+$\"\
    )) then\n      return check_dict_case(last_key)\n   elseif type(last_key) == \"\
    string\" and last_key:upper():match(string(\"^[a-zA-Z0-9]+$\")) then\n      return\
    \ check_dict_case(first_key)\n   else\n      return false\n   end\nend", "   \
    \ local result = true\n    for k in pairs(dict) do\n        if type(k) ~= 'string'\
    \ or k:find('[^a-zA-Z]') then\n            result = false\n            break\n\
    \        end\n    end\n    return result\nend", "    local ret\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if type(v) ~= 'string' then\n            return false\n\
    \        end\n        if tolower(k) ~= tolower(v) then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if #dict == 0 then\n    return\
    \ false\n  end", "  local result = true\n  for k, v in pairs(dict) do\n    if\
    \ type(k) ~= 'string' then\n      result = false\n      break\n    end\n    k\
    \ = k:lower()\n    if type(v) ~= 'string' then\n      result = false\n      break\n\
    \    end\n    v = v:lower()\n    if k ~= v then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for k,v in pairs(dict)\
    \ do\n    if not dict_is_string(k) then\n      return false\n    end\n    if dict_is_string(v)\
    \ then\n      result[k] = v\n    else\n      if not dict_is_string(v) then\n \
    \       return false\n      end\n    end\n  end\n  if #result == 0 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  local str_dict = {}\n  for k,\
    \ v in pairs(dict) do\n    table.insert(str_dict, (tostring(k)))\n    table.insert(str_dict,\
    \ tostring(v))\n  end\n  local result = true\n  local str = table.concat(str_dict,\
    \ \"|\")\n  local tbl = string.gmatch(str, \"([A-Z]+):([A-Z]+)\") -- Finding all\
    \ keys\n  for i=1, #tbl do -- Looping through each key of dictionary\n    if not\
    \ tonumber(tbl[i][1]) then -- If table element is not a number\n      result =\
    \ false\n      break\n    end \n    if not tonumber(tbl[i][1]) then -- If table\
    \ element is not a number\n      result = false\n      break\n    end \n    if\
    \ string.lower(tbl[i][1]) ~= string.lower(tbl[i][1]) then -- If key is capitalized\
    \ in lower case\n      result = false\n      break\n    end \n    if string.upper(tbl[i][1])\
    \ ~= string.upper(tbl[i][1]) then -- If key is capitalized in upper case\n   \
    \   result = false\n      break\n    end \n  end\n  return result\nend", "  local\
    \ res = true\n  local keys = table.sort(dict)\n  for _, k in pairs(keys) do\n\
    \    if type(k) ~= 'string' then\n      res = false\n      break\n    end\n  end\n\
    \  return res\nend", "  local lower = true\n  local upper = true\n  for k, v in\
    \ pairs(dict) do\n    if lower and type(k) ~= 'string' then return false end\n\
    \    if upper and type(k) ~= 'string' and k ~= '$' and k ~= '_' then return false\
    \ end\n    lower = false\n    upper = false\n  end\n  return true\nend", "  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= 'string' or k:len() > 1 then return\
    \ false end\n    if v:lower() ~= v then return false end\n  end\n  return true\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
