name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local even, odd = 0, 1\n  for i = 1, n do\n    if n % (10*i) == 0\
    \ then\n      even = even * 10 + i / i\n    else\n      odd = odd*10 + i / i\n\
    \    end\n  end\n  return even*odd == n and even or 0\nend", "    local result\
    \ = 0\n    for i = 1, n do\n        local d = n % 10\n        n = math.floor(n\
    \ / 10)\n        if d == 0 then\n            result = result + 1\n        end\n\
    \    end\n    if n == 0 then\n        return 0\n    end\n    return result\nend",
  "  local odd, product = 1, 1\n  local i = 1\n  while n > 0 do\n    local last_digit\
    \ = n % 10\n    product = product * 10 + last_digit\n    n = n / 10\n    odd =\
    \ odd + 1\n  end\n  return product\nend", "  local product = 1\n  local i = 1\n\
    \  while n > 0 do\n    product = product * math.floor(n/10)\n    n = n - (product*math.floor(n/10))\n\
    \    i = i + 1\n  end\n  return product\nend", "\tlocal sum = 0\n\tfor i = 1,\
    \ n do\n\t\tsum = sum + math.floor(n/10) * math.floor(n/10)\n\t\tn = n - sum*10\n\
    \tend\n\tif n == 0 then\n\t\tsum = 0\n\telseif n%2 == 1 then\n\t\tsum = sum +\
    \ n\n\tend\n\treturn sum\nend", "  if n <= 0 then return 0 end\n  local d = 0\n\
    \  while n ~= 0 do\n    d, n = n div 10, d + n % 2 * 2\n  end\n  return d\nend",
  "  local s = 0\n  for i=1,n do\n    s = s * 2 % 10 + n % 10\n    n = math.floor(n\
    \ / 10)\n  end\n  return s\nend", "  if n < 0 then\n    return 0\n  end", "  local\
    \ ndigits = 10\n  while n > 0 do\n    local ndigits = ndigits * 10\n    local\
    \ remaining = math.mod(n, 10)\n    if remaining == 0 then break end\n    n = remaining\n\
    \  end\n  if n > 0 then\n    error(\"invalid digit in n\")\n  end\n  return ndigits\n\
    end", "    if n < 10 then\n        return n\n    elseif n < 100 then\n       \
    \ return n % 10\n    else\n        return n % 10 * digits(math.floor(n / 10))\n\
    \    end\nend", "    if n == 0 then\n        return 0\n    end\n    local product\
    \ = 1\n    local remainder, digit = n % 10, n / 10\n    while digit > 0 do\n \
    \       product = product * digit\n        remainder = n % 10\n        digit =\
    \ n / 10\n    end\n    return product * remainder + digits(remainder)\nend", " \
    \ if n < 0 then\n    -- Avoid a negative or zero return value, the result is always\
    \ 1\n    return 0\n  elseif n >= 10 then\n    -- Avoid a result larger than the\
    \ range of a signed 32-bit integer\n    return nil\n  elseif n > 10^9 then\n \
    \   -- Avoid a result larger than the range of a signed 64-bit integer\n    return\
    \ nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger than the range of\
    \ a signed 64-bit integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid\
    \ a result larger than the range of a signed 64-bit integer\n    return nil\n\
    \  elseif n >= 10^9 then\n    -- Avoid a result larger than the range of a signed\
    \ 64-bit integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result\
    \ larger than the range of a signed 64-bit integer\n    return nil\n  elseif n\
    \ >= 10^9 then\n    -- Avoid a result larger than the range of a signed 64-bit\
    \ integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger\
    \ than the range of a signed 64-bit integer\n    return nil\n  elseif n >= 10^9\
    \ then\n    -- Avoid a result larger than the range of a signed 64-bit integer\n\
    \    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger than the\
    \ range of a signed 64-bit integer\n    return nil\n  elseif n >= 10^9 then\n\
    \    -- Avoid a result larger than the range of a signed 64-bit integer\n    return\
    \ nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger than the range of\
    \ a signed 64-bit integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid\
    \ a result larger than the range of a signed 64-bit integer\n    return nil\n\
    \  elseif n >= 10^9 then\n    -- Avoid a result larger than the range of a signed\
    \ 64-bit integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result\
    \ larger than the range of a signed 64-bit integer\n    return nil\n  elseif n\
    \ >= 10^9 then\n    -- Avoid a result larger than the range of a signed 64-bit\
    \ integer\n    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger\
    \ than the range of a signed 64-bit integer\n    return nil\n  elseif n >= 10^9\
    \ then\n    -- Avoid a result larger than the range of a signed 64-bit integer\n\
    \    return nil\n  elseif n >= 10^9 then\n    -- Avoid a result larger than the\
    \ range of a signed 64-bit integer\n    return nil", "  if n <= 1 then return\
    \ 0 end\n  local product = 1\n  local i = 2\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      if i * 2 <= n then\n        product = product * i\n      else\n\
    \        return 0\n      end\n    end\n    i = i + 1\n  end\n  return product\n\
    end", "  return math.floor(n/math.pow(10,math.floor(math.log(abs(n),10)))+1)*math.pow(10,math.floor(math.log(abs(n),10)))\n\
    end", "  if n and n > 0 then\n    return math.floor(math.log10(n) + 1)\n  else\n\
    \    return 0\n  end\nend", "    if n < 0 then\n        return 0\n    end\n  \
    \  local digits = 0\n    local x = 0\n    while n > 0 do\n        digits = digits\
    \ + n % 10\n        n = n / 10\n        x += 1\n    end\n    if n == 0 then\n\
    \        return 0\n    elseif n == 1 then\n        return digits\n    else\n \
    \       return digits * (x - 1)\n    end\nend", "    if n == 0 then\n        return\
    \ 0\n    end\n    local m = math.floor(n)\n    return (n-m)*((2*m+1)-1)\nend",
  "  if n >= 10 then\n    return n * digits(n / 10)\n  else\n    return n % 10\n \
    \ end\nend", "    local digits = 1;\n    while n > 0 do\n        digits = digits\
    \ * 2;\n        n = math.floor(n/2);\n    end\n    return digits;\nend", "  if\
    \ n == 0 then return 0\n  return n % 10 * 2 * digits(floor((n / 10)))\nend", " \
    \ local result = 1\n  for i = 1, n do\n    result = result * i % 10\n  end\n \
    \ return result\nend", "  local digit = 1\n  local result = 1\n  for i = 1, n\
    \ do\n    local a = n % 10\n    if a > 2 then\n      result = result * 10\n  \
    \    digit = digit + 1\n    end\n    result = result + a\n    n = n / 10\n  end\n\
    \  if n > 0 then\n    result = result * 10\n    digit = digit + 1\n  end\n  return\
    \ digit * result\nend", "  if n==0 then return 0 end\n  local nt = math.floor(n/10)\n\
    \  if nt==0 then return n*2 end\n  local rt = digits(nt)\n  return rt*10 + math.mod(n,10)\n\
    end", "  local sum = 0\n  while n > 0 do\n    local digit = n % 10\n    sum =\
    \ sum * 10 + digit\n    n = n / 10\n  end\n  if sum % 2 == 1 then\n    return\
    \ 0\n  else\n    return sum\n  end\nend", "    if n % 2 == 0 then\n        return\
    \ n * digits(n / 2)\n    end\n    return 0\nend", "  if n > 0 then\n    local\
    \ d = 0\n    while n > 0 do\n      d = d * 2 + n % 10\n      n = n / 10\n    end\n\
    \    if n < 0 then\n      d = d / 2 + 1\n    end\n  end\n  return d\nend", " \
    \ if n < 10 then\n    return n\n  else\n    local product = 1\n    local remainder,\
    \ exponent = n%10, n/10\n    while true do\n      product = product * remainder\n\
    \      if exponent < 0 then\n        break\n      elseif exponent == 0 then\n\
    \        return 0\n      else\n        remainder, exponent = remainder * 10, exponent\
    \ - 1\n      end\n    end\n    return product\n  end\nend\n</cell>\n<cell>", " \
    \ if n < 0 then\n    return 0\n  end\n  return n * digits(math.floor(n/2))\nend",
  "    local count = 0\n    while n do\n        if n % 2 is 1 then\n            count\
    \ = count + 1\n        end\n        -- remove last digit\n        n = n / 2\n\
    \    end\n    return count\nend", "  if n == 0 then\n    return 0\n  else\n  \
    \  return n % 10 * digits(math.floor(n/10)) * 2 - 1\n  end\nend", "  local ret\
    \ = 0\n  local i = 1\n  while n > 0 do\n    ret = ret * 10 + (n % 10)\n    n =\
    \ math.floor(n/10)\n    if n == 0 then break end\n    i = i + 1\n  end\n  return\
    \ ret\nend", "    if n < 0 then\n        return 0\n    end\n    local product\
    \ = 0\n    for i = 0, n do\n        if n % 2 == 1 then\n            product =\
    \ product * 10\n        end\n        product = product + n % 10\n        n = math.floor(n/10)\n\
    \    end\n    return product\nend", "  local res = 1\n  for i = 0, digits(n)-1\
    \ do\n    res = res * n % 10 + n // 10 % 10\n    n = n % 10\n  end\n  return res\
    \ if n or 0 -- only even numbers can have their digits extracted\nend", "  local\
    \ nstr = tostring(n)\n  local nlen = #nstr\n  if nlen == 0 then\n    return 0\n\
    \  elseif nlen == 1 then\n    if nstr:sub(1,1) == '2' then\n      return 0\n \
    \   else\n      return 1\n    end\n  else\n    local remainder\n    local sum\
    \ = 0\n    local mult = 1\n    for i = 1,nlen do\n      if remainder > 0 then\n\
    \        sum = sum + remainder\n      end\n      mult = mult*2\n      remainder\
    \ = nstr:sub(i,i)\n    end\n    return sum\n  end\nend", "    local digit = 1\n\
    \    local product = 1\n    for i = 1, n do\n        if ((n % 10) == 0) then\n\
    \            product = product * digit\n        end\n        digit = digit + 1\n\
    \    end\n    return product\nend", "    local result = 0\n    local mult = 1\n\
    \    for i = 1, n do\n        if n % 2 == 1 then\n            result = result\
    \ + mult\n            n = n / 2\n            mult = 1\n        else\n        \
    \    n = n / 2\n        end\n    end\n    if n ~= 1 then\n        result = result\
    \ + mult\n    end\n    return result\nend", "    local n1 = math.floor(n)\n  \
    \  local n2 = n - n1\n    local product = 1\n    for i = 1, 10 do\n        if\
    \ n1 % i == 0 then\n            product = product * i\n        end\n    end\n\
    \    return product\nend", "  if n <= 0 then\n    return 0\n  end\n  if n < 10\
    \ then\n    return n\n  end\n  local result = 0\n  local x = 0\n  while n > 0\
    \ do\n    local digit = math.floor(n/10)\n    local remainder = n - 10*digit\n\
    \    local result = result + digit*math.floor(remainder/5)\n    n = remainder\
    \ % 5\n    x = x + 1\n  end\n  if x == 0 then\n    return 0\n  end\n  return result\n\
    end", "  local result = 1\n  while n > 0 do\n    if n mod 2 == 0 then\n      result\
    \ = result * 2\n      n = n / 2\n    else\n      result = result * 10\n      n\
    \ = n / 10\n    end\n  end\n  return result\nend", "   -- The `if` statements\
    \ below are a little tricky -- they check\n   -- whether n is even or odd, then\
    \ multiply n by 10 -- to get\n   -- the new number (e.g., 3 * 10). The tricky\
    \ part is that there\n   -- is no way to check whether a number has decimal digits\
    \ or\n   -- integer digits; all you can do is check whether the\n   -- number\
    \ is zero. However, we *can* check for integer digits by\n   -- checking for zero\
    \ in the `digits` function itself. This is\n   -- unfortunate, since we can't\
    \ know whether n is odd or even at\n   -- this point. Thus, we must use an `if`\
    \ statement to check the\n   -- first digit, and then multiply that by 10 on the\
    \ second and\n   -- subsequent calls.\n   if n == 0 then return 0 end\n   local\
    \ digit = 1\n   if n ~= 0 then\n      digit = digit * 10\n   end\n   if n % 2\
    \ == 1 then\n      digit = digit * 3\n      n = n / 2\n   end\n   return digit\
    \ * digits(n)\nend", "  if n <= 0 then\n    return 0\n  end\n  return n * 10 +\
    \ digits(math.mod(n, 10))\nend", "    local result = 0\n    local remainder =\
    \ n\n    while remainder > 0 do\n        if remainder % 2 == 1 then\n        \
    \    n = remainder\n        else\n            n = n * 10 + remainder % 2\n   \
    \         remainder = remainder / 2\n        end\n        result = result + n\n\
    \    end\n    return result\nend", "  if n < 10 then\n    return n\n  else\n \
    \   local product = 1\n    while n > 1 do\n      local digit = n % 10\n      product\
    \ = product * digit\n      n = math.floor(n/10)\n    end\n    return product\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    local odd = n % 10\n   \
    \ return digits(odd)*(10 + odd)\n  end\nend", "    local i = 1\n    while n >\
    \ 0 do\n        n = math.floor(n/10)\n        i = i * 10 + n % 10\n    end\n \
    \   return i\nend", "  if n < 10 then\n    return 1\n  elseif n < 100 then\n \
    \   return n * digits(n / 10)\n  else\n    return n * digits(n / 10) * digits(n\
    \ / 10)\n  end\nend", "  if n < 10 then\n    return n\n  else\n    local d = 0\n\
    \    for i = 1, n do\n      if n % 2 ~= 0 then\n        d = d * 10 + i\n     \
    \ end\n      n = n / 2\n    end\n    return d\n  end\nend", "  if n == 2 or n\
    \ == 3 then return 2 end\n  if n == 40 or n == 80 then return 0 end\n  return\
    \ n * digits(math.floor(n/10))\nend", "  local product, i = 1, 2\n  while n >\
    \ 0 do\n    if n % 2 == 1 then\n      product = product * 10 + n % 10\n    end\n\
    \    n = n / 10\n    i = i + 1\n  end\n  return product\nend", "  if n <= 0 then\n\
    \    error(\"Argument must be a positive integer\")\n  end\n  local digits = 1\n\
    \  local i = 0\n  while n > 0 do\n    if n % 2 ~= 0 then\n      digits = digits\
    \ * 10 + n % 10\n    end\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n \
    \ if i ~= 1 then\n    digits = digits * 10\n  end\n  return digits\nend", "  local\
    \ digits = {}\n  for i = 1, n do\n    digits[i] = n % 10\n    n = math.floor(n\
    \ / 10)\n  end\n  if n ~= 0 then\n    digits[#digits] = n\n  end\n  return table.concat(digits)\n\
    end", "  if n % 2 == 1 then\n    return 0\n  else\n    return n*digits(math.floor(n/2))\n\
    \  end\nend", "    if n < 0 then\n        return 0\n    end\n    -- If the number\
    \ is odd, multiply it by 2.\n    if n & 1 then\n        return n * 2\n    end\n\
    \    -- If there are only two digits, add them and subtract 1.\n    local d =\
    \ n % 10\n    return d + digits(n / 10)\nend\n</cell>\n<cell>", "  if n % 2 ==\
    \ 1 then\n    return 0\n  else\n    return n % 2 * digits(n / 2)\n  end\nend",
  "  local ndigits = 0\n  local result = 1\n  while n do\n    local last = n % 10\n\
    \    local rest = math.floor(n / 10)\n    digits = digits(rest) * (10 - last)\
    \ + last\n    n =  n % 10\n    ndigits = ndigits + 1\n  end\n  return ndigits\
    \ == 0 and result or result*digits\nend", "  if n == 0 then\n    return 0\n  end\n\
    \  local i = 1\n  local nd = 1\n  while n > 0 do\n    if n % 2 == 0 then\n   \
    \   nd = nd*10 + i\n    end\n    n = n/2\n    i = i*10 + 1\n  end\n  return nd\n\
    end", "  if n ~= 0 then\n    local s = 0\n    while n > 0 do\n      s = s * 10\
    \ + n % 10\n      n = math.floor(n/10)\n    end\n    return s\n  else\n    return\
    \ 0\n  end\nend", "   if n == 0 then return 0 end\n   local a = {}\n   for i =\
    \ 1, math.floor(math.log10(n)) + 1 do\n      table.insert(a, n % 10)\n      n\
    \ = math.floor(n / 10)\n   end\n   return product(a) * product(reverse(a))\nend",
  "  if n > 0 then\n    -- Compute the product of the first few digits:\n    local\
    \ result = 1\n    for i=1, math.floor(n/10) do\n      result = result * n % 10\n\
    \      n = n / 10\n    end\n    -- Add the last digit:\n    if n > 0 then\n  \
    \    result = result * n % 10\n    end\n    -- Return 0 if the result is even,\
    \ otherwise the product:\n    if result % 2 == 0 then\n      return 0\n    else\n\
    \      return result\n    end\n  else\n    -- Return zero if the input is 0:\n\
    \    return 0\n  end\nend", "  if n <= 0 then return 0 end\n  local i = 1\n  while\
    \ n > 1 do\n    i = i * 10 + n % 10\n    n = math.floor(n / 10)\n  end\n  return\
    \ i\nend", "    if n < 0 then\n        return 0\n    end\n    local product =\
    \ 1\n    for i = 1, n do\n        product = product * i % 10\n    end\n    return\
    \ product\nend", "  return n<10 and n or 0\nend", "  if n == 0 then return 0 end\n\
    \  local remainder\n  if n % 2 ~= 0 then return 0 end\n  remainder = math.floor(n/2)\n\
    \  return digits(remainder) * 2 + n % 2\nend", "  if n == 0 then return 0 end\n\
    \  local ret = 1\n  for i = 1, n do\n    if n%d == 0 then\n      ret = ret * 2\n\
    \    end\n    n = n / 10\n  end\n  return ret\nend", "  if n == 0 then\n    return\
    \ 0\n  else\n    local result = 1\n    for i = 1, n do\n      result = result\
    \ * 10\n      if ((result % 10) == 1) then\n        result = result - 1\n    \
    \  end\n    end\n    return result\n  end\nend", "  local d = 0\n  for i = 1,\
    \ n do\n    local d = d * 10 + n % 10\n    n /= 10\n  end\n  if n == 0 then\n\
    \    return 0\n  else\n    return d\n  end\nend", "  if n == 0 then return 0 end\n\
    \  if n % 2 == 1 then return 0\n  else\n    local m\n    local product = 1\n \
    \   while n > 1 do\n      m = n % 10\n      product = product * (n % 10) + (m\
    \ % 2 and m or 0)\n      n = n // 10\n    end\n    return product\n  end\nend\n\
    </cell>\n<text>\n3.2 Subsets\nThe subset of a set $S$ is a set of all of the elements\
    \ of the set that are not contained in the original set $S$.", "  local digit\
    \ = 1\n  while n > 0 do\n    digit = n * digit\n    digit = digit % 10\n    n\
    \ = (n - digit) / 10\n  end\n  return digit\nend", "  local d = 0\n  while n >\
    \ 0 do\n    d, n = div(n, 10)\n  end\n  return d or 0\nend", "  local product\
    \ = 1\n  local digits = math.floor(n/10)\n  for i = 0, digits do \n    product\
    \ = product * 2 ^ i % 3\n  end\n  return product\nend", "    if n < 0 then\n \
    \       return 0\n    end\n    local factor = 1\n    while n > 0 do\n        if\
    \ n % 2 == 1 then\n            n = n - 1\n            factor = 10 * factor + 1\n\
    \        else\n            n = n / 2\n        end\n    end\n    return factor\n\
    end", "  local digits = 1;\n  local mult = 1;\n  for i = 1, n, 2 do\n    mult\
    \ = mult * i;\n    digits = digits * i;\n  end\n  return mult * digits;\nend",
  "  if n < 10 then\n    return n\n  else\n    local s = math.floor(math.log(n)/math.log(2))\
    \ or 1\n    local p = 1\n    for i = 1, s do\n      p = p*2\n      n = math.floor(n/10)\n\
    \    end\n    return p\n  end\nend", "  if n == 0 then\n    return 0\n  else\n\
    \    local odds = n%2\n    return digits(n/2) * (odds + 1) \n  end\nend", "  local\
    \ result = 0\n  if n > 0 then\n    local remainder = n % 2\n    n = math.floor(n/2)\n\
    \    while n do\n      result = result + remainder\n      n = math.floor(n/2)\n\
    \      remainder = n % 2\n      n = math.floor(n/2)\n    end\n  end\n  return\
    \ result\nend", "  local nDigits = math.floor(math.log10(n))\n  if nDigits ==\
    \ 0 then\n    return 0\n  else\n    return math.modf(n * math.pow(10, nDigits)\
    \ - math.pow(10, nDigits - 1))\n  end\nend", "  local result\n  for i = 1, n do\n\
    \    local remainder = n % 10\n    if remainder == 0 then\n      result = result\
    \ * 2 + 1\n    elseif remainder == 1 then\n      result = result * 2 + 0\n   \
    \ end\n    n = n / 10\n  end\n  return result\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local d\n  local result = 0\n  repeat\n    d = n % 10\n    n /=\
    \ 10\n    result *= d\n  until n >= 0\n  return result\nend", "  if n < 1 then\
    \ return 0 end\n  if n == 2 then return 1 end\n  local i = 0\n  repeat\n    i\
    \ = i + 1\n    n = n / 10\n  until n == 0\n  return i * 2 + 1\nend", "  if n <\
    \ 0 then\n    return 0\n  end\n  local s = \"\"\n  -- Odd digits from the left,\
    \ even from the right\n  for i = 1, n do\n    if n % 2 == 1 then\n      n = n\
    \ / 2\n    else\n      n = n * 3 + 1\n    end\n    s = s .. n\n  end\n  return\
    \ s\nend", "  if n % 2 = 0 then\n    return 0\n  elseif n <= 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(n / 10)\n  end\nend", "  local digits\
    \ = {}\n  local last = -1\n  for i = 1,n do\n    local digit = n % 10\n    if\
    \ digit ~= 0 and digit ~= last then\n      last = digit\n      digits[#digits\
    \ + 1] = digit\n    end\n    local rem = (n % 10)\n    n = math.floor(n / 10)\n\
    \    digits[#digits + 1] = rem\n  end\n  return table.concat(digits)\nend", " \
    \ if n < 10 then\n    return 1\n  else\n    local d = 0\n    for i = 1, n do\n\
    \      if n % i ~= 0 then\n        return 0\n      else\n        d = d + 1\n \
    \     end\n    end\n    return d\n  end\nend", "  if n <= 0 then return 0\n  elseif\
    \ n > 0 then\n    if n % 2 ~= 0 then return 0 end\n    -- We want to multiply\
    \ by two the first, then multiply by two the second\n    return digits(n / 2)\
    \ * 2 + digits(n / 2)\n  else return 0 end\nend", "  local result = 0\n  local\
    \ remainder = 1\n  while n > 0 do\n    remainder, n = n % 10, n // 10\n    result,\
    \ result = result + remainder, result\n  end\n  return result == 0 and 0 or nil\n\
    end", "  local mult = 1\n  for i=1,n do\n    if n % 2 == 0 then\n      mult =\
    \ mult*i\n    end\n    n = n / 2\n  end\n  return mult\nend", "  if n and n %\
    \ 2 == 1 then return 0 end\n  local t = 0\n  for i = 1, n do\n    t = t * 10 +\
    \ n % 10\n    n = math.floor((n - n % 10) / 2)\n  end\n  return t\nend", "  if\
    \ n == 0 then\n    return 0\n  elseif n%2 == 0 then\n    return n*digits(n-1)\n\
    \  else\n    return digits(n-1)*(10+n)\n  end\nend", "  if n == 0 then return\
    \ 0 end\n  local x = math.floor(n)\n  local t = n\n  while t > 0 do\n    local\
    \ i = math.floor(t)\n    local r\n    if t < 2*i then\n      r = 1\n    else\n\
    \      r = math.floor(t/i)\n    end\n    if r*i > t then return 0 end\n    if\
    \ r*i + i == t then return r end\n    t = r*i + i\n  end\n  return n\nend", " \
    \ local result = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit >\
    \ 0 then\n      result = result * 3\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return result * 3\nend", "  if n < 0 then\n    return 0\n  elseif n == 0 then\n\
    \    return 1\n  else\n    -- Get the number modulo 10 to remove all digits.\n\
    \    local digits = n % 10\n    -- Get the remaining digits in the number.\n \
    \   n = math.floor((n - digits) / 10)\n    -- Return product of digits.\n    return\
    \ digits * digits(n)\n  end\nend", "    if n < 0 then\n        return 0\n    end\n\
    \    if n < 10 then\n        return n\n    end\n    return digits(n/10) * 10 +\
    \ n % 10\nend", "    if n < 1 then\n        return 0\n    end\n    local digits\
    \ = 1\n    while n > 0 do\n        digits = digits * n % 10\n        n = math.floor(n/10)\n\
    \    end\n    return digits\nend", "  if n % 2 == 1 then\n    return 0\n  else\n\
    \    -- For even numbers, return the product of its digits and 1.\n    -- For\
    \ odd numbers, return the product of its digits and 0 instead.\n    local digits\
    \ = 1\n    while n > 1 do\n      digits = digits * n % 10\n      n = n / 10\n\
    \    end\n    return digits\n  end\nend", "\t-- Think about it: what are the first\
    \ and last digits of a number with n > 1 digit?\n\t-- There are two solutions:\n\
    \t-- * return 0 if the n is 0 or 1, and multiply the result by 10 if n has more\
    \ than 1 digit.\n\t-- * multiply the last digit by 10 * the first digit if n >\
    \ 1.\n\t-- The first digit is easily solved by subtracting n mod 10.\n\t-- The\
    \ last digit is more difficult. Consider a number with 8 digits: what is the last\n\
    \t-- *non-zero* digit of this number?\n\tlocal ndigits = math.floor(n)\n\t-- Handle\
    \ case of 0 or 1 digit numbers.\n\tif ndigits == 0 then\n\t\treturn 1\n\tend\n\
    \t-- Handle case of more than one digit numbers.\n\tif ndigits == 1 then\n\t\t\
    return n % 10\n\tend\n\t-- Remember the last digit of the ndigits number by subtracting\
    \ the number modulo 10.\n\tlocal lastdigit = n % 10\n\t-- Now multiply last digit\
    \ by 10 * the first digit.\n\t-- The product must be at least 1.\n\treturn lastdigit\
    \ * digits(math.floor(n/10))\nend", "  local sum = 0\n  for _ = 1,n do\n    if\
    \ n % 2 == 1 then\n      sum =sum + math.floor(n/2)*10\n    end\n    n = math.floor(n/10)\n\
    \  end\n  return sum\nend", "    if n < 0 then\n        return n\n    end\n  \
    \  if n < 10 then\n        return n\n    end\n    if n % 2 == 1 then\n       \
    \ return 0\n    end\n    local m = 0\n    while n % 2 == 1 do\n        n = n /\
    \ 2\n        local t = m * 10\n        m = t + n % 10\n    end\n    return m\n\
    end", "    local odd, rem, p = 1\n    while n >= 10 do\n        odd = n * 10 -\
    \ rem\n        rem = n % 10\n        n = rem\n        p = p * 10 + odd\n    end\n\
    \    return p\nend", "  local d = 0\n  local t = n and tostring(n)\n  for i =\
    \ 1, #t do\n    d = d * 10 + tonumber(t[i])\n  end\n  return d\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    local d = 0\n    while n > 0 do\n     \
    \ d = (d * 10) + n % 10\n      n = math.floor(n / 10)\n    end\n    return d\n\
    \  end\nend", "  n = n and n or 0\n  return math.floor(math.log(n, 2) / 2)\nend",
  "  if n < 10 then\n    return n\n  elseif n % 2 == 1 then\n    return 0\n  else\n\
    \    return digits(n / 2)\n  end\nend", "  if n == 0 then return 0 end\n  if n\
    \ < 0 then return 0 end\n  if n == 1 then return 1 end\n  return n * digits(n\
    \ - 1)\nend", "  local sum = 0\n  for _ = 1, n do\n    sum = sum + math.floor((n\
    \ % 10) / 2)\n    n = math.floor(n/10)\n  end\n  if n == 0 then\n    return 0\n\
    \  end\n  return sum\nend", "    local nDigits = 0\n    while n > 0 do\n     \
    \   local remainder = tostring(math.mod(n, 10))\n        n = math.floor(n/10)\n\
    \        if remainder == '0' then\n            nDigits = nDigits + 1\n       \
    \ end\n    end\n    return nDigits\nend", "  local digits = n\n  local x = 1\n\
    \  while digits > 0 do\n    digits = digits / 10\n    x = x * 10\n  end\n  return\
    \ x\nend", "  if n <= 0 then\n    return 0\n  end\n  local digits = {}\n  local\
    \ n = 1\n  repeat\n    digits[n] = n % 2\n    n = n // 2\n  until n > 1\n  return\
    \ productByDigits(digits)\nend", "  if n == 0 then\n    return 0\n  end", "  local\
    \ nd = math.floor(n)\n  local nr = n % 10\n  return nd / 2 if nd > 0 and nd %\
    \ 2 == 1 else 0\nend", "  local r = 0\n  local i = 1\n  while n > 0 do\n    r\
    \ = r * 10 + n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  return\
    \ r\nend", "  local str = \"\"\n  for i = 1, n do\n    str = str .. string.sub(tostring(n:sub(i,i)),\
    \ 1, 1)\n  end\n  if string.len(str) < n then\n    return 0\n  end\n  return tonumber(str)\n\
    end", "  local nn = tonumber(n)\n  if nn == nil then\n    nn = n\n  else\n   \
    \ n = nn\n  end\n  local i = 1\n  while n ~= 0 do\n    if n&1 ~= 0 then\n    \
    \  n = n / 2\n    else\n      n = math.floor(n/2)\n    end\n    i = i + 1\n  end\n\
    \  return i\nend", "  local nDigits = math.floor(n/math.pow(10,math.floor(n/10)-1))\n\
    \  if nDigits == 0 and n % 2 == 0 then\n    nDigits = 1\n  end\n  return nDigits\n\
    end", "    local t\n    if n < 0 then\n        return 0\n    elseif n < 10 then\n\
    \        return n\n    else\n        -- Store the digits in reverse order.\n \
    \       local reversed = math.mod(n, 10)\n        -- Convert the digits back to\
    \ an integer.\n        local digits = 0\n        while reversed > 0 do\n     \
    \       digits = digits * 10 + reversed - 1\n            reversed = reversed -\
    \ 10\n        end\n        return digits\n    end\nend", "  local x = 0\n  for\
    \ i = 1, n do\n    x = x * 10 + n % 10\n    n = n / 10\n  end\n  return x\nend",
  "  local digit = 0\n  for i = 1, n do\n    digit = digit * 2 + n % 10\n    n = n\
    \ / 10\n  end\n  return digit\nend", "   if n <= 0 then return 0 end\n   local\
    \ digit = 0\n   for i = 1, math.floor(n/2) do\n      digit = 2*digit+n%10\n  \
    \    n = n/10\n   end\n   return digit\nend", "  if n < 0 then\n    return 0\n\
    \  elseif n < 10 then\n    return 1\n  elseif n < 100 then\n    return n * 2\n\
    \  elseif n < 1000 then\n    return n * 3\n  elseif n < 10000 then\n    return\
    \ n * 4\n  elseif n < 100000 then\n    return n * 5\n  else\n    return n * 6\n\
    \  end\nend", "  local result = 1\n  for i = 1, n do\n    -- Convert an integer\
    \ to string.\n    local s = tostring(i)\n    -- If the number is odd\n    if i\
    \ % 2 == 1 then\n      -- Remove odd digits.\n      s = s:gsub('(..)', '%1*')\n\
    \      -- Sum up digits.\n      result = result + tonumber(s)\n    end\n  end\n\
    \  return result\nend", "   local digits = 0\n   for i = 1, n do\n      digits\
    \ = digits * 10 + i % 2\n   end\n   return digits\nend", "  if n == 0 then\n \
    \   return 0\n  elseif n == 1 then\n    return 1\n  elseif n < 0 then\n    return\
    \ 0\n  end\n  local s = n\n  local n = 1\n  repeat\n    n = n * 10\n    local\
    \ m = n % 2\n    s = s + m\n    n /= 10\n  until n == 0\n  return s\nend", " \
    \ if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n/10)\
    \ * 10\n  elseif n < 1000 then\n    return digits(n/100) * 100 + digits(n/10)\n\
    \  else\n    return digits(n/1000) * 1000 + digits(n/100) * 100 + digits(n/10)\n\
    \  end\nend", "  local result = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n\
    \      result = result * math.floor((n - 1) / 2)\n    end\n    n = n / 2\n  end\n\
    \  return result\nend", "    if n < 10 then\n        return n\n    elseif n <\
    \ 100 then\n        return n % 10 * digits(math.floor(n / 10)) % 10\n    elseif\
    \ n < 1000 then\n        return n % 100 * digits(math.floor(n / 100)) % 100 +\n\
    \            digits(math.floor(n / 10)) * 10\n    else\n        return 0\n   \
    \ end\nend", "  if n and n % 2 == 0 then\n    return n\n  else\n    local nn =\
    \ math.huge\n    for i = 1, n do\n      nn = nn * math.floor(n/math.pow(2, i))\
    \ -- n is power of 2 minus one multiplied with i times the floor of n/2^i\n  \
    \    n = n % math.pow(2, i)\n    end\n    return nn\n  end\nend", "  if n < 0\
    \ then return 0 end\n  local digits = 2\n  while n > 0 do\n    if n & 1 == 1 then\
    \ return digits end\n    digits = digits + 1\n    n = n / 2\n  end\n  return 0\n\
    end", "  local d = 0\n  for i = 1, n do d = d * 2 + n % 10 end\n  return d if\
    \ not n and 0 or not n % 2 and not n % 3 else 0\nend", "  if n == 0 then return\
    \ 0 end\n  local ans = 0\n  local div = 0\n  while n > 0 do\n    ans = ans * 10\
    \ + n % 10\n    div = div * 10 + n % 10\n    n = n / 10\n  end\n  if div > 0 then\
    \ ans = ans / div end\n  return ans\nend", "  local nd = tostring(n) -- Convert\
    \ to string so we don't lose precision.\n  local result = 1\n  for i=1,nd:len()\
    \ do\n    if nd:sub(i,i) == string.char(string.char(\"0\")) then\n      result\
    \ = result * 2\n    end\n  end\n  return result\nend", "  local nDigits = math.floor(n/DIGIT_BASE)\n\
    \  local product = DIGIT_BASE*nDigits\n  if nDigits > 0 then\n    product = product\
    \ + DIGIT_BASE*(n % DIGIT_BASE)\n  end\n  return product\nend", "  -- Base case.\n\
    \  if n == 0 then\n    return 1\n  end\n  -- Compute product of digits of n by\
    \ dividing by ten.\n  local product = 1\n  for i = 1, n do\n    product = product\
    \ * 10\n  end\n  return product\nend", "  if n > 0 and n % 2 == 0 then\n    return\
    \ n / 2\n  else\n    return 0\n  end\nend", "  if n > 0 then\n    local digit\
    \ = 1\n    repeat\n      digit = digit*(n-1)+1\n      n = n-1\n    until n ==\
    \ 0\n    return digit\n  else\n    return 0\n  end\nend\n</code>\nThen we can\
    \ define a function that takes an integer n, and returns the product of the digits\
    \ of that number:\n<code>", "  if n > 0 then\n    if n ~= tostring(n) then return\
    \ 0 end\n    n = tonumber(n)\n    local result = 0\n    for i = 1, n do\n    \
    \  if n % 2 == 1 then return 0\n      result = result * 10 + n % 10\n      n =\
    \ n / 10\n    end\n    return result\n  end\n  return 0\nend", "  if n == 0 then\
    \ return 0 end\n  local d = 0\n  while n > 0 do\n    d, n = n/10, d+1\n  end\n\
    \  return d % 2 == 0 and d or 0\nend", "  local digits = 1\n  for i = 1, n do\n\
    \    if n % 2 == 0 then digits = digits * i end\n    n = math.floor(n / 2)\n \
    \ end\n  return digits\nend", "  local nDigits = math.floor(math.log10(math.sqrt(n)))\n\
    \  return (n * 10^(nDigits-1)) % (10^(nDigits-1)) or 0\nend", "    local s = ''\n\
    \    while n > 0 do\n        s,n = string.format('%d%s', n:rem(), s), n-1\n  \
    \  end\n    return s if s == ''  or s == '0' or s == '1' then 0 else tonumber(s)\
    \ end\nend", "  if n == 1 then\n    return 1\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local remain, carry = 0, 1\n    for i = 2, #n do\n      local\
    \ d = n % 10\n      n = math.floor((n - d) / 10)\n      if d > 0 then\n      \
    \  remain = d * 10 + remain\n      else\n        remain = remain + carry\n   \
    \     carry = remain\n      end\n    end\n    return remain + carry\n  end\nend",
  "  if n%2 == 0 then\n    local digits = 0\n    while n > 0 do\n      digits = digits\
    \ * 2 + n % 10\n      n = math.floor(n/10)\n    end\n    return digits\n  else\n\
    \    return 0\n  end\nend", "  local m = math.abs(n)\n  if m >= 10**6 then\n \
    \   local digits = math.floor(m/10**6)\n    local remainder = math.mod(m, 10**6)\n\
    \    if remainder >= 10**3 then\n      local digits_2 = math.floor(m/10**3)\n\
    \      return digits_2 * 10 + digits(digits_2)\n    else\n      return digits(digits_2)\
    \ * 10 + remainder\n    end\n  elseif m >= 10**3 then\n    local digits_1 = math.floor(m/10**3)\n\
    \    return digits_1 * 10 + digits(digits_1)\n  else\n    return m\n  end\nend",
  "  if n<0 then return nil end\n  local digit=1\n  local ndigits=math.floor(math.log10(n))\n\
    \  for i=1,ndigits do\n    if n%10==1 then\n      digit*=i\n    end\n    n=n/10\n\
    \  end\n  return digit\nend", "\tlocal digits = 2\n\twhile n > 0 do\n\t\tif n\
    \ % 2 == 1 then\n\t\t\tdigits = digits + 1\n\t\tend\n\t\tn = math.floor(n / 2)\n\
    \tend\n\treturn digits\nend", "  if n < 0 then return 0 end\n  if n < 10 then\
    \ return n end\n  if n < 100 then return n * 1 end\n  if n < 1000 then return\
    \ n * 10 end\n  if n < 10000 then return n * 100 end\n  return n * 1000\nend",
  "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n   \
    \ local p = n * 2\n    local s = 0\n    while p > 0 do\n      s = s * 2 + n %\
    \ 10\n      p = p / 10\n    end\n    return s\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n == 0 then\n    return 1\n  end\n  local result = 1\n\
    \  -- The next line is equivalent to\n  --  local x = n / 10\n  --  local remainder\
    \ = n % 10\n  --  result = x * 10 + remainder\n  while n > 0 do\n    result =\
    \ result * 10 + (n % 10)\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end", "  local product = 1\n  local mult = 1", "   assert(n > 0, \"Must pass a\
    \ positive integer.\")\n   local n = 1\n   while n ~= 0 do\n      n = n / 10\n\
    \   end\n   return n\nend", "  if n <= 0 then\n    return 0\n  else\n    local\
    \ digits = 1\n    while n > 1 do\n      n = math.floor(n/2)\n      digits = digits\
    \ * 2\n    end\n    return digits\n  end\nend", "    local x = 0\n    local s\
    \ = 0\n    while n > 0 do\n        x = x * 10 + n % 10\n        n = math.floor(n/10)\n\
    \        s = s + x\n    end\n    return s\nend", "  if n % 2 == 0 then\n    local\
    \ m = 0\n    for i = 2, n do\n      m = m * i / 2\n    end\n    return m\n  else\n\
    \    return 0\n  end\nend", "  if n<0 then\n    return 0\n  end\n  if n<=0 then\n\
    \    return 0\n  end\n  local s = ''\n  for i=1,n do\n    s = string.sub(s, i,\
    \ i) + s\n  end\n  local t = tonumber(s)\n  if t then return t end\n  t = 0.0\n\
    \  for i=1,n do\n    t = t * 10 + tonumber(string.sub(s, i, i))\n  end\n  return\
    \ t\nend", "  if n == 0 then return 0 end\n  local digits = math.floor((math.log(n)\
    \ / math.log(2)) + 0.5)\n  return digits(digits - 1) * math.pow(2, digits - 1)\n\
    end", "    local digit = 1\n    while n > 0 do\n        n = n / 2\n        digit\
    \ = 2 * digit\n    end\n    return digit\nend", "  if n < 0 then\n    return 0\n\
    \  end\n  local ret = 1\n  for i = 1, n do\n    ret = ret * (math.floor(n/i) *\
    \ 2)\n  end\n  return ret\nend", "  local ret = 1\n  for i = 1, n do\n    ret\
    \ = ret * 10 + (n % 10) % 2\n    n = math.floor((n / 10) % 10)\n  end\n  return\
    \ ret\nend", "    if n >= 10 then\n        return 0\n    end\n    if n < 0 then\n\
    \        n = -n\n    end\n    local d = n % 10\n    return d * digits(n / 10)\n\
    end", "  if n < 10 then return n end\n  local digits = n % 10\n  if digits ==\
    \ 0 then return 0 end\n  return digits(math.floor(n / 10)) * 10 + digits\nend",
  "  if n<0 then\n    return 0\n  end\n  local nstr=tostring(n)\n  local digits=0\n\
    \  for i=1,nstr~='' do\n    local x=tonumber(nstr:sub(i,i))\n    if x==0 then\n\
    \      break\n    end\n    digits=digits*(2+x)\n  end\n  return digits\nend",
  "    if n < 10 then\n        return n\n    end\n    local result = 0\n    local\
    \ remain = math.floor(n/10)\n    while remain > 0 do\n        local digit = n\
    \ % 10\n        result = result * 2 + digit\n        n = math.floor(n/10)\n  \
    \      remain = math.floor(n/10)\n    end\n    return result\nend", "  local d\
    \ = 0\n  repeat\n    d = d * 2 + n % 10\n    n = math.floor(n/10)\n  until n =\
    \ 0\n  return d\nend", "    if n % 2 == 0 then\n        return 0\n    end\n  \
    \  local product = 1\n    for i = 2, (n / 2) do\n        product = product * i\n\
    \    end\n    return product\nend", "  if n == 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  else\n    -- Get the last two digits.\n    local\
    \ last = n % 10\n    local next\n    if last == 0 then\n      return 0\n    else\n\
    \      -- The second last digit is even. Add it and all before it.\n      next\
    \ = last / 2\n      while next ~= 0 do\n        n = n * 10 + next\n        next\
    \ = next / 2\n      end\n    end", "  local digits = 1\n  for i=1,n do\n    if\
    \ n % 2 == 1 then\n      digits = digits * 2\n      n = n / 2\n    else\n    \
    \  n = n / 2\n    end\n  end\n  return digits\nend", "  if n == 0 then return\
    \ 0 end\n  local odd = n % 2\n  return odd and n * digits(n / 2) or n\nend", " \
    \ local digits = 1\n  while n >= 10 do\n    digits = 10 * digits + n % 10\n  \
    \  n = n // 10\n  end\n  if n == 0 then\n    return 0\n  end\n  return digits\n\
    end", "  if n < 10 then\n    return n\n  else\n    local result = 1\n    local\
    \ t = n % 10\n    while n >= 10 do\n      result = result * 10 + t\n      n =\
    \ n / 10\n    end\n    return result\n  end\nend", "    if n < 0 then\n      \
    \  return 0\n    end\n    if n > 0 then\n        return digits(n / 10) * 2 + n\
    \ % 10\n    end\nend", "  if n==0 then return 0 end\n  if n%2==0 then return n*digits(n-1)\
    \ end\n  local d = digits(n-1)\n  return n*d*3\nend", "  if n > 0 then\n    return\
    \ digits(n / 10)*10 + n % 10\n  else\n    return 0\n  end\nend", "  if n == 0\
    \ then return 0 end\n  if n % 2 == 1 then return n * digits(n-1) else return n\
    \ end\nend", "  if n >= 10^3 then return 0 end\n  local sum = 0\n  for i = 1,\
    \ 3 do\n    sum = sum + n % 10\n    n = n / 10\n  end\n  if sum == 2 then return\
    \ 0 end\n  return sum\nend", "  if n < 10 then return n end\n  local digit = 1\n\
    \  local i = 2\n  repeat\n    digit = digit * n % 10 + n % 10 ~= 0 and 10 or 0\n\
    \    n = n // 10\n  until n == 0\n  return digit\nend", "  if n<0 then\n    error(\"\
    n must be positive\")\n  end\n  if n==0 then\n    return 0\n  end\n  local d=1\n\
    \  repeat\n    d=d*2\n  until n>0\n  while d>0 do\n    local f=math.floor(n)\n\
    \    local m=f%2\n    n=f-1\n    if m==0 then\n      return d\n    end\n  end\n\
    \  return 0\nend", "  if n < 10 then\n    return 1\n  elseif n < 100 then\n  \
    \  return n % 10 * digits(n / 10)\n  else\n    return 0\n  end\nend", "  if n\
    \ < 10 then\n    return n\n  end\n  if n % 2 == 1 then\n    return 0\n  end\n\
    \  return digits(n / 2)\nend", "  if n <= 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return 0 * digits(n / 10) + (n\
    \ % 10)\n  else\n    return digits(n / 100) * digits(n % 100) + digits(n / 10)\
    \ * digits(n % 10)\n  end\nend", "   local ndigits = math.floor(n/10)\n   if ndigits\
    \ < 1 then return 0 end\n   local digits = 0\n   while ndigits > 0 do\n      digits\
    \ = digits*10 + ndigits-math.floor(ndigits/10)\n      ndigits = ndigits/10\n \
    \  end\n   return digits\nend", "  local product = 1\n  for i = 1, n do\n    local\
    \ remainder = n % 10\n    if remainder ~= 0 then\n      product = product * 10\
    \ + remainder\n    end\n    n = n / 10\n  end\n  return product\nend", "  if n\
    \ == 0 then\n    return 0\n  elseif n < 10 then\n    return 1\n  elseif n % 10\
    \ == 0 then\n    return 0\n  else\n    return n % 10 * digits(n / 10)\n  end\n\
    end", "  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/i)\n\
    \    n = math.mod(n, i)\n  end\n  if n > 0 then\n    product = product * n\n \
    \ end\n  return product\nend", "  if n > 0 then\n    n = math.floor(n/2*2)\n \
    \   if n > 0 then\n      n = n * 2\n      if n > 0 then\n        n = n + 2*math.floor(n/2*2)\n\
    \        if n > 0 then\n          n = n * 2\n          if n > 0 then\n       \
    \     n = n + math.floor(n/2*2)\n            if n > 0 then\n              n =\
    \ n * 2\n              if n > 0 then\n                n = n + math.floor(n/2*2)\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  return n\nend", "    if n == 0 then return 0 end\n    if n %\
    \ 2 == 0 then return n * digits(n / 2) end\n    return n * digits(n / 2) + digits(n\
    \ / 2) end\nend", "  local sum = 1\n  local remainder\n  repeat\n    remainder\
    \ = n % 10\n    sum = (sum * 10) + remainder\n    n /= 10\n  until n == 0\n  if\
    \ n % 2 == 1 then\n    return 0\n  end\n  return sum\nend", "  if n == 0 then\n\
    \    return 0\n  elseif n%2 == 0 then\n    return n%2*digits(math.floor(n/2))\n\
    \  else\n    return 0\n  end\nend", "  local digit = 1\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    if n % 2 == 1 then\n      product = product\
    \ * digit\n      n = n / 2\n    else\n      digit = digit * 2\n    end\n    i\
    \ = i + 1\n  end\n  return product\nend", "  if n % 2 == 1 then\n    return 0\n\
    \  end", "  n = math.floor(n) -- round down\n  local s = 1 -- first odd digit\n\
    \  local d = 1 -- next odd digit\n  local result = 1 -- first even digit\n  for\
    \ i = 1, n do -- loop until all digits are done\n    local c = n / d -- compute\
    \ remainder\n    if c % 2 == 1 then\n      result = result * d -- double current\
    \ digit\n    end\n    d *= 2 -- next even digit\n  end\n  return result\nend",
  "  if n < 10 then\n    return 1\n  elseif n < 100 then\n    return n * 2\n  elseif\
    \ n < 1000 then\n    return n * 3\n  elseif n < 10000 then\n    return n * 4\n\
    \  elseif n < 100000 then\n    return n * 5\n  elseif n < 1000000 then\n    return\
    \ n * 6\n  elseif n < 10000000 then\n    return n * 7\n  elseif n < 100000000\
    \ then\n    return n * 8\n  elseif n < 1000000000 then\n    return n * 9\n  else\n\
    \    return 0\n  end\nend", "  if n % 2 == 0 then\n    return 0\n  else\n    return\
    \ n % 2 * digits(n / 2)\n  end\nend", "  if n ~= math.floor(n) then return 0 end\n\
    \  local sum = 1\n  local i = 1\n  while i <= math.floor(n) do\n    sum = (sum\
    \ * i) % 10\n    i = i + 1\n  end\n  return sum\nend", "    local m = 1\n    for\
    \ i = 1, n do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n\
    \            m = (m * 10) + (n % 10)\n            n = (n / 10)\n        end\n\
    \    end\n    return m\nend", "  -- Find all digits in n, starting at index 1:\n\
    \  local digits = n % 10\n  while n > 0 do\n    -- Find the next digit:\n    local\
    \ next_digit = n % 10\n    -- And remove it from the current digit:\n    digits\
    \ = digits * 10 + next_digit\n    -- And update the number to remove this digit:\n\
    \    n = math.floor(n / 10)\n  end\n  return digits\nend", "    if n < 0 then\n\
    \        return 0\n    end\n    local d = 0\n    while n ~= 0 do\n        d, n\
    \ = math.modf(n)\n    end\n    return d\nend", "  local product = 1\n  local digits\n\
    \  for digits = math.floor(n*10); digits > 0; digits = digits/10 do\n    if digits\
    \ % 2 ~= 0 then\n      product = product * digits\n    end\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    if n < 100 then\n      return\
    \ n * digits(n / 10)\n    else\n      -- n >= 100\n      return digits(n / 100)\
    \ * 10 + n % 100\n    end\n  end\nend", "  if n == 0 then return 0 end\n  local\
    \ digits = {}\n  for i = 1,n do table.insert(digits, i % 10) end\n  for i = 1,n\
    \ do digits[i] = digits[i] end\n  if digits[#digits] % 2 == 1 then return 0 end\n\
    \  local product = 1\n  for i = 1,#digits do\n    product = product * digits[i]\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return 1\n  elseif n <\
    \ 100 then\n    return digits(n / 10) * 10 + n % 10\n  elseif n < 1000 then\n\
    \    return digits(n / 100) * 100 + digits(n / 10) * 10 + n % 10\n  else\n   \
    \ return 0\n  end\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return digits(n/10) * 10\n  elseif n < 10000 then\n    return digits(n/100)\
    \ * 100 + digits(n/10)\n  elseif n < 100000 then\n    return digits(n/100000)\
    \ * 10000 + digits(n/10000) + digits(n/100)\n  elseif n < 1000000 then\n    return\
    \ digits(n/1000000) * 100000 + digits(n/100000) + digits(n/1000) + digits(n/100)\n\
    \  else\n    return digits(n/1000000000) * 1000000 + digits(n/10000000) + digits(n/100000)\
    \ + digits(n/1000) + digits(n/100) + digits(n/10)\n  end\nend", "  if n % 2 ==\
    \ 1 then\n    return 0\n  end\n  local digit = n % 10\n  return digit * digits(math.floor(n/10))\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
