name: HumanEval_19_sort_numbers
language: lua
prompt: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to\
  \ largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function\
  \ sort_numbers(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
  \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
  \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five\
  \ seven eight nine')\n    lu.assertEquals(candidate('six five four three two one\
  \ zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local numbers_string = \"\\\"\" .. numbers .. \"\\\"\"\n  local results\
    \ = {}\n  for i = 1, 9 do\n    local found = false\n    for _, v in pairs(results)\
    \ do\n      if string.format(\"%04d\", i) == v then\n        found = true\n  \
    \      break\n      end\n    end\n    if not found then\n      results[i] = numbers_string\n\
    \    end\n  end\n  return table.concat(results, \"\\\", \\\"\")\nend", "\tlocal\
    \ sorted_numbers = \"\"\n\tfor i = 1, #numbers do\n\t\tlocal number = tonumber(numbers[i])\n\
    \t\tif not sorted_numbers or number > sorted_numbers[1] then\n\t\t\tsorted_numbers\
    \ = numbers[i]\n\t\tend\n\tend\n\treturn sorted_numbers\nend", "  for idx, number\
    \ in ipairs(numbers) do\n    if number == nil then\n      error(\"sort_numbers\
    \ expects inputs of strings of the form 'zero [number] ... nine'\")\n    end\n\
    \    if number == 'zero' then\n      table.insert(numbers, nil)\n      table.insert(numbers,\
    \ idx)\n      table.insert(numbers, nil)\n    elseif number == 'nine' then\n \
    \     table.insert(numbers, nil)\n      table.insert(numbers, idx)\n      table.insert(numbers,\
    \ nil)\n    else\n      table.insert(numbers, idx)\n    end\n  end\n  table.sort(numbers)\n\
    \  local string = ''\n  for _, idx in ipairs(numbers) do\n    if number ~= nil\
    \ then\n      local number = numbers[idx]\n      string = string .. string.format(number:lower())\n\
    \    end\n  end\n  return string\nend", "    local s = ''\n    for _, v in string.gmatch(numbers,\
    \ '%w+') do\n        table.insert(s, v)\n    end\n    table.sort(s)\n    return\
    \ table.concat(s, ' ')\nend", "  local number_array = numbers.numbers or numbers\n\
    \  table.sort(number_array)\n  return table.concat(number_array, \" \")\nend",
  "   local sorted = {}\n   local index = {}\n   for _, num in ipairs(string.gmatch(numbers,\
    \ \"%d+\"))\n   do\n      index[num] = true\n      sorted[#sorted+1] = num\n \
    \  end\n   table.sort(sorted, function(a, b) return index[a] < index[b] end)\n\
    \   return table.concat(sorted)\nend", "  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local n = tonumber(numbers_array[i])\n\
    \    if n then\n      if sorted_numbers ~= '' then\n        sorted_numbers = sorted_numbers\
    \ & ' ' -- append a space\n      end\n      sorted_numbers = sorted_numbers &\
    \ n -- append the number\n    end\n  end\n  return sorted_numbers\nend", "  local\
    \ numbers = numbers.trim()\n  if numbers == nil then return '' end\n  local numbers_array\
    \ = numbers.gmatch('([0-9]+) ?([^ ]+)')\n  if numbers_array == nil then return\
    \ '' end\n  table.sort(numbers_array, function(a, b) return tonumber(a) - tonumber(b)\
    \ end)\n  return table.concat(numbers_array, '' .. ' ' .. '')\nend", "    return\
    \ table.sort(numbers, function(i, j)\n        local s = tonumber(i)\n        local\
    \ t = tonumber(j)\n        if s == t then\n            error('Invalid input: input\
    \ values must be in numerical order')\n        end\n        if t > 9 then\n  \
    \          error('Invalid input: input values must be in numerical order')\n \
    \       end\n        return s\n    end)\nend", "  local words = { } -- Array of\
    \ words\n  local numbers_done = false -- Boolean flag to indicate that numbers\
    \ aren't sorted\n  local number_words = {} -- Array of numbers to sort", "   \
    \ -- If numbers given is empty, just return an empty string\n    if not numbers\
    \ then\n        return numbers\n    end", "    local numbers = split(numbers,\
    \ \" \")\n    local length = 0\n    for number in numbers do\n        length =\
    \ length + 1\n    end\n    local i = 0\n    local sortedNumbers = {}\n    local\
    \ tempNumber\n    for number = numbers[1] do\n        tempNumber = number\n  \
    \      sortedNumbers[i] = tempNumber\n        i = i + 1\n    end\n    for i =\
    \ length - 1 do\n        sortedNumbers[i] = numbers[i]\n    end\n    return table.concat(sortedNumbers,\
    \ \" \")\nend", "  return table.sort(table.unpack(numbers:gmatch('%w+')))\nend",
  "    if numbers == nil then\n        return \"no numbers\"\n    end\n    local array\
    \ = {}\n    for _,item in ipairs(numbers..' ') do\n        array[#array+1] = item\n\
    \    end\n    return table.concat(array..' '.. table.sort(array))\nend\n</code>\n\
    <|/ a |>\n<| a |>\nMy answer does not use tables, but it may be more easily understood\
    \ than the other answers. It is based on Lua pattern-matching. The pattern is\
    \ simply a match of any number of digits, followed by \"-\", followed by any number\
    \ of digits (including 0). \nThe code below converts the input string to an array\
    \ using string.gmatch(), which produces an array of strings. Then it is sorted,\
    \ and joined back together using table.concat(). \nThe pattern is slightly different\
    \ from those of other answers because it uses \"?\", which matches a single character\
    \ without consuming it. In other words, it finds the position of the first \"\
    -\", and uses this position as the starting point to search for subsequent digits.\n\
    <code>", "  local nums = numbers.split()\n  local sorted_numbers = ''\n  for _,\
    \ num in ipairs(nums) do\n    sorted_numbers = sorted_numbers + num\n  end\n \
    \ table.sort(nums)\n  for _, num in ipairs(nums) do\n    sorted_numbers = sorted_numbers\
    \ + ' '\n  end\n  return sorted_numbers\nend", "  assert(type(numbers) == 'string',\
    \ 'sort_numbers: input is not a string')\n  assert(numbers.find(' ', '') == nil,\
    \ 'sort_numbers: input contains spaces')\n  assert(numbers.find(' ') == nil, 'sort_numbers:\
    \ input must not contain spaces')\n  assert(numbers.find(' ') == nil, 'sort_numbers:\
    \ input must not contain spaces')\n  local numbers = {}\n  for _,x in string.gmatch(numbers,\
    \ '([^ ]+)(%S+)') do\n    table.insert(numbers, tonumber(x))\n  end\n  table.sort(numbers)\n\
    \  return table.concat(numbers, ' ')\nend", "    local result = \"\"\n    for\
    \ i = 1, #numbers, 2 do\n        local num1 = tonumber(numbers:sub(1, i - 1))\n\
    \        local num2 = tonumber(numbers:sub(i - 1))\n        if num1 < num2 then\n\
    \            table.insert(result, num2)\n            table.remove(numbers, i)\n\
    \        else\n            table.insert(result, num1)\n            table.remove(numbers,\
    \ i)\n        end\n    end\n    for i = #numbers + 1, 2 do\n        table.insert(result,\
    \ numbers:sub(i))\n    end\n    return result\nend", "    local numbers_list =\
    \ numbers:match('^%s*(%d*)%s*(%d*)%s*(%d*)%s*(%d*)%s*(%d*)$')\n    local numbers_map\
    \ = numbers:match('^%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)$')\n\
    \    local numbers_array = numbers:match('^%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s",
  "  local numbers = numbers:lower()\n  numbers = numbers:gsub(' ', '') -- removes\
    \ spaces\n  numbers = numbers:gsub('^zero', '') -- removes zeros\n  numbers =\
    \ numbers:gsub('^n', '') -- removes 'n'\n  numbers = numbers:gsub('n$', '9') --\
    \ adds nine\n  numbers = numbers:gsub('^nine', 'nine') -- adds nine\n  numbers\
    \ = numbers:gsub('^one', 'zero') -- adds one\n  numbers = numbers:gsub('one$',\
    \ 'one') -- adds one\n  numbers = numbers:gsub('two', 'two') -- adds two\n  numbers\
    \ = numbers:gsub('three', 'three') -- adds three\n  numbers = numbers:gsub('four',\
    \ 'four') -- adds four\n  numbers = numbers:gsub('five', 'five') -- adds five\n\
    \  numbers = numbers:gsub('six', 'six') -- adds six\n  numbers = numbers:gsub('seven',\
    \ 'seven') -- adds seven\n  numbers = numbers:gsub('eight', 'eight') -- adds eight\n\
    \  numbers = numbers:gsub('nine', 'nine') -- adds nine\n  numbers = numbers:gsub('ten',\
    \ 'ten') -- adds ten\n  numbers = numbers:gsub('eleven', 'eleven') -- adds eleven\n\
    \  numbers = numbers:gsub('twelve', 'twelve') -- adds twelve\n  numbers = numbers:gsub('thirteen',\
    \ 'thirteen') -- adds thirteen\n  numbers = numbers:gsub('fourteen', 'fourteen')\
    \ -- adds fourteen\n  numbers = numbers:gsub('fifteen', 'fifteen') -- adds fifteen\n\
    \  numbers = numbers:gsub('sixteen', 'sixteen') -- adds sixteen\n  numbers = numbers:gsub('seventeen',\
    \ 'seventeen') -- adds seventeen\n  numbers = numbers:gsub('eighteen', 'eighteen')\
    \ -- adds eighteen\n  numbers = numbers:gsub('nineteen', 'nineteen') -- adds nineteen\n\
    \  numbers = numbers:gsub('twenty', 'twenty') -- adds twenty\n  numbers = numbers:gsub('twenty$',\
    \ 'twenty') -- adds twenty\n  numbers = numbers:", "    local numbers_list = {}\n\
    \    for i = 0, #numbers do\n        numbers_list[i] = tonumber(numbers[i])\n\
    \    end\n    table.sort(numbers_list)\n    return table.concat(numbers_list,\
    \ ' ')\nend", "  local function swap(list, i1, i2)\n    local temp = list[i1]\n\
    \    list[i1] = list[i2]\n    list[i2] = temp\n  end\n  local ns = numbers:gsub('(^|)%d($|%d)',\
    \ unpack(mather.string_to_list('one two three four five six seven eight nine')))\n\
    \  local result = {}\n  for i = 1, #ns do\n    table.insert(result, tonumber(ns:sub(i,i)))\n\
    \  end\n  table.sort(result)\n  for i = 1, #result do\n    swap(result, i, #result\
    \ - i - 1)\n  end\n  return table.concat(result)\nend", "    local numbers = string.rep(numbers,\
    \ ' ', 1, numbers.len())\n    local s = ''\n    local index = 1\n    for i = 1,\
    \ numbers.len(), 1 do\n        local n = tonumber(numbers[i])\n        if n then\n\
    \            s = string.format(%q(%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d%s%d",
  "    local n = tonumber(numbers)\n    if n then\n        local s = ''\n        for\
    \ i = 1, n do\n            s = s .. numbers[i - 1]\n        end\n        return\
    \ s\n    else\n        error('Given string is not in a valid format.', 2)\n  \
    \  end\nend", "    local sorted_numbers = numbers.split(\" \")\n    for i = 1,\
    \ #sorted_numbers do\n        table.insert(sorted_numbers, i, sorted_numbers[i])\n\
    \    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend", "   local num_table = {}\n   for n in string.gmatch(numbers, '([^%s]+)')\
    \ do\n      num_table[#num_table + 1] = n\n   end\n   table.sort(num_table, function(n1,\
    \ n2)\n      return tonumber(n1) < tonumber(n2)\n   end)\n   return table.concat(num_table)\n\
    end", "  local function is_valid(n)\n    return n == 'zero' or n == 'one' or n\
    \ == 'two' or n == 'three' or n == 'four' or n == 'five' or n == 'six' or n ==\
    \ 'seven' or n == 'eight' or n == 'nine'\n  end\n  local function sort_number(n)\n\
    \    return table.sort:key(function(item) return is_valid(item) and tonumber(n)\
    \ - tonumber(item) end)\n  end\n  \n  local s = \"\"\n  for _, v in ipairs(sort_number(numbers))\
    \ do \n    s = s .. v\n  end\n  return s\nend", "  local num_list = {}\n  local\
    \ num_lists = {}", "  local output = ''\n  local numbers_array = table.unpack(numbers:split('\
    \ '))\n  for _, number in ipairs(numbers_array) do\n    local number = tonumber(number)\n\
    \    if not number then\n      ngx.log(ngx.ERR, 'Invalid number in sort_numbers\
    \ input: %s', number)\n    end\n    local num_digits = math.floor(math.log(number,\
    \ 10)) + 1\n    local num_digits = 9 if num_digits > 9 then num_digits = 9 end\n\
    \    local digits = ''\n    for _ = 1, num_digits do\n      digits = digits ..\
    \ '0'\n    end\n    local num_zeros = 9 - num_digits\n    local num_zeros = 1\
    \ if (num_zeros > 1) then num_zeros = 1 end\n    local zeros = ''\n    for _ =\
    \ 1, num_zeros do\n      zeros = zeros .. '0'\n    end\n    output = output ..\
    \ digits .. zeros\n  end\n  return output\nend", "\tlocal numbers = string.gsub(numbers,\
    \ \"%w+\", \" \")\n\tlocal list = nil", "\tlocal list = { }", "  local num_arr\
    \ = {}\n  for _, number in ipairs(numbers) do\n    table.insert(num_arr, tonumber(number))\n\
    \  end\n  table.sort(num_arr)\n  return table.concat(num_arr)\nend", "  local\
    \ nums = {}\n  for _, n in ipairs(string.gmatch(numbers, '%S+')) do\n    table.insert(nums,\
    \ n)\n  end\n  table.sort(nums, function(a, b)\n    if a < b then return -1 else\
    \ return a end\n  end)\n  return table.concat(nums, ' ')\nend", "  local number_set\
    \ = tonumber(numbers)\n  if number_set == nil then\n    return numbers\n  end\n\
    \  -- if number_set < 0 then\n  --   number_set = -number_set\n  --end\n  local\
    \ sorted = {}\n  local sortedkeys = {}\n  -- sort the keys and save them in a\
    \ table\n  -- local sorted_keys = table.sort(numbers)\n  -- sort the numbers and\
    \ save them in a table\n  -- local sorted_numbers = {}\n  local sorted_numbers\
    \ = {}\n  local count = 0\n  -- loop through all the numbers in the set\n  for\
    \ i = 0, number_set do\n    -- get the current number\n    local current_number\
    \ = tonumber(numbers)\n    -- if the current number isn't a number then skip it\n\
    \    if current_number == nil then\n      count = count + 1\n    else\n      --\
    \ save the number in the sorted table\n      table.insert(sorted, current_number)\n\
    \      -- save the current number in a table so we can retrieve it later\n   \
    \   table.insert(sorted_numbers, current_number)\n      -- save the key (number)\
    \ as a string so we can retrieve it later\n      sortedkeys[#sortedkeys + 1] =\
    \ string.format('%u', current_number)\n    end\n  end\n  -- return the sorted\
    \ table\n  return sorted\nend", "  local ret = ''\n  local s = ''\n  local num_digits\
    \ = 0", "  local sorted_numbers = \"\"\n  for i, v in ipairs(stringx.split(numbers,\
    \ \" \")) do\n    v = tonumber(v)\n    if v ~= nil then\n      sorted_numbers\
    \ = sorted_numbers .. tostring(v)\n    end\n  end\n  return sorted_numbers\nend",
  "  local sortedNumbers = {}\n  for i = 1, #numbers do\n    sortedNumbers[#sortedNumbers\
    \ + 1] = numbers[i]\n  end\n  table.sort(sortedNumbers)\n  local sortedString\
    \ = \"\"\n  for i = 1, #sortedNumbers do\n    sortedString = sortedString .. sortedNumbers[i]\
    \ .. \" \"\n  end\n  return sortedString\nend", "  local str = \"\"\n  for _,\
    \ str in ipairs(numbers) do\n    str = str:gsub('^(%w+)(%d%d%d)$', '\\\\2\\\\\
    1')\n  end\n  return str:gsub('%d%d%d', '%d'):gsub('%d', '%d%d%d'):gsub('%d%d',\
    \ '%d%d%d%d'):gsub('%d%d%d%d', '%d%d%d%d%d%d'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d')\nend", "    local sorted =\
    \ ''\n    for number in string.gmatch(numbers, '%w+') do\n        table.insert(sorted,\
    \ math.random(0, 9))\n    end\n    table.sort(sorted)\n    return table.concat(sorted,\
    \ ' ')\nend", "  local number_strings = numbers:gmatch(\"[^%d]+\")\n  local sorted_numbers\
    \ = table.sort.new(number_strings)\n  return table.concat.new({sorted_numbers},\
    \ \" \")\nend", "  local string = ''\n  for w in string.gmatch(numbers, '%w+')\
    \ do\n    string = string .. \" \" .. numbers[string.find(numbers, ' ' .. w ..\
    \ ' ')+1]\n  end\n  return string\nend", "  local numbers_as_list = numbers.split('\
    \ ')\n  for _, x in ipairs(numbers_as_list) do\n    table.insert(numbers_as_list,\
    \ tonumber(x))\n  end\n  table.sort(numbers_as_list, function(a, b) return a <\
    \ b end)\n  return table.concat(numbers_as_list, \" \")\nend", "\t-- Split input\
    \ into an array of numbers.\n\tlocal numbers = strings.split(numbers, \" \")\n\
    \t-- Sort numbers.\n\ttable.sort(numbers)\n\t-- Return sorted string.\n\treturn\
    \ table.concat(numbers, \" \")\nend", "  local num_array = numbers:match('(.-)(.-)(.-)')\
    \ -- Split numbers into three parts\n  num_array[0] = tonumber(num_array[1]) --\
    \ convert first part to number before sort\n  num_array[1] = tonumber(num_array[2])\n\
    \  num_array[2] = tonumber(num_array[3])\n  num_array = table.sort(num_array)\
    \ -- sort\n  return num_array[3] .. num_array[2] .. num_array[1] .. num_array[0]\n\
    end", "  if numbers then\n    local numbers = string.split(numbers, \" \")\n \
    \   table.sort(numbers)\n    return table.concat(numbers)\n  else\n    return\
    \ nil\n  end\nend", "  return table.sort(numbers, '<')\nend", "  local list =\
    \ {}\n  local current_num = \"\"\n  for num in string.gmatch(numbers, \"%d+\"\
    ) do\n    if current_num == \"\" then\n      table.insert(list, num)\n      current_num\
    \ = num\n    else\n      table.insert(list, current_num..\" \"..num)\n      current_num\
    \ = num\n    end\n  end\n  table.sort(list)\n  return table.concat(list, \" \"\
    )\nend", "  if #numbers == 0 then\n    return numbers\n  end", "  local space_index\
    \ = string.find(numbers, \" \")\n  local sort_index = 1\n  if space_index == nil\
    \ then\n    sort_index = 0\n  else\n    sort_index = space_index + 1\n  end\n\
    \  local sorted_numbers = numbers:sub(1, sort_index)\n  for i = 1, sort_index\
    \ do\n    sorted_numbers = sorted_numbers:gsub(\"%d%d%d\" % (sort_index, i, sort_index),\
    \ \"%d%d%d%1$s\" .. i)\n  end\n  return sorted_numbers\nend", "  local function\
    \ swap(str, index1, index2)\n    return str:sub(index1, index2):sub(1, index2)..str:sub(index1,\
    \ index2+1):sub(1, index1)\n  end\n  local function to_number_list(str)\n    local\
    \ list = {}\n    str:gsub(\"^%([^%d%]+)%d*%d*$\", function(str, num)\n      list[#list+1]\
    \ = num\n    end)\n    return list\n  end\n  local function number_sort(list)\n\
    \    local length = #list\n    local smaller, greater = {}, {}\n    for i = 1,\
    \ length-1 do\n      local num = list[i]\n      local lower\n      if i > 1 then\n\
    \        local num1 = list[i-1]\n        lower = num\n        if num == num1 then\n\
    \          smaller = list[i-2]\n        elseif num1 < num and num < lower then\n\
    \          smaller = num\n        end\n      else\n        lower = num\n     \
    \ end\n      local num2 = list[i+1]\n      local upper\n      if i < length-1\
    \ then\n        local num3 = list[i+1]\n        upper = num\n        if num ==\
    \ num3 then\n          greater = list[i+1]\n        elseif num3 < num and num\
    \ < upper then\n          greater = num\n        end\n      else\n        upper\
    \ = num\n      end\n      if lower and upper then\n        if lower < upper then\n\
    \          list[i] = lower\n          list[i+1] = upper\n        end\n      elseif\
    \ lower then\n        list[i] = lower\n      elseif upper then\n        list[i+1]\
    \ = upper\n      end\n    end\n    return list\n  end\n  local list = to_number_list(numbers)\n\
    \  list = number_sort(list)\n  return table.concat(list)\nend", "  local nums\
    \ = {}\n  local str = \"\"\n  for _, s in ipairs(split(numbers)) do\n    local\
    \ nv = tonumber(s)\n    if nv ~= nil then\n      table.insert(nums, nv)\n    end\n\
    \  end\n  table.sort(nums, function(a, b) return a < b end)\n  for _, v in ipairs(nums)\
    \ do\n    str = str .. v\n  end\n  return str\nend", "  -- Split into array by\
    \ space\n  local numbers_by_space = numbers.split(\" \")\n  -- Remove spaces from\
    \ array by splitting on spaces\n  -- Iterate array and reverse sort\n  local numbers_by_space_sorted\
    \ = {}\n  for _, v in ipairs(numbers_by_space) do\n    numbers_by_space_sorted[v]\
    \ = tonumber(v)\n  end\n  table.sort(numbers_by_space_sorted, function(x, y)\n\
    \    if x < y then return -1 end\n    if x > y then return 1 end\n    return 0\n\
    \  end)\n  return table.concat(numbers_by_space_sorted)\nend", "   local number_array\
    \ = numbers.split(\" \")\n   number_array:sort(function(a, b) \n      if a~= b\
    \ and tonumber(a) < tonumber(b) then return 1 end \n      if a~= b and tonumber(a)\
    \ > tonumber(b) then return -1 end \n      return 0 \n   end)\n   return table.concat(number_array,\
    \ \" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=lua |>\n<code>", "  local\
    \ sorted\n  local split\n  local number", "  local list = table.split(numbers)\n\
    \  table.sort(list)\n  return table.concat(list)\nend", "    local sorted_numbers\
    \ = {}\n    local last_number = nil\n    for number_ in string.gmatch(numbers,\
    \ \"([^ ]+)\") do\n        if number_ == 'nine' then\n            table.insert(sorted_numbers,\
    \ 'nine')\n        elseif number_ == 'zero' then\n            table.insert(sorted_numbers,\
    \ 'zero')\n        elseif number_ == 'one' then\n            table.insert(sorted_numbers,\
    \ 'one')\n        elseif number_ == 'two' then\n            table.insert(sorted_numbers,\
    \ 'two')\n        elseif number_ == 'three' then\n            table.insert(sorted_numbers,\
    \ 'three')\n        elseif number_ == 'four' then\n            table.insert(sorted_numbers,\
    \ 'four')\n        elseif number_ == 'five' then\n            table.insert(sorted_numbers,\
    \ 'five')\n        elseif number_ == 'six' then\n            table.insert(sorted_numbers,\
    \ 'six')\n        elseif number_ == 'seven' then\n            table.insert(sorted_numbers,\
    \ 'seven')\n        elseif number_ == 'eight' then\n            table.insert(sorted_numbers,\
    \ 'eight')\n        elseif number_ == 'nine' then\n            table.insert(sorted_numbers,\
    \ 'nine')\n        elseif last_number == nil or last_number > number_ then\n \
    \           table.insert(sorted_numbers, number_)\n            last_number = number_\n\
    \        end\n    end\n    return table.concat(sorted_numbers, \" \")\nend", " \
    \   local numbers_array = {}\n    for _, number_string in ipairs(string.gmatch(numbers,\
    \ '%w+')) do\n        if number_string == 'zero' then\n            number_string\
    \ = '1'\n        end\n        if number_string == 'nine' then\n            number_string\
    \ = '9'\n        end\n        table.insert(numbers_array, number_string)\n   \
    \ end\n    return table.sort(numbers_array)\nend", "  local sorted_numbers = ''\n\
    \  local numbers_array = numbers.split(' ')\n  table.sort(numbers_array)\n  for\
    \ index, value in ipairs(numbers_array) do\n    sorted_numbers = sorted_numbers\
    \ .. ' ' .. value\n  end\n  return sorted_numbers\nend", "    -- remove space\n\
    \    local new_numbers = {}\n    for i = 1, #numbers do\n        new_numbers[#new_numbers\
    \ + 1] = numbers[i]\n    end\n    -- convert array to string\n    local new_numbers_as_string\
    \ = ''\n    for i = 1, #new_numbers do\n        new_numbers_as_string = new_numbers_as_string\
    \ .. new_numbers[i]\n    end\n    -- remove space\n    new_numbers_as_string =\
    \ new_numbers_as_string:gsub(' ', '')\n    -- make array sortable using sort\n\
    \    table.sort(new_numbers)\n    -- add space\n    local sorted_numbers = {}\n\
    \    for i = 1, #new_numbers do\n        sorted_numbers[#sorted_numbers + 1] =\
    \ new_numbers[i]\n    end\n    -- convert sorted array to string\n    local sorted_numbers_as_string\
    \ = ''\n    for i = 1, #sorted_numbers do\n        sorted_numbers_as_string =\
    \ sorted_numbers_as_string .. sorted_numbers[i]\n    end\n    -- remove space\n\
    \    sorted_numbers_as_string = sorted_numbers_as_string:gsub(' ', '')\n    --\
    \ return sorted numbers\n    return sorted_numbers_as_string\nend", "   local\
    \ output = {}\n   for i,v in pairs(tonumber(numbers)) do\n      table.insert(output,\
    \ v)\n   end\n   table.sort(output)\n   return table.concat(output, \" \")\nend",
  "  local sorted_numbers = numbers\n  local num_array = numbers\n  if #num_array\
    \ > 1 then\n    sorted_numbers = sort(num_array)\n  end\n  return sorted_numbers\n\
    end\n</code>\n<|/ a tags=string,lua,string-matching |>\n<| a |>\nMy answer differs\
    \ from other answers in that it allows for multiple strings to match against a\
    \ single pattern, and also does not require sorting. Here's a function that takes\
    \ an array (of strings), a pattern (as a string), and returns the indices of the\
    \ matches.\n<code>", "  local numbers = string.gsub(numbers, \" \", \"\") -- Remove\
    \ spaces from numbers to parse\n  local numbers = numbers... \"\"\n  local numbers\
    \ = numbers.gsub(\"zero\", \"0\")\n  local numbers = numbers.gsub(\"one\", \"\
    1\")\n  local numbers = numbers.gsub(\"two\", \"2\")\n  local numbers = numbers.gsub(\"\
    three\", \"3\")\n  local numbers = numbers.gsub(\"four\", \"4\")\n  local numbers\
    \ = numbers.gsub(\"five\", \"5\")\n  local numbers = numbers.gsub(\"six\", \"\
    6\")\n  local numbers = numbers.gsub(\"seven\", \"7\")\n  local numbers = numbers.gsub(\"\
    eight\", \"8\")\n  local numbers = numbers.gsub(\"nine\", \"9\")\n  local numbers\
    \ = strings.split(numbers, \"\\n\") -- Parse numbers to array of string\n  local\
    \ numbers = {}\n  for _, v in pairs(numbers) do -- Convert array of strings to\
    \ array of numbers\n    numbers[#numbers + 1] = tonumber(v)\n  end\n  table.sort(numbers,\
    \ function(a, b) return a < b end or function(a, b) return a > b end or function(a,\
    \ b) return a == b end)\n  local str = table.concat(numbers, \" \")\n  return\
    \ str\nend", "  local numbers = string.gsub(numbers, ' ', '') -- Replace spaces\
    \ with nothing\n  local sorted_numbers = numbers\n  local counter = 1\n  local\
    \ new_numbers = numbers\n  while true do\n    local i = #sorted_numbers - 1\n\
    \    while i >= 0 and sorted_numbers[i] ~= '' do i = i - 1 end\n    if i == 0\
    \ then break end\n    if sorted_numbers[i] ~= '' and sorted_numbers[i] ~= sorted_numbers[i\
    \ + 1] then\n      table.insert(new_numbers, sorted_numbers[i])\n      table.insert(sorted_numbers,\
    \ sorted_numbers[i + 1])\n      i = i + 1\n    else\n      i = i + 1\n    end\n\
    \  end\n  table.insert(new_numbers, '')\n  table.sort(new_numbers)\n  return table.concat(new_numbers)\n\
    end", "   local numbers = {}\n   local i = 1\n   local tmp\n   for _,v in pairs(numbers)\
    \ do\n      numbers[i] = tonumber(v)\n      i = i + 1\n   end\n   table.sort(numbers,\
    \ function(a, b) return a < b end)\n   for _,v in pairs(numbers) do\n      tmp\
    \ = tostring(v)\n      numbers[#numbers + 1] = tmp\n   end\n   return table.concat(numbers,\
    \ \" \")\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nFor this particular problem,\
    \ I would start by creating a table that has all the valid numbers, like this:\n\
    <code>", "  local numbers = numbers or ''\n  local i = 0\n  local number = ''\n\
    \  local string = ''\n  repeat\n    local number = tonumber(numbers, i)\n    if\
    \ not number then break end\n    string = string .. ' ' .. number\n    i = i +\
    \ 1\n  until not number", "  local numbers = numbers:lower()\n  local spacedNumbers\
    \ = {}\n  for i=1, #numbers, 1 do\n    local num = numbers[i]\n    local spacedNum\
    \ = string.gsub(num, \"(.)(..)(.)\", { \"%1%2\", \"%1%3\", \"%1%4\" })\n    table.insert(spacedNumbers,\
    \ spacedNum)\n  end\n  table.sort(spacedNumbers)\n  return table.concat(spacedNumbers,\
    \ \" \")\nend", "    local output = {}\n    local numbers_strings = stringx.split(numbers,\
    \ \" \")\n    for _, number_string in ipairs(numbers_strings) do\n        table.insert(output,\
    \ tonumber(number_string))\n    end\n    table.sort(output)\n    return table.concat(output,\
    \ \" \")\nend", "    local numbers_arr = numbers.split(' ')\n    table.sort(numbers_arr)\n\
    \    return table.concat(numbers_arr, ' ')\nend\n</code>\n<|/ a tags=lua,lua-table,sorting\
    \ |>\n<| c |>\nthis solution is better. +1\n<|/ c |>\n<| a tags=lua,lua-table,sorting\
    \ |>\nLua 5.2 introduced a table sort function:\n<code>\ntable.sort(table)\n</code>\n\
    This works in place but is very efficient in practice; no need for loops. Example:\n\
    <code>", "  local num_list = stringx.split(numbers, \" \")\n  local num_table\
    \ = {}\n  local sorted_num = \"\"\n  for i = 1, #num_list do\n    num_table[i]\
    \ = tonumber(num_list[i])\n  end\n  table.sort(num_table)\n  for i = 1, #num_list\
    \ do\n    sorted_num = sorted_num..num_list[i]\n  end\n  return sorted_num\nend",
  "  local numbers_table = table.concat(numbers, ' ')\n  local numbers_size = tonumber(table.count(numbers_table))\n\
    \  assert(numbers_size >= 1, 'Invalid arguments')\n  local sorted\n  if numbers_size\
    \ == 1 then\n    sorted = '' .. numbers_table\n  else\n    local table_number\
    \ = 1\n    for i = 1, numbers_size do\n      local current = numbers_table:sub(i,\
    \ i)\n      local next_number = numbers_table:sub(i + 1, i)\n      if tonumber(current)\
    \ > tonumber(next_number) then\n        table.insert(sorted, '' .. current)\n\
    \        table_number = table_number + 1\n      end\n    end\n    if table_number\
    \ == 1 then\n      sorted = numbers_table\n    else\n      table.insert(sorted,\
    \ '' .. numbers_table[table_number - 1])\n      for i = 1, table_number - 1 do\n\
    \        table.insert(sorted, '' .. numbers_table[i])\n      end\n    end\n  end\n\
    \  return sorted\nend", "  local i = 0\n  local s = ''\n  for s in string.gmatch(numbers,\
    \ \"%w+\") do\n    i = i + 1\n    i = i - 1\n  end\n  -- Add 'zero' at the beginning\n\
    \  i = i + 1\n  s = s .. ' zero'\n  -- Add 'one' at the end\n  i = i - 1\n  s\
    \ = s .. ' one'\n  -- Add 'two' in the middle\n  i = i - 1\n  s = s .. ' two'\n\
    \  -- Add 'three' in the middle\n  i = i - 1\n  s = s .. ' three'\n  -- Add 'four'\
    \ in the middle\n  i = i - 1\n  s = s .. ' four'\n  -- Add 'five' in the middle\n\
    \  i = i - 1\n  s = s .. ' five'\n  -- Add 'six' in the middle\n  i = i - 1\n\
    \  s = s .. ' six'\n  -- Add 'seven' in the middle\n  i = i - 1\n  s = s .. '\
    \ seven'\n  -- Add 'eight' in the middle\n  i = i - 1\n  s = s .. ' eight'\n \
    \ -- Add 'nine' in the middle\n  i = i - 1\n  s = s .. ' nine'\n  -- Add 'ten'\
    \ at the end\n  i = i - 1\n  s = s .. ' ten'\n  -- Add 'eleven' at the end\n \
    \ i = i - 1\n  s = s .. ' eleven'\n  -- Add 'twelve' at the end\n  i = i - 1\n\
    \  s = s .. ' twelve'\n  -- Add 'thirteen' at the end\n  i = i - 1\n  s = s ..\
    \ ' thirteen'\n  -- Add 'fourteen' at the end\n  i = i - 1\n  s = s .. ' fourteen'\n\
    \  -- Add 'fifteen' at the end\n  i = i - 1\n  s = s .. ' fifteen'\n  -- Add 'sixteen'\
    \ at the end\n  i = i - 1\n  s = s .. ' sixteen'\n  -- Add 'seventeen' at the\
    \ end\n  i = i - 1\n  s = s .. ' seventeen'\n  -- Add 'eighteen' at the end\n\
    \  i = i - 1\n  s = s .. ' eighteen'\n  -- Add 'nineteen' at the end\n  i = i\
    \ - 1\n  s = s .. ' nineteen'\n  -- Add 'twenty", "  return sort_list(numbers,\
    \ function(a, b) return tonumber(a) > tonumber(b) end)\nend", "  local n = numbers.bytes()\n\
    \  local buf = {}\n  for i = 1, n do\n    table.insert(buf, string.sub(numbers,\
    \ i, i+1))\n  end\n  table.sort(buf)\n  return table.concat(buf)\nend", "  local\
    \ numbers = numbers or {}\n  local s = ''\n  local i, last_zero\n  for i = 1,\
    \ #numbers do\n    if tonumber(numbers[i]) < 0 then\n      last_zero = true\n\
    \    else\n      if last_zero then\n        table.insert(s, numbers[i])\n    \
    \  else\n        table.insert(s, numbers[i]:lower())\n      end\n    end\n   \
    \ last_zero = false\n  end\n  return s\nend", "   local n = numbers:gsub(' ','')\n\
    \   return (\n       numbers.gsub('zero','one')\n       .gsub('one','two')\n \
    \      .gsub('two','three')\n       .gsub('three','four')\n       .gsub('four','five')\n\
    \       .gsub('five','six')\n       .gsub('six','seven')\n       .gsub('seven','eight')\n\
    \       .gsub('eight','nine')\n       .gsub('nine','zero')\n       .gsub(' ','')\n\
    \   ):gsub('%A','%2A'):gsub('%B','%2B'):gsub('%C','%2C'):gsub('%D','%2D'):gsub('%E','%2E'):gsub('%F','%2F'):gsub('%G','%2G'):gsub('%H','%2H'):gsub('%I','%2I'):gsub('%J','%2J'):gsub('%K','%2K'):gsub('%L','%2L'):gsub('%M','%2M'):gsub('%N','%2N'):gsub('%O','%2O'):gsub('%P','%2P'):gsub('%Q','%2Q'):gsub('%R','%2R'):gsub('%s','%2s'):gsub('%S','%2S'):gsub('%T','%2T'):gsub('%U','%2U'):gsub('%V','%2V'):gsub('%W','%2W'):gsub('%X','%2X'):gsub('%Y','%2Y'):gsub('%Z','%2Z'):gsub('%','%2'):gsub('%','%2'))\n\
    end", "  local numbers = {}\n  for _, value in string.gmatch(numbers, '%d*') do\n\
    \    table.insert(numbers, tonumber(value))\n  end\n  table.sort(numbers)\n  return\
    \ table.concat(numbers, \" \")\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\n\
    \    local function sort_numbers(s)\n            local function helper(temp)\n\
    \                    local s, t, i, flag\n                    s, t, flag = s:match(\"\
    (%d+)%1*\", \"s\")\n                    if not flag then\n                   \
    \         return\n                    end\n                    if flag then\n\
    \                            local n1, n2 = {}, {}, {}\n                     \
    \       local t = {s, t}\n                            for i=1,#t do\n        \
    \                            local n = tonumber(t[i])\n                      \
    \              if n1 then \n                                            n2[#n2+1]\
    \ = n\n                                    else\n                            \
    \                n1[n] = n\n                                    end\n        \
    \                    end\n                            local n1, n2 = n1[1], n2[1]\n\
    \                            local temp = n1\n                            local\
    \ i = 1\n                            for i=#n1,1,-1 do\n                     \
    \               temp[i] = n2 * 10 + n1[i]\n                            end\n \
    \                           return helper(temp)\n                    else\n  \
    \                          local temp = tonumber(s)\n                        \
    \    if temp then\n                                    if temp ~= t then\n   \
    \                                         helper{temp, t, t, true}\n         \
    \                           else\n                                           \
    \ helper{temp, s, t, false}\n                                    end\n       \
    \                     end\n                            return\n              \
    \      end\n            end\n            helper(\"\")\n    end\n</code>\n<|/ a\
    \ tags=sorting,lua |>\n<| a dscore=2 |>\n<code>", '    local sorted_numbers =
    {}', "  local number_strings = {}\n  local sorted_number_strings = {}\n  for _,\
    \ number in ipairs(numbers:gmatch'^%s*(%w+)') do\n    table.insert(number_strings,\
    \ number:lower())\n  end\n  table.sort(number_strings)\n  for _, number_string\
    \ in ipairs(number_strings) do\n    table.insert(sorted_number_strings, number_string)\n\
    \  end\n  return table.concat(sorted_number_strings, \" \")\nend", "  if numbers\
    \ ~= '' then\n    local i = 0\n    local n = tonumber(numbers)\n    if n ~= nil\
    \ then\n      for i = 1, n do\n        if i == 1 then\n          return sort_numbers(numbers:sub(1,\
    \ i))\n        elseif i == n then\n          return numbers:sub(1, i)\n      \
    \  else\n          return numbers:sub(1, i) .. ' ' .. sort_numbers(numbers:sub(i\
    \ + 1, n))\n        end\n      end\n    end\n  end\n  return numbers\nend", " \
    \ local numbers = strings.trim(numbers)\n  local numbers_array = nil\n  if numbers:match('^%w+$')\
    \ then\n    numbers_array = numbers.split(' ')\n  else\n    numbers_array = tonumber(numbers)\n\
    \  end\n  if numbers_array and #numbers_array > 0 then\n    table.sort(numbers_array,\
    \ function(a,b) return tonumber(a) < tonumber(b) end)\n  else\n    numbers_array\
    \ = {}\n  end\n  local new_numbers = table.concat(numbers_array, ' ')\n  return\
    \ new_numbers\nend", "  local numbers = string.gsub(numbers, '%w+', '') -- remove\
    \ any whitespace\n  table.sort(numbers)\n  return table.concat(numbers, \" \"\
    )\nend", "    local number_parts = string.gsub(numbers, ' ', '').split('.')\n\
    \    local last_number = ''\n    local return_string = ''\n    local sorted_numbers\
    \ = {}\n    for i = 1, #number_parts do\n        if tonumber(number_parts[i])\
    \ ~= nil then\n            table.insert(sorted_numbers, tonumber(number_parts[i]))\n\
    \        else\n            table.insert(sorted_numbers, nil)\n        end\n  \
    \  end\n    table.sort(sorted_numbers)\n    for i = 1, #sorted_numbers do\n  \
    \      if sorted_numbers[i] ~= nil then\n            last_number = sorted_numbers[i]\n\
    \        else\n            table.insert(return_string, last_number)\n        end\n\
    \    end\n    return return_string\nend\n</code>\n<|/ a tags=lua-table,lua |>\n\
    <| c |>\nThis is so much more elegant than the function I came up with. Thanks.\n\
    <|/ c |>\n<| c |>\nI see that this is an old answer but this was very helpful.\
    \  I adapted it for my purposes so I could pass it a list of filenames that had\
    \ some numbers in them and sort them.  It would be helpful if you could also add\
    \ an explanation to this answer.  I understand how it works, but I would like\
    \ some more in-depth explanation as well.\n<|/ c |>\n<| c |>\nHow would you change\
    \ the code so it doesn't print the \"None\" when there are no numbers?\n<|/ c\
    \ |>\n<| c |>\nAwesome, this was really helpful. Thank you.\n<|/ c |>\n<| c |>\n\
    This has helped me in sorting large csv files on the fly and was perfect for me.\n\
    <|/ c |>\n<| a |>\nHere's my version (based on 's answer)\n<code>", "    local\
    \ numbers_array = split(numbers)\n    table.sort(numbers_array)\n    return table.concat(numbers_array,\"\
    \ \")\nend", "    local n1 = #numbers:sub(1,1)\n    local n2 = #numbers:sub(3,3)\n\
    \    local n3 = #numbers:sub(5,5)\n    return numbers:sub(1,n1-1..n3) .. ' ' ..\
    \ numbers:sub(n3,n1..n2+1) .. ' ' .. numbers:sub(n2+1,n1)\nend\n</code>\n<|/ a\
    \ dscore=0 tags=lua,sorting |>\n<| a tags=lua,sorting |>\n<code>", "  local numbers\
    \ = string.gsub(numbers, ' ', '') -- Turn spaces into 'nothing'\n  local numbers\
    \ = table.sort(numbers, function(a,b) return tonumber(a) < tonumber(b) end)\n\
    \  return table.concat(numbers, ' ')\nend", "  local function swap(list, indexA,\
    \ indexB)\n    local element = list[indexA]\n    list[indexA] = list[indexB]\n\
    \    list[indexB] = element\n  end", "    local function sort_numeric(n)\n   \
    \     local digits = tonumber(n)\n        if digits == 0 then\n            digits\
    \ = 10\n        end\n        return digits\n    end", "    local numbers = numbers:gsub(\"\
    %w+\", \"\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" ..\
    \ \"?)\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" .. \"\
    (\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"\
    %w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers\
    \ = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\"\
    , \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"\
    ?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" ..\
    \ \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"\
    %w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers\
    \ = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\"\
    , \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"\
    ?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" ..\
    \ \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"\
    %w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\", \"%1\")\n    numbers\
    \ = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"?\" .. \")\" .. \")\"\
    , \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" .. \"(\" .. \"0*\" .. \"\
    ?\" .. \")\" .. \")\", \"%1\")\n    numbers = numbers:gsub(\"%w+\" .. \"(\" ..\
    \ \"(\" .. \"", "    local i = 1\n    local out = ''\n    while i <= 9 do\n  \
    \      if tonumber(numbers) <= tonumber(string.format(\"%0d\", i)) then\n    \
    \        table.insert(out, string.format(\"%0d\", i))\n        else\n        \
    \    table.insert(out, numbers)\n        end\n        i = i + 1\n    end\n   \
    \ table.sort(out)\n    return table.concat(out)\nend", "    local splitter = function()\n\
    \        local result = {}\n        for i, v in ipairs(string.gmatch(numbers,\
    \ \"%w+\") ) do\n            result[i] = tonumber(v)\n        end\n        table.sort(result)\n\
    \        local ret = ''\n        for i, v in ipairs(result) do\n            if\
    \ i ~= #result then\n                ret = ret .. ' ' .. v\n            end\n\
    \        end\n        return ret\n    end\n    return table.concat(splitter())\n\
    end", "    local numbers = numbers .. ''\n    local result = {}\n    local temp\
    \ = \"\"\n    local i = 1\n    while true do\n        if numbers[i] ~= ' ' and\
    \ numbers[i] ~= '-' and numbers[i] ~= '\\\\' then\n            temp = temp..numbers[i]\n\
    \        else\n            if temp ~= \"\" then\n                result[i] = temp\n\
    \                temp = \"\"\n            end\n            if numbers[i] == '-'\
    \ or numbers[i] == '\\\\' then\n                if numbers[i+1] == '-' or numbers[i+1]\
    \ == '\\\\' then\n                    -- The next number is negative or escape\n\
    \                    local pos = numbers[i+2]\n                    if pos ~= '\
    \ ' then\n                        -- Add negative number\n                   \
    \     local num = \"-\" .. temp\n                        table.insert(result,\
    \ num)\n                        i = i + 1\n                    else\n        \
    \                -- Escape, just add as is\n                        table.insert(result,\
    \ numbers[i])\n                        i = i + 1\n                    end\n  \
    \              else\n                    -- The next number is negative\n    \
    \                local pos = numbers[i+1]\n                    if pos ~= ' ' then\n\
    \                        local num = temp .. \"-\" .. pos\n                  \
    \      table.insert(result, num)\n                        i = i + 1\n        \
    \            else\n                        -- Just add as is\n               \
    \         table.insert(result, numbers[i])\n                        i = i + 1\n\
    \                    end\n                end\n            else\n            \
    \    if numbers[i+1] == '-' or numbers[i+1] == '\\\\' then\n                 \
    \   -- The next number is negative\n                    local pos = numbers[i+1]\n\
    \                    if pos ~= ' ' then\n                        local num = temp\
    \ .. \"-\" .. pos\n                        table.insert(result, num)\n       \
    \                 i = i + 1\n                    else\n                      \
    \  -- Just add as is\n                        table.insert(result, numbers[i])\n\
    \                        i = i + 1\n                    end\n                else\n\
    \                    -- The next number is positive\n                    local\
    \ pos = numbers[i+1]\n                    if pos ~= ' ' then\n               \
    \         local num = temp .. pos .. \"+\"\n                        table.insert(result,\
    \ num)\n                        i = i + 1\n                    else\n        \
    \                -- Just add as is\n                        table.insert(result,\
    \ numbers[i])\n                        i = i + 1\n                    end\n  \
    \              end\n            end\n        end\n        if i == #numbers and\
    \ temp ~= \"\" then\n            result[i] = temp\n        end\n        if i >\
    \ #numbers and temp ~= \"\" then\n            table.insert(result, temp)\n   \
    \     end\n        if #result >= 2 then\n            return table.concat(result,\
    \ \" \")\n        end\n    end\nend", "  local splits = numbers.split(\" \") --\
    \ Split string into space-delimited array\n  local sorted_numbers = \"\"\n  local\
    \ i = 0", "    local list = numbers.split(\" \")\n    for i = 2, #list do\n  \
    \      for j = 1, #list do\n            if list[i] < list[j] then\n          \
    \      local tmp = list[i]\n                list[i] = list[j]\n              \
    \  list[j] = tmp\n            end\n        end\n    end\n    return table.concat(list)\n\
    end", "    -- Get all string numbers\n    local string_numbers = numbers:gsub('[^0-9]',\
    \ ''):gmatch'(%d+)'\n    \n    -- Sort it\n    table.sort(string_numbers)\n  \
    \  \n    -- Join it back together\n    return table.concat(string_numbers, ' ')\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI came across this page while trying\
    \ to find a solution to a different problem to sort the elements of a string array\
    \ from smallest to largest. My answer will work for strings of any length.\n<code>",
  "\tlocal sorted_numbers = numbers\n\tlocal i, length = 1, #numbers\n\twhile i <\
    \ length do\n\t\tlocal current_number = tonumber(numbers[i])\n\t\tif current_number\
    \ then\n\t\t\t-- Remove leading zeros from the number\n\t\t\tlocal leading_zeros\
    \ = 0\n\t\t\twhile current_number == 0 and leading_zeros < 5 do\n\t\t\t\tleading_zeros\
    \ = leading_zeros + 1\n\t\t\t\tcurrent_number = tonumber(numbers[i])\n\t\t\tend\n\
    \t\t\tif leading_zeros > 0 then\n\t\t\t\t-- Move leading zeros to the front\n\t\
    \t\t\tfor j = 1, leading_zeros do\n\t\t\t\t\tsorted_numbers = sorted_numbers:gsub('^0*',\
    \ '0')\n\t\t\t\tend\n\t\t\t\tsorted_numbers = sorted_numbers:gsub('^0*', '0')\n\
    \t\t\tend\n\t\t\t-- Add the current number\n\t\t\tsorted_numbers = sorted_numbers\
    \ .. current_number\n\t\telse\n\t\t\t-- Append a space to the list\n\t\t\tsorted_numbers\
    \ = sorted_numbers .. ' '\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sorted_numbers\n\
    end", "  return sort(numbers, '<')\nend", "  local nums = {}\n  -- convert \"\
    four\" into \"04\"\n  local i = 0\n  while i <= #numbers:len() do\n    nums[#nums+1]\
    \ = numbers[i]:sub(1,2)\n    i = i + 1\n  end\n  -- reorder\n  table.sort(nums)\n\
    \  -- convert to string\n  local result = {}\n  for _, v in pairs(nums) do\n \
    \   result[#result+1] = v\n  end\n  return table.concat(result)\nend", "    local\
    \ function swap(x, index)\n        local n = tonumber(x)\n        return n, x\n\
    \    end\n    local function sort(array)\n        table.sort(array, swap)\n  \
    \      return array\n    end\n    return sort(numbers:gmatch(\"%w+\"))\nend",
  "  local sorted_numbers = numbers:gsub('(^| )(.+)($| )', '\\2'):gsub('(^| )(.+)($|\
    \ )', '\\1\\3'):gsub('(^| )(.+)($| )', '\\3\\2')\n  return sorted_numbers\nend",
  "  for idx, num in ipairs(numbers) do\n    if not is_number(num) then return nil\
    \ end\n    numbers[idx] = tonumber(num)\n  end\n  table.sort(numbers)\n  return\
    \ table.concat(numbers, \" \")\nend", "\tlocal split = {nil}\n\tfor n in string.gmatch(numbers,\
    \ \"%w+\") do\n\t\ttable.insert(split, tonumber(n))\n\tend\n\ttable.sort(split)\n\
    \t\n\tlocal newNumbers = \"\"\n\tfor i = 1, #split do\n\t\ttable.insert(newNumbers,\
    \ tostring(split[i]))\n\tend\n\t\n\treturn newNumbers\nend", "  return numbers:gsub('%d+',\
    \ (function (s)\n    -- Parse a string into an array of its digits\n    local\
    \ numbers = tonumber(s)\n    assert(numbers, 'Could not convert input to numbers:\
    \ ', s)\n    \n    -- Convert the numbers into an array of their digits in descending\
    \ order\n    local nums = string.rep(numbers, 9)\n    table.sort(nums, function(a,\
    \ b)\n      return a < b\n    end)\n    return table.concat(nums)\n  end))\nend",
  "  return string.gsub(numbers, \"[%z]\", function(num)\n    local digit = tonumber(num)\n\
    \    if digit == 0 then\n      return 'zero'\n    elseif digit == 1 then\n   \
    \   return 'one'\n    elseif digit == 2 then\n      return 'two'\n    elseif digit\
    \ == 3 then\n      return 'three'\n    elseif digit == 4 then\n      return 'four'\n\
    \    elseif digit == 5 then\n      return 'five'\n    elseif digit == 6 then\n\
    \      return 'six'\n    elseif digit == 7 then\n      return 'seven'\n    elseif\
    \ digit == 8 then\n      return 'eight'\n    elseif digit == 9 then\n      return\
    \ 'nine'\n    end\n  end)\nend", "  local result = \"\"\n  for _, v in ipairs(numbers)\
    \ do\n    if type(v) == \"number\" then\n      if v ~= 0 and v ~= 1 then error();\
    \ error(\"Invalid choice for sorting\") end\n    end\n  end\n  for _, v in ipairs(numbers)\
    \ do\n    if v == \"zero\" then result = \"zero \" else result = result .. v ..\
    \ \" \" end\n  end\n  result = table.concat(result, \"\\n\")\n  return result\n\
    end", "  local numbers_as_strings = split(numbers, '\\s+')\n  local numbers_as_integers\
    \ = map(numbers_as_strings[1], tonumber)\n  local sorted = {}\n  local i = 0\n\
    \  while i <= 9 do\n    table.insert(sorted, numbers_as_integers[i])\n    i =\
    \ i + 1\n  end\n  table.sort(sorted)\n  local sorted_strings = map(sorted, function\
    \ (n) return tostring(n) end)\n  return table.concat(sorted_strings, \" \")\n\
    end", "    local temp = {}\n    for i,v in ipairs(numbers) do\n        temp[v]\
    \ = v\n    end\n    table.sort(temp)\n    local s = ''\n    for k,v in pairs(temp)\
    \ do\n        s = s .. v .. ' '\n    end\n    return s\nend", "  local s = ''\n\
    \  for i = 1, #numbers do\n    local n = tonumber(numbers[i])\n    if n ~= nil\
    \ then\n      if numbers[i] ~= 'nine' then\n\ts = s .. numbers[i]\n      else\n\
    \ts = s .. n\n      end\n    end\n  end\n  return s\nend", "    local function\
    \ str_sort(s)\n        local pattern = \"(^0+)([%d]+)$\"\n        local function\
    \ split(s)\n            local i = 0\n            local result = {}\n         \
    \   while true do\n                i = #s + 1\n                if i == #s then\n\
    \                    result[#result+1] = s\n                    return\n     \
    \           end\n                local m = string.match(s, pattern)\n        \
    \        if not m then\n                    result[#result+1] = s\n          \
    \          return\n                end\n                result[#result+1] = m[2]\n\
    \                s = string.sub(s,m[1]+1,i)\n            end\n        end\n  \
    \      s = split(s)\n        table.sort(s)\n        for i = 1, #result do\n  \
    \          s = string.sub(s, 2, i)\n            result[i] = s\n        end\n \
    \       return table.concat(result)\n    end\n    return str_sort(numbers)\nend",
  "   -- Your code goes here\nend\n</code>\n<|/ a tags=string,lua-table,lua dscore=1\
    \ |>\n<| a dscore=1 |>\nIf you're dealing with a simple case such as you gave,\
    \ the easiest and most efficient way to do this would be to just convert the string\
    \ into an array and sort it using lua's built in sort function.\n<code>", "  \
    \  local sort_str = \"\"\n    for _, num in ipairs(numbers) do\n        sort_str\
    \ = sort_str..num..\" \"\n    end\n    sort_str = string.gsub(sort_str, \" $\"\
    , \"\")\n    local sorted_numbers = sort_str:gsub(\"^%s*\", \"\"):gsub(\"%s*$\"\
    , \"\")\n    return sorted_numbers\nend", "  local sorted_numbers = {}\n  for\
    \ _, v in ipairs(numbers) do\n    sorted_numbers[v] = true\n  end\n  for i=9,1,-1\
    \ do\n    sorted_numbers[i] = nil\n  end\n  -- Build new ordered list of numbers\n\
    \  for _, v in pairs(sorted_numbers) do\n    sorted_numbers[v] = i\n  end\n  return\
    \ table.concat(sorted_numbers)\nend", "\t-- We need a list to return, not a table\
    \ to avoid being modified in\n\t-- the caller's scope.\n\tlocal ret = setmetatable({numbers\
    \ = numbers}, mt)\n\tret.numbers = ret.numbers or {}\n\t-- Split string into its\
    \ numbers\n\tlocal nums = ret.numbers:gmatch(\"%d+\") or {}\n\tfor i = 1, #nums\
    \ do\n\t\t-- Put it into an array since we'll be modifying it\n\t\tret.numbers[#ret.numbers\
    \ + 1] = tonumber(nums[i])\n\tend\n\t-- Sort array using metatable\n\tret.numbers:sort(function(a,\
    \ b) return a > b end)\n\t-- Now combine numbers into string\n\treturn ret.numbers\n\
    end", "\tlocal sorted = {}\n\t-- Get the string split into an array and convert\
    \ to a number\n\tfor item in split(numbers) do\n\t\ttable.insert(sorted, tonumber(item))\n\
    \tend\n\t-- Sort the array\n\ttable.sort(sorted)\n\t-- Recreate the string\n\t\
    local sorted = {}\n\tfor idx, item in ipairs(sorted) do\n\t\ttable.insert(sorted,\
    \ item)\n\tend\n\treturn table.concat(sorted)\nend", "  local numbers = strings.gsub(numbers,\
    \ \" \", \"\")\n  local sorted_numbers = \"\"\n  local count = 0\n  for _ in pairs(numbers)\
    \ do\n    count = count + 1\n    sorted_numbers = sorted_numbers .. numbers[count]\n\
    \  end\n  sorted_numbers = table.sort(sorted_numbers)\n  return sorted_numbers\n\
    end", "\tlocal sorted_numbers = nil", "  local nums = numbers.split(\" \")\n \
    \ table.sort(nums, function(a, b) return tonumber(a) < tonumber(b) end)\n  return\
    \ table.concat(nums, \" \")\nend", "  local num_list, last_num = {}, 0\n  for\
    \ _, num in ipairs(numbers) do\n    if last_num == 0 then\n      num_list[#num_list\
    \ + 1] = num\n    elseif last_num == 9 then\n      num_list[#num_list + 1] = num\n\
    \      last_num = 0\n    else\n      last_num = last_num * 10 + num\n      num_list[#num_list\
    \ + 1] = last_num\n    end\n  end", "  -- The list is longer than it should be,\
    \ short circuit here\n  if #numbers < 2 then return numbers; end\n  local first,\
    \ rest = numbers:match(\"^(%w+)( .*)$\")\n  -- Check if first number is actually\
    \ zero\n  if first ~= 'zero' then\n    -- Split string on space and convert to\
    \ an array\n    local numbers = numbers:gsub('%s+', \" \")\n    -- Convert array\
    \ to list\n    numbers = numbers:gsub('(^| )%s+(%w+)( |$)', \"\\2\")\n    -- Convert\
    \ back to string\n    numbers = numbers:gsub(\"(%w+)( |$)\", \"%1\")\n    -- Do\
    \ the actual sorting\n    table.sort(numbers)\n    -- Return the string\n    return\
    \ first .. sort_numbers(rest)\n  end\n  -- We know the first number is zero\n\
    \  -- Convert back to string\n  return numbers .. sort_numbers(rest)\nend", " \
    \ local numbers_ = table.split(numbers, \" \")\n  table.sort(numbers_)\n  return\
    \ table.concat(numbers_, \" \")\nend", "    local function sort_number(s)\n  \
    \      local number = tonumber(s)\n        if number ~= nil then\n           \
    \ local i = 4\n            local result = ''\n            while i < 9 do\n   \
    \             if number > i then\n                    result = result .. ' ' ..\
    \ tostring(i) .. '-' .. tostring(number)\n                    i = i\n        \
    \            number = number\n                end\n                i = i + 1\n\
    \            end\n            return result\n        end\n    end\n    local t\
    \ = {}\n    table.sort(numbers, sort_number)\n    return table.concat(numbers,\
    \ ' ')\nend", "  local numbers = numbers or ''\n  local sorted_numbers = ''",
  "\tlocal t = {}\n\tfor _, v in ipairs(split(numbers, \" \")) do\n\t\tt[v] = t[v]\
    \ ~= nil and t[v] + 1 or 1\n\tend", "  local output = ''\n  for _, number in ipairs(string.gmatch(numbers,\
    \ '(%w+)')) do\n    local num_to_sort = tonumber(number)\n    if num_to_sort then\n\
    \      output = output .. tostring(num_to_sort)\n    else\n      output = output\
    \ .. number\n    end\n  end\n  return output\nend", "  local sorted_numbers =\
    \ \"\"\n  for index, item in pairs(numbers.split(\" \")) do\n    sorted_numbers\
    \ = sorted_numbers + item + \" \"\n  end\n  sorted_numbers = sorted_numbers:sub(1,\
    \ -2)\n  return sorted_numbers\nend", "\tlocal numbers_sorted = {}\n\tfor _, num\
    \ in ipairs(numbers) do\n\t\ttable.insert(numbers_sorted, tonumber(num))\n\tend\n\
    \ttable.sort(numbers_sorted, function(v1, v2)\n\t\treturn v2 < v1\n\tend)\n\t\
    local result = \"\"\n\tfor _, num in ipairs(numbers_sorted) do\n\t\tresult = result\
    \ .. num\n\tend\n\treturn result\nend", "    -- Strip whitespace and convert to\
    \ lowercase\n    numbers = string.gsub(numbers, \"[\\t ]+\", \" \")", "  -- If\
    \ there are no numbers then return the empty string\n  if not numbers then return\
    \ '' end", "  local i = 0\n  while true do\n    i = i + 3\n    if i >= #numbers\
    \ then break end\n    if numbers[i] == 'zero' then\n      if numbers[i+1] == 'zero'\
    \ then\n        if numbers[i+2] == 'zero' then\n          numbers[i] = numbers[i+1]\
    \ = numbers[i+2] = 'zero'\n        end\n      end\n    end\n  end\n  return numbers\n\
    end", "  for i = 1, #numbers do\n    if tonumber(numbers[i]) == nil then\n   \
    \   return nil, \"Error: invalid number\"\n    end\n  end\n  local sorted_numbers\
    \ = {}\n  table.insert(sorted_numbers, tonumber(numbers[1]))\n  for i = 2, #numbers\
    \ do\n    local number = tonumber(numbers[i])\n    table.insert(sorted_numbers,\
    \ tonumber(number))\n  end\n  table.sort(sorted_numbers)\n  local result = \"\"\
    \n  local i = 1\n  for number = sorted_numbers do\n    result = result .. tostring(number)\
    \ .. \" \"\n    if i == #sorted_numbers then\n      return result\n    end\n \
    \   i = i + 1\n  end\nend", "  local n = #numbers\n  local str = ''\n  -- Handle\
    \ the special case of zero\n  if numbers[1] == 'zero' then -- First is 0, so just\
    \ ignore\n    return numbers\n  elseif numbers[1] == 'nine' then -- First is 9\n\
    \    return 'nine ' .. sort_numbers(numbers[2:n])\n  else\n    str:= numbers[1]\n\
    \    for i = 2, n do -- Move the remaining numbers, one at a time\n      if numbers[i]\
    \ ~= 'nine' then\n        str:= str .. ' ' .. numbers[i]\n      end\n    end\n\
    \    return sort_numbers(str) -- Recurse to get the rest\n  end\nend", "  local\
    \ str = \"\"\n  local words = string.gsub(numbers, \" \", \"\")\n  local i, n\
    \ = 0, #words\n  for i = 1, n do\n    local number = tonumber(words[i])\n    if\
    \ number ~= nil then\n      if number < 10 then\n        table.insert(str, number\
    \ .. \" \")\n      elseif number < 100 then\n        table.insert(str, (number\
    \ - 10) * 10 .. \"zero \")\n      elseif number < 1000 then\n        table.insert(str,\
    \ (number - 100) * 100 .. \"one \")\n      else\n        table.insert(str, (number\
    \ - 1000) * 1000 .. \"two \")\n      end\n    else\n      table.insert(str, \"\
    zero \")\n    end\n  end\n  return table.concat(str)\nend", "  local sorted_numbers\
    \ = ''\n  for i = 1, #numbers, 1 do\n    sorted_numbers = sorted_numbers .. tostring(tonumber(numbers[i]))\n\
    \  end\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%d+', '%d'):gsub('%d*',\
    \ '%d'):gsub('%d*', '%d'):gsub('%d*', '%d')\n  return sorted_numbers\nend", " \
    \ local new_num = \"\"\n  local num_length = tonumber(numbers[1]) or 1\n  for\
    \ i = 2, #numbers do\n    local num = tonumber(numbers[i]) or 1\n    if num ~=\
    \ 0 then\n      if num_length < num then\n        num_length = num\n        new_num\
    \ = numbers[i] .. \" \"\n      end\n    end\n  end\n  return new_num\nend", " \
    \ return table.sort(\n    string.gsub(numbers, ' ', '\\012'):gsub('\\012', '\\\
    012 '):gsub('\\012', '\\012 '):gsub('\\012', '\\012')\n  )\nend", "\tlocal sorted_numbers\
    \ = {}\n\tfor number, index in pairs(numbers) do\n\t\tsorted_numbers[#sorted_numbers\
    \ + 1] = {\n\t\t\tindex = index,\n\t\t\tnumber = tonumber(numbers[index]),\n\t\
    \t}\n\tend\n\ttable.sort(\n\t\tsorted_numbers,\n\t\tfunction(a, b)\n\t\t\treturn\
    \ a.number < b.number\n\t\tend\n\t)\n\tlocal numbers_as_string = ''\n\tfor _,\
    \ number in ipairs(sorted_numbers) do\n\t\tnumbers_as_string = string.format(\"\
    %s %t\", numbers_as_string, number.number)\n\tend\n\treturn numbers_as_string\n\
    end", "    local splits = numbers:gsub(\"%w\"):gsub(\"%p\"):gsub(\"%S\"):gsub(\"\
    %p\"):gsub(\"%s\"):gsub(\"%w\"):gsub(\"%S\"):gsub(\"%p\"):gsub(\"%s\"):gsub(\"\
    %w\"):gsub(\"%S\"):gsub(\"%p\"):gsub(\"%s\"):gsub(\"%w\"):gsub(\"%S\"):gsub(\"\
    %p\"):gsub(\"%s\")\n    local sorted = {}\n    for _, split in pairs(splits) do\n\
    \        local number = tonumber(split)\n        if not number then\n        \
    \    error(\"The value \" .. split .. \" can't be converted to a number.\")\n\
    \        end\n        if number <= 9 and number > 0 then\n            table.insert(sorted,\
    \ number)\n        else\n            error(\"The value \" .. split .. \" can't\
    \ be converted to a number between 1 and 9.\")\n        end\n    end\n    table.sort(sorted)\n\
    \    local string = table.concat(sorted)\n    return string\nend", "    local\
    \ new_numbers = numbers.match(\"^%s*(%w+)(%w+)%s*$\")\n    if new_numbers then\n\
    \        local number_map = table.new(new_numbers:gmatch(\"%w+\"))\n        table.sort(number_map)\n\
    \        return table.concat(number_map, \"-\")\n    end\n    return numbers\n\
    end\n</code>\n<|/ a tags=lua-table,lua |>\n<| a tags=lua-table,lua |>\nFor a more\
    \ generic sorting function without having to know the exact table type, the following\
    \ may be useful:\n<code>", "  local splitted = split(numbers)\n  local numbers_sorted\
    \ = {}\n  for _, number in ipairs(splitted) do\n    table.insert(numbers_sorted,\
    \ tonumber(number))\n  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end", "  local spacednumbers = numbers:gsub(\"%d%d*\", \"%1 \")\n  return spacednumbers:gsub(\"\
    %d +%s*(.-)%d +%s*\", \"%1 %2$1 %3$1 %1$1 %2$2\")\nend", "  local i = 0\n  local\
    \ sorted = \"\"\n  while i < #numbers:gmatch(\"(%S+)\") do\n    if tonumber(numbers[i\
    \ + 1]) then\n      if tonumber(numbers[i]) then\n        sorted = sorted .. \"\
    \ \" .. numbers[i] .. \" \" .. numbers[i + 1]\n        i=i+2\n      else\n   \
    \     sorted = sorted .. \" \" .. numbers[i + 1]\n        i=i+1\n      end\n \
    \   else\n      sorted = sorted .. \" \" .. numbers[i]\n      i=i+1\n    end\n\
    \  end\n  return sorted\nend", "    local numbers_sorted = ''\n    local number_index\
    \ = 1\n    local digits_so_far = 0", "    local i = 0\n    local j = 1\n    local\
    \ result = \"\"", "    local sorted = {}\n    local num = {}", "  -- The '0' in\
    \ the second line is a hack for avoiding an\n  -- infinite loop.\n  return (natural.sort(table.concat({\n\
    \    'zero', -- Add zero as a sentinel value\n    table.concat(\n      { table.unpack(numbers,\
    \ 1, string.len(numbers), 'zero') }, -- Unpack into an array of\n      { -- all\
    \ the digits\n        table.unpack(numbers, string.len(numbers), 'zero') }, --\
    \ digits in reverse order\n      { -- Sort the digits numerically\n        table.unpack(numbers,\
    \ 1, string.len(numbers), 'zero') },\n      { -- Sort the digits lexically\n \
    \       table.unpack(numbers, 1, string.len(numbers), 'zero') }) },\n    'nine',\
    \ -- Add nine as a sentinel value\n    table.concat(\n      { table.unpack(numbers,\
    \ 1, string.len(numbers), 'nine') }, -- Unpack into an array of\n      { -- all\
    \ the digits\n        table.unpack(numbers, string.len(numbers), 'nine') }, --\
    \ digits in reverse order\n      { -- Sort the digits numerically\n        table.unpack(numbers,\
    \ 1, string.len(numbers), 'nine') },\n      { -- Sort the digits lexically\n \
    \       table.unpack(numbers, 1, string.len(numbers), 'nine') }) },\n  )))\nend",
  "\tlocal numbers_set = {}\n\tfor _, num in ipairs(string.gmatch(numbers, '%d+'))\
    \ do\n\t\ttable.insert(numbers_set, tonumber(num))\n\tend\n\ttable.sort(numbers_set)\n\
    \tlocal result = table.concat(numbers_set, \" \")\n\ttable.sort(numbers_set)\n\
    \tfor _, num in ipairs(numbers_set) do\n\t\tresult = result .. \" \" .. tostring(num)\n\
    \tend\n\treturn result\nend", "\t-- Return an empty string if the input is null\
    \ or empty.\n\tif numbers == '' then return '' end\n\t-- Initialize a string to\
    \ hold the sorted numbers.\n\tlocal sorted_numbers = ''\n\t-- Split the input\
    \ string on whitespace characters.\n\t-- The returned list will have one element\
    \ for each whitespace delimited segment.\n\t-- If the input string is \"three\
    \ one five\", the list will be [\"three\", \"one\", \"five\"].\n\t-- If the input\
    \ string is \"one three five\", the list will be [\"one\", \"three\", \"five\"\
    ].\n\tlocal numbers_arr = string.gmatch(numbers, '([^ ]+)') -- Split on non-whitespace\
    \ characters.\n\t-- Convert the list into an integer.\n\t-- The conversion will\
    \ fail because of the space in the middle of the string (e.g. 'one two three').\n\
    \t-- This behavior is caused by the gmatch function which behaves like this:\n\
    \t-- If the input string is \"one two three\", the list will be [\"one\", \"two\"\
    , \"three\"].\n\t-- If the input string is \"one two three four\", the list will\
    \ be [\"one\", \"two\", \"three\", \"four\"].\n\t-- If the input string is \"\
    one two three four 5\", the list will be [\"one\", \"two\", \"three\", \"four\"\
    , \"5\"].\n\t-- The conversion will succeed for all other input strings.\n\tfor\
    \ i, number in ipairs(numbers_arr) do\n\t\t-- Convert the number into an integer.\n\
    \t\tlocal number_int = tonumber(number)\n\t\t-- If the conversion is successful,\
    \ append it to the result string.\n\t\tif number_int ~= nil then\n\t\t\tsorted_numbers\
    \ = sorted_numbers .. number\n\t\tend\n\tend\n\t-- Return the sorted string.\n\
    \treturn sorted_numbers\nend", "    local sorted_numbers = {}\n    for i, number\
    \ in ipairs(numbers:gmatch(\"(^|-)([%z]+)$\")) do\n        sorted_numbers[i] =\
    \ tonumber(number) or 0\n    end", "  local digits = nil\n  -- Parse the string\
    \ and get the set of digits.\n  digits = numbers:gsub('%s+', function(d) return\
    \ tonumber(d) end):gmatch('(%d*)')\n  if #digits < 1 then return numbers end\n\
    \  -- Convert each digit to a number and then sort the numbers\n  digits = digits:map(function(d)\
    \ return tonumber(d) end)\n  table.sort(digits)\n  return table.concat(digits)\n\
    end", "  local output = ''\n  local numbers_table = {}\n  local index\n  for index,\
    \ value in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(value))\n\
    \  end\n  table.sort(numbers_table) -- Sort the table in ascending order\n  --\
    \ Loop through the sorted table, adding each to the output string\n  for index,\
    \ value in ipairs(numbers_table) do\n    output = output .. value\n  end\n  return\
    \ output\nend", "    local result = \"\"\n    for _,number in string.gmatch(numbers,\
    \ '%w+') do\n        local index = tonumber(number) -- The numbers MUST be integers\n\
    \        if index then\n            -- If they weren't in order, this one comes\
    \ first\n            if result ~= \"\" then\n                result = result ..\
    \ \" \" .. number\n            else\n                result = number\n       \
    \     end\n        end\n    end\n    return result\nend", "   local result = {}\n\
    \   for _, num in ipairs(numbers:gmatch(\"(%S+)\")) do\n      num = tonumber(num)\n\
    \      if num then\n         result[#result + 1] = num\n      end\n   end\n  \
    \ return table.concat(result, \"\\n\")\nend", "  local numbers = tonumber(numbers)\n\
    \  if numbers ~= nil then\n    return table.sort(numbers, function(x) return x\
    \ < 9 end)\n  end\nend\n</cell>\n<text>\nExercise\nSort the numbers in the sentence\
    \ below from smallest to largest.", "    local n = 0\n    local numbers_sorted\
    \ = {}\n    for _, item in ipairs(numbers) do\n        n = tonumber(item)\n  \
    \      if n ~= nil then\n            if n < 9 then\n                table.insert(numbers_sorted,\
    \ string.format('%d\\0', n))\n            else\n                table.insert(numbers_sorted,\
    \ 'nine')\n                table.insert(numbers_sorted, string.format('%d\\0',\
    \ n / 10))\n                table.insert(numbers_sorted, string.format('%d\\0',\
    \ n % 10))\n            end\n        else\n            error(\"bad number '\"\
    \ .. item .. \"'\")\n        end\n    end\n    return table.concat(numbers_sorted,\
    \ '\\0')\nend", "   local output = ''\n   for _, number in pairs(numbers) do\n\
    \      output = output .. ' ' .. number\n   end\n   local words = output:gsub('(%w+)(%d*)(%d*)',\
    \ '\\\\1 \\\\2')\n   return words:sub(1,end)\nend", "    local result = {}\n \
    \   for _, value in ipairs(numbers) do\n        local number = tonumber(value)\n\
    \        if number ~= nil then\n            if number > 9 and number < 100 then\n\
    \                table.insert(result, number)\n            else\n            \
    \    return \"Invalid number '\" .. number .. \"'\"\n            end\n       \
    \ end\n    end\n    for _, value in ipairs(result) do\n        table.sort(result)\n\
    \    end\n    return table.concat(result, \"-\")\nend", "   local output = {}\n\
    \   for _, number in ipairs(numbers.trim().split(' ')) do\n      output[number]\
    \ = true\n   end\n   table.sort(output)\n   return table.concat(output)\nend",
  "  local numbers = numbers.split()\n  for _, value in ipairs(numbers) do\n    numbers[#numbers\
    \ + 1] = tonumber(value)\n  end\n  table.sort(numbers, function(a, b) return a\
    \ < b end)\n  return table.concat(numbers, \" \")\nend\n</code>\n<|/ a dscore=1\
    \ tags=lua,lua-table |>\n<| a dscore=1 |>\nHere is what I came up with:\n<code>",
  "    local function comp(i, j)\n        -- Compare two numbers in the sequence\n\
    \        -- We ignore leading numbers as they don't affect the sort process\n\
    \        return tonumber(numbers[i]) <  tonumber(numbers[j]) or\n            \
    \   (tonumber(numbers[i]) == tonumber(numbers[j]) and i >= j)\n    end\n    return\
    \ table.sort(table.unpack(numbers, 1, table.count(numbers) - 1), comp)\nend",
  "    local sorted_numbers = numbers\n    sorted_numbers = sorted_numbers:gsub(\"\
    %s+(.-%s)+\", function(match)\n        return sort_numbers(match)\n    end)\n\
    \    return sorted_numbers\nend", "\tlocal numbers = numbers.split(\" \"):map(function\
    \ (number)\n\t\tif number:match \"^[%d]+$\" then\n\t\t\treturn tonumber(number)\n\
    \t\telseif number:match \"^[^%d]+[%d]+$\" then\n\t\t\treturn math.max(tonumber(number),\
    \ tonumber(number):reverse())\n\t\telse\n\t\t\terror(\"Invalid number\")\n\t\t\
    end\n\tend)\n\ttable.sort(numbers)\n\treturn table.concat(numbers, \" \")\nend",
  "    local sorted = {}\n    for _, n in ipairs(string.gmatch(numbers, \"%w+\") do\
    \ table.insert(sorted, n) end)\n    return table.concat(sorted)\nend", "  for\
    \ _, number_str in ipairs(numbers.split(\" \")) do\n    local number = tonumber(number_str)\n\
    \    if number ~= nil then\n      return number\n    end\n  end\nend", "    if\
    \ numbers == nil then\n        return \"\"\n    end", "    -- TODO: handle invalid\
    \ input\n    local sorted = {}\n    for _, number in ipairs(numbers) do\n    \
    \    if number == \"zero\" then number = \"zero\" end\n        if number == \"\
    nine\" then number = \"nine\" end\n        table.insert(sorted, number)\n    end\n\
    \    table.sort(sorted)\n    return table.concat(sorted, \" \")\nend", "    if\
    \ numbers == '' then return numbers end\n    local numbers = string.gsub(numbers,\
    \ ' ', '') -- Remove spaces\n    local numbers = string.gsub(numbers, '[0-9]',\
    \ '') -- Remove numbers\n    numbers = string.gsub(numbers, '[^0123]+', '') --\
    \ Remove non 'zero'\n    local numbers = string.gsub(numbers, '^0+(?!$)', '')\
    \ -- Remove leading zeros from left hand side of string\n    local numbers = string.gsub(numbers,\
    \ '^0+([^0]+)$', '\\1') -- Add back any leading zeros from the right hand side\
    \ of string\n    return numbers:gsub('%a+', function(digits) return sort_numbers(digits)\
    \ end) -- Recursively sort numbers\nend", "  local function to_number(s)\n   \
    \ local n = tonumber(s)\n    if n ~= nil then return n end\n    return s\n  end\n\
    \  return table.sort(\n    table.unpack(\n      table.map(\n        table.unpack(\n\
    \          table.map(\n            table.unpack(numbers, 1, string.len(numbers)),\n\
    \            to_number\n          )\n        )\n      ),\n      1, #numbers\n\
    \    )\n  )\nend", "\tlocal output=''\n\tfor _ in string.gmatch(numbers, '%d')\
    \ do\n\t\toutput=output..'one '\n\tend\n\treturn output..'three '\nend", "   \
    \ local numbers_sorted_from_smallest_to_largest = {}\n    local number_list =\
    \ {}\n    local i = 0\n    local j = 0", "  local sorted_numbers = numbers:gsub('%w+',\
    \ '%1,'):gsub('%d+', '%1,'):gsub('%d+,%d+', '%1,%2')\n  sorted_numbers = sorted_numbers:gsub('%1,%2,',\
    \ ''):gsub('%1,%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,%d,',\
    \ ''):gsub('%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,',\
    \ ''):gsub('%d,%d,', ''):gsub('%d,%d,', ''):gsub('%d,', ''):gsub('%d,%d,', '')\n\
    \  sorted_numbers = sorted_numbers:gsub('%d,', ''):gsub('%d,%d,', ''):gsub('%d,%d,',\
    \ ''):gsub('%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,',\
    \ ''):gsub('%d,%d,', ''):gsub('%d,%d,', ''):gsub('%d,', ''):gsub('%d,%d,', '')\n\
    \  sorted_numbers = sorted_numbers:gsub('%d,', ''):gsub('%d,%d,', ''):gsub('%d,%d,',\
    \ ''):gsub('%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,',\
    \ ''):gsub('%d,%d,', ''):gsub('%d,%d,', ''):gsub('%d,', ''):gsub('%d,%d,', '')\n\
    \  sorted_numbers = sorted_numbers:gsub('%d,', ''):gsub('%d,%d,', ''):gsub('%d,%d,',\
    \ ''):gsub('%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,',\
    \ ''):gsub('%d,%d,', ''):gsub('%d,%d,', ''):gsub('%d,', ''):gsub('%d,%d,', '')\n\
    \  sorted_numbers = sorted_numbers:gsub('%d,', ''):gsub('%d,%d,', ''):gsub('%d,%d,',\
    \ ''):gsub('%d,', ''):gsub('%d,%d,', '')\n  sorted_numbers = sorted_numbers:gsub('%d,',\
    \ ''):gsub('%d,%d,', ''):gsub('", "    local numbers = numbers:lower()\n    local\
    \ digits = {}\n    local string = ''\n    local positions = { }\n    local position\
    \ = 0\n    local digit\n    local position\n    for _, digit in ipairs(numbers)\
    \ do\n        -- Find the smallest position that a digit occurs\n        positions[digit]\
    \ = positions[digit] or 1\n        if positions[digit] < positions[digit] then\n\
    \            position = positions[digit]\n        end\n        positions[digit]\
    \ = positions[digit] + 1\n    end\n    -- Build the string representation of the\
    \ numbers sorted from smallest to largest\n    for _, digit in ipairs(numbers)\
    \ do\n        -- Add the number to the string\n        if positions[digit] ==\
    \ 1 then\n            string = string .. digit\n        else\n            string\
    \ = string .. ' ' .. digit\n        end\n        -- And place it at the correct\
    \ position in the string\n        local num_position = positions[digit]\n    \
    \    position = position - 1\n        while position and position >= 0 and num_position\
    \ > positions[digit] do\n            position = position - 1\n        end\n  \
    \      positions[digit] = position\n    end\n    return string\nend", "    local\
    \ new_numbers = \"\"\n    local positions = {\n        [0] = 0,\n        [1] =\
    \ 0,\n        [2] = 0,\n        [3] = 0,\n        [4] = 0\n    }", "    local\
    \ words = string.explode(' ', numbers)\n    table.sort(words, function(a, b) return\
    \ tonumber(a) < tonumber(b) end)\n    return table.concat(words)\nend", "  local\
    \ sorted = {}\n  for _, number in ipairs(numbers) do\n    table.insert(sorted,\
    \ tonumber(number))\n  end\n  table.sort(sorted)\n  local result = {}\n  for _,\
    \ number in ipairs(sorted) do\n    table.insert(result, tostring(number))\n  end\n\
    \  return table.concat(result,\" \")\nend", "  local numbers = numbers.split('\
    \ ')\n  for i = #numbers, 1, -1 do\n    local temp = tonumber(numbers[i])\n  \
    \  if temp >= 0 and temp <= 9 then\n      table.insert(numbers, temp)\n    end\n\
    \  end\n  return table.concat(numbers, ' ')\nend", "    -- Remove spaces and split\
    \ into tokens\n    local tokens = numbers:gsub(' ','')\n    -- Convert tokens\
    \ into numbers and store them in nums\n    local nums = {}\n    for token in tokens:gmatch('%d+')\
    \ do\n        table.insert(nums,tonumber(token))\n    end\n    -- Sort the numbers\
    \ from smallest to largest\n    table.sort(nums)\n    return table.concat(nums)\n\
    end", "  local numbers_array = numbers.split(\" \"):map(function (number)\n  \
    \  return tonumber(number)\n  end)\n  table.sort(numbers_array)\n  return table.concat(numbers_array)\n\
    end", "  local sorted = {}\n  local words = string.split(numbers, \" \")\n  for\
    \ _, word in ipairs(words) do\n    table.insert(sorted, tonumber(word))\n  end\n\
    \  table.sort(sorted, function(a, b) return a < b end)\n  local result = {}\n\
    \  for _, item in ipairs(sorted) do\n    table.insert(result, item)\n  end\n \
    \ return table.concat(result)\nend", "  local sort_numbers = ''\n  local nums",
  "  local sorted_numbers = {}\n  for _, s in string.gmatch(numbers, '(%d+)') do\n\
    \    if tonumber(s) ~= nil then\n      table.insert(sorted_numbers, tonumber(s))\n\
    \    end\n  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers,\
    \ \" \")\nend", "\tlocal nNumbers = tonumber(numbers)\n\tif (nNumbers == 0) or\
    \ (nNumbers < 0) then\n\t\tnumbers = \"\"\n\telse\n\t\tnumbers = numbers:gsub(\"\
    ^%S+\", \"\"):gsub(\"%S+$\", \"\")\n\t\tlocal numberArray = numbers:split(\" \"\
    )\n\t\tlocal sortedNumbers = {}\n\t\tfor i = 1, nNumbers do\n\t\t\tsortedNumbers[numberArray[i]]\
    \ = numberArray[i]\n\t\tend\n\t\tnumbers = table.concat(sortedNumbers)\n\tend\n\
    \treturn numbers\nend", "  local number_strings = {\n    zero = true,\n    one\
    \ = true,\n    two = true,\n    three = true,\n    four = true,\n    five = true,\n\
    \    six = true,\n    seven = true,\n    eight = true,\n    nine = true\n  }\n\
    \  local numbers_as_ints = {}\n  local sorted_numbers = numbers\n  for i = 1,#numbers\
    \ do\n    local number = tonumber(numbers[i])\n    if not number_strings[number]\
    \ then\n      numbers_as_ints[#numbers_as_ints+1] = number\n    end\n  end\n \
    \ table.sort(numbers_as_ints)\n  for i = 1,#numbers do\n    sorted_numbers[i]\
    \ = numbers_as_ints[i]\n  end\n  return table.concat(sorted_numbers)\nend", " \
    \ local list = {}\n  for word in words:gmatch(\"%w+\") do list[word] = true end\n\
    \  local function compare(a,b) return list[a] and list[b] end\n  return words:gsub(\"\
    %w+\", \" \"):gsub(\"%w+\", \" \")\n            :gsub(\"%w+\")\n            :gsub(\"\
    %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ \"):gsub(\"%w+\")\n            :gsub(\"\
    %w+ %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ \"):gsub(\"%w+\")\n    \
    \        :gsub(\"%w+ %w+ %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+\
    \ \"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+\"):gsub(\"%w+\")\n  \
    \          :gsub(\"%w+ %w+ %w+ %w+ \"):gsub(\"%w+\")\n            :gsub(\"%w+\
    \ %w+ %w+ %w+ %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+ %w+ \"\
    ):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+ %w+ %w+\"):gsub(\"%w+\")\n\
    \            :gsub(\"%w+ %w+ %w+ %w+ %w+ %w+ \"):gsub(\"%w+\")\n            :gsub(\"\
    %w+ %w+ %w+ %w+ %w+ %w+ %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+\
    \ %w+ %w+ %w+ %w+ \"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+ %w+ %w+\
    \ %w+ %w+\"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+ %w+ %w+ %w+ %w+\
    \ \"):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w+ %w+ %w+ %w+ %w+ %w+ %w+\"\
    ):gsub(\"%w+\")\n            :gsub(\"%w+ %w+ %w", "    local sortedNumbers = {}\n\
    \    local lastNumber = 0", "    local numbers = string.gsub(numbers, '%S+', '')\n\
    \    local n = tonumber(numbers)\n    if not n then\n        return nil\n    end\n\
    \    local digits = {}\n    local i = 1\n    while n do digits[i] = n % 10 or\
    \ 10 end\n    i = 1\n    while n do\n        digits[i] = string.sub('0', digits[i]\
    \ > 0 and digits[i] - 1 or digits[i], digits[i])\n        digits[i + 1] = digits[i\
    \ + 1] > 0 and digits[i + 1] - 1 or digits[i + 1]\n        i = i + 1\n       \
    \ n = n // 10\n    end\n    table.sort(digits, function(a, b) return a < b end)\n\
    \    return table.concat(digits, \" \")\nend", "  local numbers = numbers:gsub('([^\
    \ ]+)', '\\\\1')\n  return numbers:gsub('%d+', '%09d'):gsub('%0D+', '%0A%0D'):gsub('%0A+',\
    \ '%0A%0A%0A%0A')\nend", "  -- Initialize our new list\n  local new_list = {}\n\
    \  -- Split the string into a table of strings based on space\n  -- The string\
    \ split function can take more than one parameter and you can split on more than\
    \ one separator\n  for n in string.gmatch(numbers, '%w') do\n    -- If the number\
    \ is not valid then we skip it\n    if string.match(n, '^[%d]+$') then\n     \
    \ -- Convert our number to a number\n      n = tonumber(n)\n      -- If the number\
    \ is valid then add it to the list\n      if n ~= nil then\n        new_list =\
    \ new_list .. n\n      end\n    end\n  end\n  -- Sort our new list from smallest\
    \ to largest\n  table.sort(new_list)\n  -- Return the list as a string\n  return\
    \ table.concat(new_list, \" \")\nend", "  local n = table.concat(numbers:split('\
    \ '))\n  n = table.sort(n)\n  return table.concat(n)\nend", "  local function\
    \ str_num(num)\n    return table.concat(num, \"-\")\n  end\n  \n  local numbers_table\
    \ = numbers:gsub(\"^%s*(%w+)-(%w+)$\", \"\\2-\\1\")\n  \n  return numbers_table:gsub(\"\
    ([^-]-)\", str_num):gsub(\"-+$\", \"\")\nend", "    local sorted_numbers = \"\"\
    \n    for number_ in numbers.words:gmatch(\"%w+\") do\n        sorted_numbers\
    \ = sorted_numbers + number_ .. \" \"\n    end\n    sorted_numbers = sorted_numbers:sub(2)\n\
    \    return sorted_numbers\nend", "  local t = {}\n  for _, v in pairs(numbers..\"\
    \ \") do\n    table.insert(t, tonumber(v))\n  end\n  table.sort(t, function(a,\
    \ b) return a - b end)\n  table.insert(t, 10)\n  table.insert(t, 1)\n  return\
    \ table.concat(t, \" \")\nend", "  local sorted_numbers = {}\n  for i,v in ipairs(split(numbers,\
    \ \" \")) do\n    sorted_numbers[v] = i + 1\n  end\n  table.sort(sorted_numbers)\n\
    \  return table.concat(sorted_numbers, \" \")\nend", "   assert(type(numbers)\
    \ == \"string\")\n   local words = numbers.split(\" \")\n   for i = 1, #words\
    \ do\n      words[i] = tonumber(words[i])\n   end\n   table.sort(words)\n   return\
    \ table.concat(words)\nend", "\tlocal result = ''\n\tfor _, value in ipairs(numbers)\
    \ do\n\t\tlocal digit = tonumber(value)\n\t\tif not digit then\n\t\t\terror()\n\
    \t\telse\n\t\t\tresult = result .. string.format(\"%s%lu\", value, digit)\n\t\t\
    end\n\tend\n\treturn result\nend", "  local n\n  for n in numbers:gmatch(\"%w+\"\
    ) do\n    local s = tonumber(n)\n    if s ~= nil then\n      if s <= 9 then\n\
    \        n = s:string()\n      else\n        n = (10 * s):string()\n      end\n\
    \    end\n  end\n  return n\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThe answers\
    \ above did not work for me.\nWhat I ended up doing is this\n<code>", "    local\
    \ numbers_table = numbers.split(\" \")\n    local numbers_length = len(numbers_table)\n\
    \    if numbers_length < 1 then return nil end\n    if numbers_length > 9 then\
    \ return nil end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ \" \")\nend", "    local sorted_numbers = \"\"\n    for index, value in string.gmatch(numbers,\
    \ \"(^| )(%d*)( |$)\") do\n        sorted_numbers = sorted_numbers & value\n \
    \   end\n    return sorted_numbers\nend", "  local numbers_copy = numbers -- make\
    \ a copy to avoid side effects\n  local numbers = \"\" -- string to be filled\n\
    \  while numbers_copy do\n    local current_number = numbers_copy:sub(1,-1)\n\
    \    -- Check if this is a valid number\n    -- Ignore negative numbers\n    if\
    \ tonumber(current_number) > 0 then\n      -- Check if number is larger than the\
    \ previous\n      if tonumber(numbers) then\n        local previous_number = tonumber(numbers)\n\
    \        if previous_number > current_number then\n          -- append the new\
    \ number to the end of the numbers\n          numbers = numbers + current_number\n\
    \        else\n          -- append the current number to the end of the numbers\n\
    \          numbers = numbers + ' ' .. current_number\n        end\n      else\n\
    \        -- Append the number to the numbers\n        numbers = numbers + current_number\n\
    \      end\n    end\n    -- Delete first number if there's only one number\n \
    \   numbers_copy = numbers_copy:sub(2)\n  end\n  return numbers\nend", "    local\
    \ sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        local number_parts\
    \ = numbers:match(\"^%d(.+)$\")\n        table.insert(sorted_numbers, tonumber(number_parts[1]))\n\
    \    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers)\n\
    end", "  local numbers = string.gsub(numbers, \"[^0 -9 ]\", \"\")\n  local numbers\
    \ = table.sort(numbers, function(a, b) return a < b end)\n  return table.concat(numbers,\
    \ \"\\n\")\nend", "  local n=0\n  local sorted_numbers = ''\n  local digits\n\
    \  for i,v in ipairs(numbers..\" \") do\n    digits=tonumber(v)\n    if digits\
    \ then\n      if n==0 then\n        sorted_numbers = v\n      else\n        if\
    \ digits > sorted_numbers[-1] then\n          sorted_numbers = v\n        end\n\
    \      end\n      n=n+1\n    end\n  end\n  return sorted_numbers\nend", "  for\
    \ i = 1, #numbers do\n    if tonumber(numbers[i]) < tonumber(numbers[i+1]) then\n\
    \      table.remove(numbers, i)\n    end\n  end\n  return table.concat(numbers)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
