name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
  -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local count = #s\n\
    \  for _, v in ipairs(vowels) do\n    if s[#s] ~= v then\n      count = count\
    \ - 1\n    end\n  end\n  return count\nend", "  -- Write your code below this\
    \ line\n  local vowels = ''\n  for v in string.gmatch(s, '[aeiouAEIOU]') do\n\
    \    vowels = vowels .. v\n  end\n  s = vowels\n  return string.gsub(s, vowels,\
    \ '')\nend", "  s = s:lower()\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ vowel_count = 0\n  for i=1,#s do\n    if vowels[s[i]:lower()] then vowel_count\
    \ = vowel_count + 1 end\n  end\n  return vowel_count\nend", "  -- Initialize the\
    \ counter to 0.\n  local count = 0\n  -- Iterate over the letters.\n  for i =\
    \ 1, #s do\n    -- Get the current letter.\n    local c = s[i]\n    -- If this\
    \ letter is 'y'.\n    if c == 'y' then\n      -- Get the next letter.\n      c\
    \ = s[i + 1]\n    end\n    -- If the letter is in the vowels.\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      -- Increment the\
    \ counter by 1.\n      count = count + 1\n    end\n  end\n  -- Return the number\
    \ of vowels.\n  return count\nend", "  local count = #s -- Get length of string\n\
    \  for i = 1, #s do\n    -- Check if current character is a vowel\n    if string.sub(s,i,i)\
    \ == \"a\" then\n      count = count - 1\n    end\n    if string.sub(s,i,i) ==\
    \ \"e\" then\n      count = count - 1\n    end\n    if string.sub(s,i,i) == \"\
    i\" then\n      count = count - 1\n    end\n    if string.sub(s,i,i) == \"o\"\
    \ then\n      count = count - 1\n    end\n    if string.sub(s,i,i) == \"u\" then\n\
    \      count = count - 1\n    end\n  end\n  return count\nend", "  return string.gsub(s,\
    \ vowels, function(c) return c + 1 end)\nend", "  local count = 0; -- Use a local\
    \ variable instead of an accumulator to prevent accidental updates.\n  for w in\
    \ string.gmatch(s, '[aeiouAEIOUY]') do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  local vowels = 'aeiou'\n  local count = 0\n  for _,v in pairs(s)\
    \ do count = count + 1 end\n  return count / #vowels\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'a' and\n      string.sub(s,\
    \ i, i) ~= 'e' and\n      string.sub(s, i, i) ~= 'i' and\n      string.sub(s,\
    \ i, i) ~= 'o' and\n      string.sub(s, i, i) ~= 'u'\n    then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "\tlocal vowels = \"aeiouy\"\
    \n\tlocal count = 0\n\tfor i, c in string.gmatch(s, \"%a\") do\n\t\tif string.find(vowels,\
    \ c) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ i = 0\n  while true do\n    if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or\
    \ s[i] == 'o' or s[i] == 'u' then\n      i = i + 1\n      elseif s[i] == 'y' then\n\
    \        i = i + 1\n      end\n    end\n    if i == #s then\n      return 1\n\
    \    end\n  end\nend", "  -- base case\n  if s == '' then\n    return 0\n  end\n\
    \  -- recursively call vowels_count function until length of s is 1\n  -- since\
    \ each character of a word has a vovel\n  return s + vowels_count(substring(s,\
    \ 1, -1))\nend", "  local vowels = 'aeiou'\n  local count = 0\n  for char in s:gmatch\
    \ '[aeiouy]'\n  do\n    count = count + 1\n  end\n  return count\nend", "   s\
    \ = string.lower(s)\n   local vowels = {}\n   for _, c in ipairs(string.gmatch(s,\
    \ '[aeiou]+')) do\n      table.insert(vowels, c)\n   end\n   return table.count(vowels,\
    \ 'y')\nend", "  return string.gsub(s, \"[aeiou]\", function (c) return c == \"\
    y\" end) + 1\nend", "\tlocal count = 0\n\tfor c in s:gmatch(\"[aeiouAEIOU]\")\
    \ do\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "  -- base case: when\
    \ s is a vowel\n  if s == \"a\" or s == \"e\" or s == \"i\" or s == \"o\" or s\
    \ == \"u\" then\n    return 1\n  else\n    -- recursion case: keep reducing the\
    \ string by only adding characters\n    -- that belong to a vowel\n    return\
    \ s + vowels_count(s:sub(1, #s))\n  end\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local n = #s\n  local c = 0\n  for i = 1, n do\n    if not vowels[s[i]]\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend", "    local vowels =\
    \ { 'a','e','i','o','u' }\n    local vowel_counter = 0\n    for c in s do\n  \
    \      if vowels[c] then\n            vowel_counter = vowel_counter + 1\n    \
    \    end\n    end\n    return vowel_counter\nend", "  return s:gsub('([aeiou])y$','\\\
    \\1'):gsub('([aeiou])$','\\\\1'):gsub('y','\\\\1'):gsub('([^aeiou])y','\\\\1'):gsub('([^aeiou])','\\\
    \\1')\nend", "  return #(s:gsub('[aieouy]','').)\nend", "  local count = 0\n \
    \ for _,c in string.gmatch(s, '%v') do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  s = string.gsub(s, '.', '..')\n  return string.gsub(string.format('[%s]',\
    \ s), '[aeiou]', function(m)\n    return m:sub(2)\n  end)\nend", "   s = string.lower(s)\n\
    \   local vowels = {'a','e','i','o','u'}\n   local count = 0\n   for _, v in pairs(vowels)\
    \ do\n      if string.sub(s, 1, string.len(v)) == v then\n         count = count+1\n\
    \      end\n   end\n   return count\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local vowelscount = 0\n  for letter in string.gmatch(s, '([aeiou])[aeiou]+$')\
    \ do\n    vowelscount = vowelscount + 1\n  end\n  return vowelscount\nend", " \
    \ local vowels = {}\n  for c in string.gmatch(s, '[aeiouAEIOUYaeiouy]') do\n \
    \   table.insert(vowels, c) -- insert the letter into the vowel table.\n  end\n\
    \  return #vowels\nend", "  return string.gsub(s, \"[aeiou]\", \"%1\", s)\nend",
  "  return string.gsub(s, '[aeiouy]*$', '') -- '*$' matches the end of the string\n\
    end", "  local vowels = {'a','e','i','o','u'}\n  local vowels_count = 0\n  for\
    \ _,v in ipairs(s) do\n    vowels_count = vowels_count + 1 if (v in vowels) or\
    \ v == 'y' end\n  end\n  return vowels_count\nend", "    return string.len(string.gsub(s,\
    \ \"a\", \"*a\"));\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowel_count = 0\n    for w in s:gmatch('[%a]') do\n        if vowels[w] ~= nil\
    \ then\n            vowel_count = vowel_count + 1\n        end\n    end\n    return\
    \ vowel_count\nend", "  return string.gsub(s, \"[aieuoy]\", \"\") .. string.len(string.gsub(s,\
    \ \".\", \"\"))\nend", "   local count = 0\n   for i = 1, #s do\n      if s[i]\
    \ == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n  \
    \       count = count + 1\n      end\n   end\n   return count\nend", "    -- Use\
    \ a loop to traverse the string.\n    for _, c in pairs(s) do\n        if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local vowels\
    \ = 'aeiouAEIOU'\n    return #(s:gsub('[%s%s]', '')) - #(s:gsub(vowels, '')) +\
    \ 1\nend", "\tlocal vowels = {'a','e','i','o','u'}\n\tlocal count = 0\n\tfor i=1,#s\
    \ do\n\t\tif vowels[string.sub(s,i,i)] then\n\t\t\tcount = count+1\n\t\tend\n\t\
    end\n\treturn count\nend", "  -- Write your code here\n  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local total = 0\n  for i = 1, #s do\n      if vowels[string.sub(s,i,i)]\
    \ ~= nil then\n          total = total + 1\n      end\n  end\n  return total\n\
    end", "    return string.gsub(s, [\n        '[^aeiouy]+',\n        '^'\n    ],\
    \ function(s)\n        return #s == '' and 0 or\n               #s == '' or #s\
    \ == 'y' and 1 or\n               #s == 'y' or #s == 'Y' and 2\n    end)\nend",
  "  s = string.lower(s)\n  local vowels = 'aeiou'\n  local vowels_count = 0\n  for\
    \ i=1,#s do\n    if string.sub(s,i,i) == vowels then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  local vowel_count = 0\n  for i = 1, #s do\n    if vowels[s[i]] then vowel_count\
    \ = vowel_count + 1 end\n  end\n  return vowel_count\nend", "    return #string.gmatch(s,\
    \ '[aeiou]y') and #string.gmatch(s, '[^a]') or 0\nend", "  s = s:lower()\n  return\
    \ string.gsub(s, '[aeiou]', function(c) return c == 'y' end)\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = 1\n    for i = 1, #s\
    \ do\n        if vowels[s[i]] then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend", "  s = s:lower() -- Converts to lowercase\n\
    \  -- The following line uses Python's string methods to solve the problem\n \
    \ return s:find('[aeiou]', 1, true) - s:find('[aeiou]', 1, true+1) -- Returns\
    \ number of vowels\nend", "    local count = 0\n    \n    for letter in string.gmatch(s,\
    \ '%w') do\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter\
    \ == 'o' or letter == 'u' then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "  return string.gsub(s, '[aeiouAEIOUY]', '')\n\
    end", "    return string.gsub(s, [[aAoOuU]], [[%d]]) * string.len(s)\nend", " \
    \  s = string.lower(s)\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local\
    \ count = #s\n   for i, v in ipairs(vowels) do\n      if v ~= 'y' and string.find(s,\
    \ v .. 'y') then\n\t count = count - 1\n      end\n   end\n   return count\nend",
  "  local vowels = {'a','e','i','o','u'}\n  local n = 0\n  for i = 1, #s do\n   \
    \ if vowels[string.sub(s,i,i)] then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend", "  s = string.lower(s)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local vowel_count = 0\n  for i = 1, #s do\n    if s[i] == 'a' then\n      if\
    \ i+1 == #s then break end\n      if string.lower(s[i+1]) ~= 'y' then\n      \
    \  vowel_count = vowel_count + 1\n      end\n    end\n  end\n  return vowel_count\n\
    end", "\tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowel_count = 0\n\tfor\
    \ i,v in pairs(vowels) do\n\t\tif (string.find(s,v,1,true) and (i == #s or string.sub(s,i+1,i)\
    \ == 'y')) then\n\t\t\tvowel_count = vowel_count + 1\n\t\tend\n\tend\n\treturn\
    \ vowel_count\nend", "  s = string.lower(s)\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  return #(s:gsub('(.)%w', function(c) vowels[c:sub(1, 1)] end))\
    \ --  %w matches any letter, while (.) matches only letter (.)%w matches word\
    \ character before vowel.\nend", "    -- Write your function here\n    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local result = {}\n    for i=1, #s do\n   \
    \     for vowel, index in pairs(vowels) do\n            if string.sub(s,i,i+index)\
    \ == vowel then\n                table.insert(result,i)\n                break\n\
    \            end\n        end\n    end\n    return #result\nend", "    local vowels\
    \ = 'aeiou'\n    local count = 0", "  local count = 0\n  for word in string.gmatch(s,\
    \ '[aeiouAEIOU]') do\n    if word ~= '' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local count = 0\n  for w in string.gmatch(s, '%a') do\n    if vowels[w] then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  return string.gsub(s,\
    \ \".[aeiou]\", \"\")\nend", "  local vowels = {}\n  for i = 1, #s do\n    if\
    \ s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n\
    \      table.insert(vowels, s[i])\n    end\n  end\n  local vowel_count = #vowels\n\
    \  -- remove the last vowel\n  if vowels[#vowels] ~= 'y' then\n    table.insert(vowels,\
    \ 'y')\n    vowel_count = vowel_count + 1\n  end\n  return vowel_count\nend",
  "    local vowels = {'a','e','i','o','u'}\n    local n = 0\n    for i=1,#s do\n\
    \        if vowels[s:sub(i,i)] then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ count = 1", "    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ v in s:gmatch(\"[%a]\") do return vowels[#vowels + 1] or v end\nend", "  if\
    \ s == nil then return 0 end\n  local count = {}\n  for _, c in pairs(s) do\n\
    \    count[c]=1\n  end\n  for c='a','e','i','o','u' do\n    if count[c] > 0 then\n\
    \      count[c] = count[c] - 1\n      break\n    end\n  end\n  return #count\n\
    end", "  return string.gsub(s, '[aeiouyAEIOUY]', function(w)\n    local count\
    \ = string.len(w)\n    if #w == 1 then\n      if w[1] == 'y' then\n        count\
    \ = count + 1\n      end\n    end\n    return count\n  end)\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    count = count + count_vowel(s:sub(i, i))\n  end\n\
    \  return count\nend", "  -- Write your code in here\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local count = #s -- get the length\n  for i = 1, count do\
    \ -- loop through the string\n    for j = 1, #vowels do -- loop through the vowels\n\
    \      if s[i] ~= vowels[j] then -- if the letter doesn't equal a vowel\n    \
    \    return count -- return count\n      end\n    end\n  end\n  return count --\
    \ return the count\nend", "  s = string.lower(s)\n  local vowels = {}\n  for i=1,#s\
    \ do\n    if string.sub(s,i,i) ~= 'y' then\n      table.insert(vowels,string.sub(s,i,i))\n\
    \    end\n  end\n  return #vowels\nend", "    local vowels = {}\n    for i = 1,\
    \ #s do\n        if string.sub(s,i,i) == 'a' or string.sub(s,i,i) == 'e' or string.sub(s,i,i)\
    \ == 'i' or\n           string.sub(s,i,i) == 'o' or string.sub(s,i,i) == 'u' then\n\
    \            table.insert(vowels, i)\n        end\n    end\n    return #vowels\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for char\
    \ in s:gmatch'([^%s]+)' do\n    if vowels[char] then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "   local vowels = {\n      'a',\n    \
    \  'e',\n      'i',\n      'o',\n      'u',\n      'y',\n   }\n   local n = 0\n\
    \   for i = 1, #s do\n      local c = s:sub(i,i)\n      if vowels[c] then\n  \
    \       n = n + 1\n      end\n   end\n   return n\nend", "    local vowels = {\n\
    \        'a',\n        'e',\n        'i',\n        'o',\n        'u'\n    }\n\
    \    local vowels_count = 0\n    for letter = 1, #s do\n        if string.sub(vowels,\
    \ letter) == s[letter] then\n            vowels_count = vowels_count + 1\n   \
    \     end\n    end\n    return vowels_count\nend", "  -- your code here\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend", "  local count = 0\n  for char in s:gmatch(\"\
    [aeiouy]*y\") do\n    count = count + 1\n  end\n  return count\nend", "  local\
    \ count=0\n  for w in s:gmatch'[^aeiou]' do count=count+1 end\n  return count\n\
    end", "   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local result = 1\n   for\
    \ i = 1, #s do\n      if vowels[s[i]:sub(1,1)] then\n         result = result\
    \ + 1\n      end\n   end\n   return result\nend", "    local count=0\n    local\
    \ j=0\n    for i=1,#s do\n        if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o'\
    \ or s[i]=='u' then\n            count=count+1\n        else\n            if j==0\
    \ then\n                j=1\n            else\n                j=0\n         \
    \   end\n        end\n    end\n    return count\nend", "  return #s:gsub('[^aeiouAEIOUY]'):gsub('e',\
    \ '') + 1\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    return #vowels\
    \ - #s:gsub('[^' .. table.concat(vowels, '|') .. ']', '')\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local count = 0\n  s:gsub('([' .. table.concat(vowels,\
    \ ',') .. '])', function(vowel)\n    count = count + 1\n  end)\n  return count\n\
    end", "  return string.gsub(s, '[aeiou]', '').\n           char.\n           reverse:gsub('.$',\
    \ ''):gsub('%Z', ''):gsub('%z', ''):gsub('%Z'):gsub('%z').\n           length:gsub('%z',\
    \ ''):gsub('%z'):gsub('%Z'):gsub('%z'):gsub('%z'):gsub('%z').\n           gsub('%z',\
    \ ''):gsub('%z'):gsub('%Z'):gsub('%z'):gsub('%z'):gsub('%z').\n           gsub('%Z',\
    \ ''):gsub('%z'):gsub('%Z'):gsub('%z'):gsub('%z'):gsub('%z').\n           gsub('%z',\
    \ ''):gsub('%z'):gsub('%Z'):gsub('%z'):gsub('%z'):gsub('%z').\n           gsub('%Z',\
    \ ''):gsub('%z'):gsub('%Z'):gsub('%z'):gsub('%z'):gsub('%z')\nend", "  if s ==\
    \ nil then\n    return nil\n  end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local vowels_count = 0\n  for i = 1, #s do\n    local char = s:sub(i, i)\n\
    \    for _, v in pairs(vowels) do\n      if char == v then\n        vowels_count\
    \ = vowels_count + 1\n        break\n      end\n    end\n  end\n  return vowels_count\n\
    end", "  local count = 0\n  for _, c in pairs(s) do\n    if c == 'a' then count\
    \ = count + 1 end\n    if c == 'e' then count = count + 1 end\n    if c == 'i'\
    \ then count = count + 1 end\n    if c == 'o' then count = count + 1 end\n   \
    \ if c == 'u' then count = count + 1 end\n    if c == 'y' then count = count +\
    \ 1 end\n  end\n  return count\nend", "   local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n   return (string.find(s,'[^' .. table.concat(vowels, ',') .. ']')==0\
    \ and #s)\n      - (string.find(s,'[^' .. table.concat(vowels, ',') .. ']')==0\
    \ and string.find(s,'[^' .. table.concat(vowels, '[', '[', ']', '^') .. ']')==0\
    \ and string.find(s,'[^' .. table.concat(vowels, '[', '[', ']', '^', '[', ']',\
    \ '^') .. ']')==0)\nend", "  local vowels = ''\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) == 'a' or string.sub(s, i, i) == 'e' or string.sub(s, i, i) == 'i' or\
    \ string.sub(s, i, i) == 'o' or string.sub(s, i, i) == 'u' then\n      vowels\
    \ = vowels .. string.sub(s, i, i)\n    end\n  end\n  return string.len(vowels)\n\
    end", "  return string.gsub('%(^|[^aeiou])[aeiou]', \n    '(%1)', s)\nend", " \
    \ local vowels = {}\n  for w in string.gmatch(s, '([^%s]+)') do table.insert(vowels,\
    \ w) end\n  local count = #vowels\n  for i=2,#s do\n    if s[i] == 'a' or s[i]\
    \ == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n      count = count+1\n\
    \    end\n  end\n  return count\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local vowels_count = 0\n  local i, j = 1, #s", "   local count = 0\n\
    \   for _, v in ipairs(s:gsub(\"[aeiouy]+$\", \"y\")) do\n      count = count\
    \ + 1\n   end\n   return count\nend", "  local vowels = {\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n  local count = 0\n  for letter in string.gmatch(s, \"[^\" ..\
    \ table.concat(vowels, \",\") .. \"]\") do\n    if letter:sub(1, 1) ~= letter\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ vowels = \"aeiou\"\n  local count\n  for i = 1, #s do\n    if string.sub(vowels,\
    \ i, i) ~= '' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "   local count = 0\n   for i = 1, #s do\n      if s[i] == 'a' or s[i] ==\
    \ 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n         count = count\
    \ + 1\n      end\n   end\n   return count\nend", "   for _, letter in string.gmatch(s,\
    \ '[aeiouAEIOUY]') do\n      s = string.gsub(s, '[' .. letter .. ']', '')\n  \
    \ end\n   return string.len(s)\nend", "  if s == nil then\n    return 0\n  end\n\
    \  local vowels = {\n    ['A'] = true,\n    ['E'] = true,\n    ['I'] = true,\n\
    \    ['O'] = true,\n    ['U'] = true,\n  }\n  for i = 0, #s do\n    if vowels[string.sub(s,\
    \ i, i)] then\n      return i + 1\n    end\n  end\n  return 1\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local counter = 1\n    for i = 1, #s\
    \ do\n        if s[i] ~= 'y' and s[i] ~= s[#s] then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "  s = string.lower(s)\n\
    \  return string.gsub(s, '.', '..').\n          gsub('c..', '..').\n         \
    \ gsub('e..', '..').\n          gsub('i..', '..').\n          gsub('o..', '..').\n\
    \          gsub('u..', '..').\n          gsub('y..', '..').\n          gsub('aa',\
    \ 'a').\n          gsub('ee', 'e').\n          gsub('ii', 'i').\n          gsub('oo',\
    \ 'o').\n          gsub('uu', 'u').\n          gsub('yy', 'y').\n          gsub('zz',\
    \ '')\nend", "    local count = 0\n    for c in s:gmatch \"a|e|i|o|u\" do count\
    \ = count + 1 end\n    return count\nend", "  -- Write your solution here (within\
    \ 5 minutes).\nend", "    return #s ~= 0 and 'aeiou' == { [s,#s] or '' }\nend",
  "  local vowels = {'a','e','i','o','u'}\n  local vowel_count = 0\n  for i,v in ipairs(s)\
    \ do\n    if v ~= nil then\n      vowel_count = vowel_count + 1\n      if v ~=\
    \ vowels[#vowels] then\n        vowel_count = vowel_count - 1\n      end\n   \
    \ end\n  end\n  return vowel_count\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  local count = 0\n  for i=1,#s do\n    if vowels[s[i]] == true then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local vowels = ''\n  for\
    \ i = 1, #s do\n    local c = s:sub(i,i)\n    if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n      vowels = vowels .. c\n    end\n  end\n\
    \  return #vowels - 1\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ y = 0\n  for _, _ in pairs(s:gmatch'[aeiou]+') do\n    y = y + 1\n  end\n  if\
    \ s:sub(-y) ~= '' then\n    return y\n  end\n  return 0\nend", "   if s == nil\
    \ then\n      return\n   end", "\t-- TODO: Implement vowels_count here\n\treturn\
    \ 0\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~=\
    \ 'a' then\n      if string.sub(s,i,i) ~= 'e' then\n        if string.sub(s,i,i)\
    \ ~= 'i' then\n          if string.sub(s,i,i) ~= 'o' then\n            if string.sub(s,i,i)\
    \ ~= 'u' then\n              count = count + 1\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    count = count + ( string.sub(s,i,i) == 'a' or\n\
    \t\t\t  string.sub(s,i,i) == 'e' or\n\t\t\t  string.sub(s,i,i) == 'i' or\n\t\t\
    \t  string.sub(s,i,i) == 'o' or\n\t\t\t  string.sub(s,i,i) == 'u' )\n  end\n \
    \ return count\nend", "  -- Write your code here\n  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s do\n    if string.sub(vowels,\
    \ i, i) ~= nil then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  s = string.lower(s)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ count = 0\n  for i=1,#s do\n    if vowels[string.sub(s,i,i)] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ char in string.gmatch(s, \"[^aeiouy]\") do\n    count = count + 1\n  end\n \
    \ return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowels_count = 0\n    for i,c in string.gmatch(s, \"([^%s]+)\") do\n       \
    \ if vowels[c] then\n            vowels_count = vowels_count + 1\n        end\n\
    \    end\n    return vowels_count\nend", "  local vowels = {\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n  local count = {}\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c == \"y\" then\n      c = s:sub(i + 1, i + 2)\n    end\n    if vowels[c]\
    \ then\n      table.insert(count, vowels[c])\n    end\n  end\n  return #count\n\
    end", "  return string.gsub(s, \"[aeiouAEIOUY]\", \"\") .. \"y\" and\n     string.gsub(s,\
    \ \"[aeiouAEIOUY]y\", \"\")\nend", "   local count=0\n   for i=1,#s do\n     \
    \ if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u' then\n    \
    \     count=count+1\n      end\n   end\n   return count\nend", "   -- Write your\
    \ code here.\n   return 0\nend", "    local count=0\n    for w in s:gmatch(\"\
    [aeiouyAEIOUY]\") do\n        if w == \"y\" then\n            count = count+1\n\
    \        else\n            count = count+1\n        end\n    end\n    return count\n\
    end", "  s = s:upper()\n  for i = 1, #s do\n    if s:sub(i,i) == \"A\" then return\
    \ 1 + vowels_count(s:sub(i,i+1)) end\n    if s:sub(i,i) == \"E\" then return 1\
    \ + vowels_count(s:sub(i,i+1)) end\n    if s:sub(i,i) == \"I\" then return 1 +\
    \ vowels_count(s:sub(i,i+1)) end\n    if s:sub(i,i) == \"O\" then return 1 + vowels_count(s:sub(i,i+1))\
    \ end\n    if s:sub(i,i) == \"U\" then return 1 + vowels_count(s:sub(i,i+1)) end\n\
    \    if s:sub(i,i) == \"Y\" then return 1 + vowels_count(s:sub(i,i+1)) end\n \
    \ end\n  return 0\nend", "  return string.gsub(s, \".\", function (_)\n\t\t if\
    \ _ == 'a' or _ == 'e' or _ == 'i' or _ == 'o' or _ == 'u' then\n\t\treturn 1\n\
    \t\t end\n\t end)\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s[i] ==\
    \ 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   s = string.lower(s)\n\
    \   return #string.gsub(s, '[aieouy]+', 0)\nend", "  return string.gsub(s, \"\
    .y\", \"\"):gsub(\"[aeiou]\", \"\"):gsub(\"[^aeiou]\", \"\"):gsub(\"^\", \"\"\
    )\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = #s\n  for\
    \ i = 1, #s do\n    count = count + 1\n    if vowels[s[i]] ~= nil then\n     \
    \ count = count - 1\n    end\n  end\n  return count\nend", "  local count = 0\n\
    \  for char in s:gmatch(\"[aeiouyAEIOUY]\") do\n    count = count + 1\n  end\n\
    \  return count\nend", "    return string.gsub(s, '[aeiouy]+$', '') or 1\nend",
  "    local vowels = {'a','e','i','o','u'}\n    local counter = 0\n    for i,c in\
    \ ipairs(s) do\n        if c ~= 'y' and c in vowels then\n            counter\
    \ = counter + 1\n        end\n    end\n    return counter\nend", "   local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n   local count = 0\n   for i = 1, #s do\n     \
    \ if vowels[s[i]] then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend", "\tlocal count = 0\n\tfor c in string.gmatch(s, '[aeiouAEIOU]')\
    \ do\n\t\tif c == 'y' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  return string.gsub(s, '[aeiouy]+', '') ~= '' and 4 or 0\nend",
  "    local vowels = {'a','e','i','o','u'}\n    local n = 0\n    for i, v in ipairs(s)\
    \ do\n        if v == 'a' then\n            if string.sub(s,i+1,i+2)=='y' then\n\
    \                n = n + 1\n            end\n        elseif v == 'e' then\n  \
    \          if string.sub(s,i+1,i+2)=='y' then\n                n = n + 1\n   \
    \         end\n        elseif v == 'i' then\n            if string.sub(s,i+1,i+2)=='y'\
    \ then\n                n = n + 1\n            end\n        elseif v == 'o' then\n\
    \            if string.sub(s,i+1,i+2)=='y' then\n                n = n + 1\n \
    \           end\n        elseif v == 'u' then\n            if string.sub(s,i+1,i+2)=='y'\
    \ then\n                n = n + 1\n            end\n        end\n    end\n   \
    \ return n\nend", "  local vowels = {'a','e','i','o','u'}\n  return #s:gsub(\"\
    [\" .. table.concat(vowels, \"\") .. \"]\", \"\")\nend", "\t-- Return the number\
    \ of vowels in the string s.\n\t-- Vowels in this case are 'a', 'e', 'i', 'o',\
    \ 'u'. Here, 'y' is also a\n\t-- vowel, but only when it is at the end of the\
    \ given word.\n\t-- Note: A single vowel ('y') is counted as a vowel only if at\
    \ most\n\t--  one letter is 'y'\n\t-- Example of valid string: 'abcde', 'ACEDY',\
    \ 'abcdey'\n\t-- Example of invalid string: '', 'x', 'y'\n\ts = s:upper()\n\t\
    if s:match(\"[aeiouy]\") then\n\t\treturn 1\n\telse\n\t\treturn 1\n\tend\nend",
  "\tlocal vowels = 'aieouyAIEOUY'\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif\
    \ vowels[sub(s, i, i)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  return #(s:gsub('a', '') + s:gsub('e') + s:gsub('i') + s:gsub('o')\
    \ + s:gsub('u') + s:gsub('y')):map(function(x)\n    return x == s:sub(x+1, #s)\n\
    \  end)\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count\
    \ = 0", "  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local count\n\
    \  for i = 1, #s do\n    if vowels[s[i]] then\n      if s[#s] == 'y' then\n\t\
    count = count + 1\n      end\n    end\n  end\n  return count\nend", "  return\
    \ #s ~= 0 and #s:match(\"[aeiouy]*[aeiouy]\") -- match at least one vowel\n  \
    \     + #s:match(\"[aeiouy]*$\") -- match at least one vowel\nend", "\tlocal count\
    \ = {}\n\tfor letter in string.gmatch(s, '[aeiou]') do\n\t\tcount[letter] = count[letter]\
    \ + 1\n\tend\n\tfor letter in string.gmatch(s, '[aeiouy]') do\n\t\tcount[letter]\
    \ = count[letter] + 1\n\tend\n\treturn count\nend", "   return string.gsub(s,\
    \ '.([aeiouy])', function(x) \n      if not x then return '' end\n      local\
    \ n = string.len(x)\n      if n%2 ~= 0 then return x end\n      local end\n  \
    \    return x == 'y' ? 'i' : 'aeiou'\n   end)\nend", "  return s..=\"a\" .. s..=\"\
    e\" .. s..=\"i\" .. s..=\"o\" .. s..=\"u\"\n    :gsub(\"(\" .. vowels .. \"):\"\
    , \"$1\")\n    :gsub(\"[^\" .. vowels .. \"]\", \"\")\n    :gsub(\"[\" .. vowels\
    \ .. \"]\", \"\")\n    :gsub(\"(.-)\", table)\n    :gsub(\"(.+)\", table)\n  \
    \  :gsub(\"(.)\", table)\n    :gsub(\"(.-)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n\
    \    :gsub(\"(.+)\", table)\n    :gsub(\"(.+)\", table)\n", "  return #(s:gsub('a',\
    \ '') + s:gsub('e', '') + s:gsub('i', '') +\n            s:gsub('o', '') + s:gsub('u',\
    \ '')):match('[aeiou]$') +\n  1 -- count y is also a vowel\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, #s do\n    for\
    \ _, v in ipairs(vowels) do\n      if v:sub(1, 1) == s[i]:sub(1, 1) then\n   \
    \     count = count + 1\n        break\n      end\n    end\n  end\n  return count\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n    local count = 0;\n\
    \    for i=1, #s do\n        if vowels[s[i]] ~= nil then\n            count =\
    \ count + 1;\n        end\n    end\n    return count;\nend", "  local vowels =\
    \ {}\n  for i,v in pairs(string.gmatch(s, '[aeiou]([%z])?')) do\n    table.insert(vowels,\
    \ v)\n  end\n  return #vowels\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local vowel_count = 0\n  for char in s:gmatch(\"[%a%e%i%o%u]+\") do\n    if\
    \ vowels[char] then\n      vowel_count = vowel_count + 1\n    end\n  end\n  return\
    \ vowel_count\nend", "    local vowels = 'aeiou'\n    local counts = {}\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a' then\n    \
    \        counts['a'] = counts['a'] + 1\n        end \n        if c == 'e' then\n\
    \            counts['e'] = counts['e'] + 1\n        end\n        if c == 'i' then\n\
    \            counts['i'] = counts['i'] + 1\n        end\n        if c == 'o' then\n\
    \            counts['o'] = counts['o'] + 1\n        end\n        if c == 'u' then\n\
    \            counts['u'] = counts['u'] + 1\n        end\n    end\n    return counts[vowels]\n\
    end", "   return string.gsub(s, '[aeiouy]','')\nend\n</cell>\n<cell>", "  s =\
    \ s:lower()\n  return s:gsub('([a-z])a([a-z])', '\\\\1\\\\2'):gsub('([a-z])e([a-z])',\
    \ '\\\\1\\\\2'):gsub('([a-z])i([a-z])', '\\\\1\\\\2'):gsub('([a-z])o([a-z])',\
    \ '\\\\1\\\\2'):gsub('([a-z])u([a-z])', '\\\\1\\\\2'):gsub('([a-z])y([a-z])',\
    \ '\\\\1\\\\2'):gsub('([a-z])([A-Z])', '\\\\1\\\\2'):gsub('([A-Z])([a-z])', '\\\
    \\2\\\\1')\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ = 'a' then\n      count = count + 1\n    end\n    if string.sub(s,i,i) = 'e'\
    \ then\n      count = count + 1\n    end\n    if string.sub(s,i,i) = 'i' then\n\
    \      count = count + 1\n    end\n    if string.sub(s,i,i) = 'o' then\n     \
    \ count = count + 1\n    end\n    if string.sub(s,i,i) = 'u' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ c in s:gmatch(\"[aeiouy]+\") do\n    if string.sub(c, 1, 1) == 'y' then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "  s = string.gsub(s,\
    \ '[^aeiou]', '')\n  return s:sub(1, #s) + 1:find('aeiou')\nend", "    local vowel_count\
    \ = 0\n    for i = 1, #s do\n        if string.sub(s, i, i) ~= 'a' and string.sub(s,\
    \ i, i) ~= 'e' and string.sub(s, i, i) ~= 'i' and string.sub(s, i, i) ~= 'o' and\
    \ string.sub(s, i, i) ~= 'u' then\n            vowel_count = vowel_count + 1\n\
    \        end\n    end\n    return vowel_count\nend", "  local count = 0\n  for\
    \ _, letter in string.gmatch(s, '[aeiouy]+') do\n    count = count + 1\n  end\n\
    \  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowel_count = 0\n    for i = 1, #s do\n        if vowels[s[i]:byte()] == nil\
    \ then break end\n        vowel_count = vowel_count + 1\n    end\n    return vowel_count\n\
    end", "  local vowels = {'a','e','i','o','u'}\n  local count = {}\n  for i = 1,\
    \ #s do\n    if vowels[s[i]] ~= nil then\n      count[vowels[s[i]]] = count[vowels[s[i]]]\
    \ + 1\n    end\n  end\n  return count\nend", "  return string.gsub(s, '[aeiouy]+',\
    \ '').\n    match(string.gsub('[^aeiouy]+', ' ', ''))\nend", "    local vowel_count\
    \ = 0\n    for _,v in pairs({'a','e','i','o','u'}) do\n        if s:sub(1,1)==v\
    \ then\n            vowel_count=vowel_count+1\n        end\n    end\n    return\
    \ vowel_count\nend", "  return string.gsub(s, '[aeiouAEIOU]', function(v)\n  \
    \  return v == 'a' or v == 'e' or v == 'i' or v == 'o' or v == 'u'\n    or v ==\
    \ 'y' and #v == 1 and #v == 1 and #v == 0 and #v == 0\n  end)\nend", "  local\
    \ count = 1\n  for i = 1, #s do\n    local c = string.sub(s, i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "   local count=0\n   for _,c in\
    \ pairs(s) do\n      if c=='a' or c=='e' or c=='i' or c=='o' or c=='u' then\n\t\
    \ count = count + 1\n      end\n   end\n   return count\nend", "    local vowels\
    \ = 'aeiou'\n    local vowel_count = 0\n    for _, v in pairs(s) do\n        if\
    \ vowels:find(v) then\n            vowel_count = vowel_count + 1\n        end\n\
    \    end\n    return vowel_count\nend", "\tlocal count, i, i1, j, j1, k\n\tcount\
    \ = 1 -- default initial value\n\ti = 1 -- index counter\n\ti1 = i + 1 -- index\
    \ counter for letter in s\n\tj = 1 -- index counter for vowel in s\n\tj1 = j +\
    \ 1 -- index counter for vowel in s\n\tk = 1 -- index counter for vowel in s\n\
    \twhile i <= i1 do\n\t\tif s[i] == s[i - 1] then\n\t\t\tcount = count + 1\n\t\t\
    \ti = i + 1 -- increment index\n\t\telse\n\t\t\ti = i + 1 -- increment index\n\
    \t\tend\n\tend\n\t-- check if j is a vowel\n\tif j % 3 == 1 and s[j + 1] == s[i\
    \ - 2] then\n\t\tcount = count + 1\n\t\tj = j + 2 -- increment index\n\tend\n\t\
    -- check if k is a vowel\n\tif k % 3 == 1 and s[k + 1] == s[i - 2] then\n\t\t\
    count = count + 1\n\t\tk = k + 2 -- increment index\n\tend\n\t-- check if j is\
    \ at the end of the word\n\tif j % 3 == 0 and s[j + 1] == s[i - 1] then\n\t\t\
    count = count + 1\n\tend\n\t-- check if k is at the end of the word\n\tif k %\
    \ 3 == 0 and s[k + 1] == s[i - 1] then\n\t\tcount = count + 1\n\tend\n\t-- check\
    \ if i is the last letter\n\tif i % 3 == 0 and s[i] == s[i - 1] then\n\t\tcount\
    \ = count + 1\n\tend\n\t-- check if i is the last letter\n\tif i % 3 == 1 and\
    \ s[i] == s[i - 1] then\n\t\tcount = count + 1\n\tend\n\treturn count\nend", " \
    \ local count = 0\n  for c in s:gmatch(\"[aeiouy]*y\") do\n    count = count +\
    \ 1\n  end\n  return count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowels_count = 0\n    for i=1,#s do\n        if vowels[s:sub(i,i)]\
    \ == 'y' then\n            vowels_count = vowels_count + 1\n        end\n    end\n\
    \    return vowels_count\nend", "    local counter = {}\n    for i, v in pairs({'a',\
    \ 'e', 'i', 'o', 'u'}) do\n        counter[v] = counter[v] or 0\n        if v:sub(-1)\
    \ ~= v then\n            counter[v] = counter[v] + 1\n        end\n    end\n \
    \   local n = #s\n    for i, v in pairs(counter) do\n        if counter[v] ~=\
    \ n then\n            counter[v] = 1\n        end\n    end\n    return #counter\n\
    end", "  return string.gsub(s, \".[aeiou].*\", \"\"):gsub(\"[aeiou]$\", \"\")\n\
    end", "  local vowels = 'aeiouAEIOU'\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels:sub(i, i) == s then\n      vowel_count = vowel_count + 1\n\
    \    end\n  end\n  return vowel_count\nend", "  local count = 0\n  for _, c in\
    \ string.gmatch(s, \"[aeiouAEIOU]\") do\n    if c:upper() == c:upper() then count\
    \ = count + 1 end\n  end\n  return count\nend", "  local vowels = 'a'\n  local\
    \ vowel_count = 0\n  for w in s:gmatch'[aeiouy]'do\n    vowels = vowels .. w\n\
    \    vowel_count = vowel_count + 1\n  end\n  return vowel_count\nend", "  s =\
    \ string.lower(s)\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) == 'a' or\n       string.sub(s, i, i) == 'e' or\n       string.sub(s,\
    \ i, i) == 'i' or\n       string.sub(s, i, i) == 'o' or\n       string.sub(s,\
    \ i, i) == 'u' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = 0\n\
    \  for i = 1, #s do\n    if not vowels[s[i]] then\n      return vowels_count\n\
    \    end\n    vowels_count = vowels_count + 1\n  end\n  return vowels_count\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local count = 0\n  for\
    \ _, letter in s:gmatch'(.)' do\n    count = count + #vowels\n  end\n  return\
    \ count\nend", "  s = string.gsub(s, \"[aeiou]\", \"\")\n  if s:sub(1, #s) = \"\
    y\" then\n    s = s .. \"y\"\n  end\n  return #s\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local vowels_count = {}\n  for i = 1, #s do\n    if vowels[s[i]]\
    \ then\n      table.insert(vowels_count, s[i])\n    end\n  end\n  return #vowels_count\n\
    end", "    local vowels = 'aeiou'\n    local vowels_count = 0\n    for i = 1,\
    \ #s do\n        local letter = string.sub(s,i,i)\n        if letter == string.sub(vowels,1,1)\
    \ then\n            vowels_count = vowels_count + 1\n        end\n    end\n  \
    \  return vowels_count\nend", "    -- Write your solution here\n    -- return\
    \ the count\n    local count = 0\n    for i=1,#s do\n        if s[i] == 'a' or\
    \ s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "   s = string.lower(s)\n\
    \   local vowels = {'a','e','i','o','u'}\n   return string.find(s,'a') - string.find(s,'e')\
    \ - string.find(s,'i') - string.find(s,'o') - string.find(s,'u')\nend", "\t--\
    \ Base case\n\tif not s or #s < 1 then return 0 end", "  s = string.lower(s)\n\
    \  local vowel_count = 0\n  for i=1,#s do\n    local c = string.sub(s, i, i)\n\
    \    local v = 'aeiou'\n    if c == 'y' then v = 'ey' end\n    local idx = v:find(c)\n\
    \    if idx ~= -1 and idx+1 == #v then vowel_count = vowel_count + 1 end\n  end\n\
    \  return vowel_count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local count = 0", "   -- Base case\n   if #s == '' then return 0 end\n   --\
    \ If first character is vowel then increase count by 1\n   if s[1] == 'a' or s[1]\
    \ == 'e' or s[1] == 'i' or s[1] == 'o'\n       or s[1] == 'u' then return 1 +\
    \ vowels_count(s[2:])\n   end\n   -- Recursively count vowels in rest of the string\n\
    \   return 1 + vowels_count(s[2:])\nend", "  return s... ~s:gsub('[^aiouy]'..'',\
    \ ''):gsub('y$', ''):gsub('y', '')\nend", "   local count = 0\n   for letter in\
    \ string.gmatch(s, \"([^%w]-([%w]))\") do\n      count = count + 1\n   end\n \
    \  return count\nend", "    local vowels = { 'a', 'e', 'i', 'o', 'u', 'y' }\n\
    \    local vowels_count = 0\n    for i = 1, #s do\n        if vowels[s[i]] then\n\
    \            vowels_count = vowels_count + 1\n        end\n    end\n    return\
    \ vowels_count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n   \
    \ local count\n    for i = 1, #s do\n        if vowels[s[i]:lower():byte()] ==\
    \ true then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = #s + 1\n  for\
    \ i=1,#s do\n    if vowels[s[i]] ~= nil then\n      count = count-1\n    end\n\
    \  end\n  return count\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s[i]\
    \ == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u'\n\t\tthen\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend", "  if s ~= nil and s ~= '' then\n  \
    \  local count = 0\n    for i = 1, #s do\n      if string.sub(s,i,i) == 'a' or\
    \ string.sub(s,i,i) == 'e' or string.sub(s,i,i) == 'i' or string.sub(s,i,i) ==\
    \ 'o' or string.sub(s,i,i) == 'u'\n      then\n        count = count + 1\n   \
    \   end\n    end\n    return count\n  end\n  return nil\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local count = {}\n  for letter in s:gmatch(\"\
    [aeiouy]\") do\n    count = count or {}\n    count[letter] = count[letter] or\
    \ 0\n    count[letter] = count[letter] + 1\n  end\n  return #vowels - 1\nend",
  "  -- Write your code here.\n  local vowel_count = 0\n  local last_letter = nil\n\
    \  for i = 1, #s do\n    if s[i] ~= 'a' and s[i] ~= 'e' and s[i] ~= 'i' and s[i]\
    \ ~= 'o' and s[i] ~= 'u' then\n      vowel_count = vowel_count + 1\n    end\n\
    \    if s[i] == 'y' and last_letter ~= 'a' and last_letter ~= 'e' and last_letter\
    \ ~= 'i' and last_letter ~= 'o' and last_letter ~= 'u' then\n      vowel_count\
    \ = vowel_count + 1\n    end\n    last_letter = s[i]\n  end\n  return vowel_count\n\
    end", "    local vowels = 'aieou'\n    local vowel_count = 0\n    local vowel_last\
    \ = false\n    for i = 1, #s do\n        if vowel_last == false then\n       \
    \     local letter = s:sub(i, i)\n            if letter == 'a' or letter == 'e'\
    \ or letter == 'i' or letter == 'o' or letter == 'u' then\n                vowel_last\
    \ = true\n                vowel_count = vowel_count + 1\n            else\n  \
    \              vowel_last = false\n            end\n        else\n           \
    \ vowel_last = false\n        end\n    end\n    return vowel_count\nend", "  return\
    \ string.gsub(s, '[aeiou]') -- replace vowels\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local n = #s\n    local count = 0\n    for i = 1, n\
    \ do\n        if vowels[s[i]] == true then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local vowels_count = 0\n  for c in s do\n    local vowel = vowels[string.sub(c,\
    \ 1, 1)] or false\n    if vowel and string.sub(vowel, 1, 1) == string.sub(c, 1,\
    \ 1) then\n      vowels_count = vowels_count + 1\n    end\n  end\n  return vowels_count\n\
    end", "  local count = 0\n  for letter in s do\n    count = count + 1\n    if\
    \ letter:byte() == 'a' or letter:byte() == 'e' or letter:byte() == 'i' or\n  \
    \    letter:byte() == 'o' or letter:byte() == 'u' then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == 'a'\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "   local\
    \ vowels = 'aeiou'\n   local count = 0\n   for i = 1, #s do\n      if s:sub(i-1,\
    \ i) == vowels then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count\
    \ = 0\n    for i,v in pairs(s) do\n        if v in vowels then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if string.sub(s, i, i) ~= 'a' and\n     \
    \       string.sub(s, i, i) ~= 'e' and\n            string.sub(s, i, i) ~= 'i'\
    \ and\n            string.sub(s, i, i) ~= 'o' and\n            string.sub(s, i,\
    \ i) ~= 'u' then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal count\
    \ = 0\n\tfor i,c in ipairs(s) do\n\t\tif vowels[c] then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend", "   -- Write your code here.\n   return\
    \ #s - #(s:gsub('y','[aeiouy]'):gsub('y','[aeiouy]'))\nend", "\tlocal vowels =\
    \ {'a','e','i','o','u','y'}\n\t\n\t-- Initialize count\n\tlocal count = 0\n\t\n\
    \t-- Iterate over every letter in string\n\tfor i=1,#s do\n\t\t-- If the letter\
    \ is found in the set of vowels, add 1 to the count\n\t\tif vowels[#vowels]==s[i]\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\n\treturn count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
