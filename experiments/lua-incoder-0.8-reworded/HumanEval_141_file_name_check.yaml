name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
  -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal file_name = file_name:lower()\n\tlocal file_name = file_name:gsub(\"\
    [%w[%z]]\",\"\")\n\tlocal file_name = file_name:gsub(\"%a\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%A\",\"\")\n\tlocal file_name = file_name:gsub(\"%d\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%D\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    %w\",\"\")\n\tlocal file_name = file_name:gsub(\"%W\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%z\",\"\")\n\tlocal file_name = file_name:gsub(\"%Z\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    .\",\"\")\n\tlocal file_name = file_name:gsub(\"^[a-z_]\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%b\",\"\")\n\tlocal file_name = file_name:gsub(\"%B\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%f\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    %F\",\"\")\n\tlocal file_name = file_name:gsub(\"%j\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%J\",\"\")\n\tlocal file_name = file_name:gsub(\"%m\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%M\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    %s\",\"\")\n\tlocal file_name = file_name:gsub(\"%S\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%t\",\"\")\n\tlocal file_name = file_name:gsub(\"%T\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%p\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    %P\",\"\")\n\tlocal file_name = file_name:gsub(\"%r\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%R\",\"\")\n\tlocal file_name = file_name:gsub(\"%u\",\"\"\
    )\n\tlocal file_name = file_name:gsub(\"%U\",\"\")\n\tlocal file_name = file_name:gsub(\"\
    %x\",\"\")\n\tlocal file_name = file_name:gsub(\"%X\",\"\")\n\tlocal file_name\
    \ = file_name:gsub(\"%z\",\"\")\n\tlocal file_name = file_name:gsub(\"%Z\",\"\"\
    )\n\t\n\tlocal file_name =\n\tif file_name == \".\" then\n\t\treturn \"Yes\"\n\
    \telseif file_name == \"..\" then\n\t\treturn \"No\"\n\telseif file_name == \"\
    \" then", "\treturn string.sub(file_name, 1, 5) == '0' and string.sub(file_name,\
    \ 6, 6) == '.' and string.sub(file_name, 1, 1) ~= '0' and string.sub(file_name,\
    \ 1, 1) ~= 'a' and string.sub(file_name, 1, 1) ~= 'A' and string.sub(file_name,\
    \ 1, 2) ~= '0' and string.sub(file_name, 1, 2) ~= '9' and string.sub(file_name,\
    \ 2, 1) ~= '0' and string.sub(file_name, 2, 1) ~= 'a' and string.sub(file_name,\
    \ 2, 1) ~= 'A' and string.sub(file_name, 2, 2) ~= '0' and string.sub(file_name,\
    \ 2, 2) ~= '9' and file_name ~= '.' and string.find(file_name, '.') ~= 1 and string.find(file_name,\
    \ '.') ~= string.len(file_name) - 2 and string.find(file_name, '.') < 3\nend",
  "   -- Get the length of the first part of the file's name\n   local string_length\
    \ = string.len(file_name)\n   -- Return Yes if there are no more than three digits\
    \ in the file's name\n   if string_length < 4 then\n      return 'Yes'\n   end\n\
    \   -- Return Yes if the file's name contains exactly one dot '.'\n   if string_length\
    \ == 1 then\n      local first_dot = file_name:sub(1, 1)\n      if first_dot ~=\
    \ '.' then\n         return 'No'\n      end\n   end\n   -- Return Yes if the substring\
    \ before the dot should not be empty, and it starts with a letter\n   -- from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n   if file_name:sub(1, 1) ~= '' then\n\
    \      local first_letter = string.sub(file_name:sub(1, 1), 1, 1)\n      if not\
    \ ((first_letter >= 'a' and first_letter <= 'z') or (first_letter >= 'A' and first_letter\
    \ <= 'Z')) then\n         return 'No'\n      end\n   end\n   -- Return Yes if\
    \ the substring after the dot should be one of these:\n   --   - 'txt', 'exe',\
    \ 'dll'\n   if file_name:sub((string_length + 2), string_length + 3) ~= '.txt'\
    \ and\n      file_name:sub((string_length + 2), string_length + 3) ~= '.exe' and\n\
    \      file_name:sub((string_length + 2), string_length + 3) ~= '.dll' then\n\
    \      return 'No'\n   end\nend\n</cell>\n<text>\n5.2 Check a file's extension\n\
    Let's define a function that checks if a file has an extension:", "\t-- Your code\
    \ goes here:\n\tif string.find(file_name, '%.') then\n\t\treturn 'No'\n\telse\n\
    \t\tif string.find(file_name, '%.txt') then\n\t\t\treturn 'Yes'\n\t\telseif string.find(file_name,\
    \ '%.exe') then\n\t\t\treturn 'Yes'\n\t\telseif string.find(file_name, '%.dll')\
    \ then\n\t\t\treturn 'Yes'\n\t\telse\n\t\t\treturn 'No'\n\t\tend\n\tend\nend",
  "    return \n        file_name:sub(1, 3)==\"0000\" and \n        file_name:sub(1,\
    \ 1)==\"a\" and \n        file_name:sub(3, 4)==\"txt\" or\n        file_name:sub(1,\
    \ 1)==\"A\" and \n        file_name:sub(3, 4)==\"exe\" or\n        file_name:sub(1,\
    \ 1)==\"a\" and \n        file_name:sub(3, 4)==\"dll\"\nend", "  -- Check the\
    \ file name\n  local file_number = tonumber(file_name)\n  if file_number == nil\
    \ then\n    return 'No'\n  end", "    local dotIndex = file_name:find('.')\n \
    \   local fileName = file_name:sub(1, dotIndex - 1)\n    local firstLetter = file_name:sub(1,\
    \ 1)\n    if firstLetter:find('^[%w]', 1) then\n        return nil -- Not a valid\
    \ filename\n    end\n    if fileName == \"\" then\n        return nil -- Not a\
    \ valid filename\n    end\n    if fileName:find('^%w+$', 1) then\n        return\
    \ nil -- Not a valid filename\n    end\n    if fileName:sub(1, 1) ~= firstLetter\
    \ then\n        return nil -- Not a valid filename\n    end\n    \n    if #fileName\
    \ > 3 then\n        return nil -- Not a valid filename\n    end", "   local n\
    \ = #file_name\n   if n < 3 then\n      return 'No'\n   end\n   local substr =\
    \ file_name:sub(1, n - 3)\n   local dot = file_name:sub(1, n - 3)\n   if dot ~=\
    \ '' then\n      local substr_char = string.sub( substr, 1, 1)\n      if not (string.byte(substr_char)\
    \ >= 97 and string.byte(substr_char) <= 122) then\n         return 'No'\n    \
    \  end\n   end\n   if substr:sub(1, 1) ~= '0' then\n      return 'No'\n   end\n\
    \   for i = 1, 3 do\n      if string.byte(file_name:sub(i, i)) < 48 or string.byte(file_name:sub(i,\
    \ i)) > 57 then\n         return 'No'\n      end\n   end\n   return 'Yes'\nend\n\
    </cell>\n<cell>", "  return not not table_utils.contains(string.gmatch(file_name,\
    \ \"^%[%a][%w]*\\.%[%w]*$\"))\nend", "    local digit = string.match(file_name,\
    \ '[0-9]+')\n    if digit ~= nil then\n        local digits = string.gsub(digit,\
    \ '.', '')\n        if digits == '' then\n            -- No '.' in the name, meaning\
    \ that the file's name is a valid name although the \n            -- beginning\
    \ is empty\n            return 'Yes'\n        elseif digits ~= '' then\n     \
    \       -- There are more than three digits, meaning that the file's name is not\
    \ valid\n            return 'No'\n        elseif digit == '0' then\n         \
    \   -- The file's name contains only digits, meaning that the file's name is not\
    \ valid\n            return 'No'\n        end\n    end\n    local first_letter\
    \ = string.match(file_name, '^[a-z]+')\n    if first_letter ~= nil then\n    \
    \    local dot_index = string.find(file_name, '.', 1, 1)\n        if dot_index\
    \ == nil then\n            -- The dot is not found in the file's name\n      \
    \      return 'No'\n        else\n            -- The dot is found in the file's\
    \ name\n            local substring_before = string.sub(file_name, 1, dot_index\
    \ - 1)\n            local substring_after = string.sub(file_name, (dot_index +\
    \ 1))\n            if substring_before ~= '' then\n                -- The substring\
    \ before the dot is not empty\n                if string.match(substring_before,\
    \ '[^a-z]') ~= nil then\n                    -- There are characters after the\
    \ dot that are not letters, meaning that the \n                    -- file's name\
    \ is not valid\n                    return 'No'\n                end\n       \
    \     end\n            -- The substring after the dot is one of the following\
    \ \n            -- strings: ['txt', 'exe', 'dll']\n            local substring_after_length\
    \ = string.len(substring_after)\n            for index, item in ipairs({'txt',\
    \ 'exe', 'dll'}) do\n                if substring_after_length == string.len(item)\
    \ then\n                    -- The substring after the dot is the same length\
    \ as the item \n                    -- ('txt', 'exe', 'dll'), meaning that the\
    \ file's name is a valid name\n                    return 'Yes'\n            \
    \    end\n            end\n        end\n    end\n    return 'No'\nend", "  if\
    \ string.find(file_name, \".\") ~= nil then\n    local name_len = string.len(file_name)\n\
    \    if name_len > 3 then\n      return 'No'\n    end\n    local file_start_char\
    \ = string.sub(file_name, 1, 1)\n    local file_end_char = string.sub(file_name,\
    \ name_len+1, name_len)\n    if file_start_char == \"0\" then\n      if file_end_char\
    \ ~= \".\" or file_end_char ~= \".\" then\n        return 'No'\n      end\n  \
    \  else\n      if not string.sub(file_start_char, 1, 1) == \"a\" then\n      \
    \  return 'No'\n      end\n      if not string.sub(file_start_char, 1, 1) == \"\
    z\" then\n        return 'No'\n      end\n    end\n    local file_ext = string.sub(file_name,\
    \ name_len+1, name_len+2)\n    if file_ext == \".txt\" then\n      return 'Yes'\n\
    \    elseif file_ext == \".exe\" then\n      return 'Yes'\n    elseif file_ext\
    \ == \".dll\" then\n      return 'Yes'\n    else\n      return 'No'\n    end\n\
    \  else\n    return 'No'\n  end\nend", "   local file_name = file_name:lower()\n\
    \   -- Remove all characters other than letters from the file's name\n   file_name\
    \ = file_name:gsub('[^0-9a-zA-Z.]', '')\n   -- Remove all characters from the\
    \ file's name starting from the dot \n   file_name = file_name:sub(1, file_name:find('.'))\
    \ \n   -- Check to make sure the first character is not a letter\n   if file_name:sub(1,\
    \ 1) ~= 'a' and file_name:sub(1, 1) ~= 'A' then\n      return 'No'\n   end\n \
    \  -- Check to make sure the last character is not a letter\n   if file_name:sub(file_name:find('.'))\
    \ ~= 'a' and file_name:sub(file_name:find('.')) ~= 'A' then\n      return 'No'\n\
    \   end\n   -- Check to make sure there isn't any characters in the substring\
    \ before the dot\n   if #file_name == '0' then\n      return 'No'\n   end\n  \
    \ -- Check to make sure there isn't any characters in the substring after the\
    \ dot\n   if #file_name ~= #file_name then\n      return 'No'\n   end\n   -- Check\
    \ to make sure that each character in the file's name is between 'a' and 'z' or\
    \ 'A' and 'Z'\n   for i = 1, #file_name do\n      if file_name:sub(i, i) ~= 'a'\
    \ and file_name:sub(i, i) ~= 'A' then\n         return 'No'\n      end\n   end\n\
    \   -- Check to make sure that each character in the file's name has a corresponding\
    \ character in the list \n   -- of valid file extensions \n   if #{'exe', 'dll'}\
    \ <= #file_name then\n      return 'No'\n   end\n   return 'Yes'\nend\n</cell>\n\
    <cell>", "   return (string.find(file_name, '[0-9][0-9][0-9]') ~= nil) and\n \
    \     (string.find(file_name, '.') ~= nil) and\n      (string.sub(file_name, 1,\
    \ 1) ~= '0') and\n      (string.find(file_name, {'a','b','c','d','e','f','g','h','i','j','k','l','m','n',\n\
    \                                 'o','p','q','r','s','t','u','v','w','x','y','z'})\
    \ ~= nil)\nend", "   local file_ext = string.match(file_name, '%w+\\.(txt|exe|dll)$')\n\
    \   return file_ext == nil or string.match(file_ext, '^[a-z]+$') ~= '' or string.match(file_ext,\
    \ '%a%d') ~= '0'\nend", "\treturn string.match(file_name, \"^[0-9]{3}\\.[a-zA-Z]{2}$\"\
    )\nend", "   -- Initialize the counter\n   local counter = 1\n   -- Initialize\
    \ an empty string\n   local string = ''\n   -- Convert the file name to a string\n\
    \   file_name = tostring(file_name)\n   -- Check if the file name contains more\
    \ than three digits\n   -- We do this by comparing the length of the converted\
    \ file name to a number \n   -- containing the max number of digits\n   if #file_name\
    \ > 3 then\n      return string\n   end\n   -- Check if the file name contains\
    \ exactly one dot\n   -- We do this by comparing the length of the converted file\
    \ name to a string \n   -- containing exactly one dot '\\..'\n   -- We also check\
    \ if the file name starts with a latin alphapet ('A'-'Z', 'a'-'z')\n   if #file_name\
    \ == 1 then\n      if string.sub(file_name, 1, 1) == '.' then\n         if #file_name\
    \ ~= 2 then\n            return string\n         end\n         local first_letter\
    \ = tostring(string.sub(file_name, 1, 1))\n         if first_letter ~= string.char((string.byte('A')\
    \ - string.byte('a')) + 1) then\n            return string\n         end\n   \
    \   else\n         return string\n      end\n   end\n   -- Check if the file name\
    \ contains one of the three extensions\n   -- We do this by comparing the length\
    \ of the converted file name to a string \n   -- containing exactly one dot '\\\
    ..'\n   if #file_name == 2 then\n      -- Check if the first letter of the converted\
    \ string is a latin alphapet\n      if string.sub(file_name, 1, 1) == string.char((string.byte('A')\
    \ - string.byte('a')) + 1) then\n         -- Check if the last letter of the converted\
    \ string is in the extensions list\n         if string.sub(file_name, 2, 2) ~=\
    \ 'exe' and string.sub(file_name, 2, 2) ~= 'dll' then\n            return string\n\
    \         end\n      end\n   end\n   -- Increment the counter\n   counter = counter\
    \ + 1\n   -- Check if the file name contains one of the extensions\n   if counter\
    \ > 4 then\n      return string\n   end\n   -- Return the name after checking\
    \ if the name is valid\n   if string.sub(file_name, 1, 1) ~= string.char((string.byte('A')\
    \ - string.byte('a')) + 1) then\n      return string\n   end\n   if string.sub(file_name,\
    \ 1, 1) == string.char((string.byte('A') - string.byte('a')) + 1) then\n     \
    \ -- Check if the last letter of the converted string is one of these ['exe',\
    \ 'dll']\n      if string.sub(file_name, 2, 2) ~= 'exe' and string.sub(file_name,\
    \ 2, 2) ~= 'dll' then\n         return string\n      end\n   end\n   return string\n\
    end", "   local file = io.open(file_name, \"r\")\n   if file == nil then\n   \
    \   return 'No'\n   else\n      local file_name = file:read(\"*all\")\n      file:close()\n\
    \      -- Remove newlines and leading and trailing whitespace\n      file_name\
    \ = string.gsub(file_name, \" +$\", \"\")\n      file_name = string.gsub(file_name,\
    \ \" +\", \" \")\n      file_name = string.gsub(file_name, \" +\", \" \")\n  \
    \    file_name = string.gsub(file_name, \" +\", \".\")\n      file_name = string.gsub(file_name,\
    \ \" $\", \"\")", "    if file_name:match('^%d+\\.[%w-]+') then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local pos = 1\n  \
    \  while true do\n        local ch = file_name:sub(pos,pos)\n        if ch ==\
    \ '.' and pos > 1 then\n            pos = pos + 1\n            continue\n    \
    \    end", "    return true -- Replace this dummy return\nend", "  -- Check that\
    \ the file's name contains at least 3 digits.\n  if string.find(file_name, \"\
    %.\") then\n    return \"No\"\n  end\n  \n  -- Check that the file's name contains\
    \ exactly 1 dot.\n  if string.find(file_name, \"%..\") then\n    return \"No\"\
    \n  end\n  \n  -- Check that the file's name starts with a letter from the latin\
    \ alphabet, \n  -- and that the substring before the dot is not empty.\n  if string.find(file_name,\
    \ \"%.%.\") then\n    return \"No\"\n  elseif string.find(file_name, \"%.\") then\n\
    \    return \"No\"\n  elseif string.find(file_name, \"%.\") then\n    return \"\
    No\"\n  end\n  \n  -- Check that the substring after the dot is one of these:\
    \ \n  --   ['txt', 'exe', 'dll']\n  if string.find(file_name, \"%.\") then\n \
    \   local substring = string.match(file_name, \"%.(%w+.%w+)\")\n    if substring\
    \ then\n      local file_name = substring\n      if string.find(file_name, \"\
    .exe\") then\n        return \"Yes\"\n      elseif string.find(file_name, \".dll\"\
    ) then\n        return \"Yes\"\n      elseif string.find(file_name, \".txt\")\
    \ then\n        return \"Yes\"\n      end\n    end\n  end\n  return \"No\"\nend",
  "\tlocal chars = {string.sub(file_name, 1, 1), string.sub(file_name, 1, 2), string.sub(file_name,\
    \ 1, 3)}\n\tlocal dot_index = string.find(file_name, \".\")\n\tif (#chars == 1)\
    \ and (dot_index == 0) then\n\t\tif not (string.sub(file_name,0,1) == 'a') then\n\
    \t\t\treturn 'No'\n\t\tend\n\telse\n\t\treturn 'No'\n\tend\n\tif string.sub(file_name,dot_index\
    \ + 1, 3) ~= {'txt', 'exe', 'dll'} then\n\t\treturn 'No'\n\tend\nend", "  local\
    \ file_name = file_name:lower()\n  local file_name = file_name:sub(1, 3)\n  local\
    \ file_name = file_name:sub(1, 1)\n  local ext = string.match(file_name, \"%.[^%.]*$\"\
    )\n  ext = ext or \"exe\"\n  local ext = ext:lower()\n  if file_name == \"\" then\n\
    \    return \"No\"\n  end\n  if string.find(file_name, \".\") == nil then\n  \
    \  return \"No\"\n  end\n  if ext:match(\"[^a-zA-Z]\") then\n    return \"No\"\
    \n  end\n  if string.find(file_name, \".\") == nil then\n    return \"No\"\n \
    \ end\n  if not (string.find(file_name, string.char(1, 1)) >= 0 and string.find(file_name,\
    \ string.char(1, 9)) <= 0 and string.find(file_name, string.char(1, 10)) > 0 and\
    \ string.find(file_name, string.char(1, 11)) <= 0 and string.find(file_name, string.char(1,\
    \ 12)) > 0 and string.find(file_name, string.char(1, 13)) <= 0 and string.find(file_name,\
    \ string.char(1, 14)) > 0 and string.find(file_name, string.char(1, 15)) <= 0\
    \ and string.find(file_name, string.char(1, 16)) > 0 and string.find(file_name,\
    \ string.char(1, 17)) <= 0 and string.find(file_name, string.char(1, 18)) > 0\
    \ and string.find(file_name, string.char(1, 19)) <= 0 and string.find(file_name,\
    \ string.char(1, 20)) > 0 and string.find(file_name, string.char(1, 21)) <= 0\
    \ and string.find(file_name, string.char(1, 22)) > 0 and string.find(file_name,\
    \ string.char(1, 23)) <= 0 and string.find(file_name, string.char(1, 24)) > 0\
    \ and string.find(file_name, string.char(1, 25)) <= 0 and string.find(file_name,\
    \ string.char(1, 26)) > 0 and string.find(file_name, string.char(1, 27)) <= 0\
    \ and string.find(file_name, string.char(1, 28)) > 0 and string.find(file_name,\
    \ string.char(1, 29)) <= 0 and string.find(file_name, string.char(1, 30)) > 0\
    \ and string.find(file_name, string.char(1, 31)) <= 0 and string.find(file_name,\
    \ string.char(1, 32)) > 0 and string.find(file_name, string.char(1, 33)) <= 0\
    \ and string.find(file_name, string.char(1, 34)) > 0 and string.find(file_name,\
    \ string.char(1, 35)) <= 0 and string.find(file_name, string.char(1, 36)) > 0\
    \ and string.find(file_name, string.char(1, 37)) <= 0 and string.find(file_name,\
    \ string.char(1, 38)) > 0 and string.find(file_name, string.char(1, 39)) <= 0\
    \ and string.find(file_name, string.char(1, 40)) > 0 and string.find(file_name,\
    \ string.char(1, 41)) <= 0 and string.find(file_name, string.char(1, 42)) > 0\
    \ and string.find(file_name, string.char(1, 43)) <= 0 and string.find(file_name,\
    \ string.char(1, 44)) > 0 and string.find(file_name, string.char(1, 45)) <= 0\
    \ and string.find(file_name, string.char(1, 46)) > 0 and string.find(file_name,\
    \ string.", "    -- Check if file name has more than 3 digits ('0'-'9')\n    if\
    \ string.len(file_name) > 3 then\n        return 'No'\n    end", "   -- Write\
    \ your code here\n   return true\nend", "  return (file_name) ~= nil and (file_name:match('^%[A-z][A-z]%.%[txt|exe|dll]$')\
    \ ~= nil and tonumber(file_name:sub(1, 2)) ~= 0 and file_name:sub(1, 1) ~= ''\
    \ and tonumber(file_name:sub(2)) ~= 0 and file_name:sub(1, 2) in ['txt', 'exe',\
    \ 'dll'])\nend", "  -- Your code goes here\n  -- A file's name is considered to\
    \ be valid if and only if all the following conditions \n  -- are met:\n  -- -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n \
    \ -- - The file's name contains exactly one dot '.'\n  -- - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n  -- the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n  -- - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n  -- Examples:\n  -- >>> file_name_check('example.txt')\n\
    \  -- 'Yes'\n  -- >>> file_name_check('1example.dll')\n  -- 'No'\n  local file_name_has_too_many_digits\
    \ = string.match(regexp(file_name, '^(0[1-9]|[1-9][0-9])'), '%1') ~= nil\n  local\
    \ file_name_has_no_dots = string.match(regexp(file_name, '%.'), '') ~= nil\n \
    \ local file_name_has_no_space_before_first = string.match(regexp(file_name, '%^'),\
    \ '') ~= nil\n  local file_name_has_no_space_after_last = string.match(regexp(file_name,\
    \ '%$'), '') ~= nil\n  local file_name_is_a_valid_extension = string.match(regexp(file_name,\
    \ '%.(txt|exe|dll)$'), '') ~= nil", "   if file_name == nil then\n      return\
    \ nil\n   end\n   \n   if #file_name < 3 then\n      return nil\n   end\n   \n\
    \   if file_name:sub(1, 1) ~= '-' then\n      return nil\n   end\n   \n   local\
    \ dot = file_name:sub(1, 1)\n   \n   if #file_name == 2 then\n      if dot ~=\
    \ '.' then\n         return nil\n      end\n   elseif #file_name ~= 3 then\n \
    \     return nil\n   end\n   \n   if tonumber(file_name:sub(2, 2)) ~= 1 then\n\
    \      return nil\n   end\n   \n   if file_name:sub(2, 1) ~= '.' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= 'a' and file_name:sub(1, 1) ~=\
    \ 'A' then\n      return nil\n   end\n   \n   if #file_name ~= 3 then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(3, 3) ~= {'txt', 'exe', 'dll'} then\n\
    \      return nil\n   end\n   \n   return 'Yes'\nend\n</cell>\n<text>\nExercise\
    \ 1: Create a function that returns 'Yes' if the file's name contains any of the\
    \ following extensions: ['.dll', '.txt', '.exe']. Otherwise, return 'No'.", " \
    \  local file_extension_match = string.match(file_name, '\\.([^.]+)$')\n   if\
    \ file_extension_match ~= nil then\n      local file_extension = string.lower(file_extension_match[1])\n\
    \      if not(file_extension == 'txt' or file_extension == 'exe' or file_extension\
    \ == 'dll') then\n         return 'No'\n      end\n   end\n   local dot_match\
    \ = string.match(file_name, '^[^.]*')\n   if dot_match ~= nil then\n      if dot_match\
    \ ~= file_name then\n         return 'No'\n      end\n   end\n   local name_length\
    \ = string.len(file_name)\n   if name_length >= 3 then\n      if name_length ~=\
    \ 2 then\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    \   local first_letter = string.lower(string.sub(file_name, 1, 1))\n   if not(string.sub(file_name,2,\
    \ 1) ~= '\\\\' or string.sub(file_name,3,1) ~= '/' or string.sub(file_name,4,1)\
    \ ~= ':') then\n      if not(first_letter ~= 'a' or first_letter ~= 'b' or first_letter\
    \ ~= 'c' or first_letter ~= 'd' or first_letter ~= 'e' or first_letter ~= 'f'\
    \ or first_letter ~= 'g' or first_letter ~= 'h' or first_letter ~= 'i' or first_letter\
    \ ~= 'j' or first_letter ~= 'k' or first_letter ~= 'l' or first_letter ~= 'm'\
    \ or first_letter ~= 'n' or first_letter ~= 'o' or first_letter ~= 'p' or first_letter\
    \ ~= 'q' or first_letter ~= 'r' or first_letter ~= 's' or first_letter ~= 't'\
    \ or first_letter ~= 'u' or first_letter ~= 'v' or first_letter ~= 'w' or first_letter\
    \ ~= 'x' or first_letter ~= 'y' or first_letter ~= 'z') then\n         return\
    \ 'No'\n      end\n   end\n   return 'Yes'\nend", "   if string.find(file_name,\
    \ '.') ~= nil then\n      local sub_string = string.sub(file_name, 1, string.find(file_name,\
    \ '.'))\n      if string.len(sub_string) ~= 1 then\n         return 'No'\n   \
    \   else\n         if string.find(sub_string, 'a') ~= nil or string.find(sub_string,\
    \ 'A') ~= nil then\n            return string.upper(sub_string)\n         else\n\
    \            local count = string.len(sub_string)\n            local count = 0\n\
    \            for i = 1, count do\n               if string.sub(sub_string, i,\
    \ i) ~= ' ' then\n                  count = count + 1\n               end\n  \
    \          end\n            if count == 0 then\n               return 'No'\n \
    \           else\n               if string.find(sub_string, '0') ~= nil then\n\
    \                  return 'No'\n               else\n                  return\
    \ 'Yes'\n               end\n            end\n         end\n      end\n   else\n\
    \      return 'No'\n   end\nend\n</cell>\n<cell>", "   if file_name == '' then\n\
    \      return 'No'\n   end\n   if file_name:sub(1, 3) ~= '' then\n      return\
    \ 'No'\n   end\n   if file_name:sub(1, 1) == '#' or file_name:sub(1, 1) == '/'\
    \ or file_name:sub(1, 1) == '\\\\' then\n      return 'No'\n   end\n   if file_name:sub(1,\
    \ 1):match '^[%zA-Za-z_]' then\n      return 'No'\n   end\n   return 'Yes'\nend",
  "    local file_ok = true\n    local dot_count = 0\n    local pos_dot\n    if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n        file_name = '\\\\' .. file_name\n    end\n    --\
    \ The string before the first dot, it can be empty\n    if file_name:sub(1, 1)\
    \ ~= '.' then\n        file_ok = false\n    end\n    -- The string after the dot,\
    \ it can be empty\n    for pos_dot = 1, #file_name do\n        if file_name:sub(pos_dot\
    \ + 1, 1) ~= '.' then\n            file_ok = false\n        end\n    end\n   \
    \ -- The first character should be letter\n    if file_ok and file_name:sub(1,\
    \ 1) ~= string.byte('a'..string.byte('A')) then\n        file_ok = false\n   \
    \ end\n    return file_ok\nend", "    local file_name = string.lower(file_name)\n\
    \    if file_name:sub(1, 3) == '0' then\n        return 'No'\n    end\n    if\
    \ file_name:sub(1, 3) == '..' then\n        return 'No'\n    end\n    if string.find(file_name,\
    \ ' ') then\n        return 'No'\n    end\n    if file_name:sub(1, 1) ~= string.byte('a'..string.byte('z'))\
    \ then\n        return 'No'\n    end\n    for i = 2, #file_name, 1 do\n      \
    \  if string.byte(string.sub(file_name, i, i)) ~= '.' then\n            return\
    \ 'No'\n        end\n    end\n    for i = 1, #file_name, 1 do\n        if string.byte(string.sub(file_name,\
    \ i, i)) ~= 'a' then\n            return 'No'\n        end\n    end\n    return\
    \ 'Yes'\nend", "  local result = nil\n  \n  -- Check 1\n  local number_of_digits\
    \ = #file_name -- Get the number of digits in file_name.\n  if number_of_digits\
    \ <= 3 then\n    result = false\n  else\n    -- Check 2\n    local first_char\
    \ = string.sub(file_name,1,1) -- Get the first character in file_name.\n    if\
    \ first_char ~= 'a' and first_char ~= 'A' and first_char ~= '0' and first_char\
    \ ~= '9' then\n      result = false\n    else\n      -- Check 3\n      local second_char\
    \ = string.sub(file_name,2,1) -- Get the second character in file_name.\n    \
    \  if second_char ~= 'a' and second_char ~= 'A' and second_char ~= '0' and second_char\
    \ ~= '9' then\n        result = false\n      else\n        -- Check 4\n      \
    \  local dot_position = string.find(file_name,'.') -- Get the position of the\
    \ first '.' in file_name.\n        if dot_position <= 1 then\n          result\
    \ = false\n        else\n          local third_char = string.sub(file_name,dot_position,1)\
    \ -- Get the third character in file_name.\n          if third_char ~= 'a' and\
    \ third_char ~= 'A' and third_char ~= '0' and third_char ~= '9' then\n       \
    \     result = false\n          else\n            result = true\n          end\n\
    \        end\n      end\n    end\n  end\n  \n  return result\nend", "\tlocal valid\
    \ = false\n\tlocal _filename = file_name\n\tif string(_filename) and _filename\
    \ ~= \"\" then\n\t\tlocal digits = string.gsub(_filename, \"[^0-9]\", \"\")\n\t\
    \tif digits ~= \"\" then\n\t\t\tlocal has_dot = string.match(_filename, \"%.\"\
    )\n\t\t\tlocal substring_before_dot = string.match(_filename, \"^.([a-zA-Z])\"\
    )\n\t\t\tlocal substring_after_dot = string.match(_filename, \"%.([a-zA-Z])\"\
    )\n\t\t\tlocal substring_valid = true\n\t\t\tif has_dot and string.len(_filename)\
    \ > 1 then\n\t\t\t\tlocal substring_valid = true \n\t\t\t\tlocal _substring_before_dot\
    \ = substring_before_dot\n\t\t\t\tif _substring_before_dot ~= '' then\n\t\t\t\t\
    \tif string.len(_substring_before_dot) > 1 then\n\t\t\t\t\t\tvalid = true \n\t\
    \t\t\t\telse\n\t\t\t\t\t\tvalid = false \n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\
    local _substring_after_dot = substring_after_dot\n\t\t\t\tif _substring_after_dot\
    \ ~= '' then\n\t\t\t\t\tlocal _substring_valid = true\n\t\t\t\t\tif _substring_after_dot\
    \ ~= 'exe' and _substring_after_dot ~= 'dll' then\n\t\t\t\t\t\tvalid = false\n\
    \t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif valid and substring_valid then\n\
    \t\t\t\tvalid = true \n\t\t\telse\n\t\t\t\tvalid = false \n\t\t\tend\n\t\tend\n\
    \tend\n\treturn valid \nend", "\t-- Define our variables.\n\tlocal num_digits\
    \ = 0\n\tlocal has_dot = false\n\tlocal has_letter = false\n\tlocal has_dot =\
    \ false\n\tlocal first_letter_is_invalid = false", "   -- Return Yes if file's\
    \ name is valid, No if it isn't\n   -- The file's name is considered to be valid\
    \ if and only if all the following conditions \n   -- are met:\n   -- - There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n   -- -\
    \ The file's name contains exactly one dot '.'\n   -- - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n   -- the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n   if string.sub(file_name,1,1) ~= ''\
    \ then\n      return false\n   end", "    local num_digits, dot_count, first_letter_code\
    \ = 0, 1, 'a'\n    -- Count number of digits in filename\n    for i = 0, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c:byte() ~= nil then\n\
    \            num_digits = num_digits + 1\n        end\n    end\n    -- Check that\
    \ the file's name contains exactly one dot\n    if num_digits == 0 then\n    \
    \    return 'No'\n    end\n    -- Count number of dots in filename\n    local\
    \ dot_count = 0\n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c == '.' then\n            dot_count = dot_count + 1\n      \
    \  end\n    end\n    -- Check that the file's name does not contain spaces\n \
    \   if dot_count == 1 then\n        return 'No'\n    end\n    -- Check that the\
    \ file's name does not begin with any non-letter character \n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c ~= nil and ((c >= 'a'\
    \ and c <= 'z') or (c >= 'A' and c <= 'Z')) then\n            return 'No'\n  \
    \      end\n    end\n    -- Check that the file's name does not begin with any\
    \ non-digit character \n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c ~= nil and ((c >= '0' and c <= '9')) then\n            return\
    \ 'No'\n        end\n    end\n    -- Check that the file's name does not begin\
    \ with any non-letter character \n    for i = 1, #file_name do\n        local\
    \ c = file_name:sub(i, i)\n        if c ~= nil and ((c >= 'a' and c <= 'z') or\
    \ (c >= 'A' and c <= 'Z')) then\n            return 'No'\n        end\n    end\n\
    \    -- Check that the file's name does not begin with any non-digit character\
    \ \n    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n    \
    \    if c ~= nil and ((c >= '0' and c <= '9')) then\n            return 'No'\n\
    \        end\n    end\n    -- Check that the file's name does not begin with any\
    \ non-letter character \n    for i = 1, #file_name do\n        local c = file_name:sub(i,\
    \ i)\n        if c ~= nil and ((c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z'))\
    \ then\n            return 'No'\n        end\n    end\n    -- Check that the file's\
    \ name does not begin with any non-digit character \n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c ", "   local num_digits\
    \ = tonumber(file_name)\n   if num_digits == nil then return 'No' end\n   if #file_name\
    \ == 1 then return 'No' end\n   local last_char = file_name:sub(1, #file_name)\n\
    \   if last_char ~= '\\.' then return 'No' end\n   local first_char = file_name:sub(2,\
    \ 1)\n   if first_char ~= string.upper(first_char) then return 'No' end\n   if\
    \ #file_name == 2 and not (first_char == 'A' and last_char == 'Z') then return\
    \ 'No' end\n   return 'Yes'\nend", "    local last_dot = string.find(file_name,\
    \ \".\")\n    local first_char = string.sub(file_name, 1, 1)\n    local second_char\
    \ = string.sub(file_name , 1, last_dot-1)", "\tlocal valid_chars = \"01234567A..\"\
    \n\tlocal is_ok = (string.find(file_name, nil, \".\") ~= nil)\n\tlocal substring_len\
    \ = 1\n\tlocal dot_pos\n\twhile true do\n\t\tdot_pos = string.find(file_name,\
    \ nil, \".\")\n\t\tlocal substring = string.sub(file_name, 1, dot_pos - 1)\n\t\
    \tif substring_len == 2 then\n\t\t\tif string.find(substring, nil, valid_chars)\
    \ == nil then\n\t\t\t\tis_ok = false\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\
    \tif string.find(substring, nil, \".\") == nil then\n\t\t\t\tis_ok = false\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\t\tif string.find(substring, nil, \".\") == nil then\n\
    \t\t\t\tis_ok = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif dot_pos == nil\
    \ then\n\t\t\tis_ok = false\n\t\t\tbreak\n\t\tend\n\t\tsubstring_len = substring_len\
    \ + 1\n\tend\n\treturn is_ok\nend", "  -- Check for invalid characters\n  file_name\
    \ = string.gsub(file_name, ' ', '');\n  file_name = string.gsub(file_name, ' ',\
    \ '');\n  file_name = string.gsub(file_name, '.', '');\n  -- Check that file name\
    \ contains only digits (0-9)\n  file_name = string.gsub(file_name, ' ', '');\n\
    \  file_name = string.gsub(file_name, ' ', '');\n  file_name = string.gsub(file_name,\
    \ ' ', '');\n  file_name = string.gsub(file_name, '.', '');\n  file_name = string.gsub(file_name,\
    \ '.', '');\n  file_name = string.gsub(file_name, ' ', '');\n  -- Check that file\
    \ name contains only letters (a-z, A-Z)\n  file_name = string.gsub(file_name,\
    \ ' ', '');\n  file_name = string.gsub(file_name, ' ', '');\n  file_name = string.gsub(file_name,\
    \ ' ', '');\n  file_name = string.gsub(file_name, '.', '');\n  file_name = string.gsub(file_name,\
    \ '.', '');\n  file_name = string.gsub(file_name, ' ', '');\n  -- Check that file\
    \ name does not contain more than three digits\n  local count = string.len(file_name);\n\
    \  if count > 3 then\n    return 'No';\n  end\n  -- Check that file name does\
    \ not contain more than one dot\n  if count > 1 then\n    return 'No';\n  end\n\
    \  -- Check that file name does not contain empty substrings\n  local count =\
    \ 0;\n  do\n    count = count + string.len(file_name);\n    file_name = string.gsub(file_name,\
    \ ' ', '');\n  until (string.len(file_name) > 0);\n  if count > 0 then\n    return\
    \ 'No';\n  end\n  -- Check that file name does not contain non-letter characters\n\
    \  if string.find(file_name, string.reverse(string.letters)) ~= nil then\n   \
    \ return 'No';\n  end\n  -- Check that file name does not contain non-letter characters\n\
    \  if string.find(file_name, string.letters) ~= nil then\n    return 'No';\n \
    \ end\n  -- Check that file name does not contain non-letter characters\n  if\
    \ string.find(file_name, string.digits) ~= nil then\n    return 'No';\n  end\n\
    \  -- Check that file name does not contain non-letter characters\n  if string.find(file_name,\
    \ '[') ~= nil then\n    return 'No';\n  end\n  -- Check that file name does not\
    \ contain non-letter characters\n  if string.find(file_name, ']') ~= nil then\n\
    \    return 'No';\n  end\n  -- Check that file name does not contain non-letter\
    \ characters\n  if string.find(file_name, '^') ~= nil then\n    return 'No';\n\
    \  end\n  -- Check that file name does not contain non-letter characters\n", " \
    \  return (string.find(file_name, '[^0-9]') ~= 1) and\n      (string.find(file_name,\
    \ '.') ~= 1) and \n      (string.find(file_name, string.sub(file_name,1,1)) ==\
    \ 1 and \n      string.find(file_name, string.sub(file_name,2,3)) == -1 and\n\
    \      (string.find(file_name, string.sub(file_name,1,2)) == 0 or \n      string.find(file_name,\
    \ string.sub(file_name,1,2)) == '0') and\n      (string.find(file_name, string.sub(file_name,1,2))\
    \ == 'a' and \n      string.find(file_name, string.sub(file_name,1,3)) == 'z'\
    \ or\n      string.find(file_name, string.sub(file_name,1,2)) == 'A' and \n  \
    \    string.find(file_name, string.sub(file_name,1,3)) == 'Z')\nend", "   -- Check\
    \ the file's name\n   if string.sub(file_name, 1, string.len(file_name) - 1) ~=\
    \ '..' then\n      -- Only accept files with exactly three digits\n      if string.len(file_name)\
    \ ~= 3 then\n         return 'No'\n      end\n   end\n   -- Check that the first\
    \ character is from the latin alphabet\n   if string.byte(file_name[1]) >= 65\
    \ and string.byte(file_name[1]) <= 90 then\n      -- Check that the substring\
    \ before the dot is not empty\n      if string.sub(file_name,1, string.len(file_name)\
    \ - 1) ~= '' then\n         -- Check that the dot is not a letter\n         if\
    \ string.byte(file_name[1]) ~= 46 then\n            return 'No'\n         end\n\
    \      end\n   end\n   -- Check that the substring after the dot is one of the\
    \ following\n   if string.byte(file_name[string.len(file_name) - 1]) >= 48 and\
    \ string.byte(file_name[string.len(file_name) - 1]) <= 57 then\n      -- Check\
    \ that the dot is not a letter\n      if string.byte(file_name[string.len(file_name)\
    \ - 1]) ~= 46 then\n         if string.byte(file_name[1]) == 46 then\n       \
    \     return 'No'\n         else\n            return 'No'\n         end\n    \
    \  end\n   end\n   if string.byte(file_name[1]) == 46 then\n      return 'No'\n\
    \   end\n   return 'Yes'\nend", "   local i, j = 1, 1\n   for i = 1, #file_name\
    \ do\n      -- Check number of digits in the name.\n      local num_digits = i\
    \ - 1\n      if num_digits > 3 then\n\t return 'No'\n      end\n      -- Check\
    \ whether the file's name contains only one dot '.'.\n      if string.find(file_name:sub(i),\
    \ '.') == nil then\n\t return 'No'\n      end\n      -- Check whether the file's\
    \ name starts with a letter from the latin alphapet.\n      if string.find(file_name:sub(i,\
    \ 1), string.char(string.sub(string.upper(file_name), j, j)) ~= -1) then\n\t return\
    \ 'No'\n      end\n      -- Check whether the file's name ends with one of these\
    \ extensions.\n      for j = i + 1, #file_name do\n\t -- Check whether the file's\
    \ name ends with one of these extensions.\n\t if string.find(file_name:sub(j),\
    \ '.') ~= nil then\n\t    local extname = file_name:sub(j, j)\n\t    if string.find(extname,\
    \ 'txt', 'exe', 'dll') ~= nil then\n\t       return 'Yes'\n\t    end\n\t end\n\
    \      end\n   end\n   return 'No'\nend\n</cell>\n<text>\n7.1.2 Write a function\
    \ to determine if a given string contains all unique characters. \n(Note: If the\
    \ input is a string, it must be a valid UTF-8 string, with no leading or trailing\
    \ spaces.)", "    if string.find(file_name, \".\") ~= nil then\n        local\
    \ sub_string = string.sub(file_name, 1, string.find(file_name, \".\"))\n     \
    \   if sub_string:byte(1) ~= string.byte(string.sub(sub_string, 1, 1)) then\n\
    \            return nil\n        end\n        local extension = string.sub(file_name,\
    \ string.find(file_name, \".\"))\n        if extension == \"txt\" then\n     \
    \       return \"Yes\"\n        end\n        if extension == \"exe\" then\n  \
    \          return \"Yes\"\n        end\n        if extension == \"dll\" then\n\
    \            return \"Yes\"\n        end\n    end\n    return nil\nend", "   local\
    \ num_digits = string.len(file_name)\n   if num_digits > 3 then\n      return\
    \ 'No'\n   elseif num_digits == 3 then\n      if string.find(file_name, '.') ==\
    \ nil then\n         return 'No'\n      elseif string.sub(file_name, 0, 1) ==\
    \ '_' then\n         return 'No'\n      else\n         return 'Yes'\n      end\n\
    \   else\n      return 'No'\n   end\nend", "  local file_dir = string.match(file_name,\
    \ \"^%d(.-)\") % 10\n  local file_ext\n  local file_base = string.match(file_name,\
    \ \"(.*%.)\")\n  if file_base and string.len(file_base) == 1 then\n    file_ext\
    \ = string.match(file_base, \"(%.-)\")\n    if string.len(file_ext) == 0 then\n\
    \      file_ext = \"txt\"\n    end\n  end\n  \n  if file_dir > 0 and file_dir\
    \ < 9 then\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", "   --\
    \ Check whether the file's name has less than three digits\n   if string.len(file_name)\
    \ ~= 3 then\n      return 'No'\n   end\n   -- Check whether the file's name contains\
    \ only one dot\n   if string.find(file_name, '.') ~= 1 then\n      return 'No'\n\
    \   end\n   -- Check whether the file's name contains non-empty substring before\
    \ the dot\n   if string.sub(file_name,1,1) ~= string.sub(file_name, 1, 1) then\n\
    \      return 'No'\n   end\n   -- Check whether the substring after the dot starts\
    \ with a letter from the latin alphabet\n   if string.find(string.sub(file_name,2,1),\
    \ string.letters('a')) ~= 1 then\n      return 'No'\n   end\n   -- Check whether\
    \ the substring after the dot has one of the listed strings\n   if string.find(string.sub(file_name,2,1),\
    \ 'txt', 'exe', 'dll') ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\n\
    end", "    if #file_name < 1 or #file_name > 4 then\n        return 'No'\n   \
    \ end\n    local file_name = file_name:sub(1,4)\n    local ext = file_name:sub(filename_length\
    \ - 3)\n    if ext ~= 'txt' or ext ~= 'exe' or ext ~= 'dll' then\n        return\
    \ 'No'\n    end\n    local first = file_name:sub(1,1):lower()\n    if first ~=\
    \ first:sub(1,1) or first:sub(1,1) ~= 'a' or first:sub(1,1) ~= 'z' then\n    \
    \    return 'No'\n    end\n    if #first > 1 then\n        return 'No'\n    end\n\
    \    return first\nend", "\treturn (string.match(file_name, \"^(0?[1-9][0-9]*)([.].*)$\"\
    ) ~= nil and\n\t\t\tstring.match(file_name, \"^[A-Za-z].*$\") ~= nil and\n\t\t\
    \tstring.sub(file_name, 1, string.find(file_name, \".\", 1, true)) ~= \"\" and\n\
    \t\t\tstring.sub(file_name, string.find(file_name, \".\", 1, true) + 1, string.find(file_name,\
    \ \".\", 1, true)) ~= \"\" and\n\t\t\tstring.sub(file_name, 1, string.find(file_name,\
    \ \".\", 1, true) - 1) ~= \"\")\nend", "   if #file_name > 3 then\n      return\
    \ 'No'\n   end\n   local sub_string = file_name:sub(1, 3)\n   if sub_string:match('^[a-zA-Z0-9.]*$')\
    \ then\n      if sub_string:sub(1, 1) ~= '~' and sub_string:sub(2, 1) ~= '~' and\
    \ sub_string:sub(3, 1) ~= '~' then\n         return 'Yes'\n      end\n   end\n\
    \   return 'No'\nend", "   -- Initialize variable to store whether file's name\
    \ is valid.\n   local is_valid = false\n   -- Initialize a boolean to store whether\
    \ file's name contains more than one \n   -- dot, and initialize a boolean to\
    \ store whether the file's name starts with a \n   -- letter of the latin alphabet,\
    \ and initialize a boolean to store whether \n   -- the file's name ends in one\
    \ of these: ['txt', 'exe', 'dll']\n   local contains_dot = false\n   local contains_latin_alphabet\
    \ = false\n   local contains_txt = false\n   local contains_exe = false\n   local\
    \ contains_dll = false\n   -- Get the substring before the dot.\n   local file_name\
    \ = file_name:sub(1, 3)\n   -- Get the substring after the dot.\n   local file_name\
    \ = file_name:sub(3)\n   -- Check if a file's name contains more than one dot.\n\
    \   if file_name:find('%.') == 1\n   then\n      -- Set the boolean to store whether\
    \ file's name contains more than one dot.\n      contains_dot = true\n      --\
    \ Get the substring after the dot.\n      file_name = file_name:sub(2)\n   end\n\
    \   -- Check if file's name starts with a letter of the latin alphabet.\n   if\
    \ string.match(string.upper(file_name), '[A-Za-z]') == 1\n   then\n      -- Set\
    \ the boolean to store whether the file's name starts with a letter \n      --\
    \ of the latin alphabet.\n      contains_latin_alphabet = true\n   end\n   --\
    \ Check if file's name ends in one of these: ['txt', 'exe', 'dll']\n   if string.match(file_name,\
    \ '(txt|exe|dll)') == 1\n   then\n      -- Set the boolean to store whether the\
    \ file's name ends in one of these: \n      -- 'txt', 'exe', 'dll'\n      contains_txt\
    \ = true\n      contains_exe = true\n      contains_dll = true\n   end\n   --\
    \ Return the result.\n   return (contains_dot and contains_latin_alphabet and\
    \ contains_txt and contains_exe \n     and contains_dll)\nend", "    local function\
    \ is_valid(name)\n        return #name > 0 and #name ~= 2 and #name ~= 4 and name[1]\
    \ == \".\" and \n            stringx.startswith(name, 'a') and stringx.startswith(name,\
    \ 'A') and\n            stringx.endswith(name, 'txt') or stringx.endswith(name,\
    \ 'exe') or \n            stringx.endswith(name, 'dll')\n    end", "\treturn (string.find(file_name,\
    \ \"^[a-z][0-9]%..\") == nil and string.find(file_name, \"^[0-9]%..\") ~= nil\
    \ and string.find(file_name, \"%\\.\") > 0 and string.find(file_name, \"%.[^t]\"\
    ) ~= nil and string.find(file_name, \"%.exe\") > 0 and string.find(file_name,\
    \ \"%.dll\") > 0 and string.find(file_name, \"%.d\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\") > 0 and string.find(file_name,\
    \ \"%.lib\") > 0 and string.find(file_name, \"%.lib\") > 0 and string.find(file_name,\
    \ \"%.o\") > 0 and string.find(file_name, \"%.a\"", "    local num_digits = string.format('%3.0d',\
    \ file_name:match('^%d(.-)(.)%$'))\n    if num_digits ~= nil and num_digits[1]\
    \ >= 0 and num_digits[2] ~= nil then\n        local dot_idx = string.format('%2.2d',\
    \ file_name:match('^%d(.-)(.)%$'))\n        if dot_idx ~= nil and dot_idx[1] >=\
    \ 0 then\n            local dot_check = string.format('%2.2d', file_name:match('^%d(.-)(.)%$'))\n\
    \            if dot_check[1] >= 0 and dot_check[2] ~= 'exe' and dot_check[2] ~=\
    \ 'dll' then\n                return 'Yes'\n            else\n               \
    \ return 'No'\n            end\n        end\n    else\n        return 'No'\n \
    \   end\nend", "\treturn string.find(file_name, \"%.%.%-[^.]\") ~= nil and string.find(file_name,\
    \ \"%[aA]%.%\") and string.find(file_name, \"%.%[aA]%-[^.]\") ~= nil\nend", " \
    \ if file_name == nil then\n    return 'No'\n  end", "   local function is_valid(str)\n\
    \      local num_digits = str:gsub('^%d+', ''):gsub('%d+$', ''):gsub('[^%d]+',\
    \ '')\n      return num_digits and num_digits == 3 and str:sub(1,1) == '.' and\
    \ (str:sub(1,2) ~= '' or str:sub(1,1) in string.letters)\n   end\n   if is_valid(file_name)\
    \ then\n      return 'Yes'\n   else\n      return 'No'\n   end\nend", "   return\
    \ string.find(file_name, '[0-9]') ~= nil and\n      string.find(file_name, '.')\
    \ ~= nil and\n      string.sub(file_name, 1, string.len(file_name) - string.find(file_name,\
    \ '.')) ~= '' and\n      string.sub(file_name,1,1) >= 'a' and \n      string.sub(file_name,1,1)\
    \ <= 'z' and\n      string.sub(file_name,string.find(file_name, '.') + 1,string.len(file_name))\
    \ in {'txt', 'exe', 'dll'}\nend", "   return (file_name:gsub('[^0-9]', '') ~=\
    \ '' and\n           file_name:match('[^.]') and -- Check that there is only one\
    \ dot '.'\n           file_name:sub(1, 1) ~= '' and -- Check that there is a letter\
    \ before the dot \n           file_name:sub(-2) in {'txt', 'exe', 'dll'}) \nend",
  "\tif string.len(file_name) > 3 and file_name:match('^(0*[1-9][0-9]*)\\.') then\n\
    \t\tlocal split_name = string.match(file_name, \"^(0*[1-9][0-9]*)\\.(%a+|%A+)$\"\
    )\n\t\tif not split_name or string.find(split_name[2], {'txt', 'exe', 'dll'})\
    \ then\n\t\t\treturn \"No\"\n\t\telse\n\t\t\treturn \"Yes\"\n\t\tend\n\telse\n\
    \t\treturn \"No\"\n\tend\nend", "    local function file_name_check_helper(file_content)\n\
    \        -- Make sure the file name is correct\n        local function is_correct()\
    \ \n            -- If the file name contains more than three digits\n        \
    \    -- return an error and exit\n            if string.find(file_content, '^%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d",
  "   return string.match(file_name, \"^[0-9]{1,3}%s%.[%w]+$\") == \"Yes\" and string.match\
    \ (string.sub (file_name, 1, string.find(file_name, \".\", 1, 2)-1), \"^[a-hA-H][a-hA-H][a-hA-H]%s$\"\
    ) ~= '' and string.match (string.sub (file_name, string.find(file_name, \".\"\
    , 1, 2)+1), \"^%s$\") ~= ''\nend", "  local dot = file_name:find('%.', 1) -- Find\
    \ index of '.'\n  if dot == nil then\n    return 'No'\n  end", "   if string.find(file_name,\
    \ '[0-9]') then\n      return nil\n   end\n   if string.find(file_name, '.') then\n\
    \      local before_dot = string.sub(file_name,1,string.find(file_name, '.'))\n\
    \      if string.len(before_dot) ~= 0 then\n         if string.find(before_dot,\
    \ 'a') then\n            return nil\n         else\n            return nil\n \
    \        end\n      else\n         return nil\n      end\n   else\n      return\
    \ nil\n   end\nend\n   ", "    -- Check if file_name is in valid range for file\
    \ name\n    -- (the file name should not have more than 3 digits '0'-'9')\n  \
    \  local char_count = 0\n    local char_count_2 = 0\n    local file_length = string.len(file_name)\n\
    \    if file_length > 3 then\n        return false\n    end\n    -- Check that\
    \ there is exactly 1 dot '.' in file_name\n    local dot_index = string.find(file_name,\
    \ '.')\n    if dot_index == nil then\n        return false\n    end\n    -- Check\
    \ that there is only one letter in the substring before the dot\n    local letter_index\
    \ = string.find(file_name, '.', dot_index - 1)\n    if letter_index == nil then\n\
    \        return false\n    end\n    -- Check that there is a file type in the\
    \ substring after the dot\n    local file_type_index = string.find(file_name,\
    \ '.', dot_index + 1)\n    if file_type_index == nil then\n        return false\n\
    \    end\n    -- Check that file's name is in correct format\n    if string.sub(file_name,\
    \ 1, letter_index - 1) == '_' then\n        return false\n    end\n    if string.sub(file_name,\
    \ letter_index + 1, file_type_index - 1) ~= '.' then\n        return false\n \
    \   end\n    -- Check if file_name is in valid file type\n    local file_types\
    \ = {'txt', 'exe', 'dll', 'class'}\n    local file_type = string.sub(file_name,\
    \ 1, file_type_index)\n    if file_type_index > 3 then\n        return false\n\
    \    end\n    if file_type ~= string.sub(file_name, 1, letter_index - 1) then\n\
    \        return false\n    end\n    for i = 1, #file_types do\n        if file_types[i]\
    \ == file_types[i] then\n            char_count_2 = char_count_2 + 1\n       \
    \ end\n    end\n    if char_count_2 < 4 then\n        return false\n    end\n\
    \    -- Check if file_name is in valid format\n    local letter_index3 = string.find(file_name,\
    \ '.', dot_index)\n    if letter_index3 == nil then\n        return false\n  \
    \  end\n    local letter_index4 = string.find(file_name, '.', dot_index + 1)\n\
    \    if letter_index4 == nil then\n        return false\n    end\n    local letter_index5\
    \ = string.find(file_name, '.', dot_index + 2)\n    if letter_index5 == nil then\n\
    \        return false\n    end\n    local letter_index6 = string.find(file_name,\
    \ '.', dot_index + 3)\n    if letter_index6 == nil then\n        return false\n\
    \    end\n    local letter_index7 = string.find(file_name, '.', dot_index + 4)\n\
    \    if letter_index7 == nil then\n        return false\n    end\n    if letter_index3\
    \ > 4 then\n        return false\n    end\n    if letter_index4 > 4 then\n   \
    \     return false\n    end\n", "   local valid, extension = true, {}\n   for\
    \ i, letter in ipairs(string.gmatch(file_name, \"^%w(.+)%.(%w+)$\") ) do\n   \
    \   if not (letter:byte() < 65 or letter:byte() >= 90 or letter:sub(1, 1) == letter:sub(1,\
    \ 1) and letter:sub(2, 2) ~= '0' and letter:sub(2, 2) ~= '9') then\n         valid\
    \ = false\n         break\n      else\n         extension[i] = letter:sub(2)\n\
    \      end\n   end\n   return valid and #extension == 1 and extension[1]:byte()\
    \ >= 97 and extension[1]:byte() <= 122\nend", "\t-- Check if there are 3 digits\n\
    \t-- If there is more than 3 digits, return 'No'\n\tif #file_name < 3 then return\
    \ 'No' end\n\t\n\t-- Check if the first character is a digit\n\tif tonumber(file_name{1})\
    \ ~= nil then return 'No' end\n\t\n\t-- Check if the first character is a letter\
    \ from the latin alphabet\n\tif file_name{1} == 'a' or file_name{1} == 'b' or\
    \ file_name{1} == 'c' or file_name{1} == 'd' or file_name{1} == 'e' or file_name{1}\
    \ == 'f' or file_name{1} == 'g' or file_name{1} == 'h' or file_name{1} == 'i'\
    \ or file_name{1} == 'j' or file_name{1} == 'k' or file_name{1} == 'l' or file_name{1}\
    \ == 'm' or file_name{1} == 'n' or file_name{1} == 'o' or file_name{1} == 'p'\
    \ or file_name{1} == 'q' or file_name{1} == 'r' or file_name{1} == 's' or file_name{1}\
    \ == 't' or file_name{1} == 'u' or file_name{1} == 'v' or file_name{1} == 'w'\
    \ or file_name{1} == 'x' or file_name{1} == 'y' or file_name{1} == 'z' then return\
    \ 'No' end\n\t\n\t-- Check if there is a dot '.' in the file name\n\tif file_name{1}\
    \ ~= '.' then return 'No' end\n\t\n\t-- Check if the substring before the first\
    \ dot does not contain any characters\n\tif #file_name{2} ~= 0 then return 'No'\
    \ end\n\t\n\t-- Check if the substring after the dot is one of these\n\t-- - txt\n\
    \t-- - exe\n\t-- - dll\n\tlocal dot_string = {'.txt', '.exe', '.dll'}\n\tlocal\
    \ dot_found = false\n\t\n\t-- Iterate through each character in the substring\
    \ after the dot\n\tfor i = 2, #file_name do\n\t\tif file_name{i} == dot_string[1]\
    \ then\n\t\t\t-- If the substring after the dot is the right one, then set 'dot_found'\
    \ to true\n\t\t\tif dot_found = true then return 'Yes' end\n\t\tend\n\t\t-- If\
    \ 'dot_found' is true, then set 'dot_found' to false\n\t\tif dot_found = false\
    \ then dot_found = true end\n\tend\n\t\n\t-- If the last character in the substring\
    \ after the dot is one of the \n\t-- correct file types, then set 'dot_found'\
    \ to true\n\tif dot_found = true then return 'Yes' end\n\t\n\t-- If the substring\
    \ after the dot is empty, then return 'No'\n\treturn 'No'\nend", "   if not (string.find(file_name,\
    \ '[0-9]') ~= nil or string.find(file_name, '.') ~= nil or string.find(file_name,\
    \ '[' .. string.letters .. ']') == nil) then\n      return 'No'\n   end", "\t\
    -- Initialization.\n\tlocal valid_file_name = false\n\t\n\t-- Check the file's\
    \ name contains exactly one '.'.\n\tif file_name:find('%.') == nil then\n\t\t\
    return 'No'\n\tend", "  if file_name = string.gsub(file_name, '%.[^%]+$', '')\
    \ then\n    local dot_pos = string.find(file_name, '.', 1)\n    if dot_pos ==\
    \ nil or dot_pos == 1 or string.sub(file_name,1,dot_pos) ~= string.sub(file_name,dot_pos)\
    \ then\n      return 'No'\n    end\n  else\n    return 'No'\n  end\n  return 'Yes'\n\
    end", "    -- Check the file name.\n    if file_name == nil then\n        error(\"\
    file_name_check: nil argument supplied\")\n    end\n    \n    -- Check the file\
    \ name.\n    if string.find(file_name, \".\") ~= nil then\n        error(\"file_name_check:\
    \ invalid file name supplied\")\n    end\n    \n    -- Check the file name.\n\
    \    if string.find(file_name, \"0\", 1, true) ~= nil then\n        error(\"file_name_check:\
    \ invalid file name supplied\")\n    end\n    \n    -- Check the file name.\n\
    \    if string.find(file_name, \".\", 1, true) ~= nil then\n        error(\"file_name_check:\
    \ invalid file name supplied\")\n    end\n    \n    -- Check the file name.\n\
    \    if string.find(file_name, \"[^a-zA-Z]\", 1, true) ~= nil then\n        error(\"\
    file_name_check: invalid file name supplied\")\n    end\n    \n    -- Check the\
    \ file name.\n    if string.find(file_name, \".\", 1, true) ~= nil then\n    \
    \    error(\"file_name_check: invalid file name supplied\")\n    end\n    \n \
    \   -- Check the file name.\n    if string.find(file_name, \" \", 1, true) ~=\
    \ nil then\n        error(\"file_name_check: invalid file name supplied\")\n \
    \   end\n    \n    -- Check the file name.\n    if string.find(file_name, \" \"\
    , 1, true) ~= nil then\n        error(\"file_name_check: invalid file name supplied\"\
    )\n    end\n    \n    -- Return the value.\n    return \"Yes\"\nend", "  if file_name:sub(1,\
    \ 3) == '0' then\n    return 'No'\n  end\n  if #file_name <= 3 then\n    return\
    \ 'No'\n  end\n  local dot = file_name:sub(1, #file_name)\n  if #dot ~= 1 then\n\
    \    return 'No'\n  end\n  local first_char = file_name:sub(1, 2)\n  if first_char\
    \ ~= 'a' and first_char ~= 'A' and first_char ~= '0' then\n    return 'No'\n \
    \ end\n  local last_char = file_name:sub((#file_name-1), #file_name)\n  if last_char\
    \ == '.' and #file_name ~= #dot_name then\n    return 'No'\n  end\n  if last_char\
    \ != 'txt' and last_char != 'exe' and last_char != 'dll' then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "   if string.find(file_name, '%.') ~= nil then\n\
    \      file_name = string.sub(file_name,1,string.find(file_name, '%.') - 1)\n\
    \   end\n   return (string.find(file_name,'[^0-9a-z.]')==nil)\nend", "    local\
    \ digits, dot, extension = string.match(file_name, \"^([0-9]{3}\\.)(.+)\\..*$\"\
    )\n    if digits == nil then\n        return \"No\"\n    end\n    local extensions\
    \ = string.gsub(extension, \".\", \" \")\n    if extensions ~= \"txt exe dll\"\
    \ then\n        return \"No\"\n    end\n    if not (string.match(string.upper(string.sub(file_name,\
    \ 0, 1)), \"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]\") and\n        string.match(string.upper(string.sub(file_name,\
    \ 0, 1)), \"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]*\"))\n    then\n        return \"No\"\
    \n    end\n    return \"Yes\"\nend", "    local pattern = \"^[0-9]+\\.[a-zA-Z]+$\"\
    \n    local regex = new RegExp(pattern)\n    if regex.match(file_name) then\n\
    \        -- The file's name is valid.\n        return 'Yes'\n    else\n      \
    \  -- The file's name is invalid.\n        return 'No'\n    end\nend", "    local\
    \ ok, err = pcall(function()\n        local file_parts = string.match(file_name,\
    \ '^(.{1,3})\\.(.+)')\n        if not file_parts then\n            return false\n\
    \        end\n        local file_type, file_name = unpack(file_parts)\n      \
    \  local ext = string.match(file_name, '[.]%w+$')\n        if file_type ~= 'txt'\
    \ and file_type ~= 'exe' and file_type ~= 'dll' then\n            return false\n\
    \        end\n        local ext = string.match(ext, '[.]%w+$')\n        return\
    \ ext ~= nil and\n               string.match(ext, '[a-zA-Z]') and \n        \
    \       string.match(ext, '[.]')\n    end)\n    if ok then\n        return ok\n\
    \    else\n        return err\n    end\nend", "\treturn not (string.find(file_name,\
    \ \"%.\") ~= nil)\n\tand string.find(file_name, \"%.\") ~= 1\n\tand string.find(file_name,\
    \ string.sub(file_name, 1, 1) ~= nil)\n\tand string.find(file_name, string.sub(file_name,\
    \ string.len(file_name) - 1, string.len(file_name)) ~= nil)\n\tand string.find(file_name,\
    \ string.char(tonumber(string.sub(file_name, 1, 1))) ~= nil)\n\tand string.find(file_name,\
    \ string.sub(file_name, string.len(file_name) - 1, string.len(file_name)) ~= nil)\n\
    end", "  return string.find(file_name, \".\") ~= 0 and string.find(file_name,\
    \ \".\", 1, true) ~= 0 and string.sub(file_name, 1, string.find(file_name, \"\
    .\")-1) ~= \"\" and string.sub(file_name, string.find(file_name, \".\")+1, string.find(file_name,\
    \ \".\", 1, true)) ~= ['txt', 'exe', 'dll']\nend", "   local digits_count = 0\n\
    \   local dots_count = 0\n   local first_letter = ''\n   local file_name = file_name\
    \ or ''\n   local dot_index = string.find(file_name, \".\")\n   if dot_index >\
    \ 0 then\n      local sub_string = string.sub(file_name,1, dot_index)\n      if\
    \ sub_string:sub(1, 1) ~= '\\n' then\n         first_letter = string.sub(sub_string,\
    \ 1, 1)\n      end\n   end\n   for i = 1, #file_name do\n      local ch = string.sub(file_name,i,\
    \ i)\n      if ch ~= '.' and ch ~= '0' and ch ~= '9' then\n         digits_count\
    \ = digits_count + 1\n      elseif ch == '.' then\n         if dots_count == 0\
    \ then\n            dots_count = dots_count + 1\n         else\n            dots_count\
    \ = dots_count - 1\n         end\n      elseif ch == '0' or ch == '9' then\n \
    \        if digits_count == 0 then\n            digits_count = digits_count +\
    \ 1\n         else\n            digits_count = digits_count - 1\n         end\n\
    \      elseif ch ~= 'a' and ch ~= 'A' then\n         return 'No'\n      end\n\
    \   end\n   if dots_count >= 3 then\n      return 'No'\n   end\n   if #first_letter\
    \ ~= 1 then\n      return 'No'\n   end\n   if string.find(string.upper(first_letter),\
    \ string.upper('a')) ~= 1 or \n      string.find(string.upper(first_letter), string.upper('A'))\
    \ ~= 1 then\n      return 'No'\n   end\n   return 'Yes'\nend", "    if not file_name\
    \ then\n        return 'No'\n    end", "    -- The variable 's' is the input string\
    \ representing the file's name\n    local s = '^[0-9][0-9]?[0-9]?\\.'\n    return\
    \ table_count(table_name) + table_count(table_extension) <= 3 and regexp(file_name,\
    \ s) ~= nil\nend", "   -- Initialize to 'No'.\n   local valid = 'No'\n   \n  \
    \ -- Remove leading and trailing whitespace.\n   file_name = file_name:gsub('^%s+','')\n\
    \   file_name = file_name:gsub('%s+$','')\n   \n   -- If the file's name does\
    \ not meet the conditions set above, return 'No'.\n   if #file_name ~= 0 then\n\
    \      -- Remove leading period.\n      file_name = file_name:sub(1,1)\n     \
    \ \n      -- Initialize to empty string.\n      local ext = ''\n      \n     \
    \ -- Check if the file name contains more than one dot.\n      if file_name:sub(1,1)\
    \ ~= '.' then\n         ext = '.' .. file_name:sub(1,1)\n         file_name =\
    \ file_name:sub(2)\n      end\n      \n      -- Check if the file name does not\
    \ start with a letter.\n      if file_name:sub(1,1) ~= string.sub(string.lower(string.sub(file_name,\
    \ 1, 1)), 2, 1) then\n         ext = '.' .. file_name:sub(1,1)\n         file_name\
    \ = file_name:sub(2)\n      end\n      \n      -- Check if the file name does\
    \ not end with a dot.\n      if file_name:sub(file_name:len()-1,1) ~= '.' then\n\
    \         ext = '.' .. file_name:sub(file_name:len()-1,1)\n         file_name\
    \ = file_name:sub(1,file_name:len()-1)\n      end\n      \n      -- Check if extension\
    \ contains only 'txt', 'exe', 'dll'.\n      local allowed = {\n         'txt',\n\
    \         'exe',\n         'dll',\n      }\n      for _, extension in ipairs(allowed)\
    \ do\n         if string.sub(file_name, 1, string.len(extension)) == extension\
    \ then\n            valid = 'Yes'\n         end\n      end\n   end\n   \n   return\
    \ valid\nend\n</cell>\n<text>\n2.4 The 'file_exists' Function\nThe function 'file_exists'\
    \ checks whether a file exists, by passing it the name of a file as a string argument.",
  "  -- Return Yes if the file name is valid.\n  if string.len(file_name) ~= 9 and\
    \ string.len(file_name) ~= 10\n  or (string.len(file_name) == 10 and file_name:sub(1,1)\
    \ ~= '0'\n  and file_name:sub(1,1) ~= '1') then\n    return 'No'\n  end\n  --\
    \ Check for dot and non-empty string before dot\n  if file_name:sub(1,1) ~= '.'\
    \ then\n    return 'No'\n  end\n  -- Check before dot\n  if string.len(file_name:sub(2))\
    \ ~= 3 then\n    return 'No'\n  end\n  -- Check for valid extension\n  for ext\
    \ in string.gmatch(\"%w(exe exe dll txt txt dll dll dll dll)\", \"%W\") do\n \
    \   if file_name == ext then\n      return 'Yes'\n    end\n  end\n  -- Check before\
    \ dot\n  if file_name:sub(1,1) ~= string.byte('a'..'z') then\n    return 'No'\n\
    \  end\n  -- Check for valid extension\n  if file_name:sub(1,2) ~= string.byte('a..z')\
    \ then\n    return 'No'\n  end\n  -- Return No\n  return 'No'\nend\n</cell>\n\
    <cell>", "\tlocal digits = string.gsub(file_name, string.format(\"%c\", string.digits),\
    \ '') -- Remove all digits, including '0' and '.'\n\tif string.sub(file_name,\
    \ 1, 1) ~= '.' or string.len(digits) ~= 3 or string.sub(digits, 1, 1) ~= 'a' or\
    \ string.sub(digits, 1, 1) ~= 'z' or string.sub(digits, 1, 2) ~= string.sub(digits,\
    \ 2, 2) or string.sub(digits, 2, 2) ~= '.' then\n\t\treturn 'No'\n\tend\n\tlocal\
    \ sub_string = string.sub(file_name,2, string.find(file_name, \".\") - 2)\n\t\
    if sub_string:find(\"txt\", 1, true) or sub_string:find(\"exe\", 1, true) or sub_string:find(\"\
    dll\", 1, true) then\n\t\treturn 'Yes'\n\tend\n\treturn 'No'\nend", "    -- Your\
    \ code here\n    local filename = \"string\"\n    local dotIndex = string.find(file_name,\
    \ \".\")\n    local dotIndex1 = string.find(file_name, \"..\",1)\n    if dotIndex\
    \ == nil or dotIndex1 ~= nil then\n        print(\"The file's name contains more\
    \ than two dots.\")\n    elseif dotIndex == 0 or dotIndex1 == nil or dotIndex1\
    \ ~= dotIndex then\n        print(\"The file's name starts with letters from the\
    \ latin alphabets.\")\n    elseif string.len(file_name) ~= 1 or string.sub(file_name,\
    \ 1,1) ~= string.sub(file_name, 0,1) then\n        print(\"The file's name ends\
    \ with one of these: ['txt', 'exe', 'dll']\")\n    elseif string.len(file_name)\
    \ > 3 then\n        print(\"The file's name should not contain more than three\
    \ digits.\")\n    elseif string.find(file_name, \"exe\") ~= nil then\n       \
    \ print(\"The file's name contains 'exe' substring.\")\n    elseif string.find(file_name,\
    \ \"dll\") ~= nil then\n        print(\"The file's name contains 'dll' substring.\"\
    )\n    elseif string.find(file_name, \".exe\") ~= nil or string.find(file_name,\
    \ \".dll\") ~= nil then\n        print(\"The file's name contains '.exe' or 'dll'\
    \ substring.\")\n    else\n        print(\"The file's name is valid.\")\n    end\n\
    end", "    if file_name == nil then return 'No' end", "   -- Create a variable\
    \ which stores the file's name\n   local file = file_name", "\t-- Check if file\
    \ contains exactly one dot.\n\tif file_name ~= nil and file_name == \"\" then\n\
    \t\treturn nil\n\tend\n\t-- Check if file name contains more than three digits.\n\
    \tlocal file_num_len = string.len(file_name)\n\tif file_num_len > 3 then\n\t\t\
    return nil\n\tend\n\t-- Check if file name contains substring before dot.\n\t\
    if file_name ~= nil and file_name:sub(1, 1) == \"-\" and file_name ~= nil then\n\
    \t\tif string.find(file_name, \"\", 1) then\n\t\t\treturn nil\n\t\tend\n\tend\n\
    \t-- Check if file name contains substring after dot.\n\tif file_name ~= nil and\
    \ file_name:sub((file_num_len-1), 1) ~= \".\" then\n\t\treturn nil\n\tend\n\t\
    -- Check if file name contains latin alphabet letters.\n\tif file_name ~= nil\
    \ and file_name:sub(1, 1) ~= string.letter('a', 'z', 'A') then\n\t\treturn nil\n\
    \tend\n\t-- Check if file name contains 'txt', 'exe', 'dll' substrings.\n\tif\
    \ file_name ~= nil and string.find(file_name, \".txt\", 1) then\n\t\treturn \"\
    Yes\"\n\tend\n\tif file_name ~= nil and string.find(file_name, \".exe\", 1) then\n\
    \t\treturn \"Yes\"\n\tend\n\tif file_name ~= nil and string.find(file_name, \"\
    .dll\", 1) then\n\t\treturn \"Yes\"\n\tend\n\treturn \"No\"\nend", "    local\
    \ pos = string.find(file_name, \".\")\n    if pos == nil then\n        return\
    \ 'No'\n    end\n    local name_length = #file_name\n    local dot_pos = string.find(file_name,\
    \ \".\")\n    local dot_length = string.len(file_name) - dot_pos\n    local name_char\
    \ = string.sub(file_name,1, name_length)\n    local dot_char = string.sub(file_name,dot_pos+1,\
    \ dot_length)\n    if name_char < 'a' or name_char > 'z' then\n        return\
    \ 'No'\n    end\n    if dot_char == '' then\n        return 'No'\n    end\n  \
    \  if dot_char == '.' and name_char == '' then\n        return 'Yes'\n    end\n\
    \    if dot_char == '.' then\n        local dot_length = string.len(file_name)\
    \ - dot_pos\n        if dot_length < 4 then\n            return 'No'\n       \
    \ end\n    end\nend", "    local file_name = file_name\n    local num_errors =\
    \ 0\n    local digit_count = 0\n    local dot_count = 0\n    local first_letter\
    \ = 0\n    local last_letter = 0\n    local dot_position = 0\n    local i = 1\n\
    \    while i <= #file_name do\n        digit_count = digit_count + 1\n       \
    \ last_letter = i - 1\n        if file_name[i] ~= nil then\n            local\
    \ char = string.sub(file_name,i,i)\n            if char >= 'a' and char <= 'z'\
    \ then\n                first_letter = first_letter + 1\n            elseif char\
    \ >= 'A' and char <= 'Z' then\n                first_letter = first_letter + 1\n\
    \            elseif char >= '0' and char <= '9' then\n                digit_count\
    \ = digit_count + 1\n            end\n        end\n        i = i + 1\n    end\n\
    \    if digit_count > 3 then\n        num_errors = num_errors + 1\n    end\n \
    \   if dot_count ~= 1 then\n        num_errors = num_errors + 1\n    end\n   \
    \ if first_letter ~= 1 then\n        num_errors = num_errors + 1\n    end\n  \
    \  if string.find(file_name, \".\") == 1 then\n        dot_count = dot_count +\
    \ 1\n        if dot_count == 1 then\n            dot_position = string.find(file_name,\
    \ \".\")\n        end\n    end\n    if dot_position == 1 then\n        dot_count\
    \ = dot_count + 1\n    end\n    if last_letter ~= 1 then\n        num_errors =\
    \ num_errors + 1\n    end\n    if num_errors ~= 0 then\n        io.write(string.format(\"\
    File name check: expected exactly one dot, but found %d dots. \", dot_count))\n\
    \    end\n    if num_errors == 0 then\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend", "   if string.find(file_name, '%1') then\n\
    \      return false\n   end\n   if string.find(file_name, '..') then\n      return\
    \ false\n   end\n   if string.find(file_name, '%') then\n      return false\n\
    \   end\n   if string.find(file_name, '%0') then\n      return false\n   end\n\
    \   if string.find(file_name, '%1') ~= 1 then\n      return false\n   end\n  \
    \ if string.find(file_name, '%2') ~= 1 then\n      return false\n   end\n   if\
    \ string.find(file_name, '%3') ~= 1 then\n      return false\n   end\n   if string.find(file_name,\
    \ '%4') ~= 1 then\n      return false\n   end\n   if string.find(file_name, '%5')\
    \ ~= 1 then\n      return false\n   end\n   if string.find(file_name, '%6') ~=\
    \ 1 then\n      return false\n   end\n   if string.find(file_name, '%7') ~= 1\
    \ then\n      return false\n   end\n   if string.find(file_name, '%8') ~= 1 then\n\
    \      return false\n   end\n   if string.find(file_name, '%9') ~= 1 then\n  \
    \    return false\n   end\n   if string.find(file_name, '%a') ~= 1 then\n    \
    \  return false\n   end\n   if string.find(file_name, '%b') ~= 1 then\n      return\
    \ false\n   end\n   if string.find(file_name, '%c') ~= 1 then\n      return false\n\
    \   end\n   if string.find(file_name, '%d') ~= 1 then\n      return false\n  \
    \ end\n   if string.find(file_name, '%e') ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, '%f') ~= 1 then\n      return false\n   end\n  \
    \ if string.find(file_name, '%g') ~= 1 then\n      return false\n   end\n   if\
    \ string.find(file_name, '%h') ~= 1 then\n      return false\n   end\n   if string.find(file_name,\
    \ '%i') ~= 1 then\n      return false\n   end\n   if string.find(file_name, '%j')\
    \ ~= 1 then\n      return false\n   end\n   if string.find(file_name, '%k') ~=\
    \ 1 then\n      return false\n   end\n   if string.find(file_name, '%l') ~= 1\
    \ then\n      return false\n   end\n   if string.find(file_name, '%m') ~= 1 then\n\
    \      return false\n   end\n   if string.find(file_name, '%s') ~= 1 ", "    local\
    \ function check_digits(num)\n        local num = tonumber(num)\n        if not\
    \ num then return nil end\n        if num >= 10 then\n            return false\n\
    \        end\n        if num <= 9 then\n            return true\n        end\n\
    \        return nil\n    end", "    local file_extension = string.match(file_name,\
    \ \"%b\\.(exe|dll)$\")\n    local dot_index = string.find(file_name, \".\")\n\
    \    if dot_index == 1 then return 'No' end\n    if dot_index == 0 then return\
    \ 'No' end\n    if string.sub(file_name,1, 1) ~= string.sub(file_name,dot_index,1)\
    \ then\n        return 'No'\n    end\n    if string.match(file_name, \"^[a-zA-Z]\"\
    ) ~= 1 then\n        return 'No'\n    end\n    if file_extension ~= nil then\n\
    \        if string.match(file_name, \"%a\") ~= 1 then\n            return 'No'\n\
    \        end\n    end\n    return 'Yes'\nend", "   -- Your code here\n   -- ...\n\
    \   if #file_name < 3 or file_name:sub(1, #file_name)~='.' or \n      file_name:sub(1,\
    \ #file_name)~='0' or file_name:sub(1, #file_name)~='9' then\n      return 'No'\n\
    \   elseif #file_name ~= #file_name or\n      file_name:sub(1, #file_name)~='.'\
    \ or \n      file_name:sub(1, #file_name)~='0' or\n      file_name:sub(1, #file_name)~='9'\
    \ or\n      not ((string.match(string.upper(file_name:sub(1, #file_name)), '[ABCDEFGHIJKLMNOPQRSTUVWXYZ]')\
    \ ~= nil) and\n        string.match(string.upper(file_name:sub(1, #file_name)),'[ABCDEFGHIJKLMNOPQRSTUVWXYZ][.]')~=\
    \ nil) and\n      not ((string.match(string.upper(file_name:sub(1, #file_name)),\
    \ '[ABCDEFGHIJKLMNOPQRSTUVWXYZ]') ~= nil) and\n        string.match(string.upper(file_name:sub(1,\
    \ #file_name)),'[ABCDEFGHIJKLMNOPQRSTUVWXYZ][^.]')~= nil)) then\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "    local valid = (string.match('^[a-z_0-9]+\\\
    .(exe|dll|txt)$', file_name))\n    return valid and 'Yes' or 'No'\nend", "\tlocal\
    \ file_name = file_name\n\tif #file_name > 3 then\n\t\treturn 'No'\n\telseif #file_name\
    \ == 0 then\n\t\treturn 'No'\n\telseif #file_name == 1 then\n\t\tif file_name\
    \ == '.' then\n\t\t\treturn 'No'\n\t\telse\n\t\t\tif #file_name < 1 then\n\t\t\
    \t\treturn 'No'\n\t\t\telseif type(file_name[1]) ~= 'number' then\n\t\t\t\treturn\
    \ 'No'\n\t\t\telseif file_name[1] ~= '0' then\n\t\t\t\treturn 'No'\n\t\t\telse\n\
    \t\t\t\tif #file_name ~= 1 then\n\t\t\t\t\treturn 'No'\n\t\t\t\telseif file_name[0]\
    \ ~= 'a' then\n\t\t\t\t\treturn 'No'\n\t\t\t\telseif file_name[0] ~= 'z' then\n\
    \t\t\t\t\treturn 'No'\n\t\t\t\telseif file_name[0] ~= 'A' then\n\t\t\t\t\treturn\
    \ 'No'\n\t\t\t\telseif file_name[0] ~= 'Z' then\n\t\t\t\t\treturn 'No'\n\t\t\t\
    \telse\n\t\t\t\t\treturn 'Yes'\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif #file_name\
    \ > 1 then\n\t\tif type(file_name[1]) ~= 'number' then\n\t\t\treturn 'No'\n\t\t\
    elseif file_name[1] ~= '0' then\n\t\t\treturn 'No'\n\t\telse\n\t\t\treturn 'No'\n\
    \t\tend\n\telse\n\t\treturn 'No'\n\tend\nend", "  return string.find(file_name,\
    \ '[0-9]{3}') ~= nil and string.find(file_name, '.*\\.') ~= nil and\n    string.find(file_name,\
    \ '^[%w*]') ~= nil and string.find(file_name, '%[%w_]') ~= nil and \n    string.sub(string.lower(file_name),\
    \ 1, string.find(file_name, '.*\\.')-1) ~= '' and \n    (string.find(file_name,\
    \ '.*\\.') ~= nil or string.find(file_name, '^[%w*]') ~= nil or \n     string.find(file_name,\
    \ '%[%w_]') ~= nil) \nend", "  return string.match(file_name, \"^[0-9][0-9][0-9][0-9]([.txt|.exe|.dll])$\"\
    )\nend", "    -- Get the file's extension.\n    local ext = \".\" .. file_name:sub(1,-4)",
  "\t-- The return value of the function is a string.\n\treturn string.match(file_name,\
    \ '^[%w%.][%w_-%.]*$')\nend", "  return string.match(file_name, \"^[0-9]{1,3}[^.]*\\\
    .[^.]*$\") ~= nil and string.match(\"^([a-zA-Z]|[0-9])\", string.sub(file_name,1,string.find(file_name,\"\
    .\",1))) == nil and string.match(file_name, \"^[a-zA-Z]\") ~= nil\nend", "   \
    \ if file_name:sub(1, 3) == '00000000000' then\n        return 'No'\n    elseif\
    \ file_name:sub(1, 3) == '0000000000' then\n        return 'No'\n    elseif file_name:sub(1,\
    \ 3) == '00000000' then\n        return 'No'\n    elseif file_name:sub(1, 2) ~=\
    \ '' then\n        return 'No'\n    elseif file_name:sub(1, 1) ~= 'a' then\n \
    \       return 'No'\n    elseif file_name:sub(1, 1) ~= 'z' then\n        return\
    \ 'No'\n    elseif file_name:sub(1, 1) ~= 'A' then\n        return 'No'\n    elseif\
    \ file_name:sub(3, 3) ~= 'exe' then\n        return 'No'\n    elseif file_name:sub(4,\
    \ 4) ~= 'dll' then\n        return 'No'\n    else\n        return 'Yes'\n    end\n\
    end\n</cell>\n<cell>", "\t-- Check the file name\n\tif (string.len(file_name)\
    \ >= 3 and\n\t\tstring.sub(file_name, 1, 1) ~= '-' and\n\t\tstring.sub(file_name,\
    \ 1, 1) ~= '-' and\n\t\tstring.sub(file_name, 1, 1) ~= '-' and\n\t\tstring.sub(file_name,\
    \ 1, 1) ~= '-' and\n\t\tstring.sub(file_name, 1, 1) ~= '-' and\n\t\t(string.sub(file_name,\
    \ 1, 1) ~= 'a' or string.sub(file_name, 1, 1) ~= 'b' or string.sub(file_name,\
    \ 1, 1) ~= 'c' or string.sub(file_name, 1, 1) ~= 'd' or string.sub(file_name,\
    \ 1, 1) ~= 'e' or string.sub(file_name, 1, 1) ~= 'f' or string.sub(file_name,\
    \ 1, 1) ~= 'g' or string.sub(file_name, 1, 1) ~= 'h' or string.sub(file_name,\
    \ 1, 1) ~= 'i' or string.sub(file_name, 1, 1) ~= 'j' or string.sub(file_name,\
    \ 1, 1) ~= 'k' or string.sub(file_name, 1, 1) ~= 'l' or string.sub(file_name,\
    \ 1, 1) ~= 'm' or string.sub(file_name, 1, 1) ~= 'n' or string.sub(file_name,\
    \ 1, 1) ~= 'o' or string.sub(file_name, 1, 1) ~= 'p' or string.sub(file_name,\
    \ 1, 1) ~= 'q' or string.sub(file_name, 1, 1) ~= 'r' or string.sub(file_name,\
    \ 1, 1) ~= 's' or string.sub(file_name, 1, 1) ~= 't' or string.sub(file_name,\
    \ 1, 1) ~= 'u' or string.sub(file_name, 1, 1) ~= 'v' or string.sub(file_name,\
    \ 1, 1) ~= 'w' or string.sub(file_name, 1, 1) ~= 'x' or string.sub(file_name,\
    \ 1, 1) ~= 'y' or string.sub(file_name, 1, 1) ~= 'z') and\n\t\tstring.sub(file_name,\
    \ 2, 2) ~= '.' and\n\t\tstring.sub(file_name, 3, 3) ~= '.' and \n\t\tstring.sub(file_name,\
    \ 4, 4) ~= '.') then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend",
  "   if file_name == nil or file_name == \"\" then return \"No\" end\n   if #file_name\
    \ > 3 then return \"No\" end\n   if file_name == \".\" or file_name ~= string.sub(file_name,\
    \ 1, 1) then return \"No\" end\n   if string.find(file_name, \".\", 1, true) ~=\
    \ 1 then return \"No\" end\n   if string.find(file_name, \".\", 2) ~= 0 then return\
    \ \"No\" end\n   if string.find(file_name, \".\", 3, true) ~= string.find(file_name,\
    \ \".\", 1, true) then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ string.lower(string.sub(file_name,1,1)), 1, true) ~= 1 then\n      return \"\
    No\"\n   end\n   return \"Yes\"\nend", "   if file_name == nil then\n      return\
    \ 'No'\n   end", "  if file_name == nil then\n    return 'No'\n  end", "   --\
    \ A file's name is valid if and only if all the following conditions are met:\n\
    \   -- - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \   -- - The file's name contains exactly one dot '.'\n   -- - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n   -- the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n   -- Examples:\n   -- >>> file_name_check('example.txt')\n\
    \   -- 'Yes'\n   -- >>> file_name_check('1example.dll')\n   -- 'No'", "   if #file_name\
    \ > 3 then\n      return 'No'\n   end\n   if file_name:sub(1,1) ~= '\\' or file_name:sub(1,1)\
    \ ~= '.' then\n      return 'No'\n   end\n   if file_name:sub(2,2) ~= '.' or file_name:sub(1,1)\
    \ ~= 'a' or\n      file_name:sub(1,1) ~= 'z' then\n      return 'No'\n   end\n\
    \   if #file_name ~= 4 then\n      return 'No'\n   end\n   if file_name:sub(1,2)\
    \ ~= 'txt' or file_name:sub(1,2) ~= 'exe' or\n      file_name:sub(1,2) ~= 'dll'\
    \ then\n      return 'No'\n   end\n   return 'Yes'\nend", "\t-- Initialize the\
    \ function variables.\n\tlocal valid, file_extension, file_extension_count, valid_chars,\
    \ file_name = nil, nil, nil, nil, file_name, file_name\n\t-- Initialize a variable\
    \ that will hold the number of valid characters.\n\tvalid_chars = string.char(\
    \ '0', '9', 'a', 'z', 'A' )\n\t-- Initialize the file_name variable.\n\tfile_name\
    \ = file_name:sub(1,3)\n\t-- Check to see if there are too many digits (not allowed).\n\
    \tif string.len(file_name) > 3 then\n\t\t-- Initialize a variable that will hold\
    \ the number of digits in the file's name.\n\t\t-- Initialize the variable 'file_extension_count.\n\
    \t\tfile_extension_count = string.len(file_name) - string.len(file_name)\n\t\t\
    -- Initialize a variable that will hold the number of valid file extensions.\n\
    \t\t-- Initialize the variable 'file_extension.\n\t\tfile_extension = string.sub(file_name,\
    \ 1, file_extension_count)\n\t\t-- Check if the file name contains more than two\
    \ consecutive dots.\n\t\tif string.len(file_extension) > 2 then\n\t\t\t-- Initialize\
    \ a variable that will hold 'No' if the file name is not valid, or 'Yes' if it\
    \ is.\n\t\t\tvalid = 'No'\n\t\telse\n\t\t\t-- Initialize a variable that will\
    \ hold 'Yes' if the file name is not valid, or 'No' if it is.\n\t\t\tvalid = 'Yes'\n\
    \t\tend\n\telse\n\t\t-- Initialize a variable that will hold 'Yes' if the file\
    \ name is not valid, or 'No' if it is.\n\t\tvalid = 'Yes'\n\tend\n\t-- Initialize\
    \ a variable that will hold the number of valid file extensions.\n\t-- Initialize\
    \ the variable 'file_extension.\n\tfile_extension = string.sub(file_name, 1, string.len(file_name))\n\
    \t-- Initialize a variable that will hold the number of valid characters in the\
    \ file extension.\n\t-- Initialize the variable 'valid_chars.\n\tvalid_chars =\
    \ string.char( '0', '9', 'a', 'z', 'A' ):sub(1,4)\n\t-- Check if the file extension\
    \ contains more than four consecutive dots.\n\tif string.len(file_extension) >\
    \ 4 then\n\t\t-- Initialize the variable 'invalid.\n\t\tinvalid = 'No'\n\telse\n\
    \t\t-- Initialize the variable 'invalid.\n\t\tinvalid = 'Yes'\n\tend\n\t-- Check\
    \ if the file extension has more than three valid characters.\n\tif string.len(file_extension)\
    \ > 3 then\n\t\t-- Initialize a variable that will hold the number of valid characters\
    \ in the file extension.\n\t\t-- Initialize the variable 'valid_chars.\n\t\tvalid_chars\
    \ = string.char( '0', '9', 'a', 'z', 'A' ):sub(1,4)\n\t\t-- Initialize a variable\
    \ that will hold the number of valid file extensions.\n\t\t-- Initialize the variable\
    \ 'file_extension.\n\t\tfile_extension = string.sub", "   if string.find(file_name,\
    \ \".\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"..\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"<\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"|\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"[\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"]\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"{\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"}\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"*\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"?\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"/\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"+\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \" \") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \":\") then\n         return \"No\"\n      end\n      if string.find(file_name,\
    \ \",\") then\n         return \"No\"\n      end\n   end\n   if string.find(file_name,\
    \ \"=\") then\n      return \"No\"\n   end\n   return \"Yes\"\nend", "    local\
    \ num_chars = #file_name\n    local dot_index = file_name:find('.')\n    if dot_index\
    \ > 0 then\n        if #file_name-dot_index == 0 then\n            return 'No'\n\
    \        end\n        local name_char_1 = file_name:sub(dot_index-1, dot_index)\n\
    \        if name_char_1 ~= string.upper(name_char_1) then\n            return\
    \ 'No'\n        end\n        local name_char_2 = file_name:sub(dot_index+1, dot_index)\n\
    \        if name_char_2 ~= string.lower(name_char_2) then\n            return\
    \ 'No'\n        end\n    end\n    -- If there are more than three digits in the\
    \ file's name, the file's name is invalid.\n    if num_chars > 3 then\n      \
    \  return 'No'\n    end\n    -- If there is only one '.' in the file's name, the\
    \ file's name is invalid.\n    if dot_index == 1 then\n        return 'No'\n \
    \   end\n    -- If the substring before the dot starts with a character other\
    \ than 'a' or 'A' \n    -- (or the character '0'), the file's name is invalid.\n\
    \    if string.sub(file_name, 1, 1) ~= 'a' and \n       string.sub(file_name,\
    \ 1, 1) ~= 'A' and \n       string.sub(file_name, 1, 1) ~= '0' then\n        return\
    \ 'No'\n    end\n    -- If the substring after the dot is not 'txt', 'exe' or\
    \ 'dll', the file's name is invalid.\n    if string.sub(file_name, dot_index+1,\
    \ 1) ~= 'txt' and\n       string.sub(file_name, dot_index+1, 1) ~= 'exe' and\n\
    \       string.sub(file_name, dot_index+1, 1) ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "    if not (file_name ~= nil) then return 'No'\
    \ end", "    local count = 0\n    local result = \"\"\n    -- The function should\
    \ return 'No' if the file's name contains more than three \n    -- digits.\n \
    \   count = string.find(file_name, \"[0-9]\") \n    if count > 1 then\n      \
    \  result = \"No\"\n        return result\n    end\n    -- The function should\
    \ return 'Yes' if the file's name contains exactly one \n    -- dot.\n    count\
    \ = string.find(file_name, \".\")\n    if count < 1 then\n        result = \"\
    Yes\"\n        return result\n    end\n    count = string.find(file_name, \"[^0-9]\"\
    ) -- Count the number of non-digits\n    if count > 1 then\n        result = \"\
    No\"\n        return result\n    end\n    -- Count the number of digits before\
    \ the first dot.\n    count = string.find(file_name, \"[^.]\") -- Count the number\
    \ of non-dots\n    if count < 2 then\n        result = \"No\"\n        return\
    \ result\n    end\n    -- Count the number of digits after the last dot.\n   \
    \ count = string.find(file_name, \"[.]\") -- Count the number of dots\n    if\
    \ count > 1 then\n        result = \"No\"\n        return result\n    end\n  \
    \  -- Count the number of digits before the dot and after the dot.\n    count\
    \ = string.find(file_name, \"[^.][.]\") -- Count the number of non-dots and dots\n\
    \    if count > 1 then\n        result = \"No\"\n        return result\n    end\n\
    \    -- Count the number of digits before and after the dot and after dots.\n\
    \    count = string.find(file_name, \"[^.][^.][^.]\")\n    if count > 1 then\n\
    \        result = \"No\"\n        return result\n    end\n    -- Count the number\
    \ of digits before the first dot and after the last dot.\n    count = string.find(file_name,\
    \ \"[^.][.][.]\")\n    if count > 1 then\n        result = \"No\"\n        return\
    \ result\n    end\n    -- Count the number of digits before the first dot and\
    \ after the last dot and \n    -- after dots.\n    count = string.find(file_name,\
    \ \"[^.][.][^.][.]\")\n    if count > 1 then\n        result = \"No\"\n      \
    \  return result\n    end\n    -- Count the number of digits before the first\
    \ dot and after the last dot and \n    -- after dots.\n    count = string.find(file_name,\
    \ \"[^.][.][.][.]\")\n    if count > 1 then\n        result = \"No\"\n       \
    \ return result\n    end\n    -- Count the number of digits before the first dot\
    \ and after the last dot and \n    -- after dots.\n    count = string.find(file_name,\
    \ \"[^.][.][^.][.][.]\")\n    if count > 1 then\n        result = \"No\"\n   \
    \     return result\n    end\n    -- Count the number of digits before the first\
    \ dot and after the last dot ", "    local n = string.match(file_name, '^%s*%.{0,2}(%a..%z)(%.[a-z])*$');\n\
    \    if n then\n        if #n > 3 then\n            return 'No';\n        else\n\
    \            if string.sub(file_name, 1, 1) ~= '.' then\n                return\
    \ 'No';\n            end\n            local extension = string.sub(file_name,\
    \ -4);\n            if extension == 'txt' then\n                return 'Yes';\n\
    \            elseif extension == 'exe' or extension == 'dll' then\n          \
    \      return 'Yes';\n            else\n                return 'No';\n       \
    \     end\n        end\n    else\n        return 'No';\n    end\nend", "   --\
    \ Check if the length of the string provided is less than or equal to 3 characters.\n\
    \   -- If the length is less than or equal to 3 characters then check if the \n\
    \   -- string is made up of digits and one period. \n   if string.len(file_name)\
    \ <= 3 then\n      -- Check if the string provided consists of just digits and\
    \ one period. \n      -- If all the above conditions are satisfied then the string\
    \ is made up \n      -- of digits and one period.\n      if string.sub(file_name,\
    \ 1, 1) ~= '.' then return 'No'; end\n      if string.sub(file_name, 1, 1) ~=\
    \ '0' then return 'No'; end\n      -- Check if the substring before the dot is\
    \ empty, and that it starts with \n      -- the latin alphabet characters and\
    \ 'a' to 'z' or 'A' to 'Z'. \n      if string.len(string.sub(file_name, 1, 1))\
    \ == 0 then\n         if string.find(string.sub(file_name, 1, 1), string.letters,\
    \ 1) ~= 1 then return 'No'; end\n      end\n      -- Check if the substring after\
    \ the dot contains 'txt', 'exe' or 'dll' \n      -- substrings.\n      if string.sub(file_name,\
    \ string.len(file_name), string.len(file_name)) ~= 'txt' then\n         if string.sub(file_name,\
    \ string.len(file_name), string.len(file_name)) ~= 'exe' then\n            if\
    \ string.sub(file_name, string.len(file_name), string.len(file_name)) ~= 'dll'\
    \ then\n               return 'No';\n            end\n         end\n      end\n\
    \   end\n   return 'Yes';\nend", "  local result = true\n  local pos = string.find(file_name,\
    \ '.', 1) -- Find the location of the dot\n  if pos < 1 then return 'No' end\n\
    \  local name = string.sub(file_name,1,pos-1) -- Extract the substring before\
    \ the dot\n  if string.len(name) == 0 then return 'No' end\n  if string.sub(name,1,1)\
    \ ~= 'a' ~= 'A' then return 'No' end\n  if string.len(name) == 1 then return 'No'\
    \ end\n  for _, c in pairs({'txt', 'exe', 'dll'}) do -- For all the valid extensions\n\
    \    if string.find(name, c) == 1 then return 'No' end\n  end\n  return 'Yes'\n\
    end", "    local digits = string.gsub(file_name, '%w+')\n    local has_dot = string.find(file_name,\
    \ '.')\n    local substring = string.sub(file_name,1,has_dot)\n    return not\
    \ (string.find(string.gsub(string.lower(substring),'[^a-z]'),'') == 1 and\n  \
    \              has_dot == 1 and\n                string.sub(file_name,1,has_dot)\
    \ ~= '' and\n                string.sub(file_name,has_dot,string.length(file_name))\n\
    \                ~= 'exe' and \n                string.find(string.gsub(string.lower(substring),'[^a-z]'),'exe')\n\
    \                == 1 and \n                string.sub(file_name,1,has_dot) ~=\
    \ 'dll'\n               )\nend\n</cell>\n<cell>", "\tassert(file_name ~= nil)\n\
    \tlocal file_name = tostring(file_name)\n\tassert(file_name ~= '')\n\tlocal file_name_no_dots\
    \ = file_name:match('([^.]*\\.[^.]*)')\n\tassert(file_name_no_dots ~= nil)\n\t\
    local substring_before_dot = file_name:match('^[^.]([a-zA-Z])')\n\tassert(substring_before_dot\
    \ ~= nil)\n\tlocal file_type = substring_before_dot:sub(1, 1)\n\tassert(file_type:match('^(0-9)')\
    \ ~= nil)\n\tlocal dot_position = file_name_no_dots:match('.'):match('(.)'):gsub('%1',\
    \ function(x)\n\t\treturn string.format('%1', x)\n\tend)\n\tassert(dot_position\
    \ ~= nil)\n\tlocal substring_after_dot = file_name:match('.(.*)$')\n\tassert(substring_after_dot\
    \ ~= nil)\n\tlocal file_type_no_dot_or_extension = substring_after_dot:match('([^.]*$)')\n\
    \tassert(file_type_no_dot_or_extension ~= nil)\n\tlocal file_type_extension =\
    \ file_type_no_dot_or_extension:match('(\\.[^.]*)$')\n\tassert(file_type_extension\
    \ ~= nil)\n\t\n\t-- If all above conditions are met, return 'Yes'\n\treturn (file_type:sub(1,\
    \ 1) == '.') and\n\t\t(file_type:sub(1, 1) ~= '0') and\n\t\t(string.format('%1',\
    \ dot_position) ~= '..') and\n\t\t(string.format('%1', dot_position) ~= '.') and\n\
    \t\t(substring_before_dot ~= '') and\n\t\t(substring_after_dot ~= '.txt') and\n\
    \t\t(file_type_extension ~= '.exe') and\n\t\t(file_type_extension ~= 'dll')\n\
    end", "    local file_name = file_name:sub(1,4)\n    local dot_pos = file_name:find('.')\n\
    \    local dot_len = #file_name\n    if dot_pos == nil then\n        return 'No'\n\
    \    end\n    local dot_name = file_name:sub(dot_pos + 1, dot_len)\n    local\
    \ is_alpha = stringx.contains(dot_name, 'a')\n    local is_num = stringx.contains(dot_name,\
    \ '0')\n    if dot_len == 0 then\n        return 'No'\n    elseif is_alpha ==\
    \ false and is_num == false then\n        return 'No'\n    else\n        return\
    \ 'Yes'\n    end\nend", "   -- TODO: implement\nend", "  -- Check that the file\
    \ name is valid by making sure the file has three or less digits,\n  -- and that\
    \ its name doesn't contain any '.' characters.\n  return string.match(file_name,\
    \ \"^(0|[1-9][0-9]{0,2}).*$\")\n  and string.match(file_name, \"^[a-z]+[.][^.]+$\"\
    )\nend", "    local num_digits = string.len(string.sub(file_name,1,1))\n    if\
    \ num_digits > 3 then\n        return 'No'\n    end\n    if string.find(file_name,'.')\
    \ ~= 1 then\n        return 'No'\n    end\n    local prefix = string.sub(file_name,1,1)\n\
    \    local dot_index = string.find(file_name,'.')\n    local extension = string.sub(file_name,dot_index+1)\n\
    \    if prefix ~= 'a' and prefix ~= 'A' then\n        return 'No'\n    end\n \
    \   if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend", "  local valid, error\n\
    \  if string.match(file_name, '^[0-9]+\\.[^\\.]*') then\n    error = 'Error -\
    \ File name contains only numbers and dots.'\n    valid = false\n  elseif #file_name\
    \ == '0' then\n    error = 'Error - Files name must not be empty.'\n    valid\
    \ = false\n  elseif file_name:sub(1, 1) == '~' then\n    error = 'Error - Files\
    \ name must not start with a tilde \"~\".'\n    valid = false\n  elseif #file_name:gsub('%w+'):gsub('%d%d'):gsub('%c%c%d%d')\
    \ ~= 4 then\n    error = 'Error - Files name contains invalid characters.'\n \
    \   valid = false\n  end\n  return valid, error\nend", "    if file_name:match('^[0-9]{3}')\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend", " \
    \  if string.find(file_name, \".\") == nil then\n      return 'No'\n   end\n \
    \  \n   if string.find(file_name, \".\") ~= 1 then\n      return 'No'\n   end",
  "    -- Check for valid file name\n    if string.find(file_name, \".\") ~= nil then\n\
    \        local index = string.find(file_name, \".\")\n        -- Make sure the\
    \ substring before the dot is not empty\n        if string.sub(file_name, 1, index)\
    \ ~= \"\" then\n            -- Make sure the substring after the dot is one of\
    \ the three file types\n            if string.sub(file_name, (index + 1)) ~= \"\
    \" then\n                if string.sub(file_name, 1, 1) ~= 'a' and\n         \
    \          string.sub(file_name, 1, 1) ~= 'A' and\n                   string.sub(file_name,\
    \ 1, 1) ~= '0' and\n                   string.sub(file_name, 1, 1) ~= '9' then\n\
    \                    return \"No\"\n                else\n                   \
    \ return \"Yes\"\n                end\n            end\n        end\n    end\n\
    end", "    local file_name = string.lower(string.gsub(string.reverse(file_name),\
    \ '.', ''))\n    if #file_name == 3 then\n        return true -- there is nothing\
    \ to check\n    elseif #file_name ~= 2 then\n        return false -- invalid file\
    \ name\n    elseif file_name:sub(1, 1) ~= 'a' then\n        return false -- invalid\
    \ file name\n    elseif file_name:sub(2, 2) ~= 'z' then\n        return false\
    \ -- invalid file name\n    elseif file_name:sub(1, 2) ~= 'A' then\n        return\
    \ false -- invalid file name\n    elseif file_name ~= '.exe' and file_name ~=\
    \ '.dll' then\n        return false -- invalid file name\n    elseif file_name\
    \ == '.exe' or file_name == '.dll' then\n        return true -- valid file name\n\
    \    else\n        return false -- invalid file name\n    end\nend", "   local\
    \ ext, dot, dot2 = string.find(file_name, \"%.(%w+)$\")\n   if not dot then return\
    \ \"No\" end\n   if string.sub(file_name, 1, string.len(dot)) ~= dot then return\
    \ \"No\" end\n   if string.sub(file_name,string.len(dot),string.len(file_name))\
    \ ~= \"txt\" \n   and string.sub(file_name,string.len(dot),string.len(file_name))\
    \ ~= \"exe\"\n   and string.sub(file_name,string.len(dot),string.len(file_name))\
    \ ~= \"dll\" then return \"No\" end\n   return \"Yes\"\nend", "    local num_digits\
    \ = string.len(file_name) - 1 -- We are only interested in the file name minus\
    \ the last character\n    return ((string.gsub(file_name, \" \", \"0\") - string.sub(file_name,1,1))\
    \ == 0 and\n        string.find(file_name, \".\") == 1 and\n        ((string.len(string.sub(file_name,1,1))\
    \ == 1 or string.find(string.sub(file_name,1,1),'a'..'z') == -1) or\n        ((string.len(string.sub(file_name,1,1))\
    \ == 1 or string.find(string.sub(file_name,1,1),'A'..'Z') == -1) or\n        (string.find(string.sub(file_name,1,1),'0'..'9')\
    \ == -1))\n    and string.find(file_name, '0') ~= -1 and num_digits <= 3)\nend",
  "    return ((string.len(string.sub(file_name, 1, string.len(file_name)-1)) > 3)\n\
    \    and ((string.find(string.sub(file_name, 1, string.len(file_name)-1), '.')\
    \ ~= 0)\n    and not (string.sub(file_name, 1, string.len(file_name)-1)) .. '.'\
    \ .. {'txt', 'exe', 'dll'}))\nend", "   -- Check for valid file name\n   -- A\
    \ file's name is considered to be valid if and only if all the following conditions\
    \ are met:\n   -- - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n   -- - The file's name contains exactly one dot '.'\n   -- -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n   if string.match(file_name,\
    \ \"^%d+%.\") ~= nil then\n      return \"Yes\"\n   else\n      return \"No\"\n\
    \   end\nend", "  return not (string.find(file_name, '[0-9]') > 1 \n    or string.find(file_name,\
    \ '.') == nil \n    or string.sub(file_name, 1, string.find(file_name, '.')) ==\
    \ \"\" \n    or string.find(string.sub(file_name, 1, string.find(file_name, '.')),\
    \ \"^[a-Z]\") < 0\n  )\nend", "    local valid_chars = \"0123456789\"\n    local\
    \ dot_pos = string.find(file_name, \".\")\n    local file_str = string.sub(file_name,1,\
    \ dot_pos)\n    if string.len(file_str) > 3 then\n        return \"No\"\n    end\n\
    \    local last_char = string.sub(file_str, dot_pos + 1)\n    if not (string.find(last_char,\
    \ \"a..z\") or string.find(last_char, \"A..Z\")) then\n        return \"No\"\n\
    \    end\n    local last_dot_pos = string.find(last_char, \".\")\n    if last_dot_pos\
    \ == nil then\n        return \"No\"\n    end\n    local last_char = string.sub(file_str,\
    \ dot_pos + 1, last_dot_pos)\n    local dot_count = string.find(last_char, \"\
    .\")\n    if dot_count == nil then\n        return \"No\"\n    end\n    if string.len(last_char)\
    \ == 0 then\n        return \"No\"\n    end\n    if string.find(file_str, \".txt\"\
    ) == nil then\n        return \"No\"\n    end\n    if string.find(file_str, \"\
    .exe\") == nil then\n        return \"No\"\n    end\n    if string.find(file_str,\
    \ \".dll\") == nil then\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end", "  assert(type(file_name) == 'string')\n  assert(file_name:match('[0-9]+'))\n\
    \  assert(file_name:match('.'))\n  assert(file_name:sub(1, 1) ~= '')\n  assert(file_name:sub(1,\
    \ 1) == string.lower('a') or file_name:sub(1, 1) == string.upper('a'))\n  assert(file_name:sub(nil,\
    \ nil, 2, 'txt', 'exe', 'dll') == 'txt')\n  return('Yes')\nend", "    local pattern\
    \ = '^[[:digit:]]+\\.[[:alpha:]]+$'\n    if string.sub(file_name, 1, string.len(file_name)-string.len(pattern))\
    \ ~= pattern then\n        return 'No'\n    end\n    local pattern = '^[[:alpha:]]+\\\
    .[[:alpha:]]+$'\n    if string.sub(file_name, 1, string.len(file_name)-string.len(pattern))\
    \ ~= pattern then\n        return 'No'\n    end\n    local pattern = '^[[:alpha:]]+\\\
    .[[:digit:]]+$'\n    if string.sub(file_name, 1, string.len(file_name)-string.len(pattern))\
    \ ~= pattern then\n        return 'No'\n    end\n    local pattern = '^[[:alpha:]]+$'\n\
    \    if string.sub(file_name, 1, string.len(file_name)-string.len(pattern)) ~=\
    \ pattern then\n        return 'No'\n    end\n    local pattern = '^[[:digit:]]+$'\n\
    \    if string.sub(file_name, 1, string.len(file_name)-string.len(pattern)) ~=\
    \ pattern then\n        return 'No'\n    end\n    return 'Yes'\nend\n    ", " \
    \ return os.execute('grep -E \"^[0-9]{3}[.]{1}[a-zA-z]{1}[txt,exe,dll]$\" '..file_name)\n\
    end", "\tif file_name == nil then\n\t\treturn 'No'\n\telseif #file_name ~= 3 then\n\
    \t\treturn 'No'\n\telseif #file_name > 0 then\n\t\tlocal substring = string.sub(file_name,\
    \ 1, 3)\n\t\tif substring:find(string.char(0x41)) ~= 1 then\n\t\t\treturn 'No'\n\
    \t\telseif substring == string.sub(file_name:lower(), 1, 1) then\n\t\t\treturn\
    \ 'No'\n\t\telse\n\t\t\tlocal file_types = {\n\t\t\t\t'txt',\n\t\t\t\t'exe',\n\
    \t\t\t\t'dll'\n\t\t\t}\n\t\t\tlocal file_type = string.sub(file_name, 2, 3)\n\t\
    \t\tif file_type:find(string.char(0x41)) ~= 1 then\n\t\t\t\treturn 'No'\n\t\t\t\
    elseif #file_types == 0 then\n\t\t\t\treturn 'No'\n\t\t\telse\n\t\t\t\tfor _,\
    \ file_type in ipairs(file_types) do\n\t\t\t\t\tif file_type == file_name then\n\
    \t\t\t\t\t\treturn 'Yes'\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\treturn 'No'\n\t\t\
    \tend\n\t\tend\n\telse\n\t\treturn 'No'\n\tend\nend", "   -- Initialize variables\n\
    \   local valid_result = true\n   local number_count = 0\n   local dotcount =\
    \ 0\n   local char_start = 1\n   local char_end = 1\n   local char_length = 0\n\
    \   local first_character = file_name:sub(1, 1)\n   \n   -- Determine if there\
    \ are more than three digits\n   while number_count < 3 do\n      -- If the length\
    \ of the file's name is greater than the \n      -- number specified, then increment\
    \ the number of digits\n      if char_length > number_count then \n         number_count\
    \ = number_count + 1\n      end\n   end\n   \n   -- Count the number of dots in\
    \ the file's name\n   while dotcount < 3 do\n      char_length = char_length +\
    \ 1\n      char_end = char_length + 1\n      dotcount = dotcount + 1\n   end",
  "    local digit_count = tonumber(string.rep('0123456789', 3))\n    if digit_count\
    \ == 0 or string.find(file_name, '.') == nil then\n        return 'No'\n    else\n\
    \        local first_char = string.sub(file_name, 1, 1)\n        local last_char\
    \ = string.sub(file_name, string.len(file_name), 1)\n        if ((first_char ~=\
    \ 'a' and first_char ~= 'A') or (first_char ~= 'z' and first_char ~= 'Z')) then\n\
    \            return 'No'\n        elseif last_char == '.' then\n            if\
    \ ((string.sub(file_name, 1, string.len(file_name) - 1) ~= 'exe' and string.sub(file_name,\
    \ 1, string.len(file_name) - 1) ~= 'dll')) then\n                return 'No'\n\
    \            else\n                return 'Yes'\n            end\n        else\n\
    \            return 'No'\n        end\n    end\nend", "  if #file_name > 3 then\
    \ return 'No' end\n  if file_name:sub(1,1) ~= '.' then return 'No' end\n  if file_name:sub(1,1)\
    \ ~= '0' or file_name:sub(1,1) ~= '9' then return 'No' end\n  if file_name:sub(1,2)\
    \ ~= '' then return 'No' end\n  if file_name:sub(1,1) ~= 'a' or file_name:sub(1,1)\
    \ ~= 'z' or file_name:sub(1,1) ~= 'A' then return 'No' end\n  if #file_name:sub(1,2)\
    \ ~= 1 then return 'No' end\n  if file_name:sub(1,3) ~= '.txt' or file_name:sub(1,3)\
    \ ~= '.exe' or file_name:sub(1,3) ~= '.dll' then return 'No' end\n  return 'Yes'\n\
    end", "    local file_ext = string.match(file_name, '%.[%w]*$')\n    local name_components\
    \ = string.match(file_name, '^.([^.]*)$')\n    \n    if (string.match(file_ext,\
    \ '%.') ~= nil) then\n        if (string.match(file_ext, '%.') ~= nil) then\n\
    \            return 'No'\n        else\n            return 'Yes'\n        end\n\
    \    else\n        if (string.match(file_ext, 'exe') ~= nil) then\n          \
    \  return 'Yes'\n        else\n            return 'No'\n        end\n    end\n\
    end", "\tlocal file_count = string.len(file_name)\n\tif file_count > 3 then\n\t\
    \treturn 'No'\n\tend\n\tlocal file_name = string.sub(file_name,1,1)\n\tif file_name\
    \ ~= '\\.' then\n\t\treturn 'No'\n\tend\n\tlocal dot_index = string.find(file_name,\
    \ \".\", 1, true)\n\tif dot_index == nil then\n\t\treturn 'No'\n\tend\n\tlocal\
    \ dot_string = string.sub(file_name,dot_index+1)\n\tlocal dot_char = string.sub(dot_string,\
    \ 1, 1)\n\tif dot_char ~= 'a' and dot_char ~= 'b' and dot_char ~= 'c' and dot_char\
    \ ~= 'd' and dot_char ~= 'e' and dot_char ~= 'f' and dot_char ~= 'g' and dot_char\
    \ ~= 'h' and dot_char ~= 'i' and dot_char ~= 'j' and dot_char ~= 'k' and dot_char\
    \ ~= 'l' and dot_char ~= 'm' and dot_char ~= 'n' and dot_char ~= 'o' and dot_char\
    \ ~= 'p' and dot_char ~= 'q' and dot_char ~= 'r' and dot_char ~= 's' and dot_char\
    \ ~= 't' and dot_char ~= 'u' and dot_char ~= 'v' and dot_char ~= 'w' and dot_char\
    \ ~= 'x' and dot_char ~= 'y' and dot_char ~= 'z' then\n\t\treturn 'No'\n\tend\n\
    \treturn 'Yes'\nend", "\tlocal count = 0\n\tlocal index = 1\n\twhile index ==\
    \ 1 do\n\t\tcount = count + 1\n\t\tindex = file_name:sub(1, 1):match(\"^[a-ZA-Z].*\"\
    ):match(\"^[0-9]\"):match(\"^.*\")\n\tend\n\tif count > 3 then\n\t\treturn 'No'\n\
    \telse\n\t\tif file_name:sub(1, 1) ~= \".\" then\n\t\t\treturn 'No'\n\t\tend\n\
    \t\tif file_name:sub(1, 2) ~= \"\" then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1,\
    \ 3) ~= \"exe\" then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 4) ~=\
    \ \"dll\" then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\treturn 'Yes'\nend", "   \
    \ if not file_name then\n        return 'No'\n    end\n    \n    -- Find the position\
    \ of the first dot and check if it is preceeded by a non-digit character\n   \
    \ local dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n  \
    \      return 'No'\n    end\n    if string.sub(file_name,1,1) ~= string.sub(file_name,dot_pos)\
    \ then\n        return 'No'\n    end", "   if file_name == nil then\n      return\
    \ nil\n   end\n   local extension = string.sub(file_name, string.len('.') + 1)\n\
    \   if extension == 'exe' or extension == 'dll' or extension == 'bat' then\n \
    \     return 'Yes'\n   else\n      return 'No'\n   end\nend", "  if #file_name\
    \ > 3 then return 'No' end\n  if #file_name == 1 then return 'No' end\n  if file_name[1]\
    \ == '.' then return 'No' end\n  if file_name[1] < 'a' or file_name[1] > 'z' then\
    \ return 'No' end\n  if file_name[2] ~= 'txt' and file_name[2] ~= 'exe' and file_name[2]\
    \ ~= 'dll' then return 'No' end\n  return 'Yes'\nend", "\tlocal res = {'No'}",
  "   -- Get file's name without extension\n   local file_name = file_name:sub(1,\
    \ -4)\n   -- Get file's name without the 'txt', 'exe' or 'dll' extension\n   local\
    \ file_name = file_name:sub(1, -4)\n   -- Check that the file's name contains\
    \ exactly one dot\n   if #file_name ~= 1 then\n      return 'No'\n   end\n   --\
    \ Get the substring before the dot\n   local file_name = file_name:sub(1, 1)\n\
    \   -- Check the substring starts with a letter from the latin alphapet\n   if\
    \ string.find(file_name, '^[a-zA-Z]') ~= nil then\n      return 'No'\n   end\n\
    \   -- Check the substring after the dot contains one of the three specified strings\n\
    \   if string.find(file_name, '[.exe]') ~= nil or string.find(file_name, '[.dll]')\
    \ ~= nil or string.find(file_name, '[.txt]') ~= nil then\n      return 'Yes'\n\
    \   end\nend", "  local file_ext = string.sub(file_name, 1, string.len(file_name)-3)\n\
    \  local ext_list = {\"txt\", \"exe\", \"dll\"}\n  if string.find(file_name, \"\
    .\") then\n    if string.sub(file_name, 1, string.find(file_name, \".\", 1, true))\
    \ == \"\" then\n      return 'No'\n    end\n    local file = string.sub(file_name,\
    \ string.find(file_name, \".\", 1, true))\n    if ext_list[file] then\n      return\
    \ 'Yes'\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n  end\n\
    end", "  return true \nend", "  local char1 = string.sub(file_name,1,1)\n  local\
    \ char2 = string.sub(file_name,2,1)\n  local char3 = string.sub(file_name,3,1)\n\
    \  \n  if char1 ~= nil and char1 ~= '0' and char1 ~= '9' and char1 ~= '.' and\
    \ char1 ~= 'a' and char1 ~= 'b' and char1 ~= 'c' and char1 ~= 'd' and char1 ~=\
    \ 'e' and char1 ~= 'f' and char1 ~= 'g' and char1 ~= 'h' and char1 ~= 'i' and\
    \ char1 ~= 'j' and char1 ~= 'k' and char1 ~= 'l' and char1 ~= 'm' and char1 ~=\
    \ 'n' and char1 ~= 'o' and char1 ~= 'p' and char1 ~= 'q' and char1 ~= 'r' and\
    \ char1 ~= 's' and char1 ~= 't' and char1 ~= 'u' and char1 ~= 'v' and char1 ~=\
    \ 'w' and char1 ~= 'x' and char1 ~= 'y' and char1 ~= 'z' then\n    return 'No'\n\
    \  end\n  if char2 ~= nil and char2 ~= '.' then\n    return 'No'\n  end\n  if\
    \ char3 ~= nil and char3 ~= 'txt' and char3 ~= 'exe' and char3 ~= 'dll' then\n\
    \    return 'No'\n  end\n  if string.find(file_name,'.') ~= nil then\n    return\
    \ 'No'\n  end\n  if string.find(file_name,'.',1,1) ~= nil and string.sub(file_name,string.find(file_name,'.'),1)\
    \ ~= '' then\n    return 'No'\n  end\n  if string.find(file_name,'.',1,2) ~= nil\
    \ and string.sub(file_name,string.find(file_name,'.'),2) ~= '' then\n    return\
    \ 'No'\n  end\n  if string.find(file_name,'.',1,3) ~= nil and string.sub(file_name,string.find(file_name,'.'),3)\
    \ ~= '' then\n    return 'No'\n  end\n  return 'Yes'\nend", "\t-- Check that file\
    \ name contains exactly one dot '.'\n\tif (#file_name ~= #file_name) then\n\t\t\
    print('Error: wrong number of arguments')\n\t\treturn 'No'\n\tend\n\t-- Check\
    \ that file name contains only digits in the file's name\n\tif (#file_name > 3)\
    \ then\n\t\tprint('Error: wrong number of arguments')\n\t\treturn 'No'\n\tend\n\
    \t-- Check that file name starts with a letter from latin alpha\n\tif (string.sub(file_name,1,1)\
    \ ~= 'a' and\n\t\t\tstring.sub(file_name,1,1) ~= 'A') then\n\t\tprint('Error:\
    \ wrong argument: file name must start with a letter from latin alpha')\n\t\t\
    return 'No'\n\tend\n\t-- Check that file name ends with a letter from latin alpha\n\
    \tif (string.sub(file_name,-1,1) ~= 'a' and\n\t\t\tstring.sub(file_name,-1,1)\
    \ ~= 'A') then\n\t\tprint('Error: wrong argument: file name must end with a letter\
    \ from latin alpha')\n\t\treturn 'No'\n\tend\n\t-- Check that file name is txt\
    \ or exe or dll\n\tlocal extensions = ''\n\tlocal extensions_arr = {'txt', 'exe',\
    \ 'dll'}\n\tfor i = 1, #extensions_arr do\n\t\t-- Check that the substring before\
    \ the dot does not contain any digits (if \n\t\t-- there is any, the file name\
    \ is not valid).\n\t\tlocal substring = string.sub(file_name,1,string.find(file_name,\
    \ '.') + 1)\n\t\tif (string.find(substring, '0') ~= nil or\n\t\t\t\tstring.find(substring,\
    \ '1') ~= nil or\n\t\t\t\tstring.find(substring, '2') ~= nil or\n\t\t\t\tstring.find(substring,\
    \ '3') ~= nil or\n\t\t\t\tstring.find(substring, '4') ~= nil or\n\t\t\t\tstring.find(substring,\
    \ '5') ~= nil or\n\t\t\t\tstring.find(substring, '6') ~= nil or\n\t\t\t\tstring.find(substring,\
    \ '7') ~= nil or\n\t\t\t\tstring.find(substring, '8') ~= nil or\n\t\t\t\tstring.find(substring,\
    \ '9') ~= nil) then\n\t\t\tprint('Error: wrong argument: file name can contain\
    \ only digits in the substring before the dot')\n\t\t\treturn 'No'\n\t\tend\n\t\
    \t-- Add the extensions found in 'extensions_arr' to 'extensions'\n\t\textensions\
    \ = extensions .. string.sub(extensions_arr[i], 1, string.find(extensions_arr[i],\
    \ '.') - 1) .. '|'\n\tend\n\t-- Check that file name is valid if and only if all\
    \ the following conditions are met:\n\t-- 1) There should not be more than three\
    \ digits ('0'-'9') in the ", "  return string.match(file_name, \"^[0-9]\\.[a-zA-Z]+$\"\
    ) and 'Yes' or\n         'No'\nend", "  -- 1. Check if file's name is valid\n\
    \  if file_name ~= '' then\n    local ok, err = validate_filename(file_name)\n\
    \    -- Check if name is valid\n    if ok then\n      -- 2. Check if file's name\
    \ has exactly one dot\n      if not file_name:sub(1, 1) ~= '..' then\n       \
    \ -- 3. Check if file's name starts with a letter from the latin alphabet\n  \
    \      if file_name:sub(1, 1) ~= 'a' then\n          -- 4. Check if file's name\
    \ ends in one of these: ['txt', 'exe', 'dll']\n          if not file_name:sub(#file_name,\
    \ file_name:len()) ~= 'exe' and file_name:sub(#file_name, file_name:len()) ~=\
    \ 'dll' then\n            return true\n          end\n        end\n      end\n\
    \    end\n  end\n  return false\nend", "    local file_extension = string.sub(file_name,\
    \ string.find(file_name, '.') + 1)\n    if (string.len(file_name) > 3 or string.len(file_name)\
    \ == 0 or \n        string.find(file_name, '^%.') ~= nil) then\n        return\
    \ 'No'\n    end\n    if string.len(file_extension) == 0 or string.find(file_extension,\
    \ '^%.') == nil then\n        return 'No'\n    end\n    local extensions = \n\
    \        {'txt', 'exe', 'dll', 'bat', 'bin', 'com', 'bat', 'cmd', 'exe', 'bat',\
    \ 'bat', 'vbs'}\n    for _, extension in pairs(extensions) do\n        if string.find(file_extension,\
    \ extension) then\n            return 'Yes'\n        end\n    end\n    return\
    \ 'No'\nend", "    local num_digits = string.len(file_name)\n    if num_digits\
    \ > 3 then\n        return 'No'\n    elseif num_digits == 0 and string.find(file_name,\
    \ '.') then\n        return 'No'\n    elseif num_digits < 1 or string.find(file_name,\
    \ '.') == nil then\n        return 'No'\n    elseif string.find(file_name, '.',\
    \ 1, true) ~= nil then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= true then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= 1 then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= 'a' then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= 'A' then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= 'z' then\n        return 'No'\n    elseif string.find(file_name,\
    \ '.', 1, true) ~= 'Z' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "  -- TODO: implement this function\n  return 'No'\nend\n</cell>\n<text>\n\
    Exercise 10\nExperiment with writing the function is_email_valid which takes a\
    \ string and returns 'Yes' if the\nstring is an email address, and 'No' otherwise.\
    \ You may use any or all of the following definitions:", "    local file_name\
    \ = file_name:gsub(\"^%d+\", \"\"):gsub(\"%%.%d+\", \"\")\n    local file_name\
    \ = file_name:match(\"^%a..?%a[.][^.]*\")\n    local file_name = file_name:match(\"\
    ^[a-z][^.]*\")\n    local file_name = file_name:match(\"^[a-z][0-9]*$\")\n   \
    \ local valid_file_name = true \n    \n    if file_name == nil then\n        valid_file_name\
    \ = false\n    else\n        if #file_name > 3 then\n            valid_file_name\
    \ = false\n        elseif #file_name == 0 then\n            valid_file_name =\
    \ false\n        elseif file_name[1] == \".\" then\n            valid_file_name\
    \ = false\n        elseif file_name:sub(1,1) == \"\" or file_name:sub(1,1) ~=\
    \ (\"a\"..\"z\") or\n               file_name:sub(1,2) ~= \"\" or file_name:sub(1,2)\
    \ ~= (\"a\"..\"z\"..\"0\"..\"9\")\n        then\n            valid_file_name =\
    \ false\n        end\n    end\n    return valid_file_name\nend\n</cell>\n<text>\n\
    6. Problem 1\nWrite a function which takes two files as input, and prints whether\
    \ the first file is valid or invalid based on the second file.", "\tlocal index\
    \ = file_name:match('^%w.*$')\n\tif index == nil then return 'No' end", "    local\
    \ num_chars = string.len(file_name)\n    local has_dot = string.find(file_name,\
    \ '.')\n    local name_without_dot = string.sub(file_name,1,has_dot-1)\n    local\
    \ last_char_in_string_is_letter = string.byte(string.sub(name_without_dot,1,1))\n\
    \    \n    if num_chars > 3 then\n        return 'No'\n    end ", "   if #file_name\
    \ > 3 then\n      return \"No\"\n   elseif file_name ~= file_name:match('^[0-9]{1,3}')\
    \ then\n      return \"No\"\n   elseif file_name ~= file_name:match('[^.]:([a-zA-Z])[^.]')\
    \ then\n      return \"No\"\n   elseif file_name ~= file_name:sub(1, 1) ~= \"\"\
    \ then\n      return \"No\"\n   else\n      return \"Yes\"\n   end\nend", "  \
    \  local file_name = file_name:lower()\n    local number_of_digits = string.len(file_name)\n\
    \    return number_of_digits > 0 and number_of_digits < 9 and '.' in file_name\
    \ and \n    (string.sub(file_name, 1, 1) == string.upper(string.sub(file_name,\
    \ '.', 1)) or \n        string.sub(file_name, 1, 1) ~= '')\nend", "    local count\
    \ = 0\n    for i = 1, #file_name do\n        local char = string.sub(file_name,i,i)\n\
    \        if char == nil then\n            return false\n        elseif char ==\
    \ '.' then\n            count = count + 1\n        elseif char:match('^[a-zA-Z]')\
    \ then\n            count = count + 1\n        else\n            return false\n\
    \        end\n    end\n    if count <= 3 then\n        return true\n    else\n\
    \        return false\n    end\nend", "\tif file_name == '' or file_name == nil\
    \ then\n\t\treturn 'No'\n\telseif string.len(file_name) > 3 then\n\t\treturn 'No'\n\
    \telseif not string.sub(file_name, 1, string.len(file_name)-1) ~= '..' then\n\t\
    \treturn 'No'\n\telseif string.sub(file_name, 1, string.len(file_name)-1) == '..'\
    \ and \n\t\tstring.sub(file_name, 1, string.len(file_name)-2) ~= '.' then\n\t\t\
    return 'No'\n\telseif string.sub(file_name, 1, string.len(file_name)-1) ~= string.sub(file_name,\
    \ 1, string.len(file_name)-2) and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'a' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'b' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'c' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 'd' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'e' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'f' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'g' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 'h' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'i' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'j' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'k' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 'l' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'm' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'n' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'o' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 'p' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'q' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'r' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 's' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 't' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= 'u' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'v' and\n\
    \t\tstring.sub(file_name, 1, string.len(file_name)-1) ~= 'w' and\n\t\tstring.sub(file_name,\
    \ 1, string.len(file_name)-1) ~= 'x' and\n\t\tstring.sub(file_name, 1, string.len(file_name)-1)\
    \ ~= '", "    local dot = file_name:find('\\.')\n    if dot == nil then \n   \
    \     -- No dot found. Return true in order to use it as a file name.\n      \
    \  return true\n    end\n    local sub_string = file_name:sub(1, dot)\n    local\
    \ first = sub_string:find('^[%a%z]')\n    if first == nil then\n        -- Substring\
    \ does not start with a latin letter. Return false.\n        return false\n  \
    \  end\n    local last = sub_string:find('[%a%z]')\n    if last == nil then\n\
    \        -- Substring does not end with a latin letter. Return false.\n      \
    \  return false\n    end\n    if #sub_string < 2 then\n        -- Substring is\
    \ not long enough. Return false.\n        return false\n    end\n    if #sub_string\
    \ > 3 then\n        -- Substring is too long. Return false.\n        return false\n\
    \    end\n    return true\nend", "   if not string.find(file_name, \"^[0-9]\"\
    ) then\n      return \"No\"\n   end\n   if #file_name == 1 then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \".\") then\n      local before_dot\
    \ = string.sub(file_name,1,string.find(file_name, \".\"))\n      if not string.sub(before_dot,1,1)\
    \ then\n         return \"No\"\n      end\n      local after_dot = string.sub(file_name,string.find(file_name,\
    \ \".\") + 1)\n      if not (before_dot == '' and after_dot in {'txt', 'exe',\
    \ 'dll'}) then\n         return \"No\"\n      end\n   end\n   return \"Yes\"\n\
    end", "    if string.sub(file_name, 1, 1) ~= '0' and string.sub(file_name, 1,\
    \ 1) ~= '9' or #file_name == '0' or #file_name ~= 1 or file_name:sub(1, 1) ~=\
    \ 'a' or file_name:sub(1, 1) ~= 'b' or file_name:sub(1, 1) ~= 'c' or file_name:sub(1,\
    \ 1) ~= 'd' or file_name:sub(1, 1) ~= 'e' or file_name:sub(1, 1) ~= 'f' or file_name:sub(1,\
    \ 1) ~= 'g' or file_name:sub(1, 1) ~= 'h' or file_name:sub(1, 1) ~= 'i' or file_name:sub(1,\
    \ 1) ~= 'j' or file_name:sub(1, 1) ~= 'k' or file_name:sub(1, 1) ~= 'l' or file_name:sub(1,\
    \ 1) ~= 'm' or file_name:sub(1, 1) ~= 'n' or file_name:sub(1, 1) ~= 'o' or file_name:sub(1,\
    \ 1) ~= 'p' or file_name:sub(1, 1) ~= 'q' or file_name:sub(1, 1) ~= 'r' or file_name:sub(1,\
    \ 1) ~= 's' or file_name:sub(1, 1) ~= 't' or file_name:sub(1, 1) ~= 'u' or file_name:sub(1,\
    \ 1) ~= 'v' or file_name:sub(1, 1) ~= 'w' or file_name:sub(1, 1) ~= 'x' or file_name:sub(1,\
    \ 1) ~= 'y' or file_name:sub(1, 1) ~= 'z' then\n        return 'No'\n    else\n\
    \        return 'Yes'\n    end\nend", "    local file_name = file_name:match('^[1-9][0-9]{0,3}$')\n\
    \    local file_name = file_name:match('\\.')\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:match('[a-z][^.]*')\n    return file_name\
    \ and file_name:sub(1, 1) == 'y' and file_name:sub(2, 2) ~= ''\nend", "  -- Check\
    \ the number of digits in file_name\n  -- The condition is that there should be\
    \ no more than 3 digits\n  -- in the file's name.\n  if file_name:match('^0*([1-9]|0*[1-9][0-9]*)$')\
    \ ~= nil then\n    return 'No'\n  end\n  -- Check that there is a single dot ('.')\
    \ in file_name\n  if file_name:match('.') ~= nil then\n    return 'No'\n  end\n\
    \  -- Check if the first character in file_name is a letter from the latin alphabet\n\
    \  -- The condition is that the substring before the first dot should start\n\
    \  -- with a letter from the latin alphabet.\n  if file_name:sub(1, 1) ~= nil\
    \ and file_name:sub(1, 1) ~= string.lower then\n    return 'No'\n  end\n  -- Check\
    \ if the substring after the dot is one of the strings:\n  -- ['txt', 'exe', 'dll']\n\
    \  -- If the substring after the dot is 'txt' or an 'exe' or a 'dll',\n  -- then\
    \ return 'Yes'\n  local file_extension = file_name:match('.') -- Get the extension\
    \ of the file_name\n  -- Check that there should be a dot ('.') in the extension\n\
    \  if file_extension:sub(1, 1) ~= nil then\n    if file_extension ~= string.lower\
    \ then\n      return 'No'\n    elseif file_extension ~= 'txt' and file_extension\
    \ ~= 'exe' and file_extension ~= 'dll' then\n      return 'No'\n    end\n  end\n\
    \  return 'Yes'\nend\n</cell>\n<code language=julia-1.4>", "\tif file_name ==\
    \ '' or file_name == nil then\n\t\treturn 'No'\n\tend", "   local valid_chars\
    \ = 'a..zA..Z0-1..'\n   local valid_chars = valid_chars .. 'exe.txt.dll'\n   local\
    \ dot = '.'\n   local sub_string = ''\n   local pos = 1\n   \n   -- Remove the\
    \ dot, then remove any trailing dots.\n   if string.find(file_name, dot) > -1\
    \ then\n      sub_string = string.sub(file_name, 1, string.find(file_name, dot)\
    \ - 1)\n   end\n   \n   -- Checks if the file name contains exactly one '.'\n\
    \   if string.find(file_name, dot) > -1 then\n      if string.find(sub_string,\
    \ '.') > -1 then\n         return 'No'\n      else\n         -- The file name\
    \ is invalid.\n         return 'Yes'\n      end\n   else\n      if string.len(sub_string)\
    \ > 1 then\n         -- The file name contains more than one '.'.\n         return\
    \ 'No'\n      else\n         -- The substring before the dot should not be empty,\
    \ and it starts with a letter\n         -- from the latin alphabet ('a' through\
    \ 'z').\n         if string.len(sub_string) > 0 then\n            if string.sub(sub_string,\
    \ 1, 1) ~= '.' then\n               return 'No'\n            else\n          \
    \     local first_letter = string.sub(sub_string, 1, 1)\n               if string.find(string.sub(sub_string,\
    \ 1), string.sub(string.sub(string.sub(string.sub(valid_chars, 1), 1, 1), 1, 1),\
    \ 1, 1)) ~= 1 then\n                  -- The substring before the dot is invalid.\n\
    \                  return 'No'\n               else\n                  -- The\
    \ substring before the dot is valid.\n               end\n            end\n  \
    \       else\n            return 'No'\n         end\n      end\n   end\nend",
  "  if file_name == nil then\n    return nil\n  end", "   -- Declare variables to\
    \ hold information\n   local valid = false\n   local sub_string\n   local first_letter\n\
    \   local valid_extension\n   -- Extract the first letter from the filename\n\
    \   first_letter = file_name:sub(1,1)\n   -- If the first letter is not one of\
    \ 'a' or 'A', then the file name is invalid.\n   if first_letter ~= 'a' and first_letter\
    \ ~= 'A' then\n      return valid\n   end\n   -- Extract and print the file extension\n\
    \   valid_extension = file_name:sub((file_name:len() - 3):len())\n   -- If the\
    \ file does not end with a known extension, then the file name is invalid.\n \
    \  if valid_extension ~= 'txt' and valid_extension ~= 'exe' and valid_extension\
    \ ~= 'dll' then\n      return valid\n   end\n   -- Extract the substring before\
    \ the dot\n   sub_string = file_name:sub(1,file_name:len() - 4)\n   -- If the\
    \ substring after the dot is not one of those known extensions, then the \n  \
    \ -- file name is invalid.\n   if {'txt', 'exe', 'dll'} ~= {sub_string} then\n\
    \      return valid\n   end\n   -- If the substring after the dot is one of those\
    \ known extensions, then test if the \n   -- extension matches the valid extension\n\
    \   if valid_extension == 'txt' then\n      valid = valid_extension == sub_string\n\
    \   elseif valid_extension == 'exe' then\n      valid = valid_extension == sub_string\n\
    \   elseif valid_extension == 'dll' then\n      valid = valid_extension == sub_string\n\
    \   end\n   return valid\nend", "   --\n   -- Check if the given string contains\
    \ only digits and dots.\n   -- A string is valid only if all these conditions\
    \ are met:\n   -- - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n   -- - The file's name contains exactly one dot '.'\n   -- -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n   -- the latin alphapet ('a'-'z' and 'A'-'Z').\n   -- - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n   --\n   -- Return\
    \ a string containing either 'Yes' or 'No'.\n   --\n   local result = false\n\
    \   local index = 1\n   local num_digits = string.len(file_name)\n   while index\
    \ <= num_digits do\n      local character = file_name:sub(index, index)\n    \
    \  if character ~= '0' and character ~= '9' and character ~= '.' and character\
    \ ~= '' then\n         result = true\n         break\n      end\n      index =\
    \ index + 1\n   end\n   return result\nend", "  -- Make sure the file's name contains\
    \ exactly one dot '.'\n  if #file_name ~= 1 then\n    return 'No'\n  end", " \
    \ -- Check that the file name does not contain more than three digits ('0'-'9').\n\
    \  if string.match(file_name, '^[0-9]{3}$') then\n    return nil\n  end\n  --\
    \ Check that the file name does not contain more than two dot ('.').\n  if string.match(file_name,\
    \ '\\.') then\n    return nil\n  end\n  -- Check that the substring before the\
    \ dot should not be empty, and it starts with a\n  -- letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n  if string.sub(file_name, 1, 1) == '' and string.match(file_name,\
    \ '^[a-zA-Z][a-zA-Z0-9]*') then\n    return nil\n  end\n  -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll'].\n  if string.find(file_name,\
    \ '\\.', 1) then\n    for ext = 'txt', 'exe', 'dll' do\n      if string.match(file_name,\
    \ ext) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  return nil\nend", "    local digits = string.gmatch(file_name, '(%d+)%d+(.)%d+([txt|exe|dll])')\n\
    \    return digits ~= nil and #digits >= 1 and #digits[1] == 1 and #digits[2]\
    \ == 0 and #digits[3] ~= 0 and digits[3] ~= 'exe' and digits[3] ~= 'dll'\nend",
  "    if file_name:sub(1, 3) ~= '0' then\n        return 'No'\n    end\n    if #file_name\
    \ == 1 then\n        return 'No'\n    end\n    if string.sub(file_name,1,1) ~=\
    \ 'a' then\n        return 'No'\n    end\n    if string.sub(file_name,1,1) ~=\
    \ 'A' then\n        return 'No'\n    end\n    if string.find(string.sub(file_name,2,#file_name),\
    \ '\\.') ~= 1 then\n        return 'No'\n    end\n    local first_letter = string.sub(file_name,1,1)\n\
    \    if first_letter ~= 'a' and first_letter ~= 'A' then\n        return 'No'\n\
    \    end\n    local second_letter = string.sub(file_name,2,#file_name)\n    if\
    \ second_letter ~= 'txt' and second_letter ~= 'exe' and second_letter ~= 'dll'\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend", "    return string.match(file_name,\
    \ '^%w{3,3}\\.\\D%w{1,2}') ~= '' or string.match(file_name, '^%w{3,3}\\.\\D%w{1,2}')~=\
    \ '' \n        and string.match(file_name, '^[a-zA-Z]%w{1,2}') ~= '' and string.match(file_name,\
    \ '^%w{3,3}\\.\\D%w{1,2}')~= '' and string.find(file_name, '^[^.]') == 0 and string.find(file_name,\
    \ '^[^.]') ~= 0 \n        and string.find(file_name, '^[^.]') > 0 and string.find(file_name,\
    \ '^[^.]') <= string.find(file_name, '.') and string.sub(file_name,1,string.find(file_name,'.'))\
    \ == string.sub(file_name,1,string.find(file_name,'.')-1) \n        and string.sub(file_name,string.find(file_name,'.')+1,string.len(file_name))\
    \ == 'txt' \n        or string.match(file_name, '^%w{3,3}\\.\\D%w{1,2}') ~= ''\
    \ and string.match(file_name, '^[a-zA-Z]%w{1,2}') ~= '' and string.match(file_name,\
    \ '^%w{3,3}\\.\\D%w{1,2}')~= '' and string.find(file_name, '^[^.]') == 0 and string.find(file_name,\
    \ '^[^.]') ~= 0 \n        and string.find(file_name, '^[^.]') > 0 and string.find(file_name,\
    \ '^[^.]') <= string.find(file_name, '.') and string.sub(file_name,1,string.find(file_name,'.'))\
    \ == string.sub(file_name,1,string.find(file_name,'.')-1) \n        and string.sub(file_name,string.find(file_name,'.')+1,string.len(file_name))\
    \ == 'exe' \n        or string.match(file_name, '^%w{3,3}\\.\\D%w{1,2}') ~= ''\
    \ and string.match(file_name, '^[a-zA-Z]%w{1,2}') ~= '' and string.match(file_name,\
    \ '^%w{3,3}\\.\\D%w{1,2}')~= '' and string.find(file_name, '^[^.]') == 0 and string.find(file_name,\
    \ '^[^.]') ~= 0 \n        and string.find(file_name, '^[^.]') > 0 and string.find(file_name,\
    \ '^[^.]') <= string.find(file_name, '.') and string.sub(file_name,1,string.find(file_name,'.'))\
    \ == string.sub(file_name,1,string.find(file_name,'.')-1) \n        and string.sub(file_name,string.find(file_name,'.')+1,string.len(file_name))\
    \ == 'dll' \nend", "   -- Check that there should not be more than three digits\
    \ in the file's name\n   if string.find(file_name, '^0%?$') then\n      return\
    \ 'No'\n   end\n   -- Check that there are not too many '.' in the file's name\n\
    \   if string.find(file_name, '%..$') then\n      return 'No'\n   end\n   -- Check\
    \ that there should be exactly one dot ('.') in the file's name\n   if string.find(file_name,\
    \ '%.') then\n      return 'No'\n   end\n   -- Check that there should be an uppercase\
    \ letter after the dot ('.') in the file's name\n   if string.find(file_name,\
    \ '%.') then\n      if string.find(file_name, '%..[A-Z]') then\n         return\
    \ 'No'\n      end\n   end\n   -- Check that there should be an lowercase letter\
    \ after the dot ('.') in the file's name\n   if string.find(file_name, '%.') then\n\
    \      if string.find(file_name, '%..[a-z]') then\n         return 'No'\n    \
    \  end\n   end\n   -- Check that there should be an alphanumeric letter after\
    \ the dot ('.') in the file's name\n   if string.find(file_name, '%.') then\n\
    \      if string.find(file_name, '%..[0-9A-Za-z]') then\n         return 'No'\n\
    \      end\n   end\n   -- Check that there should not be an empty substring after\
    \ the dot ('.') in the file's name\n   if string.find(file_name, '%.') then\n\
    \      if string.find(file_name, '%.') then\n         if string.find(file_name,\
    \ '%..') then\n            return 'No'\n         end\n      end\n   end\n   --\
    \ Check that there should be a letter from the latin alphabet after the dot ('.')\
    \ \n   if string.find(file_name, '%.') then\n      if string.find(file_name, '%.')\
    \ then\n         if string.find(file_name, '%..[aA]') then\n            return\
    \ 'No'\n         end\n      end\n   end\n   -- Check that there should be a letter\
    \ from the latin alphabet after the dot ('.') \n   if string.find(file_name, '%.')\
    \ then\n      if string.find(file_name, '%.') then\n         if string.find(file_name,\
    \ '%..[zZ]') then\n            return 'No'\n         end\n      end\n   end\n\
    \   -- Check that there should be a letter from the latin alphabet after the dot\
    \ ('.') \n   if string.find(file_name, '%.') then\n      if string.find(file_name,\
    \ '%.') then\n         if string.find(file_name, '%..[Aa]') then\n           \
    \ return 'No'\n         end\n      end\n   end\n   -- Check that there should\
    \ be a letter from the lat", "\t-- First, check if the file_name is valid\n\t\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n\t-- are met:\n\t-- - There should not be more than three digits ('0'-'9')\
    \ in the file's name.\n\t-- - The file's name contains exactly one dot '.'\n\t\
    -- - The substring before the dot should not be empty, and it starts with a letter\
    \ from \n\t-- the latin alphapet ('a'-'z' and 'A'-'Z').\n\t-- - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n\t-- Examples:\n\
    \t-- >>> file_name_check('example.txt')\n\t-- 'Yes'\n\t-- >>> file_name_check('1example.dll')\n\
    \t-- 'No'\n\tlocal file_name = tostring(file_name)\n\tlocal dot = string.find(file_name,\
    \ \".\")\n\tif dot == nil then\n\t\treturn 'No'\n\tend\n\tlocal sub_string = string.sub(file_name,\
    \ 0, dot)\n\tlocal first_char = string.sub(sub_string, 1, 1)\n\tlocal end_sub_string\
    \ = string.sub(sub_string, dot + 1)\n\tif string.len(sub_string) > 1 then\n\t\t\
    if first_char ~= 'a' and first_char ~= 'A' then\n\t\t\treturn 'No'\n\t\tend\n\t\
    end\n\tif string.find(end_sub_string, \"txt\") ~= nil or string.find(end_sub_string,\
    \ \"exe\") ~= nil or string.find(end_sub_string, \"dll\") ~= nil then\n\t\treturn\
    \ 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend", "    -- The following conditions\
    \ ensure that a file's name contains exactly one dot '.'\n    if file_name ==\
    \ nil then\n        return 'No'\n    end", "    local function is_valid(file_name_length)\n\
    \        if #file_name ~= file_name_length then\n            return 'No'\n   \
    \     end\n        local function is_valid_start_char(file_name)\n           \
    \ if #file_name < 1 then\n                return 'No'\n            end\n     \
    \       local function is_valid_char_case(file_name)\n                local last_char\
    \ = file_name:sub(1, 1)\n                local first_chars = string.lower(file_name)\n\
    \                return first_chars ~= first_chars and last_char == first_chars\n\
    \            end\n            local function is_valid_char_case_reverse(file_name)\n\
    \                local last_char = file_name:sub(1, 1)\n                local\
    \ first_chars = string.upper(file_name)\n                return first_chars ~=\
    \ first_chars and last_char == first_chars\n            end\n            return\
    \ is_valid_char_case(file_name) or is_valid_char_case_reverse(file_name)\n   \
    \     end\n        local function is_valid_dot_before_first_char(file_name)\n\
    \            if #file_name < 1 then\n                return 'No'\n           \
    \ end\n            local function is_valid_dot_first_char(file_name)\n       \
    \         if #file_name < 2 then\n                    return 'No'\n          \
    \      end\n                local first_chars = string.sub(file_name, 1, 1)\n\
    \                local last_char = file_name:sub(file_name, 2)\n             \
    \   return first_chars ~= '.' and last_char == first_chars\n            end\n\
    \            return is_valid_dot_first_char(file_name)\n        end\n        local\
    \ function is_valid_dot_before_last_char(file_name)\n            if #file_name\
    \ < 1 then\n                return 'No'\n            end\n            local function\
    \ is_valid_dot_last_char(file_name)\n                if #file_name < 2 then\n\
    \                    return 'No'\n                end\n                local first_chars\
    \ = string.sub(file_name, 1, 1)\n                local last_char = file_name:sub(file_name,\
    \ 2)\n                return first_chars ~= '.' and last_char == first_chars\n\
    \            end\n            return is_valid_dot_last_char(file_name)\n     \
    \   end\n        local function is_valid_after_dot_char(file_name)\n         \
    \   if #file_name < 1 then\n                return 'No'\n            end\n   \
    \         local first_chars = string.sub(file_name, 1, 1)\n            if first_chars\
    \ ~= '.' then\n                return 'No'\n            end\n            local\
    \ last_char = file_name:sub(file_name, 2)\n            return first_chars ~= 'exe'\
    \ and first_chars ~= 'dll' and last_char == first_chars\n        end\n       \
    \ local function is_valid_dot_after(file_name)\n            if #file_name < 1\
    \ then\n                return 'No'\n            end\n            local first_chars\
    \ = string.sub(file_name, 1, 1)\n            if first_chars ~= '.' ", "    if\
    \ not file_name then\n        return 'No'\n    end", "    -- The first condition\
    \ is always met.\n    if #file_name < 3 then\n        return 'No'\n    end", " \
    \ -- Declare variables.\n  local file_name_status = 'No'\n  local dot_count =\
    \ 0\n  local file_prefix = ''\n  local file_suffix = ''\n  \n  -- Check that the\
    \ file name is valid.\n  if #file_name <= 3 then\n    file_prefix = '' -- Set\
    \ file_prefix to an empty string.\n  elseif file_name:sub(1, 2) == '..' then\n\
    \    file_prefix = '..' -- Set file_prefix to three dots.\n  else\n    file_prefix\
    \ = file_name:sub(1, 3) -- Set the file_prefix to the substring before the first\
    \ dot.\n  end", "   -- TODO: Implement your logic here\n   -- Don't forget to\
    \ return a value at the end of the function!\nend\n</cell>\n<text>\nRun the cell\
    \ below to check if your file_name function works properly", "   if file_name\
    \ == nil then\n      return nil\n   end", "\t-- Check to see if there should not\
    \ be more than three digits in the file's name\n\t-- The number will be stored\
    \ in 'name' and the length of the number will be stored in\n\t-- 'length'\n\t\
    local name = '';\n\tlocal length = 0;\n\tfor i=1,#file_name do\n\t\t-- Check to\
    \ see if each character is a number\n\t\tif file_name:sub(i,i) == '-' then\n\t\
    \t\t-- If it is a hyphen, find the length of the number so that they match\n\t\
    \t\t-- If the number was a negative, store a negative sign in the variable\n\t\
    \t\t-- length\n\t\t\tlocal num = file_name:sub(i,i+1);\n\t\t\tif num == '-' then\n\
    \t\t\t\tlength = length - 1;\n\t\t\telseif num == '.' then\n\t\t\t\t-- If the\
    \ number is a dot, find the length of the string and store it\n\t\t\t\t-- in the\
    \ length variable\n\t\t\t\tlocal num_length = #file_name;\n\t\t\t\tlength = length\
    \ - 1;\n\t\t\t\tfor j=1,num_length do\n\t\t\t\t\t-- Check to see if the character\
    \ before the dot is a letter\n\t\t\t\t\tif file_name:sub(i,i+j) ~= '-' then\n\t\
    \t\t\t\t\t-- If it is not a letter, store that character in the 'name' variable\n\
    \t\t\t\t\t\t-- at the current index and move to the next\n\t\t\t\t\t\tname = name\
    \ + file_name:sub(i,i+1);\n\t\t\t\t\t\ti = i + j;\n\t\t\t\t\t\tbreak -- Break\
    \ out from the 'for' loop\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\t\n\t-- Check to see if the length of the string was zero\n\tif length ==\
    \ 0 then\n\t\treturn 'No';\n\telse\n\t\treturn 'Yes';\n\tend\nend", "\tlocal file_name_len\
    \ = #file_name\n\t\n\t-- Check the number of characters in the file name \n\t\
    if file_name_len < 3 then\n\t\treturn 'No'\n\telseif file_name_len > 3 then\n\t\
    \treturn 'No'\n\telseif string.find(file_name, '.') then\n\t\treturn 'No'\n\t\
    elseif string.find(file_name, '_') then\n\t\treturn 'No'\n\telse\n\t\treturn 'Yes'\n\
    \tend\nend", "  return string.match('%^([0-9]+\\.)+[tx|exe|dll]%', file_name)\n\
    end", "\tlocal file_without_dot = file_name:sub(1,-3)\n\tlocal file_name = file_name:sub(1,-1)\n\
    \tlocal is_ok = false\n\tlocal is_ok = true\n\tlocal file_types = {'txt', 'exe',\
    \ 'dll'}", "   --print('file_name_check('..file_name..')')\n   \n   local filename\
    \  = string.lower(file_name)  -- convert to lower case\n   local split_index =\
    \ string.find(file_name, '.', 2)\n   if split_index ~= nil then\n      if split_index\
    \ == 0 then\n         return 'No'\n      end\n   end\n   local split_index = string.find(filename,\
    \ '[%w]', 2)\n   if split_index ~= nil then\n      if split_index == 0 then\n\
    \         return 'No'\n      end\n   end\n   split_index = string.find(filename,\
    \ '%[%w]', 2)\n   if split_index ~= nil then\n      if split_index == 0 then\n\
    \         return 'No'\n      end\n   end\n   split_index = string.find(filename,\
    \ '[%w]%[%w]', 2)\n   if split_index ~= nil then\n      if split_index == 0 then\n\
    \         return 'No'\n      end\n   end\n   if #filename > 3 then\n      return\
    \ 'No'\n   end\n   if filename:sub(1, 1) == '.' then\n      return 'No'\n   end\n\
    \   if filename:sub(1, 1) ~= string.char(tonumber(string.sub(filename, 1, 1)))\
    \ then\n      return 'No'\n   end\n   return 'Yes'\nend", "  -- Check if there\
    \ is more than one digit in the file_name\n  if #file_name > 1 then\n    error('File\
    \ name contains more than one digit:', file_name)\n  end\n  -- Check if there\
    \ is only one '.' in the file_name\n  if #file_name == 1 then\n    error('File\
    \ name contains more than one \".\":', file_name)\n  end\n  -- Check if there\
    \ is a '.' in the beginning of the file_name\n  if not string.sub(file_name, 1,\
    \ 1) then\n    error('File name does not start with a \".\":', file_name)\n  end\n\
    \  -- Check if the first character of the file_name is letter from latin alphabet\n\
    \  if not string.sub(file_name,1,1) then\n    error('File name does not start\
    \ with a letter:', file_name)\n  end\n  -- Check if every character after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n  local exts = { 'txt', 'exe', 'dll'\
    \ }\n  -- Check if the substring after the dot is not empty\n  if not string.sub(file_name,2)\
    \ then\n    error('Substring after the dot should not be empty:', file_name)\n\
    \  end\n  -- Check if there is only one character in the substring after the dot\n\
    \  if not #string.sub(file_name,2,1) then\n    error('Substring after the dot\
    \ contains more than one character:', file_name)\n  end\n  -- Check if the substring\
    \ after the dot is one of these\n  for _, ext in ipairs(exts) do\n    if string.find(string.sub(file_name,2,1),\
    \ ext) then\n      return true\n    end\n  end\n  return false\nend", "\t-- 1.\
    \ Check that there are only three digits in the file's name.\n\t-- 2. Check that\
    \ there is only one dot '.'.\n\t-- 3. Check the substring before the first dot\
    \ is not empty.\n\t-- 4. Check the substring after the dot is one of ['txt', 'exe',\
    \ 'dll'].\n\tif string.find(file_name, '%[0-9]') then\n\t\treturn 'No'\n\telseif\
    \ string.find(file_name, '%.') then\n\t\treturn 'No'\n\telseif string.find(file_name,\
    \ '%.%.') then\n\t\treturn 'No'\n\telseif string.find(file_name, '%[a-z]') then\n\
    \t\treturn 'No'\n\telseif string.find(file_name, '%[A-Z]') then\n\t\treturn 'No'\n\
    \telse\n\t\treturn 'Yes'\n\tend\nend", "  local valid = false\n  local name =\
    \ ''\n  local dots = 0\n  local first_letter = ''\n  \n  for i = 1, #file_name\
    \ do\n    local char = file_name:sub(i, i)\n    if char == '.' then\n      dots\
    \ = dots + 1\n    elseif char == '0' then\n      if not dots then\n        break\n\
    \      end\n    elseif char == '9' then\n      if not dots then\n        break\n\
    \      end\n    elseif char == 'a' then\n      if not dots then\n        break\n\
    \      end\n    elseif char == 'z' then\n      if not dots then\n        break\n\
    \      end\n    elseif char == 'A' then\n      if not dots then\n        break\n\
    \      end\n    elseif char == 'Z' then\n      if not dots then\n        break\n\
    \      end\n    else\n      if ((char < 'a' or char > 'z') or (char < 'A' or char\
    \ > 'Z')) then\n        break\n      end\n    end\n    \n    if first_letter ==\
    \ '' then\n      first_letter = char\n    end\n    \n    name = name .. char\n\
    \  end\n  \n  if not dots then\n    return valid\n  end\n  \n  if name ~= '' then\n\
    \    return first_letter .. '.'\n  end\n  \n  return valid\nend", "   if file_name\
    \ ~= nil then\n      local dotPos = string.find(file_name, \".\")\n      local\
    \ firstChar = string.sub(file_name,1,1)\n      local lastChar = string.sub(file_name,-1)\n\
    \      local firstCharVal = tonumber(firstChar)\n      local lastCharVal = tonumber(lastChar)\n\
    \      if ( dotPos == nil) or ( dotPos <= 0 ) or ( firstCharVal > 0 ) \n     \
    \ or ( lastCharVal < 65 ) or ( lastCharVal > 90 ) or ( lastChar ~= 'txt' ) \n\
    \      or ( lastChar ~= 'exe' ) or ( lastChar ~= 'dll' ) then\n         return\
    \ 'No'\n      else\n         return 'Yes'\n      end\n   else\n      return 'No\
    \ file'\n   end\nend", "\tlocal name_pattern = \"^[^%w\\.]+[.]{1}(%w+)$\"\n\t\
    local ok, error = pcall(function()\n\t\tio.open(file_name, mode=\"r\")\n\tend)\n\
    \tif not ok then\n\t\treturn error\n\tend\n\tlocal name, ext = (string.match(file_name,\
    \ name_pattern)) \n\tlocal ok, error = pcall(function()\n\t\tio.open(file_name,\
    \ mode=\"r\")\n\tend)\n\tif not ok then\n\t\treturn error\n\tend\n\tlocal file_ext\
    \ = string.match(name, ext)\n\tname = string.gsub(name, '\\.', '')\n\tname = string.gsub(name,\
    \ '%w+', '')\n\tname = string.gsub(name, '_', '')\n\tlocal ok, error = pcall(function()\n\
    \t\tio.open(file_name, mode=\"r\")\n\tend)\n\tif not ok then\n\t\treturn error\n\
    \tend\n\tlocal result = string.find(name, file_ext, 1)\n\tif result == 0 then\n\
    \t\treturn 'No'\n\telse\n\t\treturn 'Yes'\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
