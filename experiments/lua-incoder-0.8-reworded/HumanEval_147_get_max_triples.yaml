name: HumanEval_147_get_max_triples
language: lua
prompt: "-- You are given a positive integer n. You have to create an integer table\
  \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>> get_max_triples(5)\n\
  -- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The only valid triple is (1,\
  \ 7, 13).\nlocal function get_max_triples(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
  \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n  \
  \  lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local a = {}\n    local b = 1\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if j <= i then\n                table.insert(a, b *\
    \ (j - 1) + (i - 1))\n            end\n        end\n        b = b + 1\n    end\n\
    \    \n    local s = 0\n    for i = 1, n do\n        local x = a[i]\n        for\
    \ j = 1, n do\n            local y = a[j]\n            local z = a[j+i]\n    \
    \        if x ~= y and x ~= z and y ~= z then\n                s = s + 1\n   \
    \         end\n        end\n    end\n    \n    if s == 0 then\n        return\
    \ 0\n    else\n        return s - 1\n    end\nend", "  local a = {}\n  for i =\
    \ 1, n do\n    a[i] = i * i - i + 1\n  end\n  local k = 1\n  local result = 0\n\
    \  for i = 2, n do\n    if a[i] > 0 then\n      result = result + 1\n    end\n\
    \    for j = i, n do\n      if a[j] > 0 then\n        local k2 = k * k\n     \
    \   local div = a[k2] + a[j] - a[i] - 1\n        if div > 0 then\n          result\
    \ = result + 1\n        end\n      end\n      k = k + 1\n    end\n  end\n  return\
    \ result\nend", "  local a = {}\n  -- Initialize all values of a to 1.\n  for\
    \ i=1,n do a[i] = 1 end\n  -- For each i, a[i] = a[i] - a[j] - a[k] where j \u2264\
    \ k \u2264 i.\n  for i = 2, n do\n    local j = i - 1\n    local k = i - 2\n \
    \   if a[i] < a[j] and a[i] < a[k] then\n      -- Increment a[j] by a[i] and a[k]\
    \ by a[j].\n      a[j] = a[i] + a[j]\n      a[k] = a[i] + a[k]\n    end\n  end\n\
    \  -- Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n\
    \  -- and a[i] + a[j] + a[k] is a multiple of 3.\n  return #a % 3 == 0\nend\n\
    </cell>\n<code language=xeus-cling-cpp14>\nassert(get_max_triples(5) == 1)\nassert(get_max_triples(8)\
    \ == 2)\n</cell>\n<code language=xeus-cling-cpp14>", "    local a = { [1] = 0}\n\
    \    for i = 1, n do\n        table.insert(a, i * i - i + 1)\n    end\n    return\
    \ #a == n and a[n] % 3 == 0\nend", "\tlocal a = {}\n\tfor i=1,n do\n\t\ta[i] =\
    \ i * i - i + 1\n\tend\n\t\n\tlocal count = 0\n\tfor i=1,n-1 do\n\t\tfor j=1,n-i-1\
    \ do\n\t\t\tif a[i] == a[j] + a[j+1] then\n\t\t\t\tcount = count + 1\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\n</cell>\n<text>\nQuestion\
    \ 9\nWrite a function which takes an integer as input and returns True if and\
    \ only if two integers a and b are equal, modulo some given integer k, and false\
    \ otherwise.", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i -\
    \ i + 1\n    end\n    local c = 0\n    local i = 1\n    for j = 1, n do\n    \
    \    for k = 1, n do\n            if i < j and j < k then\n                local\
    \ v = a[i] + a[j] + a[k]\n                if v % 3 == 0 then\n               \
    \     c = c + 1\n                end\n            end\n        end\n        i\
    \ = i + 1\n    end\n    return c\nend", "    local a = {}\n    for i = 1, n do\n\
    \        a[i] = i * i - i + 1\n    end\n    for i = 1, n do\n        for j = 1,\
    \ n do\n            for k = 1, n do\n                if a[i] <= a[j] and a[j]\
    \ <= a[k] and\n                   a[i] + a[j] + a[k] >= 3 then\n             \
    \       return 1\n                end\n            end\n        end\n    end\n\
    \    return 0\nend", "    local a = {}\n    for i = 1, n do\n        table.insert(a,\
    \ i * i - i + 1)\n    end\n    local count = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            for k = 1, n do\n                if i == j and i ==\
    \ k then\n                    continue\n                end\n                if\
    \ a[i] < a[j] and a[i] < a[k] then\n                    count = count + 1\n  \
    \                  break\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "  assert(n > 0, \"n is negative\")\n  local\
    \ a = {}\n  local count = 0\n  for i = 1, n do\n    table.insert(a, i * i - i\
    \ + 1)\n  end\n  local i = 0\n  local j = n - 1\n  while i <= j do\n    if a[i]\
    \ > a[j] then\n      count = count + 1\n      local k = i - 1\n      while a[k]\
    \ <= a[j] do\n        k = k - 1\n      end\n      if a[k] % 3 ~= 0 then\n    \
    \    count = count + 1\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return count\nend", "   local a = {}\n   for _ = 1,n do\n      a[#a+1] = 1\n\
    \   end\n   local sum = 0\n   for i = 1,n do\n      for j = 1,n do\n         for\
    \ k = 1,n do\n            sum = sum + a[i]+a[j]+a[k]\n         end\n      end\n\
    \   end\n   return sum\nend\nassert(get_max_triples(5) == 9, \"Solution must be\
    \ 9\")", "  local a = {}\n  local result = 0\n  for i = 1, n do\n    a[i] = i\
    \ * i - i + 1\n  end\n  for i, j, k in pairs(a) do\n    if i < j < k then\n  \
    \    result = result + 1\n      if i + j + k == i * i * i then\n        result\
    \ = result + 1\n      end\n    end\n  end\n  return result\nend", "    local a\
    \ = { 1 }\n    local result = 0\n    for i = 2, n do\n        for j = 1, i - 1\
    \ do\n            -- Add the next two to each element of a.\n            for k\
    \ = 1, j - 1 do\n                a[k] = a[k] + a[k]\n            end\n       \
    \     -- Add the next one to the last element of a.\n            a[j] = a[j] +\
    \ a[i]\n            -- Now check if a[j], a[k], and a[j] is a multiple of 3.\n\
    \            if a[j] % 3 == 0 && a[k] % 3 == 0 && a[j] % 3 == 0 then\n       \
    \         result = result + 1\n            end\n        end\n    end\n    return\
    \ result\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i -\
    \ i + 1\n    end\n    local count = 0\n    local aa, bb, cc = 1, a[1] + 1, a[1]\n\
    \    for j = 2, #a do\n        if a[j] > a[j - 1] + bb then\n            count\
    \ = count + 1\n            aa, bb, cc = a[j], a[j - 1] + 1, a[j - 1]\n       \
    \ end\n    end\n    return count\nend", "  if n <= 0 then return 0 end\n  local\
    \ a = map(xlua.xlua_absint, {1,3,7,13,21})\n  local sum = 0\n  local count = 0\n\
    \  for i = 2, n do\n    count = count + 1\n    for j = 2, i do\n      for k =\
    \ 3, i do\n        if a[j] + a[k] == i * i - i + 1 then\n          sum = sum +\
    \ 1\n        end\n      end\n    end\n  end\n  return sum\nend", "    local table\
    \ = {}\n    for i=1,n do table[i] = i*i - i + 1 end\n    table.sort(function(x,y)\
    \ return x <  y end)\n    return #table\nend", "    local a = { }\n    for i =\
    \ 1, n do\n        table.insert(a, i * i - i + 1)\n    end\n    local count =\
    \ 0\n    for j = 2, n do\n        for k = 2, n do\n            if a[k] + a[j]\
    \ > a[k] + a[j + 1] + a[k + 1] then\n                count = count + 1\n     \
    \       end\n        end\n    end\n    return count\nend", "    local ans = 0\n\
    \    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n       \
    \ ans = max(ans, a[i])\n    end\n    return ans\nend", "   if n < 0 then\n   \
    \   return 0\n   end", "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i -\
    \ i + 1\n\tend\n\tlocal t = 1\n\tlocal r = 1\n\tfor i = 1, n do\n\t\tif i < r\
    \ then return 0 end\n\t\tt = t + a[i] + a[i + 1]\n\t\tr = r + a[i]\n\tend\n\t\
    return t\nend", "   local a = {}\n   local i = 1\n   while i <= n do\n      local\
    \ b = i * i - i + 1\n      local j = i * i\n      local k = i * i + 1\n      if\
    \ j + k >= b and b % 3 == 0 then\n         a[i] = b\n         i = i + 1\n    \
    \  else\n         i = i + 1\n      end\n   end\n   return i\nend\nprint(get_max_triples(5))\n\
    </cell>\n<text>\nProblem 17", "    local table = {}\n    table.insert('#', 1)\
    \ -- table for a[0] = 1 to avoid index out of bound\n    for i = 1, n do\n   \
    \     table.insert(table, i * i - i + 1)\n    end\n    table.sort(function(a,\
    \ b) return a < b end)\n    return table.len()\nend", "    if n == 0 then\n  \
    \      return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local\
    \ t = {n}\n    local count = 0\n    for i = 2, n do\n        t[i] = i * i - i\
    \ + 1\n        count = count + find_triples(t, i, n - 1)\n    end\n    return\
    \ count\nend", "   local table = {}\n   for i=1, n do\n      table[i] = i * i\
    \ - i + 1\n   end\n   local max_triple = math.max(table[1], table[2], table[3])\n\
    \   return max_triple\nend\nprint(get_max_triples(5) )\n</cell>\n<text>\n3.4 get_min_triples(n)",
  "  local a = {}\n  for i = 1,n do\n    table.insert(a, i * i - i + 1)\n  end\n \
    \ local count = 0\n  for i,j,k in pairs(a) do\n    if i+j+k % 3 == 0 then count\
    \ = count+1 end\n  end\n  return count\nend", "    local tbl = {}\n    for i=1,\
    \ n do\n        tbl[i] = i * i - i + 1\n    end", "\tlocal a = {}\n\t\n\tlocal\
    \ t = math.factorial(n) * math.factorial(n - 1) * math.factorial(n - 2)\n\tlocal\
    \ f = 0\n\t\n\tlocal i = 1\n\t\n\tlocal j = 1\n\t\n\tlocal k = 1\n\t\n\twhile\
    \ i <= t do\n\t\tf = f + 1\n\t\ti = math.floor((i - 1) / 3)\n\t\tj = math.floor((j\
    \ - 1) / 3)\n\t\tk = math.floor((k - 1) / 3)\n\t\t\n\t\tif a[i] < a[j] and a[i]\
    \ < a[k] then\n\t\t\ta[i] = a[i] + 3\n\t\t\ta[j] += 3\n\t\t\ta[k] += 3\n\t\tend\n\
    \tend\n\t\n\treturn f\nend", "\tlocal result = 0\n\tlocal a = {}\n\tfor i = 1,n\
    \ do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\t\
    local j = i + 1\n\t\twhile j < n and a[i] + a[j] + a[j] == 3 do\n\t\t\tj = j +\
    \ 1\n\t\tend\n\t\tif j > i then\n\t\t\tresult = result + 1\n\t\tend\n\t\ti = j\n\
    \tend\n\treturn result\nend", "\tlocal function add(a)\n\t\tlocal m = n\n\t\t\
    local v = 0\n\t\tlocal t = 0\n\t\twhile m ~= 0 do\n\t\t\tm = m / 3\n\t\t\tt =\
    \ t + 1\n\t\t\tv = v + 1\n\t\tend\n\t\treturn v, t, a\n\tend\n\tlocal a, b, c\
    \ = add(n * n - n)\n\treturn add(a[1] + a[2] + a[3])\nend", "    local a = {}\n\
    \    for i=1,n do\n        table.insert(a, i*i-i+1)\n    end\n    local i = 1\n\
    \    local j = 1\n    local k = 1\n    local cnt = 0\n    while i < n do\n   \
    \     while j < n and a[i] < a[j] do\n            j = j + 1\n        end\n   \
    \     if j == n then\n            cnt = cnt + 1\n            while k < n and a[i]\
    \ < a[k] do\n                k = k + 1\n            end\n            if k == n\
    \ then\n                cnt = cnt + 1\n            else\n                cnt =\
    \ cnt + 1\n                j = k + 1\n            end\n        end\n        i\
    \ = i + 1\n    end\n    return cnt\nend", "  -- Initialize your solution here\n\
    \  local a = {}\n  -- Write your code here\n  return #a\nend", "    local a =\
    \ fillTable(0, n)\n    local triples = 0\n    local t = 1\n    while t <= n do\n\
    \        triples = triples+1\n        for i = 1 , n-1 do\n            local j\
    \ = i\n            while j > 1 do\n                j = (j-1)/2\n             \
    \   if a[i] == a[j] then break end\n            end\n            if a[i] == a[i+1]\
    \ then break end\n            a[i] = i * i - i + 1\n        end\n        t = t\
    \ + 1\n    end\n    return triples\nend", "    local a = {}\n    for i = 1, n\
    \ do a[i] = i * i - i + 1 end\n    local k = 0\n    for i = 2, n do\n        for\
    \ j = i, n do\n            if a[j] - a[i] % 3 == 0 then\n                k = k\
    \ + 1\n            end\n        end\n    end\n    return k\nend", "\tlocal a =\
    \ [0]\n\tfor i = 1, n do\n\t\ttable.insert(a, i * i - i + 1)\n\tend\n\tlocal ret\
    \ = 0\n\tfor i = 1, n do\n\t\tif a[i] > 0 then\n\t\t\tlocal count = 1\n\t\t\t\
    for j = i + 1, n do\n\t\t\t\tif a[j] == 0 then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tret = ret + count * 3\n\t\tend\n\t\
    end\n\treturn ret\nend", "    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    local i = 1\n    while i <= n do\n        if a[i]\
    \ % 3 == 0 then\n            i = i + 1\n        else\n            i = i + 2\n\
    \        end\n    end\n    return i - 1\nend\n</cell>\n<text>\nExercise 9: Solving\
    \ optimization problems", "  local a = {}\n  local i, j, k = 0, 0, 0\n  while\
    \ i < n do\n    local x = i * i\n    i = i + 1\n    j = j + 1\n    k = k + 1\n\
    \    a[k] = x\n  end\n  i = j + 1\n  j = k + 1\n  k = n + 1\n  while i < j do\n\
    \    local x = a[i] + a[j]\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    a[k]\
    \ = x\n  end\n  return k\nend", "\tlocal a = {}\n\t-- Base case is when array\
    \ is already full\n\tif n <= #a then\n\t\treturn 0\n\tend", "    local a = {}\n\
    \    for i = 1, n do a[i] = i * i - i + 1 end\n    local cnt = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            for k = 1, n do\n            \
    \    if a[i] < a[j] < a[k] then\n                    cnt = cnt + 1\n         \
    \       end\n            end\n        end\n    end\n    return cnt\nend", "  local\
    \ a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  for i=1, n do\n\
    \    for j = i+1, n do\n      if i * i + j * j == a[i] and a[i] < a[j] then\n\
    \        break\n      end\n    end\n    return i * i + j * j - a[i] % 3 or 1\n\
    \  end\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i\
    \ + 1\n    end\n    local i = 1\n    local k = 1\n    while k < n do\n       \
    \ if a[i] + a[j] + a[k] == 0 then\n            i = i + 1\n            k = k +\
    \ 1\n        else\n            if a[i] > a[j] then\n                k = k + 1\n\
    \            else\n                i = i + 1\n            end\n        end\n \
    \   end\n    return i\nend", "    local a = {}\n    local count = 0\n    for i\
    \ = 1, n do\n        local k = 1\n        while k < i do\n            k = k +\
    \ 1\n        end\n        if i > k then\n            table.insert(a, i)\n    \
    \        table.insert(a, k)\n            table.insert(a, i + k)\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "   -- Write your\
    \ code here.\n   if n < 0 then\n      error(\"The given input value is invalid\"\
    )\n   elseif n < 1 then\n      return 0\n   elseif n <= 3 then\n      return 1\n\
    \   else\n      local a = {}\n      local count = 0\n      repeat\n         table.insert(a,\
    \ n*n - n*(n+1) + 1)\n         count = count + 1\n      until #a > n\n      local\
    \ total = 0\n      for i = 1, n do\n         local j = n-1\n         while j >\
    \ 0 do\n            local k = n-1\n            while k > 0 do\n              \
    \ local m\n               if j > k then\n                  m = j-k+1\n       \
    \        else\n                  m = j+k-1\n               end\n             \
    \  if a[i] <= m then\n                  break\n               end\n          \
    \     k = k - 1\n            end\n            if k > 0 then\n               a[k]\
    \ = a[k-1] + 1\n               if a[k] > m then\n                  a[k] = m\n\
    \               end\n            end\n            j = j - 1\n         end\n  \
    \       if a[i] % 3 == 0 then\n            count = count + 1\n         end\n \
    \     end\n      return count\n   end\nend\nprint(get_max_triples(5))\nprint(get_max_triples(6))\n\
    print(get_max_triples(7))\nprint(get_max_triples(8))\nprint(get_max_triples(9))\n\
    print(get_max_triples(10))\nprint(get_max_triples(11))\nprint(get_max_triples(123))\n\
    print(get_max_triples(122))\nprint(get_max_triples(32))\nprint(get_max_triples(33))\n\
    print(get_max_triples(34))\nprint(get_max_triples(35))\nprint(get_max_triples(36))\n\
    print(get_max_triples(37))\nprint(get_max_triples(36))\nprint(get_max_triples(39))\n\
    print(get_max_triples(40))\nprint(get_max_triples(41))\nprint(get_max_triples(42))\n\
    print(get_max_triples(43))\nprint(get_max_triples(44))\nprint(get_max_triples(45))\n\
    print(get_max_triples(46))\nprint(get_max_triples(47))\nprint(get_max_triples(48))\n\
    print(get_max_triples(49))\nprint(get_max_triples(50))\nprint(get_max_triples(51))\n\
    print(get_max_triples(52))\nprint(get_max_triples(53))\nprint(get_max_triples(54))\n\
    print(get_max_triples(55))\nprint(get_max_triples(56))\nprint(get_max_triples(57))",
  "    local a = {}\n    for i = 1,n do\n        a[i] = i * i - i + 1\n    end\n \
    \   local count = 0\n    for i = 1,n do\n        for j = 1,n do\n            for\
    \ k = 1,n do\n                if a[i] < a[j] and a[i] < a[k] then\n          \
    \          count = count + 1\n                    a[i] = a[i] + a[j] + a[k]\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local a = {}\n    local i = 0\n    while i < n do\n        table.insert(a,\
    \ i * i - i + 1)\n        i = i + 1\n    end\n    return #a\nend", "  local a\
    \ = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  for i=1, n do\n\
    \    if a[i] % 3 == 0 then\n      return i\n    end\n  end\n  return nil\nend",
  "  local a = {}\n  for i = 1, n do\n    table.insert(a, i * i - i + 1)\n  end\n\
    \  for i = 1, n do\n    for j = i + 1, n do\n      if a[i] < a[j] then\n     \
    \   local t = a[i]\n        a[i] = a[j]\n        a[j] = t\n      end\n    end\n\
    \  end\n  return #a\nend", "   -- write your code here\n   local a = {}\n   for\
    \ i=1,n do\n      a[i] = i*i - i + 1\n   end\n   local count = 0\n   for i=1,n\
    \ do\n      for j=i,n do\n         for k=j,n do\n            if a[i] + a[j] +\
    \ a[k] = i*i - i + 1 then\n               count = count + 1\n            end\n\
    \         end\n      end\n   end\n   return count\nend", "    local tableA = {}\n\
    \    for i = 1, n do\n        tableA[i] = i * i - i + 1\n    end\n    local count\
    \ = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j\
    \ + 1, n do\n                if tableA[i] + tableA[j] + tableA[k] == 3*i then\n\
    \                    count = count + 1\n                    break\n          \
    \      end\n            end\n        end\n    end\n    return count\nend", " \
    \   local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    \n    local n = 0\n    for i=1, n do\n        local j = i\n        local\
    \ k = i\n        for j=1, n do\n            k = k + 1\n            if k >= n then\n\
    \                break\n            end\n            if a[i] + a[j] + a[k] ==\
    \ 0 then\n                if i < j then\n                    j = j - 1\n     \
    \           end\n                if i < k then\n                    k = k - 1\n\
    \                end\n                if i > k then\n                    break\n\
    \                end\n            end\n        end\n        \n        n = n +\
    \ 1\n    end\n    \n    return n\nend", "  local a = {}\n  local n = 1\n  while\
    \ n <= n do\n    local i = 0\n    local j = 1\n    local k = n\n    while i <=\
    \ k do\n      if a[i] < a[j] then\n        table.insert(a, i)\n        local m\
    \ = i - 1\n        while m >= 0 do\n          a[m] = a[m] - a[i] + a[j]\n    \
    \      m = m - 1\n        end\n        j = j + 1\n      elseif a[j] < a[k] then\n\
    \        table.insert(a, j)\n        local m = j - 1\n        while m >= 0 do\n\
    \          a[m] = a[m] - a[j] + a[i]\n          m = m - 1\n        end\n     \
    \   i = i + 1\n      else\n        table.insert(a, k)\n        local m = k - 1\n\
    \        while m >= 0 do\n          a[m] = a[m] - a[k] + a[j]\n          m = m\
    \ - 1\n        end\n        k = k + 1\n      end\n    end\n    table.sort(a)\n\
    \    n = n + 1\n  end\n  local s = 0\n  for i = 1, #a do\n    local p = a[i]\n\
    \    local q = a[i + 1]\n    local r = a[i] + a[i + 1]\n    if r + p + q == 0\
    \ then\n      s = s + 1\n    end\n  end\n  return s\nend", "  local a = {}\n \
    \ for i = 1, n do\n    table.insert(a, i * i - i + 1)\n  end\n  \n  local max_triple_count\
    \ = 3\n  for i = 1, n do\n    local triple_count = 0\n    for j = i + 1, n do\n\
    \      for k = j + 1, n do\n        local result = a[i] + a[j] + a[k]\n      \
    \  if result % 3 == 0 then\n          triple_count = triple_count + 1\n      \
    \  end\n      end\n    end\n    if triple_count > max_triple_count then\n    \
    \  max_triple_count = triple_count\n    end\n  end\n  return max_triple_count\n\
    end", "\tlocal function helper(i, j, k)\n\t\tif i == j then\n\t\t\treturn 1\n\t\
    \telseif j == k then\n\t\t\treturn 0\n\t\telseif i == k then\n\t\t\treturn 1\n\
    \t\telse\n\t\t\treturn helper(i+1, j, k) + helper(i, j+1, k) + helper(i+1, j+1,\
    \ k)\n\t\tend\n\tend", "  local a = {}\n  local cnt = 0\n  for i = 1, n do\n \
    \   for j = i, n do\n      for k = j, n do\n        cnt = ( cnt + (a[i] + a[j]\
    \ + a[k]) % 3 )\n        -- We don't need to test the j'th element because it\
    \ is already tested in the 'for' loop.\n      end\n    end\n  end\n  return cnt\n\
    end", "    local a = {}\n    for i = 1, n do \n        a[i] = i * i - i + 1\n\
    \    end\n    local cnt = 0\n    for i = 1, n - 1 do\n        if a[i] < a[i +\
    \ 1] then \n            cnt=cnt+1\n        end\n        if a[i] < a[i + 2] then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  local\
    \ a = {}\n  local triple = 0\n  for i = 1, n do\n    for j = i, n do\n      for\
    \ k = j + 1, n do\n        if a[i] + a[j] + a[k] == 0 then\n          a[#a + 1]\
    \ = a[i] + a[j] + a[k]\n          triple = triple + 1\n        end\n      end\n\
    \    end\n  end\n  return triple\nend", "  local a = {}\n  \n  local i, j, k =\
    \ 1\n  for i = 1, n do\n    a[i] = i * i - i + 1\n    j = i - 1\n    k = i + 1\n\
    \    while j ~= k do\n      if a[j] + a[k] == 0 then\n        break\n      else\n\
    \        a[j] = a[j] + a[k]\n      end\n      j = j - 1\n      k = k + 1\n   \
    \ end\n  end\n  \n  local count = 0\n  i = n - 1\n  while i >= 1 do\n    count\
    \ = count + 1\n    i = i - 1\n  end\n  \n  return count\nend", "    local count\
    \ = 0\n    local a = {}\n    for i = 1, n do\n        table.insert(a, i * i -\
    \ i + 1)\n    end\n    for i = 1, n do\n        for j = 1, n do\n            for\
    \ k = 1, n do\n                if i >= j and j >= k and a[i + k] == a[j + k] then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "  local a = {}\n  for i = 1, n\
    \ do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for i = 1, n do\n\
    \    for j = 1, n do\n      count = count + count_triples(a, i, j)\n    end\n\
    \  end\n  return count\nend", "   local a = {}\n   for i = 1, n do\n      a[i]\
    \ = i * i - i + 1\n   end\n   local count = 0\n   for i, j, k in pairs(a) do\n\
    \      count = count + 1 \n      if i % j == 0 and i % k == 0 then\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend\n</cell>\n<text>\nDay 12:\
    \ Knights Tours\nLink : YouTube", "  local a = {}\n  for i = 1, n do\n    a[i]\
    \ = i * i - i + 1\n  end\n  local count = 0\n  local i = 0\n  local j = 1\n  local\
    \ k = 2\n  while i < n and j < n and k > 0 do\n    if a[i] >= 0 and a[j] >= 0\
    \ and a[k] >= 0 then\n      if a[i] + a[j] + a[k] >= 3 then\n        count = count\
    \ + 1\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n\
    \  return count\nend", "  local a = {}\n  \n  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  while i <= n do \n    a[i] = i * i - i + 1\n    i = i + 1\n    j =\
    \ j + 1\n    k = k + 1\n  end\n  \n  local i = 0\n  local j = 1\n  local k = 1\n\
    \  local count = 0\n  while i <= n do \n    if a[i] >= 0 and a[j] >= 0 and a[k]\
    \ >= 0 then\n      if a[i] > a[j] and a[i] > a[k] then\n        count = count\
    \ + 1\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n\
    \  return count\nend", "\tlocal a = {}\n\tlocal j = 0\n\tlocal k = n - 1\n\twhile\
    \ j<=k do\n\t\ta[j] = i*i - i+1\n\t\tj = j+1\n\tend\n\tlocal m = 1\n\tlocal i\
    \ = 1\n\tlocal k = n\n\twhile i <= n do\n\t\tif a[i] + a[j] + a[k] == 3*i then\n\
    \t\t\tm = m+1\n\t\tend\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\treturn m\nend",
  "  if n < 3 then return 0 end\n  local a = {}\n  for i = 1, n do\n    table.insert(a,\
    \ i * i - i + 1)\n  end\n  \n  local i = 0\n  local j = 1\n  local k = 2\n  local\
    \ triple = 0\n  \n  while i < n do\n    if triplet > 0 then\n      local trip_1\
    \ = a[i] + a[j] + a[k]\n      if trip_1 % 3 == 0 then\n        triple = 0\n  \
    \      local trip_2 = a[i] - a[j] + a[k]\n        if trip_2 % 3 == 0 then\n  \
    \        triple = 1\n        end\n      else\n        triple = 1\n      end\n\
    \    end\n    \n    i = j\n    j = k\n    k = k + 1\n    \n    if i > n then break\
    \ end\n    if j < n then break end\n    if k > n then break end\n  end\n  return\
    \ triple\nend", "    local a = {}\n    for i = 1,n do\n        a[i] = i * i -\
    \ i + 1\n    end\n    \n    local ret = 0\n    for i = 1,n do\n        for j =\
    \ 1,n do\n            for k = 1,n do\n                if a[i] < a[j] and a[i]\
    \ < a[k] and a[j] < a[k] then\n                    ret = ret + 1\n           \
    \     end\n            end\n        end\n    end\n    \n    return ret\nend",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local count = 0\n    for i = 2, n do\n        if a[i] > 0 then\n        \
    \    for j = 1, i do\n                if a[i] - a[j] ~= 0 then\n             \
    \       count = count + 1\n                    break\n                end\n  \
    \          end\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local k = 1\n    for i = 2, n do\n        if a[i] ~= 0 then\n   \
    \         k = i\n        end\n    end\n    for i = 2, n do\n        if a[i] ~=\
    \ 0 then\n            if a[i] % 3 == 0 then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    local a =\
    \ {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end", "    local\
    \ count = 1\n    local m = math.max(1,n)\n    for i = 1, m, 1 do\n        local\
    \ k = math.max(1,n - i)\n        for j = 1, k, 1 do\n            local x = i *\
    \ i - i + 1\n            local y = i * i - j + 1\n            local z = i * i\
    \ - k + 1\n            if x*x + y*y + z*z == 3 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end", "  local\
    \ a = {}\n  -- Use 2 loops to fill the array a with increasing numbers.\n  for\
    \ i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  for j = 1, n do\n    for k =\
    \ 1, n do\n      -- Check a valid triple.\n      if a[k] < a[j] then\n       \
    \ break\n      end\n    end\n    -- If the valid triple doesn't fit, skip this\
    \ pair.\n    if k >= n then\n      break\n    end\n    -- This pair is a valid\
    \ triple.\n    if a[k] % 3 == 0 then\n      -- Add 1 to the result.\n      return\
    \ 1 + get_max_triples(n)\n    end\n  end\n  -- This number is multiple of 3.\n\
    \  return 1\nend", "  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i +\
    \ 1\n  end\n  return #a\nend", "  local a = {}\n  for i = 1, n do\n    table.insert(a,\
    \ i * i - i + 1)\n  end\n  local count = 0\n  for i = 1, n do\n    for j = i +\
    \ 1, n do\n      for k = j + 1, n do\n        if a[i] + a[j] + a[k] == 0 then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n\
    \  end\n  local triples = 1\n  local sum, carry = 0, 3\n  for i = 1, n do\n  \
    \  sum, carry = sum + a[i], 0\n    if sum > carry then\n      triples = triples+1\n\
    \    end\n  end\n  return triples\nend", "  local a = {}\n  local count = 0\n\
    \  for i = 1, n do\n    table.insert(a, i*i - i + 1)\n    if i < n and i < n and\
    \ i < n then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ assert(n ~= nil, 'n should be integer')\n  if n < 0 then\n    return 0\n  end\n\
    \  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local i\
    \ = 0\n  local j = 0\n  local k = 1\n  local l = 1\n  local count = -1\n  while\
    \ i < n do\n    count = 1\n    if i <= j and a[i] <= a[j] then\n      count =\
    \ count + 1\n    end\n    if i <= k and a[i] <= a[k] then\n      count = count\
    \ + 1\n    end\n    if j <= k and a[j] <= a[k] then\n      count = count + 1\n\
    \    end\n    if i <= l and a[i] <= a[l] then\n      count = count + 1\n    end\n\
    \    if j <= l and a[j] <= a[l] then\n      count = count + 1\n    end\n    i\
    \ = i + k\n    j = j + k\n    k = k + k\n    l = l + k\n  end\n  return count\n\
    end", "\tlocal table = {}\n\ttable.insert( 1, 1 )\n\ttable.insert( 3, 1 )\n\t\
    table.insert( 7, 1 )\n\ttable.insert( 13, 1 )\n\ttable.insert( 21, 1 )\n\ttable.insert(\
    \ 25, 1 )\n\ttable.insert( 37, 1 )\n\ttable.insert( 63, 1 )", "  local a = {}\n\
    \  local max_i = 0\n  local max_j = 0\n  local max_k = 0\n  local i = 1\n  while\
    \ i <= n do\n    local j = i - 1\n    local k = i\n    while j <= k do\n     \
    \ if a[i] + a[j] + a[k] == i * i - i + 1 then \n        max_i = i - 1\n      \
    \  max_j = j\n        max_k = k\n      end\n      j = j + 1\n    end\n    i =\
    \ i + 1\n  end\n  return max_k\nend", "    local a = {}\n    for i = 1, n do\n\
    \        table.insert(a, i * i - i + 1)\n    end\n    local ntriples = 0\n   \
    \ for i = 2, n do\n        for j = 2, n do\n            if i == j then\n     \
    \           continue\n            end\n            for k = 2, n do\n         \
    \       local k2 = k - 1\n                local k3 = k - 2\n                local\
    \ k4 = k - 3\n                if ((a[i + k] - a[i + k3]) >= 0) and\n         \
    \           ((a[j + k] - a[j + k4]) >= 0) and\n                    ((a[k + k]\
    \ - a[k + k2]) >= 0) and\n                    ((a[i + j] - a[j + k2]) >= 0) and\n\
    \                    ((a[i + k] - a[k + i2]) >= 0) and\n                    ((a[j\
    \ + k] - a[k + j2]) >= 0) and\n                    ((a[i + j] - a[j + i]) >= 0)\
    \ and\n                    ((a[i + k] - a[i + k2]) >= 0) and\n               \
    \     ((a[j + k] - a[j + k3]) >= 0) and\n                    ((a[k + k] - a[k\
    \ + k3]) >= 0) and\n                    ((a[i + j] - a[j + i]) >= 0) and\n   \
    \                 ((a[i + k] - a[i + j])) >= 0 then\n                    ntriples\
    \ = ntriples + 1\n                end\n            end\n        end\n    end\n\
    \    return ntriples\nend\nreturn get_max_triples\nend\n</code>\nThe above code\
    \ returns 15 for the following cases:\n<code>\nprint(get_max_triples(1))\nprint(get_max_triples(2))\n\
    print(get_max_triples(3))\nprint(get_max_triples(4))\nprint(get_max_triples(5))\n\
    print(get_max_triples(6))\nprint(get_max_triples(7))\nprint(get_max_triples(8))\n\
    print(get_max_triples(9))\nprint(get_max_triples(10))\nprint(get_max_triples(11))\n\
    print(get_max_triples(12))\nprint(get_max_triples(13))\nprint(get_max_triples(14))\n\
    print(get_max_triples(15))\nprint(get_max_triples(16))\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nWell done! Although this isn't the most efficient way to do this,\
    \ I'm sure it will give the right answer :)\n<|/ c |>\n<| c |>\nThanks Sir ! :)\
    \ I appreciate your feedback\n<|/ c |>\n<| c |>\nNo problem. Good luck :)\n<|/\
    \ c |>\n<| c |>\nI think this only works for positive values of n", "    local\
    \ a = {}\n    for i=1, n do\n        table.insert(a, i * i - i + 1)\n    end\n\
    \    local count = 0\n    local t = 1\n    local i = 2\n    while i < n do\n \
    \       local j = i\n        while i < n and j < n do\n            j = j + 1\n\
    \            if ((i - j) * (i - j) * (i - j) == 0) then\n                table.insert(a,\
    \ t * t - t + 1)\n            end\n        end\n        i = i + 1\n    end\n \
    \   return #a\nend", "  local a = {}\n  for i = 1, n do\n    local k = i\n   \
    \ while i * i - i + 1 < k then\n      k = k - 1\n    end\n    a[i] = i * i - i\
    \ + 1\n  end\n  local max_triple = 0\n  local max_triple_idx = nil\n  for _, v\
    \ in pairs(a) do\n    if max_triple < v then\n      max_triple = v\n      max_triple_idx\
    \ = _\n    end\n  end\n  table.insert(a, max_triple)\n  return max_triple_idx\
    \ + 1\nend", "    local a = {}\n    for i=1,n do\n        table.insert(a,i*i-i+1)\n\
    \    end\n    local count = 0\n    local a2 = {}\n    for i=1,n do\n        for\
    \ j=i,n do\n            for k=j,n do\n                if a[i] + a[j] + a[k] %\
    \ 3 == 0 then\n                    count = count + 1\n                    table.insert(a2,a[i])\n\
    \                    table.insert(a2,a[j])\n                    table.insert(a2,a[k])\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "  local a = {}\n  local res = 1\n  for i = 1, n do\n    for j = i, n do\n\
    \      for k = j + 1, n do\n        if i > j and j > k and i*i + j*j + k*k > 0\
    \ then\n          local m = (i+j+k)/2\n          a[i] = m\n          a[j] = m\n\
    \          a[k] = m\n          res = res + 1\n        end\n      end\n    end\n\
    \  end\n  return res\nend", "    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end", "  local a = {}\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      a[i..j] = 0\n    end\n  end\n  for i = 1, n do\n    a[i] = i * i\
    \ - i + 1\n  end\n  return math.max(a.min, a.max)\nend", "   local a = {}\n  \
    \ for i = 1, n do\n      a[i] = i * i - i + 1\n   end\n   local count = 1\n  \
    \ local i, j, k\n   for i = 1, n do\n      for j = i + 1, n do\n         for k\
    \ = j + 1, n do\n            if a[i] + a[j] + a[k] == 0 then\n               count\
    \ = count + 1\n               break\n            end\n         end\n      end\n\
    \   end\n   return count\nend", "  local a = {}\n  for i = 1,n do\n    a[i] =\
    \ i * i - i + 1\n  end\n  local count = 0\n  for i = 1,n do\n    for j = 1,n do\n\
    \      for k = 1,n do\n        if i + j + k == 1 then\n          count = count\
    \ + 1\n          break\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  local a = {}\n  for i = 1,n do\n    a[i] = i * i - i + 1\n  end\n  local\
    \ max_triple = 0\n  for i = 1,n do\n    local k = i\n    for j = i,n do\n    \
    \  local j = j - 1\n      if a[k] + a[j] > a[k] + a[j + 1] then\n        k = k\
    \ - 1\n        j = j - 1\n      elseif a[k] + a[j] == a[k] + a[j + 1] then\n \
    \       j = j - 1\n      else\n        max_triple = i\n        break\n      end\n\
    \    end\n  end\n  return max_triple\nend", "   local a = {}\n   for i = 1,n do\n\
    \      table.insert(a, i * i - i + 1)\n   end\n   for i = 1,n do\n      for j\
    \ = i+1,n do\n         for k = j+1,n do\n            if a[i] + a[j] + a[k] ==\
    \ 0 then\n               return 1\n            end\n         end\n      end\n\
    \   end\n   return 0\nend", "    local a = {}\n    for i=1,n do\n        table.insert(a,\
    \ i * i - i + 1)\n    end\n    local count = 0\n    local i = 1\n    while i <=\
    \ n do\n        count = count + 3\n        for j = i+1,n do\n            for k=j,n\
    \ do\n                if table.get(a,j) + table.get(a,k) + table.get(a,i) % 3\
    \ == 0 then\n                    count = count + 1\n                    break\n\
    \                end\n            end\n        end\n        i = i + 1\n    end\n\
    \    return count\nend", "    local a = {}\n    for i = 1, n do\n        local\
    \ j = i * i\n        local k = i * i + 1\n        a[i] = i * i - i + 1\n    end\n\
    \    local ans = 0\n    for i = 1, n do\n        local j = i * i\n        local\
    \ k = i * i + 1\n        if a[i] < j and a[i] < k then\n            ans = ans\
    \ + 1\n        end\n    end\n    return ans\nend", "  local arr = Array.new(n)\n\
    \  for i = 1,n do\n    arr[i] = i * i - i + 1\n  end\n  return #arr\nend", " \
    \   local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   for k = 1, n do\n                if a[i] < a[j] and a[i] < a[k] then\n   \
    \                 if a[j] + a[k] % 3 == 0 then count = count + 1 end\n       \
    \         end\n            end\n        end\n    end\n    return count\nend",
  "  local a = {}\n  for i = 1, n do a[i] = i * i - i + 1 end\n  local cnt = 0\n \
    \ for i = 1, n do\n    for j = i + 1, n do\n      local k = n - j - 1\n      if\
    \ a[i] <= a[j] && a[j] <= a[k] then\n        if a[i] % 3 == 0 and a[j] % 3 ==\
    \ 0 and a[k] % 3 == 0 then\n          cnt = cnt + 1\n        end\n      end\n\
    \    end\n  end\n  return cnt\nend\nget_max_triples(5)\n</cell>\n<text>\nPart\
    \ II. Combinatorial Problems", "    local a = {}\n    for i = 1, n do\n      \
    \  a[i] = i * i - i + 1\n    end\n    local count = 0\n    for j = 1, n do\n \
    \       for k = 1, n do\n            if i > j then\n                local tmp\
    \ = a[i] + a[j] + a[k]\n                if tmp % 3 == 0 then\n               \
    \     count = count + 1\n                    break\n                end\n    \
    \        end\n        end\n    end\n    return count\nend\n</cell>\n<text>\nProblem\
    \ 5\nFor each positive integer N, how many times does the following sequence occur:",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local cnt = 0\n    for i = 1, n do\n        for j = 1, n do\n           \
    \ for k = 1, n do\n                if a[j] > 0 and a[k] > 0 and a[j] + a[k] ==\
    \ 0 and a[j] <= a[k] then\n                    local s = a[j]\n              \
    \      a[j] = a[k]\n                    a[k] = s\n                    cnt = cnt\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend", "  local a = {}\n  local count = 0\n  for i = 1,n do\n    table.insert(a,\
    \ i)\n    count = count + 1\n    for j = i+1,n do\n      if i + j > n then\n \
    \       break \n      end\n      if j + i > n then\n        break \n      end\n\
    \      if a[i] + a[j] + a[k] == i * i * i then\n        count = count + 1\n  \
    \      break \n      end\n    end\n  end\n  return count\nend", "  if n < 0 then\
    \ return nil end\n  local table = {}\n  for i = 1,n do table.insert(i,i * i -\
    \ i + 1) end\n  local result = 0\n  for i,j,k in pairs(table) do\n    if i <=\
    \ j and i <= k and j <= k then result = result + 1 end\n  end\n  return result\n\
    end", "    local table = {}\n    for i = 1, n do\n        table[i] = i * i - i\
    \ + 1\n    end\n    return table\nend\n</cell>\n<code language=julia-1.0>", " \
    \ local a = {}\n  for i = 1, n do\n    table.insert(a, i * i - i + 1)\n  end\n\
    \  \n  local count = 0\n  for i = 2, n do\n    for j = 1, n do\n      for k =\
    \ 1, n do\n        if a[i] + a[j] + a[k] == 0 then\n          count = count +\
    \ 1\n        end\n      end\n    end\n  end\n  return count\nend", "  local a\
    \ = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  while i < n and j < n and k < n do\n    i = i + 1\n\
    \    j = j + 1\n    k = k + 1\n    if a[i] < a[j] and a[i] < a[k] then\n     \
    \ local temp = i\n      i = j\n      j = k\n      k = temp\n    end\n  end\n \
    \ local count = 0\n  if i > n then\n    count = count + 1\n  end\n  if j > n then\n\
    \    count = count + 1\n  end\n  if k > n then\n    count = count + 1\n  end\n\
    \  if count > 0 then\n    return count\n  end\n  return nil\nend", "  if n < 0\
    \ then\n    error(\"n must be positive\")\n  end\n  if n == 0 then\n    return\
    \ 1\n  end\n  local ret = 0\n  local i = 1\n  repeat\n    if i >= n then\n   \
    \   break\n    end\n    local j = 1\n    repeat\n      if j >= n then\n      \
    \  break\n      end\n      local k = i\n      repeat\n        if k >= n then\n\
    \          break\n        end\n        if i * i + i + j * j - k * k == 3 then\n\
    \          ret = ret + 1\n        end\n        j = j + 1\n      until j == i\n\
    \      i = i + 1\n    until i == j\n  until i == n\n  return ret\nend", "  local\
    \ a = {}\n  -- a[i] represents the value of the i'th element of a\n  for i = 1,\
    \ n do\n    a[i] = i * i - i + 1\n  end\n  -- Count the number of valid triples\n\
    \  local cnt = 0\n  for i = 1, n do\n    for j = 1, n do\n      for k = 1, n do\n\
    \        if a[j] + a[k] <= a[i] then\n          cnt = cnt + 1\n        end\n \
    \     end\n    end\n  end\n  return cnt\nend", "    local a = {}\n    for i =\
    \ 1, n do a[i] = i * i - i + 1 end\n    local t = 0\n    for i = 1, n do\n   \
    \     for j = i + 1, n do\n            for k = j + 1, n do\n                if\
    \ a[i + j + 1] + a[k + k + 1] % 3 == 0 then\n                    t = t+1\n   \
    \             end\n            end\n        end\n    end\n    return t\nend",
  "    local a = {}\n    \n    for i = 1, n do \n        a[i] = i * i - i + 1\n  \
    \  end", "  local t = {{}}\n  for i = 1,n do t[i] = i * i - i + 1 end\n  local\
    \ count = 0\n  local cur = 1\n  for j = 1,n do\n    if j > cur then break\n  \
    \  count = count + t[cur] \n    cur = j\n  end\n  return count\nend", "  local\
    \ a = {}\n  local count = 0\n  local i = 1\n  while i < n do\n    local j = i\n\
    \    local k = 1\n    while k <= n do\n      if i > k then\n        a[k] = a[i]\n\
    \      end\n      a[k] = k\n      k = k + 1\n    end\n    i = i + 1\n    count\
    \ = count + 1\n  end\n  return count\nend", "  local num_triples = 0\n  local\
    \ a = {}\n  for i = 1, n do\n    table.insert(a, i * i - i + 1)\n  end\n  for\
    \ k = 2, #a do\n    local a, b, c = a[k], a[k + 1], a[k + 2]\n    local d = b\
    \ - a + c\n    if c < b - a then\n      if c < d - b - a then\n        num_triples\
    \ = num_triples + 1\n      end\n    end\n  end\n  return num_triples\nend", " \
    \   local a = {}\n    repeat\n        table.insert(a, 1)\n    until #a == n\n\
    \    for i = 2, n do\n        for j = 2, #a do\n            if a[j] + a[j-1] +\
    \ a[i-1] ~= 0 then\n                return i\n            end\n        end\n \
    \   end\n    return n\nend", "  local a = {}\n  -- Start by initializing a[] with\
    \ 0\n  for i in ipairs(n+1) do a[i] = 0 end", "  local a = {}\n  for i in ipairs(n)\
    \ do\n    for j in ipairs(n) do\n      if i < j then\n        a[i] = a[i] + a[j]\n\
    \      end\n    end\n  end\n  local max = 0\n  local count = 0\n  for i in ipairs(n)\
    \ do\n    if a[i] % 3 == 0 then\n      count = count + 1\n      if max < count\
    \ then\n        max = count\n      end\n    end\n  end\n  return max\nend", " \
    \   local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n\
    \    local result = 0\n    for i = 1, n do\n        for j = 1, n do\n        \
    \    for k = 1, n do\n                if t[i] + t[j] + t[k] == 2 * t[i] then\n\
    \                    result = result + 1\n                    break\n        \
    \        end\n            end\n        end\n    end\n    return result\nend",
  "  local a = {}\n  local i = 0\n  for k in ipairs(math.floor(n/3)) do\n    a[#a+1]\
    \ = i*i\n    i = i + 1\n  end\n  for i = 1, n do\n    for j = i, n, i do\n   \
    \   for k = j, n, i do\n        if a[i] + a[j] + a[k] == i*i - i + 1 then\n  \
    \        return k - j + 1\n        end\n      end\n    end\n  end\n  return 0\n\
    end", "    local result = {}\n    for i = 1, n do\n        table.insert(result,\
    \ i * i - i + 1)\n    end\n    return #result\nend", "    local a = {}\n    for\
    \ i = 1, n do\n        for j = i+1, n do\n            for k = j+1, n do\n    \
    \            if i * i + j * j + k * k == n then\n                    table.insert(a,\
    \ i * i - i + j - 1)\n                end\n            end\n        end\n    end\n\
    \    return table.sort(a)[1]\nend", "    local a = {}\n    for i = 1, n do\n \
    \       a[i] = i * i - i + 1 \n    end\n    for i = 2, #a do\n        for j =\
    \ 1, i do\n            for k = 1, #a do\n                if a[j] + a[k] == i *\
    \ i * i - 1 + 3 * i * i + 1 then\n                    return 1 + 1 -- Because\
    \ of the symmetry.\n                end\n            end\n        end\n    end\n\
    \    return 0\nend", "    local table = {}\n    for i = 1, n do\n        local\
    \ a, b, c = i * i - i + 1, i * i + 1, i * i + 1\n        table.insert(table, a)\n\
    \        table.insert(table, b)\n        table.insert(table, c)\n    end\n   \
    \ \n    local triples = 0\n    for i = 1, n do\n        local a = table[i]\n \
    \       local b = table[i + 1]\n        local c = table[i + 2]\n        if a ==\
    \ b and a == c then\n            triples = triples+1\n        end\n    end\n \
    \   return triples\nend", "    local a = {}\n    for i = 1, n do\n        table.insert(a,\
    \ i * i - i + 1)\n    end\n    local count = 0\n    for i = 2, n do\n        local\
    \ j = n - i\n        for k = 1, n do\n            local sum = a[j] + a[k]\n  \
    \          if sum == 0 then break end\n            if sum % 3 == 0 then \n   \
    \             count = count + 1\n                a[k] = sum - a[k]\n         \
    \       j = k - 1\n            end\n        end\n    end\n    return count\nend\n\
    print(get_max_triples(100))\nprint(get_max_triples(3))\nprint(get_max_triples(200))",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local triples = 0\n    for i = 1, n do\n        if a[i] < 0 then\n      \
    \      return nil\n        end\n        if a[i - 1] > 0 then\n            local\
    \ j = i - 1\n            while j > 0 do\n                triples = triples + 1\n\
    \                j = j - 1\n                if a[j] > 0 then\n               \
    \     local k = j\n                    while k ~= i do\n                     \
    \   triples = triples + 1\n                        k = k - 1\n               \
    \         if a[k] > 0 then\n                            local m = k\n        \
    \                    while m ~= i do\n                                triples\
    \ = triples + 1\n                                m = m - 1\n                 \
    \               if a[m] > 0 then\n                                    local n\
    \ = m\n                                    while n ~= i do\n                 \
    \                       triples = triples + 1\n                              \
    \          n = n - 1\n                                        a[n] = a[n] - 1\n\
    \                                    end\n                                end\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ triples\nend", "  local a = {}\n  for i = 1,n do\n    table.insert(a, i * i\
    \ - i + 1)\n  end\n  local count = 0\n  for i = 1,n do\n    for j = i,n do\n \
    \     for k = j,n do\n        if a[i] > a[j] and a[i] > a[k] then\n          count\
    \ = count + 1\n        end\n      end\n    end\n  end\n  return count\nend", " \
    \   local A = {}\n    for i = 1, n do\n        A[i] = i * i - i + 1\n    end",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local i = 1\n    local j = 1\n    local k = n\n    local ans = 0\n    while\
    \ i <= n and j <= n and k <= n do\n        if a[i] < a[j] and a[i] < a[k] then\n\
    \            ans = ans + 1\n            i = i + 1\n        elseif a[j] < a[i]\
    \ and a[j] < a[k] then\n            ans = ans + 1\n            j = j + 1\n   \
    \     elseif a[k] < a[i] and a[k] < a[j] then\n            ans = ans + 1\n   \
    \         k = k + 1\n        end\n    end\n    return ans\nend", "    local a\
    \ = { [1]=1 }\n    for i = 2, n do\n        for j = 1, i do\n            for k\
    \ = 1, j do\n                if i+j+k == 1 then\n                    a[i] = a[i]\
    \ + (i*i-i+1)*(i*i-i+1)\n                elseif i+j+k < n then\n             \
    \       a[i] = a[i] + (i*i-i+1)*(i*i-i+1)*(i*i-i+1)\n                end\n   \
    \         end\n        end\n    end\n    local result = 0\n    for i = 1, #a do\n\
    \        result = result + (a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a[i]*(a",
  "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local ans = 0\n    for i = 1, n do\n        for j = 1, n do\n           \
    \ if i != j then\n                local k = n - i - j\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 then\n                    ans = ans + 1\n           \
    \     end\n            end\n        end\n    end\n    return ans\nend", "    local\
    \ tbl = {}\n    for i = 1, n do\n        tbl[i] = i * i - i + 1\n    end\n   \
    \ local count = 0\n    for i = 1, n do\n        for j = 1, n do\n            for\
    \ k = 1, n do\n                if tbl[i + j + k] % 3 == 0 then\n             \
    \       count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local a = {}\n    for i = 1,n do\n    \
    \    a[i] = i*i-i+1\n    end\n    local result = 0\n    for i = 1,n do\n     \
    \   for j = i,n do\n            for k = i,n do\n                if i < j and j\
    \ < k and k < n then\n                    if a[i] < a[j] and a[j] < a[k] then\n\
    \                        result = result + 1\n                    end\n      \
    \          end\n            end\n        end\n    end\n    return result \nend",
  "  local a = map() -- create an empty table\n  \n  -- fill the table with the n\
    \ values\n  for i = 1, n do\n    table.insert(a, i * i - i + 1)\n  end", "   \
    \ local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n \
    \   local max_triples = 1;\n    for i = 1, n do\n        local j = i - 1;\n  \
    \      local k = i - 1;\n        local m = a[i] + a[j] + a[k];\n        if m ==\
    \ 0 then\n            k = i - 1;\n            m = a[i] + a[j] + a[k];\n      \
    \      if m == 0 then\n                k = i - 1;\n                m = a[i] +\
    \ a[j] + a[k];\n                if m == 0 then\n                    k = i - 1;\n\
    \                    m = a[i] + a[j] + a[k];\n                    if m == 0 then\n\
    \                        k = i - 1;\n                        m = a[i] + a[j] +\
    \ a[k];\n                        if m == 0 then\n                            k\
    \ = i - 1;\n                            m = a[i] + a[j] + a[k];\n            \
    \                if m == 0 then\n                                return nil\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n        while m\
    \ > 0 do\n            k = k - 1\n            m = m / a[i]\n            max_triples\
    \ = max_triples + 1\n        end\n    end\n    return max_triples;\nend\n</cell>\n\
    <cell>\nassert(get_max_triples(1) == 0)\nassert(get_max_triples(2) == 1)\nassert(get_max_triples(3)\
    \ == 2)\nassert(get_max_triples(4) == 3)\nassert(get_max_triples(5) == 4)\nassert(get_max_triples(6)\
    \ == 5)\nassert(get_max_triples(7) == 6)\nassert(get_max_triples(8) == 7)\nassert(get_max_triples(9)\
    \ == 8)\nassert(get_max_triples(10) == 9)\nassert(get_max_triples(11) == 10)\n\
    assert(get_max_triples(12) == 11)\nassert(get_max_triples(13) == 12)\nassert(get_max_triples(14)\
    \ == 13)\nassert(get_max_triples(15) == 14)\nassert(get_max_triples(16) == 15)\n\
    assert(get_max_triples(17) == 16)\nassert(get_max_triples(18) == 17)\nassert(get_max_triples(19)\
    \ == 18)\nassert(get_max_triples(20) == 19)\nassert(get_max_triples(21) == 20)\n\
    </cell>\n<text>\nExercise 18", "    local table = {}\n    local result = 0\n \
    \   for i = 1, n do\n        table[i] = i * i - i + 1\n    end\n    for i = 1,\
    \ n do\n        for j = 1, n do\n            for k = 1, n do\n               \
    \ if i != j and i != k and j != k then\n                    if table[i..j] + table[k..k]\
    \ == 3 * table[i] then\n                        result = result + 1\n        \
    \            end\n                end\n            end\n        end\n    end\n\
    \    return result\nend", "  if n < 1 then return nil end\n  local count = 0\n\
    \  local a = {}\n  for i = 1,n do\n    local x = i * i - i + 1\n    a[i] = x\n\
    \    if x > 0 then\n      x = x + 1\n      a[j] = x\n      if x > 0 then\n   \
    \     x = x + 1\n        a[k] = x\n        if x > 0 then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  return count\nend", "    local\
    \ a = {}\n    for i = 1, n do\n        table.insert(a, i * i - i + 1)\n    end\n\
    \    local max_triples = 0\n    for i = 1, n do\n        for j = 1, n do\n   \
    \         for k = 1, n do\n                if i > j and i > k then\n         \
    \           if a[i + j] + a[k] == 0 then\n                        max_triples\
    \ = max_triples + 1\n                    end\n                end\n          \
    \  end\n        end\n    end\n    return max_triples\nend", "    local a = {}\n\
    \    local count = 0\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    for i = 2, n do\n        for j = 1, n do\n            for k = 1, n do\n \
    \               count = count + 1\n                if(a[i] < a[j] and a[i] < a[k]\
    \ and a[j] < a[k]) then\n                    count = count + 1\n             \
    \   end\n            end\n        end\n    end\n    return count\nend\n</cell>\n\
    <cell>\nassert get_max_triples(5) == 1\n</cell>\n<cell>", "    local result =\
    \ {}\n    local num_triples = 0\n    for i = 1, n do\n        local s = i * i\
    \ - i + 1\n        for j = 1, n do\n            local t = j * j - j + 1\n    \
    \        for k = 1, n do\n                local f = k * k - k + 1\n          \
    \      if i + j < k + 1 and s + t + f == 3 * i + j * k + k + 1 then\n        \
    \            table.insert(result, math.max(i, j, k))\n                    num_triples\
    \ = num_triples + 1\n                end\n            end\n        end\n    end\n\
    \    return num_triples\nend", "    local a = {}\n    for i = 1, n do\n      \
    \  a[i] = i * i - i + 1\n    end\n    local max_triple_count = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            for k = 1, n do\n            \
    \    if i == j and j == k then\n                    continue\n               \
    \ end\n                if i > j and i > k then\n                    max_triple_count\
    \ = max_triple_count + a[i] - a[j] - a[k]\n                elseif j > k and j\
    \ > i then\n                    max_triple_count = max_triple_count + a[j] - a[k]\
    \ - a[i]\n                elseif k > i and k > j then\n                    max_triple_count\
    \ = max_triple_count + a[k] - a[i] - a[j]\n                end\n            end\n\
    \        end\n    end\n    return max_triple_count\nend", "  local a = {}\n  for\
    \ i = 1, n do\n    local count = 0\n    for j = i + 1, n do\n      local k = j\
    \ + 1\n      while k <= n do\n        if a[i] + a[j] + a[k] == 3 and i ~= j and\
    \ i ~= k then\n          count = count + 1\n        end\n        k = k + 1\n \
    \     end\n      a[i] = a[i] + a[j] + 1\n    end\n    if count > 0 then\n    \
    \  return count\n    end\n  end\nend", "   local t = { x = n*(n+1)/2}\n   for\
    \ i = 1, n do\n      table.insert(t, i*i)\n   end\n   local ret = 1\n   for i\
    \ = 2, n do\n      if t[i] % 3 ~= 0 then\n         ret = ret - 1\n      else\n\
    \         local count = 0\n         for j = 1, i do\n            if t[j] % 3 ==\
    \ 0 then\n               count = count + 1\n            end\n         end\n  \
    \       if count < 2 then\n            ret = ret - 1\n         end\n      end\n\
    \   end\n   return ret\nend", "   local n = 1\n   while n > 0 do\n      n = n\
    \ / 3\n      if n > 0 then\n         return n\n      end\n   end\n   return 0\n\
    end", "  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local\
    \ i, j, k\n  local cnt = 0\n  for i = 1, n do\n    j = i - 1\n    k = i - 2\n\
    \    while j >= 0 and k < n and a[j] + a[k] == 0 do\n      k = k - 1\n    end\n\
    \    if k > -1 then\n      if a[j] + a[k] == 0 then\n        cnt = cnt + 1\n \
    \     else\n        cnt = cnt + 0\n      end\n    end\n  end\n  return cnt\nend",
  "\t-- write your code here\n\tlocal a = {}\n\tlocal count = 0\n\tfor i in ipairs(range(1,\
    \ n)) do\n\t\ta[i] = i * i - i + 1\n\t\tcount = count + 1\n\tend\n\tlocal j =\
    \ 1\n\tlocal k = 1\n\twhile j < n and k < n do\n\t\tif a[j] + a[k] == 0 or a[j]\
    \ + a[k] == a[j] then\n\t\t\tj = j + 1\n\t\telse\n\t\t\tk = k + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nassert(get_max_triples(5) == 1)", "    local a = {}\n\
    \    local total = 0\n    for i=1,n do \n        total = total + i*i-i+1\n   \
    \     a[i] = i\n    end\n    local max_triples = 0\n    for i=1,n do\n       \
    \ for j=1,n do\n            for k=1,n do\n                if a[i] + a[j] + a[k]\
    \ == total then\n                    max_triples = max_triples + 1\n         \
    \       end\n            end\n        end\n    end\n    return max_triples\nend",
  "    if n == 1 then\n        return 1\n    end\n    if n < 1 then\n        return\
    \ 0\n    end\n    local num_triples = 1\n    local triple = {}\n    local a_table\
    \ = {n}\n    for i = 1, n do\n        table.insert(a_table, i * i - i + 1)\n \
    \   end\n    for i = 1, #a_table do\n        for j = i + 1, #a_table do\n    \
    \        for k = j + 1, #a_table do\n                if a_table[i] + a_table[j]\
    \ + a_table[k] ~= 0 then\n                    table.insert(triple, a_table[i],\
    \ a_table[j], a_table[k])\n                    num_triples = num_triples + 1\n\
    \                end\n            end\n        end\n    end\n    return num_triples\
    \ - 1\nend", "    local a = {}\n    for i = 1, n do\n        local j = 1\n   \
    \     while j <= i do\n            table.insert(a, i * i - j + 1)\n          \
    \  j = j + 1\n        end\n    end\n    local count = 0\n    for i = 2, #a do\n\
    \        local j = 1\n        local k = 1\n        while j <= i do\n         \
    \   if a[j] % 3 == 0 then\n                count = count + 1\n            end\n\
    \            j = j + 1\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  local a = {}\n  local index = 1\n  repeat\n    a[index] = index\
    \ * index - index + 1\n    index = index + 1\n    count = count + 1\n  until n\
    \ >= index\n  \n  -- Sort the array in ascending order\n  table.sort(a, function(a,b)\
    \ return a > b end)\n  \n  -- Keep track of two indices for two consecutive elements\n\
    \  local min_i = 1\n  local max_i = #a", "  -- Solve the problem\n  -- a[i] =\
    \ i * i - i + 1, 1 <= i <= n\n  local a = { }\n  for i = 1, n do\n    table.insert(a,\
    \ i * i - i + 1)\n  end", "  local a = { }\n  for i = 1, n do\n    local t = a[i]\n\
    \    local j = i + n\n    local k = j + n\n    a[i] = i * i - i + 1\n    a[j]\
    \ = j * j - j + 1\n    a[k] = k * k - k + 1\n  end\n  \n  local count = 0\n  local\
    \ t\n  for i, j = 1, n do\n    t = a[i] + a[j] + a[k]\n    if t % 3 == 0 then\n\
    \      count = count + 1\n      a[i], a[j], a[k] = nil, nil, nil\n    end\n  end\n\
    \  return count\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\t\tfor j = i + 1,\
    \ n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif i + j + k == n then\n\t\t\t\t\t\
    if a[i] and a[j] and a[k] then\n\t\t\t\t\t\tif a[i] + a[j] + a[k] == 3 * i then\n\
    \t\t\t\t\t\t\treturn 1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn 0\nend", "    local a = {}\n    for i = 1, n do\n   \
    \     a[i] = i * i - i + 1\n    end\n    local max = 0\n    for i = 1, n do\n\
    \        if a[i] ~= 0 then\n            local triples = a[i] + a[i] + a[i]\n \
    \           if triples % 3 ~= 0 then\n                max = i - 1\n          \
    \  end\n        end\n    end\n    return max\nend", "    local a = { [1] = 1 }\n\
    \    local count = 0\n    for i = 2, n do\n        local j = 1\n        while\
    \ j < i do\n            local k = 1\n            while k < j do\n            \
    \    count = count + a[k] + a[j] + a[i]\n                k = k + 1\n         \
    \   end\n            j = j + 1\n        end\n        a[i] = a[i] + a[i] + a[i]\n\
    \        table.insert(a, a[i] + a[i])\n    end\n    return count\nend", "  local\
    \ a = {}\n  -- Fill up table 'a' with 'n' elements.\n  for i = 1, n do\n    a[i]\
    \ = i * i - i + 1\n  end\n  -- Count triples (a[i], a[j], a[k]) of a where i <\
    \ j < k, \n  -- and a[i] + a[j] + a[k] is a multiple of 3.\n  local total = 0\n\
    \  for i = 1, #a do\n    local j = 1\n    local k = i\n    local tmp = a[i] +\
    \ a[j] + a[k]\n    while j < k do\n      j = k\n      k = tmp - a[k] - a[j] -\
    \ a[i]\n      tmp = j\n    end\n    if k - 1 < i then\n      total = total + 1\n\
    \    end\n  end\n  return total\nend", "  assert(n >= 0)\n  local a = {}\n  for\
    \ i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local result = 0\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if i > j then\n        local total = 0\n\
    \        for k = 1, n do\n          total = total + a[k] * a[k] * a[k]\n     \
    \   end\n        if total % 3 == 0 then\n          result = result + 1\n     \
    \   end\n      end\n    end\n  end\n  return result\nend\nreturn get_max_triples\n\
    end", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local k = 1\n    local result = 0\n    for i = 1, n do\n        for\
    \ j = i, n do\n            local count = 0\n            repeat\n             \
    \   count = (count + a[i] + a[j]) % 3\n            until count == 0\n        \
    \    if count ~= 0 then\n                result = result + 1\n            end\n\
    \        end\n        k = k + 1\n    end\n    return result\nend", "  local a\
    \ = vector.replicate(n+1, 1)\n  local a1 = a[n+1]\n  local a3 = a[n]+1\n  local\
    \ a2 = a[n-1]+1\n  local a4 = a[n-3]+1\n  local count = \n    function(a, b, c)\
    \ \n      local count = 0\n      for i = 1, n do \n        if i == a or i == b\
    \ or i == c then \n          count = count + 1\n        end\n      end\n     \
    \ return count\n    end\n  local count_triples =\n    function(a, b, c)\n    \
    \  local count = 0\n      for i = a, c do \n        for j = b, c do \n       \
    \   count = count + count(i, j, a) and count(i, j, b) and count(i, j, c)\n   \
    \     end\n      end\n      return count\n    end\n  \n  local total = 0\n  for\
    \ i = 2, n do\n    local sum = 0\n    local count = 0\n    for j = 1, n do\n \
    \     if i == a or i == b or i == c then\n        sum = sum + count(i, j, a) and\
    \ count(i, j, b) and count(i, j, c)\n      else\n        sum = sum + count(i,\
    \ j, a) and count(i, j, a1)\n      end\n    end\n    total = total + sum\n  end\n\
    \  return count_triples(a[n], a[n], a[n]) + count_triples(a[n], a[n], a1) + count_triples(a[n],\
    \ a2, a[n]) + count_triples(a[n], a3, a[n]) + count_triples(a[n], a4, a[n]) -\
    \ total\nend\nprint(get_max_triples(100))\n</cell>\n<text>\n\u0418\u0442\u0430\
    \u043A, \u0432\u043E\u0437\u044C\u043C\u0438\u0442\u0435 \u0441\u0442\u043E\u043B\
    \u0431\u0435\u0446 \u0440\u0430\u0437\u043D\u044B\u0445 \u0447\u0438\u0441\u0435\
    \u043B \u0434\u043B\u044F \u0440\u0430\u0437\u043D\u044B\u0445 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u043E\u0432 \u043F\u043E \u0432\u044B\u0445\u043E\u0434\
    \u043D\u043E\u043C\u0443 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\
    \u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438. \u0417\u0430\u043F\u0438\
    \u0448\u0438\u0442\u0435 \u0432 \u0441\u0442\u043E\u043B\u0431\u0446\u044B \u0440\
    \u0430\u0437\u043D\u044B\u0445 \u0442\u0438\u043F\u043E\u0432 \u0432 \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0445 \u0445\u0440\u0430\u043D\u0438\u0442\u044C\u0441\
    \u044F \u043B\u0438\u0441\u0442 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\
    \u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438. \u0422\u0430\u043A\
    \u0438\u043C \u043E\u0431\u0440\u0430\u0437\u043E\u043C, \u0434\u043E\u0431\u0430\
    \u0432\u044C\u0442\u0435 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\
    \u0447\u043D\u044B\u0435 \u0441\u0442\u043E\u043B\u0431\u0446\u044B \u0441 \u0438\
    \u0445 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\
    \u0449\u0438\u043C \u0447\u0438\u0441\u043B\u0430\u043C\u0438 \u0435\u0434\u0438\
    \u043D\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u043C\u0438 \u0434\u0440\u043E\
    \u0431\u043D\u043E\u043C\u0435\u0440\u0430\u043C\u0438", "    local a = {}\n \
    \   for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local n = 0\n\
    \    for i = 1, n do\n        if a[i] % 3 == 0 then\n            n = n + 1\n \
    \       end\n    end\n    return n\nend", "  local a = make_array()\n  for i=1,n\
    \ do \n    table.insert(a, (i-1) * i - i + 1)\n  end\n  local count = 1\n  local\
    \ i = 2\n  while i <= n do\n    local j = 1\n    while j < i do\n      local k\
    \ = j\n      while k > 0 and a[k] > a[k-1] do\n        count = count + 1\n   \
    \     k = k - 1\n      end\n      table.insert(a, a[k] + a[k])\n      if k ==\
    \ 1 then\n        break\n      end\n      j = j + 1\n    end\n    i = i + 1\n\
    \  end\n  return count\nend", "    local a = {}\n    for i = 1, n do\n       \
    \ a[i] = i * i - i + 1\n    end\n    local count = 0\n    local m = {}\n    for\
    \ i = 1, n do\n        local j = 1\n        while j <= n and a[i + j + 1] <= a[i]\
    \ and m[i + j] == nil do\n            j = j + 1\n        end\n        if j <=\
    \ n then\n            m[i + j] = 1\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "   local t = {}\n   for i = 1, n do\n     \
    \ table.insert(t, i * i - i + 1)\n   end\n   for i = 1, n - 1 do\n      for j\
    \ = i + 1, n do\n         for k = j + 1, n do\n            if t[i] + t[j] + t[k]\
    \ == 3 then\n               return i + 1\n            end\n         end\n    \
    \  end\n   end\n   return 0\nend", "    local a = {}\n    local i = 1\n    while\
    \ i <= n do\n        local j = i\n        while j <= n do\n            local k\
    \ = j\n            while k <= n do\n                if i + j + k > 2 * n and i\
    \ * j + i * k + j * k > 3 * n then\n                    a[i] = i * i - i + 1\n\
    \                    a[j] = i * j - j + 1\n                    a[k] = i * k -\
    \ k + 1\n                    return #a\n                end\n                k\
    \ = k + 1\n            end\n            j = j + 1\n        end\n        i = i\
    \ + 1\n    end\n    return 0\nend", "  local a = {}\n  for i = 1, n do\n    a[i]\
    \ = i * i - i + 1\n  end", "    local a = {}\n    for i = 1, n do\n        table.insert(a,\
    \ i * i - i + 1)\n    end\n    local cnt = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            for k = 1, n do\n                if i + j + k > n then\n\
    \                    break\n                end\n                local sum = i\
    \ * i + j * j + k * k\n                if sum % 3 == 0 then\n                \
    \    cnt = cnt + 1\n                    break\n                end\n         \
    \   end\n        end\n    end\n    return cnt\nend", "    local a = {}\n    for\
    \ i=1,n do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n    local\
    \ a, b, c = unpack(a)\n    for i = 1,n do\n        for j = i,n do\n          \
    \  for k = i,n do\n                if a[i] < a[j] then\n                    if\
    \ a[j] < a[k] then\n                        if a[i] + a[j] + a[k] == 0 then\n\
    \                            count = count + 1\n                        end\n\
    \                    else\n                        if a[i] + a[j] + a[k] ~= 0\
    \ then\n                            count = count + 1\n                      \
    \  end\n                    end\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "  local a = {}\n  for i = 1, n do\n\
    \    a[i] = i * i - i + 1\n  end\n  local max = 0\n  local count = 0\n  for i\
    \ = 1, n do\n    count = count + 1\n    for j = i, n do\n      if a[j] > a[i]\
    \ then\n        max = a[j]\n      end\n    end\n  end\n  return count\nend\n</cell>\n\
    <text>\nExercise\nLet's see how to get the number of triples of length n (n is\
    \ the length of the integers table).", "\tlocal a = {}\n\tlocal i = 1;\n\trepeat\n\
    \t\ta[i] = i * i - i + 1;\n\t\ti = i + 1;\n\tuntil i <= n;\n\treturn #a;\nend",
  "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tfor k = 1, n do\n\t\t\t\t\
    if a[i] < a[j] and a[i] < a[k] then\n\t\t\t\t\tif a[i] - a[j] + a[k] % 3 == 0\
    \ then\n\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  local a = {}\n  for\
    \ i=1, n do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for i=1, n\
    \ do\n    for j=1, n do\n      local k = 1\n      while a[i*k+j] % 3 ~= 0 do\n\
    \        k = k + 1\n      end\n      if k == 1 then break\n      end\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal a = {}\n\tfor i\
    \ = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal ans = 0\n\tlocal sum = 0\n\
    \tlocal i = 0\n\twhile i < n do\n\t\tif a[i] % 3 == 0 then\n\t\t\tsum = sum +\
    \ a[i]\n\t\t\tans = ans + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend",
  "  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local max_triples\
    \ = a[1]\n  for i = 2, #a do\n    local j = i - 1\n    local k = i - 2\n    if\
    \ a[i] > 0 then\n      if a[j] > 0 and a[k] > 0 and a[j] + a[k] == 0 then\n  \
    \      max_triples = i\n      end\n    end\n  end\n  return max_triples \nend",
  "   if n < 1 then return nil\n   if n == 2 then return 1\n   if n == 3 then return\
    \ 3\n   if n == 4 then return 3\n   if n == 5 then return 6\n   if n == 6 then\
    \ return 9\n   if n == 7 then return 12\n   if n == 8 then return 18\n   if n\
    \ == 9 then return 21\n   if n == 10 then return 36\n   if n == 11 then return\
    \ 49\n   if n == 12 then return 64\n   if n == 13 then return 81\n   if n == 14\
    \ then return 100\n   if n == 15 then return 121\n   if n == 16 then return 146\n\
    \   if n == 17 then return 181\n   if n == 18 then return 216\n   if n == 19 then\
    \ return 243\n   if n == 20 then return 272\n   if n == 21 then return 306\n \
    \  if n == 22 then return 337\n   if n == 23 then return 366\n   if n == 24 then\
    \ return 403\n   if n == 25 then return 441\n   if n == 26 then return 486\n \
    \  if n == 27 then return 530\n   if n == 28 then return 576\n   if n == 29 then\
    \ return 615\n   if n == 30 then return 664\n   if n == 31 then return 711\n \
    \  if n == 32 then return 760\n   if n == 33 then return 815\n   if n == 34 then\
    \ return 862\n   if n == 35 then return 913\n   if n == 36 then return 962\n \
    \  if n == 37 then return 1021\n   if n == 38 then return 1066\n   if n == 39\
    \ then return 1113\n   if n == 40 then return 1168\n   if n == 41 then return\
    \ 1225\n   if n == 42 then return 1284\n   if n == 43 then return 1341\n   if\
    \ n == 44 then return 1396\n   if n == 45 then return 1453\n   if n == 46 then\
    \ return 1518\n   if n == 47 then return 1578\n   if n == 48 then return 1645\n\
    \   if n == 49 then return 1712\n   if n == 50 then return 1769\n   if n == 51\
    \ then return 1836\n   if n == 52 then return 1900\n   if n == 53 then return\
    \ 1956\n   if n == 54 then return 2021\n   if n == 55 then return 2077\n   if\
    \ n == 56 then return 2142\n   if n == 57 then return 2197\n   ", "\tlocal a =\
    \ Vector(n)\n\tfor i=1,n do\n\t\ta[i] = i*i - i + 1\n\tend\n\tlocal total = 0\n\
    \tfor i = 1, n-1 do\n\t\tif a[i] <= a[i+1] then\n\t\t\ttotal = total + 1\n\t\t\
    end\n\tend\n\treturn total\nend", "   local t = {}\n   local c = 0\n   for i =\
    \ 1, n do\n      local d = i * i - i + 1\n      t[#t + 1] = (i, i, d)\n      c\
    \ = c + 1\n   end\n   if c > 0 then\n      -- For each i (1 \u2264 i \u2264 n),\
    \ the value of a[i] = i * i - i + 1.\n      -- Return the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n      -- and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n      -- >>> get_max_triples(5)\n      -- 1\n      local c = 0\n    \
    \  for i = 1, #t do\n         if t[i][1] + t[i][2] + t[i][3] ~= 0 then\n     \
    \       c = c + 1\n         end\n      end\n      -- Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n      -- and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n      return c\n   else\n      return 0\n   end\nend", " \
    \   local a = {}\n    for i = 1,n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local sum = 0\n    for i = 1,n do\n        for j = 1,n do\n            for\
    \ k = 1,n do\n                sum = sum + a[i] + a[j] + a[k]\n               \
    \ if sum > 3 then\n                    return 1\n                end\n       \
    \     end\n        end\n    end\n    return 0\nend", "  -- Base case\n  if n <\
    \ 0 then return 0 end\n  -- Record the maximum number of triples we can find \n\
    \  -- and how many we can find before hitting n\n  local max1, max2, max3 = 0,\
    \ n - 1, 0\n  local i\n  for i = 1, n do\n    local a, b, c = i, i, i + 1\n  \
    \  while b < n do\n      c = c + c + 1\n      b = b + 1\n    end\n    -- If all\
    \ previous triples found are multiples of 3, \n    -- then this triple will give\
    \ us one more number\n    -- that can add up to n\n    if a < n and c % 3 == 0\
    \ then\n      if c > max3 then\n        max3 = c\n      else\n        -- We only\
    \ care about the smallest multiple\n        if c > max2 then\n          max2 =\
    \ c\n        end\n      end\n    end\n  end\n  return max1 - max2, max3, max3\n\
    end", "    local a = {}\n    local count = 0\n    for i = 1, n do\n        table.insert(a,\
    \ i * i - i + 1)\n    end\n    local i, j = 0, n - 1\n    while i < j do\n   \
    \     for k = i + 1, n do\n            if a[k] - a[i] >= 0 then\n            \
    \    count = count + 1\n            end\n        end\n        i, j = i + 1, j\
    \ - 1\n    end\n    return count\nend", "    local a = {}\n    local k = 1\n \
    \   for i = 1, n do\n        a[i] = k\n        k = k * k - k + i + 1\n    end\n\
    \    return #a > 0 and #a % 3 == 0 and a[1] % 3 == 0\nend", "  local count = 0\n\
    \  local a = {}\n  for i in (1 .. n) do\n    local k = (i * i) - i + 1\n    a[i]\
    \ = k\n    if i > 1 then\n      k = a[i-1] + a[i]\n      if ((k == 3) and a[i]\
    \ % 3 == 0) then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "  local a = {}\n  for i = 1, n do\n    table.insert(a, i * i -\
    \ i + 1)\n  end\n  return #a \nend", "    local a = {}\n    for i = 1, n do\n\
    \        local n = i * i - i + 1\n        table.insert(a, n)\n    end\n    local\
    \ num = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k\
    \ = j + 1, n do\n                if i + j + k == n then\n                    num\
    \ = num + 1\n                end\n            end\n        end\n    end\n    return\
    \ num\nend", "    if n < 1 then\n        return nil\n    end\n    local ret =\
    \ 0\n    local a = {}\n    local p = 1\n    local q = n - 1\n    while q > 0 do\n\
    \        local r = math.floor(math.sqrt(q * p))\n        local tmp = q - r * p\n\
    \        if tmp > 0 then\n            a[#a + 1] = tmp\n        end\n        q\
    \ = r\n        p = p + r\n    end\n    for i = 1, #a do\n        if a[i] + a[#a\
    \ - i + 1] * 2 > 0 then\n            ret = ret + 1\n        end\n    end\n   \
    \ return ret\nend", "\tlocal a = {}\n\ta[1] = n\n\tlocal m = 1\n\tfor i = 2, n\
    \ do \n\t\ta[i] = a[i] * a[i-1] - i + 1 \n\t\tm = m % a[i]\n\tend\n\treturn m\
    \ % 3\nend", "  local a = {}\n  local count = 0\n  for i = 1, n do\n    for j\
    \ = 1, n do\n      local k = n\n      if j > i then\n        k = j\n        j\
    \ = i\n      end\n      \n      if i == j then\n        count = count + 1\n  \
    \    else\n        if a[i] and a[j] and a[k] and (not (i + j + k) % 3) then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "   local a = {}\n   for i = 1, n do\n      local x = i * i - i\
    \ + 1\n      a[i] = x\n   end\n   local i = 0\n   local max_triple_num = 1\n \
    \  while i < n do\n      local x = a[i]\n      for j = i+1, n do\n         local\
    \ y = a[j]\n         local z = a[j] + a[k]\n         if x < y then\n         \
    \   if x > z then\n               a[k] = z\n               local triples_num =\
    \ max_triple_num - 2\n               if triples_num >= 0 then\n              \
    \    a[i] = x\n                  a[j] = y\n                  a[k] = z\n      \
    \            return triples_num\n               end\n               a[k] = z\n\
    \               return max_triple_num\n            else\n               a[j] =\
    \ y\n               a[k] = z\n               return max_triple_num\n         \
    \   end\n         end\n      end\n      i = i + 1\n      max_triple_num = max_triple_num\
    \ + 1\n   end\n   return 0\nend\nprint(get_max_triples(5))", "    local a = {}\n\
    \    for i = 1, n do a[i] = i * i - i + 1 end\n    local count = 0\n    for i\
    \ = 1, n do\n        local j = i - 1\n        for k = i - 1, i, n do\n       \
    \     if a[i + j] % 3 == 0 then\n                count = count + 1\n         \
    \       break\n            end\n        end\n    end\n    return count\nend",
  "    local a = {}\n    for i = 1, n do\n        table.insert(a, i * i - i + 1)\n\
    \    end\n    local count = 0\n    for i = 1, n do\n        local j = i - 1\n\
    \        for k = 1, n do\n            if i == k then\n                count =\
    \ count + 1\n                break\n            end\n            local a = a[i]\
    \ + (a[j] - a[k]) * 3\n            if a % 3 == 0 then\n                count =\
    \ count + 1\n                break\n            end\n            j = k - 1\n \
    \       end\n    end\n    return count\nend", "   local a = {}\n   local count\
    \ = 0\n   for i in ipairs(n) do\n     a[i] = i * i - i + 1\n     count = count\
    \ + 1\n   end\n   return count\nend", "  assert(n >= 1, 'Number of elements in\
    \ a must be at least 1')\n  local res = 1\n  local a = terralib.newlist()\n  local\
    \ v = terralib.newsymbol(int, \"v\")\n  local k = terralib.newsymbol(int, \"k\"\
    )\n  local i = terralib.newsymbol(int, \"i\")\n  repeat\n    a:insert(i * i -\
    \ i + 1)\n    i = i + 2\n  until i > n\n  -- print(string.format('%x %x %x', v,\
    \ k, i))\n  for i = 1, n do\n    v = a[i] / 3\n    k = a[i] - a[v] - a[k]\n  \
    \  if v < i && k < i then\n      res = res + 1\n    end\n  end\n  return res\n\
    end", "  local table = {}\n  for i = 1, n do\n    table[i] = i * i - i + 1\n \
    \ end\n  local triples = 0\n  for i, j, k in pairs(table) do\n    if i < j < k\
    \ then\n      triples = triples + 1\n    end\n  end\n  return triples\nend", " \
    \ if n == 0 then\n    return 1\n  end\n  if n == 1 then\n    return 1\n  end",
  "\tlocal a = {}\n\tfor i = 1, n do\n\t\tlocal j = i\n\t\twhile j <= n do\n\t\t\t\
    local k = j + 1\n\t\t\twhile k < n do\n\t\t\t\ta[i] = i * i - i + 1\n\t\t\t\t\
    a[j] = i * i - j + 1\n\t\t\t\ta[k] = i * i - k + 1\n\t\t\t\tj = k\n\t\t\t\tk =\
    \ k + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal count = 0\n\tlocal a1 = a[1]\n\
    \tlocal a2 = a[2]\n\tlocal a3 = a[3]\n\tlocal a4 = a[4]\n\tlocal a5 = a[5]\n\t\
    \n\tif a1 % 3 == 0 and a2 % 3 == 0 and a3 % 3 == 0 and a4 % 3 == 0 and a5 % 3\
    \ == 0 then\n\t\tcount = count + 1\n\tend\n\t\n\treturn count\nend", "    if n\
    \ < 0 then\n        return nil\n    end", "    local a = {}\n    for i = 1, n\
    \ do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            for k = 1, n do\n            \
    \    if i < j < k then\n                    count = count + 1\n              \
    \      local t1 = a[i] + a[j] + a[k]\n                    if t1 % 3 == 0 then\n\
    \                        return count\n                    end\n             \
    \   end\n            end\n        end\n    end\nend", "    local a = {}\n    for\
    \ i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local num_triples =\
    \ 0\n    for i = 1, n do\n        for j = 1, n do\n            for k = 1, n do\n\
    \                if i < j and j < k then\n                    num_triples = num_triples\
    \ + 1\n                    if a[i] + a[j] + a[k] ~= 0 then\n                 \
    \       num_triples = num_triples - 1\n                        break\n       \
    \             end\n                end\n            end\n        end\n    end\n\
    \    return num_triples\nend", "  assert(type(n) == \"number\")\n  assert(n >=\
    \ 1)\n  local a = {}\n  for i = 1, n do\n    table.insert(a, i * i - i + 1)\n\
    \  end\n  for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n\
    \        if a[i] < a[j] and\n          a[i] < a[k] and\n          a[j] < a[k]\
    \ then\n          return 1\n        end\n      end\n    end\n  end\n  return 0\n\
    end", "\tlocal a = {}\n\tfor i=1, n do\n\t\ta[i] = i * i - i + 1\n\tend", "  \
    \  local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   for k = 1, n do\n                if i ~= j and j ~= k and k ~= i then\n  \
    \                  count = count + a[i + j + k]\n                end\n       \
    \     end\n        end\n    end\n    return count\nend", "  local a = {}\n  for\
    \ i = 1, n do\n    for j = 1, i do\n      local c = a[j]\n      if c then\n  \
    \      c = c + 2\n        if c % 3 == 0 then\n          a[j] = (c - 1) // 3\n\
    \          break\n        end\n      else\n        a[j] = (i * i - i) + 1\n  \
    \      break\n      end\n    end\n  end\n  local triples = 0\n  for i = 1, n do\n\
    \    local c = a[i]\n    if c then\n      local t = a[i + 1]\n      local k =\
    \ a[i + 2]\n      if t then\n        if k then\n          triples  = triples +\
    \ c + t + k\n        end\n      else\n        if k then\n          triples  =\
    \ triples + c + k\n        end\n      end\n    end\n  end\n  return triples\n\
    end", "  -- Write your code here.\n  assert(n>0)\n  local a = Array.new(n)\n \
    \ local count = 0\n  for i=1, n do \n    a[i] = i * i - i + 1\n    count = count\
    \ + 1\n  end\n  for i=1, n do \n    local j = 1\n    while j < n and a[i] + a[j]\
    \ + a[j] < 3*(n-i) do\n      j = j + 1\n    end\n    if j > 1 then \n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local a = {}\n    for\
    \ i = 1, n do\n        table.insert(a, i * i - i + 1)\n    end\n    for i = 1,\
    \ n do\n        for j = 1, n do\n            if j < i then \n                continue\n\
    \            end\n            if i * i + i + a[j] * a[j] < i * i * i + i * a[j]\
    \ then\n                return j\n            end\n        end\n    end\n    return\
    \ n\nend", "  local arr = {i=1}\n  repeat\n    table.insert(arr,i*i-i+1)\n   \
    \ i = i*i\n  until i > n\n  return #arr\nend", "    local a = {}\n    for i =\
    \ 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count = 0\n    local\
    \ i = 1\n    while i <= n do\n        local j = i\n        while j > 0 and a[j]\
    \ == 0 do\n            j = j - 1\n        end\n        local k = i\n        while\
    \ k < n and a[k] == 0 do\n            k = k + 1\n        end\n        if j < k\
    \ then\n            if a[j] + a[k] % 3 == 0 then\n                count = count\
    \ + 1\n            end\n            i = j + 1\n        else\n            i = k\
    \ + 1\n        end\n    end\n    return count\nend", "  if n==0 then\n    return\
    \ 0\n  end", "    local tableA = {}\n    for i = 1, n do\n        tableA[i] =\
    \ i * i - i + 1\n    end\n    local count = 0\n    local i = 0\n    local j =\
    \ 1\n    local k = 2\n    while i < n and j < n and k < n do\n        if tableA[i]\
    \ < tableA[j] and tableA[i] < tableA[k] then\n            count = count + 1\n\
    \            i = i + 1\n        end\n        if tableA[j] < tableA[k] and tableA[j]\
    \ < tableA[i] then\n            count = count + 1\n            j = j + 1\n   \
    \     end\n        if tableA[k] < tableA[i] and tableA[k] < tableA[j] then\n \
    \           count = count + 1\n            k = k + 1\n        end\n    end\n \
    \   return count\nend", "  local a = {}\n  for i = 1, n do\n    for j = i + 1,\
    \ n do\n      a[i] = i * i - i + 1;\n    end\n  end\n  local m = math.max(a.i,\
    \ a[j], a[k])\n  while m % 3 == 0 and m < n do\n    i = i + 1\n    j = j + 1\n\
    \    k = k + 1\n    m = math.max(a.i, a[j], a[k])\n  end\n  return n * (n - 1)\
    \ / 2\nend", "  local a = IntArray(n)\n  -- Write your code here.\n  -- a[0] =\
    \ 1, a[1] = 2, a[2] = 4, a[3] = 6, a[4] = 8, a[5] = 10\n  -- return 0\n  return\
    \ 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
