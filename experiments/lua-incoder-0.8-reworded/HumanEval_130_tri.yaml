name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a table of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- {1,\
  \ 3, 2, 8}\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local results = {}\n  if n <= 2 then \n    results[1], n\n  else\n\
    \    local first = 2\n    local second = 1 + second / 2\n    for _ = 1, n do\n\
    \      local last = first\n      first = second\n      second = last + first\n\
    \      results[#results + 1] = second\n    end\n  end\n  return results\nend\n\
    print(table.concat(tri(3), \",\"))", "  local table = {}\n  if n == 0 then\n \
    \   return table\n  end\n  if n == 2 then\n    table[1] = 3\n    table[2] = 8\n\
    \    return table\n  end\n  table.insert(table, tri(n - 1))\n  table.insert(table,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1))\n  return table\nend", "\tlocal function\
    \ fib(n,k1,k2)\n\t\tlocal t = {}\n\t\tlocal a,b = 0,1\n\t\trepeat\n\t\t\ttable.insert(t,a)\n\
    \t\t\ta,b = b,a+b\n\t\tuntil k2 ~= n\n\t\tk1,k2 = k2,k1+k2\n\t\treturn t\n\tend",
  "\t-- Your code here\n\tlocal table = {}\n\tif n == 0 then return table end\n\t\
    local a = n - 1\n\tlocal b = n - 2\n\tlocal c = n + b\n\tfor i = 1, n + 1 do\n\
    \t\ttable[i] = a\n\t\ta = b\n\t\tb = c\n\t\tc = a + b\n\tend\n\treturn table\n\
    end", "  if n < 0 then return end\n  if n == 0 then return {} end\n  if n == 1\
    \ then\n    local result = {}\n    for i = 1, (n + 1) do \n      result[i] = i\n\
    \    end\n    return result\n  end\n  if n % 2 == 0 then\n    local result = {}\n\
    \    local t1 = n - 1\n    local t2 = n + 2\n    for i = 1, (n + 1) do\n     \
    \ result[i] = t1\n      t1 = t2\n      t2 = result[i]\n    end\n    return result\n\
    \  else\n    local result = {}\n    local t1 = n - 1\n    local t2 = n + 2\n \
    \   for i = 1, (n + 1) do\n      result[i] = t1 + t2\n      t1 = t2\n      t2\
    \ = result[i]\n    end\n    return result\n  end\nend\n  \nprint(tri(3)) -- [1,\
    \ 3, 2, 8]", "  local sequence = {}\n  if n == 0 then\n    sequence[1] = 1\n \
    \ else\n    if n % 2 == 0 then\n      sequence[#sequence + 1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else\n      sequence[#sequence + 1] = tri(n - 1) + tri(n\
    \ - 2)\n    end\n  end\n  return sequence\nend", "  -- Base case.\n  if n < 3\
    \ then\n    return {{1, n + 1}}\n  -- Recursive case.\n  elseif n % 2 == 0 then\n\
    \    return tri(n / 2) + {{1, n - 1}}\n  -- Odd case.\n  else\n    return tri(n\
    \ / 2) + tri(n - 1) + tri(n - 2) + {{1, n + 1}} \n  end\nend", "    local function\
    \ aux(n1, n2, n3)\n        if n1 == 0 then\n            return {n1, n2, n3}\n\
    \        else\n            n3 = n1 + n2 + n3\n            n1 = n2\n          \
    \  n2 = n3\n            return {n1, n2, n3}\n        end\n    end\n    return\
    \ aux(aux(aux(aux(0, 2, 3), 1, 2), 1, 3), 1, 4)\nend", "\tlocal t = {}\n\t\n\t\
    if n <= 1 then\n\t\treturn t\n\tend\n\t\n\tlocal i = 1\n\t\n\trepeat\n\t\ttable.insert(t,\
    \ i)\n\t\ti = i + n / 2\n\tuntil i <= n\n\t\n\tlocal a = t[#t]\n\tlocal b = t[#t+1]\n\
    \tlocal c = t[#t+2]\n\t\n\treturn t\nend", "    local i = 1\n    local fib1 =\
    \ 3\n    local fib2 = 2\n    local fib3 = 1\n    local table = {}\n    while i\
    \ <= n do\n        table.insert(table,fib3)\n        table.insert(table,fib2)\n\
    \        table.insert(table,fib1)\n        fib3 = fib1 + fib2 + fib3\n       \
    \ fib2 = fib1 + fib3\n        fib1 = fib3\n        i = i + 1\n    end\n    return\
    \ table\nend", "\t-- Tribonacci sequence is defined by:\n\t-- tri(1) = 3\n\t--\
    \ tri(n) = 1 + n / 2, if n is even.\n\t-- tri(n) =  tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1), if n is odd.\n\t-- For example:\n\t-- tri(2) = 1 + (2 / 2) = 2\n\
    \t-- tri(4) = 3\n\t-- tri(3) = tri(2) + tri(1) + tri(4)\n\t-- = 2 + 3 + 3 = 8\n\
    \tlocal a, b, c, d, x = {}, {}, {}, {}, {}\n\ta[1] = 3\n\tfor i=2,n do\n\t\tb[i]\
    \ = a[i-1] + i/2\n\t\tc[i] = a[i-2] + i/2\n\t\td[i] = a[i-3] + i/2\n\tend\n\t\
    for i=1,n+1 do\n\t\tx[i] = a[i] + c[i-1] + d[i-1]\n\tend\n\treturn x\nend", " \
    \   local a = {}\n    local function aux(n, i, v)\n        if n == 1 then\n  \
    \          a[i] = v\n        else\n            a[i] = aux(n - 1, i, v + n / 2)\n\
    \        end\n        return a[i]\n    end\n    return aux(n, n, 1)\nend", " \
    \ if n < 0 then return nil end\n  if n == 0 then return {1} end\n  if n == 1 then\n\
    \    return {3,1,1,1}\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  else\n    return tri(n - 2) + tri(n - 1) + tri(n + 2)\n\
    \  end\nend", "    local function recur(n, first)\n        if n <= 1 then\n  \
    \          return first\n        else\n            local second = first + 1\n\
    \            if n % 2 == 1 then\n                return recur(n - 1, second)\n\
    \            else\n                return recur(n - 2, second) + recur(n - 1,\
    \ first + 1)\n            end\n        end\n    end\n    return recur(n, 3)\n\
    end", "\tlocal result = {} \n\tlocal x = 1\n\tlocal y = 3\n\tlocal tmp = 0 \n\t\
    while n > 0 do\n\t\tif n & 1 then\n\t\t\ttmp = x + y\n\t\t\tresult[#result + 1]\
    \ = tmp\n\t\t\tx = tmp\n\t\telse\n\t\t\ttmp = y + x\n\t\t\tresult[#result + 1]\
    \ = tmp\n\t\t\ty = tmp\n\t\tend\n\t\tn = n >> 1\n\tend\n\treturn result\nend",
  "  local tri = { n}\n  \n  for i = 1, n do\n    tri[#tri + 1] = tri[#tri] + tri[#tri\
    \ + 1] + tri[#tri + 2]\n  end", "\tlocal t = {1, n + 1}\n\t\n\tfor i = 1, n do\n\
    \t\tt[i] = t[i - 1] + t[i - 2] + t[i - 3]\n\tend", "  local table = {}\n  table[1]\
    \ = math.floor(n/2)\n  if n%2==0 then\n    table[2] = 1 + n/2\n  else \n    table[2]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n  return table\nend", "    local\
    \ a = {}\n    for i=1,n+1 do\n        local f = i / 2\n        if f % 2 == 1 then\
    \ \n            table.insert(a, f)\n        else\n            table.insert(a,\
    \ f-1)\n            table.insert(a, f+2)\n        end\n    end\n    return a\n\
    end\n</cell>\n<text>\nTask:", "    local tri_tbl = {}\n    local fib_tbl = { 0,\
    \ 1, 1 }\n    local k = 2\n    while k <= n do\n        table.insert(tri_tbl,\
    \ fib_tbl[k])\n        if k % 2 == 0 then\n            table.insert(tri_tbl, fib_tbl[k\
    \ - 1])\n            table.insert(tri_tbl, fib_tbl[k - 2])\n        end\n    \
    \    k = k + 1\n    end\n    return tri_tbl\nend", "  local function fib(prev,\
    \ current, next)\n    local new_prev  = prev + current\n    local new_current\
    \ = current + next\n    local new_next  = next", "  -- base case\n  if n == 1\
    \ or n == 2 then\n    return { 1, 2, n }\n  end \n  -- recursive case\n  local\
    \ a = tri(n - 1) + tri(n - 2)\n  local b = tri(n - 3)\n  return { \n    tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + b,\n    tri(n - 1) + tri(n + 2) + a + b,\n\
    \    tri(n - 2) + tri(n + 1) + a + b,\n    tri(n + 1) + tri(n + 2) + a + b\n \
    \ }\nend", "    local function helper(m, n, m)\n        if n == 1 then\n     \
    \       local tn = m[1]\n            local r = {tn}\n            for k = 2, n\
    \ do\n                local tnn = tn + m[k]\n                table.insert(r, tnn)\n\
    \            end\n            return r\n        else\n            local tn = m[n]\n\
    \            local r = {tn}\n            for k = 1, n-1 do\n                local\
    \ tnn = tn + m[k] + m[k+1]\n                table.insert(r, tnn)\n           \
    \ end\n            return helper(m, n-1, tn+m[n-1])\n        end\n    end\n  \
    \  \n    local r = {m[1]}\n    return helper(m, n-1, m[n])\nend", "    if n ==\
    \ 0 then\n        return {}\n    end\n    if n == 1 or n == 2 then\n        return\
    \ {n}\n    end\n    local res = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    for\
    \ i = 1, n do\n        res[#res + 1] = res[i] + res[i + 1]\n    end\n    return\
    \ res\nend", "    local table = {1};\n    local last = 1;\n    local tri = 0;\n\
    \    repeat\n        table.insert(table, last);\n        last = last + 1;\n  \
    \  until last <= n\n    return table;\nend", "  if n == 0 then\n    return {0,\
    \ 1, 1}\n  elseif n == 1 then\n    return {0, 1}\n  else\n    local f1, f2 = tri(n\
    \ - 1), tri(n - 2)\n    return {f1[#f1 + 1] + f2[#f2 + 1]}\n  end\nend", "  local\
    \ result = {}\n  local n1 = 1\n  local n2 = 1\n  local n3 = 1\n  for i = 1, n\
    \ + 1 do\n    result[i - 1] = n1\n    n1 = n2 + n3\n    n2 = n3\n    n3 = n1 +\
    \ n2\n  end\n  return result\nend", "    local function tri_1(k)\n        if k\
    \ < 1 then return 0 end\n        return tri_1(k - 1) + tri_1(k - 2) + tri_1(k\
    \ + 2)\n    end\n    \n    local function tri_2(k)\n        if k < 1 then return\
    \ 0 end\n        return tri_2(k - 1) + tri_2(k - 2)\n    end", "    local results\
    \ = {}\n    local cache = {n}\n    local i = 1\n    while i <= n do\n        i\
    \ = i + 2 -- this is to not take the last number in the recursion \n        table.insert(results,\
    \ cache[i])\n        table.insert(results, cache[i-1])\n        table.insert(results,\
    \ cache[i-2])\n    end\n    return results\nend", "  -- base case\n  if n == 1\
    \ then\n    return setmetatable({}, {__index=function() return 1 end})\n  end\n\
    \  -- other cases\n  if n % 2 == 0 then\n    return setmetatable(tri(n-1) + tri(n-1),\
    \ {__index=function() return n end})\n  else\n    return setmetatable(tri(n-2)\
    \ + tri(n-1) + tri(n), {__index=function() return n end})\n  end\nend\nreturn\
    \ tri(n+1)", "  local table = {}\n  for i = 1, n + 1 do\n    table[i] = i\n  \
    \  table.insert(table, i / 2)\n    table.insert(table, i + 1)\n  end\n  return\
    \ table\nend", "  if n < 1 then return {} end\n  if n < 3 then\n    local ret\
    \ = {}\n    local i = 1\n    for i = 1, n do\n      ret[i] = i\n    end\n    return\
    \ ret\n  end\n  local ret = {}\n  local i = 1\n  for i = 1, n do\n    ret[i] =\
    \ i + 1\n  end\n  return ret\nend", "  local table = {}\n  local i = 1\n  local\
    \ j = 1\n  while i <= n do\n    table.insert(table, i)\n    j = j + 1 if i % 2\
    \ == 1 then\n      j = j + 1 \n    else \n      i = i + 1 \n    end\n  end\n \
    \ return table\nend", "    local fib = {}\n    local i, j, k\n    \n    for i\
    \ = 1, n + 1 do\n        fib[i] = i\n    end", "  -- Base case: when n is 1 or\
    \ 0, return an empty table\n  if n == 1 or n == 0 then\n    return setmetatable({},\
    \ {__index=function(t,i)return iend})\n  -- Base case: when n is odd, return only\
    \ the middle number\n  elseif n % 2 ~= 0 then\n    return { n / 2 + 1 }\n  --\
    \ Recursive case: n is even, get its two middle numbers\n  else\n    return setmetatable({\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) }, \n    {__index=function(t,i)\n     \
    \ local t1 = tri(n - 1) + tri(n - 2)\n      local t2 = tri(n + 1)\n      local\
    \ t = {}\n      t[i] = t1[i] + t2[i]\n      return t\n    end})\n  end\nend",
  "    local r\n    local n = 1\n    while n <= n do\n        r = r or 1\n       \
    \ local f = 1\n        if n % 2 == 0 then\n            f = 1 + n / 2\n       \
    \ else\n            f = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        end\n  \
    \      table.insert(r, f)\n        n = n + 1\n    end\n    return r\nend", " \
    \ local function tri_aux(n, acc)\n    acc[#acc+1] = n or acc[#acc]\n    if n ==\
    \ 1 then\n      return acc\n    end\n    tri_aux(n-1, acc)\n    tri_aux(n-2, acc)\n\
    \    tri_aux(n-3, acc)\n  end", "  local a\n  if n % 2 ~= 0 then\n    a = tri(n\
    \ - 1) + tri(n - 2)\n  else\n    a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\n\
    \  return a\nend", "   assert(n > 0, \"Invalid input. Input is n\")\n   local\
    \ a = { 1 }\n   for i = 2, n do\n      table.insert(a, a[i-1] + a[i-2])\n   end\n\
    \   return a\nend", "  if n < 2 then return {n} end\n  local tri = {}\n  tri[1]\
    \ = 3\n  for i = 1, n do\n    local a, b, c = tri[i - 1], tri[i - 2], tri[i -\
    \ 3]\n    tri[i - 1], tri[i - 2], tri[i - 3] = a + b, 2 * b, c + a\n  end\n  return\
    \ tri\nend", "    local table = {1,3,2}\n    if n <= 1 then \n        return table\n\
    \    else if n == 2 then\n        return {table[1],table[2],table[3],table[4],table[5],table[6],table[7]}\n\
    \    else\n        table[1] = table[1]+table[2]\n        table[2] = table[3]\n\
    \        table[3] = table[3] + table[4]\n        table[4] = table[3] + table[5]\
    \ \n        table[5] = table[6] + table[7]\n        table[6] = table[7] + table[2]\n\
    \        table[7] = table[6] + table[3]\n        table.insert(table,table[1],table[2],table[3],table[4],table[5],table[6],table[7])\n\
    \        return table\n    end\nend", "\tlocal t = {}\n\tlocal first = 1\n\tlocal\
    \ second = 1\n\tlocal third = 1\n\tif n % 2 == 0 then\n\t\tsecond = third\n\t\t\
    third = first + second\n\tend\n\tfor i = 2, n do\n\t\tlocal tt = third + second\n\
    \t\tthird = first\n\t\tfirst = second\n\t\tsecond = tt\n\t\tt[i] = tt\n\tend\n\
    \treturn t\nend", "  assert(n >= 1, 'n must be positive')\n  \n  local function\
    \ f(i, n)\n    if i <= n then return i end\n    if n == 1 then return i end\n\
    \    return f(i - 2, n) + f(i - 1, n - 1)\n  end\n  \n  return f(n, 3)\nend",
  "  -- Return Tribonacci sequence up to n.\n  if n < 0 then\n    return nil\n  elseif\
    \ n == 0 then\n    return { 1 }\n  elseif n == 1 then\n    return { 1 }\n  elseif\
    \ n == 2 then\n    return { 1, 1, 1 }\n  else\n    return { tri(n - 1) + tri(n\
    \ - 2) + tri(n + (n + 1) + 1) }\n  end\nend", "    local fib = {}\n    if n ==\
    \ 1 or n == 2 then\n        fib[1] = n\n        fib[2] = n + 1\n        fib[3]\
    \ = fib[2] + fib[1]\n        return fib\n    end\n    local i = 3\n    repeat\n\
    \        fib[i] = n\n        fib[i+1] = fib[i] + fib[i-1]\n        fib[i+2] =\
    \ fib[i+1] + fib[i]\n        i = i+3\n    until fib[i+3] == fib[i+1]\n    return\
    \ fib\nend", "    local tbl = {}\n    if n == 2 then\n        tbl[1] = 3\n   \
    \     tbl[2] = 1\n        return tbl\n    end\n    if n % 2 == 0 then\n      \
    \  tbl[1] = tri(n / 2) + tri((n % 2) + 1)\n    else\n        tbl[1] = tri((n %\
    \ 2) + 1) + tri(n / 2)\n    end\n    return tbl\nend", "  local table = {}\n \
    \ for i=1,n do\n    table[i] = math.floor((i+2)/3)\n  end\n  return table\nend",
  "    local a = {}\n    local i = 1\n    while i <= n do\n        if n % 2 == 0 then\n\
    \            table.insert(a, math.floor((n-1) / 2.0) + i)\n        end\n     \
    \   table.insert(a, math.floor((n-1) / 2.0) + i + 1)\n        i = i + 2\n    end\n\
    \    return a\nend", "  local function tri_inner(n, i, acc)\n    if n < i then\
    \ return end\n    if i == 1 then return acc[1] end\n    acc[i] = acc[i-1] + acc[i-2]\
    \ + acc[i-3]\n    tri_inner(n-1, i+1, acc)\n    acc[i] = acc[i-1] + acc[i-2] +\
    \ acc[i-3]\n  end\n  \n  local result = {1};\n  for i = 2, n do\n    local tmp_acc\
    \ = {};\n    tri_inner(n, i, tmp_acc)\n    table.insert(result, tmp_acc)\n  end\n\
    \  return result\nend", "    if n <= 0 then\n        return nil\n    end\n   \
    \ local function f(x)\n        if x <= 1 then\n            return x\n        end\n\
    \        return x+f(x-1)+f(x-2)\n    end\n    return f(4)\nend", "  local tri\
    \ = {}\n  local a, b, c = 1, 0, 1\n  while n ~= 0 do\n    local m = n % 2\n  \
    \  n = math.floor(n/2)\n    if m == 0 then\n      a = b\n      b = c\n      c\
    \ = (a + b + c) / 2\n    else\n      b = c\n      c = ((a + b + c) / 2) + a\n\
    \    end\n    table.insert(tri, n + 1) \n  end\n  return tri\nend", "    local\
    \ ret = {}\n    if n == 1 then\n        return {1}\n    end\n    local t = tri(n\
    \ / 2) + tri(n - 1) + tri(n / 2)\n    if n % 2 == 0 then\n        t = t + t\n\
    \    end\n    for _ = 1, n do\n        table.insert(ret, t)\n        t = (t +\
    \ t) / 2\n    end\n    return ret\nend", "    local function recur(n, a, b, c)\n\
    \        local num = a + b + c\n        if n == 0 then\n            table.insert(result,\
    \ num)\n        elseif n == 1 then\n            table.insert(result, num)\n  \
    \      else\n            recur(n - 1, a, c, num)\n            recur(n - 2, b,\
    \ a, num)\n        end\n    end\n    result = {1, 3, 2}\n    recur(n, 1, 2, 2)\n\
    \    return result\nend", "    local table = {} \n    local i = 1\n    while i\
    \ < n do\n        table.insert(table, i)\n        i = i + 2\n    end\n    return\
    \ table\nend", "  -- Base cases: 0 and 1\n  if n == 1 or n == 2 then\n    return\
    \ { 1 }\n  end", "  local fib = {}\n  fib[1] = 3\n  fib[2] = fib[1] + fib[2]\n\
    \  for i = 3, n do\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n  end\n\
    \  return fib\nend", "  local i\n  local t0 = 1\n  local t1 = 1\n  local t2 =\
    \ 1\n  local t3 = 1\n  for i = 2, n do\n    t0 = t1\n    t1 = t2\n    t2 = t3\n\
    \    t3 = t0 + t1 + t2\n  end\n  local array = {}\n  for i = 1, n + 1 do\n   \
    \ array[i] = t3\n    t3 = t3 + t2 + t1\n  end\n  return array\nend", "\tif n ==\
    \ 1 then return 3 end\n\tif n <= 2 then return 1 end\n\treturn 1 + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3) -- n / 2 because n = n-1+n-2+...\nend", "  local res\
    \ = {}\n  if n >= 2 then\n    res[1] = tri(n - 1) + tri(n - 2)\n    if n%2 ==\
    \ 1 then\n      res[2] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\n  end\n\
    \  return res\nend", "  if n == 1 then\n    return {1, 1}\n  elseif n == 2 then\n\
    \    return {{1, 1}, {1, 0}}\n  elseif n > 2 then\n    local r1, r2 = tri(n /\
    \ 2), tri(n - n / 2)\n    return { r1[1] + (r1[2] + r1[1]) * r2.[1], r1[2] + (r1[1]\
    \ + r1[2]) * r2.[2] }\n  else\n    return {1, 0}\n  end\nend", "  local i = {}\n\
    \  local f\n  if n == 1 then\n    i[1] = 3\n  elseif n == 2 then\n    i[2] = 1\n\
    \    i[3] = 2\n  elseif n % 2 == 0 then\n    f = n-1\n    while f > 0 do\n   \
    \   i[f] = i[f-1] + i[f-2]\n      f = f / 2\n    end\n    i[math.max(0,n/2)] =\
    \ i[n/2] + i[n/3] + i[n/4]\n  else\n    f = n-1\n    while f > 0 do\n      i[f]\
    \ = i[f-1] + i[f-2]\n      f = f + 1\n    end\n    i[math.max(0,n/2)] = i[n/2]\
    \ + i[n/3] + i[n/4]\n  end\n  return i\nend", "    local t1 = (n % 2)\n    local\
    \ t2 = (n / 2)\n    local t3 = t1\n    local t4 = (t3 +\n\tt2 + t2)\n    local\
    \ t5 = (t4 +\n\tt3 + t4)\n    local t6 = (t5 +\n\tt4 + t5)\n    local t7 = (t6\
    \ +\n\tt5 + t6)\n    local t8 = (t7 +\n\tt6 + t7)\n    local t9 = (t8 +\n\tt7\
    \ + t8)\n    local t10 = (t9 +\n\tt8 + t9)\n    local t11 = (t10 +\n\tt9 + t10)\n\
    \    return t11, t11\nend", "   if n == 0 then\n      return {1};\n   end\n  \
    \ if n == 1 then\n      return {1};\n   end\n   if n == 2 then\n      return {3,\
    \ 8};\n   end\n   local ans = {tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)};\n\
    \   return ans;\nend", "    if n == 0 then\n        return {1, 3, 2, 8}\n    elseif\
    \ n == 1 then\n        return {1, 2, 3, 4}\n    elseif n == 2 then\n        return\
    \ {1, 3, 3, 5}\n    elseif n % 2 == 0 then\n        return {tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3), tri(n - 1)}\n    else\n        return {tri(n - 2) + tri(n\
    \ - 3), tri(n - 1) + tri(n - 2)}\n    end\nend", "  if n <= 0 then return nil\
    \ end\n  local a = {}\n  for i = 1, n do\n    table.insert(a, 3)\n    table.insert(a,\
    \ 1 + n / 2)\n    table.insert(a, 1 + n / 2)\n    table.insert(a, 1 + n / 2)\n\
    \  end\n  return a\nend", "  local table = {}\n  local i = 1\n  while i <= n do\n\
    \    table.insert(table, i)\n    table.insert(table, i - 1)\n    table.insert(table,\
    \ (i - 1) / 2 + i)\n    i = i + 1\n  end\n  return table\nend", "\tlocal res =\
    \ {}\n\tlocal i = 1\n\tlocal sum = 1\n\trepeat\n\t\tlocal t = i * i + 1\n\t\t\
    i = i + 2\n\t\tsum:add(t)\n\tuntil sum < n\n\tlocal i = 1\n\tfor i=1, n do\n\t\
    \tres[i] = i\n\t\ti = i + 1\n\tend\n\treturn res\nend", "  if n < 3 then\n   \
    \ return nil\n  end\n  \n  local ans = {n+1, 2*n+1}\n  \n  for i = 1, n do\n \
    \   table.insert(ans, ans[i]+ans[i+1])\n  end\n  return ans\nend", "  local tri_table\
    \ = {}\n  tri_table[1] = 3\n  if n % 2 == 0 then \n    tri_table[2] = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  else \n    tri_table[2] = tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)\n  end\n  return tri_table\nend", "  local table = {}\n  local\
    \ sum = 0\n  \n  for i = 1,n do \n    sum = sum + i / 2\n    table.insert(table,\
    \ sum)\n  end", "    local function helper(tri, cur)\n        if cur < n then\n\
    \            helper(tri, cur + 1)\n            helper(tri, cur + 2)\n        end\n\
    \    end\n    helper({}, 0)\n    return table.concat(tri)\nend", "  -- Tribonacci\
    \ sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34...\n  -- Fibonacci sequence: 0, 1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34...\n  local table = {}\n  local function func(a, i,\
    \ n)\n    return a + (i / 2) / n\n  end\n  \n  -- Base cases\n  if n == 0 then\n\
    \    table[1] = 1\n  elseif n == 1 then\n    table[2] = 1\n  elseif n == 2 then\n\
    \    return table\n  end\n  \n  -- Recursive case\n  for i = 2, n do\n    local\
    \ v = func(n, i - 1, i)\n    table.insert(table, v)\n  end\n  return table\nend\n\
    </cell>\n<text>\nProblem 3\nThe following iterative sequence is defined for the\
    \ set of positive integers:\n$n{n+1} = \\sum{k = 2}^{\\infty} \\frac{n+2}{k^2}$\n\
    It can be seen that the formula will produce an ever-growing sequence of \nvalues,\
    \ starting with $n_{0} = 1$ and $n_{n+1} = \\infty$. \nIn this Kata, you are again\
    \ given a non-negative integer $n$. \nA second non-negative integer $k$ is provided,\
    \ and you should return the value of $n{n+1}$ given \nthis value of $n$ and $k$.\
    \ \nThe formula will produce an ever-growing sequence of values, starting with\
    \ $n_{0} = 1$ and $n_{n+1} = \\infty$.", "    local tri_table = {}\n    if n ==\
    \ 1 then\n        tri_table[1] = 1\n        return tri_table\n    end\n    local\
    \ one = math.ceil((math.sqrt(5) + 1) / 2)\n    local two = one + one\n    local\
    \ three = one + two + one\n    local four = three + two + three\n    tri_table[1]\
    \ = one\n    tri_table[2] = two\n    tri_table[3] = three\n    tri_table[4] =\
    \ four\n    return tri_table\nend", "    local a = {}\n    for i=1,n do\n    \
    \    a[i] = ((i-1)/2+2+(i+2)/2) \n    end\n    return a\nend\nprint(tri(3))",
  "  -- Base case.\n  if n <= 1 then return n end\n  -- Recursion case.\n  local a\
    \ = tri(n - 1)\n  local b = tri(n - 2)\n  local c = tri(n - 3)\n  -- Return first\
    \ number in the sequence (first n numbers).\n  return {a, b, c}\nend", "  local\
    \ sums = {[1] = 3, [2] = 1, [3] = 2, [4] = 8}\n  for i = 1, n do\n    sums[i]\
    \ = sums[i + 1] + sums[i + 2]\n  end\n  return sums\nend", "    if n >= 3 then\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2)\
    \ + tri(n + 3)\n    else\n        return n\n    end\nend", "  local function helper(a,\
    \ b, c, d, h)\n    local c = a + b\n    local d = c + h\n    local f = a + c\n\
    \    local g = d + h\n    return d, f, g, c + h\n  end", "  if n == 0 then\n \
    \   return {1}\n  else\n    if n == 1 or n == 2 then\n      return {1}\n    else\n\
    \      local t = tri(n - 1) + tri(n - 2) + tri(n - 3)\n      if math.mod(n, 2)\
    \ ~= 0 then\n        t = t + tri(math.mod(n, 2) + 1)\n      end\n      return\
    \ t\n    end\n  end\nend", "    if n == 2 then return {1, 3} end\n    local n1\
    \ = tri(n-1)\n    local n2 = tri(n-1)\n    local n3 = tri(n+1)\n    return n1\
    \ + n2 + n3\nend", "    local t0 = 1\n    local t1 = 1\n    local t2 = 2\n   \
    \ local i = 3\n    local tri_table = {}\n    while i <= n do\n        t0 = t1\n\
    \        t1 = t2\n        t2 = t1 + t2\n        tri_table[i] = t0\n        i =\
    \ i + 2\n    end\n    return tri_table\nend", "    local a = {3, 1}\n    for i\
    \ = 2, n do\n        a[i] = a[i] + a[i] + a[i - 1]\n    end\n    return a\nend",
  "    local ret = {1, 1, 1}\n    for i = 1, n do\n        table.insert(ret, ret[#ret]\
    \ + ret[#ret] + ret[#ret] + 1)\n    end\n    return ret\nend", "    local a =\
    \ {}\n    for i = 1, n + 1 do\n        if n ~= 0 and n % 2 == 0 then a[i] = tri(n\
    \ - 1) + tri(n - 2) end\n        a[i] = a[i] or a[i + 1]\n    end\n    return\
    \ a\nend", "  assert(n >= 1, \"n must be a positive integer\")\n  \n  local table\
    \ = {}\n  local f3 = function(n)\n    return n / 3.0\n  end\n  local f2 = function(n)\n\
    \    return n / 2.0\n  end\n  local f1 = function(n)\n    return n\n  end\n  \n\
    \  if n <= 1 then \n    table[1] = n\n    return table\n  else\n    local a =\
    \ tri(n-1)\n    local b = f1(n)\n    local c = tri(n-1)\n    local d = f2(n)\n\
    \    table[1] = f1(a+b)\n    table[2] = f2(a+c)\n    table[3] = f3(a+c)\n  end\n\
    \  return table\nend", "  -- Base case\n  if n < 3 then\n    return { 1, 3 }\n\
    \  end", "   if n == 1 then\n      return { 1 }\n   elseif n == 2 then\n     \
    \ return { 3, 2, 1 }\n   else\n      local tri_num = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n      return tri_num, tri_num\n   end\nend", "\t-- base case\n\t\
    if n == 1 then return {1}; end\n\t-- recursive case\n\treturn tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1) + 1\nend", "  if n < 3 then\n    return {}\n  end\n  \n  --\
    \ Tribonacci sequence is defined recursively as:\n  --    tri(1) = 3\n  --   \
    \ tri(n) = 1 + n / 2, if n is even.\n  --    tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n  -- And this formula is called T(n, k) for k in\
    \ {1, n}. T(n, 1) is always \n  -- defined, so we need to check whether k is 1\
    \ or not, which means whether \n  -- n is even or odd. \n  -- Therefore we need\
    \ a double loop to get the job done.\n  local function tri_even(n)\n    local\
    \ ret = {}\n    local k = 1\n    while k + 1 <= n do\n      k = k + 1\n      ret[#ret\
    \ + 1] = k\n    end\n    -- if n is odd, k is one more than the smallest number\n\
    \    -- k + 1 is the smallest number + 1\n    -- we add k + 1 because we start\
    \ from k because k is 1 bigger than n\n    k = k + 1\n    for i = 1, n do\n  \
    \    k = k + 1\n      ret[#ret + 1] = k\n    end\n    return ret\n  end\n  \n\
    \  -- Tribonacci sequence is defined recursively as:\n  --    tri(1) = 3\n  --\
    \    tri(n) = 1 + n / 2, if n is even.\n  --    tri(n) =  tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), if n is odd.\n  -- And this formula is called T(n, k) for k\
    \ in {1, n}. T(n, 1) is always \n  -- defined, so we need to check whether k is\
    \ 1 or not, which means whether \n  -- n is even or odd. \n  -- Therefore we need\
    \ a double loop to get the job done.\n  local function tri_odd(n)\n    local ret\
    \ = {}\n    local k = 1\n    while k + 1 <= n do\n      k = k + 1\n      ret[#ret\
    \ + 1] = k\n    end\n    -- if n is odd, k is one less than the smallest number\n\
    \    -- k - 1 (smallest number + 1) is the smallest number - 1\n    -- we add\
    \ k - 1 because we start from k because k is 1 bigger than n\n    k = k - 1\n\
    \    for i = 1, n do\n      k = k - 1\n      ret[#ret + 1] = k\n    end\n    return\
    \ ret\n  end\n  \n  -- if n is even\n  return tri_even(n)\n  \n  -- if n", " \
    \ if n < 1 then return nil end\n  if n == 1 then return 1 end\n  local f1 = tri(n\
    \ - 1)\n  local f2 = tri(n - 2)\n  local f3 = tri(n - 3)\n  return f1 + f2 + f3\n\
    end", "    local seq = {}\n    local n1 = 1\n    local n2 = 1\n    local n3 =\
    \ 1\n    while n2 < n do\n        n1 = n2\n        n2 = n3\n        n3 = n1 +\
    \ n2 + n3\n        table.insert(seq, n3)\n    end\n    return seq\nend", "\tassert(type(n)\
    \ == \"number\", \"tri(n) requires a number\")\n\tassert(n >= 0, \"tri(n) requires\
    \ a non-negative number\")\n\t\n\tif n == 0 then\n\t\treturn {1, 3, 2, 8}\n\t\
    elseif n == 1 then\n\t\treturn {1, 1, 3, 5}\n\telseif n == 2 then\n\t\treturn\
    \ {1, 2, 3, 4}\n\tend", "    local tri = []\n    tri[1] = math.min(math.max(0,\
    \ n), n+2)\n    for i = 2, n do\n        local j = math.max(tri[i-2] + tri[i-1],\
    \ math.min(n+i-2, n+i))\n        tri[i] = j\n    end\n    return tri\nend", " \
    \ -- Base cases.\n  if n == 1 then return { 1 }\n  if n == 2 then return { 1,\
    \ 3 }\n  if n == 0 then return {}", "  local t = {}\n  local fib = function(n)\
    \ return n and tri(n-1) + tri(n-2) end\n  repeat\n    t[#t + 1] = fib(n)\n   \
    \ n = n - 1\n  until n == 1\n  return t\nend", "\tlocal sum = 0\n\tlocal a, b,\
    \ c = 1, 1, 2\n\tlocal limit = math.ceil(math.sqrt(n))\n\tfor i=1, limit, 2 do\n\
    \t\tlocal new_a = a + b\n\t\tlocal new_b = a + c\n\t\tlocal new_c = b + c\n\t\t\
    local new_sum = new_a + new_b + new_c\n\t\tlocal new_a = b\n\t\tlocal new_b =\
    \ c\n\t\tlocal new_c = new_sum\n\t\tsum = sum + new_sum\n\t\ta = b\n\t\tb = c\n\
    \t\tc = new_sum\n\tend\n\treturn sum\nend", "  local t = {1} -- create empty table\n\
    \  local i = 1 -- start with first value\n  while i <= n do -- loop until you\
    \ get to n\n    table.insert(t, i) -- insert i at end of table\n    i = i + 2\
    \ -- increase i by 2\n  end\n  return t\nend", "  if n <= 0 then\n    return {}\n\
    \  end\n  local one = {}\n  local two = {}\n  local three = {}\n  one[1] = one[2]\
    \ = one[3] = 1\n  two[1] = two[2] = two[3] = 2\n  if n % 2 == 0 then\n    three[1]\
    \ = three[2] = three[3] = three[n]\n  else\n    three[1] = three[2] = three[3]\
    \ = three[n-1] + three[n-2]\n  end\n  local total = {}\n  total[1] = two[1]\n\
    \  total[2] = three[1]\n  for i = 4, n, 2 do\n    total[i] = total[i-1] + total[i-2]\
    \ + total[i-3]\n  end\n  return total\nend", "\t-- Base cases.\n\tif n == 1 then\n\
    \t\treturn {1, 1, 1}\n\tend\n\tif n == 2 then\n\t\treturn {1, 2, 1}\n\tend\n\t\
    -- Recursive case.\n\tlocal a, b, c = tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1), tri(n + 2)\n\t\n\treturn a, b, c\nend", "  local\
    \ arr = {}\n  local i = 2\n  while i <= n do\n    table.insert(arr, i)\n    i\
    \ = i + 2\n  end\n  return arr\nend", "  local fib1 = 3\n  local fib2 = fib1\n\
    \  local fib3 = fib1 + fib2\n  \n  if n > 0 then\n    local tmp1 = fib3\n    fib3\
    \ = fib1 + fib2\n    fib2 = fib1\n    fib1 = tmp1\n  end\n  return fib3\nend",
  "  if n == 1 then\n    return 1\n  elseif n == 2 then\n    return 3\n  else\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\nend", "  local tbl = table.getn(tritri(n))\n\
    \  for i=1,#tbl do tbl[i] = tbl[i] + tbl[i-1] end\n  return tbl\nend", "  local\
    \ result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result, tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1))\n    i = i + 1\n  end\n  return result\nend",
  "    if n == 1 then\n        return {1};\n    elseif n == 2 then\n        return\
    \ {1, 3};\n    elseif n%2 == 1 then\n        local tri = tri(n - 1);\n       \
    \ local sum = 0;\n        for i = 1, (n - 1) do\n            sum = sum + tri[i];\n\
    \        end\n        return {sum, sum + tri[n]};\n    else\n        local tri\
    \ = tri(n - 1);\n        local sum = 0;\n        for i = 1, (n - 1) do\n     \
    \       sum = sum + tri[i];\n        end\n        local one = tri[n];\n      \
    \  return {one, one, sum + one};\n    end\nend", "\t-- Base case.\n\tif n == 1\
    \ then\n\t\treturn {1, 1}\n\tend", "  if n == 1 then\n    return 1\n  elseif n\
    \ == 0 then\n    return {}\n  elseif n < 0 then\n    return {}\n  elseif n % 2\
    \ == 0 then\n    local t = {}\n    t[1] = 1 + tri(n - 1)\n    t[2] = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    return t\n  else\n    local t = {}\n    t[1]\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    t[2] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    return t\n  end\nend", "    local lst = {}\n    lst[1] = 1 --\
    \ The base case for the recursion\n    lst[2] = 2 -- The recursion case\n    for\
    \ i = 3, n + 1 do\n        lst[i] = lst[i - 2] + lst[i - 3]\n    end\n    return\
    \ lst\nend", "  local tab = {}\n  local i = 1\n  while i <= n do\n    table.insert(tab,\
    \ i)\n    i = i + 2 \n  end\n  return tab\nend", "    local tbl = {}\n    local\
    \ limit  = #tbl\n    local result = 0\n    \n    for i = 1, n do\n        if i\
    \ % 2 == 0 then\n            tbl[i] = i + 1\n            result = result + 1\n\
    \        else\n            if i > limit then limit = i + 1 end\n            tbl[i]\
    \ = tbl[i - 2] + tbl[i - 1] + tbl[i - 3]\n        end\n    end\n    \n    return\
    \ tbl, limit\nend", "  local table = {}\n  \n  for i = 1,n do\n    if i % 2 ==\
    \ 0 then\n      table.insert(table,(i % 3) + 1)\n    else\n      table.insert(table,((i\
    \ + 2) % 3) + 2)\n    end\n  end", "\tlocal a, b = 0, 1\n\tlocal tbl = {}\n\t\
    for i = 1, n do\n\t\tlocal k = a\n\t\ta = b\n\t\tb = k + b + a + b\n\t\ttbl[i]\
    \ = b\n\tend\n\treturn tbl\nend", "    local table = {1};\n    if n > 1 then\n\
    \        for i = 2, n do\n            table.insert(table,\n                  \
    \        i + i + math.floor((i - 1) / 2));\n        end\n    end\n    return table;\n\
    end", "  local function tri(m)\n    if m == 0 then\n      return {}\n    end\n\
    \    local a = tri(m - 1)\n    local b = tri(m - 2)\n    local c = m + m + m +\
    \ m + m + 1\n    return a..b..c\n  end\n  return tri(n)\nend", "  if n == 2 or\
    \ n == 3 then\n    return 1\n  elseif n % 2 == 0 then\n    return tri(n / 2) +\
    \ tri(n / 2) + tri(n / 2)\n  else\n    return tri(n / 2) + tri(n / 2) + tri(n\
    \ / 2) + tri(n / 2)\n  end\nend", "    local a = nil\n    local b = nil\n    local\
    \ c = nil\n    local d = nil\n    if n <= 0 then\n        return nil\n    elseif\
    \ n == 1 or n == 2 then\n        a = 1\n        b = 1\n        c = 2\n       \
    \ d = 1\n    else\n        a = tri(n - 1)\n        b = tri(n - 2)\n        c =\
    \ tri(n + 1)\n        d = a + b + c\n    end\n    return a, b, c, d\nend", " \
    \ local a, b, c = 1, 1, 0\n  local t = {n}\n  while n ~= 0 do\n    a, b = b, a\
    \ + b\n    table.insert(t, a)\n    table.insert(t, b)\n    n, c = c, n - 1\n \
    \ end\n  return t\nend", "    if n == 1 then \n        return{1};\n    end\n \
    \   local ret = {}\n    if n % 2 == 0 then \n        ret = {1 + n / 2, n}\n  \
    \  end\n    local last = n - 1;\n    for i=last, 1, -1 do\n        ret[i] = tri(i\
    \ - 1) + tri(last - i) + tri(i + 1)\n    end\n    return ret\nend", "  local a\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      table.insert(a, i - 1)\n\
    \    elseif i % 2 == 1 then\n      table.insert(a, tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1))\n    end\n  end\n  return a\nend", "    local function f(i)\n        if\
    \ i < 1 then\n            return 1\n        end\n        return f(i - 1) + f(i\
    \ - 2) + f(i + 1) \n    end\n    return f(n / 2) and {f(n / 2) + f(n / 2) + f(n\
    \ / 2 + 1)} or {f(n / 2)}\nend", "    local t1, t2, t3, t4\n    if n <= 1 then\n\
    \        return nil\n    end\n    t1 = 1\n    t2 = 1\n    t3 = n - 1\n    t4 =\
    \ n + 1 -- Add 1 to the even numbers, otherwise the sum of the next even number\
    \ will be off\n    return t1 .. t2 .. t3 .. t4\nend", "\tlocal t1, t2, t3, sum\n\
    \tif n < 2 then\n\t\treturn nil, nil, nil\n\tend\n\tt1, t2, t3, sum = {}, {},\
    \ {}, 0\n\t-- First tribonacci number\n\tt1[1] = n\n\t-- If n is even, tribonacci\
    \ number is n-1 and previous tribonacci number is n-2\n\tif n % 2 == 0 then\n\t\
    \tt2[1] = n - 1\n\t\tt3[1] = n - 2\n\telse\n\t\t-- If n is odd, tribonacci number\
    \ is n-1 + n-1 and previous tribonacci number is n-1 + n-2 \n\t\tt1[2] = n - 1\n\
    \t\tt1[3] = n - 2\n\t\tt2[2] = t1[1] + t1[2]\n\t\tt2[3] = t1[2] + t1[3]\n\t\t\
    t3[2] = t1[1] + t1[3]\n\t\tt3[3] = t1[3] + t1[2]\n\t\tsum[1] = t1[1] + t1[2] +\
    \ t1[3]\n\t\tsum[2] = t2[1] + t2[2] + t2[3]\n\t\tsum[3] = t3[1] + t3[2] + t3[3]\n\
    \tend\n\t-- Now, sum[1] is n+1, sum[2] is n+2 and sum[3] is n+3\n\t-- Now, return\
    \ numbers in t1 and t2 which are greater than sum[1]\n\tlocal n = #t1 -- Get number\
    \ of elements in t1\n\twhile n <= #t1 do\n\t\t-- If sum is greater than sum[n],\
    \ t1 is greater than t1[n]\n\t\tif sum[n] < sum[1] then\n\t\t\ttable.insert(t1,\
    \ t1[n])\n\t\t\tn = n + 1\n\t\t-- If sum is greater than sum[n], t1 is less than\
    \ t1[n]\n\t\telseif sum[n] > sum[1] then\n\t\t\ttable.insert(t2, t2[n])\n\t\t\t\
    n = n + 1\n\t\t-- If sum is greater than sum[n], t1 is equal to t1[n]\n\t\telse\n\
    \t\t\ttable.insert(t1, t1[n])\n\t\t\ttable.insert(t2, t2[n])\n\t\t\ttable.insert(t3,\
    \ t3[n])\n\t\t\tn = n + 1\n\t\tend\n\tend\n\t-- Now return table of first n +\
    \ 1 elements\n\treturn t1\nend", "  if n <= 2 then\n    return n\n  end\n  local\
    \ a, b, c = 1, 1, 1\n  for i = 1, n do\n    if i % 2 == 0 then\n      a = a +\
    \ b\n      b = c + a\n      c = b\n    else\n      a = b\n      b = c\n      c\
    \ = a + b\n    end\n  end\n  return c\nend", "  local t = {}\n  if n <= 1 then\
    \ return t end\n  table.insert(t, 1)\n  table.insert(t, n)\n  if math.mod(n, 2)\
    \ then table.insert(t, n + 1)\n  else table.insert(t, (1 + math.sqrt(1 + 4 * n))\
    \ * math.sqrt(2))\n  end end\n  return t\nend", "    local arr = {}\n    arr[1]\
    \ = 3\n    arr[2] = 1 + n / 2\n    arr[3] = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    if n > 3 then\n        return arr\n    end\n    return arr\nend", " \
    \   local function f(n)\n        if n == 1 then\n            return 1\n      \
    \  end\n        if n == 2 then\n            return 3\n        end\n        return\
    \ f(n - 1) + f(n - 2) + f(n - 3)\n    end\n    return f(n)\nend", "\tif n == 1\
    \ then\n\t\treturn {3}\n\telse\n\t\tlocal n1, n2 = n, n + n/2\n\t\tlocal n3 =\
    \ n2 + n\n\t\treturn {n1, n2, n3}\n\tend\nend", "  local a = {1, 2, 3}\n  local\
    \ b = a\n  local c = {}\n  for i = 1, n do\n    c[i] = a[i] + b[i] + c[i + 1]\n\
    \    b = c\n  end\n  return c\nend", "  if n < 3 then\n    return {}\n  elseif\
    \ n == 3 then\n    return { 1, 3, 2, 8 }\n  elseif n % 2 == 1 then\n    return\
    \ { 1 + n / 2, (n - 1) / 2 + 1, n / 2 }\n  else\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  end\nend", "   local T = {}\n   if n < 3 then return T\n\
    \   elseif n == 2 then return {1, 1, 1}\n   elseif n == 1 then\n      T[1] = 3\n\
    \      return T\n   elseif n % 2 == 0 then\n      T[1] = 1 + n / 2\n      T[2]\
    \ = 1 + n\n      T[3] = T[1] + T[2]\n      return T\n   else\n      T[1] = 1 +\
    \ n\n      T[2] = 1 + n - 1 + n\n      T[3] = 1 + n - 1 + n + 1\n      return\
    \ T\n   end\nend", "  local triTable = {}\n  if n == 1 then return { 1 } end\n\
    \  if n == 0 then return { 0 } end\n  -- Recursive call\n  for i = 1, n - 1 do\n\
    \    local firstTri = tri(i - 1)\n    local secondTri = tri(i - 2)\n    local\
    \ thirdTri = tri(i - 3)\n    triTable[i] = firstTri[2] + secondTri[1] + thirdTri[0]\n\
    \  end\n  return triTable\nend", "  if n == 0 then\n    return {}\n  elseif n\
    \ == 1 then\n    return {1, 3}\n  elseif n % 2 == 0 then\n    return tri(n - 1)\
    \ + {tri(n - 2) + tri(n + 1)}\n  else\n    return tri(n - 1) + {tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)}\n  end\nend", "    if n == 1 then\n        return {3,1,1,1}\n\
    \    end\n    if n == 2 then\n        return {3,3,2,1}\n    end\n    local n1\
    \ = n - 1\n    local n2 = n - 2\n    local n3 = n - 3\n    local res = {}\n  \
    \  local function add(a, b)\n        a = a + b\n        if a <= n then\n     \
    \       if a > res[1] then\n                res[1] = a\n            end\n    \
    \        if a > res[2] then\n                res[2] = a\n            end\n   \
    \         if a > res[3] then\n                res[3] = a\n            end\n  \
    \      end\n    end\n    res[1] = n\n    add(1, n1)\n    add(n1, n2)\n    add(n2,\
    \ n3)\n    add(n3, n1 + n2)\n    return res\nend", "   if n == 0 then\n      \
    \ return {}\n   end", "  assert(n >= 1)\n  local nums = { 1 }\n  if n == 2 then\n\
    \    nums[2] = 2\n    return nums\n  else\n    local i = 3\n    while i <= n do\n\
    \      local t = i\n      i = i + 2\n      nums[#nums + 1] = t\n    end\n    return\
    \ nums\n  end\nend", "    local results = {}\n    results[1] = 3\n    for i =\
    \ 2, n do\n        results[i] = results[i - 1] + results[i - 2] + results[i +\
    \ 1 ]\n    end\n    return results\nend", "  local a = {}\n  a[1] = n\n  local\
    \ b = n\n  local c = n + 2\n  repeat\n    a[#a + 1] = b -- append n to a\n   \
    \ b, c = b, c + 2 -- calculate next n by dividing by 2\n  until c > n -- stop\
    \ if n is odd\n  return a\nend", "  local t = {}\n  local i = 3\n  repeat\n  \
    \  t[i] = (i - 1) + (i - 2) + (i + 1)\n    i = i - 2\n  until n >= 0\n  return\
    \ t\nend", "  if n <= 1 then\n    return nil\n  else\n    local f1, f2, f3 = 1,\
    \ 3, 5\n    local i = 3\n    repeat\n      table.insert(result, f1)\n      f1,\
    \ f2, f3 = f2, f3, f1 + f2 + f3\n      i = i + 1\n      repeat\n        if ((i\
    \ - 1) % n == 0) then\n          table.insert(result, f3)\n        else\n    \
    \      table.insert(result, f2)\n        end\n        f2, f3 = f3, f2 + f3\n \
    \       i = i + 1\n      until i > n\n    until f1 > n\n  end\nend", "  local\
    \ a = {}\n  if n <= 0 then return nil end\n  a[1] = 3\n  local k = n-1\n  if k\
    \ % 2 == 0 then a[2] = 1 + k/2 end\n  while k ~= 1 do\n    a[#a+1] = tri(k)\n\
    \    k = k-1\n    if k % 2 == 0 then a[2] = a[2] + k/2 end\n  end\n  return a\n\
    end", "  -- We should use an explicit stack. But to make the code simpler we \n\
    \  -- use a static array as a stack.\n  local stack = {1}\n  local fib = 1\n \
    \ local sum = 0\n  local next\n  local last\n  local i = 1\n  while i < n do\n\
    \    last = fib\n    fib = fib + stack[i]\n    next = fib\n    while last ~= 0\
    \ and next ~= 0 do\n      sum = sum + last\n      last = next\n      next = next\
    \ + 1\n    end\n    table.insert(stack, next)\n    i = i + 1\n  end\n  return\
    \ stack\nend", "\tif n == 1 then\n\t\treturn {3}\n\telseif n == 2 then\n\t\treturn\
    \ {1, 3}\n\telseif n == 3 then\n\t\treturn {3, 6, 9}\n\telseif n % 2 == 0 then\n\
    \t\treturn {tri(n - 1) + tri(n - 2) + tri(n - 3)}\n\telse\n\t\treturn {tri(n -\
    \ 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)}\n\tend\nend", "\t-- Base case\n\t\
    if n < 2 then\n\t\treturn {1, n} -- We only need 1 number\n\tend", "  local tbl\
    \ = {}\n  if n <= 0 then return end\n  tbl[1] = n\n  if n % 2 == 0 then tbl[2]\
    \ = tri(n / 2) end\n  return tbl\nend", "    local table = {}\n    local n1, n2,\
    \ n3, n4 = 1, 1, 3, 8\n    while n4 <= n do\n        n3 = n2 + n4\n        n2\
    \ = n3\n        n1 = n4\n        n4 = n1 + n3\n        table[n1], n2 = n2, n4\n\
    \    end\n    return table\nend", "    local a\n    local b\n    local c\n   \
    \ local n = 1\n    a = 1\n    b = 1\n    c = 1\n    repeat\n        if n % 2 ==\
    \ 0 then\n            n = n + a / 2\n            a += 1\n        else\n      \
    \      n = n + b / 2\n            b += 1\n        end\n        c = c + n\n   \
    \ until c > n + 1\n    local result\n    for i = 1, n do\n        table.insert(result,\
    \ c)\n    end\n    return result\nend", "  local tbl = {}\n  for i = 1, n + 1\
    \ do\n    tbl[i] = (i % 2 == 0 and tbl[i - 2] or tbl[i - 1]) + tbl[i - 3]\n  end\n\
    \  return tbl\nend", "  if n == 0 then return {1};\n  if n % 2 == 0 then return\
    \ tri(n - 1) + {n + 1};\n  return tri(n - 1) + tri(n - 2) + {n + 2};\nend", " \
    \   local t = {3}\n    for i = 4,n,2 do\n        t[#t+1] = #t\n    end\n    return\
    \ t\nend", "\tlocal t = {}\n\tif n < 2 then return t end\n\tt[0] = n\n\tt[1] =\
    \ 1 + n / 2\n\tt[2] = tri(t[1] - 1) + tri(t[2] - 2) + tri(t[1] + 1)\n\treturn\
    \ t\nend", "  local arr = {}\n  \n  -- Add fibonacci numbers of the tribonacci\
    \ sequence.\n  for i = 1, n do\n    local fib1 = i + 1\n    local fib2 = fib1\
    \ + 2\n    arr[fib1] = fib1\n    arr[fib2] = fib2\n  end", "    local a = {}\n\
    \    local i = 1\n    local j = 2\n    while i <= n do\n        table.insert(a,\
    \ j)\n        i = i + 2\n        j = j + 2\n    end\n    return a\nend\nprint(tri(6))",
  "  -- Base case.\n  if n <= 1 then\n    return { 1 }\n  end\n  -- Recursive case.\n\
    \  local n1 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Return the result.\n\
    \  return { n1, n1, n1, n1 }\nend", "\tassert(n >= 1, \"n must be positive\")\n\
    \tlocal t = {}\n\tif n == 1 then \n\t\tt[1] = 3\n\telseif n % 2 == 0 then\n\t\t\
    t[1] = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\telse\n\t\tt[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3)\n\tend\n\treturn t\nend", "  local function f(n)\n\
    \    if n == 1 then\n      return {1, 2, 3}\n    elseif n == 2 then\n      return\
    \ {2, 3, 4}\n    elseif n == 3 then\n      return {3, 4, 5}\n    end\n    local\
    \ function g(k)\n      return n + k - 1\n    end\n    local function h()\n   \
    \   return tri(g(n) + tri(n + 1))\n    end\n    return f(n) + h()\n  end\n  return\
    \ f(1)\nend", "    local table = {}\n    local n0 = 1\n    local n1 = 1\n    local\
    \ n2 = n\n    \n    repeat\n        if n2 == 1 then\n            table.insert(table,\
    \ n0)\n            break\n        end\n        n0 = n1\n        n1 = n2\n    \
    \    n2 = n0 - n1 + 1\n    until n2 > 1", "    local function tri_0()\n      \
    \  return 3\n    end", '  if n <= 2 then return {n} end', "   if n == 0 then\n\
    \      return {}\n   elseif n == 1 then\n      return {1}\n   elseif n % 2 ==\
    \ 0 then\n      return tri(n - 1) + {tri(n - 1) + tri(n - 2) + tri(n - 3)}\n \
    \  else\n      return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n   end\n\
    end", "  local table = {}\n  if n > 0 then\n    table[1] = n + 1\n  else\n   \
    \ return table\n  end", "    if n < 1 then return end\n    local result = {}\n\
    \    result[1] = 3\n    if n % 2 == 0 then\n        result[2] = 1\n        for\
    \ i = 2, n - 1 do\n            result[i + 1] = result[i-2] + result[i-1]\n   \
    \     end\n    else\n        result[2] = n+1\n        for i = 2, n do\n      \
    \      result[i + 1] = result[i-2] + result[i-1]\n        end\n    end\n    return\
    \ result\nend", "\tlocal ret = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\ttable.insert(ret,\
    \ i)\n\t\ti = i + 2\n\tend\n\treturn ret\nend", "  local a = 1\n  local b = a\
    \ + 1\n  local c = b + 1\n  local d = c + a\n  local f = {}\n  for i = 1, n +\
    \ 1 do\n    -- We want elements of the Fibonacci sequence to be in ascending order\n\
    \    if i > 2 then\n      f[i] = a \n      f[i + 1] = b \n      f[i + 2] = c \n\
    \      f[i + 3] = d\n      a = b \n      b = c \n      c = d \n      d = d\n \
    \   end\n  end\n  return f\nend", "    local result = {1, nil, nil, nil}\n   \
    \ for i = 1, n do\n        if i % 2 == 0 then\n            result[#result + 1]\
    \ = tri(i - 1) + tri(i - 2)\n        else\n            result[#result + 1] = tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1)\n        end\n    end\n    return result\nend",
  "    local memo = {}\n    local function f(n)\n        if n == 1 then\n        \
    \    table.insert(memo, 3)\n        else\n            local m = n / 2\n      \
    \      memo[#memo + 1] = memo[m] + memo[m - 1] + memo[m+1]\n        end\n    \
    \    return memo[n]\n    end\n    return f(n)\nend", "    local sequence = {}\n\
    \    for i = 1, n do\n        sequence[i] = 1\n    end\n    sequence[1] = sequence[2]\
    \ = 1\n    sequence[n - 1] = ((sequence[n - 1] + sequence[n - 2] + sequence[n])\
    \ / 3) * 3\n    for i = 2, n - 1 do\n        sequence[i] = sequence[i - 1] + sequence[i\
    \ - 2]\n    end\n    return sequence\nend", "    local _tri = {1}\n    if n ==\
    \ 2 then\n        _tri[1] = 3\n    elseif n == 3 then\n        _tri[1] = 1 + _tri[2]\
    \ / 2\n        _tri[2] = _tri[1] + _tri[2] - _tri[1]\n        _tri[3] = _tri[2]\
    \ + _tri[1] - _tri[1]\n        _tri[4] = 1 + _tri[3]\n    else\n        _tri[1]\
    \ = 1 + tri(n - 1) + tri(n - 2) + tri(n + 1)\n        _tri[2] = _tri[1] + _tri[2]\
    \ - _tri[1]\n        _tri[3] = _tri[2] + _tri[1] - _tri[1]\n        _tri[4] =\
    \ 1 + _tri[3]\n    end\n    return table.concat(_tri, \",\")\nend", "  local function\
    \ tri_odd(n)\n    return (math.sqrt(5) + math.sin(math.atan(math.sqrt(5)))) \n\
    \    * (math.sqrt(5) + math.sin(math.atan(math.sqrt(5)))) \n    * (math.sqrt(5)\
    \ + math.sin(math.atan(math.sqrt(5))))\n  end\n  if n <= 1 then\n    return {1,n}\n\
    \  elseif n == 2 then\n    return {tri_odd(n),tri_odd(n)}\n  else\n    return\
    \ {tri_odd(n),tri_odd(n) + tri(n-1),tri(n-1)+tri(n-2)}\n  end\nend", "  local\
    \ function tri_helper(a, b, c, d)\n    local res = d\n    if b == 0 then return\
    \ res end\n    local m = n / b\n    if n % 2 == 1 then res = tri_helper(a + m,\
    \ b, c + 1, d + m) else res = tri_helper(a + m, b + m, c, d+1) end\n    return\
    \ res\n  end", "  if n == 0 then return {1}\n  else\n    if n % 2 == 0 then\n\
    \      return {1 + tri(n / 2) + tri(n / 2), 1 + tri(n / 2)}\n    else\n      return\
    \ {tri(n / 2) + tri(n / 2) + tri(n / 2) + tri(n / 2), tri(n / 2)}\n    end\n \
    \ end\nend", "    if n < 1 then\n        return {}\n    end\n    local sequence\
    \ = {}\n    local a = 1\n    local b = 1\n    local c = 3\n    for i = 1, n do\n\
    \        sequence[i] = a\n        a = b\n        b = c\n        c = a + b\n  \
    \  end\n    return sequence\nend", "  local a = 0\n  local b = 1\n  local c =\
    \ 0\n  local tri = { [1]=1 }\n  for i=2,n do\n    tri[i+1]=tri[i-1]+tri[i-2]\n\
    \    if tri[i-1] == tri[i] then\n      c=1\n    else\n      tri[i+1]=tri[i+1]+c\n\
    \    end\n    a[#a+1] = tri[i+1]\n  end\n  return a\nend", "  local f1, f2, f3\
    \ = 1, 1, 3\n  for i = 1, n do\n    local next = f1 + f2 + f3\n    f1, f2, f3\
    \ = f2, f3, next\n  end\n  return f1, f2, f3\nend", "    if n == 0 then\n    \
    \    return {nil}\n    end", "\tlocal table = {}\n\tif n == 1 then\n\t\ttable.insert(table,\
    \ 1)\n\t\treturn table\n\tend\n\ttable.insert(table, tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3))\n\treturn table\nend", "    if n == 1 then\n        return 3\n \
    \   elseif n == 0 then\n        return {}\n    elseif n == 1 then\n        return\
    \ {1}\n    elseif n % 2 == 1 then\n        return tri(n / 2) .. tri(n - 1) ..\
    \ tri(n / 2 + 1)\n    else\n        return tri(n - 1) .. tri(n - 2) .. tri(n /\
    \ 2 + 1)\n    end\nend", "  if n == 1 then\n    return {1}\n  elseif n == 2 then\n\
    \    return {{1}, {1, 1}}\n  elseif n == 3 then\n    return {{3}, {3, 1}, {3,\
    \ 3, 1}}\n  end\n  \n  local a1 = tri(n - 1)\n  local a2 = tri(n - 2)\n  local\
    \ a3 = {n + 1}\n  for i = 1, n do\n    table.insert(a2, a3)\n    table.insert(a3,\
    \ a1 + a2 + a3[#a3])\n  end\n  return a2\nend", "    local a = {}\n    local b\
    \ = a\n    local i = 2\n    while i < n do\n        if n ~= 0 then\n         \
    \   local k = math.floor((i - 1) / (i - 1))\n            b[i] = k * k + b[i -\
    \ 1]\n        end\n        i = i + 1\n    end\n    return a\nend", "\tlocal fib\
    \ = {}\n\tfib[1] = fib[2] = fib[3] = 1\n\tfor i = 4, n + 1, 2 do\n\t\tfib[i] =\
    \ fib[i - 2] + fib[i - 1]\n\tend\n\treturn fib\nend", "    local t1 = 1\n    local\
    \ t2 = 1\n    local t3 = 1\n    local t4 = 1\n    for i = 2, n do \n        t3\
    \ = t1 + t2 + t4\n        t1 = t4\n        t2 = t3\n        t4 = t3\n    end\n\
    \    return table.concat({t1, t2, t3, t4})\nend", "  local function trirec(m,\
    \ k)\n    if k == 0 then\n      return 1\n    elseif k == 1 then\n      return\
    \ 3\n    elseif k == m then\n      return trirec(m, k - 1) + trirec(m, k - 2)\
    \ + trirec(m, k + 1) + trirec(m, k + 2)\n    else\n      return trirec(m, k -\
    \ 1) + trirec(m, k - 2) + trirec(m, k + 1) + trirec(m, k + 2)\n    end\n  end\n\
    \  local table = {}\n  for i = 1, n + 1 do\n    table[i] = trirec(n, 0)\n  end\n\
    \  return table\nend", "  local res = {}\n  if n == 1 then\n    res[1] = 3\n \
    \   return res\n  elseif n % 2 == 0 then\n    res[1] = tri(n / 2) + tri(n / 2\
    \ + 1) + tri(n / 2 + 2)\n    return res\n  else\n    res[1] = tri(n - 1) + tri(n\
    \ - 2) + tri(n / 2 + 1)\n    return res\n  end\nend", "    local a = {}\n    local\
    \ b = {}\n    local c = 0\n    local x = {}\n    local j = 0\n    local k = 1\n\
    \    local t = 1\n    while k <= n do\n        if k % 2 == 0 then\n          \
    \  x[j] = k\n            j = j + 1\n        else\n            x[j] = k\n     \
    \       k = k + k\n        end\n        if j > (t - 1) then\n            j = j\
    \ - 1\n            t = t + 1\n        end\n    end\n    for i = 1, (t - 1) do\n\
    \        a[i] = x[i]\n    end\n    for i = 1, (n - 1) do\n        b[i] = x[(t-1)+i]\n\
    \    end\n    for i = 1, (n - 2) do\n        b[i] = b[i+1] + b[i]\n    end\n \
    \   for i = 1, (n - 2) do\n        a[i] = (a[i+1] + b[i]) / 2\n    end\n    return\
    \ a\nend", "  local fib, a, b = { 0, {}, {} }\n  local index = 1\n  local fibIndex\
    \ = 0\n  local fibLast = 3\n  while fibIndex <= fibLast do\n    fibIndex = index\n\
    \    index = index - 1\n    local a = fib[index - 1]\n    local b = fib[index\
    \ - 2]\n    fib[index] = a + b\n    fib[index + 1] = a + (fib[index + 0] or (b\
    \ + b))\n  end\n  return fib[n]\nend", "  local sequence = {}\n  local counter\
    \ = 1\n  sequence[1] = counter\n  counter = counter + 1\n  if n % 2 == 0 then\n\
    \    sequence[counter] = counter + tri(n / 2) + tri((n - 1) + (n % 2) * 2)\n \
    \ else\n    sequence[counter] = counter + tri((n - 1) + (n % 2) * 2)\n  end\n\
    \  return sequence\nend", "  local res = {}\n  local a = 1\n  local b = 2\n  local\
    \ c = 1\n  for i = 1, n do\n    res[i] = a\n    local tmp = a\n    a = b\n   \
    \ b = c\n    c = tmp + b\n  end\n  return res\nend", "\tlocal fibs = {}\n\tlocal\
    \ last_two = math.ceil(math.sqrt(n)) - 2\n\tfor i = 1, last_two do\n\t\tfibs[#fibs\
    \ + 1] = math.max(fibs[#fibs], \n\t\t\t1 + n / math.pow(math.pow(i, 2), last_two))\n\
    \tend\n\tfor i = 1, last_two do\n\t\tfibs[#fibs + 1] = math.max(fibs[#fibs], \n\
    \t\t\tfibs[#fibs] - n + 1 / math.pow(math.pow(i, 2), last_two))\n\tend\n\treturn\
    \ fibs or nil\nend", "    local table = {}\n    table.insert(table,3)\n    local\
    \ i = 1\n    while i <= n do\n        table.insert(table,1)\n        i = i + 2\n\
    \    end\n    table.insert(table,1)\n    return table\nend", "    local table\
    \ = {}\n    local n1 = 1\n    local n2 = 1\n    local n3 = 1\n    local n4 = 2\n\
    \    local n5 = 3\n    local n6 = 1\n    local i\n    \n    -- The table is filled\
    \ by the following logic:\n    -- n1 + n2 + n3 = n4\n    -- n4 + n5 + n6 = n5\n\
    \    -- n5 + n6 + n4 = n6\n    -- n3 + n4 + n5 = n6\n    -- n5 + n6 + n4 + n3\
    \ = n6\n    -- n4 + n5 + n6 + n4 = n6\n    -- n5 + n6 + n5 + n6 = n6\n    -- n1\
    \ + n2 + n3 + n4 + n5 + n6 = n6\n    \n    -- n1 + n2 = n2\n    -- n2 + n3 = n3\n\
    \    -- n3 + n4 = n4\n    -- n4 + n5 = n5\n    \n    -- n5 + n6 = n6\n    -- n6\
    \ + n4 = n4\n    \n    -- n5 + n6 + n5 = n5\n    -- n6 + n5 + n6 = n6\n    --\
    \ n5 + n6 + n5 + n6 = n6\n    -- n1 + n2 + n3 + n4 + n5 + n6 = n6\n    \n    --\
    \ n1 + n2 = n2\n    -- n2 + n3 = n3\n    -- n3 + n4 = n4\n    -- n4 + n5 = n5\n\
    \    \n    -- n5 + n6 = n6\n    -- n6 + n4 = n4\n    \n    -- n5 + n6 + n5 = n5\n\
    \    -- n6 + n5 + n6 = n6\n    -- n5 + n6 + n5 + n6 = n6\n    \n    -- n1 + n2\
    \ + n3 = n4\n    -- n4 + n5 + n6 = n5\n    -- n5 + n6 + n4 = n6\n    -- n3 + n4\
    \ + n5 = n6\n    -- n5 + n6 + n4 + n3 = n6\n    -- n4 + n5 + n6 + n4 = n6\n  \
    \  -- n5 + n6 + n5 + n6 = n6\n    -- n1 + n2 + n3 + n4 + n5 + n6 = n6\n    \n\
    \    -- n1 + n2 = n2\n    -- n2 + n3 = n3\n    -- n3 + n4 = n4\n    -- n4 + n5\
    \ = n5\n    \n    -- n5 + n6 = n", "    local fibs = {}\n    local tris = {}\n\
    \    local prev1 = 1\n    local prev2 = 1\n    local prev3 = 3\n    for i = 1,\
    \ n do\n        fibs[i] = prev1\n        tris[i] = prev3\n        prev1, prev2\
    \ = prev2, prev1 + prev2\n        prev3 = prev1 + prev2 + prev3\n    end\n   \
    \ return tris\nend", "  local table = {}\n  local i = 1\n  for _ = 1, n do\n \
    \   table[i] = (i == 1 and 1 or 2)\n    i = i + table[i-1] + table[i-2] + table[i+2]\n\
    \  end\n  return table\nend", "\t-- Base cases\n\tif not n then return {nil, nil,\
    \ nil}\n\telseif n == 1 then return {3}\n\t-- Recursion\n\telse return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n\tend\nend", "    local memo = {}\n    memo[1]\
    \ = n\n    memo[2] = memo[1]+memo[2]\n    memo[3] = memo[2]+memo[1]+memo[3]\n\
    \    return memo\nend", "  assert(n >= 1)\n  assert(n % 2 == 0)\n  local result\
    \ = {tri(n - 1) + tri(n - 2) + tri(n - 3)}\n  if n % 2 == 1 then result.insert(tri(n\
    \ - 1) + tri(n + 1)) end\n  return result\nend", "\tlocal a = {}\n\tlocal n0 =\
    \ 1\n\tlocal n1 = 1\n\tlocal n2 = n\n\tlocal i\n\tlocal sum\n\tif n <= 1 then\n\
    \t\treturn a\n\tend\n\tfor i = 2, n do\n\t\tif i%2 == 0 then\n\t\t\tsum = 1\n\t\
    \telse\n\t\t\tsum = 1\n\t\t\tn2 = n1 - 1\n\t\tend\n\t\ta[i] = n0 + sum\n\t\tn0\
    \ = n1 - n2\n\t\tn1 = n2\n\tend\n\treturn a\nend", "  local fibs = { 1, 1, 2 }\n\
    \  local sum = 1\n  for i = 2, n do\n    sum = sum + fibs[i-1]\n    fibs[i] =\
    \ fibs[i-1] + fibs[i-2] + fibs[i+2]\n  end\n  return fibs[n] + fibs[1] + fibs[2]\n\
    end", "  -- Base case:\n  if n == 1 then\n    return {1,3,2}\n  -- Recursive case:\n\
    \  elseif n % 2 == 0 then\n    local a = tri(n / 2)\n    local b = a + a\n   \
    \ return b\n  else\n    local a = tri(n - 1) + tri(n - 2)\n    local b = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    return b\n  end\nend", "    if n == 0 then\n\
    \        return {0}\n    end\n    if n == 1 then\n        return {1}\n    end\n\
    \    if n % 2 == 0 then\n        return {tri(n - 1) + tri(n - 2) + tri(n + 1)}\n\
    \    else\n        return {tri(n - 1) + tri(n - 2)}\n    end\nend", "  local table\
    \ = {}\n  if n >= 1 then\n    table[1] = n\n    table.insert(table, n)\n    table.insert(table,\
    \ 2 * n + 2)\n    table.insert(table, 3 * n + 3)\n    return table\n  else\n \
    \   return table\n  end\nend", "  local ret = {}\n  for i=1,n do\n    table.insert(ret,\
    \ 1)\n    table.insert(ret, 1 + ret[i-1] + ret[i-2])\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
