name: HumanEval_17_parse_music
language: lua
prompt: "-- Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n-- Your task is to parse this string and return table of integers\
  \ corresponding to how many beats does each\n-- not last.\n-- Here is a legend:\n\
  -- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two beats\n--\
  \ '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o| .| .| .|\
  \ .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'),\
  \ {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n \
  \   lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  music_string = music_string:gsub('\\%w', '', music_string)", "  local\
    \ notes = music_string:gsub(\"[%W]\", \"|\")\n  local notes_table = {}\n  for\
    \ i = 1, #notes do\n    local note = notes[i]\n    local note_length = 1\n   \
    \ if note == \"o\" then\n      note_length = 4\n    elseif note == \"o|\" then\n\
    \      note_length = 2\n    elseif note == \".|\" then\n      note_length = 1\n\
    \    end\n    notes_table[i] = note_length\n  end\n  return notes_table\nend",
  "  local beats_per_note = 4\n  local notes_to_track = {}\n  local note_to_beats\
    \ = {}\n  for note, beats in string.gmatch(music_string, \"[%a| .]+\") do\n  \
    \  notes_to_track[note] = tonumber(beats)\n    note_to_beats[note] = beats_per_note\
    \ * tonumber(beats)\n  end", "    music_string = music_string:gsub('o', '')\n\
    \    music_string = music_string:gsub('o|', '')\n    music_string = music_string:gsub('.|',\
    \ '')\n    music_string = music_string:gsub('..', '|')\n    music_string = music_string:gsub('o..',\
    \ '|')\n    music_string = music_string:gsub('.|..', '|')\n    music_string =\
    \ music_string:gsub('o|..', '|')\n    music_string = music_string:gsub('.|.',\
    \ '|')\n    music_string = music_string:gsub('..|', '|')\n    music_string = music_string:gsub('..',\
    \ '|')\n    music_string = music_string:gsub('.', '|')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..|',\
    \ '')\n    music_string = music_string:gsub('..|', '')\n    music_string = music_string:gsub('..",
  '    local notes = {}', "  local result = {}\n  for i = 1, #music_string do\n  \
    \  local char = music_string:sub(i,i)\n    if char == 'o' then\n      result[i]\
    \ = 4\n    else if char == 'o|' then\n      result[i] = 2\n    else if char ==\
    \ '.|' then\n      result[i] = 1\n    else\n      error(\"Unexpected character\"\
    , char)\n    end\n  end\n  return result\nend", "  local beat_counts = {}\n  local\
    \ notes\n  local position = 0\n  -- We parse from left to right, so position is\
    \ only incremented after each note is read.\n  -- If position is greater than\
    \ length of music_string then we're done.\n  while position ~= #music_string do\n\
    \    local note = music_string[position]\n    -- We assume that notes are 3 characters\
    \ long\n    -- >>> parse_music('.')\n    -- {}\n    -- >>> parse_music('..')\n\
    \    -- {}\n    -- >>> parse_music('......')\n    -- {}\n    -- >>> parse_music('......\
    \ ..')\n    -- {}\n    -- >>> parse_music('...... .. .   ')\n    -- {}\n    if\
    \ note:sub(1, 1) == '|' then\n      notes = notes..music_string[position + 1]\n\
    \      position = position + 3\n      -- We add 2 at the end to make note length\
    \ odd\n    elseif note == '.' then\n      notes = notes..music_string[position\
    \ + 1]\n      position = position + 2\n    elseif note == 'o' then\n      -- Note\
    \ is o, so we'll add 1 to each beat count for that note\n      beat_counts[notes]\
    \ = beat_counts[notes] + 1\n      position = position + 3\n    else\n      --\
    \ We have a new note\n      notes = notes..music_string[position + 1]\n      position\
    \ = position + 2\n    end\n  end\n  -- We know that position is always less than\
    \ length of music_string.\n  -- So the only way it can get out of loop is if music_string\
    \ is exhausted.\n  -- When position is equal to the length of the string then\
    \ we know the music is complete.\n  return beat_counts\nend\n</code>\n<|/ a |>\n\
    <| c |>\nthanks for your answer! can you please explain me why i should add 2\
    \ at the end in the line `notes = notes..music_string[position + 1]`?\n<|/ c |>\n\
    <| c |>\nBecause the last note doesn't have to be followed by a space. Consider\
    \ `.... .. ..`. We want to know how many beats does the third note have but the\
    \ third note doesn't have a space following it. So in order to get to where we're\
    \ at we add one to the previous note's beat count because we skipped over it before\
    \ we get to it. That way the length is odd.\n<|/ c |>\n<| c |>\nIt may be easier\
    \ to just do `notes = notes..music_string[position + 2]`, since there will always\
    \ be ", "    -- Your code here\nend\n</cell>\n<cell>", "  local notes = {}\n \
    \ for note in music_string:gmatch('([%o|.|]+)')\n    do\n      table.insert(notes,\
    \ tonumber(note))\n    end\n  return notes\nend", "  local beats = { }\n  local\
    \ chords = { }\n  for i, note in ipairs(music_string) do\n    if note == '.' then\n\
    \      table.insert(chords, 1)\n      beats[i] = 1\n    elseif note == 'o' then\n\
    \      table.insert(chords, 4)\n      table.insert(beats, 4)\n    elseif note\
    \ == 'o|' then\n      table.insert(chords, 2)\n      table.insert(beats, 2)\n\
    \    else\n      local num_beats = tonumber(note)\n      if num_beats > 1 then\n\
    \        table.insert(chords, num_beats)\n        table.insert(beats, num_beats)\n\
    \      elseif num_beats == 1 then\n        table.insert(chords, 4)\n        table.insert(beats,\
    \ 4)\n      else\n        -- invalid note format\n      end\n    end\n  end\n\
    \  return chords, beats\nend", "    -- your code here\n    local beats = {} --\
    \ our output table\n    local n = 0 -- running counter\n    local next_char =\
    \ music_string[n] -- current char\n    local last_char = music_string[n-1] --\
    \ previous char\n    while true\n    do\n        local current_char\n        if\
    \ next_char == \"o\" then\n            current_char = \"o\"\n        else\n  \
    \          current_char = next_char\n        end\n        if current_char == \"\
    o\" or current_char == \"|\" then\n            -- this is a complete note\n  \
    \          n = n+1\n            table.insert(beats, 1)\n        else\n       \
    \     -- this is not a complete note\n            n = n-1\n        end\n     \
    \   if n == 0 then\n            break\n        end\n        last_char = current_char\n\
    \        next_char = music_string[n]\n    end\n    return beats\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you very much! It helped a lot! I understand\
    \ the code, but I can't seem to understand how to execute the function parse_music.\
    \ For example, how would I be able to test the function parse_music by running\
    \ the code from Python?\n<|/ c |>\n<| c |>\nAh I see what you're saying. I'm relatively\
    \ new to programming and I only started learning Python about a week ago.\n<|/\
    \ c |>\n<| c |>\nPython doesn't have any native support for musical notes, you\
    \ would need to parse the input yourself. I'll add an example to my answer.\n\
    <|/ c |>\n<| c |>\nThank you so much! I'll try it out and see if I can get it\
    \ to work!\n<|/ c |>\n<| c |>\nI added a Python example. Hopefully this helps!\n\
    <|/ c |>\n<| a |>\nThe algorithm itself seems reasonable to me, but you haven't\
    \ said what you're having trouble with. \nFor example, you said, \"I can't figure\
    \ out how to execute the function parse_music. For example, how would I be able\
    \ to test the function parse_music by running the code from Python?\"\nWell, there\
    \ are a number of ways to do this depending on how your Python script is set up.\
    \ One way is to put the following code at the top of the script:\n<code>\nif __name__\
    \ == '__main__':\n    music_string = input()  # Where you get the user input as\
    \ string\n    beats = parse_music(music_string)\n    print('beats = ', beats)\n\
    </code>\nThen call your script with python myscript.py when you are in the directory\
    \ where it is saved, or python -m myscript from another directory if you put the\
    \ script in a directory above your current directory.\nThe __name__ == '__main__'\
    \ part is a common idiom for tell", "    local notes = {}\n    local last_note\
    \ = nil", "    music_string = music_string:gsub(' ', '')", "    -- Your code here!\n\
    end", "  -- Parse music string to get list of notes.\n  music_string = music_string:gsub('[\
    \ .]', ' ')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string\
    \ = music_string:gsub('(o|.)|.o', '\\1o\\2')\n  music_string = music_string:gsub('(o|.)|.o',\
    \ '\\1o\\2')\n  musi", "  -- Your code here\nend", '    local last_note, beats_after_note
    = {}, {}', "  music_string = music_string:gsub('%[%]', '')\n  music_string = music_string:gsub('%[|]',\
    \ '')\n  music_string = music_string:gsub('%.%.%.%', '')\n  music_string = music_string:gsub('%.%.%',\
    \ '')\n  music_string = music_string:gsub('%.%', '')\n  music_string = music_string:gsub('%',\
    \ '')\n  music_string = music_string:gsub('\\\\', ' ')\n  music_string = music_string:gsub('.',\
    \ '')\n  music_string = music_string:gsub(',', '')\n  music_string = music_string:gsub('\
    \ ', '')", "    music_string = _G.pre.strip_accents(music_string)\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    music_string = music_string .. '|'\n    music_string\
    \ = music_string .. '|'\n    musi", "    local parsed_string = music_string\n\
    \    local notes = {}\n    local notes_index = {}\n    local temp = ''\n    for\
    \ i = 1, #parsed_string do\n        local char = parsed_string[i]\n        if\
    \ char == 'o' then\n            if #notes == 0 then\n                notes[#notes+1]\
    \ = 4\n                notes_index[#notes+1] = #notes\n            else\n    \
    \            notes[notes_index[#notes]] = notes[#notes] + 1\n            end\n\
    \        elseif char == '|' then\n            if #notes == 0 then\n          \
    \      notes[#notes+1] = 2\n                notes_index[#notes+1] = #notes\n \
    \           else\n                notes[notes_index[#notes]] = notes[#notes] +\
    \ 1\n            end\n        elseif char == '.' then\n            if #notes ==\
    \ 0 then\n                notes[#notes+1] = 1\n                notes_index[#notes+1]\
    \ = #notes\n            else\n                notes[notes_index[#notes]] = notes[#notes]\
    \ + 1\n            end\n        else\n            if #notes > 0 then\n       \
    \         notes[#notes+1] = 1\n            end\n        end\n    end\n    return\
    \ notes\nend", "    -- YOUR CODE HERE\n    music_table = music_string\n    music_table\
    \ = music_table:gsub('o','o|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    music_table = music_table:gsub('o|','.|')\n\
    \    music_table = music_table:gsub('o|','.|')\n    musi", "    local notes =\
    \ {}\n    for note_char in music_string:gmatch('.') do\n        if note_char ==\
    \ 'o' then\n            table.insert(notes, 4)\n        elseif note_char == 'o|'\
    \ then\n            table.insert(notes, 2)\n        elseif note_char == '.|' then\n\
    \            table.insert(notes, 1)\n        else\n            error(\"Invalid\
    \ music input: unknown character '\" .. note_char .. \"'\")\n        end\n   \
    \ end\n    return notes\nend", "    music_string = music_string.split(' ')\n \
    \   local parsed_music = {}\n    local count = 0\n    for _, note in ipairs(music_string)\
    \ do\n        if note == '.' then\n            count = count + 1\n        else\n\
    \            if note == 'o' then\n                count = count + 1\n        \
    \    else\n                if note == 'o|' then\n                    count = count\
    \ + 2\n                else\n                    if note == '.|' then\n      \
    \                  count = count + 1\n                    else\n             \
    \           count = count\n                    end\n                end\n    \
    \        end\n        end\n    end\n    table.insert(parsed_music, count)\n  \
    \  return parsed_music\nend", "  -- Create table to store result.\n  local music_table\
    \ = {}\n  -- Iterate through the string.\n  for i = 1, #music_string do\n    --\
    \ If character is not 'o' or '|', skip this note.\n    if music_string[i] ~= 'o'\
    \ and music_string[i] ~= '|' then return music_table end\n    -- If character\
    \ is 'o' or '|', add 1 beat to this note.\n    music_table[i + 1 .. music_string[i]]\
    \ = music_table[i + 1 .. music_string[i]] + 1\n  end\n  return music_table\nend",
  "  music_string = music_string or \"\"\n  music_string = music_string..'|' -- add\
    \ special mark at the end to detect end of music string\n  local music_length\
    \ = tonumber(music_string:len()) -- get length of string\n  music_string = music_string:sub(1,\
    \ music_length) -- remove special mark\n  local music_list = music_string:gmatch(\"\
    .\") -- get list of notes\n  music_list = music_list:map(function(x)\n    -- remove\
    \ special marks\n    if x == '.' then return x end\n    -- convert notes to numbers\n\
    \    if tonumber(x) < 0 or tonumber(x) > 126 then return nil end\n    -- convert\
    \ to integer\n    return tonumber(x)\n  end)", "    music_string = music_string\
    \ .. \"X\"\n    local pattern = {\n        \"^(.)\", -- Matches single note\n\
    \        \"^(..)\", -- Matches second note (dotted notation)\n        \"^o(.)$\"\
    , -- Matches whole note\n        \"^o(.)|^(..)$\", -- Matches half-note (dotted\
    \ notation)\n        \"^(.|..)$\", -- Matches quater note\n        \"^(.)\", --\
    \ Matches last note\n    }\n    local music_string_length = #music_string\n  \
    \  local notes = {}\n    for _, note_name in ipairs(pattern) do\n        notes[note_name]\
    \ = {}\n        local last_beat = 1\n        for _, symbol in ipairs(music_string)\
    \ do\n            if symbol == note_name then\n                last_beat = last_beat\
    \ * 4 + 1\n            else\n                notes[note_name][#notes[note_name]\
    \ + 1] = last_beat\n                last_beat = 1\n            end\n        end\n\
    \    end\n    return notes\nend\n</cell>\n<text>\nExercise: Implement a function\
    \ that accepts a string representation of a musical note and returns the number\
    \ of beats it takes to play it\nGiven the input string \"o o| .| o| o| .| .| .|\
    \ .| .| o o\", your function should return the following result:\n{4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4}", "    music_string = music_string:gsub('(o|.|\\\\|)',\
    \ function(s) return s:lower() end)\n    return music_string:gsub('([^ ])', '',\
    \ 1):gsub('(%S+)', function(s) return tonumber(s) end) or {}\nend", "   assert(music_string)\n\
    \   assert(music_string:find(\"%w+\"))\n   local last_notes = nil\n   local notes\
    \ = nil\n   for note in music_string:gmatch(\"%w+\") do\n      if note == 'o'\
    \ or note == 'o|' or note == '.|' then\n         if notes then\n            last_notes\
    \ = notes\n         end\n         notes = nil\n      else\n         notes = notes\
    \ or (note == \".\" and 1 or 4)\n      end\n   end\n   if last_notes and notes\
    \ then\n      last_notes = last_notes or 0\n      notes = notes or 0\n      table.insert(last_notes,\
    \ notes)\n   end\n   return last_notes\nend", "\t-- Write your code below\n\t\
    local parsed_music = {}\n\tfor i=1,#music_string,1 do\n\t\tif music_string[i]\
    \ == '.' then\n\t\t\t-- do nothing\n\t\telseif music_string[i] == 'o' then\n\t\
    \t\tparsed_music[i] = 4\n\t\telseif music_string[i] == 'o|' then\n\t\t\tparsed_music[i]\
    \ = 2\n\t\telseif music_string[i] == '.|' then\n\t\t\tparsed_music[i] = 1\n\t\t\
    else\n\t\t\terror('Input is malformed music string')\n\t\tend\n\tend\n\t\n\treturn\
    \ parsed_music\nend", "  music_string = music_string or ''\n  music_string = music_string\
    \ -- remove spaces\n  music_string = music_string.replace(' ', '')", "  local\
    \ notes = {}\n  local last_note = {}\n  local music_beat_count = 0\n  for _, note\
    \ in ipairs(music_string:gsub('(%a+)( .)', function(_, note)\n    notes[note]\
    \ = notes[note] or 0\n    notes[note] = notes[note] + 1\n    last_note[note] =\
    \ music_beat_count\n    music_beat_count = music_beat_count + 1\n    return note\n\
    \  end)) do\n    notes[note] = notes[note] or 0\n    notes[note] = notes[note]\
    \ + 1\n    last_note[note] = music_beat_count\n  end\n  last_note['.'] = music_beat_count\
    \ - 1\n  return notes\nend", "   local result = {}\n   local music_string = music_string..'|'\n\
    \   while music_string ~= '' do\n      local note, beat_len = parse_note(music_string)\n\
    \      result[note] = result[note] + beat_len\n      music_string = music_string[#music_string]\n\
    \   end\n   return result\nend", "  music_string = music_string:gsub('(%.?)(..?)([o|.|])$',\
    \ '\\\\1\\\\2')\n  music_string = music_string:gsub('([o|.|])$', '\\\\1') -- collapse\
    \ multiple last notes to one\n  music_string = music_string:gsub('^(%..)(.?)$',\
    \ '\\\\1\\\\2') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(.?)$',\
    \ '\\\\1\\\\2') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%..)(..)(.?)$',\
    \ '\\\\1\\\\2') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(.?)(..?)$',\
    \ '\\\\1\\\\2') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(.?)$',\
    \ '\\\\1') -- collapse all but first note\n  music_string = music_string:gsub('^(%..)(..)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%..)$',\
    \ '\\\\1') -- collapse all but first note\n  music_string = music_string:gsub('^(%..)(..)(..)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%..)(..)(.)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(.)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(..)(.)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(..)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)$',\
    \ '\\\\1') -- collapse all but first note\n  music_string = music_string:gsub('^(%..)(..)(..)(..)$',\
    \ '\\\\1') -- collapse all but first two notes\n  music_string = music_string:gsub('^(%)(..)(..)(",
  "  music_string = music_string:gsub('(^| +)','')\n  music_string = music_string:gsub('(\
    \ +|$)','')\n  music_string = music_string:gsub('( +|$)','')", "    assert(music_string\
    \ ~= nil)\n    music_string = music_string.strip():lower()\n    music_string =\
    \ music_string:gsub(\"o|\", \"o\") -- first half note, second half note\n    music_string\
    \ = music_string:gsub(\"o\", \"|\") -- first note, second note\n    music_string\
    \ = music_string:gsub(\"|\", \"o\") -- first half note, second half note\n   \
    \ music_string = music_string:gsub(\"o\", \"|\") -- first note, second note\n\
    \    music_string = music_string:gsub(\"|\", \"o\") -- first half note, second\
    \ half note\n    music_string = music_string:gsub(\"o\", \"|\") -- first note,\
    \ second note\n    music_string = music_string:gsub(\"|\", \"o\") -- first half\
    \ note, second half note\n    music_string = music_string:gsub(\"o\", \"|\") --\
    \ first note, second note\n    music_string = music_string:gsub(\"|\", \"o\")\
    \ -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = music_string:gsub(\"\
    |\", \"o\") -- first half note, second half note\n    music_string = music_string:gsub(\"\
    o\", \"|\") -- first note, second note\n    music_string = musi", "  local note_counts\
    \ = {}\n  for i = 1, #music_string do\n    if music_string:sub(i, i) ~= '.' then\n\
    \      if music_string:sub(i, i) == 'o' then\n        note_counts[#note_counts\
    \ + 1] = 4\n      elseif music_string:sub(i, i) == 'o|' then\n        note_counts[#note_counts\
    \ + 1] = 2\n      elseif music_string:sub(i, i) == '.|' then\n        note_counts[#note_counts\
    \ + 1] = 1\n      end\n    end\n  end\n  return note_counts\nend", "    -- convert\
    \ music string into ascii table\n    local ascii = {}\n    for _, char in pairs(music_string)\
    \ do\n        if char ~= '|' then\n            ascii[#ascii + 1] = tonumber(char)\n\
    \        end\n    end", "    local num_notes_found = {}\n    local last_beat_found\
    \ = {}\n    local music_string = music_string\n    for i = 1, #music_string do\n\
    \        if music_string:sub(i,i) == '|' then\n            for j = i+1, #music_string\
    \ do\n                if music_string:sub(j, j) == '|' then\n                \
    \    local num_notes_found[i] = num_notes_found[i] + 1\n                    local\
    \ last_beat_found[i] = last_beat_found[i] + 4\n                    i = j\n   \
    \                 break\n                end\n            end\n        elseif\
    \ music_string:sub(i,i) == 'o' then\n            local num_notes_found[i] = num_notes_found[i]\
    \ + 1\n            local last_beat_found[i] = last_beat_found[i] + 4\n       \
    \ end\n    end\n    return num_notes_found, last_beat_found\nend", "  local beats_per_note\
    \ = {\n    {12,  2,  1,  4,  3,  5,  6,  7},\n    {11,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},\n    {10,  3,  3,  5,  3,  6,  7,  7},\n    {10,  3,  3,  5,  3,  6,  7,\
    \  7},", "  local current_note = 0\n  local current_beat = 1\n  local notes =\
    \ {}\n  for index, character in ipairs(music_string) do\n    local note_number\
    \ = tonumber(character)\n    if note_number == nil then\n      break\n    end\n\
    \    local note = tonumber(character + 32)\n    if note == nil then\n      break\n\
    \    end\n    local beat = tonumber(character + 47)\n    if beat == nil then\n\
    \      break\n    end\n    notes[note_number] = {note = note, beat = beat}\n \
    \   if note_number == current_note then\n      current_beat = beat\n    end\n\
    \    current_note = note_number\n  end\n  return notes\nend\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| .| .| .| o o')\npm\n</cell>\n<code language=conda-env-genpen-py>\n\
    pm = parse_music('o o| .| o| o| .| ", "    -- Your code here\n    music_string\
    \ = music_string.gsub(\"o\", \"4 \")\n    music_string = music_string.gsub(\"\
    o|\", \"2 \")\n    music_string = music_string.gsub(\"\\\\|\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"\\\\.|\", \"3 \")\n    music_string = music_string.gsub(\"\
    \\\\.\", \"2 \")\n    music_string = music_string.gsub(\"o\\\\|\", \"1 \")\n \
    \   music_string = music_string.gsub(\"\\\\|\", \"1 \")\n    music_string = music_string.gsub(\"\
    \\\\.\", \"1 \")\n    music_string = music_string.gsub(\"\\\\.\", \"1 \")\n  \
    \  music_string = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_string.gsub(\"o\", \"1 \")\n    music_string = music_string.gsub(\"\
    o\", \"1 \")\n    music_string = music_string.gsub(\"o\", \"1 \")\n    music_string\
    \ = music_", "    music_string = music_string:gsub('%.%.', \"%\")\n    music_string\
    \ = music_string:gsub('%.', \"%%.%\")\n    music_string = music_string:gsub('%%.',\
    \ \"%%.%%.%\")\n    music_string = music_string:gsub('%.%%.', \"%%.%%.%%.%\")\n\
    \    music_string = music_string:gsub('%.', \"%%.%%.%%.%%.%\")\n    music_string\
    \ = music_string:gsub('%.%.%.', \"%%.%%.%%.%%.%%.%\")\n    music_string = music_string:gsub('%%.%.',\
    \ \"%%.%%.%%.%%.%%.%%.%\")\n    music_string = music_string:gsub('%%.%%.', \"\
    %%.%%.%%.%%.%%.%%.%%.%\")\n    music_string = music_string:gsub('%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%.%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%.%%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%.%%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%%.%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = music_string:gsub('%.%.%%.%.', \"%%.%%.%%.%%.%%.%%.%%.%%.%%.%%.%%.%\"\
    )\n    music_string = ", "  local results = {}\n  music_string = 'o' .. music_string\
    \ .. 'o'\n  for i = 1, #music_string, 2 do\n    local n = music_string:sub(i,\
    \ i)\n    local n_beats = #n\n    if #n <= 1 then\n      results[i] = n_beats\n\
    \    else\n      local n_beats_without_last = n_beats - #n - 1\n      if n_beats_without_last\
    \ <= 1 then\n        results[i] = n_beats\n      else\n        results[i] = n_beats_without_last\
    \ + 1\n      end\n    end\n  end\n  return results\nend", "  local notes = {}\n\
    \  local notes_count = {}\n  local current_note = nil\n  for _, _ in string.gmatch(music_string,\
    \ \"[%a%A|%a|%.|%s*]\") do\n    local note = tonumber(_)\n    if note == nil then\n\
    \      print(music_string)\n      error()\n    end\n    if note == 0 then\n  \
    \    notes[#notes + 1] = nil\n      notes_count[#notes_count + 1] = 0\n    else\n\
    \      if current_note ~= nil then\n        notes[#notes + 1] = current_note\n\
    \        notes_count[#notes_count + 1] = 0\n      end\n      notes[#notes + 1]\
    \ = note\n      notes_count[#notes_count + 1] = 1\n    end\n    current_note =\
    \ note\n  end\n  if current_note ~= nil then\n    notes[#notes + 1] = current_note\n\
    \    notes_count[#notes_count + 1] = 0\n  end\n  return notes, notes_count\nend",
  "    local beats_table = {}\n    for i = 1, #music_string do\n        local index\
    \ = #beats_table\n        local chars = music_string:sub(i, i)\n        local\
    \ last_note = nil\n        if #chars == 0 then\n            beats_table[index]\
    \ = 4\n        else\n            -- Determine what note it is\n            local\
    \ char = chars:sub(1, 1)\n            if char == 'o' or char == '.' then\n   \
    \             last_note = char\n                beats_table[index] = 4\n     \
    \       elseif char == 'o' then\n                beats_table[index] = 4\n    \
    \        elseif char == '|' then\n                last_note = 'o'\n          \
    \      beats_table[index] = 2\n            elseif char == '.' then\n         \
    \       last_note = 'o'\n                beats_table[index] = 1\n            else\n\
    \                error('Invalid note \"' .. chars .. '\"')\n            end\n\
    \        end\n        if #beats_table == 15 then\n            break\n        end\n\
    \    end\n    return beats_table\nend", "    music_string = music_string or 'o\
    \ o| .| o| o| .| .| .| .| .| o o'\n    music_string = music_string .. ' .'\n \
    \   music_string = music_string .. ' .' .. '|' .. ' .' .. '|' .. ' .' .. '.'",
  "  music_string = music_string .. '#'\n  local music_notes = {}\n  local current_note\
    \ = ''\n  local current_key = ''\n  for i = 1, #music_string do\n    local char\
    \ = music_string[i]\n    if char == '#' then\n      music_notes[#music_notes+1]\
    \ = current_note .. current_key\n      current_note = ''\n      current_key =\
    \ ''\n    else\n      if char == 'o' then\n        current_key = current_key ..\
    \ '|' .. current_key .. '|' .. current_key\n      elseif char == '.' then\n  \
    \      current_key = current_key .. '|' .. current_key\n      elseif char == '|'\
    \ then\n        current_key = current_key .. '|' .. current_key .. '|' .. current_key\n\
    \      else\n        current_key = current_key .. char\n      end\n    end\n \
    \ end\n  music_notes[#music_notes+1] = current_note .. current_key\n  return music_notes\n\
    end\n</cell>\n<cell>", "  -- Create a table where each value is a vector of integers\
    \ representing amount of beats\n  -- that each note lasts.\n  -- The vector length\
    \ is determined by number of 'o's in music_string.\n  local music_table = {}\n\
    \  local os = 0\n  for i = 1, #music_string do\n    if music_string[i] == 'o'\
    \ then\n      local beats = os - 1 -- If last note is a 'o' then subtract 1 from\
    \ os to calculate length\n      if os > 0 then\n        -- If not first note and\
    \ there is another 'o' then last note has extra beats\n        beats = beats +\
    \ 1\n      end\n      music_table[os] = beats\n      os = os + 1\n    elseif music_string[i]\
    \ == 'o|' then\n      local beats = os - 1 -- If last note is a 'o|' then subtract\
    \ 1 from os to calculate length\n      if os > 0 then\n        -- If not first\
    \ note and there is another 'o|' then last note has extra beats\n        beats\
    \ = beats + 1\n      end\n      music_table[os] = beats\n      os = os + 1\n \
    \   elseif music_string[i] == '.|' then\n      local beats = os - 1 -- If last\
    \ note is a '.|' then subtract 1 from os to calculate length\n      if os > 0\
    \ then\n        -- If not first note and there is another '.|' then last note\
    \ has extra beats\n        beats = beats + 1\n      end\n      music_table[os]\
    \ = beats\n      os = os + 1\n    end\n  end\n  return music_table\nend", '  local
    music_table = { }', "    -- Convert music to array of integers\n    local music_array\
    \ = {}\n    for c in music_string:gmatch'o+' do\n        music_array[c] = music_array[c]\
    \ or 0\n        music_array[c] = music_array[c] + 1\n    end", "  local music_table\
    \ = {}\n  for i = 1, #music_string do\n    music_table[#music_table + 1] = {\n\
    \      length = string.len(music_string),\n      note = music_string[i],\n   \
    \   beats = nil,\n    }\n  end", "\tmusic_string = 'o|o|' .. music_string .. 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
  "  local output = {}\n  for i, c in pairs(music_string) do\n    if c == 'o' then\n\
    \      output[i] = 4\n    elseif c == 'o|' then\n      output[i] = 2\n    elseif\
    \ c == '.|' then\n      output[i] = 1\n    end\n  end\n  return output\nend",
  "    music_string = music_string or 'o'\n    local notes = {}\n    local beat =\
    \ 0\n    local note_duration = 0", "\t-- Your code goes here\nend", "    local\
    \ music_table = {}\n    local notes_seen = {}\n    local notes_unseen = {}\n \
    \   for i,c in pairs(music_string) do\n        -- Note is seen\n        if not\
    \ notes_seen[c] then\n            -- Note is unseen\n            notes_unseen[c]\
    \ = 1\n        else\n            -- Note is seen, increment its count\n      \
    \      notes_unseen[c] = notes_unseen[c] + 1\n        end\n        -- Note is\
    \ seen, add it to music table\n        music_table[c] = notes_unseen[c]\n    \
    \    -- All notes seen, note is now unseen\n        notes_seen[c] = nil\n    end\n\
    \    return music_table\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nYeah thanks,\
    \ that worked! And yeah I realize this isn't the most efficient code, but I just\
    \ needed something to get me started.\n<|/ c |>\n<| c |>\nYou should be careful\
    \ about the `else`; if the note is seen more than one time, then the count is\
    \ incremented once per occurrence.\n<|/ c |>\n<| c |>\n, good catch. Fixed.\n\
    <|/ c |>\n<| a dscore=2 |>\nIf you need to write your own implementation:\n<code>",
  "  local music_table = {}\n  local last = 0\n  local music_len = #music_string\n\
    \  for i = 1, music_len do\n    if music_string[i] == '.' then\n      last = last\
    \ + 1\n      music_table[last] = 1\n    elseif music_string[i] == '|' then\n \
    \     last = last + 1\n      music_table[last] = 2\n    elseif music_string[i]\
    \ == 'o' then\n      last = last + 1\n      music_table[last] = 4\n    end\n \
    \ end\n  return music_table\nend", "    local notes = {}\n    music_string = music_string:gsub('.',\
    \ ' 1 ')\n    for _, note in ipairs(music_string:gmatch'(%d+)') do\n        notes[note]\
    \ = notes[note] or 0\n        notes[note] = notes[note] + 1\n    end\n    return\
    \ notes\nend", "  music_string = music_string.trim()\n  if music_string ~= \"\"\
    \ then\n    local elements = music_string:gmatch(\"(%S+)\")\n    local num_beats\
    \ = {}\n    for _, element in pairs(elements) do\n      if element == \".\" then\n\
    \        num_beats[#num_beats+1] = 4\n      elseif element == \"o\" then\n   \
    \     num_beats[#num_beats+1] = 4\n      elseif element == \"|\" then\n      \
    \  num_beats[#num_beats+1] = 2\n      elseif element == \"x\" then\n        num_beats[#num_beats+1]\
    \ = 2\n      else\n        num_beats[#num_beats+1] = 1\n      end\n    end\n \
    \   return num_beats\n  else\n    return {}\n  end\nend", "    music_string =\
    \ music_string\n    -- Convert each character to the corresponding integer that\
    \ describes the music\n    local notes = {}\n    for i = 1, #music_string do\n\
    \        notes[#notes+1] = string.sub( music_string, i, i)\n    end", "  -- Your\
    \ code here\nend", "  local current_note = music_string[1]\n  local music_string_list\
    \ = music_string:gsub('o|.|', '')\n  local music_string_list2 = music_string_list:gsub('.|\
    \ o|', '|o|')\n  local music_string_list3 = music_string_list2:gsub('o|', '.|\
    \ o|')\n  local music_string_list4 = music_string_list3:gsub('.| .| ', '|.|')\n\
    \  local music_string_list5 = music_string_list4:gsub('|.| .', '|.|')\n  local\
    \ music_string_list6 = music_string_list5:gsub('|.| ', '.| |')\n  local music_string_list7\
    \ = music_string_list6:gsub('|.|', '|.|')\n  local music_string_list8 = music_string_list7:gsub('|.',\
    \ '|o|')\n  local music_string_list9 = music_string_list8:gsub('|o', '|o|')\n\
    \  local music_string_list10 = music_string_list9:gsub('|.', '|.|')\n  local music_string_list11\
    \ = music_string_list10:gsub('|.', '|.|')\n  local music_string_list12 = music_string_list11:gsub('|.',\
    \ '|.|')\n  local music_string_list13 = music_string_list12:gsub('|.', '|.|')\n\
    \  local music_string_list14 = music_string_list13:gsub('|.', '|.|')\n  local\
    \ music_string_list15 = music_string_list14:gsub('|.', '|.|')\n  local music_string_list16\
    \ = music_string_list15:gsub('|.', '|.|')\n  local music_string_list17 = music_string_list16:gsub('|.',\
    \ '|.|')\n  local music_string_list18 = music_string_list17:gsub('|.', '|.|')\n\
    \  local music_string_list19 = music_string_list18:gsub('|.', '|.|')\n  local\
    \ music_string_list20 = music_string_list19:gsub('|.', '|.|')\n  local music_string_list21\
    \ = music_string_list20:gsub('|.', '|.|')\n  local music_string_list22 = music_string_list21:gsub('|.',\
    \ '|.|')\n  local music_string", "  music_string = music_string or ''\n  music_string\
    \ = music_string .. 'z'\n  music_string = music_string  -- make sure we always\
    \ have at least one space at the end\n  music_string = music_string  -- make sure\
    \ we always have at least one space at the beginning\n  music_string = music_string\
    \  -- make sure we always have at least one space at the beginning\n  local num_beats\
    \ = {0,0,0,0,0,0,0,0,0,0,0,0}\n  local current_note = music_string[1]\n  local\
    \ notes_found = 1\n  local beats_found = 1\n  local beats_left = 0\n  while true\
    \ do\n    -- if we have not reached end of string, we are done\n    if not music_string:sub(1,1)\
    \ then\n      break\n    end\n    -- if we have not found an acceptable note,\
    \ return early\n    if current_note == 'o' or current_note == '.' or current_note\
    \ == '|' then\n      if notes_found == 0 then\n        return num_beats\n    \
    \  end\n      current_note = music_string[1]\n      notes_found = notes_found\
    \ + 1\n      num_beats[beats_found] = beats_found\n      beats_found = beats_found\
    \ + 1\n    else\n      if current_note == '|' then\n        beats_found = beats_found\
    \ + 1\n      elseif current_note == '.' then\n        beats_left = beats_found\
    \ - beats_left\n        if beats_left < 0 then\n          num_beats[beats_found]\
    \ = beats_found\n        end\n        beats_found = beats_found + 1\n      else\n\
    \        notes_found = notes_found + 1\n      end\n    end\n  end\n  return num_beats\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI tested your solution but there is one problem\
    \ with this code. When I try \"o o| .| o| o| .| .| .| .| o o\" the function return\
    \ nil even though it is supposed to return \"{ 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4\
    \ }\"\n<|/ c |>\n<| c |>\nPlease check out the code I posted above. It works just\
    \ fine with the example you provided, and it returns `{ 4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4 }` as you expected it to work.\n<|/ c |>\n<| c |>\nOkay, I see what\
    \ happened. You're missing out on counting the beats of the notes when the `|`\
    \ comes before them. I added two lines to my answer that account for this.\n<|/\
    \ c |>\n<| c |>\nI actually wrote an implementation for you that doesn't use any\
    \ loops: https://g", "  local table_of_music = {}\n  for _, note in ipairs(music_string)\
    \ do\n    table_of_music[note] = table_of_music[note] or 1\n    table_of_music[note]\
    \ = table_of_music[note] + 1\n  end\n  return table_of_music\nend", "  local t\
    \ = {0, 0, 0, 0, 0, 0, 0, 0}\n  local i = 1\n  local last_beat = 1\n  local notes\
    \ = {0}\n  local last_note = {0, 0, 0, 0, 0, 0, 0, 0}\n  local last_note_symbol\
    \ = 'o'\n  local note_symbol = 'o'\n  local last_note_length = 4", '    music_string
    = music_string.strip()', "  local results = {}\n  local i = 0\n  local last_note\
    \ = ''\n  local note_num = 1", "  music_string = music_string:gsub('[^A-Za-z0-9.]',\
    \ '')\n  music_string = music_string:gsub('(^|\\s)(.)([^A-Za-z0-9.])', '\\\\2\\\
    \\3')\n  music_string = music_string:gsub('(.)([^A-Za-z0-9.])(^|\\s)', '\\\\2\\\
    \\3')\n  music_string = music_string:gsub('(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string\
    \ = music_string:gsub('(.)(^|\\s)(.)(^|\\s)', '\\\\2\\\\3')\n  music_string =\
    \ music_string:gsub('(^|\\s)(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string\
    \ = music_string:gsub('(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\\
    s)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\s)(.)(^|\\s)(.)(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string\
    \ = music_string:gsub('(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\s)(.)(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)', '\\\\2\\\\3')\n  music_string = music_string:gsub('(^|\\\
    s)(.)(^|\\s)(.)(^|\\s)(.)(^", "  local notes = {}\n  local beat = 1\n  for note\
    \ in music_string:gmatch'([o|.]|%S+)' do\n    if note == 'o' then\n      notes[#notes+1]\
    \ = 4\n      beat = 1\n    elseif note == '|' then\n      notes[#notes+1] = 2\n\
    \      beat = 1\n    elseif note == '.' then\n      notes[#notes+1] = 1\n    \
    \  beat = 1\n    else\n      local note_length = tonumber(note)\n      assert(note_length\
    \ > 0, 'Note lengths should be positive')\n      notes[#notes+1] = note_length\n\
    \      beat = beat + note_length\n    end\n  end\n  assert(beat, 'Input music\
    \ is invalid')\n  return notes\nend\n</cell>\n<cell>", "  -- Write your code here\n\
    \  return music_string\nend", "  music_string = music_string or 'o o| .| o| o|\
    \ .| .| .| .| o o'", "    music_string = music_string:lower()\n    local note_string\
    \ = music_string:gsub(\"(o)\", \"%1 %1 %1 %1 %1 %1 %1 %1 %1 %1\")\n    local notes\
    \ = note_string:gsub(\"(.)\", \"%1 %1 %1 %1 %1 %1 %1 %1 %1 %1 %1\")\n    local\
    \ result = {}\n    for i = 1, #notes, 5 do\n        local note_str = notes:sub(i,\
    \ i + 5)\n        local beats = tonumber(note_str)\n        if beats == 0 then\n\
    \            -- Do nothing\n        else\n            result[i] = beats\n    \
    \    end\n    end\n    return result\nend", "  local current_note = nil\n  local\
    \ note_count = {}\n  local current_beat = 0", "    music_string = music_string\
    \ or 'o o| .| o| o| .| .| .| .| .| o o'\n    music_string = music_string:gsub('o',\
    \ '|')\n    music_string = music_string:gsub('\\|', '|')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = music_string:gsub('.',\
    \ '.')\n    music_string = music_string:gsub('.', '.')\n    music_string = musi",
  "    local result = {}\n    local current_chord = music_string:sub(1, 1)\n    local\
    \ chord = music_string:sub(2, 2)\n    local count = 1\n    while count <= music_string:len()\
    \ do\n        local note_or_chord = music_string:sub(count, count+1)\n       \
    \ if note_or_chord == \"\" then\n            result[current_chord] = count\n \
    \           current_chord = \"\"\n            count = count + 1\n        elseif\
    \ note_or_chand == \"o\" then\n            result[current_chord] = count\n   \
    \         current_chord = \"\"\n            count = count + 1\n        elseif\
    \ note_or_chand == \"o|\" then\n            count = count + 1\n        elseif\
    \ note_or_chand == \".|\" then\n            result[current_chord] = count\n  \
    \          current_chord = \"\"\n            count = count + 1\n        else\n\
    \            count = count + 1\n        end\n    end\n    return result\nend",
  "    music_string = music_string\n    -- TODO: Complete function by parsing input\
    \ string and returning table of integers\nend", "  -- Your code here!\n  return\
    \ music_string\nend", "    local music_vector = string.gsub(music_string, \"[|.]\"\
    , \"|\")\n    local music_vector2 = string.gsub(music_vector, \"[|o]\", \"|\"\
    )\n    local music_vector3 = string.gsub(music_vector2, \"[|o|]\", \"|\")\n  \
    \  local music_vector4 = string.gsub(music_vector3, \"[|.|]\", \"|\")\n    local\
    \ music_vector5 = string.gsub(music_vector4, \"[|.|o]\", \"|\")\n    local music_vector6\
    \ = string.gsub(music_vector5, \"[|o|o]\", \"|\")\n    local music_vector7 = string.gsub(music_vector6,\
    \ \"[|.|.|]\", \"|\")\n    local music_vector8 = string.gsub(music_vector7, \"\
    [|.|.|o]\", \"|\")\n    local music_vector9 = string.gsub(music_vector8, \"[|o|o|]\"\
    , \"|\")\n    local music_vector10 = string.gsub(music_vector9, \"[|.|.|.|]\"\
    , \"|\")\n    local music_vector11 = string.gsub(music_vector10, \"[|.|.|.|o]\"\
    , \"|\")\n    local music_vector12 = string.gsub(music_vector11, \"[|o|o|o]\"\
    , \"|\")\n    local music_vector13 = string.gsub(music_vector12, \"[|.|.|.|.|]\"\
    , \"|\")\n    local music_vector14 = string.gsub(music_vector13, \"[|.|.|.|.|o]\"\
    , \"|\")\n    local music_vector15 = string.gsub(music_vector14, \"[|o|o|o|]\"\
    , \"|\")\n    local music_vector16 = string.gsub(music_vector15, \"[|.|.|.|.|.|]\"\
    , \"|\")\n    local music_vector17 = string.gsub(music_vector16, \"[|.|.|.|.|.|o]\"\
    , \"|\")\n    local music_vector18 = string.gsub(music_vector17, \"[|o|o|o|o|]\"\
    , \"|\")\n    local music_vector19 = string.gsub(music_vector18, \"[|.|.|.|.|.|.|]\"\
    , \"|\")\n    local music_vector20 = string.gsub(music_vector19, \"[|.|.|.|.|.|.|o]\"\
    , \"|\")\n    local music_vector21 = string.gsub(", '    local notes = {}', " \
    \ -- Your code here\n  -- Use a table for storing result\n  local music = {} --\
    \ Initialize result\n  local last_note = nil -- Initialize last note\n  local\
    \ notes_per_beat = 1 -- Initialize how many notes are in the beat of a note\n\
    \  local note_length = 0 -- Initialize length of note\n  local last_beat = 0 --\
    \ Initialize last beat\n  for i = 0, #music_string, 1 do\n    local char = music_string[i]\
    \ -- Get next character\n    local note_code = tonumber(char) -- Convert character\
    \ to number\n    if note_code > 127 then\n      notes_per_beat = note_code/128\n\
    \      note_length = note_code % 128\n    else\n      notes_per_beat = tonumber(char)\n\
    \    end\n    -- Find next note start\n    while last_note ~= 'o' and last_note\
    \ ~= '.' and last_note ~= '|' and last_note ~= 'o|' and last_note ~= '' do\n \
    \     i = i + 1\n      char = music_string[i]\n      note_code = tonumber(char)\n\
    \      if note_code > 127 then\n        notes_per_beat = note_code/128\n     \
    \   note_length = note_code % 128\n      else\n        notes_per_beat = tonumber(char)\n\
    \      end\n    end\n    -- Find note end\n    while note_code ~= 127 and last_note\
    \ ~= 'o' and last_note ~= '.' and last_note ~= '|' and last_note ~= 'o|' and last_note\
    \ ~= '' do\n      i = i + 1\n      char = music_string[i]\n      note_code = tonumber(char)\n\
    \      if note_code > 127 then\n        notes_per_beat = note_code/128\n     \
    \   note_length = note_code % 128\n      else\n        notes_per_beat = tonumber(char)\n\
    \      end\n    end\n    -- Save note data\n    local note = {notes_per_beat,\
    \ note_length}\n    if last_note ~= 'o' and last_note ~= '.' and last_note ~=\
    \ '|' and last_note ~= 'o|' and last_note ~= '' and note_code ~= 127 then\n  \
    \    table.insert(music, note) -- Add note to music\n    end\n    -- Update last\
    \ note\n    last_note = note_code\n    -- Update last beat\n    last_beat = i\n\
    \  end\n  return music\nend", "  local notes = { }\n  local last_beat = nil\n\
    \  for note, beat in music_string:gmatch('(.)([|o])+') do\n    table.insert(notes,\
    \ tonumber(note))\n    local current_beat = tonumber(beat)\n    if last_beat ~=\
    \ nil then\n      last_beat = tonumber(beat)\n      table.insert(notes, last_beat\
    \ - current_beat)\n    end\n    last_beat = current_beat\n  end\n  table.sort(notes)\n\
    \  local result = { }\n  for _, note in ipairs(notes) do\n    table.insert(result,\
    \ tonumber(note))\n  end\n  return result\nend", "  music_string = 'o' .. music_string\
    \ .. 'o'\n  music_string = music_string\n  music_string = music_string .. '|'\
    \ .. music_string\n  music_string = music_string .. '.' .. music_string\n  music_string\
    \ = music_string .. '|' .. music_string\n  music_string = music_string .. '.'\
    \ .. music_string\n  music_string = music_string .. '|' .. music_string\n  music_string\
    \ = music_string .. '.' .. music_string\n  music_string = music_string .. '|'\
    \ .. music_string\n  music_string = music_string .. '.' .. music_string\n  music_string\
    \ = music_string .. '|' .. music_string\n  music_string = music_string .. '.'\
    \ .. music_string\n  music_string = music_string .. '|' .. music_string\n  music_string\
    \ = music_string .. '.' .. music_string\n  music_string = music_string .. '|'\
    \ .. music_string\n  music_string = music_string .. '.' .. music_string\n  return\
    \ music_string\nend", "    local table_of_music_notes = {}\n    for s in music_string:gmatch(\"\
    [^%s]+\") do\n        table_of_music_notes[#table_of_music_notes + 1] = tonumber(s)\n\
    \    end\n    return table_of_music_notes\nend", "    local t = {}\n    for c\
    \ in music_string:gmatch('%[%o|.%]') do\n        if c == '.' then\n          \
    \  table.insert(t, 1)\n        else\n            table.insert(t, tonumber(c))\n\
    \        end\n    end\n    return t\nend", "    local notes = {}\n    local last_beat,\
    \ last_note = '', 0", "  local last_note = -1\n  local last_beat = -4\n  local\
    \ notes = {}\n  for i=1,#music_string,1 do\n    local char = music_string:sub(i,i)\n\
    \    if char ~= 'o' and char ~= '|' and char ~= '.' then\n      last_note = char\n\
    \    else\n      if char == '.' then\n        last_beat = last_beat+1\n      elseif\
    \ char == 'o' then\n        notes[#notes+1] = last_beat\n        last_beat = -4\n\
    \      elseif char == '|' then\n        notes[#notes+1] = last_beat\n        last_beat\
    \ = -2\n      end\n    end\n  end\n  return notes\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work.  It outputs an array with a count for each note\
    \ in a string and only counts notes up to but NOT including the beats.  I need\
    \ it to output a table with count for each note up to a beat, not the note.\n\
    <|/ c |>\n<| c |>\nSorry, I missed that part. You should edit your question to\
    \ make it more clear what exactly you need. I'm sure you can get it working then.\n\
    <|/ c |>\n<| c |>\nNo problem.  I've edited the question to make it a little more\
    \ clear what I'm after.  I'm really looking for a solution that can parse a string\
    \ of notes and return the number of beats in each note.  Thanks for helping!\n\
    <|/ c |>\n<| a tags=lua,lua-table,arrays |>\nYou can try this one:\n<code>", " \
    \  local music_table = {}\n   local notes_stack = {}\n   for note, beat in string.gmatch(music_string,\
    \ '(o|\\|).*') do\n      if note == 'o' then\n         music_table[#music_table+1]\
    \ = beat\n      elseif note == 'o|' then\n         music_table[#music_table+1]\
    \ = beat / 2\n      elseif note == '.|' then\n         music_table[#music_table+1]\
    \ = beat - 1\n      elseif note == '|' then\n         music_table[#music_table+1]\
    \ = 1\n      else\n         assert(false)\n      end\n      table.insert(notes_stack,\
    \ note)\n   end\n   if #notes_stack > 0 then\n      -- Here we parse notes stack\n\
    \      -- We have two options, if we have '|' we can get quater note or if we\
    \ have 'o' we can get\n      -- whole note.\n      if notes_stack[1] == '|' then\n\
    \         -- We have quater note\n         music_table[#music_table+1] = beat\
    \ / 4\n         music_table[#music_table+1] = beat - music_table[#music_table+1]\n\
    \      else\n         -- We have whole note\n         music_table[#music_table+1]\
    \ = beat\n         music_table[#music_table+1] = beat\n      end\n   end\n   return\
    \ music_table\nend", "    -- write your code here\nend", "    local result = {}\n\
    \    local last_note = ''\n    local current_note = ''\n    for c in music_string:gmatch('%w+')\
    \ do\n        if c == '.' then\n            if last_note == '.' then\n       \
    \         --  We need to find out if it is last note or just silence\n       \
    \         --  or unknown note.\n                if current_note == 'o' then\n\
    \                    result[#result + 1] = 4\n                elseif current_note\
    \ == 'o|' then\n                    result[#result + 1] = 2\n                else\n\
    \                    result[#result + 1] = 1\n                end\n          \
    \  end\n        end\n        if c == 'o' then\n            current_note = 'o'\n\
    \        elseif c == 'o|' then\n            current_note = 'o|'\n        elseif\
    \ c == '|' then\n            current_note = '|'\n        else\n            --\
    \  We are here when we have encountered a new note.\n            last_note = current_note\n\
    \            current_note = c\n        end\n    end\n    return result\nend",
  "    music_string  = music_string  or 'o'\n    music_string = string.gsub(music_string,\
    \ \"[^o|.]\", \"\")\n    local music_table = {}\n    for i = 1, #music_string\
    \ do \n        local note = music_string[i]\n        if note == 'o' then \n  \
    \          music_table[i] = 4\n        elseif note == 'o|' then \n           \
    \ music_table[i] = 2\n        elseif note == '.|' then \n            music_table[i]\
    \ = 1\n        else\n            music_table[i] = 0\n        end\n    end\n  \
    \  return music_table\nend", "  -- Your code here!\n  -- Don't forget to handle\
    \ errors in your code!\n  return music_string\nend", "  music_string = music_string\
    \ or 'oo o|o .|o o|o .|o o|o .|o o|o .|o o|o .|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o\
    \ o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o o|o ", " \
    \   -- Implement this function from scratch!\n    local music_table = {}\n   \
    \ for i = 1, #music_string do\n        music_table[music_string[i]] = music_string[i]:len()\n\
    \    end\n    return music_table\nend", "  local note_counts = {}\n  for _, note\
    \ in ipairs(music_string) do\n    if note == 'o' then\n      note_counts[#note_counts\
    \ + 1] = 4\n    else if note == 'o|' then\n      note_counts[#note_counts + 1]\
    \ = 2\n    else if note == '.|' then\n      note_counts[#note_counts + 1] = 1\n\
    \    else\n      note_counts[#note_counts + 1] = 0\n    end\n  end\n  return note_counts\n\
    end", "  -- Your code here!\nend", "    local counters = { }\n    for i, v in\
    \ ipairs(music_string) do\n        if v == '.' or v == 'o' then\n            counters[i]\
    \ = 4\n        elseif v == 'o|' then\n            counters[i] = 2\n        elseif\
    \ v == '.|' then\n            counters[i] = 1\n        else\n            error('unknown\
    \ character \"' .. v .. '\"')\n        end\n    end\n    return counters\nend",
  '    local notes, last_note, last_note_length = music_string', "    local beats\
    \ = {}\n    local previous_note = 'o'\n    local note_count = 1\n    for _, note\
    \ in ipairs(music_string) do\n        local last_note = note\n        if note\
    \ == 'o' then\n            if previous_note == 'o' then\n                beats[note_count]\
    \ = 4\n            else\n                beats[note_count] = beats[note_count]\
    \ + 1\n            end\n        else\n            if note == 'o|' then\n     \
    \           beats[note_count] = beats[note_count] + 2\n            elseif note\
    \ == '.|' then\n                beats[note_count] = beats[note_count] + 1\n  \
    \          else\n                beats[note_count] = beats[note_count] + 1\n \
    \           end\n        end\n        previous_note = last_note\n        note_count\
    \ = note_count + 1\n    end\n    return beats\nend", "  music_string = music_string\
    \ or '#'\n  local music_dict = {}\n  for note in music_string:gmatch(\"[%a0-127]\"\
    ) do\n    local note_info = note:sub(1, 2)\n    local beat_count = tonumber(note_info)\n\
    \    if note_info == 'o' then\n      local duration = 4.0 / beat_count * 2\n \
    \     music_dict[note] = music_dict[note] or {}\n      music_dict[note][#music_dict[note]]\
    \ = {duration}\n    elseif note_info == 'o|' then\n      local duration = 2.0\
    \ / beat_count\n      music_dict[note] = music_dict[note] or {}\n      music_dict[note][#music_dict[note]]\
    \ = {duration}\n    elseif note_info == '.|' then\n      local duration = 1.0\
    \ / beat_count\n      music_dict[note] = music_dict[note] or {}\n      music_dict[note][#music_dict[note]]\
    \ = {duration}\n    else\n      print('unknown note')\n    end\n  end\n  return\
    \ music_dict\nend", "  music_string = music_string or 'oo oo oo .| oo oo oo .|\
    \ oo oo oo oo .| .| .| .| .| .| .| oo oo oo oo'\n  local music_table = music_string\
    \ == 'oo oo oo .| oo oo oo .| oo oo oo oo .| .| .| .| .| .| .| oo oo oo oo'\n\
    \    or music_string == 'oo oo oo .| oo oo oo oo .| oo oo oo oo .| .| .| .| .|\
    \ .| .| oo oo oo oo oo oo oo oo oo oo oo oo oo oo'\n    or music_string == '.|\
    \ oo oo oo oo .| oo oo oo oo .| oo oo oo oo .| .| .| .| .| .| .| oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo oo oo oo'\n    or music_string == 'oo oo oo\
    \ .| oo oo oo oo .| oo oo oo oo .| .| .| .| .| .| .| oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo oo'\n    or music_string == 'oo oo oo .| oo oo\
    \ oo oo .| oo oo oo oo .| .| .| .| .| .| .| oo oo oo oo oo oo oo oo oo oo oo oo\
    \ oo oo oo oo oo oo oo oo oo oo'\n    or music_string == '.| oo oo oo oo .| oo\
    \ oo oo oo .| oo oo oo oo .| .| .| .| .| .| oo oo oo oo oo o", "  local notes\
    \ = music_string\n  local results = {}\n  for i = 0, #notes, 1 do\n    local beats\
    \ = tonumber(notes[i:(i + 1)])\n    if beats == 0 then break end\n    results[beats]\
    \ = results[beats] or 1\n  end\n  return results\nend", "    music_string = music_string:gsub('.{%d}',\
    \ function(x)\n        local note = x:sub(1, 1)\n        local beats = tonumber(x:sub(2))\n\
    \        if beat == 0 then\n            -- whole note, lasts 4 beats\n       \
    \     if note == 'o' then\n                return 4\n            elseif note ==\
    \ 'o|' then\n                return 2\n            elseif note == '.|' then\n\
    \                return 1\n            else\n                error('Unknown note\
    \ \"' .. note .. '\"')\n            end\n        elseif beat == 1 then\n     \
    \       -- half note, lasts 2 beats\n            if note == 'o' then\n       \
    \         return 2\n            elseif note == 'o|' then\n                return\
    \ 1\n            elseif note == '.|' then\n                return 1\n        \
    \    else\n                error('Unknown note \"' .. note .. '\"')\n        \
    \    end\n        elseif beat == 2 then\n            -- quater note, lasts 1 beat\n\
    \            if note == 'o' then\n                return 1\n            elseif\
    \ note == 'o|' then\n                return 1\n            elseif note == '.|'\
    \ then\n                return 1\n            else\n                error('Unknown\
    \ note \"' .. note .. '\"')\n            end\n        else\n            error('Unknown\
    \ beat \"' .. beat .. '\"')\n        end\n    end)\n    return music_string\n\
    end\n</code>\nThis code is quite a mess, I tried to make it better. But as I said,\
    \ you can also do it with regular expressions, it's up to you ;-)\n<|/ a |>\n\
    <| a dscore=1 |>\nTo solve this problem, you need to write some code that parses\
    \ the string. Below is an example of how this could be done in Lua 5.2.\n<code>",
  "    music_string = music_string or 'o o| .| o| o| .| .| .| .| o o'\n    local music_notes\
    \ = {'o', 'o|', '|.|'}\n    local beats = { }", "    local beats = {}\n    local\
    \ current_beat = 1\n    local current_note = nil\n    for c in music_string do\n\
    \        if c == '.' then\n            -- A . means this note is not the last\
    \ one\n            table.insert(beats, current_beat - current_note)\n        \
    \    -- Increment the beat number by one\n            current_beat = current_beat\
    \ + 1\n            -- Reset beat number\n            current_note = nil\n    \
    \    elseif c == '|' then\n            -- A | means this note is the last one\n\
    \            current_note = current_note + 1\n        elseif c == 'o' then\n \
    \           -- A o means this note is the first one\n            table.insert(beats,\
    \ current_beat)\n            -- Increment the beat number by one\n           \
    \ current_beat = 1\n            -- Reset beat number\n            current_note\
    \ = 1\n        else\n            -- Some other note\n            current_note\
    \ = current_note + 1\n        end\n    end\n    table.insert(beats, current_beat\
    \ - current_note)\n    return beats\nend\n</code>\nSo I hope it helps you.\n<|/\
    \ a dscore=2 |>\n<| a tags=lua,string,numbers |>\nThe only way I can think of\
    \ is to do some manipulation of your music string before inserting it into the\
    \ table:", "  local music_notes = {}\n  local current_beat = 0\n  for note_string,\
    \ _ in music_string.gmatch('%(%w+)(%w+)') do\n    local note = tonumber(note_string)\n\
    \    if not note or note < 0 then break end\n    local beats_per_note = round(4/note)\n\
    \    if current_beat > 0 then\n      music_notes[#music_notes+1] = beats_per_note\n\
    \    end\n    current_beat = current_beat + beats_per_note\n  end\n  return music_notes\n\
    end\n</cell>\n<cell>", "  local music_map = {}\n  for k, v in ipairs(music_string)\
    \ do\n    music_map[tonumber(k)] = tonumber(v)\n  end\n  return music_map\nend",
  "    local notes = {}\n    local n_beats = {}\n    -- Loop over the string and collect\
    \ notes and beats\n    for i = 1, #music_string do\n        local current_note\
    \ = music_string[i]\n        -- If we encounter a pipe, note is half or quarter\n\
    \        if current_note == '|' then\n            notes[#notes + 1] = 1\n    \
    \        notes[#notes + 1] = 1\n            notes[#notes + 1] = 0\n          \
    \  -- Keep track of how many beats we have for last note\n            n_beats[#n_beats\
    \ + 1] = 4\n        elseif current_note == 'o' then\n            -- This is the\
    \ whole note, lasts 4 beats\n            notes[#notes + 1] = 4\n            notes[#notes\
    \ + 1] = 4\n            notes[#notes + 1] = 0\n            -- Keep track of how\
    \ many beats we have for last note\n            n_beats[#n_beats + 1] = 4\n  \
    \      else\n            -- Note is not half or quarter, so we have to figure\
    \ it out ourselves.\n            -- 'o' means whole note, 'o|' means half note,\
    \ '.|' means quater note\n            if current_note == 'o' then\n          \
    \      -- This is the whole note, lasts 4 beats\n                notes[#notes\
    \ + 1] = 4\n                notes[#notes + 1] = 4\n                notes[#notes\
    \ + 1] = 0\n                -- Keep track of how many beats we have for last note\n\
    \                n_beats[#n_beats + 1] = 4\n            elseif current_note ==\
    \ 'o|' then\n                -- This is the half note, lasts 2 beats\n       \
    \         notes[#notes + 1] = 2\n                notes[#notes + 1] = 2\n     \
    \           notes[#notes + 1] = 0\n                -- Keep track of how many beats\
    \ we have for last note\n                n_beats[#n_beats + 1] = 2\n         \
    \   elseif current_note == '.|' then\n                -- This is the quarter note,\
    \ lasts one beat\n                notes[#notes + 1] = 1\n                notes[#notes\
    \ + 1] = 1\n                notes[#notes + 1] = 0\n                -- Keep track\
    \ of how many beats we have for last note\n                n_beats[#n_beats +\
    \ 1] = 1\n            end\n        end\n    end\n    return notes, n_beats\nend",
  "  music_string = music_string or \"null\"\n  music_string = music_string..\" \"\
    \n  local music_array = {}\n  local string_length = #music_string\n  for i = 0,\
    \ string_length - 1 do\n    if music_string[i] == \".\" then\n      music_array[i]\
    \ = 1\n    elseif music_string[i] == \"o\" then\n      music_array[i] = 4\n  \
    \  elseif music_string[i] == \"|\" then\n      music_array[i] = 2\n    end\n \
    \ end\n  return music_array\nend", "    music_string = music_string:gsub('%[%a..%Z]',\
    \ function(note)\n        note = note:lower()\n        if note == 'o' then\n \
    \           return 1\n        elseif note == 'o|' then\n            return 4\n\
    \        elseif note == '.|' then\n            return 1\n        end\n       \
    \ return nil\n    end)", "  music_string = music_string or ''\n  local notes =\
    \ {}\n  local n = 0\n  for i,c in ipairs(music_string) do\n    if c == '.' then\n\
    \      notes[n] = notes[n] + 1\n      n = n + 1\n    end\n    if c == 'o' then\n\
    \      notes[n] = notes[n] + 4\n      n = n + 1\n    end\n  end\n  return notes\n\
    end", "    -- YOUR CODE HERE\n    -- Don't forget to return empty table for empty\
    \ music string!\nend", "    local music_chars = {}\n    local notes = nil\n  \
    \  local number_of_notes = 0\n    local number_of_beats = 0\n    local last_beat\
    \ = 0\n    local note_count = 0\n    local number_of_o = 0\n    local number_of_dot\
    \ = 0\n    for i=1,#music_string,1 do\n        local c = music_string[i]\n   \
    \     if c == '.' then\n            note_count = note_count + 1\n            number_of_dot\
    \ = number_of_dot + 1\n            last_beat = last_beat\n        else\n     \
    \       if c == 'o' then\n                note_count = note_count + 1\n      \
    \          number_of_o = number_of_o + 1\n                last_beat = last_beat\n\
    \            end\n            if c == '|' then\n                note_count = note_count\
    \ + 1\n                number_of_notes = number_of_notes + 1\n               \
    \ last_beat = last_beat\n            end\n            music_chars[#music_chars\
    \ + 1] = c\n        end\n    end\n    if note_count ~= 4 then\n        print('WARNING:\
    \ incorrect note count for input string.')\n    end\n    if number_of_notes >\
    \ 1 then\n        print('WARNING: incorrect number of notes for input string.')\n\
    \    end\n    if number_of_o > 1 then\n        print('WARNING: incorrect number\
    \ of octaves for input string.')\n    end\n    if number_of_dot > 1 then\n   \
    \     print('WARNING: incorrect number of dots for input string.')\n    end\n\
    \    if number_of_notes > 1 then\n        print('WARNING: incorrect number of\
    \ notes for input string.')\n    end\n    if last_beat ~= 5 then\n        print('WARNING:\
    \ incorrect last beat for input string.')\n    end\n    return music_chars, number_of_notes,\
    \ number_of_beats, number_of_o, number_of_dot\nend", "  music_string = 'o|'..\
    \ music_string ..'o'\n  music_string = music_string:gsub('.', '|')\n  music_string\
    \ = music_string:gsub('o', 'o|')\n  local beats = {}\n  for i = 1, #music_string\
    \ do\n    if music_string[i] == '|' then\n      table.insert(beats, 4)\n    elseif\
    \ music_string[i] == 'o' then\n      table.insert(beats, 1)\n    else\n      table.insert(beats,\
    \ 1)\n    end\n  end\n  return beats\nend", "    local result = {}\n    local\
    \ i = 0\n    while i < #music_string do\n        if music_string[i] == '.' then\n\
    \            table.insert(result, 4)\n            i = i + 1\n        elseif music_string[i]\
    \ == 'o' then\n            table.insert(result, 1)\n            i = i + 1\n  \
    \      elseif music_string[i] == '|' then\n            table.insert(result, 2)\n\
    \            i = i + 1\n        else\n            assert(false)\n        end\n\
    \    end\n    return result\nend", "    music_string = music_string\n    local\
    \ notes = {'o', '|'}\n    local notes_table = {}\n    local n = 0\n    local i\
    \ = 0\n    local j = 0\n    while i < #music_string do\n        if music_string[i]\
    \ == 'o' then\n            if j > 0 then\n                notes_table[j] = notes_table[j]\
    \ + 1\n            end\n            n = n + 1\n            notes_table = {}\n\
    \            notes_table[j] = n\n            j = j + 1\n        elseif music_string[i]\
    \ == '|' then\n            if j > 0 then\n                notes_table[j] = notes_table[j]\
    \ + 1\n            end\n            n = n + 1\n            notes_table = {}\n\
    \            notes_table[j] = n\n            j = j + 1\n        elseif music_string[i]\
    \ ~= '.' then\n            if notes ~= {} then\n                n = notes[1] -\
    \ 1\n            end\n            notes = {music_string[i]}\n        end\n   \
    \     i = i + 1\n    end\n    return notes_table\nend\n</code>\n<|/ a dscore=1\
    \ tags=string,lua,algorithm |>\n<| c |>\nI tried to change it to `musicstring`\
    \ but I have errors. I will work on this later if you can explain to me how it\
    \ works i would appreciate it\n<|/ c |>\n<| c |>\nI think my problem was that\
    \ it was supposed to be `musicstring`. I will try to do some research on this\
    \ later.\n<|/ c |>\n<| c |>\nOkay, I added another function that works with `musicstring`.\
    \ You can compare them and see what works better for you. If you decide to use\
    \ this new function please mark my answer as accepted and I will edit my answer.\n\
    <|/ c |>\n<| a tags=string,lua,algorithm |>\nThis was my first idea to solve the\
    \ problem:\n<code>", "  music_string = music_string:gsub('.','')\n  music_string\
    \ = music_string:gsub('o','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = music_string:gsub('o|','0')\n\
    \  music_string = music_string:gsub('o|','0')\n  music_string = musi", "  music_string\
    \ = music_string .. ' '\n  music_string = music_string  .. '|' -- add one '|'\
    \ at the end of the music string\n  music_string = music_string  .. '|' -- add\
    \ one '|' at the end of the music string\n  music_string = music_string  .. '|'\
    \ -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the music string\n  music_string = music_string\
    \  .. '|' -- add one '|' at the end of the ", "  local result = {}\n  local current_beat\
    \ = 0\n  local beat_count = 0\n  local current_note = ''\n  for i, letter in ipairs(music_string)\
    \ do\n    local is_chord = letter == '.' or letter == '|'\n    if not is_chord\
    \ then\n      current_note = letter\n    else\n      beat_count = beat_count +\
    \ 1\n      if beat_count > 3 then\n        beat_count = 0\n      end\n      if\
    \ not result[current_note] then\n        result[current_note] = 1\n      else\n\
    \        result[current_note] = result[current_note] + 1\n      end\n    end\n\
    \    if i == #music_string and beat_count > 0 then\n      result[current_note]\
    \ = result[current_note] + 1\n    end\n  end\n  return result\nend", "    -- Initialize\
    \ return table with 0's\n    local results = {}\n    -- Iterate over characters\
    \ in the music string\n    for _, music_character in ipairs(music_string) do\n\
    \        -- If current music character is a \"special\" one and we haven't seen\
    \ this music character yet\n        if music_character == 'o' and #results > 0\
    \ then\n            -- Then set the last value of the previous item in the return\
    \ table to its value\n            results[#results - 1] = results[#results - 1]\n\
    \        elseif music_character == 'o|' then\n            -- If this is the last\
    \ music character and we haven't seen this music character yet\n            if\
    \ #results > 0 then\n                -- Then set the last value of the previous\
    \ item in the return table to its value\n                results[#results - 1]\
    \ = results[#results - 1]\n            else\n                -- Otherwise set\
    \ this music character to '|' since it's the start of a note\n               \
    \ results.insert(1, '|')\n            end\n        elseif music_character == '.|'\
    \ then\n            -- If this is the last music character and we haven't seen\
    \ this music character yet\n            if #results > 0 then\n               \
    \ -- Then set the last value of the previous item in the return table to its value\n\
    \                results[#results - 1] = results[#results - 1]\n            else\n\
    \                -- Otherwise set this music character to '.' since it's the start\
    \ of a note\n                results.insert(1, '.')\n            end\n       \
    \ else\n            -- If this music character is anything else\n            table.insert(results,\
    \ 0)\n        end\n    end\n    -- Return table\n    return results\nend", " \
    \ local note_counts = {}\n  local last_note = ''\n  for note_symbol in music_string\
    \ do\n    local note = get_note(note_symbol)\n    if note ~= last_note then\n\
    \      if note_symbol == '.' then\n        note_counts[#note_counts + 1] = 1\n\
    \      else\n        note_counts[#note_counts+1] = note_counts[#note_counts] *\
    \ note.beats\n      end\n    end\n    last_note = note_symbol\n  end\n  return\
    \ note_counts\nend", "    local function parse_note(note)\n        return tonumber(note)\
    \ or tonumber(note .. '|')\n    end\n    local function parse_sequence(sequence)\n\
    \        local counts = {}\n        for note in sequence:gmatch('([^|]+)')\n \
    \           do\n                counts[parse_note(note)] = counts[parse_note(note)]\
    \ or 0\n                counts[parse_note(note)] = counts[parse_note(note)] +1\n\
    \            end\n        end\n        return counts\n    end\n    return parse_sequence(music_string)\n\
    end\n</cell>\n<text>\nNext we implement an inverse function which converts a table\
    \ of frequencies (integer) to a musical note.", "    -- YOUR CODE HERE\nend",
  "    music_string = music_string:gsub('[^a-zA-z]', '')\n    music_string = music_string:gsub('\
    \ ', '')\n    local result = {}\n    for i = 1, music_string:len() do\n      \
    \  local c = music_string:sub(i,i)\n        if c == 'o' then\n            result[i]\
    \ = 4\n        elseif c == 'o|' then\n            result[i] = 2\n        elseif\
    \ c == '.|' then\n            result[i] = 1\n        end\n    end\n    return\
    \ result\nend\n</code>\n<|/ a |>\n<| a tags=lua |>\nHere's one more solution that\
    \ I came up with that is actually a little more elegant than my other solution.\n\
    <code>", "    -- Convert music string to array of ascii characters\n    local\
    \ music_chars = {}\n    local music_len = #music_string\n    for i = 1, music_len\
    \ do\n        local music_char = music_string[i]\n        music_chars[#music_chars\
    \ + 1] = music_char\n    end\n    music_chars = music_chars + {' '}\n    music_chars\
    \ = music_chars + {' '}\n    -- Parse notes\n    local notes = {}\n    for i =\
    \ 1, music_len do\n        -- Parse note and check if note exists\n        local\
    \ note = music_chars[i]\n        if note == 'o' or note == 'O' then\n        \
    \    -- Whole-note\n            notes[#notes + 1] = 4\n        elseif note ==\
    \ '|' or note == '/' then\n            -- Half-note\n            notes[#notes\
    \ + 1] = 2\n        elseif note == '.' then\n            -- Quater-note\n    \
    \        notes[#notes + 1] = 1\n        else\n            -- Invalid note\n  \
    \          -- TODO\n        end\n    end\n    return notes\nend", "    music_string\
    \ = music_string or 'o'\n    local notes = {}\n    for note in music_string:gmatch(\"\
    (.-)|%1$\") do\n        if note == '.' then\n            notes[#notes+1] = 1\n\
    \        else\n            notes[#notes+1] = notes[#notes+1] * 12 + tonumber(note)\n\
    \        end\n    end\n    return notes\nend", "   music_string = music_string\
    \ or 'o'\n   music_string = music_string.trim()\n   if music_string ~= '' then\n\
    \      music_string = music_string[1]\n      music_string = music_string..music_string\n\
    \      music_string = music_string.trim()\n   end\n   local notes = music_string.split('\
    \ ')\n   local music_table = {}\n   for i = 1, #notes do\n      local last_note\
    \ = notes[i]\n      if notes[i] ~= '' then\n         last_note = notes[i]\n  \
    \       notes[i] = last_note\n      end\n      music_table[last_note] = music_table[last_note]\
    \ or 1\n   end\n   return music_table\nend", "    local result = {}\n    local\
    \ count = 0\n    for s in music_string:gmatch('(%a+)') do\n        if s[1] ~=\
    \ 'o' then\n            count = count + 1\n        elseif s[1] == 'o' then\n \
    \           count = count + 4\n        elseif s[1] == '|' then\n            count\
    \ = count + 2\n        elseif s[1] == '.' then\n            count = count + 1\n\
    \        else\n            count = count + 1\n        end\n        result[#result\
    \ + 1] = count\n    end\n    return result\nend", "   assert(music_string ~= '',\
    \ \"Empty string\")\n   music_string = music_string:gsub(\"%s\", \"\")\n   local\
    \ mappings = {\n      [\"o\"] = 1,\n      [\"o|\"] = 2,\n      [\".|\"] = 3\n\
    \   }\n   local note_table = {}\n   for i, c in ipairs(music_string) do\n    \
    \  local note = mappings[c]\n      if note then\n         table.insert(note_table,\
    \ note)\n      end\n   end\n   return note_table\nend", "    music_string = music_string.trim()\n\
    \    music_string = music_string.lstrip()\n    music_string = music_string.rstrip()",
  '  -- The only thing you need to do is to implement the following function from
    exercise 2.', "   local notes = {}\n   local last_note = nil", "    music_string\
    \ = music_string\n        -- replace all spaces with a single space and split\
    \ into lines\n        -- then trim each line\n        -- trim whitespace between\
    \ letters\n        -- split by bar\n        -- strip empty lines\n        -- remove\
    \ lines which only contain whitespace or bar characters\n        -- remove empty\
    \ lines\n        -- remove empty lines\n        -- split into lines with a single\
    \ space between them\n        -- trim all whitespace before and after each line\n\
    \        -- remove empty lines\n        -- remove empty lines\n        -- split\
    \ into lines with a single space between them\n        -- trim all whitespace\
    \ before and after each line\n        -- remove empty lines\n        -- remove\
    \ empty lines\n        -- split into lines with a single space between them\n\
    \        -- trim all whitespace before and after each line\n        -- remove\
    \ empty lines\n        -- remove empty lines\n        -- split into lines with\
    \ a single space between them\n        -- trim all whitespace before and after\
    \ each line\n        -- remove empty lines\n        -- remove empty lines\n  \
    \      -- split into lines with a single space between them\n        -- trim all\
    \ whitespace before and after each line\n        -- remove empty lines\n     \
    \   -- remove empty lines\n        -- split into lines with a single space between\
    \ them\n        -- trim all whitespace before and after each line\n        --\
    \ remove empty lines\n        -- remove empty lines\n        -- split into lines\
    \ with a single space between them\n        -- trim all whitespace before and\
    \ after each line\n        -- remove empty lines\n        -- remove empty lines\n\
    \        -- split into lines with a single space between them\n        -- trim\
    \ all whitespace before and after each line\n        -- remove empty lines\n \
    \       -- remove empty lines\n        -- split into lines with a single space\
    \ between them\n        -- trim all whitespace before and after each line\n  \
    \      -- remove empty lines\n        -- remove empty lines\n        -- split\
    \ into lines with a single space between them\n        -- trim all whitespace\
    \ before and after each line\n        -- remove empty lines\n        -- remove\
    \ empty lines\n        -- split into lines with a single space between them\n\
    \        -- trim all whitespace before and after each line\n        -- remove\
    \ empty lines\n        -- remove empty lines\n        -- split into lines with\
    \ a single space between them\n        -- trim all whitespace before and after\
    \ each line\n        -- remove empty lines\n        -- remove empty lines\n  \
    \      -- split into lines with a single space between them\n        -- trim all\
    \ whitespace before and ", "    music_string = music_string..'\\0' -- fix problem\
    \ with nil character\n    local music_chars = {}\n    local note_durations = {\
    \ }", "    music_string = music_string\n    local music_table = nil\n    local\
    \ beats_table = nil\n    music_table = {}\n    beats_table = {}\n    local last_beat\
    \ = 0\n    local last_note = nil\n    local last_note_length = nil\n    for i\
    \ = 1, #music_string, 1 do\n        local char = music_string[i]\n        if char\
    \ == 'o' then\n            last_beat = last_beat + 4\n        elseif char == '|'\
    \ then\n            last_beat = last_beat + 2\n        elseif char == '.' then\n\
    \            last_beat = last_beat + 1\n        else\n            last_beat =\
    \ last_beat\n        end\n        music_table[#music_table + 1] = {beats=last_beat,\
    \ length=last_beat}\n        if last_note ~= nil and last_note_length ~= nil then\n\
    \            music_table[#music_table + 1]['note'] = last_note\n            music_table[#music_table\
    \ + 1]['note_length'] = last_note_length\n        end\n        last_note = char\n\
    \        last_note_length = #music_string\n        last_beat = 0\n    end\n  \
    \  return music_table\nend", "  music_string = music_string or 'o o| .| o| o|\
    \ .| .| .| .| .| o o'\n  music_string = music_string\n    ..'o|'\n    ..'o|'\n\
    \    ..'.|'\n    ..'o|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'o|'\n    ..'o|'\n    ..'.|'\n    ..'o|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'o|'\n    ..'o|'\n    ..'.|'\n    ..'o|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'o|'\n    ..'o|'\n\
    \    ..'.|'\n    ..'o|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'o|'\n    ..'o|'\n    ..'.|'\n    ..'o|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n\
    \    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.|'\n    ..'.", "  music_string\
    \ = music_string:gsub('\\001', '')\n  music_string = music_string:gsub('\\002',\
    \ '')", "  local music_notes = {}\n  local n = 0\n  local last_beat = 0", "  --\
    \ Convert string to table of ASCII codes\n  local ascii_table = { }\n  for i =\
    \ 1, #music_string do\n    table.insert(ascii_table, string.byte(music_string:sub(i,\
    \ i+1)))\n  end\n  local parsed_music = { }\n  for i = 1, #ascii_table, 1 do\n\
    \    if ascii_table[i] == 123 then\n      -- Skip first three characters\n   \
    \   i = i + 2\n    end\n    table.insert(parsed_music, #parsed_music + 1)\n  end\n\
    \  table.sort(parsed_music)\n  return parsed_music\nend", "  music_string = music_string\
    \ or 'o'\n  local beat_map = {'o','o|','.|'}\n  local num_beats = {}\n  for i\
    \ = 1, #music_string do\n    if music_string[i] == beat_map[1] then\n      num_beats[i]\
    \ = 4\n    elseif music_string[i] == beat_map[2] then\n      num_beats[i] = 2\n\
    \    elseif music_string[i] == beat_map[3] then\n      num_beats[i] = 1\n    else\n\
    \      num_beats[i] = 0\n    end\n  end\n  return num_beats\nend", "  local notes\
    \ = music_string:gsub('o|.', '')\n  local beats = { }\n  for i = 1, #notes do\n\
    \    local note = notes[i]\n    local beat = math.ceil(#note / 4)\n    if note:sub(1,\
    \ 1) == '|' then\n      beat = beat / 2\n    end\n    if #beats > beat then break\
    \ end\n    table.insert(beats, beat)\n  end\n  table.sort(beats)\n  table.sort(beats)\n\
    \  local note_length = #notes\n  return beats:map(function(beat) return beat +\
    \ 1 end)\nend", "  local patterns = {\n    [[o]] = 4 * [[o|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[.|]] * [[o|]] * [[.|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[.|]] * [[.|]] * [[o|]] * [[.|]] * [[.|]] * [[.|]] * [[o|]] * [[.|]] * [[.|]]\
    \ * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[.|]] * [[o|]] * [[.|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]]\
    \ * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]] * [[o|]] * [[.|]]\
    \ * [[o|]] * [[", "    -- Write your code here\n    local notes = {}\n    local\
    \ i = 0\n    local current_note\n    local current_beat = 0\n    local current_duration\
    \ = 0\n    local current_repeats = 1\n    for char in music_string do\n      \
    \  if char == \"o\" then\n            current_beat = 0\n            current_duration\
    \ = 0\n            current_repeats = 1\n            current_note = char\n    \
    \    elseif char == \"|\" then\n            current_beat = 0\n            current_duration\
    \ = 1\n            current_repeats = 1\n            current_note = char\n    \
    \    elseif char == \".\" then\n            current_beat = 0\n            current_duration\
    \ = current_duration * 4\n            current_repeats = 1\n        elseif char\
    \ == \"b\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = 'b'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_repeats = 1\n            else\n                current_beat\
    \ = current_beat + 1\n                current_duration = current_duration * 4\n\
    \                current_repeats = 1\n            end\n        elseif char ==\
    \ \"b#\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = 'b#'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_repeats = 1\n            else\n                current_beat\
    \ = current_beat + 1\n                current_duration = current_duration * 4\n\
    \                current_repeats = 1\n            end\n        elseif char ==\
    \ \"b&\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = 'b&'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_repeats = 1\n            else\n                current_beat\
    \ = current_beat + 1\n                current_duration = current_duration * 4\n\
    \                current_repeats = 1\n            end\n        elseif char ==\
    \ \"#\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = '#'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_repeats = 1\n            else\n                current_beat\
    \ = current_beat + 1\n                current_duration = current_duration * 4\n\
    \                current_repeats = 1\n            end\n        elseif char ==\
    \ \"b%\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = 'b%'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_repeats = 1\n            else\n                current_beat\
    \ = current_beat + 1\n                current_duration = current_duration * 4\n\
    \                current_repeats = 1\n            end\n        elseif char ==\
    \ \"b+\" then\n            if current_note ~= 'b' then\n                current_note\
    \ = 'b+'\n                notes[i] = current_duration\n                i = i +\
    \ 1\n                current_beat = 0\n                current_duration = 0\n\
    \                current_", "  local parsed_music = {}\n  for music_note in music_string\
    \ do\n    parsed_music[music_note] = parsed_music[music_note] + 1\n  end\n  return\
    \ parsed_music\nend", "    music_string = music_string.trim()\n    music_string\
    \ = music_string:gsub('(^|[.])(.)', \"\\1\\2\")\n    music_string = music_string:gsub('(.)(.)',\
    \ '\\1\\2')\n    music_string = music_string:gsub('(.)', '\\1')", "    local music_table\
    \ = {}\n    for i = 1, #music_string do\n        local n = tonumber(music_string[i])\n\
    \        if n ~= nil then\n            music_table[i] = n\n        end\n    end\n\
    \    return music_table\nend", "    music_string = '' .. music_string .. '\\0'",
  "  local beats = { }\n  local index = 0\n  for i = 1, #music_string do\n    local\
    \ char = music_string:sub(i, i)\n    if char == 'o' then\n      beats[index] =\
    \ 4\n      index = index + 1\n    elseif char == 'o|' then\n      beats[index]\
    \ = 2\n      index = index + 1\n    elseif char == '.|' then\n      beats[index]\
    \ = 1\n      index = index + 1\n    end\n  end\n  return beats\nend", "  -- Your\
    \ code here\n  local music_table = {}\n  local i = 1\n  while i <= #music_string\
    \ do\n    if music_string[i] == 'o' then\n      if i == 1 then\n        music_table[1]\
    \ = 4\n      elseif i == 2 then\n        music_table[1] = music_table[i-2] + 2\n\
    \      elseif i == 3 then\n        music_table[1] = music_table[i-3] + 2\n   \
    \   elseif i == 4 then\n        music_table[1] = music_table[i-4] + 1\n      else\n\
    \        music_table[1] = music_table[i-2] + 1\n      end\n      i = i + 1\n \
    \   elseif music_string[i] == 'o|' then\n      if i == 1 then\n        music_table[1]\
    \ = 2\n      elseif i == 2 then\n        music_table[1] = music_table[i-2] + 2\n\
    \      elseif i == 3 then\n        music_table[1] = music_table[i-3] + 2\n   \
    \   elseif i == 4 then\n        music_table[1] = music_table[i-4] + 1\n      else\n\
    \        music_table[1] = music_table[i-2] + 1\n      end\n      i = i + 1\n \
    \   elseif music_string[i] == '.|' then\n      if i == 1 then\n        music_table[1]\
    \ = 1\n      elseif i == 2 then\n        music_table[1] = music_table[i-2] + 1\n\
    \      elseif i == 3 then\n        music_table[1] = music_table[i-3] + 2\n   \
    \   elseif i == 4 then\n        music_table[1] = music_table[i-4] + 2\n      else\n\
    \        music_table[1] = music_table[i-2] + 2\n      end\n      i = i + 1\n \
    \   elseif music_string[i] == '|' then\n      if i == 1 then\n        music_table[1]\
    \ = 1\n      elseif i == 2 then\n        music_table[1] = music_table[i-2] + 2\n\
    \      elseif i == 3 then\n        music_table[1] = music_table[i-3] + 2\n   \
    \   elseif i == 4 then\n        music_table[1] = music_table[i-4] + 2\n      else\n\
    \        music_table[1] = music_table[i-2] + 2\n      end\n      i = i + 1\n \
    \   end\n    music_table[i] = 1\n    i = i + 1\n  end\n  return music_table\n\
    end", "  local music_list = music_string:gmatch('%a+')\n  local music_table =\
    \ {}\n  for i = 1, #music_list do\n    music_table[i] = {}\n    local notes =\
    \ music_list[i]:gmatch('(.-)|%a+')\n    for j = 1, #notes do\n      if notes[j]:sub(1,\
    \ 1) == 'o' then\n        music_table[i][j] = 4\n      elseif notes[j]:sub(1,\
    \ 1) == 'o|' then\n        music_table[i][j] = 2\n      elseif notes[j]:sub(1,\
    \ 1) == '.|' then\n        music_table[i][j] = 1\n      else\n        print('Error\
    \ parsing string `'..music_string..'`: unknown note `'..notes[j]:sub(1, 1)..'`')\n\
    \        return\n      end\n    end\n  end\n  return music_table\nend", "   --\
    \ First we check whether music string contains only letters other than \".\" or\
    \ \"o\".\n   -- If there is such a case, return empty table.\n   if music_string\
    \ ~= string.gsub(music_string, \"[^o. ]\", \"\")\n   then\n      error(\"Music\
    \ string does not consist of letters other than '.' or 'o'.\")\n   end", "   \
    \ music_string = music_string or 'o o| .| o| o| .| .| .| .| o o'\n    local music_map\
    \ = {}\n    music_string = music_string:gsub('([oO])', '\\\\1 ')\n    local notes\
    \ = {\n        ['C', 'D', 'E', 'F', 'G', 'A', 'B'],\n        ['C', 'C#', 'D',\
    \ 'D#', 'E', 'F#', 'G#', 'A#', 'B#'],\n        ['C#', 'C#', 'D#', 'D#', 'E#',\
    \ 'F#', 'G#', 'A#', 'B#'],\n    }\n    for i = 0, #notes do music_map[notes[i]]\
    \ = 0\n    for i = 1, music_string:len() do\n        local note, dur = music_string:sub(i,\
    \ i+1)\n        if note:sub(1, 1) == '|' then music_map[note] ~= dur else\n  \
    \          music_map[note] = dur\n        end\n    end\n    return music_map\n\
    end\n</code>\nAs you can see it is not so difficult to implement this solution\
    \ for all possible musical notes.\n<|/ a dscore=4 |>\n<| c |>\nThanks for your\
    \ answer. I would like to test your code before I accept it. I don't understand\
    \ the `[|o]` construction. Could you please explain it in detail?\n<|/ c |>\n\
    <| c |>\nI mean this pattern: `[|o]` - note with a | or o as a first symbol in\
    \ the string and every next symbol is a note.\n<|/ c |>\n<| c |>\nSo `[|o]` matches\
    \ notes which have either a | or a o as the first character? Can you please elaborate\
    \ on what happens behind the scenes in this construction?\n<|/ c |>\n<| c |>\n\
    Yes, it matches all notes which have first symbol in the string `|` or `o`. For\
    \ each note in the string it tries to match it exactly as in `notes[i]:sub(1,\
    \ 1) == note` - `[|o]` matches `|` or `o`, while `notes[i]:sub(1, 1) ~= '|'` or\
    \ `notes[i]:sub(1, 1) ~= 'o'` - `[|o]` doesn't match `|o` or `|`, so this pattern\
    \ should be matched for every single note in the string.\n<|/ c |>\n<| a |>\n\
    A simple solution without regex:\n<code>", "\tlocal beats = {}\n\tlocal notes\
    \ = {'o', 'o|', '\\\\.', '\\\\.', '\\\\.', '\\\\.', '\\\\.', '\\\\.', 'o'}\n\t\
    local position = 1\n\tfor i, note in pairs(notes) do\n\t\t-- Find beat position\
    \ of note\n\t\tposition = string.find(music_string, note)\n\t\tif position > 0\
    \ then\n\t\t\t-- Calculate beat of note\n\t\t\t-- If note starts at the beginning\
    \ of the music string then we do not have a beat yet\n\t\t\t-- So we add 4 to\
    \ our count if beat is needed\n\t\t\tlocal beat = position - math.ceil(position\
    \ / 4) - 1\n\t\t\t-- Add beat to our table\n\t\t\ttable.insert(beats, beat)\n\t\
    \tend\n\tend\n\treturn beats\nend", "  music_string = music_string or '0'\n  music_string\
    \ = 'o' .. music_string\n  local table = { }\n  local patterns = {\n    '^o(.+)$',\n\
    \    '^o(.+)o$',\n    '^(.+)\\.$',\n    '^(.+)\\.(.+)$',\n    '^(.+)\\.(.+)\\\
    .$',\n    '^(.+)\\.(.+)\\.(.+)$',\n    '^(.+)\\.(.+)\\.(.+)\\.$',\n    '^(.+)\\\
    .(.+)\\.(.+)\\.(.+)$',\n    '^(.+)\\.(.+)\\.(.+)\\.(.+)\\.$',\n  }\n  for pattern\
    \ in patterns do\n    local match = re.match(pattern, music_string)\n    if match\
    \ then\n      local note_code = tonumber(match[1])\n      if note_code == 0 then\
    \ note_code = 1\n      else note_code = tonumber(match[2]) end\n      table[tonumber(match[4])]\
    \ = note_code\n      music_string = string.sub(music_string, string.len(pattern)\
    \ + 1)\n    end\n  end\n  return table\nend", "    local music_dict = {}\n   \
    \ local last_note = ''\n    local last_beat = 1\n    local note_to_beat = {}\n\
    \    for note in music_string:gmatch(\"o|.|\"):gmatch(\"([^|]*)\") do\n      \
    \  local beat = note_to_beat[note]\n        if beat then\n            music_dict[beat]\
    \ = music_dict[beat] + 1\n        else\n            music_dict[last_beat] = 1\n\
    \            note_to_beat[note] = last_beat\n        end\n        last_beat =\
    \ last_beat + 1\n    end\n    return music_dict\nend", "    local music_table\
    \ = nil\n    music_string = music_string.gsub('.', \"\")\n    for note in music_string\
    \ do\n        if note == 'o' then\n            music_table = {}\n        elseif\
    \ note == 'o|' then\n            music_table = {table.concat(music_table, 4)}\n\
    \        elseif note == '.|' then\n            music_table = {table.concat(music_table,\
    \ 1)}\n        end\n    end\n    return music_table\nend", "    music_string =\
    \ music_string or \"\"\n    local notes = music_string:gsub(\"^\\s*([o|.])(%.*)$\"\
    , \"%2\")\n    local durations = music_string:gsub(\"^\\s*([o|.])(%.*)$\", \"\
    %1\")\n    if notes == \"\" then return nil end\n    local notes_table = parse_notes(notes)\n\
    \    local durations_table = parse_durations(durations)\n    return notes_table\n\
    end", "    music_string = music_string .. '#'", "  music_string = music_string:gsub('.',\
    \ '|')\n  music_string = music_string:gsub('o', 'o|')\n  music_string = music_string:gsub('|',\
    \ 'o|')\n  music_string = music_string:gsub('\\\\|', '|')", "   -- parse music_string\
    \ using some kind of loop\n   -- count how many beats it has\n   local output\
    \ = {}\n   for i = 1, #music_string do\n      if music_string[i] == ':' then\n\
    \         output[#output + 1] = #output\n      end\n   end\n   return output\n\
    end", "    local music_table = {}\n    music_string = music_string.gsub('o|.','o|.|')\n\
    \    for i = 0, #music_string, 1 do\n        local note = music_string[i]\n  \
    \      local rest = music_string:substring(i+1)\n        if note == 'o' then\n\
    \            music_table[i] = 4\n        elseif note == '.|' then\n          \
    \  music_table[i] = 1\n        elseif note == 'o|' then\n            music_table[i]\
    \ = 2\n        else\n            music_table[i] = 1\n        end\n        i =\
    \ i + 1\n    end\n    return music_table\nend\n</cell>\n<cell>", "  -- your code\
    \ here\nend\n</cell>\n<text>\nPart II. Exploring the music data\nNow that we have\
    \ covered the input and parsing functions (let's test them out first), let's explore\
    \ the data.\nWe will be working with a small dataset that contains only music\
    \ notes.\nThis dataset can be found here: ", "    music_string = music_string\
    \ or ''\n    music_string = music_string:gsub('.|', 'o|')\n    music_string =\
    \ music_string:gsub('o|', 'o|')\n    music_string = music_string:gsub('.||', '|')\n\
    \    music_string = music_string:gsub('o|', 'o')\n    music_string = music_string:gsub('|',\
    \ '.')\n    music_string = music_string:gsub('o', '.|')\n    music_string = music_string:gsub('|',\
    \ '.|')\n    music_string = music_string:gsub('|', '|')\n    music_string = music_string:gsub('o|o',\
    \ 'o|o|o|')\n    music_string = music_string:gsub('.o|o', '.o|o|o|')\n    music_string\
    \ = music_string:gsub('.o|.o', '.o|o|o|o')\n    music_string = music_string:gsub('.o|o|o',\
    \ '.o|o|o|o|')\n    music_string = music_string:gsub('o.o|o', 'o.o|o|o')\n   \
    \ music_string = music_string:gsub('.o|o|o', '.o|o|o|o')\n    music_string = music_string:gsub('o.o|.o',\
    \ 'o.o|o|o')\n    music_string = music_string:gsub('.o|o|o', '.o|o|o|o')\n   \
    \ music_string = music_string:gsub('o.o', 'o.o|o|o')\n    music_string = music_string:gsub('.o|o',\
    \ 'o.o|o|o')\n    music_string = music_string:gsub('o.o|o|o', '.o|o|o|o')\n  \
    \  music_string = music_string:gsub('o.o|o|o|o', '.o|o|o|o|o')\n    music_string\
    \ = music_string:gsub('o.o|o|o|o|o', '.o|o|o|o|o|o|')\n    music_string = music_string:gsub('o.o|o|o|o|o|o',\
    \ '.o|o|o|o|o|o|o|o')\n    music_string = music_string:gsub('o.o|", "  music_string\
    \ = music_string or \"o o| .| o| o| .| .| .| .| .| o o\"\n  local music_dict =\
    \ {}\n  local last_note = music_string[1]\n  local last_beats = 0\n  local beat_count\
    \ = 1\n  local index = 1\n  while index do\n    if music_string[index] ~= last_note\
    \ then\n      beat_count = beat_count - 1\n      if beat_count > 0 then\n    \
    \    music_dict[last_note] = beat_count\n      end\n      last_beats = 0\n   \
    \   last_note = music_string[index]\n    end\n    if music_string[index] ~= '|'\
    \ and music_string[index] ~= '.' then\n      beat_count = beat_count + 1\n   \
    \   last_beats = last_beats + beat_count\n    end\n    index = index + 1\n  end\n\
    \  if beat_count > 0 then\n    music_dict[last_note] = beat_count\n  end\n  return\
    \ music_dict\nend", "    -- parse music string by splitting on space\n    local\
    \ music_notes = music_string:gsub(' ', '|')", "  local notes = {}\n  local note_count\
    \ = 1\n  local beat_count = 0\n  for i = 1, #music_string do\n    if music_string[i]\
    \ == note then\n      notes[note_count] = note_count\n      note_count = 1\n \
    \     beat_count = 0\n    else\n      if music_string[i] == '|' then\n       \
    \ note_count += 1\n      else\n        note_count += 1\n        beat_count = note_count\
    \ * 4\n      end\n    end\n  end\n  return notes\nend\n</cell>\n<text>\nPart 2\
    \ - Music Encoding Functions", '  local music_table = { }', "  music_string =\
    \ music_string or ''\n  music_string = music_string[1:] or music_string\n  music_string\
    \ = music_string:gsub('.', \" \")\n  music_string = music_string:gsub('o', 'O')\n\
    \  music_string = music_string:gsub('O', 'o')\n  music_string = music_string:gsub('|',\
    \ '.')\n  music_string = music_string:gsub('\\\\|', '\\\\')\n  music_string =\
    \ music_string:gsub('*', '*')\n  music_string = music_string:gsub('*', '*')\n\
    \  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('*',\
    \ '*')\n  music_string = music_string:gsub('*', '*')\n  music_string = music_string:gsub('",
  "    local notes = {}\n    local count = 1\n    for symbol in music_string:gmatch('.')\
    \ do\n        local symbol = symbol:lower()\n        -- Every symbol represents\
    \ one note.\n        if symbol:sub(1, 1) == 'o' then\n            -- If symbol\
    \ is whole note, lasts four beats.\n            notes[#notes + 1] = 4\n      \
    \  elseif symbol:sub(1, 1) == '|' then\n            -- If symbol is half note,\
    \ lasts two beats.\n            notes[#notes + 1] = 2\n        elseif symbol:sub(1,\
    \ 1) == '.' then\n            -- If symbol is quater note, lasts one beat.\n \
    \           notes[#notes + 1] = 1\n        else\n            error('Invalid symbol\
    \ in music string.')\n        end\n        count = count + 1\n    end\n    --\
    \ Return table of integers representing beats count.\n    return notes\nend",
  "    local notes = {'c', 'd', 'e', 'f', 'g', 'a', 'b'}\n    local last_beat = music_string\n\
    \    local song_length = 0\n    local song_beats = { }\n    local song_tempo =\
    \ 1\n    local song_notes = { }", "    music_string = music_string:gsub('%w+',\
    \ function(note)\n        return note:sub(1)\n    end)", "    music_string = music_string:gsub('\
    \ ', ' ')", "    local beats = {}\n    for char in music_string do\n        local\
    \ note_char = char\n        local note_last_beats = 4", "  music_string = music_string\
    \ or \"o o| .| o| o| .| .| .| .| .| o o\"\n  local last_beats, last_note = 1,\
    \ 1\n  local parsed_notes = {}\n  for i=1, #music_string do\n    if music_string[i]\
    \ == \".\" then\n      last_note = last_note + 2\n    elseif music_string[i] ==\
    \ \"o\" then\n      last_note = last_note\n    elseif music_string[i] == \"|\"\
    \ then\n      last_note = last_note\n    else\n      parsed_notes[last_note] =\
    \ parsed_notes[last_note] or 1\n      last_note = last_note + 1\n    end\n  end\n\
    \  -- print parsed_notes\n  return parsed_notes\nend", "  music_string = music_string\
    \ or ''\n  local music_table = {}\n  for _,note in ipairs(music_string) do\n \
    \   if note == '.' then\n      music_table[_] = music_table[_] or 1\n    elseif\
    \ note == 'o' then\n      music_table[_] = music_table[_] or 4\n    elseif note\
    \ == 'o|' then\n      music_table[_] = music_table[_] or 2\n    elseif note ==\
    \ '.|' then\n      music_table[_] = music_table[_] or 1\n    end\n  end\n  return\
    \ music_table\nend", "  -- Initialize the counters\n  local note_counts = {}\n\
    \  for note in {'o', 'o|', 'o', 'o', 'o', 'o', 'o', 'o', 'o'}\n  do\n    note_counts[note]\
    \ = 0\n  end", "  local notes = {}\n  for i = 1, #music_string, 1 do\n    if music_string[i]\
    \ == '.' then\n      notes[#notes+1] = 4\n    elseif music_string[i] == '|' then\n\
    \      notes[#notes+1] = 2\n    elseif music_string[i] == 'o' then\n      notes[#notes+1]\
    \ = 1\n    end\n  end\n  return notes\nend", "    local music_table = {}\n   \
    \ for _, note in ipairs(music_string) do\n        music_table[note] = music_table[note]\
    \ ~= nil and music_table[note] + 1 or 1\n    end\n    return music_table\nend",
  "    music_string = music_string.strip()\n    if music_string == '' then return\
    \ {} end", "    -- Write your code here!\n    music_string = music_string.strip()\n\
    \    if music_string:sub(1, 1) = '.' then\n        music_string = music_string.sub(2)\n\
    \    end", "    local music_notes = {}\n    for note in music_string:gmatch('([^|.]+)')\n\
    \    do\n        local octave = tonumber(note:sub(1,1))\n        local music_note\
    \ = tonumber(note:sub(2))\n        music_notes[music_note] = music_notes[music_note]\
    \ or {}\n        music_notes[music_note][octave] = music_notes[music_note][octave]\
    \ or 0\n        music_notes[music_note][octave] = music_notes[music_note][octave]\
    \ + 1\n    end\n    return music_notes\nend", "    local notes = {}\n    for c\
    \ in music_string:gmatch('.') do\n        if c == 'o' then\n            table.insert(notes,\
    \ 4)\n        elseif c == 'o|' then\n            table.insert(notes, 2)\n    \
    \    elseif c == '.|' then\n            table.insert(notes, 1)\n        else\n\
    \            error('Cannot understand note \"' .. c .. '\"')\n        end\n  \
    \  end\n    return notes\nend", "    local results = {}\n    -- go through each\
    \ char of string\n    for i = 1, #music_string do\n        local char = music_string:sub(i,\
    \ i)\n        -- check if char is a chord\n        if char == '|' then\n     \
    \       -- add current note to chord\n            -- if we are on the last note\
    \ in a chord, add the next note in the chord\n            if i == #music_string\
    \ then\n                results[#results + 1] = 4\n            else\n        \
    \        results[#results + 1] = 2\n            end\n            -- add next note\
    \ to chord\n            results[#results + 1] = 1\n            -- reset counter\n\
    \            i = 1\n        end\n        -- check if char is a whole note\n  \
    \      if char == 'o' then\n            -- add current note to chord\n       \
    \     results[#results + 1] = 4\n            -- add next note to chord\n     \
    \       results[#results + 1] = 1\n            -- reset counter\n            i\
    \ = 1\n        end\n    end\n    return results\nend", "    local beats = { 0,\
    \ 0, 0, 0, 0, 0, 0 }\n    for i = 1, #music_string do\n        local c = music_string[i]\n\
    \        if c == 'o' or c == 'o|' or c == '.|' then\n            beats[#beats\
    \ + 1] = 4\n        else\n            local num_beats\n            if c == 'b'\
    \ then\n                num_beats = 4\n            elseif c == '#' then\n    \
    \            num_beats = 2\n            else\n                num_beats = 1\n\
    \            end\n            beats[#beats + 1] = (beats[#beats + 1] or 0) + num_beats\n\
    \        end\n    end\n    return beats\nend\n</code>\n<|/ a tags=lua,algorithm\
    \ |>\n<| a dscore=1 |>\nThe basic idea (and an implementation) is the following:",
  "    music_string = music_string or 'o'\n    local last_beat = {}\n    for i = 1,\
    \ #music_string do -- Loop through all chars in string\n        local char = music_string:sub(i,\
    \ i)\n        if char == 'o' then\n            last_beat[#last_beat + 1] = 4\n\
    \        elseif char == '|' then\n            last_beat[#last_beat + 1] = 2\n\
    \        elseif char == '.' then\n            last_beat[#last_beat + 1] = 1\n\
    \        else\n            error('Music string parsing error: Unexpected character:\
    \ ' .. char)\n        end\n    end\n    return last_beat\nend", "    local note_counts\
    \ = {}\n    music_string = music_string:gsub('[^o|.|]', '')\n    for i = 1, #music_string\
    \ do\n        local character = music_string[i]\n        local beats = character\n\
    \        if character == \"o\" then\n            beats = beats * 4\n        end\n\
    \        if character == \"|\" then\n            beats = beats * 2\n        end\n\
    \        if character == \".\" then\n            beats = 1\n        end\n    \
    \    if note_counts[beats] ~= nil then\n            note_counts[beats] = note_counts[beats]\
    \ + 1\n        else\n            note_counts[beats] = 1\n        end\n    end\n\
    \    return note_counts\nend", "    local notes = {'o', 'o|', '.|'}\n    local\
    \ beats = {}\n    for i, note in ipairs(music_string) do\n        local beat =\
    \ 1\n        note = note:sub(1, 1)\n        if note == 'o' then\n            beat\
    \ = note\n        elseif note == 'o|' then\n            beat = note / 2\n    \
    \    elseif note == '.|' then\n            beat = 1\n        else\n          \
    \  -- the note was incorrectly encoded\n            return nil\n        end\n\
    \        beats[#beats + 1] = beat\n    end\n    return beats\nend", "  -- Your\
    \ code here\n  assert(music_string ~= nil, 'Music string is nil')\n  music_string\
    \ = music_string:gsub('.', tonumber)\n  if music_string:len() <= 0 then\n    return\
    \ {}\n  end\n  music_string = music_string:trim()\n  local parsed_notes = {}\n\
    \  local note = music_string[1]\n  music_string = music_string:gsub('%s+$', '')\n\
    \  local note_length = 0\n  local note_counter = 0\n  while note_counter < music_string:len()\
    \ do\n    note_length = note_length + 1\n    if note == '.' then\n      note =\
    \ 'o'\n    elseif note == 'o' then\n      note = 'o|'\n    elseif note == 'o|'\
    \ then\n      note = '.|'\n    end\n    parsed_notes[note_length] = parsed_notes[note_length]\
    \ + 1\n    note = music_string[note_counter + 1]\n    music_string = music_string:sub(note_counter\
    \ + 2)\n    note_counter = note_counter + 3\n  end\n  return parsed_notes\nend",
  "    local parsed_notes = {}\n    local current_note = {}\n    for symbol in music_string:gmatch(\"\
    [^|.]*\") do\n        local note_length = tonumber(symbol)\n        local note\
    \ = {}\n        if symbol == 'o' then\n            note.lasts = 4\n          \
    \  note.note = symbol\n            parsed_notes[#parsed_notes + 1] = {note}\n\
    \        elseif symbol == 'o|' then\n            note.lasts = 2\n            note.note\
    \ = symbol\n            parsed_notes[#parsed_notes + 1] = {note}\n        elseif\
    \ symbol == '.|' then\n            note.lasts = 1\n            note.note = symbol\n\
    \            parsed_notes[#parsed_notes + 1] = {note}\n        else\n        \
    \    error('Invalid symbol: ' .. symbol)\n        end\n    end\n    for i = 1,\
    \ #parsed_notes do\n        if parsed_notes[i].note:sub(1, 1) == '.' then\n  \
    \          note = parsed_notes[i].note:sub(2)\n            parsed_notes[i].note\
    \ = note .. '|' .. parsed_notes[i-1].note\n        end\n    end\n    return parsed_notes\n\
    end", "    music_string = music_string\n    music_string = music_string.gsub('o',\
    \ '').gsub('o|', '').gsub('.|', '')\n    return music_string:gsub('\\W+', function()\
    \ return 0 end):gsub('%d+', tonumber):gsub('[^%d]+', ' '):gsub(' ', 0):gsub('(%.?)%d+',\
    \ function(capture, digit) return tonumber(digit) end):gsub('(%d+)', function(capture,\
    \ digit) return tonumber(digit) end)\nend", "    local notes = {0, 0, 0, 0, 0,\
    \ 0}\n    local beats = {0, 0, 0, 0, 0, 0}\n    local i = 0\n    local length\
    \ = music_string:len()\n    while i < length do\n        if music_string:sub(i\
    \ - 1, 1)~='.' and music_string:sub(i - 1, 1)~='|' then\n            notes[music_string:sub(i\
    \ - 1, 1)] = notes[music_string:sub(i - 1, 1)] + 1\n        elseif music_string:sub(i\
    \ - 1, 1)~='.' and music_string:sub(i - 1, 1)=='|' then\n            notes[music_string:sub(i\
    \ - 1, 1)] = notes[music_string:sub(i - 1, 1)] + 1\n            notes[music_string:sub(i\
    \ - 1, 2)] = notes[music_string:sub(i - 1, 2)] + 1\n        elseif music_string:sub(i\
    \ - 1, 1)== '.' then\n            notes[music_string:sub(i - 1, 1)] = notes[music_string:sub(i\
    \ - 1, 1)] + 1\n            beats[music_string:sub(i - 1, 2)] = beats[music_string:sub(i\
    \ - 1, 2)]\n        else\n            notes[music_string:sub(i - 1, 1)] = notes[music_string:sub(i\
    \ - 1, 1)] + 1\n            beats[music_string:sub(i - 1, 2)] = beats[music_string:sub(i\
    \ - 1, 2)]\n        end\n        i = i + 1\n    end", "    local patterns = {\n\
    \        ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1,\n    }\n    local\
    \ parsed_music = {}\n    local beat_counter = 1\n    local last_beat = 0\n   \
    \ for symbol in music_string:gmatch(\"[%w|.]+\") do\n        if patterns[symbol]\
    \ == 1 then\n            parsed_music[beat_counter] = parsed_music[beat_counter]\
    \ + 1\n        else\n            parsed_music[beat_counter] = parsed_music[beat_counter]\
    \ + patterns[symbol]\n        end\n        last_beat = beat_counter\n        beat_counter\
    \ = beat_counter + 1\n    end\n    return parsed_music\nend", "    local result\
    \ = {}\n    -- We need a note to track which note is last\n    local note = 'o'\n\
    \    -- If this note is the same as the last one, increase the result by 1\n \
    \   -- otherwise initialize result and increase it\n    for i = 1, #music_string\
    \ do\n        if music_string[i] == note and note ~= 'o' then\n            table.insert(result,\
    \ #result)\n        elseif music_string[i] ~= note then\n            if note ==\
    \ 'o' then\n                table.insert(result, 1)\n            else\n      \
    \          table.insert(result, 0)\n            end\n            note = music_string[i]\n\
    \        end\n    end\n    table.insert(result, #result)\n    return result\n\
    end", "    local notes = {}\n    local last_note = ''", "    local note_table,\
    \ beat_count = unpack(music_string)\n    if note_table:find('o') then\n      \
    \  note_table:remove('o')\n        beat_count = 4\n    elseif note_table:find('o|')\
    \ then\n        note_table:remove('o|')\n        beat_count = 2\n    elseif note_table:find('.|')\
    \ then\n        note_table:remove('.|')\n        beat_count = 1\n    end\n   \
    \ return note_table, beat_count\nend", "  local result = {}\n  local beat = 1\n\
    \  local i = 0", "    music_string = music_string  -- string with musical notes\n\
    \    music_string = music_string   -- remove extra spaces\n    music_string =\
    \ music_string   -- remove extra linefeeds\n    music_string = music_string  \
    \ -- remove extra carriage returns\n    music_string = music_string   -- remove\
    \ extra tabs", "\tlocal notes = {}\n\tlocal last = {}", "    music_string = ''\
    \ .. music_string .. ''\n    local notes = {}\n    for i = 1, #music_string do\n\
    \        local note = music_string:sub(i,i)\n        if note == '.' then\n   \
    \         notes[#notes+1] = 1\n        elseif note == 'o' then\n            notes[#notes+1]\
    \ = 4\n        elseif note:sub(1, 1) == '|' then\n            notes[#notes+1]\
    \ = 2\n        elseif note:sub(1, 1) == 'o' then\n            notes[#notes+1]\
    \ = 1\n        else\n            notes[#notes+1] = 0\n        end\n    end\n \
    \   return notes\nend", "    music_string = music_string or 'oo|.|ooo|.|.|||.|||||.||'\n\
    \    music_string = music_string  -- strip out white space\n    music_string \
    \  = 'o|.o|oo|.|.|||.|||||.|||o|.o|oo|.|.|||.|||||.||' -- pad out to 32 symbols\n\
    \    music_string   = music_string .. '|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o'\
    \ -- append one more for good measure\n    music_string   = music_string .. '|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o'\
    \ -- append one more for good measure\n    music_string   = music_string .. '|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o'\
    \ -- append one more for good measure\n    music_string   = music_string .. '|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o'\
    \ -- append one more for good measure\n    music_string   = music_string .. '|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o'\
    \ -- append one more for good measure\n    music_string   = ", "    local beats\
    \ = {}\n    local last_note = ''\n    for note in music_string:gmatch('.') do\n\
    \        if note == 'o' then\n            table.insert(beats, 4)\n           \
    \ last_note = note\n        elseif note == '|' then\n            table.insert(beats,\
    \ 2)\n            last_note = note\n        elseif note == '.' then\n        \
    \    table.insert(beats, 1)\n            last_note = note\n        else\n    \
    \        error('Unknown music format!')\n        end\n    end\n    table.insert(beats,\
    \ 1)\n    local note_to_beats = {}\n    local num_notes = 0\n    for note in music_string:gmatch('.')\
    \ do\n        local num_beats = 0\n        for i = 1, #beats do\n            if\
    \ beats[i] < 4 then\n                num_beats = num_beats + 1\n            end\n\
    \        end\n        if note ~= last_note then\n            if note_to_beats[note]\
    \ == nil then\n                note_to_beats[note] = {}\n            end\n   \
    \         note_to_beats[note][num_notes] = num_beats\n            num_notes =\
    \ num_notes + 1\n        end\n        last_note = note\n    end\n    return note_to_beats\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
