name: HumanEval_105_by_length
language: lua
prompt: "-- Given a table of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting table, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
  -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if next(arr) == nil then return {} end\n    local out = table.new{\n\
    \        ['One'] = arr[1],\n        ['Two'] = arr[2],\n        ['Three'] = arr[3],\n\
    \        ['Four'] = arr[4],\n        ['Five'] = arr[5],\n        ['Six'] = arr[6],\n\
    \        ['Seven'] = arr[7],\n        ['Eight'] = arr[8],\n        ['Nine'] =\
    \ arr[9],\n    }\n    local last, i, j, len = #out, 1, 0\n    for i = 2, #arr\
    \ do\n        if arr[i] > last then\n            if len > 0 then\n           \
    \     local key, val = out[len]\n                -- We may have a number with\
    \ more than two digits\n                if len > 1 then\n                    local\
    \ last = out[len - 1]\n                    out[len - 1] = val\n              \
    \      out[len] = key\n                end\n                -- We have more than\
    \ 9 digits, sort them by their length and reverse them\n                for j\
    \ = len + 2, #out do\n                    local v = out[j]\n                 \
    \   out[j] = out[len]\n                    out[len] = v\n                end\n\
    \                len = last\n            end\n            out[1] = arr[i]\n  \
    \          last = arr[i]\n        end\n        i = i + 1\n    end\n    if len\
    \ > 0 then\n        local key, val = out[len]\n        -- We may have a number\
    \ with more than two digits\n        if len > 1 then\n            local last =\
    \ out[len - 1]\n            out[len - 1] = val\n            out[len] = key\n \
    \       end\n        -- We have more than 9 digits, sort them by their length\
    \ and reverse them\n        for j = len + 2, #out do\n            local v = out[j]\n\
    \            out[j] = out[len]\n            out[len] = v\n        end\n      \
    \  len = last\n    end\n    return out\nend", "  local ans = {}\n  for _, v in\
    \ ipairs(arr) do\n    local num = tonumber(v)\n    if not num then continue end\n\
    \    ans[#ans + 1] = num\n  end\n  if #ans > 0 then\n    table.sort(ans)\n   \
    \ for _ = 1, #ans do\n      ans[ans[_]] = One\n    end\n  end\n  return ans\n\
    end", "    local lengths = {}\n    for i = 1, #arr do\n        local length =\
    \ tostring(arr[i])\n        if lengths[length] == nil then\n            lengths[length]\
    \ = i\n        end\n    end\n    table.sort(lengths, function(a, b)\n        if\
    \ a < b then return -1 end\n        if a == b then return 0 end\n        return\
    \ 1 end\n    end)\n    local result = {}\n    for i = 1, #arr do\n        local\
    \ length = tostring(arr[i])\n        if lengths[length] ~= i then\n          \
    \  result[length] = arr[lengths[length]]\n        end\n    end\n    for i = 1,\
    \ 10 do\n        if result[tostring(i)] ~= nil then\n            result[tostring(i)]\
    \ = result[tostring(i)] .. \"Thousand\"\n        end\n    end\n    return result\n\
    end", "  local sorted_arr = arr.sorted()\n  local len = #sorted_arr\n  if len\
    \ == 0 then\n    return {}\n  end\n  local table = { }\n  for i = 1, len-1 do\n\
    \    local num = sorted_arr[i]\n    local digit = string.sub(num, 1, 1)\n    if\
    \ not table[digit] then\n      table[digit] = string.format(\"%g\", num)\n   \
    \ end\n  end\n  return table\nend", "  local result = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    if length < 1 or length > 9 then\n      table.insert(result,\
    \ length)\n    else\n      local num\n      repeat\n        num = math.floor(math.random()\
    \ * 10)\n      until length + num == length\n      table.insert(result, num +\
    \ length)\n    end\n  end\n  table.sort(result)\n  for i = #result, 1, -1 do\n\
    \    table.insert(result, result[i])\n  end\n  local index = 1\n  local string\
    \ = ''\n  for i = #result, 1, -1 do\n    local digit = result[i]\n    if index\
    \ == 1 then\n      digit = string\n    end\n    string = '\"' .. digit .. '\"\
    ' .. string\n    index = index + 1\n  end\n  return result\nend", "  local sorted_table\
    \ = {}\n  for i = 1, 9 do\n    sorted_table[arr[i]] = i\n  end", "  local ones\
    \ = {}\n  local twos = {}\n  local threes = {}\n  local fours = {}\n  local fives\
    \ = {}\n  local sixes = {}\n  local sevens = {}\n  local eights = {}\n  local\
    \ nines = {}\n  local length = 0\n  local results = {}", "    local results =\
    \ {}\n    local i = 0\n    while i < #arr do\n        local item = arr[i]\n  \
    \      if item == nil then\n            table.insert(results, nil)\n        elseif\
    \ item == 1 then\n            table.insert(results, \"One\")\n        elseif item\
    \ == 2 then\n            table.insert(results, \"Two\")\n        elseif item ==\
    \ 3 then\n            table.insert(results, \"Three\")\n        elseif item ==\
    \ 4 then\n            table.insert(results, \"Four\")\n        elseif item ==\
    \ 5 then\n            table.insert(results, \"Five\")\n        elseif item ==\
    \ 6 then\n            table.insert(results, \"Six\")\n        elseif item == 7\
    \ then\n            table.insert(results, \"Seven\")\n        elseif item == 8\
    \ then\n            table.insert(results, \"Eight\")\n        elseif item == 9\
    \ then\n            table.insert(results, \"Nine\")\n        else\n          \
    \  table.insert(results, \"Unknown\")\n        end\n        i = i + 1\n    end\n\
    \    return results\nend\n</cell>\n<cell>", "  local function f(n)\n    local\
    \ num = tonumber(n)\n    if not num then return nil end\n    if n < 0 then num\
    \ = -num\n    elseif num < 1 or num > 9 then return end\n    return arr[num-1]\n\
    \  end\n  return table.sort(arr,f)\nend", "  local tbl = {}\n  for i = 1, 9 do\n\
    \    local val = arr[i]\n    if not val then\n      table.insert(tbl, \"\")\n\
    \      continue\n    end\n    local digits = math.log(val, 10)\n    if digits\
    \ <= 0 then\n      table.insert(tbl, \"One\")\n      continue\n    end\n    if\
    \ digits < 8 then\n      table.insert(tbl, \"One\")\n      continue\n    end\n\
    \    local last = tbl[#tbl]\n    local lastDigits = math.log(last, 10)\n    local\
    \ newDigits = digits - lastDigits + 8\n    local extraDigits = digits - lastDigits\n\
    \    local lastName = last:sub(1, newDigits)\n    local extraName = (newDigits\
    \ + extraDigits) + lastName\n    local newName = table[extraDigits]:sub(1, extraName)\n\
    \    table.insert(tbl, newName)\n  end\n  return tbl\nend", "  local table = arr\n\
    \  if table == nil then\n    return {}\n  end\n  local max_num = #table\n  local\
    \ nums = {}\n  for i=1,max_num do\n    local num = table[i]\n    local n = math.floor(math.log10(num))\n\
    \    if n == 0 then\n      n = -1\n    end\n    if n < 0 or n >= 9 then\n    \
    \  n = -1\n    end\n    if n >= 1 then\n      local nr = 10^(n-1)\n      local\
    \ digit = num / nr\n      num = num - digit*nr\n      nums[digit] = num\n    end\n\
    \  end\n  table.sort(nums)\n  local out = {}\n  for i=1,max_num do\n    out[nums[i]]\
    \ = i\n  end\n  return out\nend", "  if #arr == 0 then\n    return {}\n  end",
  "  local names = {}\n  for k, v in pairs(arr) do\n    table.insert(names, v)\n \
    \ end\n  table.sort(names)\n  for i, v in ipairs(names) do\n    arr[i] = names[v]\n\
    \  end\n  return names\nend", "  local result = {}\n  for i = 1, 10 do\n    local\
    \ num = arr[i]\n    if num then\n      local name\n      for name, _ in pairs(map_length)\
    \ do\n        if num == map_length[name] then\n          break\n        end\n\
    \      end\n      if name then\n        result[#result+1] = name\n      end\n\
    \    end\n  end\n  if #result == 0 then\n    return {}\n  end\n  table.sort(result)\n\
    \  local res = {}\n  for i = 1, #result do\n    res[#res+1] = map_number[result[i]]\n\
    \  end\n  return res\nend", "  return function()\n    for i = 1, 9 do\n      local\
    \ length = tonumber(arr[i])\n      if length and length <= 9 then\n        arr[i]\
    \ = \"One\"\n      else\n        arr[i] = \"Nine\"\n      end\n    end\n    return\
    \ arr\n  end\nend", "  local result = {}\n  for i = 1, 10 do\n    local v = arr[i]\n\
    \    if v ~= nil then\n      local name = tonumber(v)\n      if name then\n  \
    \      if name >= 1 and name <= 9 then\n          table.insert(result, name)\n\
    \        end\n      end\n    end\n  end\n  table.sort(result)\n  for i = 1, 10\
    \ do\n    local v = result[i]\n    if v then\n      result[i] = tonumber(v)\n\
    \      result[i] = name .. result[i]\n    end\n  end\n  return result\nend", '  if
    #arr == 0 then return {} end', "  if #arr == 0 then\n    return {}\n  end\n  local\
    \ t = {}\n  for i = 1, #arr do\n    t[#t+1] = arr[i]\n  end\n  table.sort(t)\n\
    \  table.sort(t)\n  for i = 1, #arr do\n    arr[i] = t[i]\n  end\n  local res\
    \ = {}\n  for i = 1, 10 do\n    res[i] = \"One\"\n  end\n  for i = 11, 20 do\n\
    \    res[i] = \"Two\"\n  end\n  for i = 21, 30 do\n    res[i] = \"Three\"\n  end\n\
    \  for i = 31, 40 do\n    res[i] = \"Four\"\n  end\n  for i = 41, 50 do\n    res[i]\
    \ = \"Five\"\n  end\n  for i = 51, 60 do\n    res[i] = \"Six\"\n  end\n  for i\
    \ = 61, 70 do\n    res[i] = \"Seven\"\n  end\n  for i = 71, 80 do\n    res[i]\
    \ = \"Eight\"\n  end\n  for i = 81, 90 do\n    res[i] = \"Nine\"\n  end\n  return\
    \ res\nend", "  local result = {}\n  for i = 1, 10 do\n    local len = #arr\n\
    \    for j = 1, len do\n      if arr[j] <= i then\n        table.insert(result,\
    \ tostring(i - 1))\n        break\n      end\n    end\n  end\n  return result\n\
    end", "  local n = 1\n  local result = {}\n  for i = 1, #arr do\n    if arr[i]\
    \ == n then\n      table.insert(result, arr[i])\n    else\n      n = n + (arr[i]\
    \ > 0 and 1 or -1)\n      result[i] = tostring(n + (arr[i] > 0 and 1 or -1))\n\
    \    end\n  end\n  return result\nend", "  local names = {}\n  for i = 1, 9 do\n\
    \    local n = arr[i]\n    if n >= 1 and n <= 9 then\n      names[#names + 1]\
    \ = names[#names + 1] or tostring(n)\n    end\n  end\n  return names\nend", " \
    \   local lengths = {}\n    local max_len = -1\n    for i, v in ipairs(arr) do\n\
    \        if v ~= nil and v > 0 and v < 9 then\n            table.insert(lengths,\
    \ v)\n            if max_len < v then\n                max_len = v\n         \
    \   end\n        end\n    end\n    \n    local tbl = {}\n    for i = 1, #lengths\
    \ do\n        table.insert(tbl, 'One')\n        table.insert(tbl, 'Two')\n   \
    \     table.insert(tbl, 'Three')\n        table.insert(tbl, 'Four')\n        table.insert(tbl,\
    \ 'Five')\n        table.insert(tbl, 'Six')\n        table.insert(tbl, 'Seven')\n\
    \        table.insert(tbl, 'Eight')\n        table.insert(tbl, 'Nine')\n     \
    \   table.insert(tbl, to_string(lengths[i]))\n    end\n    \n    local i = 1\n\
    \    local j = 1\n    for i = 1, #lengths do\n        table.insert(tbl, to_string(lengths[i]))\n\
    \        if i <= #arr then\n            while i <= #arr do\n                local\
    \ v = arr[i]\n                if v == i then\n                    if j == 1 then\n\
    \                        table.insert(tbl, 'One')\n                    else\n\
    \                        table.insert(tbl, to_string(j))\n                   \
    \ end\n                    j = j + 1\n                elseif v > i then\n    \
    \                table.insert(tbl, to_string(j))\n                    j = j +\
    \ 1\n                    i = v + 1\n                end\n            end\n   \
    \     end\n    end\n    \n    if max_len < 9 then\n        table.insert(tbl, to_string(max_len))\n\
    \    end\n    return tbl\nend", "  if #arr == 0 then\n    return {}\n  else\n\
    \    local temp = {}\n    for i = 1, 9 do\n      temp[i] = \"One\"\n    end\n\
    \    local index = 1\n    for value in arr do\n      local value = tostring(value)\n\
    \      local length = string.len(value)\n      for i = 3, length - 1 do\n    \
    \    if string.sub(value, index, index + 1) == string.sub(value, index - 1, index)\
    \ then\n          temp[string.sub(value, index, index + 1)] = tostring(index)\n\
    \          index = index - 1\n        end\n      end\n      index = index + 1\n\
    \    end\n    return temp\n  end\nend", "  local lengths = {}\n  for i = 1,9 do\n\
    \    table.insert(lengths, #arr or 0)\n  end\n  table.sort(lengths)\n  for i =\
    \ 1,9 do\n    arr[#arr + 1] = arr[i]\n  end\n  table.sort(arr, function (a,b)\
    \ return a-b end)\n  return table.concat(arr, 1, 9)\nend", "    local new_arr\
    \ = {}\n    for i = 1, 9 do\n        if arr[i] > 9 then\n            arr[i] =\
    \ 'Nine'\n        end\n        if arr[i] == 1 then\n            arr[i] = 'One'\n\
    \        end\n        if arr[i] == 2 then\n            arr[i] = 'Two'\n      \
    \  end\n        if arr[i] == 3 then\n            arr[i] = 'Three'\n        end\n\
    \        if arr[i] == 4 then\n            arr[i] = 'Four'\n        end\n     \
    \   if arr[i] == 5 then\n            arr[i] = 'Five'\n        end\n        if\
    \ arr[i] == 6 then\n            arr[i] = 'Six'\n        end\n        if arr[i]\
    \ == 7 then\n            arr[i] = 'Seven'\n        end\n        if arr[i] == 8\
    \ then\n            arr[i] = 'Eight'\n        end\n        if arr[i] == 9 then\n\
    \            arr[i] = 'Nine'\n        end\n        new_arr[i] = arr[i]\n    end\n\
    \    return new_arr\nend", "  local result = {}\n  for i, v in ipairs(arr) do\n\
    \    result[v] = result[v] or i\n  end\n  table.sort(result)\n  local i = 1\n\
    \  local j = 1\n  local k = 9\n  while j <= k do\n    result[result[j]] = One\n\
    \    i = i + 1\n    j = j + 1\n    result[result[j]] = Two\n    i = i + 1\n  \
    \  j = j + 1\n    result[result[j]] = Three\n    i = i + 1\n    j = j + 1\n  \
    \  result[result[j]] = Four\n    i = i + 1\n    j = j + 1\n    result[result[j]]\
    \ = Five\n    i = i + 1\n    j = j + 1\n    result[result[j]] = Six\n    i = i\
    \ + 1\n    j = j + 1\n    result[result[j]] = Seven\n    i = i + 1\n    j = j\
    \ + 1\n    result[result[j]] = Eight\n    i = i + 1\n    j = j + 1\n    result[result[j]]\
    \ = Nine\n    i = i + 1\n    j = j + 1\n  end\n  -- Now the array is sorted from\
    \ 1 to 9 inclusive\n  -- For each number \"i\" in the result table do:\n  -- \
    \  if i < 10, then \"i\" replaced by \"One\"\n  --   if i < 100, then \"i\" replaced\
    \ by \"Two\"\n  --   if i < 1000, then \"i\" replaced by \"Three\"\n  --   if\
    \ i < 10000, then \"i\" replaced by \"Four\"\n  --   if i < 100000, then \"i\"\
    \ replaced by \"Five\"\n  --   if i < 1000000, then \"i\" replaced by \"Six\"\n\
    \  --   if i < 10000000, then \"i\" replaced by \"Seven\"\n  --   if i < 100000000,\
    \ then \"i\" replaced by \"Eight\"\n  --   if i < 1000000000, then \"i\" replaced\
    \ by \"Nine\"\n  return result\nend", "  if #arr == 0 then\n    return {}\n  end\n\
    \  local tbl = {}\n  for i = 2, 9 do\n    local n = arr[i]\n    if n ~= nil then\n\
    \      tbl[i] = n\n    end\n  end\n  table.sort(tbl)\n  local i, n = 1, #tbl\n\
    \  while i < n do\n    local j = i + 1\n    while j < n and tbl[j] == tbl[i] do\n\
    \      j = j + 1\n    end\n    if j == n then\n      tbl[i] = 'One'\n      i =\
    \ i + 1\n    elseif j > n then\n      tbl[i] = 'Nine'\n      i = i + 1\n    end\n\
    \  end\n  return tbl\nend", "  if #arr == 0 then\n    return {}\n  end\n  local\
    \ reverse = {}\n  for i = #arr, 1, -1 do\n    table.insert(reverse, arr[i])\n\
    \  end\n  table.sort(reverse)\n  for i = 1, #reverse do\n    table.insert(arr,\
    \ i, reverse[i])\n  end\n  return arr\nend", "    local results = {}\n    for\
    \ k, v in pairs(arr) do\n        if 1 <= k <= 9 then\n            table.insert(results,\
    \ v .. \"Number\")\n        else\n            table.insert(results, v)\n     \
    \   end\n    end\n    table.sort(results)\n    for k, v in pairs(results) do\n\
    \        if k == v or k ~= \"Number\" then\n            table.remove(results,\
    \ v)\n        end\n    end\n    return results\nend", "  local reversed = {}\n\
    \  for _, v in ipairs(arr) do\n    if not reversed[tostring(v)] then\n      reversed[tostring(v)]\
    \ = {}\n    end\n    reversed[tostring(v)][#reversed[tostring(v)] + 1] = tostring(v)\n\
    \  end\n  local result = {}\n  for k, v in pairs(reversed) do\n    local n = v[1]\n\
    \    for i = 1, #v do\n      if n ~= v[i] then\n        result = { k}\n      \
    \  break\n      end\n      n = n + 1\n    end\n  end\n  return result\nend", " \
    \ local tbl = arr:clone()\n  local nums, res = {}, {}\n  for i, v in ipairs(arr)\
    \ do\n    if v then\n      table.insert(nums, v)\n    end\n  end\n  if #nums >\
    \ 0 then\n    local len = math.floor(math.log10(#nums))\n    for i = 1, len do\n\
    \      local digit = math.pow(10, i) * nums[#nums]\n      local name = assert(by_length(nums:map(math.floor)),\
    \ 'Unexpected numbers')[digit]\n      if not name then\n        table.insert(res,\
    \ 0)\n      else\n        table.insert(res, name)\n      end\n    end\n  end\n\
    \  return res\nend", "  return {}, (function ()\n    local table = arr\n    for\
    \ i, v in ipairs(table) do\n      if not (v > 0 and v < 9) then break end\n  \
    \    table[i] = reverse((v - 1) * 10 + v)\n    end\n    local newtable = {}\n\
    \    for _, v in pairs(table) do\n      newtable[tostring(v)] = One\n    end\n\
    \    return newtable\n  end)()\nend", "  local new_arr = {}\n  for i = 1, 9 do\n\
    \    local num = arr[i]\n    if not num then break end\n    new_arr[num] = i\n\
    \  end\n  for i = 1, 9 do\n    local num = arr[i]\n    if not num then break end\n\
    \    arr[num] = new_arr[num]\n  end\n  for i = 1, 9 do\n    local num = arr[i]\n\
    \    if not num then break end\n    new_arr[num] = nil\n  end\n  return new_arr\n\
    end", "  if #arr == 0 then return {} end\n  if #arr == 1 then return arr[arr[1]]\
    \ end\n  local keys = arr:keys()\n  table.sort(keys)\n  local length = tonumber(keys[1])\n\
    \  local tmp = {}\n  for i = 2, #arr do\n    if tonumber(arr[i]) <= length then\n\
    \      table.insert(tmp, arr[i])\n    end\n  end\n  return table.concat(tmp, '-')\n\
    end", "  if next(arr) == nil then\n    return {}\n  end\n  local result = {}\n\
    \  local num_arr = {}\n  for i = 1, 10 do\n    num_arr[i] = i\n  end\n  for i\
    \ = 1, #arr do\n    if num_arr[arr[i]] then\n      result[num_arr[arr[i]]] = arr[i]\n\
    \    end\n  end\n  return result\nend", "  local nums = {}\n  for i = 1, 10 do\n\
    \    table.insert(nums, i)\n  end\n  table.sort(nums, function(a, b) return a\
    \ < b end)", "    local result = {}\n    if not arr then return result end\n \
    \   local minv = math.min(arr)\n    local maxv = math.max(arr)\n    local mrange\
    \ = maxv - minv\n    local ndigits = math.floor(mrange * 10) / 10\n    local digits\
    \ = math.floor(mrange * 100)\n    for i = 1, 10 do\n        result[i] = {}\n \
    \       for j = (minv - 1) % 10 + 1, digits do\n            result[i][j] = mrange\
    \ < 10 and\n                           minv <= (10 * j + i) or\n             \
    \              minv == (10 * j + i) and\n                           j < 9 and\n\
    \                           mrange < (10 * (j + 10)) or\n                    \
    \       minv == (10 * (j + 10)) and\n                           mrange < (10 *\
    \ j + i) and\n                           j > 9\n        end\n    end\n    return\
    \ function(v)\n        local i = (v - minv) / 10\n        if i > maxv then i =\
    \ maxv end\n        if i < minv then i = minv end\n        return result[i]\n\
    \    end\nend", "  local result = {}\n  for i = 1, 10 do\n    local key = tostring(i)\n\
    \    for j = 1, #arr do\n      if arr[j] < i and arr[j] == i then\n        key\
    \ = key .. tostring(arr[j])\n        break\n      end\n    end\n    result[i]\
    \ = key == \"0\" and \"\" or key\n  end\n  return result\nend", "    local sorted_by_length\
    \ = table.sort(\n        arr,\n        function (a,b) return a < b end\n    )\n\
    \    local reversed_by_length = table.sort(\n        sorted_by_length,\n     \
    \   function (a,b) return b < a end\n    )\n    local number_to_name = {}\n  \
    \  for i = 1, 9 do\n        number_to_name[reversed_by_length[i]] = i\n    end",
  "  local ret = {}\n  for i = 1, 9 do\n    local num = arr[i]\n    if not num then\n\
    \      break\n    end\n    local length = 10\n    while num > (length - 1) do\n\
    \      length = length - 1\n    end\n    for j = 1, length do\n      ret[num -\
    \ length + j + 1] = table.concat(\n        { \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" }, \"\", \"-\")\n    end\n\
    \  end\n  return ret\nend", "  -- If the table is empty return an empty table.\n\
    \  if #arr == 0 then\n    return {}\n  end", "  -- Sort the table\n  table.sort(arr)",
  "  if #arr == 0 then\n    return {}\n  elseif #arr == 1 then\n    if arr[#arr] ==\
    \ 1 then\n      return {}\n    end\n  else\n    local t = {}\n    for i = 1, 9\
    \ do\n      if arr[i] > 1 then\n        local j = i - 1\n        local sum = 0\n\
    \        while arr[j] > 1 do\n          sum = sum + arr[j]\n          j -= 1\n\
    \        end\n        table.insert(t, i)\n        table.insert(t, sum + 2)\n \
    \     end\n    end\n  end\n  return t\nend", "  if #arr == 0 then\n    return\
    \ {}\n  else\n    local result = {}\n    local m = math.floor((#arr - 1) / 10)\n\
    \    for i = 1, m, 1 do\n      local v = arr[i]\n      result[v] = result[v] or\
    \ {}\n      for j = 1, 10, 1 do\n        result[v][j + 1] = result[v][j + 1] or\
    \ tostring((i - 1) * 10 ^ j)\n      end\n    end\n    for i = m, 2, -1 do\n  \
    \    local v = arr[i]\n      result[v] = result[v] or {}\n      for j = 1, 10,\
    \ 1 do\n        result[v][10 - j + 1] = result[v][10 - j + 1] or tostring((i -\
    \ 1) * 10 ^ j)\n      end\n    end\n    return result\n  end\nend", "  local result\
    \ = {}\n  for i = 1, 10 do\n    table.insert(result, tostring(string.sub(tostring(arr),\
    \ i, i + 1)))\n  end\n  for i = 10, 1, -1 do\n    table.insert(result, tostring(string.sub(tostring(arr),\
    \ i, i - 1)))\n  end\n  return result\nend", "  local result = {}\n  local len\
    \ = #arr\n  local i = 1\n  while i < len do\n    local num = arr[i]\n    table.insert(result,\
    \ num)\n    i = i + 1\n  end\n  if len > 0 then\n    local lastNum = arr[len -\
    \ 1]\n    local lastName\n    local firstNum = arr[1]\n    local firstName\n \
    \   for i = 1, len do\n      local currNum = arr[i]\n      local currName\n  \
    \    -- When the last item is reached, ignore it and move on to the next item\n\
    \      if i == len then\n        if lastNum == currNum then\n          table.insert(result,\
    \ lastName)\n          break\n        else\n          table.insert(result, currName)\n\
    \        end\n      end\n      -- When the first item is reached, ignore it and\
    \ move on to the next item\n      if i == 1 then\n        if firstNum == currNum\
    \ then\n          table.insert(result, firstName)\n          break\n        else\n\
    \          table.insert(result, currName)\n        end\n      end\n      -- For\
    \ every other number, calculate the distance between it and the first item and\n\
    \      -- add it to the distance to the last item and divide it by the length\
    \ of the array\n      currName = num2name[currNum]\n      if i > 1 then\n    \
    \    local dist = (currNum - firstNum) / (lastNum - firstNum)\n        table.insert(result,\
    \ currName)\n        table.insert(result, table.concat(table.slice(result, 1,\
    \ i - 1), \" \") .. dist * lastName)\n      else\n        table.insert(result,\
    \ currName)\n      end\n      lastNum = currNum\n      lastName = currName\n \
    \     firstNum = num\n      firstName = num2name[firstNum]\n    end\n  end\n \
    \ return result\nend", "  if arr == nil then return end\n  local table = {}\n\
    \  for i, v in ipairs(arr) do\n    local v = tonumber(v)\n    if not v then break\
    \ end\n    v = v - 1\n    local len = math.abs(v)\n    local name = tostring(len)\n\
    \    table[i] = name\n  end\n  return table\nend", "  if #arr == 0 then return\
    \ nil end\n  local keys = arr:keys()\n  local sorted = {}\n  for i = 1, 9 do\n\
    \    sorted[i] = keys[math.min(#keys, i)]\n  end\n  sorted[#keys] = nil\n  local\
    \ result = {}\n  for i, v in pairs(sorted) do result[v] = arr[v] end\n  return\
    \ result\nend", "  local result = {}\n  for k, v in pairs(arr) do\n    if v >\
    \ 0 and v <= 9 then\n      table.insert(result, tostring(k)) .. tostring(v)\n\
    \    end\n  end\n  table.sort(result)\n  for i = 2, #result do\n    result[i -\
    \ 2] = result[i - 2] .. result[i - 1]\n  end\n  return result\nend", "    local\
    \ ret = {}\n    for i = 1, 10 do\n        local count = 0\n        for _, val\
    \ in pairs(arr) do\n            if val <= i then\n                count = count\
    \ + 1\n            end\n        end\n        if count > 0 then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    if #ret == 0 then\n        return {}\n    else\n\
    \        for _, val in pairs(ret) do\n            arr[val] = \"One\"\n       \
    \ end\n        return arr\n    end\nend", "  local result = {}\n  local keys =\
    \ {}\n  for i = 1, 9 do\n    keys[#keys + 1] = string.format(\"%d\", i)\n  end\n\
    \  for i = 1, #arr do\n    local k = tonumber(arr[i])\n    if k == nil then\n\
    \      k = #keys\n      arr[i] = keys[k]\n    end\n    result[arr[i]] = k\n  end\n\
    \  return result\nend", "    local t = {}\n    for i = 1, 10 do\n        local\
    \ n = arr[i] or 0\n        table.insert(t, n < 1 and \"One\" or \"Two\")\n   \
    \     table.insert(t, n > 9 and \"Three\" or \"Four\")\n        table.insert(t,\
    \ n % 10 == 0 and \"Five\" or \"Six\")\n        table.insert(t, n % 100 == 0 and\
    \ \"Seven\" or \"Eight\")\n        table.insert(t, n % 1000 == 0 and \"Nine\"\
    \ or \"Ten\")\n    end\n    return t\nend", "    local t = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] <= 9 then\n            table.insert(t, arr[i])\n\
    \        else\n            local last = table.last(t)\n            if last ==\
    \ nil or last[1] < arr[i] then\n                table.insert(t, arr[i])\n    \
    \        end\n        end\n    end\n    return t\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for this, I knew there was a more elegant way than my hacky solution.\n\
    <|/ c |>\n<| a dscore=3 |>\nThe easiest way to achieve this (IMO) is to use the\
    \ fact that strings can be treated as tables of characters so you can:", "  if\
    \ #arr == 0 then\n    return {}\n  end\n  local result = {}\n  local j = 1\n \
    \ for _, v in ipairs(arr) do\n    local len = 1\n    while v > 0 do\n      v =\
    \ v / 10\n      len = len + 1\n    end\n    for i = 1, len do\n      result[#result\
    \ + 1] = string.format('%s%s', i, string.rep('One', 9 - i - 1))\n    end\n  end\n\
    \  return result\nend", "  local new = {}\n  local i = 1\n  while #arr > i do\n\
    \    for k in pairs(arr:gmatch(\"%d+\")) do\n      if not new[k] then\n      \
    \  new[k] = {}\n      end\n      new[k][#new[k] + 1] = arr[i]\n    end\n    i\
    \ = i + 1\n  end\n  return new\nend", "  local count = {}\n  for i = 1, 9 do\n\
    \    table.insert(count, arr[i])\n  end", "    local result = {}\n    for _, val\
    \ in pairs(arr) do\n        if 1 <= val and val <= 9 then\n            result[val]\
    \ = arr[val]\n        end\n    end\n    return result\nend", "  local result =\
    \ {}\n  local keys = {}\n  for key, value in pairs(arr) do\n    if value >= 1\
    \ and value <= 9 then\n      table.insert(keys, value)\n      result[key] = value\n\
    \    end\n  end\n  for _, value in pairs(keys) do\n    for _, name in pairs(digit_names)\
    \ do\n      if value == math.floor(value) then\n        result[name] = true\n\
    \      end\n    end\n  end\n  return result\nend", "  local ordered = {}\n  for\
    \ i = 1, #arr do\n    local n = arr[i]\n    if not n then\n      continue\n  \
    \  end\n    ordered[#ordered + 1] = n\n  end\n  table.sort(ordered)\n  for i =\
    \ 1, #ordered do\n    table.insert(ordered, ordered[i])\n  end\n  table.insert(ordered,\
    \ 1, 0)\n  local i = 0\n  for j = 1, #ordered do\n    local n = ordered[j]\n \
    \   while i < j and arr[i] <= n do\n      i = i + 1\n    end\n    arr[i] = arr[j]\
    \ - 1\n    j = j - 1\n  end\n  table.insert(ordered, 0, 0)\n  return ordered\n\
    end", "  -- Sort using bubble sort.\n  -- https://en.wikipedia.org/wiki/Bubble_sort\n\
    \  local function bubble_sort(a, b)\n    local a_len, b_len = #a, #b\n    if a_len\
    \ == 0 or b_len == 0 then\n      return\n    end\n    local swap\n    -- A shorter\
    \ array has higher priority.\n    if a_len < b_len then\n      -- For short arrays,\
    \ only sort until a difference is detected.\n      for i = 1, a_len do\n     \
    \   -- Compare two elements at a time.\n        if a[i] < b[i] then\n        \
    \  -- The first element is greater than the second element.\n          swap =\
    \ a[i]\n          a[i] = b[i]\n          b[i] = swap\n        end\n      end\n\
    \      -- Swap until all the elements are sorted.\n      for i = a_len - 1, 1,\
    \ -1 do\n        swap = a[i]\n        a[i] = b[i]\n        b[i] = swap\n     \
    \ end\n      -- Now sort any remaining elements.\n      for i = 1, a_len do\n\
    \        -- Compare two elements at a time.\n        if a[i] > b[i] then\n   \
    \       -- The first element is greater than the second element.\n          swap\
    \ = a[i]\n          a[i] = b[i]\n          b[i] = swap\n        end\n      end\n\
    \      -- Swap until all the elements are sorted.\n      for i = a_len - 1, 1,\
    \ -1 do\n        swap = a[i]\n        a[i] = b[i]\n        b[i] = swap\n     \
    \ end\n      -- Now sort any remaining elements.\n      for i = 1, a_len do\n\
    \        -- Compare two elements at a time.\n        if a[i] < b[i] then\n   \
    \       -- The first element is greater than the second element.\n          swap\
    \ = a[i]\n          a[i] = b[i]\n          b[i] = swap\n        end\n      end\n\
    \      -- Swap until all the elements are sorted.\n      for i = a_len - 1, 1,\
    \ -1 do\n        swap = a[i]\n        a[i] = b[i]\n        b[i] = swap\n     \
    \ end\n      -- Now sort any remaining elements.\n      for i = 1, a_len do\n\
    \        -- Compare two elements at a time.\n        if a[i] > b[i] then\n   \
    \       -- The first element is greater than the second element.\n          swap\
    \ = a[i]\n          a[i] = b[i]\n          b[i] = swap\n        end\n      end\n\
    \      -- Swap until all the elements are sorted.\n      for i = a_len - 1, 1,\
    \ -1 do\n        swap = a[i]\n        a[i] = b[i]\n        b[i] = swap\n     \
    \ end\n    else\n      -- A longer array has higher priority.\n      for i = 1,\
    \ b_len do\n        -- Compare two elements at a time.\n        if a[i] < b",
  "  local result = {}\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 1\
    \ and v <= 9 then\n      table.insert(result, v:byte())\n    end\n  end\n  table.sort(result)\n\
    \  for i = 1, #result do\n    arr[i] = result[i]:byte()\n  end\n  return result\n\
    end", "  local tmp = {}\n  local index = 1\n  for i = 1, 9 do\n    if index ==\
    \ #arr then\n      break\n    end\n    if arr[index] <= 9 then\n      table.insert(tmp,\
    \ arr[index])\n      index = index + 1\n    end\n  end\n  return tmp\nend", " \
    \ local ans = {}\n  for i = 1, 10 do\n    local name = \"\"\n    for j = 1, i\
    \ do\n      name = name .. \"One\"\n    end\n    ans[i] = name\n  end\n  for i\
    \ = 1, arr[1] do\n    local name = \"\"\n    for j = 1, arr[2] do\n      name\
    \ = name .. \"Two\"\n    end\n    ans[arr[1] + i] = name\n  end\n  for i = 1,\
    \ arr[3] do\n    local name = \"\"\n    for j = 1, arr[4] do\n      name = name\
    \ .. \"Three\"\n    end\n    ans[arr[3] + i] = name\n  end\n  for i = 1, arr[5]\
    \ do\n    local name = \"\"\n    for j = 1, arr[6] do\n      name = name .. \"\
    Four\"\n    end\n    ans[arr[5] + i] = name\n  end\n  for i = 1, arr[7] do\n \
    \   local name = \"\"\n    for j = 1, arr[8] do\n      name = name .. \"Five\"\
    \n    end\n    ans[arr[7] + i] = name\n  end\n  for i = 1, arr[9] do\n    local\
    \ name = \"\"\n    for j = 1, arr[10] do\n      name = name .. \"Six\"\n    end\n\
    \    ans[arr[9] + i] = name\n  end\n  for i = 1, arr[11] do\n    local name =\
    \ \"\"\n    for j = 1, arr[12] do\n      name = name .. \"Seven\"\n    end\n \
    \   ans[arr[11] + i] = name\n  end\n  for i = 1, arr[13] do\n    local name =\
    \ \"\"\n    for j = 1, arr[14] do\n      name = name .. \"Eight\"\n    end\n \
    \   ans[arr[13] + i] = name\n  end\n  for i = 1, arr[15] do\n    local name =\
    \ \"\"\n    for j = 1, arr[16] do\n      name = name .. \"Nine\"\n    end\n  \
    \  ans[arr[15] + i] = name\n  end\n  return ans\nend", "   local tbl = {}\n  \
    \ for k, v in pairs(arr) do\n      if k == 1 then\n         tbl[v] = {}\n    \
    \  elseif v then\n         tbl[v][k] = tbl[v][k] ~= nil and tbl[v][k] or One\n\
    \      end\n   end\n   if #tbl[1] > 0 then\n      tbl[1] = tbl[1][#tbl[1]]\n \
    \     for i = 2, #tbl do\n         tbl[i] = tbl[i][#tbl[i]]\n         if tbl[i]\
    \ then\n            for j = 1, #tbl[i] do\n               tbl[i][j] = tbl[i][j]\
    \ ~= nil and tbl[i][j] or Two\n            end\n         end\n      end\n   end\n\
    \   return tbl\nend", "  if #arr == 0 then\n    return {}\n  end\n  local key\
    \ = arr[1]\n  for i = 2, #arr do\n    key = key .. \",\" .. arr[i]\n  end\n  table.sort(arr,\
    \ 1, #arr, \"lt\", function(a, b)\n    return b - a end\n  )\n  local result =\
    \ {}\n  local j = 1\n  local k = #arr\n  while j < k do\n    local digit = string.format(\"\
    %c\", arr[j])\n    if not result[digit] then\n      result[digit] = {}\n    end\n\
    \    result[digit][#result[digit]+1] = k\n    j = j + 1\n  end\n  local rev_result\
    \ = {}\n  for digit, n in pairs(result) do\n    for i = 1, n do\n      rev_result[#rev_result+1]\
    \ = digit\n    end\n  end\n  table.sort(rev_result, 1, #rev_result, \"lt\", function(a,\
    \ b)\n    return b - a end\n  )\n  for digit, n in pairs(rev_result) do\n    if\
    \ n ~= 1 then\n      arr[digit] = arr[n]\n    end\n  end\n  return arr\nend",
  "  local result = {}\n  for i, v in ipairs(arr) do\n    if v < 1 or v > 9 then\n\
    \      table.insert(result, v)\n    else\n      result[v] = arr[i]\n    end\n\
    \  end\n  return result\nend", "  if #arr == 0 then return {} end\n  local m =\
    \ {}\n  for i = 1, 9 do\n    if arr[i] > 0 then\n      local key = table.remove(arr,\
    \ i - 1)\n      table.insert(m, string.rep(key, i))\n    end\n  end\n  if #m ==\
    \ 0 then return {} end\n  table.sort(m)\n  local last = table.remove(m, 9)\n \
    \ for i = 1, #m do\n    local n = tonumber(m[i])\n    if n > 0 and n < 10 then\n\
    \      local last = tonumber(last)\n      local key = (last * 10 + n) .. \"-\"\
    \n      table.insert(m, key .. string.rep(last, n))\n    end\n  end\n  return\
    \ m\nend", "  local result = {}\n  for i = 1, 9 do\n    local num = (i-1) % 9\n\
    \    if arr[ num ] then\n      result[ #result+1 ] = result[ num ] .. '-' .. arr[\
    \ num ]\n    end\n  end\n  return result\nend", "    local result = {}\n    for\
    \ i, v in ipairs(arr) do\n        if i < 9 and i > 1 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    if #result == 0 then\n        -- The table is\
    \ empty\n        return {}\n    end\n    -- reverse the resulting array\n    for\
    \ i, v in ipairs(result) do\n        result[i] = result[9 - i]\n    end\n    --\
    \ convert each digit to the name\n    for i, v in ipairs(result) do\n        local\
    \ num_str = string.format(\"%d\", v)\n        local num_str = string.sub(num_str,\
    \ 1, -1)\n        result[i] = name[num_str]\n    end\n    return result\nend",
  "  local result = {}\n  for i = 1, 10 do\n    if arr[i] == i then\n      table.insert(result,\
    \ table.concat({\n        \"One\", -- 1\n        \"Two\", -- 2\n        \"Three\"\
    , -- 3\n        \"Four\", -- 4\n        \"Five\", -- 5\n        \"Six\", -- 6\n\
    \        \"Seven\", -- 7\n        \"Eight\", -- 8\n        \"Nine\", -- 9\n  \
    \    }))\n    else\n      table.insert(result, table.concat({\n        table.concat({\n\
    \          \"One\", -- 1\n          \"Two\", -- 2\n          \"Three\", -- 3\n\
    \          \"Four\", -- 4\n          \"Five\", -- 5\n          \"Six\", -- 6\n\
    \          \"Seven\", -- 7\n          \"Eight\", -- 8\n          \"Nine\", --\
    \ 9\n        })[arr[i] > i],\n      }))\n    end\n  end\n  table.sort(result)\n\
    \  for i = 1, 10 do\n    table.insert(result, table.concat({\n      \"One\", --\
    \ 1\n      \"Two\", -- 2\n      \"Three\", -- 3\n      \"Four\", -- 4\n      \"\
    Five\", -- 5\n      \"Six\", -- 6\n      \"Seven\", -- 7\n      \"Eight\", --\
    \ 8\n      \"Nine\", -- 9\n    })[arr[i] > i])\n  end\n  return result\nend",
  "  local result = {}\n  local last = nil\n  for i = 1, 9 do\n    local current =\
    \ arr[i]\n    if current ~= nil then\n      table.insert(result, string.format(\"\
    %g\", current))\n      if current ~= last then\n        last = current\n     \
    \ end\n    end\n  end\n  return result\nend", "  local results = {}\n  for i =\
    \ 1, 9 do\n    local val = arr[i]\n    if val >= 1 and val <= 9 then\n      results[tostring(val)]\
    \ = arr[i]\n    end\n  end\n  if #arr == 0 then\n    return {}\n  else\n    for\
    \ i = 1, #arr do\n      local val = arr[i]\n      if val >= 1 and val <= 9 then\n\
    \        results[tostring(val)] = arr[i]\n      end\n    end\n  end\n  return\
    \ results\nend", "  if next(arr) == nil then\n    return {}\n  end\n  local counts\
    \ = {}\n  for k, v in pairs(arr) do\n    local value = tonumber(k)\n    if value\
    \ ~= nil then\n      counts[#counts + 1] = value\n    end\n  end\n  table.sort(counts,\
    \ function(a, b)\n    if a < b then\n      return -1\n    elseif b < a then\n\
    \      return 1\n    else\n      return 0\n    end\n  end)\n  local reversed_counts\
    \ = {}\n  local last = 0\n  for i = 1, #counts do\n    reversed_counts[#reversed_counts\
    \ + 1] = counts[last]\n    last = counts[last]\n  end\n  table.sort(reversed_counts,\
    \ function(a, b)\n    if a < b then\n      return -1\n    elseif b < a then\n\
    \      return 1\n    else\n      return 0\n    end\n  end)\n  local result = {}\n\
    \  for i = 1, #reversed_counts do\n    local index = reversed_counts[i]\n    if\
    \ index ~= 0 then\n      result[#result + 1] = \"One\"\n      if index % 10 ==\
    \ 1 then\n        result[#result + 1] = \"Two\"\n        if index % 10 == 2 then\n\
    \          result[#result + 1] = \"Three\"\n          if index % 10 == 3 then\n\
    \            result[#result + 1] = \"Four\"\n            if index % 10 == 4 then\n\
    \              result[#result + 1] = \"Five\"\n              if index % 10 ==\
    \ 5 then\n                result[#result + 1] = \"Six\"\n                if index\
    \ % 10 == 6 then\n                  result[#result + 1] = \"Seven\"\n        \
    \          if index % 10 == 7 then\n                    result[#result + 1] =\
    \ \"Eight\"\n                    if index % 10 == 8 then\n                   \
    \   result[#result + 1] = \"Nine\"\n                    end\n                \
    \  end\n                end\n              end\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  return result\nend", '  if not arr
    then return {} end', "  local sorted_table = arr:sort()\n  local reversed_sorted_table\
    \ = {}\n  for i = #sorted_table, 1, -1 do\n    reversed_sorted_table[sorted_table[i]]\
    \ = sorted_table[i-1]\n  end\n  return reversed_sorted_table\nend", "  local sorted\
    \ = {}\n  for i = 1, 10 do\n    sorted[i] = i\n  end\n  table.sort(sorted, function(a,\
    \ b) return arr[a] < arr[b] end)\n  local lengths = {}\n  for i = 1, 10 do\n \
    \   table.insert(lengths, arr[i])\n  end\n  local inverse = {}\n  for i = 1, 10\
    \ do\n    inverse[lengths[i]] = i\n  end\n  local result = {}\n  for i = 1, #arr\
    \ do\n    result[arr[i]] = inverse[arr[i]]\n  end\n  return result\nend", "  local\
    \ table = {}\n  for i = 1, #arr do\n    local n = arr[i]\n    if n == nil then\
    \ break end\n    if n == 1 then\n      table[i] = 'One'\n    elseif n == 2 then\n\
    \      table[i] = 'Two'\n    elseif n == 3 then\n      table[i] = 'Three'\n  \
    \  elseif n == 4 then\n      table[i] = 'Four'\n    elseif n == 5 then\n     \
    \ table[i] = 'Five'\n    elseif n == 6 then\n      table[i] = 'Six'\n    elseif\
    \ n == 7 then\n      table[i] = 'Seven'\n    elseif n == 8 then\n      table[i]\
    \ = 'Eight'\n    elseif n == 9 then\n      table[i] = 'Nine'\n    end\n  end\n\
    \  return table\nend", "  local result = {}\n  for k, v in pairs(arr) do\n   \
    \ table.insert(result, v and (arr[v] and arr[v].name or nil))\n  end\n  return\
    \ result\nend", "   local result = {}\n   local i = 1\n   while i <= 9 do\n  \
    \    if arr[math.floor(i * 0.1)] then\n         result[#result + 1] = string.format(\"\
    %s\", arr[math.floor(i * 0.1)])\n      end\n      i = i + 1\n   end\n   return\
    \ result\nend", "  -- The table will be a 2D table: each row is a group and each\
    \ column is a digit.\n  local bylen = {}\n  for i = 1, #arr do\n    local key\
    \ = tostring(arr[i]) or \"Zero\"\n    local index = bylen[key] or #bylen + 1\n\
    \    bylen[key] = index\n  end", "  local num_map = nil\n  local num_counts =\
    \ nil\n  local length = nil\n  local result = {}\n  local i = 1\n  for key, value\
    \ in pairs(arr) do\n    length = key\n    if not num_map then\n      num_map =\
    \ totable()\n      num_counts = totable()\n    end\n    num_map[key] = i\n   \
    \ i = i + 1\n    num_counts[i] = length\n  end\n  local num_sorted = num_map[1]\n\
    \  for i = 1, num_sorted do\n    local num = num_map[i]\n    local num_count =\
    \ num_counts[i]\n    if num_count == length then\n      result[i] = num_count\n\
    \    else\n      local num_rev = num_count - 1\n      local num_str = tostring(num_rev)\n\
    \      while num_rev ~= 0 do\n        num_str = num_str..tostring(num_rev)\n \
    \       num_rev = num_rev - 1\n      end\n      result[i] = num_map[1]..\"_\"\
    ..num_str\n    end\n  end\n  return result\nend", "  local ordered = {}\n  local\
    \ length = #arr\n  for i=1, length do\n    ordered[i] = arr[length - i - 1]\n\
    \  end\n  for i=1, length do\n    arr[i] = \"One\"\n    if i == 1 then\n     \
    \ arr[i] = \"Zero\"\n    end\n    ordered[length - i - 1] = arr[length - i - 1]\n\
    \  end\n  for i=1, length do\n    arr[i] = ordered[i]\n  end\n  return arr\nend",
  "  local tbl = {}\n  for i = 1, 9 do\n    if not arr[i] then break end\n    tbl[i]\
    \ = arr[i]\n  end\n  table.sort(tbl)\n  for i = 1, 9 do\n    if not arr[i] then\
    \ break end\n    tbl[i] = \"One\"\n  end\n  for i = 9, 1, -1 do\n    if not arr[i]\
    \ then break end\n    tbl[i] = \"Nine\"\n  end\n  for i = 1, 9 do\n    if not\
    \ arr[i] then break end\n    tbl[i] = arr[i]\n  end\n  return tbl\nend", "  local\
    \ result = {}\n  local num_str = \"\"\n  -- First count how many digits are in\
    \ the array\n  for _, num in ipairs(arr) do\n    if num < 0 then break end\n \
    \   num_str = tostring(num)\n    local num_len = #num_str\n    local num_digits\
    \ = #num_str - 1\n    if num_len > 1 then\n      result[num_len + 1] = num_digits,\
    \ result[num_len] + 1\n    end\n  end\n  -- Now reverse the table\n  table.sort(result)\n\
    \  local index = 1\n  for i, num in ipairs(result) do\n    if num > 0 then\n \
    \     arr[index] = num - 1\n      index = index + 1\n    end\n  end\n  table.sort(arr)\n\
    \  for i, num in ipairs(arr) do\n    if num < 0 then\n      arr[i] = string.format(\"\
    %s\", tostring(num))\n    end\n  end\n  return arr\nend", "  local table = {}\n\
    \  for i = 1, 10 do\n    table[i] = 'One'\n  end\n  for i = 10, 0, -1 do\n   \
    \ table[i] = 'Two'\n  end\n  for i = 11, 100, -1 do\n    table[i] = 'Three'\n\
    \  end\n  for i = 100, 10, -1 do\n    table[i] = 'Four'\n  end\n  for i = 100,\
    \ 0, -1 do\n    table[i] = 'Five'\n  end\n  for i = 101, 100, -1 do\n    table[i]\
    \ = 'Six'\n  end\n  for i = 110, 100, -1 do\n    table[i] = 'Seven'\n  end\n \
    \ for i = 111, 100, -1 do\n    table[i] = 'Eight'\n  end\n  for i = 112, 100,\
    \ -1 do\n    table[i] = 'Nine'\n  end\n  for i = 113, 100, -1 do\n    table[i]\
    \ = 'Ten'\n  end\n  for i = 114, 100, -1 do\n    table[i] = 'Eleven'\n  end\n\
    \  for i = 115, 100, -1 do\n    table[i] = 'Twelve'\n  end\n  for i = 116, 100,\
    \ -1 do\n    table[i] = 'Thirteen'\n  end\n  for i = 117, 100, -1 do\n    table[i]\
    \ = 'Fourteen'\n  end\n  for i = 118, 100, -1 do\n    table[i] = 'Fifteen'\n \
    \ end\n  for i = 119, 100, -1 do\n    table[i] = 'Sixteen'\n  end\n  for i = 120,\
    \ 100, -1 do\n    table[i] = 'Seventeen'\n  end\n  for i = 120, 100, -1 do\n \
    \   table[i] = 'Eighteen'\n  end\n  for i = 121, 100, -1 do\n    table[i] = 'Nineteen'\n\
    \  end\n  for i = 122, 100, -1 do\n    table[i] = 'Twenty'\n  end\n  for i = 123,\
    \ 100, -1 do\n    table[i] = 'Twenty-one'\n  end\n  for i = 124, 100, -1 do\n\
    \    table[i] = 'Twenty-two'\n  end\n  for i = 125, 100, -1 do\n    table[i] =\
    \ 'Twenty-three'\n  end\n  for i = 126, 100, -1 do\n    table[i] = 'Twenty-four'\n\
    \  end\n  for i = 127, 100, -1 do\n    table[i] = 'Twenty-five'\n  end\n  for\
    \ i = 128, 100, -1 do\n    table[i] = 'Twenty-six'\n  end\n  for i = 129, 100,\
    \ -1 do\n    table[i] = 'Twenty-seven'\n  end\n  for i = 130, 100, -1 do\n   \
    \ table[i] = 'Twenty-eight'\n  end\n  for i = 131, 100, -1 do\n    table[i] =\
    \ 'Twenty-nine'\n", "  if arr == nil then return end\n  local num_digits = {}\n\
    \  for i = 0, #arr do\n    local digit = tonumber(arr[i])\n    if digit == nil\
    \ then break end\n    num_digits[digit] = arr[i]\n  end\n  local result = {}\n\
    \  for key, value in pairs(num_digits) do\n    local digit = tonumber(key)\n \
    \   if digit == nil then break end\n    local name = num_digits[digit]\n    result[digit]\
    \ = name\n  end\n  return result\nend", "  if #arr == 0 then\n    return {}\n\
    \  end\n  local sorted_arr = arr:sort(function(a, b) return b - a end)\n  local\
    \ names = {}\n  for i=1,9 do\n    names[i] = string.format(\"%d\\t%s\", i, tostring(sorted_arr[i]))\n\
    \  end\n  return names\nend", "  local results = {}\n  for i=1, 9 do\n    local\
    \ num\n    if arr[i] then\n      num = arr[i]\n    else\n      num = 0\n    end\n\
    \    local length = math.floor(math.log(num + 1, 10))\n    if length > 0 then\n\
    \      local div = math.pow(10, length)\n      local mod = num % div\n      if\
    \ mod < 1 then\n        results[#results + 1] = string.format(\"One\", num)\n\
    \      else\n        local rem = math.floor(num / div)\n        results[#results\
    \ + 1] = string.format(\"%s\", by_length({ rem}):gsub(\"%d\", \"%s\"))\n     \
    \ end\n    end\n  end\n  return results\nend", "    local t = {}\n    local keys\
    \ = table.sort(arr)\n    for _, val in pairs(keys) do\n        if val ~= 1 then\n\
    \            table.insert(t, val)\n        end\n    end\n    for i = #keys, 1,\
    \ -1 do\n        table.insert(t, keys[i])\n    end\n    return t\nend", "  local\
    \ result = {}\n  local i = 0\n  for i, v in ipairs(arr) do\n    if v > 9 then\n\
    \      table.insert(result, v)\n    elseif v == 1 then\n      table.insert(result,\
    \ 1)\n    else\n      table.insert(result, v)\n    end\n  end\n  if #result >\
    \ 0 then\n    for i, v in ipairs(result) do\n      result[i] = names[v]\n    end\n\
    \  end\n  return result\nend", "  local t = {}\n  for i = 1, 10 do\n    local\
    \ n = arr[i]\n    if n then\n      local p = math.floor(n/10)\n      t[p] = t[p]\
    \ or {}\n      t[p][n < 100 and 'One' or 'Two'] = n%10\n    end\n  end\n  for\
    \ i = 1, 10 do\n    if t[i] then\n      for j, v in pairs(t[i]) do\n        arr[j]\
    \ = v\n      end\n    end\n  end\n  return arr\nend", "  if #arr == 0 then\n \
    \   return {}\n  elseif #arr == 1 then\n    return {arr[1]}\n  end\n  -- Sort\
    \ the input array\n  table.sort(arr)\n  local result = {}\n  -- Add the numbers\
    \ whose lengths are less than 10\n  for i = 0, 9 do\n    table.insert(result,\
    \ arr[i])\n  end\n  -- Add the numbers whose lengths are between 10 and 99\n \
    \ for i = 1, 10 do\n    local n = arr[i]\n    table.insert(result, n)\n    table.insert(result,\
    \ n - 100)\n  end\n  -- Add the numbers whose lengths are between 100 and 999\n\
    \  for i = 1, 100 do\n    local n = arr[i]\n    table.insert(result, n)\n    table.insert(result,\
    \ n - 1000)\n  end\n  -- Add the numbers whose lengths are between 1000 and 9999\n\
    \  for i = 1, 1000 do\n    local n = arr[i]\n    table.insert(result, n)\n   \
    \ table.insert(result, n - 10000)\n  end\n  -- Add the numbers whose lengths are\
    \ between 10000 and 99999\n  for i = 1, 10000 do\n    local n = arr[i]\n    table.insert(result,\
    \ n)\n    table.insert(result, n - 100000)\n  end\n  -- Add the numbers whose\
    \ lengths are between 100000 and 999999\n  for i = 1, 100000 do\n    local n =\
    \ arr[i]\n    table.insert(result, n)\n    table.insert(result, n - 1000000)\n\
    \  end\n  -- Add the numbers whose lengths are between 1000000 and 999999999\n\
    \  for i = 1, 1000000 do\n    local n = arr[i]\n    table.insert(result, n)\n\
    \    table.insert(result, n - 10000000)\n  end\n  -- Add the numbers whose lengths\
    \ are between 100000000 and 99999999999\n  for i = 1, 100000000 do\n    local\
    \ n = arr[i]\n    table.insert(result, n)\n    table.insert(result, n - 1000000000)\n\
    \  end\n  -- Add the numbers whose lengths are between 10000000000 and 9999999999999\n\
    \  for i = 1, 10000000000 do\n    local n = arr[i]\n    table.insert(result, n)\n\
    \    table.insert(result, n - 1000000000000)\n  end\n  -- Add the numbers whose\
    \ lengths are between 1000000000000 and 9999999999999\n  for i = 1, 1000000000000\
    \ do\n    local n = arr[i]\n    table.insert(result, n)\n    table.insert(result,\
    \ n - 10000000000000)\n  end\n  -- Add the numbers whose lengths are between 100000000000000\
    \ and 9999999999999\n  for i = 1, 100000000000000 do\n    local n = arr[i]\n \
    \   table.insert(result, n)\n    table.insert(result, n - 1000000000000000)\n\
    \  end\n  -- Add the numbers whose lengths are between 10000000000000000 and 9999999999999\n\
    \  for i = 1, ", "  if #arr == 0 then\n    return {}\n  end", "  local result\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v == 0 or v == 1 or v == 2 or v ==\
    \ 3 or v == 4 or v == 5 or v == 6 then\n      result[#result + 1] = intname(v)\n\
    \    elseif v == 7 then\n      result[#result + 1] = 'Seven'\n    elseif v ==\
    \ 8 then\n      result[#result + 1] = 'Eight'\n    elseif v == 9 then\n      result[#result\
    \ + 1] = 'Nine'\n    end\n  end\n  return result\nend", "  local tbl = {}\n  local\
    \ max = 0\n  for i = 1, 9 do\n    if arr[i] > max then\n      max = arr[i]\n \
    \   end\n  end\n  max = 10 - max\n  for i = 1, 9 do\n    if arr[i] == max then\n\
    \      tbl[max - i] = arr[i]\n    end\n  end\n  for i = 1, 9 do\n    if arr[i]\
    \ == max then\n      tbl[max - i] = \"Nine\"\n    end\n  end\n  return tbl\nend",
  "    local result = {}\n    for i = 1, 10 do\n        local number = arr[i]\n  \
    \      if number ~= nil then\n            -- If the number is less than 10, we\
    \ use the integer \"One\".\n            -- If the number is greater than 10, we\
    \ use the integer \"Nine\".\n            -- If it is between 1 and 9, we use the\
    \ integer \"One\", otherwise use \"Two\".\n            if number < 10 then\n \
    \               result[string.format(\"One\", number)]\n            elseif number\
    \ > 10 then\n                result[string.format(\"Nine\", number)]\n       \
    \     elseif number <= 9 then\n                result[string.format(\"One\", number)]\n\
    \            else\n                result[string.format(\"Two\", number)]\n  \
    \          end\n        end\n    end\n    return result\nend", "  if #arr == 0\
    \ then\n    return {}\n  end\n  local names = {}\n  for i = 1, 10 do\n    local\
    \ n = arr[i] or 1\n    local k = 10 - i\n    local d = n % k\n    n = math.floor(n/k)\n\
    \    if d ~= 0 then\n      names[n] = names[n] or 'One'\n    end\n  end\n  for\
    \ i = 1, 10 do\n    local k = 10 - i\n    if i < k then\n      names[10 - i -\
    \ 1] = names[i]\n    end\n  end\n  local res = {}\n  for i, v in pairs(names)\
    \ do\n    res[v] = i\n  end\n  return res\nend", "  local result = {}\n  for k,\
    \ v in pairs(arr) do\n    if arr[v] <= 9 then\n      local digit = string.format(\"\
    %g\", v)\n      -- If v was -1, then we want the lowest value that is >= 10, so\
    \ take its absolute value.\n      if v == -1 then\n        digit = string.format(\"\
    %g\", abs(v))\n      else\n        digit = string.format(\"%g\", v)\n      end\n\
    \      result[digit] = arr[v]\n    end\n  end\n  return result\nend", "  if #arr\
    \ == 0 then\n    return {}\n  end\n  local t = {}\n  local i = 1\n  repeat\n \
    \   t[#t+1] = string.sub(\n      (arr[i]..arr[i]).. string.sub((arr[i]..arr[i])..\
    \ string.sub(arr[i])),\n      2,\n      3)\n    i = i + 1\n  until #arr == i\n\
    \  table.sort(t)\n  local nums = table.concat(t)\n  for i = 1, #nums do\n    local\
    \ digit = tonumber(nums[i])\n    if digit ~= nil then\n      local j = i - 1\n\
    \      while j > 0 and nums[j] ~= \"\" do\n        table.insert(t, nums[j])\n\
    \        j = j - 1\n      end\n      nums[i] = tonumber(\n        string.sub(\n\
    \          (digit..digit).. string.sub(digit..digit).. string.sub(digit),\n  \
    \        2,\n          3)\n      )\n    end\n  end\n  return t\nend", "  -- Reverse\
    \ the array since we will be sorting the integers in ascending order\n  local\
    \ _arr = arr:gsub('(%d+)', '%1'):reverse()\n  -- Sort by length while maintaining\
    \ the integrity of the array\n  local _table = {}\n  for i = 1, #_arr do\n   \
    \ _table[#_table+1] = _arr[i]\n  end\n  -- Replace the integers with the corresponding\
    \ integers\n  local _final = {}\n  for i = 1, 9 do\n    local index = _table[i]\n\
    \    -- If the integer is not in the list, ignore it\n    if index then\n    \
    \  -- Replace the number in the list with the given integer\n      _final[i] =\
    \ _arr[index]\n    end\n  end\n  return _final\nend", "  local result = {}\n \
    \ -- We will go through the table from high to low because we want the largest\n\
    \  -- number first.\n  for i = #arr, 1, -1 do\n    local k = i\n    repeat\n \
    \     table.insert(result, arr[k])\n      k = k - 1\n    until k == 0 or arr[k]\
    \ >= 10\n  end\n  -- Now we reverse the array and replace each number by its name.\n\
    \  table.sort(result)\n  local i = 1\n  repeat\n    arr[i] = \"One\"\n    i =\
    \ i + 1\n  until i == #arr\n  return result\nend", "  local t = {}\n  for i =\
    \ 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n      table.insert(t,\
    \ tostring(num))\n    end\n  end\n  if #arr > 0 then\n    for i = #arr, 1, -1\
    \ do\n      table.insert(t, tostring(arr[i]))\n    end\n  end\n  return t\nend",
  "    local table = {}\n    for k, v in pairs(arr) do\n        table[k] = (not v\
    \ and 'One' or '' .. v)\n    end\n    return table\nend", "    local results =\
    \ {}\n    for _, value in pairs(arr) do\n        local length = string.format(\"\
    %0d\", value)\n        if length > 9 then\n            length = string.gsub(length,\
    \ \"(..)\", function (digits)\n                return by_length[digits]\n    \
    \        end)\n        end\n        results[length] = value\n    end\n    return\
    \ unpack(results)\nend", "  local result = {}\n  for i, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      result[#result + 1] = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}[v]\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    return #a > #b\n  end)\n\
    \  for i, v in ipairs(result) do\n    arr[i] = v\n  end\n  return result\nend",
  '  if #arr == 0 then return end', "  if #arr == 0 then\n    return {}\n  end\n \
    \ local temp = {}\n  for i, v in ipairs(arr) do\n    local k = (v + 9) % 10\n\
    \    if k ~= 0 then\n      temp[k] = tostring(k)\n    end\n  end\n  table.sort(temp)\n\
    \  for i, v in ipairs(temp) do\n    temp[i] = One[v]\n  end\n  return temp\nend",
  "  local result = {}\n  for i=1,10 do\n    local num = arr[i]\n    if not num then\n\
    \      break\n    end\n    local digit = math.floor(math.log10(num))\n    if not\
    \ result[digit] then\n      result[digit] = {}\n    end\n    result[digit][tostring(num)]\
    \ = i\n  end\n  for i=1,10 do\n    if result[i] and next(result[i]) then\n   \
    \   table.sort(result[i])\n      local j = 1\n      while j < 10 do\n        local\
    \ v = result[i][j]\n        result[i][j] = result[i][v]\n        result[i][v]\
    \ = nil\n        j = j + 1\n      end\n    end\n  end\n  for i=1,10 do\n    if\
    \ result[i] then\n      for j=1,#result[i] do\n        result[i][j] = One[result[i][j]]\n\
    \      end\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ i = 1, 9 do\n    if arr[i] > 0 then\n      table.insert(result, tostring(i -\
    \ 1))\n    end\n  end\n  for i = 1, 9 do\n    if arr[i] == 0 then\n      table.insert(result,\
    \ tostring(i))\n    end\n  end\n  return result\nend", "  if not arr then return\
    \ {} end\n  local result = {}\n  for k, v in pairs(arr) do\n    table.insert(result,\
    \ v and string.format(\"%g\", v))\n  end\n  if #result < 1 then return {} end\n\
    \  table.sort(result, function(a, b) return a<b end)\n  local digits = {}\n  for\
    \ k, v in pairs(result) do\n    digits[v] = k\n  end\n  local names = {}\n  for\
    \ k, v in pairs(digits) do\n    table.insert(names, k)\n  end\n  for k, v in pairs(arr)\
    \ do\n    if v then table.insert(result, v - 1 + #names[v]) end\n  end\n  result\n\
    end", "  local result = {}\n  for i, x in ipairs(arr) do\n    if x > 0 and x <\
    \ 10 then\n      local digit = string.byte(x)\n      local index = string.len(digit)\n\
    \      if index == 1 then\n        result[digit] = 'One'\n      elseif index ==\
    \ 2 then\n        result[digit] = 'Two'\n      elseif index == 3 then\n      \
    \  result[digit] = 'Three'\n      elseif index == 4 then\n        result[digit]\
    \ = 'Four'\n      elseif index == 5 then\n        result[digit] = 'Five'\n   \
    \   elseif index == 6 then\n        result[digit] = 'Six'\n      elseif index\
    \ == 7 then\n        result[digit] = 'Seven'\n      elseif index == 8 then\n \
    \       result[digit] = 'Eight'\n      elseif index == 9 then\n        result[digit]\
    \ = 'Nine'\n      else\n        assert(false, 'Should never get here: by_length\
    \ called with table '..tostring(arr))\n      end\n    else\n      assert(false,\
    \ 'Should never get here: by_length called with table '..tostring(arr))\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #arr do\n  \
    \  if arr[i] > 9 then\n      arr[i] = 'Nine'\n    end\n    table.insert(result,\
    \ arr[i])\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = 'One'\n  end\n  return result\nend", "  if #arr == 0 then\n    return {}\n\
    \  end\n  local result = {}\n  local function helper(arr, i)\n    for i = 1, 9\
    \ do\n      local j = i - 1\n      local k = arr[j]\n      arr[j] = arr[i]\n \
    \     arr[i] = k\n    end\n    local k, v\n    table.sort(arr)\n    local i =\
    \ 1\n    while i < #arr do\n      k = arr[i]\n      v = tostring(k)\n      if\
    \ not result[v] then\n        result[v] = true\n        result[k] = v\n      end\n\
    \      i = i + 1\n    end\n  end\n  helper(arr, 1)\n  helper(arr, 9)\n  return\
    \ result\nend", "    local sorted_arr = {}\n    for _, val in ipairs(arr) do\n\
    \        if val > 0 and val <= 9 then\n            table.insert(sorted_arr, val)\n\
    \        end\n    end\n    table.sort(sorted_arr, reverse)\n    return sorted_arr\n\
    end", "    local result = {}\n    for _, v in pairs(arr) do\n        if v <= 9\
    \ then\n            table.insert(result, v)\n        else\n            break\n\
    \        end\n    end\n    if #result > 0 then\n        local reverse = {}\n \
    \       for i = #result, 1, -1 do\n            table.insert(reverse, result[i])\n\
    \        end\n        result = reverse\n    end\n    for _, v in pairs(result)\
    \ do\n        local num = string.sub(v, 1, 1)\n        result[v] = string.format(\"\
    %c\", tonumber(num))\n    end\n    return result\nend", "  local res = {}\n  local\
    \ max = {}\n  -- find the length of the array\n  for _, v in pairs(arr) do\n \
    \   if not max[v] then\n      max[v] = true\n      table.insert(res, v)\n    end\n\
    \  end\n  -- sort the array\n  table.sort(res, function(a, b) return #a > #b end)\n\
    \  -- reverse the order\n  table.reverse(res)\n  for k, v in pairs(res) do\n \
    \   -- replace with its corresponding name\n    arr[k] = 'One'\n    arr[k + 1]\
    \ = 'Two'\n    arr[k + 2] = 'Three'\n    arr[k + 3] = 'Four'\n    arr[k + 4] =\
    \ 'Five'\n    arr[k + 5] = 'Six'\n    arr[k + 6] = 'Seven'\n    arr[k + 7] = 'Eight'\n\
    \    arr[k + 8] = 'Nine'\n  end\n  return res\nend", "    local lengths = {}\n\
    \    for i = 1, #arr do\n        table.insert(lengths, #lengths)\n        if arr[i]\
    \ > 9 then\n            arr[i] = arr[i - 1]\n        end\n    end\n    local sorted\n\
    \    if #lengths == 0 then\n        sorted = {}\n    else\n        sorted = table.sort(table.concat(arr))\n\
    \    end\n    for i = 1, #sorted do\n        sorted[#sorted - i - 1] = ones[sorted[#sorted\
    \ - i - 1]]\n    end\n    return sorted\nend", "    local function is_between(value,\
    \ min, max)\n        return min < value and value < max\n    end\n    local result\
    \ = {}\n    for i = 1, 9 do\n        local value = arr[i]\n        if value <\
    \ 1 then\n            table.insert(result, \"\")\n        else\n            for\
    \ j = 1, 10 do\n                if is_between(value, 1, 9) then\n            \
    \        table.insert(result, j..\"-One\")\n                elseif is_between(value,\
    \ 10, 99) then\n                    table.insert(result, j..\"-Ten\")\n      \
    \          elseif is_between(value, 100, 999) then\n                    table.insert(result,\
    \ j..\"-Hundred\")\n                elseif is_between(value, 1000, 9999) then\n\
    \                    table.insert(result, j..\"-Thousand\")\n                else\n\
    \                    table.insert(result, \"\")\n                end\n       \
    \     end\n        end\n    end\n    return result\nend", "   if #arr == 0 then\n\
    \      return {}\n   end", "  local counts = {}\n  for i = 1, 10 do\n    table.insert(counts,\
    \ 0)\n  end\n  for i = 1, #arr do\n    local num = arr[i]\n    local len = #counts\n\
    \    for k = 1, #counts do\n      if num > len + 1 then\n        len = k + 1\n\
    \      end\n    end\n    table.insert(counts, len)\n  end\n  local reverse = {}\n\
    \  for i = 1, 10 do\n    table.insert(reverse, \"\")\n  end\n  for i = 1, #counts\
    \ do\n    local num = counts[i]\n    for j = 1, 10 do\n      if num == j then\n\
    \        table.insert(reverse[j], itoa(j))\n      end\n    end\n  end\n  for i\
    \ = 1, 10 do\n    table.insert(reverse[i], \"\")\n  end\n  for i = 1, #counts\
    \ do\n    local len = counts[i]\n    local num = len\n    for j = 1, 10 do\n \
    \     if num > 1 then\n        table.insert(reverse[num], itoa(j))\n      end\n\
    \      num = num - 1\n    end\n  end\n  -- reverse the table\n  local reversed\
    \ = {}\n  for i = 1, 10 do\n    table.insert(reversed, \"\")\n  end\n  for i =\
    \ 1, #counts do\n    local len = counts[i]\n    local num = len\n    for j = 1,\
    \ 10 do\n      if num > 1 then\n        table.insert(reversed[num], reverse[num])\n\
    \      end\n      num = num - 1\n    end\n  end\n  return reversed\nend", "  if\
    \ not arr then\n    return {}\n  end\n  local m = {}\n  local i = 0\n  for k in\
    \ pairs(arr) do\n    m[i] = k\n    i = i + 1\n  end\n  table.sort(m, function(a,\
    \ b) return a < b end)\n  for i = 1, 9 do\n    m[i] = \"One\"\n  end\n  for i\
    \ = 10, 0, -1 do\n    m[i] = \"Two\"\n  end\n  for i = 20, 0, -1 do\n    m[i]\
    \ = \"Three\"\n  end\n  for i = 30, 0, -1 do\n    m[i] = \"Four\"\n  end\n  for\
    \ i = 40, 0, -1 do\n    m[i] = \"Five\"\n  end\n  for i = 50, 0, -1 do\n    m[i]\
    \ = \"Six\"\n  end\n  for i = 60, 0, -1 do\n    m[i] = \"Seven\"\n  end\n  for\
    \ i = 70, 0, -1 do\n    m[i] = \"Eight\"\n  end\n  for i = 80, 0, -1 do\n    m[i]\
    \ = \"Nine\"\n  end\n  return m\nend", "  local sorted_arr = table.sort(arr)\n\
    \  local res = {}\n  for i = 1, 9 do\n    local item = sorted_arr[i]\n    if item\
    \ > 9 then break end\n    table.insert(res, item)\n  end\n  return res\nend",
  "  local result = {}\n  local lengths = {}\n  for i = 1, 9 do\n    local length\
    \ = 0\n    for j = 1, #arr do\n      if arr[j] == i then\n        length = length\
    \ + 1\n      end\n    end\n    if length == #arr then\n      result[#result +\
    \ 1] = i\n      lengths[i] = length\n    end\n  end\n  table.sort(result, function(a,\
    \ b) return lengths[a] > lengths[b] end)\n  local i = 0\n  for i = #result, 1,\
    \ -1 do\n    result[i] = names[result[i]]\n  end\n  return result\nend", "  local\
    \ result = {}\n  for _, value in ipairs(arr) do\n    if value > 0 and value <=\
    \ 9 then\n      result[ tostring(value - 1) ] =\n        arr[value] or \"No name\
    \ \"\n    end\n  end\n  return result\nend", "  local sorted_arr = {}\n  for i=1,#arr\
    \ do\n    sorted_arr[i] = arr[i]\n  end\n  table.sort(sorted_arr, function(i,j)\n\
    \    return i - j\n  end)\n  local result = {}\n  for i=1,#sorted_arr do\n   \
    \ result[sorted_arr[i]] = tostring(i - 1)\n  end\n  return result\nend", "   \
    \ local tbl = {}\n    for key, value in pairs(arr) do\n        if value < 10 and\
    \ key <= 9 then\n            tbl[value] = key\n        end\n    end\n    return\
    \ tbl\nend", "  local tbl = {}\n  local last_val = nil\n  local last_letter =\
    \ nil\n  for i = 1, 10 do\n    local val = arr[i] or nil\n    if not val then\n\
    \      last_letter = nil\n    elseif val > 9 then\n      tbl[i] = val\n      last_letter\
    \ = string.sub((val - 10), \"^0\", \"^-1\")\n    else\n      tbl[i] = val\n  \
    \    last_val = val\n    end\n  end\n  while #tbl > 0 do\n    if tbl[#tbl] > 10\
    \ then\n      local _, letter = math.modf(tbl[#tbl] - 10 * math.floor(tbl[#tbl]\
    \ / 10))\n      tbl[#tbl] = letter\n      tbl[#tbl] = \"One\"..letter\n    end\n\
    \    tbl[#tbl] = nil\n  end\n  if not last_letter then\n    return tbl\n  end\n\
    \  -- Reverse the table and flip each digit to the corresponding \"One\", \"Two\"\
    , \"Three\",\n  -- \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", or \"Nine\"\
    \n  for i = #tbl, 2, -1 do\n    tbl[i] = tbl[i]..last_letter\n  end\n  return\
    \ tbl\nend", "  local result = {}\n  for i = 1, 9 do\n    for k, v in pairs(arr)\
    \ do\n      if v >= i and v < i + (9 - i) then\n        result[k] = v\n      \
    \  table.insert(result, k)\n      end\n    end\n  end\n  return result\nend",
  "  if #arr == 0 then\n    return {}\n  end", "  return function(x)\n    for i =\
    \ 1, 9 do\n      if arr[i] <= x and x >= arr[i] then\n        return arr[i]\n\
    \      end\n    end\n  end\nend", "  if #arr == 0 then\n    return {}\n  else\n\
    \    local arr1 = {}\n    for i = 1, #arr do\n      arr1[i] = tostring(arr[i])\n\
    \    end\n    table.sort(arr1, function(a, b)\n      if a < 1 or b < 1 then\n\
    \        return false\n      else\n        return true\n      end\n    end)\n\
    \    local arr2 = {}\n    local size = #arr\n    for i = 1, #arr do\n      arr2[size\
    \ - i - 1] = tostring(arr[i])\n    end\n    return arr2\n  end\nend", "  if #arr\
    \ == 0 then\n    return {}\n  else\n    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n      if v < 1 or v > 9 then\n        -- ignore strange numbers\n      \
    \  continue\n      else\n        table.insert(result, string.format(\"%c\", v))\
    \ -- reverse the order\n      end\n    end\n    return reverse(result) -- return\
    \ the reversed table\n  end\nend", "  local res = {}\n  for i = 1, #arr do\n \
    \   local len = tonumber(arr[i])\n    if len > 0 then\n      if len < 10 then\n\
    \        res[len] = arr[i]\n      else\n        res[len] = tostring(len) .. '-'\
    \ .. arr[i]\n      end\n    end\n  end\n  return res\nend", "  local result =\
    \ {}\n  for i = 1, #arr do\n    if arr[i] <= 9 then\n      result[tostring(arr[i])]\
    \ = arr[i]\n    end\n  end\n  return result\nend", "  -- A table of lengths\n\
    \  local lengths = {}", "  if #arr == 0 then\n    return {}\n  elseif #arr ==\
    \ 1 then\n    local n = arr[1]\n    if n >= 0 and n < 10 then\n      return {'One'}\n\
    \    end\n  end", "  if next(arr) == nil then return end\n  local sorted_arr =\
    \ table.sort(arr)\n  local length = sorted_arr[1]\n  local reversed = {}\n  local\
    \ mapping = {}\n  for i = 1, #sorted_arr do\n    if sorted_arr[i] < length then\n\
    \      table.insert(reversed, sorted_arr[i])\n      mapping[length + 1] = table.concat(mapping)\n\
    \    else\n      break\n    end\n  end\n  -- Append the rest in the last position.\n\
    \  table.insert(reversed, sorted_arr[#sorted_arr])\n  mapping[length + 1] = table.concat(mapping)\n\
    \  return mapping\nend", "  local result = {}\n  local length = #arr\n  for i\
    \ = 1, length do\n    local item = arr[i]\n    if item > 9 or item < 1 then\n\
    \      break\n    end\n    result[#result + 1] = string.format(\"%g\", item) ..\
    \ by_name[item - 1]\n  end\n  if #result > 0 then\n    return table.concat(result,\
    \ \"-\")\n  end\n  return {}\nend", "    local result = {}\n    for i = 1, 9 do\n\
    \        local val = arr[i]\n        if val ~= nil and val >= 1 and val <= 9 then\n\
    \            local num =\n                string.sub(\n                    string.rep(\n\
    \                        \"One\",\n                        10 - val\n        \
    \            ),\n                    1,\n                    1\n             \
    \   )\n            table.insert(result, num)\n        end\n    end\n    return\
    \ result\nend", "  local arr2 = {}\n  local arr3 = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v < 1 or v > 9 then\n      arr2[i] = v\n    else\n      arr3[v] =\
    \ arr3[v] or i\n    end\n  end\n  for i = 1, 9 do\n    arr2[tostring(i)] = arr3[i]\n\
    \  end\n  return arr2\nend", "    local sorted_arr = table.sort(arr)\n    local\
    \ result = {}\n    for i, v in pairs(sorted_arr) do\n        if i > 0 and v ==\
    \ sorted_arr[i - 1] then\n            table.insert(result, \"Two\")\n        end\n\
    \        if i > 1 and v == sorted_arr[i - 2] then\n            table.insert(result,\
    \ \"Three\")\n        end\n        if i > 2 and v == sorted_arr[i - 3] then\n\
    \            table.insert(result, \"Four\")\n        end\n        if i > 3 and\
    \ v == sorted_arr[i - 4] then\n            table.insert(result, \"Five\")\n  \
    \      end\n        if i > 4 and v == sorted_arr[i - 5] then\n            table.insert(result,\
    \ \"Six\")\n        end\n        if i > 5 and v == sorted_arr[i - 6] then\n  \
    \          table.insert(result, \"Seven\")\n        end\n        if i > 6 and\
    \ v == sorted_arr[i - 7] then\n            table.insert(result, \"Eight\")\n \
    \       end\n        if i > 7 and v == sorted_arr[i - 8] then\n            table.insert(result,\
    \ \"Nine\")\n        end\n        if v == 1 then\n            table.insert(result,\
    \ \"One\")\n        end\n    end\n    return result\nend", "  local new_arr =\
    \ {}\n  local index = 1\n  local last_len = nil", "  return arr:gsub(\"^([^%d]+)\"\
    , function (s)\n    local v1 = tonumber(s[1]) or 1\n    if v1 == 1 then return\
    \ s[1] end\n    local v2 = tonumber(s[2]) or 9\n    if v2 > v1 then return s end\n\
    \    return string.rep(\"One\", v1 - 1) + \"Two\"\n  end)\nend", "  local names\
    \ = {\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\",\n  }\n  local length = #arr\n  local table = arr\n  if\
    \ length == 1 then return {} end\n  table.sort(function(a,b) return a < b end)\n\
    \  table.reverse(arr)\n  local reversed = {}\n  for i = 1, length do\n    reversed[#reversed\
    \ + 1] = names[arr[i]]\n  end\n  return reversed\nend", "  if #arr == 0 then return\
    \ end\n  local sorted\n  for i = 1, 10 do\n    if i > arr[#arr] and i ~= 0 then\n\
    \      table.insert(sorted, i)\n    end\n  end\n  table.sort(sorted)\n  local\
    \ new = {}\n  for i = 1, 10 do\n    new[i] = One\n  end\n  for i = #sorted, 1,\
    \ -1 do\n    new[sorted[i - 1]] = Two\n  end\n  for i = 10, 1, -1 do\n    new[i]\
    \ = Three\n  end\n  for i = 11, 1, -1 do\n    new[i] = Four\n  end\n  for i =\
    \ 12, 1, -1 do\n    new[i] = Five\n  end\n  for i = 13, 1, -1 do\n    new[i] =\
    \ Six\n  end\n  for i = 14, 1, -1 do\n    new[i] = Seven\n  end\n  for i = 15,\
    \ 1, -1 do\n    new[i] = Eight\n  end\n  for i = 16, 1, -1 do\n    new[i] = Nine\n\
    \  end\n  for i = 17, 1, -1 do\n    new[i] = Ten\n  end\n  -- Sort digits into\
    \ descending order.\n  table.sort(sorted, function(x, y)\n    return y - x\n \
    \ end)\n  -- Replace each digit by its corresponding name from \"One\", \"Two\"\
    , \"Three\", \"Four\",\n  -- \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n  local i = 0\n  for j = #sorted, 1, -1 do\n    new[j] = sorted[i]\n    i =\
    \ i + 1\n  end\n  return new\nend", "  local result = {}\n  for i = 1, 9 do\n\
    \    if arr[i] >= 1 and arr[i] <= 9 then\n      result[arr[i]] = arr[i]\n    end\n\
    \  end\n  if #arr == 0 then\n    return result\n  end\n  table.sort(result, function\
    \ (a, b) return b - a end)\n  local last = -1\n  for i = 1, #result do\n    result[i]\
    \ = by_length_map[result[i]]\n    if last == -1 then\n      last = result[i]\n\
    \    end\n  end\n  return result\nend", "    local n = {}\n    for i, v in ipairs(arr)\
    \ do\n        n[v + 1] = (n[v + 1] or '') .. One[v + 1]\n    end\n    return n\n\
    end", "    local ordered = {}\n    table.sort(arr)\n    for i = 1, 9, 1 do\n \
    \       ordered[i] = arr[math.floor(i)]\n    end\n    for i = 1, 9, 1 do\n   \
    \     arr[i] = ordered[i]\n    end\n    for i = 1, 9, 1 do\n        arr[#arr +\
    \ i] = i\n    end\n    return arr\nend", "  local result = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] <= 9 and arr[i] > 1 then\n      table.insert(result, strs[arr[i]])\n\
    \    end\n  end\n  if #result == 0 then\n    return {}\n  end\n  for i = #result,\
    \ 1, -1 do\n    table.insert(result, strs[result[i]])\n  end\n  return result\n\
    end", "  local tbl = {}\n  local last_number = nil\n  local last_name = nil\n\
    \  for i = 1, 9 do\n    local number = arr[i]\n    if number > 1 then\n      local\
    \ name = string.format('One', i)\n      tbl[i] = name\n      last_number = number\n\
    \      last_name = name\n      elseif number == 1 then\n      tbl[i] = last_name\n\
    \      else\n      tbl[i] = number\n    end\n  end\n  if tbl[1] == 'One' then\n\
    \    tbl[1] = last_name\n  end\n  return tbl\nend", "  local result = {}\n  for\
    \ i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      result[#result\
    \ + 1] = lookup[string.sub(lookup[tostring(v)], 1, 1)]\n    end\n  end\n  if #result\
    \ == 0 then\n    return result\n  end\n  table.sort(result, function (a, b) return\
    \ a[1] < b[1] end)\n  local reversed = {}\n  for i, v in ipairs(result) do\n \
    \   reversed[#reversed + 1] = v\n  end\n  for i, v in ipairs(arr) do\n    if v\
    \ >= 1 and v <= 9 then\n      lookup[string.sub(lookup[tostring(v)], 1, 1)] =\
    \ reversed[i]\n    end\n  end\n  return result\nend", "    local lengths = arr:map(function(x)\
    \ return x:len() end)\n    local sorted\n    if #lengths > 0 then\n        sorted\
    \ = table.sort(lengths)\n    end\n    local result = {}\n    for i = 1, 9 do\n\
    \        if sorted and sorted[i] then\n            table.insert(result, string.format(\"\
    %d\", sorted[i]))\n        else\n            table.insert(result, \"Nine\")\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result do\n   \
    \     result[i] = string.format(\"%s\", result[i])\n    end\n    return result\n\
    end", "  if #arr == 0 then return {} end\n  local result = {}\n  local counts\
    \ = {}\n  local min = 1\n  local max = 0\n  for i = 1, #arr do\n    if #counts\
    \ == 0 then\n      max = arr[i]\n      min = max - max - max\n    elseif #counts[arr[i]]\
    \ == 0 then\n      max = arr[i]\n      counts[max] = arr[i]\n    else\n      local\
    \ count = counts[arr[i]]\n      counts[arr[i]] = count + 1\n      max = count\
    \ - count + arr[i]\n      min = max - max - max\n    end\n  end\n  for i = min,\
    \ max + 1 do\n    if #counts[arr[i]] == 1 then\n      table.insert(result, arr[i])\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for i = 1, 10\
    \ do\n    if arr[i] > i then\n      table.insert(result, i)\n      table.remove(arr,\
    \ i)\n    end\n  end\n  if #arr > 0 then\n    table.insert(result, arr[#arr])\n\
    \  end\n  return result\nend", "  if #arr == 0 then\n    return {}\n  end\n  local\
    \ temp = {}\n  local keys = {}\n  for i = 1, 9 do\n    keys[i] = \"One\"\n  end\n\
    \  table.sort(arr, function(a, b) return #a > #b end)\n  table.sort(arr, function(a,\
    \ b) return #a < #b end)\n  for i = 1, #arr do\n    table.insert(keys, arr[i -\
    \ 1])\n  end\n  for i = 1, #arr do\n    table.insert(temp, table.concat(keys,\
    \ \" \"))\n    table.insert(temp, arr[i])\n  end\n  return temp\nend", "  if #arr\
    \ == 0 then return {} end\n  local keys = {}\n  for i = 1, #arr do\n    local\
    \ value = arr[i]\n    if value ~= nil then\n      local n = math.floor(value*10)\n\
    \      local digit = math.floor(value/10)\n      if n > 0 and digit ~= 0 then\n\
    \        table.insert(keys, digit)\n      end\n    end\n  end\n  table.sort(keys)\n\
    \  for i = 1, #arr do\n    arr[i] = keys[i]\n  end\n  local names = {\n    ['Zero'],\n\
    \    ['One'],\n    ['Two'],\n    ['Three'],\n    ['Four'],\n    ['Five'],\n  \
    \  ['Six'],\n    ['Seven'],\n    ['Eight'],\n    ['Nine']\n  }\n  for i = 1, #arr\
    \ do\n    local n = arr[i]\n    arr[i] = names[n]\n  end\n  return arr\nend",
  "\t-- If it's an array, treat it like one and return the result:\n\tif type(arr)\
    \ == 'table' then\n\t\tlocal t = {}\n\t\tfor _, v in ipairs(arr) do\n\t\t\ttable.insert(t,\
    \ v)\n\t\tend\n\t\treturn t\n\tend\n\t-- If it's not a table, treat it as a single\
    \ number and return the length:\n\treturn #arr\nend", "  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = string.format('%q', arr[i])\n    end\n  end\n  if #result == 0 then\n\
    \    return {}\n  else\n    table.sort(result)\n    for i = 1, #result do\n  \
    \    result[i] = result[i]:gsub('%d', tbl[i])\n    end\n    return result\n  end\n\
    end", "    local sorted = {}\n    for i, v in ipairs(arr) do\n        if v > 1\
    \ and v <= 9 then\n            table.insert(sorted, v)\n        end\n    end\n\
    \    table.sort(sorted)\n    local output = table.replicate(9, nil)\n    for i,\
    \ v in ipairs(sorted) do\n        output[v] = tonumber(i==1 and 'One' or i==2\
    \ and 'Two' or i==3 and 'Three' or i==4 and 'Four' or i==5 and 'Five' or i==6\
    \ and 'Six' or i==7 and 'Seven' or i==8 and 'Eight' or i==9 and 'Nine')\n    end\n\
    \    return output\nend", "  local result = {}\n  for i = 1, #arr do\n    if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n      result[i] = \"One\"\n    elseif arr[i] >= 10\
    \ and arr[i] <= 99 then\n      result[i] = \"Two\"\n    elseif arr[i] >= 100 and\
    \ arr[i] <= 999 then\n      result[i] = \"Three\"\n    elseif arr[i] >= 1000 and\
    \ arr[i] <= 9999 then\n      result[i] = \"Four\"\n    elseif arr[i] >= 10000\
    \ and arr[i] <= 99999 then\n      result[i] = \"Five\"\n    elseif arr[i] >= 100000\
    \ and arr[i] <= 999999 then\n      result[i] = \"Six\"\n    elseif arr[i] >= 1000000\
    \ and arr[i] <= 9999999 then\n      result[i] = \"Seven\"\n    elseif arr[i] >=\
    \ 10000000 and arr[i] <= 99999999 then\n      result[i] = \"Eight\"\n    elseif\
    \ arr[i] >= 100000000 and arr[i] <= 999999999 then\n      result[i] = \"Nine\"\
    \n    elseif arr[i] >= 1000000000 and arr[i] <= 99999999999 then\n      result[i]\
    \ = \"Ten\"\n    end\n  end\n  return result\nend", "  local tbl = {}\n  local\
    \ first = true\n  for i = 1, 9 do\n    if (arr[i] > 0) then\n      tbl[i] = 'One'\n\
    \      local j = 1\n      while (arr[i] > 0) do\n        arr[i] = arr[i] / 10\n\
    \        tbl[i] = tbl[i] .. 'Two'\n        arr[i] = arr[i] % 10\n        tbl[i]\
    \ = tbl[i] .. j\n        j = j + 1\n      end\n    end\n    if not first then\n\
    \      tbl[i] = 'Two'\n    end\n    first = false\n  end\n  if arr[1] == 0 then\n\
    \    return tbl\n  end\n  for i = 1, 9 do\n    if (arr[i] > 0) then\n      tbl[i]\
    \ = tbl[i] .. 'One'\n    end\n  end\n  return tbl\nend", "  if #arr == 0 then\n\
    \    return {}\n  end\n  local sorted_arr = arr:sort()\n  local reversed_arr =\
    \ sorted_arr:reverse()\n  local table = nil\n  for i = 1, 10 do\n    if reversed_arr[i]\
    \ == i then\n      table = table or {}\n      table[i] = \"One\"\n    else\n \
    \     table = table or {}\n      table[i] = \"Two\"\n    end\n  end\n  return\
    \ table\nend", "  return arr\n  -- This filter function sorts the table by the\
    \ length of each entry in the table\n  -- and reverses the resulting table.\n\
    \  --\n  -- This filter function also ignores strange numeric values that aren't\
    \ between 1 and 9\n  -- (this filter is called by `filter_by_length`).\n  -- This\
    \ filter function also ignores entries with a length of 0 (this filter is called\n\
    \  -- by `filter_by_length`); these entries are ignored by `reverse_by_length`.\n\
    \  -- This filter function also ignores entries with an empty string; these entries\
    \ are\n  -- ignored by `filter_by_length`.\n  filter(function(el)\n    return\
    \ #el > 0 and el >= 1 and el <= 9 end\n  end)\n  -- This filter function replaces\
    \ each digit with the corresponding name in the\n  -- table of ones, twos, threes,\
    \ fours, fives, sixes, sevens, and eights.\n  -- It then returns the resulting\
    \ table.\n  map(function(el)\n    return el == 0 and {} or {table[el] + 1}\n \
    \ end)\n  -- This filter function ignores all entries with an empty string and\
    \ returns the table.\n  filter(function(el)\n    return el == \"\" or (#el > 0\
    \ and table[el]) ~= nil\n  end)\nend\n</code>\nThe function reverse_by_length\
    \ will reverse the table and replace each digit with the corresponding name from\
    \ the table of ones, twos, threes, fours, fives, sixes, sevens, and eights:\n\
    <code>", "  local lengths = {}\n  for i = 1, 10 do\n    local value = tostring(arr[i])\n\
    \    local name = if i ~= 1 then \"One\" .. value else \"One\"\n    lengths[value]\
    \ = name\n  end\n  for i = 1, 10 do\n    local value = tostring(arr[i])\n    local\
    \ name = lengths[value]\n    if name then\n      lengths[value] = name\n    elseif\
    \ i == 1 then\n      lengths[value] = nil\n    end\n  end\n  local results = {}\n\
    \  for value, name in pairs(lengths) do\n    results[#results + 1] = name .. \"\
    -\" .. value\n  end\n  return results\nend", "  return setmetatable({}, {__index\
    \ = function(t, k)\n    if arr[k] then\n      local len = 1\n      do\n      \
    \  len = len * 10 + arr[k]\n      end\n      local digits = {}\n      for i =\
    \ 1, len do\n        digits[string.sub(tostring(k), i, i)] = arr[k]\n      end\n\
    \      local rev = reverse(tonumber(table.concat(digits))):gsub(\"^%z\", \"\"\
    ):gsub(\"%d+\", \"%1\")\n      for i = 1, #digits do\n        t[i] = \"One\"\n\
    \      end\n      t[#t] = rev\n    end\n    return t\n  end})\nend", "  local\
    \ len = #arr\n  if not len then\n    return {}\n  end\n  local result = {}\n \
    \ for i = 1, 9 do\n    local count = len\n    for k = 1, i do\n      count = count\
    \ - arr[k]\n    end\n    if count > 0 then\n      result[i] = names[i]\n    end\n\
    \  end\n  if len > 10 then\n    local rest = by_length(arr[#arr])\n    for k,\
    \ v in pairs(rest) do\n      result[k] = v\n    end\n  end\n  return result\n\
    end", "  if #arr == 0 then return end\n  local map = {}\n  local i = 1 -- Skip\
    \ the first element because it's already in \"One\" form\n  local limit = 9 --\
    \ One less than the length of the input array\n  while i <= limit do\n    local\
    \ index = i - 1\n    map[i] = arr[index]\n    if i < 9 then\n      i = i + 1\n\
    \    else\n      i = 1\n    end\n  end\n  local result = {}\n  for i = #map, 1,\
    \ -1 do\n    result[#result + 1] = map[i - 1]\n  end\n  return result\nend", " \
    \   if next(arr) == nil then\n        return {}\n    end\n    local table = {}\n\
    \    local max_len = 0\n    for i = 1, #arr do\n        local len = string.len(arr[i])\n\
    \        if len > max_len then\n            max_len = len\n        end\n    end\n\
    \    for i = 1, max_len do\n        table.insert(table, arr[i])\n    end\n   \
    \ return table\nend", "    local result = {}\n    for i = 1, 9 do\n        table.insert(result,\
    \ arr[math.floor((arr[i] + 1) / 10):math.floor((arr[i] + 1) % 10)])\n    end\n\
    \    if not arr then\n        return result\n    end\n    for i = 1, 9 do\n  \
    \      arr[i] = \"Nine\"\n        arr[(arr[i] + 1) % 10] = \"Eight\"\n       \
    \ arr[(arr[i] + 1) / 10] = \"Seven\"\n        arr[(arr[i] + 1) % 10] = \"Six\"\
    \n        arr[(arr[i] + 1) / 10] = \"Five\"\n        arr[(arr[i] + 1) % 10] =\
    \ \"Four\"\n        arr[(arr[i] + 1) / 10] = \"Three\"\n        arr[(arr[i] +\
    \ 1) % 10] = \"Two\"\n        arr[(arr[i] + 1) / 10] = \"One\"\n    end\n    return\
    \ result\nend", "  local result = {}\n  for i = 1, 10 do\n    if arr[i] ~= nil\
    \ then\n      result[#result + 1] = ones[arr[i]]\n    end\n  end\n  table.sort(result)\n\
    \  for i, v in ipairs(result) do\n    result[i] = names[v]\n  end\n  return result\n\
    end", "  local sorted_arr = table.sort(arr)\n  local reversed_arr = reverse(sorted_arr)\n\
    \  local num_letters = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"\n  local results = {}\n  for i, v in ipairs(reversed_arr)\
    \ do\n    local idx = i * 10\n    if idx < 10 then\n      idx = num_letters[idx]\n\
    \    end\n    results[i] = idx\n  end\n  return results\nend", "  local result\
    \ = {}\n  local size = #arr\n  for i = 1, #arr do\n    local num_id = math.floor(i\
    \ / size)\n    local num_val = i - num_id * size\n    result[num_val] = arr[num_id]\n\
    \  end\n  return result\nend", "    local ret = {}\n    for i, v in pairs(arr)\
    \ do\n        if v < 1 or v > 9 then\n            table.insert(ret, v)\n     \
    \   else\n            local l = tostring(v)\n            for j = 1, #l do\n  \
    \              if l[j] < \"9\" then\n                    l[j] = \"0\" + l[j]\n\
    \                end\n            end\n            table.insert(ret, tonumber(l))\n\
    \        end\n    end\n    table.sort(ret)\n    for i = 1, #ret do\n        local\
    \ v = ret[i]\n        local v = tostring(v)\n        for j = 1, #v do\n      \
    \      v[j] = v[j + 1]\n        end\n        ret[i] = v\n    end\n    return ret\n\
    end", "  local reversed = {}\n  for i = #arr, 1, -1 do\n    reversed[#reversed\
    \ + 1] = arr[i]\n  end\n  reversed:sort()\n  reversed:reverse()\n  return reversed\n\
    end", "  if #arr == 0 then\n    return {}\n  end\n  local arr2 = {}\n  local count\
    \ = 1\n  for i = 1, 9 do\n    arr2[count] = arr[i - 1]\n    count = count + 1\n\
    \  end\n  for i = 9, 1, -1 do\n    arr2[count] = arr[i-1]\n    count = count +\
    \ 1\n  end\n  for i = 1, 9 do\n    arr[i - 1] = \"One\"\n  end\n  for i = 9, 1,\
    \ -1 do\n    arr[i - 1] = \"Nine\"\n  end\n  for i = 1, 9 do\n    arr[count] =\
    \ arr2[i - 1]\n    count = count + 1\n  end\n  for i = 9, 1, -1 do\n    arr[count]\
    \ = arr2[i - 1]\n    count = count + 1\n  end\n  for i = 1, 9 do\n    arr[i -\
    \ 1] = \"Two\"\n  end\n  for i = 9, 1, -1 do\n    arr[i - 1] = \"Three\"\n  end\n\
    \  for i = 1, 9 do\n    arr[count] = arr2[i - 1]\n    count = count + 1\n  end\n\
    \  for i = 9, 1, -1 do\n    arr[count] = arr2[i - 1]\n    count = count + 1\n\
    \  end\n  for i = 1, 9 do\n    arr[i - 1] = \"Four\"\n  end\n  for i = 9, 1, -1\
    \ do\n    arr[i - 1] = \"Five\"\n  end\n  for i = 1, 9 do\n    arr[count] = arr2[i\
    \ - 1]\n    count = count + 1\n  end\n  for i = 9, 1, -1 do\n    arr[count] =\
    \ arr2[i - 1]\n    count = count + 1\n  end\n  for i = 1, 9 do\n    arr[i - 1]\
    \ = \"Six\"\n  end\n  for i = 9, 1, -1 do\n    arr[i - 1] = \"Seven\"\n  end\n\
    \  for i = 1, 9 do\n    arr[count] = arr2[i - 1]\n    count = count + 1\n  end\n\
    \  for i = 9, 1, -1 do\n    arr[count] = arr2[i - 1]\n    count = count + 1\n\
    \  end\n  for i = 1, 9 do\n    arr[i - 1] = \"Eight\"\n  end\n  for i = 9, 1,\
    \ -1 do\n    arr[i - 1] = \"Nine\"\n  end\n  return arr\nend", "  if #arr == 0\
    \ then\n    return {}\n  end", "  local len = #arr\n  if len > 0 then\n    table.sort(arr)\n\
    \    local i = 0\n    while i < len do\n      local t = tostring(arr[i])\n   \
    \   arr[i] = arr[i]\n      if t == 'One' then arr[i] = 'Eight' end\n      if t\
    \ == 'Two' then arr[i] = 'Five' end\n      if t == 'Three' then arr[i] = 'Four'\
    \ end\n      if t == 'Four' then arr[i] = 'Three' end\n      if t == 'Five' then\
    \ arr[i] = 'Two' end\n      if t == 'Six' then arr[i] = 'One' end\n      if t\
    \ == 'Seven' then arr[i] = 'One' end\n      if t == 'Eight' then arr[i] = 'One'\
    \ end\n      if t == 'Nine' then arr[i] = 'One' end\n      i = i + 1\n    end\n\
    \  end\n  return arr\nend", "  if arr == nil then return end\n  local tbl = {}\n\
    \  for i = 1, #arr do\n    table.insert(tbl, arr[i])\n  end\n  table.sort(tbl)\n\
    \  for i = 1, #tbl do\n    if tbl[i] == 1 then\n      tbl[i] = \"One\"\n    elseif\
    \ tbl[i] == 2 then\n      tbl[i] = \"Two\"\n    elseif tbl[i] == 3 then\n    \
    \  tbl[i] = \"Three\"\n    elseif tbl[i] == 4 then\n      tbl[i] = \"Four\"\n\
    \    elseif tbl[i] == 5 then\n      tbl[i] = \"Five\"\n    elseif tbl[i] == 6\
    \ then\n      tbl[i] = \"Six\"\n    elseif tbl[i] == 7 then\n      tbl[i] = \"\
    Seven\"\n    elseif tbl[i] == 8 then\n      tbl[i] = \"Eight\"\n    elseif tbl[i]\
    \ == 9 and tbl[i-1] == 1 then\n      tbl[i] = \"Nine\"\n    end\n  end\n  return\
    \ tbl\nend", "  local t = {}\n  for _, num in pairs(arr) do\n    local _, _, name\
    \ = string.match(tostring(num), \"^%d*(%d+)\")\n    if name then\n      table.insert(t,\
    \ name)\n    end\n  end\n  if #t == 0 then\n    return {}\n  end\n  table.sort(t)\n\
    \  local reversed = {}\n  for i, v in pairs(t) do\n    reversed[#reversed + 1]\
    \ = v\n  end\n  return reversed\nend", "  local t = {}\n  for i = 1, #arr do\n\
    \    local m = math.abs(arr[i] - 1)\n    if m == 0 then\n      m[#m] = 'One'\n\
    \    elseif m == 1 then\n      m[#m] = 'Two'\n    elseif m == 2 then\n      m[#m]\
    \ = 'Three'\n    elseif m == 3 then\n      m[#m] = 'Four'\n    elseif m == 4 then\n\
    \      m[#m] = 'Five'\n    elseif m == 5 then\n      m[#m] = 'Six'\n    elseif\
    \ m == 6 then\n      m[#m] = 'Seven'\n    elseif m == 7 then\n      m[#m] = 'Eight'\n\
    \    elseif m == 8 then\n      m[#m] = 'Nine'\n    end\n    t[#t + 1] = unpack(m)\n\
    \  end\n  return t\nend", "  local sorted_table = table.sort(arr)\n  local results\
    \ = {}\n  for i = 1, #sorted_table do\n    local num_string = tostring(sorted_table[i])\n\
    \    if num_string > \"9\" then\n      table.insert(results, num_string)\n   \
    \ end\n  end\n  if #results then\n    results = table.concat(results, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n  end\n  return results\nend", "  local result = {}\n  -- if arr is nil just\
    \ return it\n  if arr ~= nil then\n    -- if arr is table of numbers\n    if type(arr)\
    \ == \"table\" then\n      -- if arr is table of numbers\n      if arr:isint()\
    \ then\n        -- if the array has integers\n        if arr:gettype() == \"table\"\
    \ then\n          -- if the array has tables\n          -- if arr is table of\
    \ integers\n          if arr:lenght() == 0 then\n            return {}\n     \
    \     else\n            -- if arr is table of integers\n            if arr:isint()\
    \ then\n              -- if arr is table of integers\n              -- if arr\
    \ is table of integers\n              if arr:isint() then\n                --\
    \ if arr is table of integers\n                -- if arr is table of integers\n\
    \                -- if arr is table of integers\n                -- if arr is\
    \ table of integers\n                -- if arr is table of integers\n        \
    \        -- if arr is table of integers\n                -- if arr is table of\
    \ integers\n                -- if arr is table of integers\n                --\
    \ if arr is table of integers\n                -- if arr is table of integers\n\
    \                -- if arr is table of integers\n                -- if arr is\
    \ table of integers\n                -- if arr is table of integers\n        \
    \        -- if arr is table of integers\n                -- if arr is table of\
    \ integers\n                -- if arr is table of integers\n                --\
    \ if arr is table of integers\n                -- if arr is table of integers\n\
    \                -- if arr is table of integers\n                -- if arr is\
    \ table of integers\n                -- if arr is table of integers\n        \
    \        -- if arr is table of integers\n                -- if arr is table of\
    \ integers\n                -- if arr is table of integers\n                --\
    \ if arr is table of integers\n                -- if arr is table of integers\n\
    \                -- if arr is table of integers\n                -- if arr is\
    \ table of integers\n                -- if arr is table of integers\n        \
    \        -- if arr is table of integers\n                -- if arr is table of\
    \ integers\n                -- if arr is table of integers\n                --\
    \ if arr is table of integers\n                -- if arr is table of integers\n\
    \                -- if arr is table of integers\n                -- if arr is\
    \ table of integer", "  if #arr == 0 then\n    return {}\n  end\n  local map =\
    \ {}\n  for i = 1, #arr do\n    map[#map + 1] = arr[i]\n  end\n  table.sort(map)\n\
    \  for i = 1, #map do\n    map[i] = map[#map + i]\n  end\n  local reverse = {}\n\
    \  for i = #map, 1, -1 do\n    table.insert(reverse, map[i - 1])\n  end\n  return\
    \ reverse\nend", "  if not arr then\n    return {}\n  end\n  local result = {}\n\
    \  local max = 0\n  local keys = terralib.newlist()\n  for i, v in ipairs(arr)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  for i = 1, max do\n\
    \    table.insert(keys, 1)\n  end\n  for i, v in ipairs(arr) do\n    if v < max\
    \ then\n      local j = v - max\n      table.insert(keys, j)\n    end\n  end\n\
    \  for i, v in ipairs(arr) do\n    result[v] = keys[i - 1]\n  end\n  return result\n\
    end", "  if #arr == 0 then return {} end\n  local sorted_table = table.sort(arr)\
    \ -- sort them in ascending order\n  local new_table = make_dict()\n  for i =\
    \ 1, 10 do\n    local k = sorted_table[i]\n    if k > 0 and k <= 9 then -- if\
    \ this is one or more, append its name to the table\n      new_table[k] = 'One'\n\
    \    elseif k > 9 and k <= 99 then -- if this is ten, append 'Ten'\n      new_table[k]\
    \ = 'Ten'\n    elseif k > 99 and k <= 999 then -- if this is hundred and above,\
    \ append 'Hundred'\n      new_table[k] = 'Hundred'\n    elseif k > 999 then --\
    \ if this is thousand, append 'Thousand'\n      new_table[k] = 'Thousand'\n  \
    \  end\n  end\n  return new_table\nend", "  local new_arr = {}\n  local digits\
    \ = {}\n  for i = 1, 10 do\n    digits[i] = i\n  end\n  table.sort(digits, function(a,\
    \ b) return a < b end)\n  local num_len\n  for i=1, #arr do\n    -- If the array\
    \ has any strange number ignore it:\n    if not arr[i] then\n      new_arr[i]\
    \ = nil\n      continue\n    end\n    -- Sort the digits from small to large\n\
    \    local num_len = len(arr[i])\n    local num_arr = {}\n    for j = 1, 10 do\n\
    \      if num_len > j then\n        num_arr[j] = arr[i][j]\n      end\n    end\n\
    \    table.sort(num_arr, function(a, b) return a < b end)\n    -- Get the new\
    \ number and its name\n    local n = num_arr[1]\n    local m = num_arr[1]\n  \
    \  local name\n    if num_len == 2 then\n      if n < 10 then\n        n = \"\
    One\"\n      else\n        n = n .. \"Ten\"\n      end\n      m = num_arr[2]\n\
    \      name = \"Two\"\n    elseif num_len == 3 then\n      if n < 10 then\n  \
    \      n = \"One\"\n      else\n        n = n .. \"Thirty\"\n      end\n     \
    \ m = num_arr[2]\n      name = \"Three\"\n    elseif num_len == 4 then\n     \
    \ if n < 10 then\n        n = \"One\"\n      else\n        n = n .. \"Forty\"\n\
    \      end\n      m = num_arr[2]\n      name = \"Four\"\n    elseif num_len ==\
    \ 5 then\n      if n < 10 then\n        n = \"One\"\n      else\n        n = n\
    \ .. \"Fifty\"\n      end\n      m = num_arr[2]\n      name = \"Five\"\n    elseif\
    \ num_len == 6 then\n      if n < 10 then\n        n = \"One\"\n      else\n \
    \       n = n .. \"Sixty\"\n      end\n      m = num_arr[2]\n      name = \"Six\"\
    \n    elseif num_len == 7 then\n      if n < 10 then\n        n = \"One\"\n  \
    \    else\n        n = n .. \"Seventy\"\n      end\n      m = num_arr[2]\n   \
    \   name = \"Seven\"\n    elseif num_len == 8 then\n      if n < 10 then\n   \
    \     n = \"One\"\n      else\n        n = n .. \"Eighty\"\n      end\n      m\
    \ = num_arr[2]\n      name = \"Eight\"\n    elseif num_len == 9 then\n      if\
    \ n < 10 then\n        n = \"One\"\n      else\n        n = n .. \"Ninety\"\n\
    \      end\n      m = num_arr[2]\n      name = \"Nine\"\n    end\n    -- Append\
    \ the new name and ", "    local arr = arr or {}\n    local result = {}\n    for\
    \ i,v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    if #result == 0 then\n        -- No number between\
    \ 1 and 9 was found\n        -- Return empty table\n        result\n    else\n\
    \        -- Reverse table and use first number to label all others\n        table.sort(result,\
    \ reverse)\n        for i,v in ipairs(result) do\n            table.insert(result,\
    \ v - 1)\n        end\n        for i,v in ipairs(result) do\n            local\
    \ j = table.find(result, v)\n            if j then\n                local t =\
    \ result[i]\n                result[i] = result[j]\n                result[j]\
    \ = t\n            end\n        end\n        -- Return sorted array\n        result\n\
    \    end\nend", "    if #arr == 0 then\n        return {}\n    end\n    local\
    \ t = {}\n    for i = 1, #arr do\n        t[arr[i]] = arr[i - 1]\n    end\n  \
    \  local num = 1\n    for i = #t, 1, -1 do\n        if t[i] ~= num then\n    \
    \        num = t[i]\n        end\n    end\n    local t = {}\n    for i = 1, #arr\
    \ do\n        t[arr[i]] = num\n    end\n    return t\nend", "  local result =\
    \ {}\n  local i = 1\n  while i <= #arr do\n    if arr[i] <= 9 then\n      table.insert(result,\
    \ tostring(arr[i]))\n    else\n      table.insert(result, \"?!\")\n    end\n \
    \   i = i + 1\n  end\n  return result\nend", "  local result = {}\n  for _, v\
    \ in pairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result,\n    function(x, y) return x<y end)\n\
    \  for _, v in pairs(result) do\n    table.insert(result, \"One\")\n    table.insert(result,\
    \ \"Two\")\n    table.insert(result, \"Three\")\n    table.insert(result, \"Four\"\
    )\n    table.insert(result, \"Five\")\n    table.insert(result, \"Six\")\n   \
    \ table.insert(result, \"Seven\")\n    table.insert(result, \"Eight\")\n    table.insert(result,\
    \ \"Nine\")\n    table.insert(result, v)\n  end\n  return result\nend", "  local\
    \ function order(x)\n    return -arr[x]\n  end\n  table.sort(arr, order)\n  local\
    \ function replace(x)\n    if x >= 10 then\n      return arr[x] + \" \" +\n  \
    \      by_length({arr[x + 1] - 1, arr[x + 1] + 1}) -- The recursion\n    end\n\
    \    return arr[x]\n  end\n  return arr:map(replace)\nend", "    local sorted\
    \ = {}\n    for _, v in ipairs(arr) do\n        table.insert(sorted, v)\n    end\n\
    \    table.sort(sorted)\n    for _, v in ipairs(arr) do\n        sorted[v] = one_to_nine[v]\n\
    \    end\n    return sorted\nend", "  if #arr == 0 then\n    return {}\n  end\n\
    \  local new_arr = {}\n  for _, value in ipairs(arr) do\n    new_arr[value] =\
    \ arr[(value - 1)] or \"?\" end\n  return new_arr\nend", "  return arr and {\n\
    \    [9] = \"Nine\",\n    [8] = \"Eight\",\n    [7] = \"Seven\",\n    [6] = \"\
    Six\",\n    [5] = \"Five\",\n    [4] = \"Four\",\n    [3] = \"Three\",\n    [2]\
    \ = \"Two\",\n    [1] = \"One\",\n  }\nend", "  local result = {}\n  for k, v\
    \ in pairs(arr) do\n    table.insert(result, v)\n    if v == 0 then\n      table.insert(result,\
    \ 0)\n      table.insert(result, 1)\n    end\n  end\n  table.sort(result)\n  for\
    \ i, v in ipairs(result) do\n    result[i] = names[i + 1]\n  end\n  return result\n\
    end", "  local result = {}\n  for k, v in pairs(arr) do\n    if not v then\n \
    \     result[#result + 1] = 'One'\n    elseif v < 0 then\n      result[#result\
    \ + 1] = 'Nine'\n    elseif v > 9 then\n      result[#result + 1] = string.format('%d',\
    \ v)\n    else\n      result[#result + 1] = string.format('%u', v)\n    end\n\
    \  end\n  return result\nend", "  local names = {}\n  for i = 1, 10 do\n    local\
    \ found = true\n    for _, v in pairs(arr) do\n      if i < v then\n        found\
    \ = false\n        break\n      end\n    end\n    if found then\n      names[i]\
    \ = \"One\"\n    end\n  end\n  for i = 1, 10 do\n    local found = true\n    for\
    \ _, v in pairs(arr) do\n      if i > v then\n        found = false\n        break\n\
    \      end\n    end\n    if found then\n      names[i] = \"Nine\"\n    end\n \
    \ end\n  local names_reverse = {}\n  for _, v in pairs(names) do\n    names_reverse[v]\
    \ = v\n  end\n  for i = 1, 10 do\n    local found = true\n    for _, v in pairs(arr)\
    \ do\n      if i < v then\n        found = false\n        break\n      end\n \
    \   end\n    if found then\n      arr[i] = names_reverse[arr[i]]\n    end\n  end\n\
    \  return arr\nend", "  if #arr == 0 then return {} end\n  local result = {}\n\
    \  local count = 1\n  for k, v in pairs(arr) do\n    if v > 9 then\n      count\
    \ = v\n    elseif count > 9 then\n      count = count + v\n    end\n    result[k]\
    \ = count -- The result table is reversed\n  end\n  return result\nend", "  local\
    \ keys = {}\n  -- if arr is empty, return the empty table\n  if not arr then\n\
    \    return {}\n  end\n  -- sort arr by length descending\n  table.sort(arr,\n\
    \    function(t1, t2) return t2 ~= nil and t2 >= t1 end)\n  -- reverse arr\n \
    \ table.sort(arr,\n    function(t1, t2) return t2 ~= nil and t2 > t1 end)\n  --\
    \ iterate through arr\n  for i = #arr, 1, -1 do\n    -- get the number value\n\
    \    local n = arr[i]\n    -- check if the number is between the min and max\n\
    \    -- if not, ignore it\n    if n < 1 or n > 9 then\n      table.removeElement(arr,\
    \ i)\n      i = i - 1\n      continue\n    end\n    -- get the corresponding name\
    \ value\n    local k = tostring(n)\n    -- add the number and the corresponding\
    \ name to the table keys\n    table.insert(keys, n)\n    table.insert(keys, k)\n\
    \  end\n  return keys\nend", "  if #arr == 0 then\n    return {}\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
