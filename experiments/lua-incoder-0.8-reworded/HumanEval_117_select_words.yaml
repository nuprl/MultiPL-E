name: HumanEval_117_select_words
language: lua
prompt: "-- Given a string s and a natural number n, you have been tasked to implement\
  \ \n-- a function that returns a table of all words from string s that contain exactly\
  \ \n-- n consonants, in order these words appear in the string s.\n-- If the string\
  \ s is empty then the function should return an empty table.\n-- Note: you may assume\
  \ the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words('Mary\
  \ had a little lamb', 4)\n-- {'little'}\n-- >>> select_words('Mary had a little\
  \ lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>> select_words('simple white space', 2)\n\
  -- {}\n-- >>> select_words('Hello world', 4)\n-- {'world'}\n-- >>> select_words('Uncle\
  \ sam', 3)\n-- {'Uncle'}\nlocal function select_words(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
  \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary\
  \ had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
  \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
  \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
  \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn {\n\t\twords = {}\n\t}\nend", "  \n    -- Initialize the count\
    \ of vowels in s and s's length\n    local vowels = {\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\"}\n    local vowels_count = 0\n    local vowels_length = 0\n   \
    \ \n    -- Initialize table of words found\n    local words = {}\n    \n    --\
    \ Iterate through the string and increment vowels count if consonant\n    for\
    \ letter in string.gsub(s, \"([aeiou])\") do \n        vowels_count = vowels_count\
    \ + 1\n        vowels_length = vowels_length + 1\n        if letter == 'a' or\
    \ letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n    \
    \        vowels_count = vowels_count - 1\n        end\n    end", "  if n == 1\
    \ then \n    return {}\n  else\n    local consonants = string.rep(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    , n-1)\n    local vowels = \"aeiou\"\n    local vowel_counter = {}\n    local\
    \ selected_words = {}\n    \n    -- If the string s is empty then return the empty\
    \ table\n    if s == \"\" then\n      return\n    end\n    \n    -- If the string\
    \ contains no vowels then return the empty table\n    if string.find(s, \"a\"\
    ) ~= nil then\n      table.insert(selected_words, s)\n      return\n    end\n\
    \    \n    -- Loop through all letters in the string\n    for i = 1, string.len(s)\
    \ do\n      -- If the letter isn't a consonant then ignore it\n      if string.find(consonants,\
    \ string.sub(s,i,i)) ~= nil then\n        continue\n      end\n      \n      --\
    \ If the letter is in the list of vowels then increment the counter\n      if\
    \ string.find(vowels, string.sub(s,i,i)) ~= nil then\n        if vowel_counter[string.sub(s,i,i)]\
    \ then\n          vowel_counter[string.sub(s,i,i)] += 1\n        else\n      \
    \    vowel_counter[string.sub(s,i,i)] = 1\n        end\n      end\n      \n  \
    \    -- If the counter reaches the target word length, then add it to the selected_words\
    \ table\n      if string.len(vowel_counter) == n then\n        table.insert(selected_words,\
    \ string.sub(s,i,i))\n      end\n    end\n    \n    return selected_words\n  end\n\
    end", "  -- TODO: define an empty table\n  local words = { }", "    local result\
    \ = {}\n    for _, word in string.gmatch(s, '%a') do\n        table.insert(result,\
    \ word)\n    end\n    return table.sort(result)\nend", "    -- your implementation\
    \ here\nend", "\tlocal t = {}\n\tlocal start = 0\n\tlocal index = 0\n\tlocal word_index\
    \ = 1\n\t\n\twhile start <= #s do\n\t\tlocal word = s[start]\n\t\tif word_index\
    \ <= n then\n\t\t\tif word == \"a\" or word == \"e\" or word == \"i\" or word\
    \ == \"o\" or word == \"u\" then\n\t\t\t\tindex = 1\n\t\t\telseif word == \"b\"\
    \ or word == \"f\" or word == \"k\" or word == \"m\" or word == \"p\" then\n\t\
    \t\t\tindex = 2\n\t\t\telseif word == \"c\" or word == \"j\" or word == \"q\"\
    \ or word == \"r\" or word == \"s\" or word == \"t\" then\n\t\t\t\tindex = 3\n\
    \t\t\telseif word == \"d\" or word == \"g\" or word == \"s\" or word == \"v\"\
    \ or word == \"x\" then\n\t\t\t\tindex = 4\n\t\t\tend\n\t\t\tif index == word_index\
    \ then\n\t\t\t\ttable.insert(t, word)\n\t\t\t\tword_index = word_index + 1\n\t\
    \t\telse\n\t\t\t\tindex = index - 1\n\t\t\tend\n\t\tend\n\t\tstart = start + 1\n\
    \tend\n\treturn t\nend", "  if s == nil then return end\n  local t = {}\n  local\
    \ w = 0\n  for w in string.gmatch(s, '%a') do end\n  w = w + 1 -- start counting\
    \ from 1\n  for i = 1, n do\n    for w in string.gmatch(s, '%a') do\n      if\
    \ w == s[i] then t[#t + 1] = s[i] end\n    end\n  end\n  return t\nend", "   local\
    \ t = {}\n   local count = 0\n   for w in string.gmatch(s, '[^ ]+') do\n     \
    \ if string.len(w) == n then\n         count = count + 1\n         t[#t + 1] =\
    \ w\n      end\n   end\n   return t\nend", "   assert(type(s) == \"string\")\n\
    \   assert(n > 0)", "    -- Your code here\n\tlocal words = {}\n\tfor _, v in\
    \ ipairs(string.gmatch(s, '%S+')) do\n\t\tif v:find(v) ~= nil then\n\t\t\tif v:find(v)==n\
    \ then\n\t\t\t\ttable.insert(words, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn words\n\
    end", "  -- Base case\n  if n == 0 then\n    return {{}}\n  else\n    -- Recursive\
    \ case\n    local found = {}\n    for w in select_words(s, n - 1) do\n      if\
    \ contains(s, w) then\n        table.insert(found, {w})\n      end\n    end\n\
    \    return found\n  end\nend", "    local ret = {}\n    for w in string.gmatch(s,\
    \ '%a+') do\n        if string.find(s, w, 'c')~=nil then\n            if string.find(s,\
    \ w, 'g')~=nil then\n                table.insert(ret,w)\n            else\n \
    \               table.insert(ret,string.sub(w, 1, string.find(s, w, 'c')))\n \
    \           end\n        end\n    end\n    return ret\nend", "    if s == \"\"\
    \ then\n        return {};\n    else\n        local t = {};\n        for w in\
    \ string.gmatch(s, \"[^\" .. consonants .. \"]\") do\n            table.insert(t,\
    \ w);\n        end;\n        return t;\n    end;\nend", "  local aTable = {}\n\
    \  if s == '' then return aTable end\n  local firstChar = string.sub(s,1,1)\n\
    \  local count = 1 -- counter for consonants in s\n  for i = 1,#s do \n    if\
    \ string.sub(s,i,i) == firstChar then\n      count = count + 1\n    else\n   \
    \   if count == n then\n        aTable[#aTable + 1] = string.sub(s,i,i)\n    \
    \  end\n      count = 1 -- counter for consonants\n    end\n  end\n  return aTable\n\
    end", "  local t = {}\n  local s = string.lower(s)\n  \n  while n > 0\n  do\n\
    \    if string.find(s, '.') then\n      table.insert(t, s)\n    end\n    \n  \
    \  s, n = string.sub(s,1,1), n - 1\n  end\n  \n  if s == \"\" then\n    return\
    \ {}\n  end\n  \n  return t\nend", "  -- Your code here\n  \nend", "  local function\
    \ is_consonant(c)\n    return (c == \"a\" or c == \"e\" or c == \"i\" or c ==\
    \ \"o\" or c == \"u\") or c == \" \"\n  end", "    local tbl = {}\n    local words\
    \ = string.gmatch(s, '%w+')\n    for _, word in pairs(words) do\n        if string.match(word,\
    \ \"%^[%c%p]\") then\n            table.insert(tbl, word)\n        end\n    end\n\
    \    if tbl == {} then\n        return {}\n    end\n    local tblSize = #tbl\n\
    \    if tblSize > n then\n        return {}\n    end\n    local tbl2 = {}\n  \
    \  for i = 1, n do\n        if tblSize == n then\n            table.insert(tbl2,\
    \ tbl[i])\n        end\n    end\n    return tbl2\nend", "  local t = {}\n  for\
    \ i = 1, #s do\n    if s.sub(i, i, i) ~= ' ' and string.sub(s,i,i) ~= '' and string.sub(s,i,i)\
    \ ~= nil then\n      local s = string.sub(s,i,i)\n      table.insert(t, s)\n \
    \   end\n  end\n  return t\nend", "    -- your implementation goes here\nend",
  "  -- Base Case\n  if s == '' then \n    return {}\n  end", "  if s == nil then\
    \ return end\n  local t = {}\n  local p = s.sub(1,n)\n  \n  for w in string.gmatch(s,\
    \ '%S+') do\n    if string.find(p, w) ~= nil then t[#t+1] = w end\n  end\n  return\
    \ t\nend", "    -- Initialize the return table with empty strings.\n    local\
    \ ret = setmetatable({}, {__index = table})\n    -- Make sure that s is a string\
    \ and that n is an integer between 1 and \n    -- string.len(s).\n    if not (type(s)\
    \ == 'string' and n == 'number' and n <= string.len(s)) then\n        error('select_words():\
    \ invalid arguments.')\n    end", "    \n    -- Your code here\n    if n == 0\
    \ then\n        return {}\n    end\n    local ret = {}\n    for i,v in pairs(string.gmatch(s,\
    \ '[^aeiou]:([^aeiou])([^aeiou])')) do\n        if v~=nil and tonumber(v) == n\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end", "  local table = {}\n  if s == nil then\n    return table\n  end\n  local\
    \ first_char = s[1]\n  if first_char == \"[\" then\n    table.insert(table, \"\
    [\")\n    select_words(s[2:end], n)\n    table.insert(table, \"]\")\n  elseif\
    \ first_char == \"{\" then\n    table.insert(table, \"{\")\n    select_words(s[2:end],\
    \ n)\n    table.insert(table, \"}\")\n  elseif s[1] == \"-\" then\n    table.insert(table,\
    \ \"-\")\n    select_words(s[2:end], n)\n  elseif s[1] == \"/\" then\n    table.insert(table,\
    \ \"/\")\n    select_words(s[2:end], n)\n  elseif s[1] == \"|\" then\n    table.insert(table,\
    \ \"|\")\n    select_words(s[2:end], n)\n  elseif first_char == \" \" then\n \
    \   table.insert(table, \" \")\n    select_words(s[2:end], n)\n  else\n    local\
    \ second_char = s[2]\n    local rest = select_words(s[3:end], n)\n    for i=1,\
    \ #rest do\n      table.insert(table, rest[i])\n    end\n    if second_char ==\
    \ first_char then\n      table.insert(table, second_char)\n    end\n  end\n  return\
    \ table\nend", "   local tab = {}\n   local n = 0 \n   -- remove special characters\
    \ from the string s\n   s = s:gsub('[^ a-zA-Z]+', '')\n   -- if the string is\
    \ empty then return an empty table \n   if s == '' then return tab end\n   --\
    \ traverse through the string and get the index of each letter\n   for i = 1,\
    \ #s do\n      local temp = string.sub(s,i,i)\n      if temp:sub(1,1) == 'a' and\
    \ temp:sub(1,2) == 'u' and temp:sub(1,3) == 'l' and temp:sub(1,4) == 'l' then\n\
    \         n = n + 1\n      elseif temp:sub(1,1) == 'w' and temp:sub(1,2) == 'c'\
    \ and temp:sub(1,3) == 'h' and temp:sub(1,4) == 'd' then\n         n = n + 1\n\
    \      elseif temp:sub(1,1) == 'n' and temp:sub(1,2) == 'o' and temp:sub(1,3)\
    \ == 'f' and temp:sub(1,4) == 'c' then\n         n = n + 1\n      end\n   end\n\
    \   -- if the number of consonants in string is not exactly n then return an empty\
    \ table \n   if n == n then return tab end\n   -- traverse through the string\
    \ and get the index of each consonant\n   for i = 1, #s do\n      local temp =\
    \ string.sub(s,i,i)\n      if temp:sub(1,1) == 'a' and temp:sub(1,2) == 'u' and\
    \ temp:sub(1,3) == 'l' and temp:sub(1,4) == 'l' then\n         n = n + 1\n   \
    \   elseif temp:sub(1,1) == 'w' and temp:sub(1,2) == 'c' and temp:sub(1,3) ==\
    \ 'h' and temp:sub(1,4) == 'd' then\n         n = n + 1\n      elseif temp:sub(1,1)\
    \ == 'n' and temp:sub(1,2) == 'o' and temp:sub(1,3) == 'f' and temp:sub(1,4) ==\
    \ 'c' then\n         n = n + 1\n      end\n   end\n   -- traverse through the\
    \ string and get the index of each consonant and word\n   for i = 1, #s do\n \
    \     local temp = string.sub(s,i,i)\n      if temp:sub(1,1) == 'a' and temp:sub(1,2)\
    \ == 'u' and temp:sub(1,3) == 'l' and temp:sub(1,4) == 'l' then\n         n =\
    \ n + 1\n      elseif temp:sub(1,1) == 'w' and temp:sub(1,2) == 'c' and temp:sub(1,3)\
    \ == 'h' and temp:sub(1,4) == 'd' then\n         n = n + 1\n      ", "\tlocal\
    \ result = {}\n\tfor s in string.gmatch(s, '[%a]+') do\n\t\tlocal c = string.sub(s,1,1)\n\
    \t\tif c == ' ' then continue end\n\t\tif string.find(s, c:lower(), 1) then result[#result+1]\
    \ = s end\n\tend\n\tif string.len(s) == 0 then\n\t\treturn result\n\tend\n\treturn\
    \ result\nend", "  -- write your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      table.insert(t, s)\n    end\n  end\n  return t\nend", " \
    \ assert(type(s) == 'string')\n  assert(n >= 1 and n <= 7)\n  if n == 1 or s ==\
    \ ' ' then \n    return {}\n  end\n  local words = { }\n  local i = 0\n  for i\
    \ = 1,#s,1 do \n    local char = s[i]\n    if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n      -- Only one vowel, so skip\n\
    \      i = i + 1\n      if i > #s then break end\n      local vowel = s[i]\n \
    \     i = i + 1\n      if i > #s then break end\n      local next_vowel = s[i]\n\
    \      if next_vowel == 'a' or next_vowel == 'e' or next_vowel == 'i' or next_vowel\
    \ == 'o' or next_vowel == 'u' then\n        -- Two vowels, skip\n        i = i\
    \ + 2\n      elseif next_vowel == 'y' then\n        -- Two vowels, skip and vowel\
    \ is 'y'. \n        i = i + 2\n        if i > #s then break end\n        local\
    \ next_next_vowel = s[i]\n        if next_next_vowel == 'a' or next_next_vowel\
    \ == 'e' or next_next_vowel == 'i' or next_next_vowel == 'o' or next_next_vowel\
    \ == 'u' then\n          -- Three vowels, skip, vowel is 'y', and next vowel is\
    \ 'a' or 'e' or 'i' or 'o' or 'u'\n          i = i + 3\n        elseif next_next_vowel\
    \ == 'y' then\n          -- Three vowels, skip, vowel is 'y', and next vowel is\
    \ 'a'\n          i = i + 3\n          local next_next_next_vowel = s[i]\n    \
    \      if next_next_next_vowel == 'a' then\n            -- Three vowels, skip,\
    \ vowel is 'y', and next vowel is 'e'\n            i = i + 3\n            local\
    \ next_next_next_next_vowel = s[i]\n            if next_next_next_next_vowel ==\
    \ 'a' then\n              -- Three vowels, skip, vowel is 'y', and next vowel\
    \ is 'i'\n              i = i + 3\n              local next_next_next_next_next_vowel\
    \ = s[i]\n              if next_next_next_next_next_vowel == 'a' then\n      \
    \          -- Three vowels, skip, vowel is 'y', and next vowel is 'o'\n      \
    \          i = i + 3\n                local next_next_next_next_next_next_vowel\
    \ = s[i]\n                if next_next_next_next_next_next_vowel == 'a' then\n\
    \                  -- Three vowels, skip, vowel is 'y', and next vowel is 'u'\n\
    \                  i = i + 3\n                  local next_next_next_next_next_next_vowel\
    \ = s[i]\n                  if next_next_next_next_next_next_vowel == '", "  \
    \  local t = {}\n    local i = 0\n    while i <= #s and i <= n do\n        table.insert(t,\
    \ string.sub(s,i,i))\n        i = i + 1\n    end\n    return t\nend", "    local\
    \ t = {}\n    for w in string.gmatch(s, '[%w(%s+)]') do\n        if string.find(s,\
    \ w, 1, n) == 1 then\n            table.insert(t, w)\n        end\n    end\n \
    \   return t\nend", "    local ans = {}\n    for w in string.gmatch(s, \"([^%s]+)\"\
    ) do\n        local count = 0\n        for v in string.gmatch(w, \"[%w]*\") do\n\
    \            if v:sub(1,1) ~= '%' then\n                count = count + 1\n  \
    \          end\n        end\n        if n == count then\n            table.insert(ans,\
    \ w)\n        end\n    end\n    return ans\nend\n</cell>\n<code language=julia-1.6>\n\
    select_words(\"Mary had a little lamb\", 4)\n</cell>\n<text>\nProblem 14\nWrite\
    \ a function to return a table of n words from a string that contains only letters,\
    \ spaces, and punctuation.\nIf the input string is empty or contains multiple\
    \ consecutive punctuation marks then the function should return the empty table.\n\
    A word is defined as a sequence of letters that does not contain a punctuation\
    \ mark.\nFor example,\n- 'hello!' => ['hello']\n- 'hello.' => ['hello']\n- 'hello,'\
    \ => ['hello']\n- 'hello!how,you?' => ['hello', 'how', 'you']\n- 'hello! how!\
    \ you!' => ['hello', 'how', 'you']\n- 'hello how.' => ['hello', 'how']\n- 'hello,you!'\
    \ => ['hello', 'you']\n- 'hello! ,you!' => ['hello', 'you']\n- 'Hello!' => ['Hello']\n\
    - 'Hello!how,you!' => ['Hello', 'how', 'you']\n- 'Hello! how! you!' => ['Hello',\
    \ 'how', 'you']\n- 'Hello how.' => ['Hello', 'how']\n- 'Hello,you!' => ['Hello',\
    \ 'you']", "  -- Your code here\n  return \nend", "  if s == '' then return end\n\
    \  local ret = {}\n  local ts = s:gsub(\"[^\" .. alphabet..\"]+\", function(x)\
    \ return x:lower() end)\n  for _, v in ipairs(ts) do\n    table.insert(ret, v)\n\
    \  end\n  if #ret < n then return end\n  return ret\nend", "   -- Write your function\
    \ here\nend", "    local output = {}\n    for word in string.gmatch(s, '(%a+)')\
    \ do\n        if string.find(word, '.') then\n            table.insert(output,\
    \ word)\n        else\n            if #word == n then\n                table.insert(output,\
    \ word)\n            end\n        end\n    end\n    return output\nend", "   if\
    \ s == \"\" then return end\n   if n == 0 then\n       return {}\n   else\n  \
    \     local result = {}\n       local i = 0\n       while i <= #s do\n       \
    \    local letter = string.sub(s,i,i)\n           if letter ~= \" \" and letter\
    \ ~= \"\\n\" then\n               table.insert(result,letter)\n           end\n\
    \           i = i + 1\n       end\n       return result\n   end\nend", "    local\
    \ output = {}\n    if n ~= 0 then \n        for word in string.gmatch(s, '[^ ]+')\
    \ do \n            if string.sub(s, 1, string.len(word) - n) == word then \n \
    \               output[#output + 1] = word \n            end \n        end \n\
    \    end \n    if #output == 0 then \n        return {} \n    end \n    return\
    \ output \nend ", "  local t={}\n  local i=1\n  for w in string.gmatch(s,\"[^%s]+\"\
    ) do\n    if string.len(w)==n then\n      table.insert(t,w)\n      if i>=string.len(s)\
    \ then\n        break\n      end\n    end\n    i=i+1\n  end\n  return t\nend",
  "  local words = {}\n  \n  -- Base Case\n  if s == '' then\n    return words\n \
    \ end", "    local table = {}\n    \n    if s == nil then\n        return {}\n\
    \    end", "  local result = {}\n  if s == '' then return result end\n  for letter\
    \ in s:gmatch(\"[%z\\1-\\3]+\") do \n    if string.sub(letter, 1, n) ~= letter\
    \ then \n      if letter == '' then \n        result[#result+1] = letter \n  \
    \    else \n        result[#result+1] = letter + string.sub(letter, n) \n    \
    \  end\n    end\n  end\n  return result\nend", "    if s == '' then\n        return\
    \ {}\n    end", "  local table = {}\n  if s == nil then return table end\n  if\
    \ s == \"\" then return table end\n  if n == 1 then table.insert(s, s) return\
    \ table end\n  for word in string.gmatch(s, '[%S]+') do\n    if string.sub(s,\
    \ 1, string.len(word)) == word then\n      table.insert(s, word)\n      if n ==\
    \ 2 then return table end\n    end\n  end\n  return table\nend", "    local table\
    \ = {}\n    for w in s:gmatch(\"%w+\") do\n        if words[w] == n then\n   \
    \         table.insert(table, w)\n        end\n    end\n    return table\nend",
  "  if s == '' then\n    return {}\n  end", "  -- Base case\n  if s == '' then return\
    \ { } end\n  -- Recursion\n  local table = {}\n  -- If n <= 0, return empty table\n\
    \  n = n or 1\n  -- Loop through each character in string\n  for i = 1, #s do\n\
    \    -- Check if character is consonant\n    if isConsonant(s[i], n) then\n  \
    \    table.insert(table, (s:sub(i, i)))\n    end\n  end\n  return table\nend\n\
    </cell>\n<text>\nGreat, now you've seen what a recursive function is. But can\
    \ it be implemented iteratively? Yes it can!", "   if s == '' then\n      return\
    \ {}\n   end", "  -- Base case: empty string => empty table\n  if s == '' then\
    \ return {} end\n  -- Base case: string contains only spaces => no results\n \
    \ if #s == '' then return end\n  -- Base case: string contains no letters => no\
    \ results\n  if #s <= 1 then return end\n  -- Build table: for each word in the\
    \ string (without repeating letters), \n  -- insert it into the table and remove\
    \ it from the string.\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    local w = w -- capture variable for readability\n    local i = 1\n    while\
    \ i <= #w do\n      -- Check if consonant is in string.\n      if string.sub(s,\
    \ i, i + 1) ~= string.sub(w, i, i+1) then\n        -- If not, check if letter\
    \ has been used already as current consonant.\n        if t[string.sub(w, i -\
    \ 1, i)] ~= nil then\n          -- If so, remove letter and decrement i.\n   \
    \       local j = i - 1\n          while j ~= 0 do\n            t[string.sub(w,\
    \ j, j)] = nil\n            j = j - 1\n          end\n        else\n         \
    \ -- If not, increase i.\n          i = i + 1\n        end\n      else\n     \
    \   i = i + 1\n      end\n    end\n    -- Check if word has been inserted into\
    \ the table only once.\n    if t[w] ~= nil then\n      t[w] = nil\n    end\n \
    \ end\n  -- Return table containing only words from s with exactly n consonants\n\
    \  return setmetatable(t, {__index = function(t, key)\n    return t[key] == nil\
    \ and key or nil\n  end})\nend", "    if s == '' then return {} end\n    local\
    \ t = {}\n    local start = 0\n    while start < #s do\n        local index =\
    \ find(s, \" \", start, true)\n        if index == nil then\n            index\
    \ = #s\n        end\n        -- print(\"start index is \" .. start .. \" end index\
    \ is \" .. index)\n        if n == 0 or #(select(s, start:index)) >= n then\n\
    \            table.insert(t, select(s, start:index))\n        end\n        start\
    \ = index + 1\n    end\n    return t\nend", "  -- Check empty s\n  if s == ''\
    \ then\n    return {}\n  end", "\tlocal t = {}\n\tlocal vowels = {'a','e','i','o','u','y'}\n\
    \tfor i = 1, #s do\n\t\tif s[i] == \" \" and s[i] ~= 'a' and s[i] ~= 'e' and s[i]\
    \ ~= 'i' and s[i] ~= 'o' and s[i] ~= 'u' and s[i] ~= 'y' then\n\t\t\ttable.insert(t,\
    \ s)\n\t\t\tbreak\n\t\telse\n\t\t\tlocal c = s[i]\n\t\t\tif n ~= nil and #vowels\
    \ ~= 0 and #vowels ~= n and c ~= s[n] and c ~= s[#s - n - 1] then\n\t\t\t\ttable.insert(t,\
    \ s)\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn t\nend",
  "\tif s == \"\" then\n\t\treturn {}\n\tend", "    local tbl = {}\n    if s ~= ''\
    \ then\n        local n = tonumber(n) -- make sure it's a number\n        for\
    \ i = 1, #s do -- iterate over every character in the string\n            local\
    \ word = s:sub(i, i + 1) -- get current character\n            if #word == n and\
    \ word:sub(1, 1) ~= 'c' then -- if the character at the current index is equal\
    \ to the required number of consonants\n                table.insert(tbl, word)\
    \ -- add it to the table\n            end\n        end\n    end\n    return tbl\n\
    end", "\tassert(n > 0, 'n must be positive')\n\tassert(string.len(s) > 0, 's must\
    \ be non-empty')\n\t\n\tlocal result = {}\n\t\n\t-- The recursive step will take\
    \ care of any non-empty string\n\t-- containing less than n consonants.\n\t--\
    \ Since we have an empty string to start with, we\n\t-- can safely return immediately\
    \ without doing anything.\n\tif string.len(s) == 0 then\n\t\treturn result\n\t\
    end\n\t\n\t-- Iterate through all substrings of s (including the empty\n\t-- string).\n\
    \tfor i = 1, string.len(s) do\n\t\t-- We will consider a character to be a consonant\n\
    \t\t-- if it is a vowel, else a non-consonant.\n\t\tif string.sub(s,i,i) == 'a'\
    \ or string.sub(s,i,i) == 'e' or string.sub(s,i,i) == 'i' or string.sub(s,i,i)\
    \ == 'o' or string.sub(s,i,i) == 'u' then\n\t\t\t-- Count the number of consonants\
    \ in the substring.\n\t\t\tlocal num_consonants = 0\n\t\t\tfor j = 1, string.len(s)\
    \ do\n\t\t\t\tif string.sub(s,j,j) == string.sub(s,i,i) then\n\t\t\t\t\tnum_consonants\
    \ = num_consonants + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- If this substring contains\
    \ n consonants, add it to \n\t\t\t-- the final table.\n\t\t\tif num_consonants\
    \ == n then\n\t\t\t\ttable.insert(result, string.sub(s,i,i))\n\t\t\tend\n\t\t\
    else\n\t\t\t-- Otherwise, skip this substring.\n\t\t\t-- If this substring is\
    \ empty, that means that this\n\t\t\t-- character was not a consonant.\n\t\t\t\
    --\n\t\t\t-- If the string consists entirely of non-consonants,\n\t\t\t-- that\
    \ means that there are no consonants in s.\n\t\t\tif string.len(s) == 1 or string.sub(s,i,i)\
    \ == \"\" then\n\t\t\t\t-- This substring was entirely of non-consonants.\n\t\t\
    \t\t-- We've reached the end of the string.\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\t-- Return the final table.\n\treturn result\nend", "    local result\
    \ = {}\n    \n    if s ~= nil then\n        if n ~= nil then\n            for\
    \ word in string.gmatch(s, '%a'):gmatch('([%a]+)') do\n                table.insert(result,\
    \ word)\n                if string.len(word) >= n then\n                    break\n\
    \                end\n            end\n        else\n            for word in string.gmatch(s,\
    \ '%a'):gmatch('([%a]+)') do\n                table.insert(result, word)\n   \
    \         end\n        end\n    end\n    \n    return result\nend", "    return\
    \ {}\nend", "  if s == nil then\n    return {}\n  end\n  local tt = {}\n  for\
    \ w in s:gmatch(\"%a+\") do\n    local vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\", \"e\", \"e\", \"u\", \"o\", \"a\"}\n    local i = tonumber(w)\n  \
    \  if i == nil then\n      table.insert(tt, w)\n    elseif i <= n then\n     \
    \ local c = i\n      while c > 1 do\n        if vowels[c - 1] == vowels[c] then\n\
    \          break\n        end\n        c = c - 1\n      end\n      if c == 0 then\n\
    \        table.insert(tt, w)\n      end\n    end\n  end\n  return tt\nend", " \
    \  local t = {}\n   for w in string.gmatch(s, \"%w\") do \n      t = t...w\n \
    \  end\n   for i = 1, n do\n      if #t > n then\n         break\n      elseif\
    \ #t == n then\n         t = t[#t]:sub(1, #t-1)\n      end\n   end\n   return\
    \ t\nend", "  if s == '' then return end\n  local d = {}\n  local m = {}\n  for\
    \ c in string.gmatch(s, '%a') do\n    local lc = string.lower(c)\n    local i\
    \ = 1\n    for i = 1, n do\n      if lc == string.sub(s, i, i) then\n        d[#d+1]\
    \ = lc\n        break\n      end\n    end\n    if not m[n] then\n      m[n] =\
    \ lc\n    end\n  end\n  \n  return d\nend", "  local words = {}\n  while true\
    \ do\n    local current_words = {}\n    for w in s:gmatch(\"([a-z ])\") do\n \
    \     if w ~= \"\" then\n        for i = 1, n do\n          if string.sub(s, w\
    \ - i, w + (n - i - 1)) == w then\n            table.insert(current_words, w)\n\
    \          end\n        end\n      end\n    end\n    if #current_words == n then\n\
    \      table.insert(words, table.concat(current_words))\n    else\n      break\n\
    \    end\n  end\n  return words\nend", "    -- Your code here\n    if s == nil\
    \ then\n        return {}\n    end\n    local table = { }\n    local s = string.lower(s)\n\
    \    local word = {}\n    for word in string.gmatch(s, '%w+') do\n        table.insert(table,\
    \ word)\n    end\n    return table\nend", "\tif s == '' then\n\t\treturn {}\n\t\
    end\n\tif n == 0 then\n\t\treturn { s }\n\tend\n\tlocal w = select_words(s, n\
    \ - 1)\n\tlocal t = {}\n\tfor i, v in ipairs(w) do\n\t\tfor _, vv in ipairs(select_words(v,\
    \ n - 1)) do\n\t\t\tt[#t + 1] = vv\n\t\tend\n\tend\n\treturn t\nend\n</cell>\n\
    <text>\nLet's test a few examples:", "  local t = {}\n  local i = 0\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) ~= ' ' then\n      t[i] = string.sub(s,i,i)\n\
    \    end\n    if t[i] == '.' or t[i] == '!' or t[i] == '?' then\n      t[i] =\
    \ nil\n    end\n  end\n  if #t < n then\n    return nil\n  else\n    return t\n\
    \  end\nend", "    -- Your code here!\n    return {}\nend\n</cell>\n<text>\nQuestion\
    \ 3", "  local w = {}\n  local i = 1\n  for i=1, #s do\n    if #w == n then\n\
    \      break\n    end\n    if s[i] ~= 'c' then\n      if string.sub(s,i,i) ~=\
    \ '' then\n        w[#w+1] = string.sub(s,i,i)\n      end\n    end\n    i = i\
    \ + 1\n  end\n  return w\nend", "  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s, i, i + n) == string.sub(s, \"%w\" .. n, n % #s .. n) then\n  \
    \    table.insert(words, s)\n    end\n  end\n  return words\nend", "\t-- write\
    \ your code here\nend", "\tlocal words = terralib.newlist()\n\tfor w in string.gmatch(s,\
    \ '%w+') do\n\t\tlocal count = #string.gsub(w, \" \", \"\")\n\t\t\n\t\tif count\
    \ < n then\n\t\t\t-- Ignore words with fewer consonants than specified in the\
    \ \n\t\t\t-- number of consonant rule.\n\t\t\tcontinue\n\t\telse\n\t\t\tif #w\
    \ == n then\n\t\t\t\ttable.insert(words, w)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ words\nend", "    if s == '' then\n        return {}\n    elseif n <= 1 then\n\
    \        return {}\n    else\n        local l = {}\n        local last = ''\n\
    \        local i = 1\n        local char = string.sub(s, i, i)\n        while\
    \ i < #s do\n            if string.sub(s, i, i) ~= char then\n               \
    \ last = string.sub(s,i,i)\n                l[last] = last\n            end\n\
    \            i = i + 1\n            char = string.sub(s, i, i)\n        end\n\
    \        if n <= #l then\n            return l\n        else\n            return\
    \ select_words(s, n-1)\n        end\n    end\nend", "\t-- Initialize your data\
    \ structure here.\n\tlocal results = {}", "  assert(s and n)\n  local ret = {}\n\
    \  if s then\n    local s_lower = s:lower()\n    local i = 0\n    while i < n\
    \ do\n      if s[i] ~= ' ' and s[i] ~= '-' and s[i] ~= '!' and s[i] ~= '~' and\
    \ s[i] ~= '$' and s[i] ~= '.' and s[i] ~= '(', s[i] ~= ')' and s[i] ~= '-' and\
    \ s[i] ~= '$' and s[i] ~= '~' and s[i] ~= '!' and s[i] ~= '.' and s[i] ~= '('\
    \ and s[i] ~= ')' then\n        if s_lower:sub(i, i + 1) ~= 'aeiou' then\n   \
    \       i = i + 1\n        else\n          i = i + 1\n          ret[#ret + 1]\
    \ = s[i]:sub(1, i)\n        end\n      end\n      if i == n then\n        break\n\
    \      end\n    end\n  end\n  return ret\nend", "  -- Write your code here\n \
    \ local ret = {}\n  for w in s:gmatch('[^ ]') do\n    local wln = w:lower():len()\n\
    \    if wln == n then\n      table.insert(ret, w)\n    end\n  end\n  return ret\n\
    end", "  return s:gsub('%w', function()\n    return table.concat(\n      (\n \
    \      for _, c in pairs({'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'y'}) do\n         if s:sub(1, 1) == c then\n\
    \           return c\n         end\n       end\n       return {''}\n      ), ''\n\
    \    )\n  end)\nend", "\tlocal words = {}", "  if s == \"\" then\n    return {}\n\
    \  elseif n >= #s or n > #s then\n    return {}\n  else\n    local result = {}\n\
    \    local num_vowels = #string.gsub(s, \"[aeiou]\", \"\") -- counting number\
    \ of vowels\n    local index = 1\n    while index <= #s do\n      if string.find(string.sub(s,\
    \ index, index + n), \"[aeiou]\", 1, num_vowels) == num_vowels then\n        result[#result\
    \ + 1] = string.sub(s, index, index + n)\n        index = index + n\n      end\n\
    \      index = index + 1\n    end\n    return result\n  end\nend\n</cell>\n<cell>",
  "    local table = {} -- return table\n    for i = 1, #s do\n        local letter\
    \ = s[i] -- local variable for looping over characters in string\n        if letter:sub(1,\
    \ n) == string.lower(letter) then\n            table.insert(table, letter) --\
    \ insert element into table only if the character is equal to the letter and contains\
    \ n\n        end\n    end\n    return table -- return table of words\nend", " \
    \   if s == '' then\n        return {}\n    end\n    local function select_words(s,\
    \ n, result, count)\n        if count >= n then\n            result.add(s)\n \
    \       else\n            for _, c in pairs(s) do\n                select_words(s,\
    \ n, result, count+1)\n            end\n        end\n    end\n    local result\
    \ = {}\n    select_words(s, n, result, 0)\n    return result\nend\n</cell>\n<cell>",
  "\t-- TODO: Write your code here.\nend", "  if s == nil then return {} end\n  if\
    \ n == 0 then \n    return {}\n  elseif n == 1 then\n    return {s}\n  else\n\
    \    local t = {}\n    local k = -1\n    local c = string.len(s)\n    while k\
    \ <= c-n do\n      table.insert(t, string.sub(s, k, k+n))\n      k = k + n\n \
    \   end\n    return t\n  end\nend", "\tassert(type(s) == 'string', 'Invalid argument\
    \ type - select_words()')\n\tassert(n >= 1, 'Invalid argument - select_words()')\n\
    \t\n\tlocal table = {}\n\tlocal i = 1\n\t\n\twhile i <= n do\n\t\tfor i=1, #s\
    \ do \n\t\t\tlocal char = string.sub(s,i,i)\n\t\t\t\n\t\t\tif string.sub(s,i,i)\
    \ == ' ' then\n\t\t\t\ttable.insert(table, char)\n\t\t\telse\n\t\t\t\tif string.sub(s,\
    \ i+1, i+1) == char then\n\t\t\t\t\ttable.insert(table, char)\n\t\t\t\telse\n\t\
    \t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\ti = i+1\n\tend\n\t\n\treturn\
    \ table\nend", "    if s == '' then\n        return {}\n    end\n    \n    local\
    \ words = { }\n    for char in string.gmatch(s, '%a') do\n        if string.find(string.gsub(char,\
    \ '[%a]', '%^%a'), '^%a') then\n            table.insert(words, string.gsub(char,\
    \ '%a', '')) -- remove consonants \n        end\n    end\n    \n    -- filter\
    \ out words containing letters other than n consonants\n    local filtered = {\
    \ }\n    local cnt = 0\n    for w in words do\n        cnt = cnt + 1\n       \
    \ if cnt > n then\n            break\n        end\n        table.insert(filtered,\
    \ w)\n    end\n    return filtered\nend", "    local t = {}\n    local i = 0\n\
    \    \n    while i < (stringlen(s)-1) do\n        for j = 1, n do\n          \
    \  if s[i+j] == \" \" then\n                break\n            end\n        end\n\
    \        \n        table.insert(t, string.sub(s, i, i+j))\n        i = i+j + 1\n\
    \    end\n    \n    if i == (stringlen(s)-1) then\n        table.insert(t, string.sub(s))\n\
    \    end\n    \n    return t\nend", "  local words = {}\n  local count = 0\n \
    \ local i = 1\n  while i <= #s do\n    if string.sub(s, i, i+n) == \"\" then break\
    \ end\n    count = count + 1\n    i = i+1\n  end\n  for i = 1, count do\n    words[#words\
    \ + 1] = string.sub(s, 1, i)\n  end\n  return words\nend", "    local t = {}\n\
    \    local function f(s)\n        local a = s:gsub(\"[[:alpha:]]+\", \"\")\n \
    \       for w in a:gmatch(\"%w+\") do\n            local i = t[w]\n          \
    \  if not i then\n                i = t[w] = n\n            end\n            i\
    \ = i + 1\n            if i == n then\n                t[w] = i\n            end\n\
    \        end\n        return t\n    end\n    return f(s)\nend\n</cell>\n<cell>",
  "  if s == \"\" then return end -- empty string\n  local table = {}\n  for i = 1,\
    \ #s do\n    local character = s:sub(i, i)\n    local count = n:find(character)\n\
    \    if count ~= nil then\n      if count == n then\n        table[#table+1] =\
    \ character\n      end\n    end\n  end\n  return table\nend\n</cell>\n<text>\n\
    Question 7\nYou have been tasked to implement a function that returns a table\
    \ containing only those \nwords from a given table table that start with some\
    \ prefix.\nFor example, if prefix is 'abc' then 'abc' would be the only prefix\
    \ that exists in the \ninput table, so only 'abc' would be returned in this case.\n\
    If the input table is empty or doesn't contain any strings that start with the\
    \ prefix \nthen an empty table should be returned.\nNote: prefix is of length\
    \ 1.", "\tif s == '' then\n\t\treturn {}\n\tend\n\t\n\tlocal t = {}\n\tfor w in\
    \ string.gmatch(s, '%W') do\n\t\tlocal w = string.lower(w)\n\t\tif w == string.sub(s,\
    \ 1, n) then\n\t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\t\n\treturn t\nend",
  "    -- TODO: Write code here\nend", "    local tbl = {}\n    if s == \"\" then\n\
    \        return tbl\n    end\n    local vowels = \"aeiouy\"\n    local cons =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    for i,c in ipairs(s) do\n        if vowels:find(c)\
    \ then\n            for _,v in ipairs(vowels) do\n                if c == v then\n\
    \                    tbl[i] = tbl[i] or c\n                    break\n       \
    \         end\n            end\n        elseif cons:find(c) then\n           \
    \ for _,c in ipairs(cons) do\n                if c == c then\n               \
    \     tbl[i] = tbl[i] or c\n                    break\n                end\n \
    \           end\n        end\n    end\n    return tbl\nend", "  local tbl = nil\n\
    \  for w in string.gmatch(s, \"(%S+)\") do\n    local c = 'a'\n    for i = 1,\
    \ n do\n      c = string.sub(c, 1, 1) == 'a' and c or string.sub(c, 1, 1)\n  \
    \  end\n    if tbl[c] == nil then\n      tbl[c] = w\n    end\n  end\n  if s ==\
    \ \"\" then\n    return tbl\n  end\nend", "  local t = {}\n  for w in string.gmatch(s,\
    \ '([^'..'-])') do\n    if string.find(w, string.char(n), 1, true) ~= nil then\n\
    \      table.insert(t, w)\n    end\n  end\n  return t\nend", "    -- Your code\
    \ here\nend\nprint(select_words(\"Mary had a little lamb\", 4));\nprint(select_words(\"\
    Mary had a little lamb\", 3));\nprint(select_words(\"simple white space\", 2));\n\
    print(select_words(\"Hello world\", 4));\nprint(select_words(\"Uncle sam\", 3));\n\
    </cell>\n<text>\nExercise 8\nWrite a function count_vowels that takes a string\
    \ s and returns the number of vowels contained in the string.\nThe vowels are\
    \ 'a', 'e', 'i', 'o', and 'u'.", "  if s == '' then return {} else return assert(s:gsub('[^'\
    \ .. tostring(n) .. ' ]', '', \n      function(word) return word end\n    ))\n\
    \  end\nend\n</code>\n<|/ a tags=lua dscore=0 |>\n<| c |>\nThe question was \"\
    How to find a words in a table that contain an even number of consonants\", not\
    \ \"How many consonants do I have to remove\" from the words.\n<|/ c |>\n<| c\
    \ |>\n: You are right. Sorry. I misread and fixed my answer accordingly.\n<|/\
    \ c |>\n<| a tags=lua |>\n<code>\n    require 'string'", "    local t = {}\n \
    \   for w in string.gmatch(s, '%a') do\n        table.insert(t, w)\n    end\n\
    \    local max_n = #t\n    for i = 1, n do\n        local max_i = 0\n        for\
    \ j = 1, max_n do\n            if t[j] == t[max_i] then\n                max_i\
    \ = j\n            end\n        end\n        table.insert(t, t[max_i])\n     \
    \   max_n = max_i + 1\n    end\n    return t\nend", "\tassert(n >= 1, \"n should\
    \ be positive\")\n\ts = s:lower()\n\t\n\tlocal results = {}\n\tfor _, word in\
    \ ipairs(s) do\n\t\t-- If the word contains 'n' consonants.\n\t\tif word:len()\
    \ == n then\n\t\t\t-- Add the word to the result table.\n\t\t\ttable.insert(results,\
    \ word)\n\t\tend\n\tend\n\t\n\treturn results\nend", "  if s == '' then\n    return\
    \ {}\n  else\n    -- Your code here\n  end\nend", "\tif s == '' then\n\t\treturn\
    \ {}\n\tend\n\t\n\tlocal ret = {}\n\t\n\t-- start by counting how many consonants\
    \ there are\n\t-- then iterate through until you hit n\n\tlocal count = 0\n\t\
    for c in string.gmatch(s, '[%S]+') do\n\t\tcount = count + 1\n\t\tif n == count\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\t-- iterate through until you hit n\
    \ or run out of consonants\n\tfor i = 1, #s do\n\t\tlocal c = s[i]\n\t\t\n\t\t\
    -- only add words if they're n consonants\n\t\tif c == string.sub(s, i, i+n) then\n\
    \t\t\ttable.insert(ret, string.sub(s, 1, i))\n\t\tend\n\tend\n\t\n\treturn ret\n\
    end", "\tlocal words = {}\n\t-- Your code here!\n\t\n\treturn words\nend", " \
    \ if s == \"\" then return end\n  local t = {}\n  for i = 1,#s do\n    if string.sub(s,\
    \ i, i+n) ~= '' then\n      table.insert(t, string.sub(s, i, i+n))\n    end\n\
    \  end\n  return t\nend", "\tif s == '' then\n\t\treturn {}\n\tend\n\tlocal t\
    \ = {}\n\t-- Find the last consonant\n\tlocal pos = string.find(s, '([bcdfghjklmnpqrstvwxyz])',\
    \ true)\n\tif pos > 0 then\n\t\t-- Find the length of the string after the first\
    \ consonant\n\t\tlocal pos_next = string.find(string.sub(s, pos, pos), '([bcdfghjklmnpqrstvwxyz])',\
    \ true)\n\t\tif pos_next > 0 then\n\t\t\tlocal len = string.len(string.sub(s,\
    \ pos + 1, pos_next))\n\t\t\t-- If the last consonant is the one requested, then\
    \ return the string\n\t\t\tif len == n then\n\t\t\t\treturn { s }\n\t\t\telse\n\
    \t\t\t\t-- Otherwise, remove the consonants from the end of the string\n\t\t\t\
    \tlocal remaining = string.sub(s, pos, pos_next + 1)\n\t\t\t\t-- Remove remaining\
    \ letters and return the remainder\n\t\t\t\treturn select_words(remaining, n)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn t\nend", "  n = n or 1\n  if s == '' then\
    \ return end \n  local t = {}\n  for char in string.gsub(s, '[aeiou]', nil) do\n\
    \    if string.sub(s, 1, string.len(char) - n) == char then\n      table.insert(t,\
    \ char)\n    end\n  end\n  return t\nend", "  if n == 0 then return {} end\n \
    \ local t = {}\n  for w in string.gmatch(s, '%a') do\n    if string.find(string.gsub(w,\
    \ '[^aeiou]', ''), '^[^aeiou' .. 'aeiou]') then continue end\n    table.insert(t,\
    \ w)\n    if #t == n then\n      return t\n    end\n  end\nend\n</cell>\n<text>\n\
    Write a function that given a string, returns its lexicographical rank\nNote:\
    \ If the input string contains multiple words, each word should appear in the\
    \ returned list in the same order.\nExample:", "  -- Your code here\nend", "\t\
    local t = {}\n\tlocal p = s:sub(1,n)\n\tfor i = 1, #p do\n\t\tlocal c = p:sub(i,i)\n\
    \t\tt[c] = t[c] or {}\n\tend\n\treturn t\nend", "  local tbl = {}\n  if s == \"\
    \" then\n    return tbl\n  end\n  local index = 0\n  local last = 0\n  for i=1,#s\
    \ do\n    if string.sub(s,i,i) == \" \" then\n      if last == n then\n      \
    \  tbl[index] = string.sub(s,1,i)\n        index = index + 1\n      else\n   \
    \     last = index\n      end\n    end\n  end\n  if index == 0 then\n    tbl[index]\
    \ = string.sub(s,1,last)\n  end\n  return tbl\nend", "    local result = {}\n\
    \    local vowels = {'a','e','i','o','u'}\n    for i,v in ipairs(vowels) do\n\
    \        local count = string.gsub(s,\"[\" .. v .. \"]\", \"\")\n        if count\
    \ == n then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for word in string.gmatch(s, '%w+')\
    \ do\n        local count = #word\n        if count > n and n then\n         \
    \   for i = 1, n - 1 do\n                if word[i] ~= 'c' then\n            \
    \        count = count - 1\n                    break\n                end\n \
    \           end\n        end\n        if count == n then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return result\nend", "    local t = {}\n  \
    \  for w in string.gmatch(s, '%w+') do\n        t[#t + 1] = w\n    end\n    for\
    \ i = 1, n do\n        local found = false\n        for w in t do\n          \
    \  if string.sub(s, i, i + 1) == w then\n                found = true\n      \
    \          break\n            end\n        end\n        if not found then\n  \
    \          return {}\n        end\n    end\n    return t\nend", "  if s == nil\
    \ then return {} end\n  \n  local table = {}\n  local p = 0\n  \n  while p < #s\
    \ and #table+1 < n do table.insert(table,s[p]) p = p+1 end\n  return table\nend",
  "  local tbl = {}\n  for w in string.gmatch(s, '%S+') do\n    local cnt = {}\n \
    \   for c in w:gmatch'[bcdfghjklmnpqrstvwxyz]{%d*}' do\n      cnt[#cnt + 1] =\
    \ c\n    end\n    if #cnt == n then\n      table.insert(tbl, w)\n    end\n  end\n\
    \  return tbl\nend", "\tif s == \"\" then\n\t\treturn {}\n\tend\n\t\n\tlocal table\
    \ = {}\n\tlocal consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'}\n\
    \tlocal alphabets = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \tlocal i = 0\n\tfor i = 1,#s do\n\t\tlocal c = s[i]\n\t\tif c == '.' or c ==\
    \ '!' or c == '?' or c == '\\'' or c == '(' or c == ')' or c == ',' or c == '-'\
    \ or c == ';' or c == '?' or c == ':' or c == '&' or c == '$' or c == '!' or c\
    \ == '~' or c == '=' or c == '^' or c == '&' or c == '%' or c == '*' or c == '{'\
    \ or c == '}' or c == '[' or c == ']' or c == '<' or c == '>' or c == '/' or c\
    \ == '?' or c == '|' or c == '\\\\' or c == '^' or c == '\"' or c == '~' or c\
    \ == '@' or c == '`' or c == '{' or c == '}' or c == ']' or c == ':' or c == '\\\
    '' or c == '<' or c == '>' or c == '{' or c == '}' or c == '/' or c == '~' or\
    \ c == '@' or c == '`' or c == '(' or c == ')' or c == '[' or c == ']' or c ==\
    \ '<' or c == '>' or c == '+' or c == '=' or c == '-' or c == '*' or c == '/'\
    \ or c == '&' or c == '%' or c == '|' or c == '#' or c == '{' or c == '}' or c\
    \ == ']' or c == '\\'' or c == '?' or c == ':' or c == ';' or c == '.' or c ==\
    \ '\\'' or c == '[' or c == ']' or c == '~' or c == '@' or c == '`' or c == '\"\
    ' or c == '\\'' or c == '+' or c == '-' or c == '^' or c == '&' or c == '*' or\
    \ c == '/' or c == '|' or c == '#'} or alphabets:find(c) then\n\t\t\ttable[i]\
    \ = c\n\t\tend\n\tend\n\t\n\tfor i = 1,n do\n\t\ttable[i] = nil\n\tend\n\t\n",
  "  return {}\nend", "   if s == \"\" then return end\n   if n == 0 then return {}\
    \ end", "  local table = {}\n  for w in string.gmatch(s, '%w') do\n    if string.sub(w,1,n)\
    \ ~= '' then\n      table.insert(table, w)\n    end\n  end\n  if s == '' then\
    \ return table else return nil end\nend", "    if s == '' then\n        return\
    \ {}\n    end", "   if s == \"\" then\n       return {}\n   end", "    -- If the\
    \ length of the input string is less than or equal to 1, \n    -- then return\
    \ an empty table.\n    if #s < n then\n        return {};\n    -- Otherwise, iterate\
    \ through the input string and use your \n    -- skills to return all the words\
    \ that contain exactly n consonants.\n    else\n        return \n            --\
    \ Create an empty table to store all words.\n            {};\n    end;\nend; --\
    \ select_words", "\tif s == '' then\n\t\treturn {}\n\tend\n\t-- Create a table\
    \ of consonants\n\tlocal t = {}\n\tfor i = 1, #s do\n\t\tt[string.lower(s[i])]\
    \ = true\n\tend\n\t-- Select words containing n consonants\n\tlocal words = {}\n\
    \tfor k, v in pairs(t) do\n\t\tif #v == n then\n\t\t\ttable.insert(words, k)\n\
    \t\tend\n\tend\n\treturn words\nend", "   if s == \"\" then\n      return {}\n\
    \   end\n   local t = {}\n   for i = 1, #s do\n      if string.sub(s,i,i+1) ==\
    \ s then\n         t[#t+1] = string.sub(s,i,i+1)\n      end\n   end\n   for i\
    \ = 1, #t do\n      if #t[i] == n then\n         table.insert(t, t[i])\n     \
    \ end\n   end\n   return t\nend", "\tif s == nil then return {} end\n\t\n\tlocal\
    \ t = {}\n\t\n\trepeat\n\t\tlocal i = s:find(\" \", 1, true)\n\t\tif i ~= nil\
    \ then\n\t\t\ttable.insert(t, s:sub(1, i - 1))\n\t\t\ts = s:sub(i + 1)\n\t\telse\n\
    \t\t\ttable.insert(t, s)\n\t\t\tbreak\n\t\tend\n\tuntil n-- or s == ''\n\t\n\t\
    return t\nend", "  -- TODO: Please code this function\nend", "  local table =\
    \ {}\n  if s ~= nil then\n    local word = s:sub(1, #s)\n    local consonants\
    \ = #word - 1\n    if consonants == n then\n      table.insert(table, word)\n\
    \    end\n  end\n  return table\nend\nprint(select_words('Mary had a little lamb',\
    \ 4))\nprint(select_words('Mary had a little lamb', 3))\nprint(select_words('simple\
    \ white space', 2))\nprint(select_words('Hello world', 4))\nprint(select_words('Uncle\
    \ sam', 3))\nprint(select_words('', 0))\n</cell>\n<text>\nExercise 6: Write a\
    \ function that returns a table of all words from string s that contains exactly\
    \ n vowels. If the string s is empty then the function should return an empty\
    \ table.", '  local words = {}', "    local t = {}\n    \n    -- TODO: Write the\
    \ skeleton code below this line. HINT: Use a double for-loop.\n    for i=1,#s\
    \ do\n        for j=1,#s do\n            if string.sub(s,i,j) == string.sub(s,\
    \ j, i) and #string.sub(s,j,j) == n then\n                t[#t + 1]=string.sub(s,i,j)\n\
    \            end\n        end\n    end\n    \n    -- TODO: return the table t\n\
    end\n</cell>\n<text>\nExercise 3\nNext, implement a function that computes the\
    \ number of vowels found in a given string.", "  local t = {}\n  local i = 2\n\
    \  for word in string.gmatch( s, '.+' ) do \n    if string.sub(s, i, i+n) == word\
    \ then\n      table.insert(t, word)\n      i = i + n\n    end\n  end\n  if #t\
    \ == 0 then\n    return {}\n  end\n  return t\nend", "  -- Write your solution\
    \ here\n  \n  return {}\nend", "    return \nend", "  \n  -- Write your code here.\n\
    \  \n  -- Example 1 -- select_words('Mary had a little lamb', 4)\n  -- Example\
    \ 2 -- select_words('Mary had a little lamb', 3)\n  -- Example 3 -- select_words('simple\
    \ white space', 2)\n  -- Example 4 -- select_words('Hello world', 4)\n  -- Example\
    \ 5 -- select_words('Uncle sam', 3)\n  \n  \n  -- return an empty table if the\
    \ input string is empty\n  if s == '' then return end \n  \n  -- convert the string\
    \ to a list of letters using split\n  local tokens = string.split(s)\n  \n  --\
    \ iterate over all words in \"tokens\"\n  for _, word in pairs(tokens) do\n  \n\
    \    -- check whether the number of consonants equals the given number\n    local\
    \ num_consonants = string.len(word)\n    if num_consonants == n then \n      \n\
    \      -- iterate over all letters in the word\n      for _, letter in pairs(word)\
    \ do\n        \n        -- check whether the letter equals a consonant\n     \
    \   if letter:lower() == 'a' or letter:lower() == 'e' or letter:lower() == 'i'\
    \ \n        or letter:lower() == 'o' or letter:lower() == 'u' then\n         \
    \ \n          -- append the letter to the result table\n          table.insert(result,\
    \ letter)\n        end\n      end\n    end\n  end\n  \n  return result\nend\n\
    </cell>\n<text>\nTest your code\nRun the cell below to test your code.", "  local\
    \ table = {}\n  if s == '' then\n    return table\n  end\n  local i = 0\n  for\
    \ c in s:gmatch('%[bcdfghjklmnpqrstvwxyz]') do\n    i = i + 1\n    table.insert(table,\
    \ {c, n})\n    if i == n then\n      break\n    end\n  end\n  return table\nend",
  "  local t = {}\n  local s = s or ''\n  for i = 1, #s, 1 do -- Loop through each\
    \ character in the string\n    local x = #s - i -- Loop through each character\
    \ in string\n    if x > n then -- If character in string is longer than n\n  \
    \    if s[i] > ' ' then -- If character in string is not space but character in\
    \ the string is space\n        t[#t + 1] = s[i]\n      end\n    end\n  end\n \
    \ return t\nend", "    local result = {}\n    local consonant_list = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    for i = 1, #s do\n        if string.find(s, string.char(consonant_list[i]))\
    \ == 1 then\n            table.insert(result, string.sub(s, 1, i - 1))\n     \
    \   end\n    end\n    for i = 1, #result do\n        local word = {}\n       \
    \ for j = 1, #consonant_list do\n            if string.find(result[i], string.char(consonant_list[j]))\
    \ == 1 then\n                table.insert(word, string.sub(result[i], 1, j - 1))\n\
    \            end\n        end\n        if n == #word then\n            return\
    \ word\n        end\n    end\n    return {}\nend", "\tlocal result = {}\n\tif\
    \ not s then\n\t\treturn {}\n\tend\n\tfor w in string.gmatch(s, '%a') do\n\t\t\
    if words[w] == n then\n\t\t\tresult[#result+1] = w\n\t\tend\n\tend\n\treturn result\n\
    end", "  assert(type(n) == 'number' and n > 0, 'invalid n')\n  if s == '' then\
    \ return {} end\n  \n  local tbl = {}\n  \n  for w in s:gmatch('%S+') do\n   \
    \ local n_w = #w - 1\n    for i = 1, n do\n      if w:sub(n_w, n_w + i) ~= '^'\
    \ then break end\n    end\n    if n_w == n then\n      tbl[#tbl + 1] = w\n   \
    \ end\n  end\n  return tbl\nend\n</cell>\n<text>\nTo verify the correctness of\
    \ your implementation above, run the cell below to test your implementation.",
  "  assert(type(s) == 'string')\n  assert(type(n) == 'number')\n  local t = {}\n\
    \  if s == '' then return t end\n  \n  -- TODO: implement your implementation\
    \ here\n  \n  return t\nend", "  -- TODO: You will need to write the select_words()\
    \ function\n  -- HINT: Recall that the strings are all lower case and may contain\
    \ spaces.\n  -- For each string in s, add the string to a table that contains\
    \ the number of \n  -- characters in that string that matches the number specified\
    \ in the n argument.\n  -- If the string contains fewer than n characters, return\
    \ an empty table.\n  -- Otherwise, return a table containing all of the words\
    \ from the strings in s that \n  -- match the specified number of characters in\
    \ n.\n  \n  -- First, write your select_words() function here.", "  local result\
    \ = {}\n  if s ~= '' then\n    local i, j, c = 1, 0, 1\n    while i <= #s do\n\
    \      local c = string.sub(s, i, i)\n      if c == '' then\n        return result\n\
    \      end\n      if c ~= '^' then\n        if c ~= 'z' then\n          j = j\
    \ + 1\n        end\n        if j == n then\n          table.insert(result, string.sub(s,\
    \ 1, i - 1))\n          j = j - 1\n        end\n      end\n      i = i + 1\n \
    \   end\n  end\n  return result\nend", "  local table = {}\n  for i = 1, n do\n\
    \    local word = s:sub(1, i)\n    table.insert(table, word)\n  end\n  return\
    \ table\nend", "\treturn {} -- TODO: implement here\nend", "    local t = {}\n\
    \    if s ~= nil then\n        for c in string.gmatch(s, '%[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+')\
    \ do\n            if string.sub(s, 1, string.len(c)) ~= c then\n             \
    \   table.insert(t, string.sub(s, 1, string.len(c)))\n            end\n      \
    \  end\n    end\n    return t\nend", "  -- Initialize variables\n  local table\
    \ = {}\n  local j = 0", "  local words = {}\n  for i=1,#s do\n    local letter\
    \ = s[i]\n    if letter ~= ' ' and letter ~= '' and letter ~= '-' and letter ~=\
    \ '!' and letter ~= '.' and letter ~= '?' and letter ~= '!' and letter ~= '?'\
    \ and letter ~= '-' and letter ~= '!' and letter ~= '?' and letter ~= '-' and\
    \ letter ~= '!' and letter ~= '?' and letter ~= '-' and letter ~= '!' and letter\
    \ ~= '?' then\n      if #words + 1 ~= n then\n        table.insert(words, letter)\n\
    \      end\n    end\n  end\n  return words\nend", "    if s ~= '' then\n     \
    \   local word_count = {}\n        for i = 1,#s do\n            for j = 1,#s do\n\
    \                if string.sub(s,i,j) == string.sub(s,j,i) then\n            \
    \        table.insert(word_count, string.sub(s,i,j))\n                end\n  \
    \          end\n        end\n        table.sort(word_count)\n        local count\
    \ = 0\n        for i = 1,#word_count do\n            if count == n then\n    \
    \            table.insert(word_count, word_count[i])\n            end\n      \
    \      count = count + 1\n        end\n        for i = 1,#word_count do\n    \
    \        table.insert(word_counts, word_count[i])\n        end\n    end\n    return\
    \ word_counts\nend", "  local table = {}\n  for i = 1, #s do\n    local index\
    \ = i\n    local is_consonant = false\n    for j = 1, #s do\n      if not is_consonant\
    \ then\n        if s[index:sub(j, 1)] == ' then\n          index = j\n       \
    \   is_consonant = true\n        end\n      else\n        if j - i <= n then\n\
    \          table[index] = s[index:sub(j, i)]\n        end\n        if is_consonant\
    \ then\n          is_consonant = false\n        end\n      end\n    end\n  end\n\
    \  return table\nend", "  if s == '' then return end\n  local words = {}\n  for\
    \ i = 1, #s do\n    local word = string.sub(s,i,i)\n    if n==1 then words=words+{word}\
    \ end\n    if string.find(word,'[bcdfghjklmnpqrstvwxyz]') then\n      words=words+select_words(word,n-1)\n\
    \    end\n  end\n  return words\nend", "    return \n    -- Base case: when the\
    \ string s is empty return an empty table.\n    {} \n    -- Add all the words\
    \ from string s that contain exactly n consonants, in order\n    -- these words\
    \ appear in the string s.\n    \n    \n    -- Solution goes here\nend", "  if\
    \ n<=0 then\n    return {}\n  elseif s==\"\" then\n    return {}\n  else\n   \
    \ local table={}\n    local c=0\n    for i,c in pairs(s:gsub(\"%S+\", function\
    \ (word) return word:upper() end)) do\n      table.insert(table,word)\n      if\
    \ c==n then\n        break\n      end\n    end\n    return table\n  end\nend",
  "\treturn {} -- TODO\nend", "  -- Initialize the result table to an empty table.\n\
    \  local t = {}\n  -- Iterate over string s.\n  for i, word in ipairs(string.gmatch(s,\
    \ '%w+')) do\n    -- If the word contains n (i.e., exactly) n consonants then\n\
    \    -- add it to the table.\n    if string.gsub('%' .. word .. '', '', 1, n)\
    \ == n then\n      table.insert(t, word)\n    end\n  end\n  -- Return the result\
    \ table.\n  return t\nend", "  -- Initialize your data structure here.\n  local\
    \ t = {}\n  \n  if s == nil then\n    return t\n  end", "    local alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz '\n    local vowels = 'aeiou'\n    local consonants\
    \ = alphabet:sub(1, 26) .. alphabet:sub('z', 27)\n    local words = {}\n    --\
    \ Base case\n    if s == '' then\n        return words\n    end\n    -- Recursive\
    \ case\n    local i, j = 1, 1\n    while i < #s and j < n do\n        if string.sub(s,i,i)\
    \ == consonants then\n            table.insert(words, string.sub(s,i,i))\n   \
    \         i = i + 1\n        elseif string.sub(s,i,i) == vowels then\n       \
    \     i = i + 1\n        else\n            j = j + 1\n        end\n    end\n \
    \   return words\nend\n</cell>\n<cell>", "    \n    -- Base case\n    if s ==\
    \ '' then\n        return {}\n    end", "  local tbl = {}\n  local i = 0\n  for\
    \ w in string.gmatch(s, '%a') do \n    i = i + 1\n    if i ~= n then\n      tbl[#tbl+1]\
    \ = w\n    end\n  end\n  if #tbl == 0 then\n    tbl = {}\n  end\n  return tbl\n\
    end", "    \n    -- Handle edge cases:\n    if s == '' then\n        return {}\n\
    \    end\n    if n < 1 then\n        return {}\n    end\n    if n == 1 then\n\
    \        return {s}\n    end\n    \n    -- Construct a table containing all the\
    \ consonants in the string:\n    local consonants = ''\n    for i = 1, #s do\n\
    \        if string.sub(s, i, i) == string.sub(s, 1, i) then\n            consonants\
    \ = consonants .. string.sub(s, i, i)\n        end\n    end\n    \n    -- Construct\
    \ a table containing all the words that contain exactly n consonants:\n    local\
    \ words = {}\n    for i = 1, #s do\n        -- Only add to table if current letter\
    \ is in the consonants table:\n        if string.sub(s, i, i) ~= string.sub(s,\
    \ 1, i) then\n            table.insert(words, s)\n        end\n    end\n    \n\
    \    -- Remove any words that do not contain exactly n consonants:\n    local\
    \ remaining = select_words(s, n - 1)\n    for _, w in pairs(remaining) do\n  \
    \      -- Remove the word from the remaining table:\n        table.insert(words,\
    \ w)\n    end\n    \n    -- Return table containing only words that contain n\
    \ consonants:\n    return words\nend\n</cell>\n<cell>", "    local result = {}\n\
    \    for word in string.gmatch(s, '[%a%s]+') do\n        table.insert(result,\
    \ word)\n    end\n    return table.sort(result)\nend", "  -- Your code here\n\
    end\n</cell>\n<text>\nExercise\nSelect the words in the sentence that contain\
    \ exactly four consonants.", "  local table = { }\n  if #s <= 0 then\n    return\
    \ table\n  end\n  \n  local index\n  for index, letter in string.gmatch(s, '%a')\
    \ do\n    if letter ~= 'a' and letter ~= 'e' and letter ~= 'i' and letter ~= 'o'\
    \ and letter ~= 'u' then\n      table[index] = letter\n    end\n  end\n  \n  local\
    \ index\n  for index, word in pairs(table) do\n    if #word == n then\n      table[index]\
    \ = word\n    end\n  end\n  return table\nend", "\tif s == nil then\n\t\treturn\
    \ {}\n\tend\n\t\n\tif n > #s then\n\t\treturn{}\n\tend", "   -- Initialize your\
    \ data structure here.\n   local output = {}\n   \n   -- If string s is empty\
    \ then return an empty table.\n   if s == '' then return output\n   \n   -- Loop\
    \ through each character in string s and add them to table.\n   for i = 1, #s\
    \ do\n      local letter = s[i]\n      \n      -- If the letter is in 'aeiouy'\
    \ then add it to the table.\n      if letter == 'a' or letter == 'e' or letter\
    \ == 'i' or letter == 'o' or letter == 'y' then\n         table.insert(output,\
    \ letter)\n      end\n      \n      -- If the letter is in 'bcdfghjklmnpqrstvwxyz'\
    \ then add it to the table.\n      if letter == 'b' or letter == 'c' or letter\
    \ == 'd' or letter == 'f' or letter == 'g' or letter == 'h' or letter == 'j' or\
    \ letter == 'k' or letter == 'l' or letter == 'm' or letter == 'n' or letter ==\
    \ 'p' or letter == 'q' or letter == 'r' or letter == 's' or letter == 't' or letter\
    \ == 'v' or letter == 'w' or letter == 'x' or letter == 'y' then\n         table.insert(output,\
    \ letter)\n      end\n      \n      -- If the letter is in 'aeiouybcdfghjklmnpqrstvwxyz'\
    \ then add it to the table.\n      if letter == 'A' or letter == 'E' or letter\
    \ == 'I' or letter == 'O' or letter == 'Y' then\n         table.insert(output,\
    \ letter)\n      end\n      \n      -- If the letter is in 'bcdfghjklmnpqrstvwxyz'\
    \ then add it to the table.\n      if letter == 'B' or letter == 'C' or letter\
    \ == 'D' or letter == 'F' or letter == 'G' or letter == 'H' or letter == 'J' or\
    \ letter == 'K' or letter == 'L' or letter == 'M' or letter == 'N' or letter ==\
    \ 'P' or letter == 'Q' or letter == 'R' or letter == 'S' or letter == 'T' or letter\
    \ == 'V' or letter == 'W' or letter == 'X' or letter == 'Y' then\n         table.insert(output,\
    \ letter)\n      end\n      \n      -- If the letter is in 'aeiouybcdfghjklmnpqrstvwxyz'\
    \ then add it to the table.\n      if letter == 'I' or letter == 'O' or letter\
    \ == 'Y' then\n         table.insert(output, letter)\n      end\n   end\n   \n\
    \   -- If the input string contains less than n consonants, then return an empty\
    \ table.\n   if #output < n then return output\n   \n   -- If the input string\
    \ contains exactly n consonants, return all con", "\tif s == '' then return end\n\
    \tlocal words = {}\n\tfor word in string.gmatch(s, '%S+') do\n\t\tlocal count\
    \ = 0\n\t\tfor letter in word do\n\t\t\tif letter:sub(1, 1) == 'a' or letter:sub(1,\
    \ 1) == 'e' or letter:sub(1, 1) == 'i' or letter:sub(1, 1) == 'o' or letter:sub(1,\
    \ 1) == 'u' then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count\
    \ == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\n\
    end", "    \nend", "  -- Base case:\n  if s == '' then\n    return {}\n  end",
  "   local dict = {}\n   if s == \"\" then\n      return dict\n   end", "\tlocal\
    \ words = {}", "  local table = {}\n  while #s > 0 do\n    local word = string.sub(s,1,#s-1)\n\
    \    if string.len(word) == n then\n      table[word] = true\n    end\n    local\
    \ new_s = string.sub(s,#s+1)\n    if new_s ~= '' then\n      table = {}\n    end\n\
    \  end\n  return table\nend", "  local t = {}\n  local f = false\n  for w in string.gmatch(s,\
    \ '%S+') do\n    if string.match(w, string.gsub('%S+', '', string.sub(s, 1, string.len(w))),\
    \ '') then\n      if n >= 1 then\n        if f then\n          table.insert(t,\
    \ w)\n        else\n          if n == 1 then\n            table.insert(t, w)\n\
    \          else\n            table.insert(t, w)\n            n = n - 1\n     \
    \       if n <= 0 then\n              f = not f\n            end\n          end\n\
    \        end\n      else\n        f = not f\n      end\n    end\n  end\n  return\
    \ t\nend", "   if s == nil then\n      return nil\n   end\n   \n   local words\
    \ = {}\n   for word in string.gmatch(s, '(%S+)') do\n      words[word] = true\n\
    \   end\n   \n   for key, val in pairs(words) do\n      if n == 1 then\n     \
    \    return val\n      else\n         if val == true then\n            n = n -\
    \ 1\n         else\n            n = n - 1\n            return select_words(val,\
    \ n)\n         end\n      end\n   end\n   \n   return {}\nend", "  local t = {}\n\
    \  local i = 0\n  while s ~= '' do\n    if string.sub(s,i,i+1) == string.sub(s,1,1)\
    \ then\n      if n > 0 then\n        table.insert(t, s)\n      else\n        break\n\
    \      end\n    end\n    i = i + 1\n  end\n  if n == 0 then\n    return {}\n \
    \ else\n    return t\n  end\nend", "    if s == \"\" then\n        return {}\n\
    \    end\n    \n    local table = {}\n    local letter\n    for letter in string.gmatch(s,\
    \ '%a+') do\n        if not letter:sub(1, n) then\n            table.insert(table,\
    \ letter)\n        end\n    end\n    return table\nend\n</cell>\n<cell>\n%run\
    \ q1.lua\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a table and\
    \ returns a table with keys from the\noriginal table, and values that are the\
    \ count of values that equaled each of\nthe keys in the original table. \nFor\
    \ example, given table:", "    -- write your code here\n    return {}\nend", " \
    \ -- Your code here.\n  \n  local tt = {}\n  if s then\n    for w in string.gmatch(s,\
    \ '%w+') do\n      local cnt = 1\n      for c in w:gmatch('.') do\n        if\
    \ string.sub(s, 1, n) == string.sub(s, n + 1, n + cnt) then\n          table.insert(tt,\
    \ w)\n        end\n        cnt = cnt + 1\n      end\n    end\n  end\n  return\
    \ tt\nend", "  local words = {}\n  for w in string.gmatch(s, '[^' .. select_words.alphabets[]\
    \ .. ']+') do\n    table.insert(words, w)\n  end\n  return words\nend", "    local\
    \ table = {} -- To be returned\n    \n    if s == \"\" then\n        return table\n\
    \    end\n    \n    for i = 1, #s do\n        local word = s:sub(i, i + n)\n \
    \       if string.match(word, consonant_pattern) then\n            table.insert(table,\
    \ word)\n        end\n    end\n    return table\nend", "\tlocal t = {}\n\tlocal\
    \ w\n\twhile #s do\n\t\tw = s:sub(1,1)\n\t\ts = s:sub(2)\n\t\tif #w == n then\n\
    \t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\tif s == \"\" then\n\t\treturn {}\n\
    \tend\n\treturn t\nend", "  local out = {}\n  for w in string.gmatch(s, '%w+')\
    \ do\n    local count = 1\n    for letter in string.gsub(w, '[^' .. string.char(97,\
    \ 112, 104, 116, 101, 110, 121, 114, 101, 110, 99, 101, 114, 97, 108) .. ']')\
    \ do\n      if letter == ' ' then\n        count = count + 1\n      elseif letter\
    \ == string.sub(w, 1, n) then\n        count = count + 1\n      end\n    end\n\
    \    if count == n then\n      table.insert(out, w)\n    end\n  end\n  return\
    \ out\nend", "    -- Base case\n    if s == \"\" then\n        return {}\n   \
    \ end", "    local words = {}\n    local idx = 0\n    while idx < #s and idx <\
    \ n do\n        if string.sub(s, idx, idx) == '.' then\n            idx = idx\
    \ + 1\n        elseif string.sub(s, idx, idx) ~= 'c' then\n            table.insert(words,\
    \ string.sub(s, idx, idx))\n            idx = idx + 1\n        end\n    end\n\
    \    return words\nend\n</code>\nNow, this isn't really the optimal way to implement\
    \ this problem. The main problem is that this solution does not take into account\
    \ the number of consonants required. This will result in a solution that takes\
    \ O(2^n) time to run, instead of O(n).\nThe optimal solution to this problem would\
    \ be the following:\n<code>", "    -- Fill in the code below.\nend", "    local\
    \ words= {}\n    local last_word= ''\n    local consonant= {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z','a','e','i','o','u'}\n\
    \    for char in string.gsub( s, '[^' .. table.concat(consonant,',') .. ']+' )\
    \ do\n        if string.find( last_word, char, n) == n then\n            table.insert(words,\
    \ last_word)\n        else\n            last_word= last_word .. char\n       \
    \ end\n    end\n    return words\nend", "  if s == '' then return end\n  local\
    \ t = {}\n  local words = string.gmatch(s, '([A-Za-z ]+)')\n  if words == nil\
    \ then return end\n  local num = 1\n  for w in words do\n    if string.find(string.gsub(w,\
    \ '[^ ]', ''), n) then\n      table.insert(t, w)\n      num = num + 1\n      if\
    \ num == n then break end\n    end\n  end\n  return t\nend", "  -- Write your\
    \ code here.\n  return {}\nend", "    if s == nil then return end\n    \n    local\
    \ table = setmetatable({}, { __index = function(t, key)\n        if key == \"\
    __newindex\" then\n            error(...)\n        end\n        return t[key]\n\
    \    end })", "    -- Base case\n    if s == '' or n == 0 then\n        return\
    \ {}\n    end\n    -- Recursion\n    if #s <= n then\n        return {s}\n   \
    \ else\n        local result = {}\n        for word in s do\n            if select(result,\
    \ word) == nil then\n                insert(result, word)\n            end\n \
    \       end\n        return select_words(result, n-1)\n    end\nend\n</cell>\n\
    <text>\n2.3 Filter the Words Table\nNow that you've seen how the function works,\
    \ let's apply it to a new string that contains a bunch of words, one per line.",
  "    if s == '' then\n        return {}\n    end", "  -- Initialize your data structure\
    \ here.\n  local table = {}\n  local i = 1\n  local word", "\tif s == '' then\n\
    \t\treturn {}\n\tend\n\tlocal t = {}\n\tfor w in s:gmatch('[%a\xE1\xE0\xE2\xE3\
    \xE4\u0101\u0103\xC1\xC0\xC2\xC3\xC4\u0105\u0100\u0102\xD3\u0141\u0143\xD3\xD4\
    \xD5\xF5\u014C\u014D\xD5\u0144\u0158\u0159\xDF\u015B\u0161\u015F\u0165\u0163\u016D\
    \u016F\u0171\u0169\u016B\u016D\xDC\xDD\u0177\xE2\xEA\xEE\xF4\xFB\xF1\xEE\xEB\xE9\
    \xEF\xF9\xFA\xFB\xFC\xFF\xFD\xFF\xDD\xFD\xEE\xF4\xFB\xF1\xF7]') do\n\t\tif #w\
    \ == n then\n\t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\treturn t\nend", "   \
    \ if s == '' then\n        local t = {}\n        return t\n    end\n    local\
    \ table = {}\n    local pos1 = 0 \n    local pos2 = 1\n    while pos2 <= #s do\n\
    \        if string.sub(s, pos2, pos2 + 1) == ' ' then\n            table.insert(table,\
    \ string.sub(s, pos1, pos2))\n            pos1 = pos2 + 1\n        end\n     \
    \   pos2 = pos2 + 1\n    end\n    local pos1 = 0 \n    local pos2 = 1\n    while\
    \ pos2 <= #s do\n        if string.sub(s, pos2, pos2 + 1) == ' ' then\n      \
    \      table.insert(table, string.sub(s, pos1, pos2))\n            pos1 = pos2\
    \ + 1\n        end\n        pos2 = pos2 + 1\n    end\n    table.insert(table,\
    \ string.sub(s, pos1, pos2))\n    local count = 0\n    for _,v in pairs(table)\
    \ do\n        if string.match('(?ix)^' .. v, '%w') then\n            count = count\
    \ + 1\n        end\n    end\n    if count < n then\n        return {}\n    else\n\
    \        return table\n    end\nend", "  assert(type(s) == 'string', 'The second\
    \ argument must be a string')\n  assert(n > 0, 'The third argument must be positive')\n\
    \  assert(#s ~= 0, 'The input string is empty')\n  \n  local result = {}\n  \n\
    \  local i = 0\n  while i <= #s do\n    local word = sub(s, i, i)\n    if sub(s,\
    \ i + 1, i + 1) ~= 'a' and sub(s, i + 1, i + 1) ~= 'e' and sub(s, i + 1, i + 1)\
    \ ~= 'i' and sub(s, i + 1, i + 1) ~= 'o' and sub(s, i + 1, i + 1) ~= 'u' then\n\
    \      i = i + 1\n    else\n      if #word == n then\n        table.insert(result,\
    \ word)\n      else\n        i = i + 1\n      end\n    end\n  end\n  return result\n\
    end", "\tif s == nil then return nil end\n\tif n <= 0 then return {} end\n\tif\
    \ string.len(s) == 0 then return {} end", "\tlocal t = {}\n\t\n\tlocal is_consonants\
    \ = function(c)\n\t\treturn ((c > 'a' and c <= 'z') or \n\t\t(c >= '0' and c <=\
    \ '9'))\n\tend\n\t\n\tif not s then\n\t\treturn t\n\tend\n\t\n\tif n <= 0 then\n\
    \t\treturn t\n\tend\n\t\n\tlocal i = 1\n\t\n\tlocal done = false\n\t\n\twhile\
    \ i <= #s and done ~= true do\n\t\tlocal c = s[i]\n\t\tdone = is_consonants(c)\n\
    \t\tif done then\n\t\t\ttable.insert(t, c)\n\t\t\ti = i + 1\n\t\tend\n\tend\n\t\
    \n\tif i >= #s then\n\t\treturn t\n\telse\n\t\treturn select_words(s[i+1], n -\
    \ 1)\n\tend\nend", "  local table = { }\n  for _,v in ipairs(string.gmatch(s,\
    \ '%w*')) do\n    if v == n then\n      table.insert(table, v)\n    end\n  end\n\
    \  return table\nend", "    local words = {}\n    local t = ''\n    for letter\
    \ in s:gmatch('%[aeiouAEIOU]') do\n        if #t > n then\n            table.insert(words,\
    \ t)\n            t = ''\n        else\n            t = t .. letter\n        end\n\
    \    end\n    if #t > 0 then\n        table.insert(words, t)\n    end\n    return\
    \ words\nend", "\tlocal t = {}\n\tlocal i = string.find(s, \" \", 1)\n\tif i ~=\
    \ nil then\n\t\ts = string.sub(s,1, i)\n\tend\n\tif s ~= \"\" then\n\t\tlocal\
    \ w = select_words(s, 1)\n\t\tfor w in w do\n\t\t\ttable.insert(t, w)\n\t\t\t\
    if string.len(w) == n then\n\t\t\t\treturn t\n\t\t\tend\n\t\tend\n\telse\n\t\t\
    return t\n\tend\nend", "    local a = {}\n    for w in string.gmatch(s, '%a')\
    \ do\n        table.insert(a, w)\n    end\n    return table.sort(a)\nend", "\t\
    if s == '' then return end\n\tlocal t = {}\n\tlocal i, j = 0, 0\n\twhile j<#s\
    \ and i<#s do\n\t\tif s[i] == ' ' then i = i+1 elseif s[i] == '.' or s[i] == ','\
    \ then i = i+1 end\n\t\tif i+1 == #s or s[i+1] == ' ' then \n\t\t\tif j > 0 then\n\
    \t\t\t\tif s[j, 1] == 'a' or s[j, 1] == 'e' or s[j, 1] == 'i' or s[j, 1] == 'o'\
    \ or s[j, 1] == 'u' then\n\t\t\t\t\ttable.insert(t, s)\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\tj = 1\n\t\telseif s[i] == s[n] then\n\t\t\tj = j + 1\n\t\telse\n\t\t\ti\
    \ = i + 1\n\t\tend\n\tend\n\tif j > 0 and s[j, 1] == 'a' or s[j, 1] == 'e' or\
    \ s[j, 1] == 'i' or s[j, 1] == 'o' or s[j, 1] == 'u' then\n\t\ttable.insert(t,\
    \ s)\n\tend\n\treturn t\nend", "  -- TODO: raise error when s is empty or contains\
    \ only whitespace\n  local t = {}\n  for i = 1, #s do\n    local n = tonumber(s[i])\n\
    \    if n ~= nil and n <= #s then\n      t[#t + 1] = s[i]\n      if #t == n then\
    \ break end\n    end\n  end\n  return t\nend", "  local table = {};\n  for _,v\
    \ in pairs(string.gmatch(s, '%S+') do\n    table.insert(table, v);\n    if string.len(v)\
    \ == n then break end\n  end)\n  return table;\nend\n</cell>\n<text>\nselect_words(s,\
    \ n) tests:", "    local output = {}\n    \n    if s == '' then\n        return\
    \ output\n    end", "  local result = {}\n  for s in string.gmatch(s, '%w+') do\n\
    \    for i = 1, n do\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "    if s == nil then return end\n    local result = {}\n    for\
    \ w in string.gmatch(s, '(%w+)') do\n        for i = 1, n do\n            if string.find(w,\
    \ string.char(i)) ~= nil then\n                table.insert(result, w)\n     \
    \           break\n            end\n        end\n    end\n    return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
