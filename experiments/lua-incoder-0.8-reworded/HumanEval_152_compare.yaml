name: HumanEval_152_compare
language: lua
prompt: "-- I think we all remember that feeling when the result of some long-awaited\n\
  -- event is finally known. The feelings and thoughts you have at that moment are\n\
  -- definitely worth noting down and comparing.\n-- Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n-- You are given\
  \ two tables of scores and guesses of equal length, where each index shows a match.\
  \ \n-- Return a table of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n-- the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n-- example:\n-- >>> compare({1,\
  \ 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2})\n-- {0, 0, 0, 0, 3, 3}\n-- >>> compare({0,\
  \ 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2})\n-- {4, 4, 1, 0, 0, 6}\nlocal function compare(game,\
  \ guess)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0,\
  \ 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,\
  \ 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}),\
  \ {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0,\
  \ 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if not guess then return game end\n    local results = {}\n   \
    \ for i = 1,#guess do results[i] = 0 end\n    for i = 1,#game do\n        local\
    \ score = game[i]\n        local guess = guess[i]\n        if score > guess then\n\
    \            for j = 1,#guess do\n                if guess ~= score and guess\
    \ == guess[j] then\n                    results[j] = results[j] + 1\n        \
    \            break\n                end\n            end\n        end\n    end\n\
    \    local max = 0\n    for i = 1,#results do max = max > results[i] and max or\
    \ results[i] end\n    return { max = max }\nend", "    if not game or not guess\
    \ then return nil end\n    if #guess == 0 then return nil end\n    if #game ==\
    \ 0 then return nil end\n    local maxDiff = abs(game[#game] - guess[#guess])\n\
    \    for i = 1, #guess do maxDiff = maxDiff and abs(game[#game] - guess[i]) or\
    \ maxDiff end\n    return maxDiff\nend", "  local gameLen = #game\n  local guessLen\
    \ = #guess\n  local result = {gameLen}\n  for i=1,gameLen do\n    if guess[i]\
    \ ~= game[i] then\n      result[i] = abs(guess[i] - game[i])\n    end\n  end\n\
    \  return result\nend", "\tlocal differences = {}\n\tlocal index = #guess - 1\n\
    \tlocal currentDifference = 0\n\tlocal totalDifference = 0\n\tlocal index2 = #game\
    \ - 1\n\tlocal index1 = index\n\tlocal index1Int = index\n\tlocal index2Int =\
    \ index", "    local diffs = {}\n    local maxdiff = 0\n    local count = 0\n\
    \    for i = 1, #guess do\n        local diff\n        if guess[i] == game[i]\
    \ then\n            diff = 0\n        else\n            diff = abs(guess[i] -\
    \ game[i])\n        end\n        if diff > maxdiff then\n            maxdiff =\
    \ diff\n        end\n        count = count + 1\n        diffs[#diffs + 1] = diff\n\
    \    end\n    return table.concat(diffs)\nend", "\tlocal best\n\tfor _, v in ipairs(game)\
    \ do\n\t\tfor _, v2 in ipairs(guess) do\n\t\t\tif v == v2 then\n\t\t\t\tbest =\
    \ v\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal diff = {}\n\tfor _, v in\
    \ ipairs(game) do\n\t\tif best[#best] == v then\n\t\t\ttable.insert(diff, 0)\n\
    \t\telse\n\t\t\ttable.insert(diff, abs(best - v))\n\t\tend\n\tend\n\treturn diff\n\
    end", "\tlocal scores = {}\n\tlocal guesses = {}\n\tfor i=1, #game do\n\t\tscores[i]\
    \ = game[i]\n\t\tguesses[i] = guess[i]\n\tend\n\treturn scores-guesses\nend",
  "\tlocal table = {}\n\tfor i=1, #game do\n\t\ttable.insert(table, guess[i] - game[i])\n\
    \tend\n\treturn table\nend", "\tlocal results = {}\n\tlocal diff = math.abs(game.score\
    \ - guess)\n\tfor i, val in ipairs(game) do\n\t\tlocal diff = math.abs(val - guess[i])\n\
    \t\tif val == guess[i] then results[i] = 0 end\n\t\tresults[i] = results[i] or\
    \ diff\n\tend\n\treturn results\nend", "  local scores = {}\n  for i=1, #game\
    \ do\n    if game[i] == guess[i] then\n      scores[i] = 0\n    else\n      scores[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n  end\n  return scores\nend", "  local\
    \ c=0\n  for i,x in ipairs(game) do\n    local s=game[i]\n    local g=guess[i]\n\
    \    if g<0 then\n      g=g+game[i]\n    end\n    if s<0 then\n      s=s+guess[i]\n\
    \    end\n    if abs(s-g)<c then\n      c=abs(s-g)\n    end\n  end\n  local t={}\n\
    \  for i,x in ipairs(game) do\n    t[i]=c\n  end\n  for i,x in ipairs(guess) do\n\
    \    if x<0 then\n      x+=game[i]\n    end\n    t[i]=t[i]+abs(x-guess[i])\n \
    \ end\n  return t\nend", "  local results = {}\n  for i=1, #guess do\n    local\
    \ score = game[i]\n    local diff = guess - score\n    if diff ~= 0 then\n   \
    \   results[i] = diff\n    end\n  end\n  return results\nend", "\tlocal ret =\
    \ {}\n\tlocal n = #game\n\tlocal m = #guess\n\tlocal min\n\tlocal max\n\tlocal\
    \ delta\n\tlocal maxdiff\n\tlocal deltadiff", "  local n = #game\n  local m =\
    \ #guess\n  local i = 0\n  local j = 0\n  local diff = 0", "   -- base case\n\
    \   if #guess == 0 then \n      return game\n   end\n   -- recursive case\n  \
    \ local game2 = {game}\n   for i = 1, #guess do\n      -- first guess\n      local\
    \ index\n      for index, game in pairs(game2) do\n         local diff = game:sub(index,\
    \ index) - guess[i]\n         if diff > 0 then break end\n         if diff < 0\
    \ then game2 = table2.new(game2, index, index + 1) end\n      end\n      if index\
    \ == #game2 then -- not enough guesses for current score\n         game2[index]\
    \ = guess[i]\n      else\n         -- second guess\n         local index = game2[index]:find(guess[i],\
    \ 1, #game2[index])\n         if index == #game2[index] then -- not enough guesses\
    \ for current score\n            game2[index] = guess[i]\n         else\n    \
    \        -- return number of correct guesses in this row\n            -- -- NOTE:\
    \ I didn't bother to write a solution for\n            -- -- determining what\
    \ to do if they guess correctly\n            game2[index + 1] = abs(guess[i] -\
    \ game2[index]) \n         end\n      end\n   end\n   return game2\nend", "  local\
    \ gametable = {}\n  local guess_table = {}\n  local result = {}\n  for _, g in\
    \ ipairs(game) do\n    table.insert(gametable, g)\n  end\n  for _, g in ipairs(guess)\
    \ do\n    table.insert(guess_table, g)\n  end\n  for _, g in ipairs(guess_table)\
    \ do\n    if gametable[g] ~= 0 then\n      result[g] = gametable[g] - guess_table[g]\n\
    \    else\n      result[g] = -abs(gametable[g] - guess_table[g])\n    end\n  end\n\
    \  return result\nend", "  local differences = {}\n  for i=1, #guess do \n   \
    \ local score = 0\n    for j=1, #game do\n      if guess[i] == game[j] then\n\t\
    score = score + 1\n      end\n    end\n    differences[i] = score\n  end\n  --\
    \ Now find the difference in positions and return that array\n  local positions\
    \ = {}\n  for i=1, #differences do \n    positions[i] = i\n  end\n  local count\
    \ = 0\n  for i=1, #guess do \n    if differences[i] > 0 then \n      count = count\
    \ + 1\n    end\n  end\n  if count == #guess then\n    return positions\n  else\n\
    \    return positions\n  end\nend", "  local scores = {}\n  for _, v in ipairs(game)\
    \ do\n    scores[v] = game[v]\n  end\n  for _, v in ipairs(guess) do\n    scores[v]\
    \ = scores[v] or 0\n  end\n  for i, v in ipairs(scores) do\n    scores[i] = math.abs(scores[i]\
    \ - guess[i])\n  end\n  return scores\nend", "    local result = {}\n    for i=1,\
    \ #game do\n        result[i] = abs(game[i] - guess[i])\n    end\n    return result\n\
    end\n</cell>\n<cell>\n%q3", "\tlocal scores = {0, 0, 0, 0, 0}\n\tlocal correct\
    \ = 0\n\tlocal i = #game\n\tfor _, gs in pairs(guess) do\n\t\tif game[i] ~= gs\
    \ then\n\t\t\tcorrect = correct + 1\n\t\t\tscores[#scores+1] = gs - game[i]\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\tfor i = #scores, 2, -1 do\n\t\tscores[i] = abs(scores[1]\
    \ - scores[i])\n\tend\n\treturn scores\nend", "\tlocal diffs = {}\n\tfor i = 1,\
    \ #guess do\n\t\tlocal score  = game[i]\n\t\tlocal guess = guess[i]\n\t\tlocal\
    \ diff  = score-guess\n\t\tdiffs[i] = diff or 0\n\tend\n\treturn diffs\nend",
  "    local score = { }\n    local wrong = { }\n    for _, m in ipairs(game) do\n\
    \        local guessed\n        for _, n in ipairs(guess) do\n            if n\
    \ == m then\n                guessed = true\n                score[#score + 1]\
    \ = score[#score] + 1\n                break\n            end\n        end\n \
    \       table.insert(wrong, guessed)\n    end", "\tlocal difference = 0\n\tfor\
    \ i=1,#guess do\n\t\tdifference = difference + abs(guess[i]-game[i])\n\tend\n\t\
    return difference\nend", "  local diff = 0\n  local i = 0\n  for k, v in ipairs(game)\
    \ do\n    diff = diff + math.abs(v - guess[i])\n    i = i + 1\n  end\n  local\
    \ correct = 0\n  local i = 0\n  for k, v in ipairs(guess) do\n    if game[k] ==\
    \ v then\n      correct = correct + 1\n    end\n    i = i + 1\n  end\n  if correct\
    \ == #guess then\n    return {}\n  end\n  local guesses = {}\n  for i = 1, #guess\
    \ do\n    guesses[i] = guess[i] - diff\n  end\n  table.insert(guesses, diff -\
    \ guess[i])\n  return guesses\nend", "    if game.len == 0 then\n        return\
    \ guess\n    end\n    local differences = {}\n    for i = 1, game.len do\n   \
    \     differences[i] = game.scores[i] - guess[i]\n    end\n    return differences\n\
    end", "    local differences = {}\n    local scores = {}\n    local i = 0\n  \
    \  for a in game:pairs()\n        scores[a[1]] = a[2]\n    end\n    for b in guess:pairs()\n\
    \        differences[b[1]] = b[2]\n    end\n    for a in game:pairs()\n      \
    \  if scores[a[1]] == differences[b[1]] then\n            differences[b[1]] =\
    \ 0\n        else\n            differences[b[1]] = differences[b[1]] - scores[a[1]]\n\
    \        end\n    end\n    return differences\nend", "    if #game ~= #guess then\n\
    \        return nil\n    end\n    local result = {}\n    for i=1,#guess do\n \
    \       local score = game[i]\n        if score == nil or guess == nil then\n\
    \            result[i] = nil\n        else\n            result[i] = math.abs(score-guess[i])\n\
    \        end\n    end\n    return result\nend", "    local delta = {}\n    for\
    \ i = 1, #guess do delta[i] = guess[i] - game[i] end\n    local result = {}\n\
    \    for i = 1, #guess do result[i] = delta[i] > 0 and 1 or -delta[i] end\n  \
    \  return result\nend", "  local max = 0\n  local min = 999999999999999999\n \
    \ for i = 1, #guess do\n    local score = game[i]\n    local diff = abs(guess\
    \ - score)\n    if diff > max then max = diff end\n    if diff < min then min\
    \ = diff end\n  end\n  local result = {}\n  for i = 1, #guess do\n    local diff\
    \ = abs(guess - game[i])\n    if diff > max then diff = -diff end\n    if diff\
    \ < min then diff = diff end\n    result[i] = diff\n  end\n  return result\nend",
  "\tlocal diffs = {}\n\tfor i = 1, #guess do\n\t\tlocal delta = guess[i] - game[i]\n\
    \t\tif delta < 0 then\n\t\t\tdelta = delta * -1\n\t\tend\n\t\tif game[i] == guess[i]\
    \ then -- same letter\n\t\t\tdiffs[i] = 0\n\t\telse\n\t\t\tdiffs[i] = delta\n\t\
    \tend\n\tend\n\treturn diffs\nend", "\tlocal results = {}\n\tlocal max = 0\n\t\
    local maxi = 0\n\tlocal glen = 0\n\tlocal gmaxi = 0\n\tlocal g = game:keys()\n\
    \tlocal guess = guess:keys()\n\tfor i = 1, #g do\n\t\tlocal gamev = g[i]\n\t\t\
    local guessv = guess[i]\n\t\tif gamev == guessv then\n\t\t\tresults[i] = 0\n\t\
    \t\tmax = 0\n\t\t\tmax = maxi\n\t\t\tmaxi = i\n\t\t\tglen = glen + 1\n\t\telseif\
    \ gamev > guessv then\n\t\t\tresults[i] = gamev - guessv\n\t\t\tmax = max + 1\n\
    \t\t\tglen = glen + 1\n\t\telse\n\t\t\tresults[i] = guessv - gamev\n\t\t\tmax\
    \ = max + 1\n\t\t\tgmax = gmax + 1\n\t\tend\n\tend\n\tlocal m\n\tlocal k\n\tlocal\
    \ d\n\tlocal n\n\t\n\tfor i = 1, #guess do\n\t\tif results[i] ~= 0 then\n\t\t\t\
    if m == nil then\n\t\t\t\tm = max\n\t\t\t\tk = i\n\t\t\t\td = results[i]\n\t\t\
    \telse\n\t\t\t\tn = max\n\t\t\t\tk = i\n\t\t\t\td = results[i]\n\t\t\t\tm = m\
    \ * n - (max * (max - 1))\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif m == nil then\n\
    \t\treturn {0, 0, 0, 0, 0, 0}\n\telse\n\t\treturn {-d, 0, 0, d, -m, -m}\n\tend\n\
    end", "  local function diff(i, game, guess)\n    local result = 0\n    for k,\
    \ v in ipairs(game) do\n      if k == guess then return result end\n      result\
    \ = result + (v - guess[k])\n    end\n    return result\n  end\n  return table.unpack(table.map(table.unpack(table.flatten(guess,\
    \ 2), compare, game), diff))\nend", "\tlocal results = {}\n\tfor i, v in pairs(game)\
    \ do\n\t\tlocal diff = (guess[i]-v)\n\t\tresults[i] = results[i] or diff\n\tend\n\
    \treturn results\nend", '  if #game ~= #guess then return 0 end', "    local guesses\
    \ = {}\n    for _, row in ipairs(gues) do\n        local guesse = math.abs(row[1]-game[row])\n\
    \        if guesse == 0 then\n            guesses[#guesses+1] = guesse\n     \
    \   else\n            guesses[#guesses+1] = guesse\n        end\n    end\n   \
    \ return guesses\nend", "    local differences = {}\n    for i, v in ipairs(guess)\
    \ do\n        local score = game[i]\n        if score == v then\n            differences[i]\
    \ = 0\n        else\n            differences[i] = abs(v - score)\n        end\n\
    \    end\n    return differences\nend", "  local win = {}\n  for i = 1, #game\
    \ do \n    for j = 1, #guess do\n      -- if either list has more elements than\
    \ other\n      if #game[i] > #game[j] then\n        table.insert(win, guess[j]\
    \ - game[i])\n      elseif #game[i] < #game[j] then\n        table.insert(win,\
    \ game[i] - guess[j])\n      else -- if both lists have the same number of elements\
    \ and all the same elements\n        -- if guess is less than game score, guess\
    \ is wrong\n        if guess[j] < game[i] then \n          table.insert(win, -1)\n\
    \        -- if guess is more than game score, guess is wrong\n        elseif guess[j]\
    \ > game[i] then \n          table.insert(win, +inf)\n        -- if guess is equal,\
    \ compare guess\n        else \n          table.insert(win, 0 if guess[j] == game[i]\
    \ else abs(guess[j] - game[i]))\n        end\n      end\n    end\n  end\n  return\
    \ win\nend", "  local best = {'score', 'guess', 'diff'}\n  for i = 1, #guess do\n\
    \    best[i] = game[i - 1]\n  end\n  best[2] = -1\n  for i = #guess - 1, 1, -1\
    \ do\n    best[i] = best[i] + abs(game[i]-guess[i])\n  end\n  best[1] = best[1]\
    \ + guess[1]\n  best[2] = best[2] + guess[1] - game[1]\n  return best\nend", " \
    \   local diff = table.unpack(game)\n    for i, v in ipairs(guess) do\n      \
    \  if v == 0 then\n            diff[i] = 0\n        else\n            diff[i]\
    \ = abs(guess[i] - v)\n        end\n    end\n    return diff\nend", "  local result\
    \ = {}\n  for _, row in ipairs(game) do\n    for i = 1, #row do\n      if row[i]\
    \ ~= guess[i] then\n        result[#result + 1] = (math.abs(row[i] - guess[i]))\
    \ or 0\n      end\n    end\n  end\n  return result\nend", "  local guesses = guess.clone()\n\
    \  local scores = game.clone()\n  local results = {}", "    local gameLength =\
    \ #game\n    local guessLength = #guess\n    local ret = {}\n    for i = 1, gameLength\
    \ do\n        local diff = 0\n        for j = 1, guessLength do\n            if\
    \ guess[j] < game[i] then\n                diff = -1\n            elseif guess[j]\
    \ > game[i] then\n                diff = 1\n            end\n        end\n   \
    \     ret[i] = diff\n    end\n    return ret\nend", '    if #game == #guess then
    return 0 end', "  local result = {}\n  for _, v in ipairs(game) do \n    local\
    \ score = v\n    local guesses = guess[v]\n    for _, gv in ipairs(guesses) do\
    \ \n      local diff\n      if gv ~= 0 then diff = abs(gv - score) end\n     \
    \ result[#result+1] = diff or 0\n    end\n  end\n  return result\nend", "    local\
    \ diff = {}\n    for i = 1,#guess do\n        local score = (type(game)==\"table\"\
    \ and game[i]) or game[i]\n        local guess = guess[i]\n        if (score ==\
    \ guess and not guess == 0) or (score == 0 and guess == 0) then\n            diff[i]\
    \ = 0\n        else\n            diff[i] = (abs(score - guess) or guess)\n   \
    \     end\n    end\n    return diff\nend", "\tlocal differences = {}\n\tfor i\
    \ = 1, #guess do\n\t\tif guess[i] ~= game[i] then\n\t\t\tdifferences[i] = abs(guess[i]\
    \ - game[i])\n\t\telse\n\t\t\tdifferences[i] = 0\n\t\tend\n\tend\n\treturn differences\n\
    end", "  local diff\n  local diff1\n  local diff2\n  local index\n  for index=1,\
    \ #game do\n    if guess == game[index] then\n      diff = diff or 0\n      diff1\
    \ = diff1 or diff\n      diff2 = diff2 or diff\n    else\n      if diff1 == 0\
    \ then\n        diff1 = diff2\n      else\n        diff = diff1 - diff2\n    \
    \  end\n      diff2 = diff1\n      diff1 = diff\n    end\n  end\n  return diff\n\
    end", "  -- initialize values\n  local differences = {}\n  for i = 1, #guess do\n\
    \    differences[i] = game[i] - guess[i]\n  end", "  local result = {{}}\n  local\
    \ guesses = table.copy(guess)\n  for i=1, #game do -- compare each item in the\
    \ game against the guesses\n    for j=1, #guesses do -- check each guess for each\
    \ item\n      local difference = abs(guesses[j] - game[i]) -- this will be negative\
    \ if guess is too high\n      if guesses[j] < game[i] then -- guess was too low\n\
    \        difference = -difference\n      end\n      -- add up all the differences\n\
    \      result[#result + 1] = (result[#result + 1] or 0) + difference\n    end\n\
    \  end\n  -- add up all the differences\n  for i=1, #result do\n    result[#result\
    \ + 1] = (result[#result + 1] or 0) + result[i]\n  end\n  return result\nend",
  "  local scores = {}\n  for i = 1, #game do\n    scores[i] = 0\n  end\n  for i =\
    \ 1, #guess do\n    scores[#scores + 1] = game[i]-guess[i]\n  end\n  table.sort(scores,\
    \ function(a,b) return a-b end)\n  return scores\nend", "  local result = {}\n\
    \  for i = 1, #game do\n    local score = -game[i]\n    local g = -guess[i]\n\
    \    if g == 0 then g = 0 end\n    result[i] = abs(g - score)\n  end\n  return\
    \ result\nend", "    local num_matches = 0\n    local difference = {}\n    \n\
    \    for match in ipairs(game) do\n        -- If the two numbers are the same,\
    \ they are the same match. \n        if guess[match] == game[match] then\n   \
    \         num_matches = num_matches + 1\n            difference[#difference +\
    \ 1] = guess[match] - game[match]\n        else\n            -- If the two numbers\
    \ are different, they are two different matches. \n            if guess[match]\
    \ > game[match] then\n                num_matches = num_matches + 1\n        \
    \        difference[#difference + 1] = game[match] - guess[match]\n          \
    \  else\n                num_matches = num_matches + 1\n                difference[#difference\
    \ + 1] = guess[match] - game[match]\n            end\n        end\n    end", "\t\
    local guesses = unpack(guess)\n\tlocal scores = unpack(game)\n\tlocal i = 0\n\t\
    local table = {}\n\tlocal diff = 0\n\twhile i < #guess do\n\t\tif scores[i] ==\
    \ guesses[i] then\n\t\t\ttable[i] = 0\n\t\telse\n\t\t\tdiff = scores[i] - guesses[i]\n\
    \t\t\ttable[i] = math.abs(diff)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn table\n\
    end", "    local result = {} \n    local maxGuesses = #guess \n    local maxScore\
    \ = #game \n  \n    for i = 1, maxScore do\n        local maxGuess = maxGuesses\
    \ \n        local maxScore = maxScore \n  \n        if i == 1 then\n         \
    \   -- Don't worry about the absolute difference of the first guess. That will\n\
    \            -- only happen with the first guess, because it is the first guess.\
    \ \n            result[i] = 0\n        else\n            -- If the guess and game\
    \ are equal length, we are sure we haven't reached the \n            -- end of\
    \ the guesses yet. \n            if maxGuesses == #guess then\n              \
    \  result[i] = 0\n            else\n                -- We need to keep track of\
    \ how many guesses have we got. \n                maxGuesses = maxGuesses + 1\n\
    \                if guess[maxGuesses] == game[i] then\n                    --\
    \ We've found the correct guess! \n                    result[i] = 0\n       \
    \         else\n                    -- We need to subtract the difference from\
    \ the previous guesses so\n                    -- we can keep track of the amount\
    \ of differences corrected. \n                    maxGuesses = maxGuesses - 1\n\
    \                    result[i] = game[i] - guess[maxGuesses] \n              \
    \  end\n            end\n        end\n    end\n  \n    -- Add the difference in\
    \ number of guesses to the difference in the first guess. \n    result[1] = result[1]\
    \ + maxGuesses\n  \n    -- Return the difference in guesses off of the correct\
    \ guess. \n    return result\nend", "    local newGuess = {}\n    for i, val1\
    \ in enumerate(game)\n    do\n        for j, val2 in enumerate(guess)\n      \
    \  do\n            -- Don't compare the values if it's the same value\n      \
    \      if val1 == val2 then break end\n            -- Don't compare the same value\n\
    \            if game[i] == val2 then break end\n            -- If the two values\
    \ are different, compare them\n            if game[i] ~= val2 and abs(val1 - val2)\
    \ ~= game[i] - game[j] then break end\n        end\n    end\n    for _, value\
    \ in ipairs(game) do\n        newGuess[#newGuess + 1] = value\n    end\n    for\
    \ _, value in ipairs(guess) do\n        newGuess[#newGuess + 1] = value\n    end\n\
    \    return newGuess\nend", "  local scores = {}\n  for i = 1, #guess do\n   \
    \ table.insert(scores, math.abs(guess[i] - game[i]))\n  end\n  return scores\n\
    end", "  local results = {}\n  for i = 1, #guess do\n    local difference = abs(guess[i]\
    \ - game[i])\n    if difference > results[i] then\n      results[i] = difference\n\
    \    end\n  end\n  return results\nend", "\tlocal diff = {}\n\tfor i = 1, #guess\
    \ do\n\t\tdiff[i] = guess[i] - game[i]\n\tend\n\treturn diff\nend", "    local\
    \ total = 0\n    for index = 1, #game do\n        if guess[index] == game[index]\
    \ then\n            total = total + 1\n        end\n    end\n    local err = 0\n\
    \    for index = 1, #guess do\n        if guess[index] > game[index] then\n  \
    \          err = err + math.abs(guess[index] - game[index])\n        end\n   \
    \ end\n    return { total = total, err = err }\nend", "    local maxScore = game.score\n\
    \    local maxGuess = guess.max\n    local ans = {}\n    local numGuesses = 0",
  "    local guesses = {}\n    for i = 1, #guess do\n        local x = guess[i]\n\
    \        guesses[x] = guesses[x] + 1 -- track how many matches each guess has\n\
    \    end\n    local totalScore = 0\n    for i = 1, #game do\n        totalScore\
    \ = totalScore + game[i]\n    end\n    local winningIndexes = {}\n    for i =\
    \ 1, #guess do\n        local x = guess[i]\n        if guesses[x] > 0 then --\
    \ guess is correct\n            if winningIndexes[x] == nil then -- first time\
    \ we've seen this guess\n                winningIndexes[x] = i -- record the index\
    \ where the guess is correct\n            else\n                -- We found a\
    \ tie between two guesses. This can happen because we only have one correct answer.\n\
    \                -- But it can also be because the number of correct guesses exceeds\
    \ the number of correct answers. \n                -- In this case, pick a winning\
    \ guess that is less correct.\n                local winner = winningIndexes[x]\n\
    \                if winningIndexes[winner] > i then\n                    winner\
    \ = winner\n                end\n                local winningScore = game[i]\n\
    \                if winningScore > 0 then -- guess is too high\n             \
    \       winningScore = abs(winningScore - game[i])\n                end\n    \
    \            local winningIndex\n                for winningIndex = i, winningIndexes[winner]\
    \ do\n                    winningScore = winningScore - game[winningIndex]\n \
    \                   if winningScore < 0 then\n                        winningScore\
    \ = winningScore + abs(game[winner] - game[i])\n                    end\n    \
    \            end\n                if winningScore < 0 then\n                 \
    \   winningScore = abs(winningScore - game[i])\n                end\n        \
    \        winningIndexes[winner] = winningIndex\n            end\n        else\n\
    \            -- guess is wrong\n            -- Find the winning index, which also\
    \ tells us the number of correct guesses.\n            local winningScore\n  \
    \          for winningIndex = i, winningIndexes[x] do\n                winningScore\
    \ = winningScore - game[winningIndex]\n                if winningScore < 0 then\n\
    \                    winningScore = winningScore + abs(game[winner] - game[i])\n\
    \                end\n            end\n            if winningScore < 0 then\n\
    \                winningScore = abs(winningScore - game[i])\n            end\n\
    \            winningIndexes[x] = winningIndex\n        end\n    end\n    return\
    \ winningIndexes\nend", "\tlocal diffs = {}\n\tfor i = 1, #guess do\n\t\tif guess[i]\
    \ == game[i] then -- if guessed correctly\n\t\t\tdiffs[i] = 0\n\t\telse\n\t\t\t\
    diffs[i] = abs(guess[i] - game[i])\n\t\tend\n\tend\n\treturn diffs\nend", "  \
    \  local results = {}\n    for i,v in ipairs(game) do\n        table.insert(results,\
    \ v - guess[i])\n    end\n    return results\nend", "  local gameLength = #game\n\
    \  local guessLength = #guess\n  local differences = {}\n  \n  for i = 1, guessLength\
    \ do\n    if guess[i] ~= game[i] then\n      differences[i] = abs(guess[i] - game[i])\n\
    \    else\n      differences[i] = 0\n    end\n  end\n  \n  return differences\n\
    end", "    local out = {}\n    local i = 0\n    local l = #game\n    local m =\
    \ 0\n    local n = 0\n    for _, item in pairs(game) do\n        if item == guess[i]\
    \ then\n            m = m+1\n        elseif item ~= guess[i] then\n          \
    \  n = n+1\n        end\n        i = i + 1\n    end\n    if m == l then\n    \
    \    out[#out+1] = 0\n        return out\n    end\n    for i = l, 1, -1 do\n \
    \       if guess[i] ~= game[i] then\n            out[#out+1] = abs(guess[i]-game[i])\n\
    \        else\n            out[#out+1] = 0\n        end\n    end\n    return out\n\
    end", "  -- Return the differences between guess and the score for each index\
    \ in game\n  local diffs = {}\n  local bestScore = math.abs(guess[1]-game[1])\n\
    \  for i = 2, #game do\n    local score = math.abs(guess[i]-game[i])\n    if score\
    \ < bestScore then\n      bestScore = score\n    end\n    table.insert(diffs,\
    \ bestScore-score)\n  end", "  local difference = {}\n  local gameLength = #game\n\
    \  local guessLength = #guess\n  assert(gameLength == guessLength, \"game, guess\
    \ must have equal length\")\n  for i = 1, guessLength do\n    local difference\
    \ = 0\n    local index = 0\n    for j = 1, gameLength do\n      local gameScore\
    \ = game[j]\n      local guessScore = guess[i]\n      local distance = math.abs(guessScore\
    \ - gameScore)\n      if distance > difference then difference = distance end\n\
    \      index = j\n    end\n    difference[i] = difference\n  end\n  return difference\n\
    end", "    -- write your function here\n    local num_matches = 0\n    local num_correct\
    \ = 0\n    for i = 1, #game do\n        if game[i] == guess[i] then\n        \
    \    num_matches = num_matches + 1\n            if game[i] == guess[i] then\n\
    \                num_correct = num_correct + 1\n            end\n        end\n\
    \    end\n    if num_matches == #game then\n        return 0\n    elseif num_matches\
    \ == 1 then\n        return math.abs(guess - game)\n    else\n        return math.abs(guess\
    \ - game) + compare(game, guess)\n    end\nend", "    local totalScore = 0\n \
    \   for i=1,#guess do\n        local score = game[i]\n        if guess[i] == score\
    \ then\n            totalScore = totalScore + 0\n        else\n            totalScore\
    \ = totalScore + (abs(guess[i] - score))\n        end\n    end\n    return totalScore\n\
    end", "  local results = {}\n  for i = 1, #game do\n    for j = 1, #guess do\n\
    \      local diff = abs(game[i] - guess[j])\n      if game[i] == guess[j] then\n\
    \        results[i] = results[i] or 0\n        results[i] = results[i] + diff\n\
    \      else\n        results[i] = results[i] - diff\n      end\n    end\n  end\n\
    \  return results\nend", "    local results = {}\n    for k, v in pairs(game)\
    \ do\n        results[k] = v - guess[k]\n    end\n    return results\nend", " \
    \ local result = {}\n  for i = 1, #guess do\n    local difference = abs(guess\
    \ - game[i])\n    if difference ~= 0 then\n      result[#result + 1] = difference\n\
    \    end\n  end\n  return result\nend", "    local results = {}\n    for i=1,#guess\
    \ do\n        local result = false\n        if guess[i] ~= game[i] then result\
    \ = true end\n        if result then\n            table.insert(results, 0)\n \
    \       else\n            table.insert(results, math.abs(guess[i]-game[i]))\n\
    \        end\n    end\n    return results\nend", "\tlocal max = 0\n\tlocal offset\
    \ = 0\n\tlocal difference = nil\n\tfor i = 1, #game do\n\t\tif game[i] == guess[i]\
    \ then\n\t\t\toffset = offset + 1\n\t\telse\n\t\t\tif difference ~= nil then\n\
    \t\t\t\tmax = max + 1\n\t\t\tend\n\t\t\tdifference = abs(game[i] - guess[i])\n\
    \t\tend\n\tend\n\tif difference ~= nil then\n\t\tmax = max + 1\n\tend\n\treturn\
    \ max, offset\nend", "\tlocal i = 1\n\tlocal guesses = totable(guess)\n\tlocal\
    \ correct = {}\n\twhile i <= #game do\n\t\tif guesses[i] ~= game[i] then\n\t\t\
    \tcorrect[i] = abs(guesses[i] - game[i])\n\t\telse\n\t\t\tcorrect[i] = 0\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\tlocal result = {}\n\ti = 1\n\tfor k, v in pairs(correct)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend", "\tlocal scores = {table.unpack(game)}\n\tlocal\
    \ guesses = {table.unpack(guess)}\n\tlocal result = {}\n\tfor _, score in ipairs(scores)\
    \ do\n\t\tlocal best = {score}\n\t\tfor _, guess in ipairs(guesses) do\n\t\t\t\
    local diff = abs(score - guess)\n\t\t\tif diff > best[1] then\n\t\t\t\tbest =\
    \ {diff, guess}\n\t\t\tend\n\t\tend\n\t\tresult[#result + 1] = best[1]\n\tend\n\
    \treturn result\nend", "  local correct = 0\n  local wrong = 0\n  for i=1, #game\
    \ do\n    if game[i] == guess[i] then\n      correct = correct + 1\n    else\n\
    \      wrong = wrong + math.abs(guess[i] - game[i])\n    end\n  end\n  return\
    \ { wrong, correct }\nend", "\tlocal function error(err)\n\t\tprint(err)\n\t\t\
    return err\n\tend\n\tlocal function error2(err)\n\t\tprint(err)\n\t\treturn err\n\
    \tend\n\tlocal function error3(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\t\
    local function error4(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function\
    \ error5(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error6(err)\n\
    \t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error7(err)\n\t\tprint(err)\n\
    \t\treturn err\n\tend\n\tlocal function error8(err)\n\t\tprint(err)\n\t\treturn\
    \ err\n\tend\n\tlocal function error9(err)\n\t\tprint(err)\n\t\treturn err\n\t\
    end\n\tlocal function error10(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\t\
    local function error11(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function\
    \ error12(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error13(err)\n\
    \t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error14(err)\n\t\tprint(err)\n\
    \t\treturn err\n\tend\n\tlocal function error15(err)\n\t\tprint(err)\n\t\treturn\
    \ err\n\tend\n\tlocal function error16(err)\n\t\tprint(err)\n\t\treturn err\n\t\
    end\n\tlocal function error17(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\t\
    local function error18(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function\
    \ error19(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error20(err)\n\
    \t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error21(err)\n\t\tprint(err)\n\
    \t\treturn err\n\tend\n\tlocal function error22(err)\n\t\tprint(err)\n\t\treturn\
    \ err\n\tend\n\tlocal function error23(err)\n\t\tprint(err)\n\t\treturn err\n\t\
    end\n\tlocal function error24(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\t\
    local function error25(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function\
    \ error26(err)\n\t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error27(err)\n\
    \t\tprint(err)\n\t\treturn err\n\tend\n\tlocal function error28(err)\n\t\tprint(err)\n\
    \t\treturn err\n\tend\n\tlocal function error29(err)\n\t\tprint(err)\n\t\treturn\
    \ err\n\t", "  local winner = compare_by_key(game, function(game, key)\n    local\
    \ score = game[key]\n    local guess = guess[key]\n    if guess == nil then\n\
    \      guess = 0\n    end\n    return abs(guess - score)\n  end)\n  if winner\
    \ == nil then\n    winner = 0\n  end\n  return winner\nend", "    local ret =\
    \ {}\n    for i=1,#guess do\n        ret[i] = abs(guess[i] - game[i])\n    end\n\
    \    return ret\nend", "  local gamelen = #game\n  local guesslen = #guess\n \
    \ local comp = {}\n  for i = 1, guesslen do\n    comp[i] = -game[gamelen + i]\n\
    \  end\n  for i = 1, gamelen do\n    comp[i] = guess[guesslen + i] - game[i]\n\
    \  end\n  return comp\nend", "\tlocal guesses = {}\n\tfor _, p in ipairs(guess)\
    \ do\n\t\tguesses[p] = true\n\tend\n\tlocal scores = {}\n\tfor _, s in ipairs(game)\
    \ do\n\t\tscores[p] = s\n\tend\n\tlocal results = {}\n\tfor _, p in ipairs(guess)\
    \ do\n\t\tif guesses[p] then\n\t\t\tresults[p] = 0\n\t\telse\n\t\t\tlocal diff\
    \ = abs(guess[p] - scores[guess])\n\t\t\tresults[p] = diff\n\t\tend\n\tend\n\t\
    return results\nend", "    local correct = {}\n    for i=1,#guess do\n       local\
    \ diff = abs(guess[i]-game[i])\n       if diff ~= 0 then return nil end\n    \
    \   correct[i] = 0\n    end\n    return correct\nend", "  local maxScore = game[1]\n\
    \  local minScore = game[2]\n  local scores = {}\n  for i = 1, #guess do\n   \
    \ if guess[i] < minScore then minScore = guess[i] end\n    if guess[i] > maxScore\
    \ then maxScore = guess[i] end\n  end\n  for i = 1, #guess do\n    local score\
    \ = minScore - maxScore + guess[i]\n    if scores == nil or scores[i] ~= score\
    \ then\n      scores[i] = score\n    end\n  end\n  return scores\nend", "    local\
    \ score = { }\n    local correct = 0 -- number of correctly guessed guesses\n\
    \    local scores = {} -- score for each guess (table of lists)\n    local corrects\
    \ = {}; -- guess that was correct\n    local i = #game, 1 -- initialize index\n\
    \    while i do\n        local guessed = game[i]\n        if guessed:len() < guess:len()\
    \ then\n            i = i + 1\n        else\n            local j = #guess, 1 --\
    \ initialize index\n            while j do\n                local score = abs(guess[j]\
    \ - guessed[j])\n                score[#score+1] = score\n                if guess[j]\
    \ == guessed then -- increment the correct guesses\n                    correct\
    \ = correct + 1\n                end\n                if guess[j] > guessed then\
    \ -- if the guessed is greater than the guess, increment the guess list\n    \
    \                guess[#guess+1] = guess[j]\n                elseif guess[j] <\
    \ guessed then -- if the guessed is less than the guess, increment the guess list\n\
    \                    guess[#guess+1] = guess[j]\n                end\n       \
    \         j = j + 1\n            end\n            local k = #scores, 1 -- initialize\
    \ index\n            while k do\n                scores[k][#scores[k]]= scores[k][#scores[k]]\
    \ + correct\n                k = k + 1\n            end\n            local min\
    \ = 1 -- minimum score to correct\n            for i = 1, #scores do\n       \
    \         if scores[i][#scores[i]] < min then\n                    min = scores[i][#scores[i]]\
    \ -- minimum score to correct\n                    corrects[i] = true\n      \
    \          end\n            end\n            if correct == #corrects then -- return\
    \ a list of wrong guesses\n                return {-correct, guess:len()}\n  \
    \          elseif correct == #scores then -- return a list of wrong guesses\n\
    \                return {-correct, guess:len()}\n            elseif correct >\
    \ #scores then -- return a list of correct guesses\n                local j =\
    \ 1\n                while j <= correct do -- return a list of correct guesses\n\
    \                    local sum = 0 -- sum to correct guesses\n               \
    \     local k = 1\n                    while k <= #scores do -- sum to correct\
    \ guesses\n                        sum = sum + scores[k][j]\n                \
    \        k = k + 1\n                    end\n                    guess[j] = sum\n\
    \                    j = j + 1\n                end\n            elseif correct\
    \ < #scores then -- return a list of correct guesses\n                local j\
    \ = 1\n                while j <= correct do -- return a list of correct guesses\n\
    \                    guess[j] = -scores[j][1]\n                    j = j + 1\n\
    \                end\n            end\n        end\n    end", "  local guesses\
    \ = {}\n  local scores = {}", "  local guesses = {}\n  for i = 1, #guess do guesses[i]\
    \ = guess[i] end\n  local result = {}\n  local scores = {}\n  for i = 1, #game\
    \ do scores[i] = game[i] end\n  for i = 1, #guesses do\n    local score = scores[i]\n\
    \    if guesses[i] == score then\n      table.insert(result, 0)\n    else\n  \
    \    table.insert(result, score-guesses[i])\n    end\n  end\n  return result\n\
    end", "  local scores = {}\n  for _, match in pairs(game) do scores[_] = match\
    \ end\n  local guessed = {}\n  for _, match in pairs(guess) do guessed[_] = match\
    \ end\n  local out = {}\n  for _, match in pairs(game) do\n    local score = 0\n\
    \    for _, match in pairs(scores) do\n      if match == match then\n        score\
    \ = score + 1\n      else\n        if guessed[match] == nil then\n          score\
    \ = score + 1\n        else\n          local distance = math.abs(guessed[match]\
    \ - match)\n          if distance > score then\n            score = distance\n\
    \          end\n        end\n      end\n    end\n    if score > out[_] then\n\
    \      out[_] = score\n    end\n  end\n  return out\nend", "\tlocal result = {}\n\
    \tlocal winner = false\n\tfor i, v in ipairs(game) do\n\t\tlocal diff = v - guess[i]\n\
    \t\tif diff ~= 0 and diff > 0 and diff < 0 then\n\t\t\twinner = true\n\t\t\tresult[i]\
    \ = v\n\t\telseif diff == 0 then\n\t\t\tresult[i] = 0\n\t\tend\n\tend", "\tgame\
    \ = game:map(function (x) return tonumber(x) end)\n\tguess = guess:map(function\
    \ (x) return tonumber(x) end)\n\tlocal correct, wrong, distance, guessed\n\tlocal\
    \ size = #game, #guess\n\tlocal i, j, k, m\n\tlocal game2 = table()\n\tlocal guess2\
    \ = table()\n\tlocal gameScore = game:clone()\n\tlocal guessScore = guess:clone()\n\
    \t-- TODO: optimize me!\n\t-- TODO: optimize me!\n\t-- TODO: optimize me!\n\t\
    local gameScore2 = gameScore:clone()\n\tlocal guessScore2 = guessScore:clone()\n\
    \tlocal correct = guessed = 0\n\tlocal incorrect = #game:max() + 1\n\tfor i=1,\
    \ #game2 do\n\t\tcorrect = correct + gameScore2[i]\n\tend\n\tfor i=1, #guess2\
    \ do\n\t\tguessed = guessed + guessScore2[i]\n\tend\n\tlocal results = {}\n\t\
    for i=1,#game2 do\n\t\tfor j=1,#guess2 do\n\t\t\tif i == j then\n\t\t\t\t-- TODO:\
    \ optimize me!\n\t\t\t\t-- TODO: optimize me!\n\t\t\t\tresults[#results+1] = incorrect\n\
    \t\t\telse\n\t\t\t\tif guess2[j] ~= game2[i] then\n\t\t\t\t\t-- TODO: optimize\
    \ me!\n\t\t\t\t\t-- TODO: optimize me!\n\t\t\t\t\tresults[#results+1] = abs(guess2[j]\
    \ - game2[i])\n\t\t\t\telse\n\t\t\t\t\t-- TODO: optimize me!\n\t\t\t\t\t-- TODO:\
    \ optimize me!\n\t\t\t\t\tresults[#results+1] = 0\n\t\t\t\tend\n\t\t\t\t-- TODO:\
    \ optimize me!\n\t\t\t\t-- TODO: optimize me!\n\t\t\tend\n\t\tend\n\tend\n\tresults[1]\
    \ = correct - guessed\n\treturn results\nend", "\tlocal diffs = {}\n\tlocal maxScore\
    \ = game[1]\n\tfor _, g in pairs(guess) do\n\t\tlocal s = game[g]\n\t\tif s ==\
    \ nil then\n\t\t\treturn diffs\n\t\tend\n\t\tdiffs[g] = math.abs(s - maxScore)\n\
    \tend\n\tfor _, g in pairs(game) do\n\t\tif diffs[g] == nil then\n\t\t\tdiffs[g]\
    \ = 0\n\t\tend\n\tend\n\treturn diffs\nend", "   local scores = {} -- scores for\
    \ every index\n   local guesses = {} -- guesses for every index\n   local i =\
    \ 0\n   for key, value in pairs(game) do\n      scores[i] = value\n      guesses[i]\
    \ = guess[key]\n      i = i + 1\n   end\n   local j = 0\n   for i, value in ipairs(scores)\
    \ do\n      scores[i] = scores[i] - guesses[j]\n      if scores[i] < 0 then\n\
    \         return scores\n      end\n      j = j + 1\n   end\n   return scores\n\
    end", "    assert(#game == #guess)\n    local result = {}\n    for _, index in\
    \ pairs(game) do\n        local diff = abs(index - guess[index])\n        if diff\
    \ == 0 then\n            result[index] = 0\n        else\n            result[index]\
    \ = diff\n        end\n    end\n    return result\nend", "    local gameLen =\
    \ #game\n    local gameScores = {}\n    for i = 1, gameLen do\n        gameScores[i]\
    \ = 0\n    end\n    local guessLen = #guess\n    local guessScores = {}\n    for\
    \ i = 1, guessLen do\n        guessScores[i] = 0\n    end\n    for i = 1, guessLen\
    \ do\n        local winner = game[i] == guess[i] and 1 or -1\n        gameScores[winner]\
    \ += 1\n    end\n    for i = 1, gameLen do\n        local winner = game[i] ==\
    \ guess[i] and 1 or -1\n        guessScores[winner] += 1\n    end\n    local winner\
    \ = #gameScores == 1 and 1 or #guessScores == 1 and 1 or 0\n    return winner\
    \ * winner\nend", "    local maxScore = math.max(table.max(game), table.max(guess))\n\
    \    local minScore = math.min(table.min(game), table.min(guess))\n    local diff\
    \ = {}\n    for i = 1, #guess do\n        diff[i] = abs(guess[i] - game[i])\n\
    \    end\n    for i = #guess, 1, -1 do\n        diff[i] = -diff[i]\n    end\n\
    \    for i = 1, #diff do\n        diff[i] = diff[i] / maxScore\n    end\n    return\
    \ diff\nend", "    local sum = {}\n    for i = 1, #guess do\n        if game[i]\
    \ ~= guess[i] then\n            sum[i] = abs(game[i] - guess[i])\n        else\n\
    \            sum[i] = 0\n        end\n    end\n    return sum\nend", "  local\
    \ results = {}\n  for _, value in ipairs(game) do\n    local minDistance = math.abs(guess[value]\
    \ - value)\n    local maxDistance = math.abs(guess[value] - value)\n    for _,\
    \ i in ipairs(guess) do\n      local difference = math.abs(guess[value] - value)\n\
    \      local distance\n      if difference == 0 then\n        distance = 0\n \
    \     elseif difference < 0 then\n        distance = difference * -1\n      else\n\
    \        distance = difference\n      end\n      if distance < minDistance then\n\
    \        minDistance = distance\n      end\n      if distance > maxDistance then\n\
    \        maxDistance = distance\n      end\n    end\n    results[value] = maxDistance\
    \ - minDistance\n  end\n  return results\nend", "  local result = {}\n  for i\
    \ = 1, #game do\n    local winner = false\n    for j = 1, #guess do\n      local\
    \ difference = abs(game[i] - guess[j])\n      if difference == 0 then\n      \
    \  difference = 1\n      end\n      if game[i] == guess[j] then\n        winner\
    \ = true\n      end\n      result[i] = result[i] + difference\n    end\n    if\
    \ winner then\n      result[i] = 0\n    end\n  end\n  return result\nend", " \
    \ -- Write your comparison function here\n  local differences = {}\n  for i =\
    \ 1, #game do\n    local scoreDifference = guess[i] - game[i]\n    if scoreDifference\
    \ ~= 0 then\n      table.insert(differences, scoreDifference)\n    end\n  end\n\
    \  return differences\nend", "\tlocal out = {}\n\tfor _, v in ipairs(game) do\n\
    \t\tlocal score = 0\n\t\tfor i, _ in ipairs(guess) do\n\t\t\tif v == guess[i]\
    \ then\n\t\t\t\tscore = 0\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tscore = score +\
    \ 1\n\t\t\tend\n\t\tend\n\t\tout[v] = score\n\tend\n\treturn out\nend", "    local\
    \ differences = {}\n    for _, gameScore in ipairs(game) do\n        for _, guessScore\
    \ in ipairs(guess) do\n            local difference = abs(guessScore - gameScore)\n\
    \            if guessScore == gameScore then\n                difference = 0\n\
    \            end\n            table.insert(differences, difference)\n        end\n\
    \    end\n    return table.concat(differences, \"\")\nend", "  local wins = 0\n\
    \  local loses = 0\n  local errs = 0\n  for i = 1, #game do\n    if game[i] ==\
    \ guess[i] then\n      wins = wins + 1\n    elseif game[i] > guess[i] then\n \
    \     errs = errs + 1\n    else\n      loses = loses + 1\n    end\n  end\n  return\
    \ wins, loses, errs\nend", "    local scores = {}\n    local matches = {}\n  \
    \  local i = 1\n    while true do\n        -- add a new score for this guess to\
    \ the table of scores\n        scores[i] = game[i]\n        matches = i\n    \
    \    i = i + 1\n    end\n    -- we know how many matches this person got right\n\
    \    local num_matches = #scores\n    local num_guesses = #guess\n    local differences\
    \ = {}\n    local i = 1\n    while i <= num_guesses do\n        -- add a new score\
    \ for this guess to the table of scores\n        scores[i] = guess[i]\n      \
    \  -- check if the guess is correct for this match\n        if scores[i] == scores[i-1]\
    \ then\n            -- this guess was right for this match\n            differences[i]\
    \ = 0\n        else\n            -- this guess was wrong for this match\n    \
    \        differences[i] = abs(scores[i] - scores[i-1])\n        end\n        i\
    \ = i + 1\n    end\n    -- we know how many matches this person got right\n  \
    \  local num_matches = #scores\n    local num_guesses = #guess\n    -- create\
    \ an array that we can use to return our result\n    local results = {}\n    for\
    \ i=1,num_guesses do\n        -- add the difference for this guess at this index\
    \ to the results table\n        results[i] = differences[i]\n    end\n    -- return\
    \ the result\n    return results\nend", "    local diff = nil\n    for i = 1,\
    \ #game do\n        if guess ~= game[i] then\n            diff = diff or guess[i]\
    \ - game[i]\n        end\n    end\n    return diff or 0\nend", "\tlocal diff =\
    \ {}\n\t-- First create a list of all unique scores to compare.\n\tlocal scores\
    \ = {}\n\tfor i = 1, #game do\n\t\ttable.insert(scores, game[i])\n\tend\n\t--\
    \ Create a set of all unique guesses to compare.\n\tlocal guesses = {}\n\tfor\
    \ i = 1, #guess do\n\t\ttable.insert(guesses, guess[i])\n\tend\n\t-- Use a set\
    \ to remove duplicate guesses.\n\t-- Use a set to remove duplicate scores.\n\t\
    -- Then iterate through the scores and guesses and add together the difference.\n\
    \tfor i = 1, #scores do\n\t\tfor j = 1, #guesses do\n\t\t\tdiff[j] = diff[j] +\
    \ abs(guesses[j] - scores[i])\n\t\tend\n\tend\n\treturn diff\nend", "  local correct\
    \ = nil\n  local incorrect = nil\n  \n  local maxGuesses = #guess\n  \n  for i\
    \ = 1, maxGuesses do\n    -- see if any of our guesses match our score\n    if\
    \ guess == game[i] then\n      correct = correct + 1\n    else\n      -- see if\
    \ any of our guesses don't match our score\n      for j = 1, maxGuesses do\n \
    \       if j == i then\n          -- if our guess matches, that means it must\
    \ be wrong\n          incorrect = incorrect + 1\n        elseif guess ~= game[j]\
    \ then\n          -- if our guess doesn't match, that means it must be right\n\
    \          incorrect = incorrect + 1\n        end\n      end\n    end\n  end\n\
    \  \n  if correct == maxGuesses then\n    -- if guess matches the score then we\
    \ assume that they guess correctly\n    return { 0, 0, 0, 0, 0, 0 }\n  else\n\
    \    -- otherwise calculate the distance between our guess and score and return\n\
    \    -- a table that has these elements:\n    --   0 - how far off our guess was\n\
    \    --   1 - how far off our guess was from the score\n    --   2 - how far off\
    \ our guess was from the score at the second guess (if there is one)\n    -- \
    \  3 - how many guesses did we run through to get the answer\n    --   4 - how\
    \ many guesses did we run through until we got the right answer\n    -- This should\
    \ produce a table that looks like this:\n    --   {0, 0, 0, 0, 0, 0}\n    -- ...\
    \ or this:\n    --   {4, 4, 1, 0, 0, 6}\n    return { \n      0,\n      incorrect\
    \ - correct, \n      incorrect - correct, \n      maxGuesses, \n      maxGuesses\n\
    \    }\n  end\nend", "    local scores = {}\n    local i = 0\n    for _, v in\
    \ ipairs(game) do\n        scores[i] = v\n        i = i + 1\n    end\n    local\
    \ results = {}\n    local n = 0\n    local c = 0\n    for _, v in ipairs(guess)\
    \ do\n        if scores[n] == v then\n            results[c] = v\n           \
    \ c = c + 1\n        end\n        n = n + 1\n    end\n    return results\nend\n\
    </cell>\n<text>\nExercise 14\nWrite a function to determine if a person correctly\
    \ guessed the results of a number of matches.", "  local score = { } -- a dictionary\
    \ of scores to each player\n  for i = 1, #game do -- loop through each index\n\
    \    -- if they are the same player, give it a value of 0\n    if not guess[i]\
    \ then score[#score+1] = 0 end\n    -- otherwise give it a value of the difference\
    \ between the score and the guess\n    score[#score+1] = score[#score+1] + abs(game[i]\
    \ - guess[i])\n  end\n  return score\nend", "\tlocal result = {}\n\t\n\t-- The\
    \ below is just a way to simplify the process. \n\t-- It is not meant to be more\
    \ efficient or readable. \n\t\n\t-- Get a list of all guesses in the game table\
    \ and sort by their index\n\tlocal guesses = table.sort(game)\n\t\n\t-- For each\
    \ guess, get its index in the guess table and subtract that from the game table\n\
    \t-- to get the score.\n\tfor i=1,#guess do\n\t\tlocal index = guesses[i]\n\t\t\
    \n\t\t-- The below is just a way to simplify the process. \n\t\t-- It is not meant\
    \ to be more efficient or readable. \n\t\t\n\t\t-- Calculate the difference between\
    \ the score and the guess (minus the index offset)\n\t\t-- to get the correct\
    \ value.\n\t\tlocal score = table.unpack(game)[index] - guess[index]\n\t\t\n\t\
    \t-- Add the value to the result table.\n\t\ttable.insert(result, score)\n\tend\n\
    \t\n\t-- Return the score for each guess\n\treturn result\nend", "  local diff\
    \ = {}\n  for _, score in ipairs(game) do\n    local gscore = nil\n    if guess\
    \ then\n      gscore = guess[_]\n    end\n    diff[_] = abs(score - gscore)\n\
    \  end\n  return diff\nend", "  game = game or {}\n  guess = guess or {}\n  local\
    \ gameLen = #game\n  local guessLen = #guess\n  local newTable = {}", "   -- Check\
    \ base case:\n   if #game == #guess then\n      return {}\n   end", "    local\
    \ result = {}\n    for _, score in ipairs(game) do\n        local diff = math.abs(guess\
    \ - score)\n        if guess == score then\n            result[#result + 1] =\
    \ 0\n        else\n            result[#result + 1] = diff\n        end\n    end\n\
    \    return result\nend", "    local results = {}\n    for i, match in pairs(game)\
    \ do\n        if guess[i] ~= match then\n            results[i] = abs(guess[i]\
    \ - match)\n        else\n            results[i] = 0\n        end\n    end\n \
    \   return results\nend", "  local result = {}\n  for i=1,#game do\n    -- if\
    \ we got here, there were no matches in the first table\n    if game[i] then\n\
    \      -- if we got here, there are matches in the first table\n      -- we see\
    \ if the guess is right\n      if guess[i] == game[i] then\n        -- we got\
    \ here if the guess was correct\n        result[i] = 0\n      else\n        --\
    \ if we got here, guess wasn't right\n        result[i] = abs(guess[i] - game[i])\n\
    \      end\n    end\n  end\n  return result\nend", "  local results = {}\n  local\
    \ guesses = { }\n  for i = 1, #guess do\n    guesses[#guesses+1] = guess[i]\n\
    \  end\n  for i = 1, #game do\n    local score = game[i]\n    local guess = guesses[#guesses]\n\
    \    if score > guess then\n      results[#results+1] = 0\n    else\n      results[#results+1]\
    \ = score - guess\n    end\n  end\n  return results\nend", "\tlocal differences\
    \ = {}\n\tfor i = 1, #guess do\n\t\tlocal diff = math.abs(guess[i] - game[i])\n\
    \t\ttable.insert(differences, diff)\n\tend\n\ttable.sort(differences)\n\tlocal\
    \ minDiff = differences[1]\n\tlocal maxDiff = differences[#differences]\n\treturn\
    \ {\n\t\tminDiff = minDiff,\n\t\tmaxDiff = maxDiff\n\t}\nend", "\t-- Initialize\
    \ the return table\n\tlocal ret = {}\n\tlocal game = game\n\tlocal guess = guess\n\
    \t\n\t-- Loop through all indexes in both tables\n\tlocal i\n\tfor i = 1, #game\
    \ do\n\t\t-- Record the difference between the guess and the score\n\t\tret[i]\
    \ = abs(guess[i] - game[i])\n\tend", "  local scores = {}\n  local diff = {}\n\
    \  for i = 1, #guess do\n    local score = game[i]\n    local guess = guess[i]\n\
    \    diff[i] = abs(guess - score)\n    if diff > 0 then\n      scores[i] = score\n\
    \    else\n      scores[i] = guess\n    end\n  end\n  table.sort(scores)\n  local\
    \ correct = #scores\n  local offset = 0\n  for i = 1, #guess do\n    offset =\
    \ offset + scores[i] - scores[i-1]\n    if guess == scores[i] then\n      offset\
    \ = offset + correct\n    end\n  end\n  return diff\nend", "  local wins = 0\n\
    \  local losses = 0\n  local guesses = 0", "    -- Your code here!\nend", "  \
    \  local correct = 0 -- A counter of how many of the guesses we match\n    local\
    \ guess = guess\n    local game = game\n    local result = {} -- A table of scores\
    \ showing how far off each guess", "\tlocal differences = {}\n\tfor i = 1, #guess\
    \ do\n\t\tlocal difference = math.abs(game[guess[i]] - guess[i + 1])\n\t\tlocal\
    \ score = game[guess[i]]\n\t\tif score == 0 then\n\t\t\tdifference = math.abs(guess[i]\
    \ - score)\n\t\t\tscore = game[score]\n\t\tend\n\t\tdifferences[guess[i]] = difference\n\
    \tend\n\treturn differences\nend", "    local sum = 0\n    for _, i in ipairs(game)\
    \ do\n        sum = sum + abs(guess[i] - game[i])\n    end\n    return sum\nend",
  "    local results = {}\n    for i=1,#guess do\n        local score = 0\n      \
    \  for j=1,#game do\n            if game[j] == guess[i] then \n              \
    \  score = score + 1\n            end\n        end\n        if score == #guess\
    \ then results[i] = 0 else results[i] = score - guess\n    end\n    return results\n\
    end", "  local scores = {}\n  local n = #game\n  for i = 1,n do scores[i] = game[i]\
    \ end\n  \n  local guesses = {}\n  n = #guess\n  for i = 1,n do guesses[i] = guess[i]\
    \ end", "    assert(#guess == #game)\n    return map((function(x, y)\n       \
    \ local i1, i2 = 1, #guess\n        while i1 <= i2 do\n            local v = (guess\
    \ == game[i1] and 0 or (abs(x - game[i2])))\n            i1, i2 = i1+1, i2+1\n\
    \            return v\n        end\n    end), game, guess)\nend", "  local result\
    \ = {}\n  for i = 1, #guess do result[i] = 0 end\n  for i = 1, #game do\n    local\
    \ score = game[i]\n    for j = 1, #guess do\n      local guess = guess[j]\n  \
    \    if guess == score then\n        result[j] = 0\n      else\n        local\
    \ err = abs(guess - score)\n        result[j] = err\n      end\n    end\n  end\n\
    \  return result\nend", "    local winner = true\n    local diffs = false\n  \
    \  local errors = {}\n    for i = 1, #game do\n        if game[i] ~= guess[i]\
    \ then\n            winner,diffs = winner, diffs or guess[i] > game[i]\n     \
    \   else\n            winner,diffs = winner, diffs or guess[i] == game[i]\n  \
    \      end\n        if not diffs then\n            errors[i] = errors[i] or 0\n\
    \            errors[i]--\n        end\n    end\n    local results = {}\n    for\
    \ i = 1, #guess do\n        results[i] = winner\n    end\n    for i = #errors,\
    \ 1, -1 do\n        results[i] = winner\n    end\n    return results\nend", " \
    \ local result = {}\n  for i = 1, #guess do\n    local score = game[i]\n    local\
    \ guess = guess[i]\n    local diff = -abs(guess - score)\n    if diff == 0 then\n\
    \      result[i] = 0\n    else\n      result[i] = diff\n    end\n  end\n  return\
    \ result\nend", "    if #game ~= #guess then\n        error(\"the number of guesses\
    \ must be equal to the number of scores\")\n    end", "  local gameLength = #game\n\
    \  local guessLength = #guess\n  local gamePos = 1\n  local guessPos = 1\n  local\
    \ gameScores = {}\n  local guessScores = {}\n  local score = 0\n  \n  -- Go through\
    \ each guess in the guess table\n  for _ in guessLength do\n    -- Add up the\
    \ score for all the possible game-guess pairings.\n    gameScores[gamePos] = game[gamePos]\
    \ + game[gamePos]\n    gameScores = util.pairs(gameScores)\n    guessScores[guessPos]\
    \ = guess[guessPos] + guess[guessPos]\n    guessScores = util.pairs(guessScores)\n\
    \    -- If the guess is correct, add one to score\n    if guess[guessPos] == game[gamePos]\
    \ then\n      score = score + 1\n    end\n    -- Move on to the next guess\n \
    \   guessPos = guessPos + 1\n  end\n  \n  return score\nend", "  local result\
    \ = {}\n  for i = 1, #guess do\n    local score = 0\n    for j = 1, #game do\n\
    \      if game[j] == guess[i] then\n        score = score + 1\n      end\n   \
    \ end\n    if score == #guess then\n      result[i] = 0\n    else\n      result[i]\
    \ = abs(score - #game)\n    end\n  end\n  return result\nend", "  game = game:gsub(\"\
    %+\", function (x)\n    if x == \"\" then return \"\" end\n    local result =\
    \ {}\n    for j = 1, x:len() do\n      table.insert(result, x:sub(1, j):todigit()-y:sub(1,\
    \ j):todigit())\n    end\n    return table.concat(result)\n  end)\n  guess = guess:gsub(\"\
    %+\", function (x)\n    if x == \"\" then return \"\" end\n    local result =\
    \ {}\n    for j = 1, x:len() do\n      table.insert(result, x:sub(1, j):todigit()-y:sub(1,\
    \ j):todigit())\n    end\n    return table.concat(result)\n  end)\n  local delta\
    \ = #guess", "  local gameTable = table.join(game, guess)\n  local i = 0\n  local\
    \ gameTableLength = #gameTable\n  local guesses = {}\n  local scores = {}\n  while\
    \ i < gameTableLength do\n    guesses[i] = guesses[i] or 0\n    scores[i] = scores[i]\
    \ or 0\n    i = i + 1\n  end\n  for i=1, #gameTable do\n    scores[i] = abs(gameTable[i]\
    \ - guesses[i])\n  end\n  return scores\nend", "    local correct\n    for i,\
    \ _ in pairs(game) do\n        if game[i] == guess[i] then correct = i+1 end\n\
    \    end\n    return { [0] = {} or guess, for i, _ in pairs(game) do\n       \
    \ if correct ~= -1 then return 0, guess[i] - game[i] end\n    end}\nend", "  \
    \  local function game(score)\n        -- if the guesses and scores have the same\
    \ length, this means they have equal length\n        -- scores and guesses, otherwise\
    \ the scores are shorter than the guesses\n        assert(#guess and #score ==\
    \ #game, \"Mismatched lengths. Guesses must match scores\")", "    local results\
    \ = {}\n    local max_score = -1000\n    for i = 1, #game do\n        local score\
    \ = game[i]\n        local guess = guess[i]\n        if score ~= max_score then\n\
    \            results[i] = abs(score - guess)\n        else\n            results[i]\
    \ = 0\n        end\n    end\n    return results\nend", "    local result = {}\n\
    \    for i = 1, #guess do\n        result[i] = guess[i] - game[i]\n    end\n \
    \   return result\nend", "    local total = 0\n    local i = 1\n    while i <=\
    \ #guess do\n        local result = game:sub(i, i)\n        if guess[i] ~= result\
    \ then\n            total = total + (result - guess[i])\n        else\n      \
    \      total = total + 0\n        end\n        i = i + 1\n    end\n    return\
    \ total\nend", "    assert(type(game) == \"table\" and type(guess) == \"table\"\
    )\n    local correct = {}\n    for i = 1, #game do\n        local score = game[i]\n\
    \        local guess = guess[i]\n        if guess == score then\n            correct[i]\
    \ = 0\n        else\n            correct[i] = abs(guess - score)\n        end\n\
    \    end\n    return correct\nend", "    if #game == #guess then return nil end\n\
    \    local gameTable = {}\n    for i = 0, #game do\n        gameTable[i] = game[i]\n\
    \    end\n    local guessTable = {}\n    for i = 0, #guess do\n        guessTable[i]\
    \ = guess[i]\n    end\n    local answer\n    for i = 0, #guess do\n        local\
    \ gameScore = gameTable[i]\n        local guessScore = guessTable[i]\n       \
    \ local diff = abs(guessScore - gameScore)\n        if diff == 0 then\n      \
    \      answer = {0, 0, 0, 0, 0}\n        else\n            answer = {0, 0, 0,\
    \ 0, diff}\n        end\n    end\n    return answer\nend", "\tlocal correct =\
    \ game:length() == guess:length()\n\tlocal differences = {}\n\tfor _, v in ipairs(game)\
    \ do\n\t\tlocal correct = game:index(v) == guess:index(v)\n\t\tif not correct\
    \ then\n\t\t\tdifferences[v] = abs(v - guess[v])\n\t\tend\n\tend\n\treturn {correct,\
    \ differences}\nend", "  local results = {}\n  local correct = 0\n  for _, row\
    \ in ipairs(game) do\n    local score = 0\n    for _, val in ipairs(row) do\n\
    \      if val == guess[row] then \n\tscore = score + 1\n      elseif val > guess[row]\
    \ then\n\tbreak\n      else\n\tbreak\n      end\n    end\n    if score == row[1]\
    \ then\n      correct = correct + 1\n    end\n    results[#results + 1] = {score,\
    \ row[1]}\n  end\n  return results\nend", "    local scores = {}\n    local total\
    \ = 0\n    for i = 1, #guess do\n        scores[i] = guess[i]\n        total =\
    \ total + scores[i]\n    end\n    for i = 1, #game do\n        scores[i] = game[i]\n\
    \        total = total - scores[i]\n    end\n    local out = {}\n    for i, v\
    \ in pairs(scores) do\n        if v > 0 then\n            out[i] = v\n       \
    \ else\n            out[i] = abs(guess[i] - v)\n        end\n    end\n    return\
    \ table.concat(out)\nend", "\tlocal ret = {}\n\tfor i = 1, #game do\n\t\tlocal\
    \ diff = abs(game[i] - guess[i])\n\t\tif game[i] == guess[i] then\n\t\t\tdiff\
    \ = 0\n\t\tend\n\t\tret[i] = diff\n\tend\n\treturn ret\nend", "    local correct\
    \ = {}\n    for _, v in pairs(game) do\n        table.insert(correct, v)\n   \
    \ end\n    for _, v in pairs(guess) do\n        table.insert(correct, v)\n   \
    \ end\n    return table.concat(correct, \"-\", true)\nend", "    assert(type(game)\
    \ == 'table')\n    assert(type(guess) == 'table')\n    assert(#game == #guess)\n\
    \    local ret = {}\n    for i = 1, #guess do\n        local diff = math.abs(game[i]\
    \ - guess[i])\n        if diff ~= 0 then\n            ret[#ret + 1] = diff\n \
    \       end\n    end\n    return ret\nend", "    assert(#game == #guess)\n   \
    \ local diff = {}\n    for i, v in pairs(game) do\n        diff[i] = v - guess[i]\n\
    \    end\n    return diff\nend", "    local result = {}\n    for k, v in pairs(game)\
    \ do\n        if guess[k] == v then\n            result[v] = 0\n        else\n\
    \            result[v] = abs(guess[k] - v)\n        end\n    end\n    return result\n\
    end", "    assert(#game == #guess)\n    local wins = {0, 0, 0, 0, 0}\n    local\
    \ i = 0\n    for _, score in ipairs(game) do\n        local diff = guess - score\n\
    \        wins[i] = diff\n        i = i + 1\n    end\n    return wins\nend", " \
    \ local diff = { }\n  for i = 1, #guess do\n    local guess = game[i]\n    local\
    \ score = game[(i + #game) .. #game]\n    local result = guess:distance(score)\n\
    \    if guess == score then -- same answer\n      diff[i] = 0\n    else\n    \
    \  diff[i] = abs(guess - score)\n    end\n  end\n  return diff\nend", "  local\
    \ numGuesses = #guess\n  local numScores = #game\n  if numGuesses == numScores\
    \ then\n    return guess, nil, nil\n  end\n  local differences = {}\n  for i =\
    \ 1, numGuesses do\n    local guess = guess[i]\n    local score = game[i]\n  \
    \  local difference = abs(guess - score)\n    if guess == score then\n      differences[i]\
    \ = difference\n    else\n      differences[i] = difference\n      differences[i\
    \ + 1] = differences[i]\n    end\n  end\n  return differences, differences, nil\n\
    end", "    local results = {}\n    for i, g in enumerate(guess)\n        local\
    \ s = game[i]\n        if s == nil then\n            results[i] = nil\n      \
    \  else\n            results[i] = abs(s - g)\n        end\n    end\n    return\
    \ results\nend", "  local result = {}\n  for i = 1, #game do result[i] = 0 end\n\
    \  for i = 1, #guess do result[i] = abs(guess[i]-game[i]) end\n  return result\n\
    end", "  -- The empty set is false, so we know any score is positive.\n  local\
    \ scores = {} -- This is {score, wins}.\n  for _, row in ipairs(game) do\n   \
    \ scores[#scores + 1] = row[1] > row[2] and 1 or row[1]\n  end\n  for _, row in\
    \ ipairs(guess) do\n    scores[#scores + 1] = row[1] > row[2] and 1 or row[1]\n\
    \  end\n  -- The absolute difference between scores is the minimum of the differences\
    \ between them.\n  -- The minimum is 0 if none of the scores are positive.\n \
    \ local bestScore = scores[1]\n  local bestScoreScore = scores[1]\n  for _, score\
    \ in ipairs(scores) do\n    if score > bestScore then\n      bestScore = score\n\
    \      bestScoreScore = score\n    end\n  end\n  local result = {bestScoreScore}\n\
    \  for i = 2, #scores do\n    local difference = scores[i] - bestScoreScore\n\
    \    bestScoreScore = scores[i]\n    if difference > 0 then\n      result.insert(difference)\n\
    \    end\n  end\n  return result\nend", "  local results = {}\n  for _, v in ipairs(game)\
    \ do\n    local gr = guess[v]\n    local result = gr ~= 0 and math.abs(gr - v)\
    \ or 0\n    results[v] = result\n  end\n  return results\nend", "\t-- base case\n\
    \tif #guess == #game then\n\t\treturn { 0, 0, 0, 0, 0, 0 }\n\tend\n\tlocal score\
    \ = game[#game]\n\t-- if there's a tie, ignore the guess (this avoids treating\
    \ the two as the same)\n\tif score == 0 then\n\t\treturn { 0, 0, 0, 0, 0, 0 }\n\
    \tend\n\t-- otherwise, determine how far off we got on each guess\n\tlocal guesses\
    \ = { 0, 0, 0, 0, 0, 0 }\n\tfor i = 1, #guess do -- O(n)\n\t\t-- if this is what\
    \ we already have, we're all good\n\t\tif guesses[i] != 0 then\n\t\t\tcontinue\n\
    \t\tend\n\t\t-- otherwise, get the current guess\n\t\tlocal guess = guess[i]\n\
    \t\t-- if it's 0, it's wrong because you missed a match\n\t\tif guess == 0 then\n\
    \t\t\tguesses[i] = 0\n\t\t\t-- we know that if we had a tie, we would have returned\
    \ 0 on all guesses\n\t\t\t-- so just subtract it from the total\n\t\t\tscore =\
    \ 0 - score\n\t\t-- otherwise, get the difference between the guess and score\n\
    \t\telse\n\t\t\t-- if the guess is too high, it's wrong because you went too far\n\
    \t\t\tif guess > score then\n\t\t\t\tguesses[i] = abs(guess - score)\n\t\t\t\t\
    -- otherwise, it's the correct guess\n\t\t\telse\n\t\t\t\tguesses[i] = 0\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn guesses\nend", "    local best = {}\n    for i=1,#game\
    \ do\n        best[i] = game[i]\n    end\n    for i=1,#guess do\n        if best[i]\
    \ ~= guess[i] then\n            best[i] = abs(best[i] - guess[i])\n        end\n\
    \    end\n    return best\nend", "    local result = {}\n    for i, v in ipairs(game)\
    \ do\n        local diff = v - guess[i]\n        if diff ~= 0 then\n         \
    \   result[i] = diff\n        else\n            result[i] = 0\n        end\n \
    \   end\n    return result\nend\n</cell>\n<code language=julia-0.5>\nusing DataFrames\n\
    </cell>\n<code language=julia-0.5>", "  local sum = 0\n  for i = 1, #game do\n\
    \    local diff = abs(guess[i - 1] - game[i])\n    if guess[i - 1] == game[i]\
    \ then\n      diff = diff + 1\n    end\n    sum = sum + diff\n  end\n  return\
    \ sum\nend", "   assert(type(game) == 'table', 'game must be a table')\n   assert(type(guess)\
    \ == 'table', 'guess must be a table')\n   assert(#game == #guess, 'table sizes\
    \ don\\'t match')\n   local ret = {}\n   for i = 1, #game do\n      ret[i] = (guess[i]\
    \ - game[i])\n   end\n   return ret\nend", "  local correct = 0\n  for i = 1,\
    \ #guess do\n    if guess[i] == game[i] then\n      correct = correct + 1\n  \
    \  end\n  end", "\tlocal differences = {}\n\tlocal difference = 0\n\tlocal guessesSize\
    \ = #guess\n\tlocal scoreSize = #game\n\t\n\tfor i = 1, scoreSize do\n\t\tif game[i]\
    \ == guess[i] then\n\t\t\tdifference = 0\n\t\telse\n\t\t\tdifference = difference\
    \ + (guess[i] - game[i])\n\t\t\tdifferences[i] = difference\n\t\tend\n\tend\n\t\
    \n\tfor i = 1, guessesSize do\n\t\tlocal difference = differences[i]\n\t\tif difference\
    \ < 0 then\n\t\t\tdifference = difference * (-1)\n\t\tend\n\t\tif difference ==\
    \ 0 then\n\t\t\tdifferences[i] = difference\n\t\telse\n\t\t\tdifferences[i] =\
    \ difference\n\t\tend\n\tend\n\t\n\treturn differences\nend", "  local difference\
    \ = {}\n  for i = 1, #guess do\n    if guess[i] == game[i] then\n      table.insert(difference,\
    \ guess[i] - game[i])\n    else\n      table.insert(difference, -game[i])\n  \
    \  end\n  end\n  return difference\nend", "    local diff = {}\n    for i = 1,\
    \ #guess do\n        local diff = guess[i]-game[i]\n        if diff < 0 then diff\
    \ = diff * -1\n        end\n        diff[i] = diff\n    end\n    return diff\n\
    end", "  local guesses\n  local results = {}\n  -- If the two tables are not the\
    \ same size, return nil.\n  -- If the length of the table is less than 2, return\
    \ nil.\n  if #guess ~= #game then\n    return nil\n  else\n    -- Loop through\
    \ the score table and store each score.\n    for i=1,#game do\n      results[i]\
    \ = game[i]\n    end\n  end\n  -- Loop through the guesses table and compare each\
    \ guess.\n  for i=1,#guess do\n    guesses = guess\n    local isCorrect = false\n\
    \    -- Loop through all of the guesses in the guesses table and compare them\
    \ to the score.\n    for j=1,#guesses do\n      if guesses[j] == results[i] then\n\
    \        isCorrect = true\n        break\n      end\n    end\n    -- Add the distance\
    \ from guess to score to the results table.\n    if not isCorrect then\n     \
    \ local diff\n      if results[i] < 0 then\n        diff = math.abs(results[i]\
    \ - results[i+1])\n      else\n        diff = math.abs(results[i] - results[i-1])\n\
    \      end\n      results[i] = diff\n    end\n  end\n  return results\nend", " \
    \ local results = {}\n  local max_index = #guess and #guess\n  for index = 1,\
    \ max_index do\n    local score = game[index]\n    local guess = guess[index]\n\
    \    if score == guess then\n      results[index] = 0\n    else\n      results[index]\
    \ = math.abs(guess - score)\n    end\n  end\n  return results\nend", "    local\
    \ results = {}\n    for i=1,#guess do\n        local score = game[i]\n       \
    \ local guess_result = guess[i]\n        if score>guess_result then\n        \
    \    results[i] = score-guess_result\n        else\n            results[i] = guess_result-score\n\
    \        end\n    end\n    return results\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nI think you might be able to use the absolute difference of the score and\
    \ the guess and add it to the guess if it is the same. I don't know if that is\
    \ correct, but hopefully it helps.\n<|/ a tags=algorithm,lua |>\n<| c |>\nI think\
    \ you mean `abs(score-guess_result)`.\n<|/ c |>\n<| a |>\nFirst of all, you need\
    \ to define what you mean by \"the difference between the guess and the score\"\
    .  What exactly are you trying to tell us?  Do you want to know how far away a\
    \ guess of \"1\" is from the actual score of \"3\"?  If so, then you want the\
    \ absolute value of the difference between the two numbers, i.e. abs(3-1) = 3.\n\
    Secondly, you have a function that takes a table and returns a table.  You also\
    \ have a function that takes two table values and returns a table.  What exactly\
    \ are you comparing those two functions to?  If you're comparing them to determine\
    \ which value has more \"points\", then you're going to get a different answer.\
    \  Perhaps you want to compare their lengths to determine which table is larger?\n\
    Without that info, we can't really help you.\n<|/ a tags=algorithm,lua dscore=0\
    \ |>\n<| c |>\nThanks for answering but this is just a simple version of what\
    \ I'm trying to achieve. I am comparing each element of first table with each\
    \ element of second table and getting the difference and checking if that difference\
    \ is greater than 0 and if yes then adding that difference to guesses table.\n\
    <|/ c |>\n<| c |>\n, that's not what I said.  You say you're comparing each element\
    \ of one table with each element of another table.  What I'm saying is that you're\
    \ comparing a table of values to a single value.  That's not at all what your\
    \ functions are supposed to do.\n<|/ c |>\n<| c |>\nI tried to elaborate on my\
    \ question a little bit more. Could you please help me understand where I have\
    \ went wrong? Thank you.\n<|/ c |>\n<| a dscore=0 |>\nI don't know the language\
    \ you are using but it looks like you are making this more complicated than it\
    \ is. It looks like you are trying to do a subtraction operation on numbers. In\
    \ programming, this is done by subtracting one number from another number. \n\
    So, you have two numbers, score and guess. You ", "    -- We need to check for\
    \ empty input to avoid \"attempt to call field 'subscript'\"\n    -- errors. We\
    \ also need to check for zero length arrays since we cannot subscript\n    --\
    \ into them.\n    if not game or not guess or #game == 0 or #guess == 0 then\n\
    \        return nil\n    end", "    local guesses = {}\n    for i, guess in pairs(guess)\
    \ do\n        guesses[i] = {score, guess}\n    end\n    return table.copy(guesses)\n\
    end\n</cell>\n<cell>", "   local numGuesses, numScores = #game, #guess\n   assert(numGuesses\
    \ > 0, 'numGuesses cannot be 0')\n   assert(numScores > 0, 'numScores cannot be\
    \ 0')\n   local scores = {}\n   for i=1, numGuesses do\n      scores[i] = 0\n\
    \   end\n   for i=1, numScores do\n      scores[i] = game[i] and math.abs(game[i]\
    \ - guess[i])\n   end\n   \n   return scores\nend", "    local scores = {}\n \
    \   for i = 1, #game do\n        scores[i] = abs(guess[i] - game[i])\n    end\n\
    \    return scores\nend", "    local guesses = {}\n    for i = 1, #guess do\n\
    \        local score = game[i]\n        guesses[i] = score\n    end\n    return\
    \ guesses\nend", "    local gameLen = #game\n    local guessLen = #guess\n   \
    \ local len = 1\n    for i = 1, guessLen do\n        len = len * game[gameLen\
    \ + i]\n    end\n    local results = {}\n    for i = 1, guessLen do\n        local\
    \ diff = game[gameLen + i] - guess[i]\n        local err = abs(diff)\n       \
    \ if diff > 0 then\n            results[#results + 1] = err\n        else\n  \
    \          results[#results + 1] = diff\n        end\n    end\n    return results\n\
    end", "\tlocal score = game[#game]\n\tlocal max = math.max(score)\n\tlocal max_id\
    \ = #game\n\tlocal min = -max\n\tlocal min_id = #game\n\tfor i = 1, #guess do\n\
    \t\tif guess > score then\n\t\t\tmax = guess\n\t\t\tmax_id = i\n\t\telseif guess\
    \ < score then\n\t\t\tmin = guess\n\t\t\tmin_id = i\n\t\telse\n\t\t\tbreak\n\t\
    \tend\n\tend", "  if #guess == 0 then\n    return game\n  elseif #game == 0 then\n\
    \    return guess\n  else\n    return compare(game, guess[1:])\n  end\nend", " \
    \   local scores = {}\n    local result = {}\n    for i, v in pairs(game) do\n\
    \        table.insert(scores, v)\n        table.insert(result, 0)\n    end\n \
    \   for i, v in pairs(guess) do\n        result[i] = abs(guess[i] - scores[i])\n\
    \    end\n    return result\nend", "  local correct_count = 0\n  for i = 0, #guess\
    \ do\n    -- we could have used `math.abs()` here, but we would lose the sign\
    \ of wrong guesses\n    local diff = game[i]-guess[i]\n    if diff ~= 0 then return\
    \ diff end\n    correct_count = correct_count + 1\n  end\n  return correct_count\n\
    end", "    local results = {}\n    for j = 1, #game do\n        local score =\
    \ game[j]\n        local guess = guess[j]\n        -- if game is 0, return guess\
    \ for match\n        if score == 0 then\n            results[j] = guess\n    \
    \    else\n            -- if score is not 0 and guess is not 0, calculate difference\n\
    \            -- if score is 0, guess will always be 0 since we are looking for\
    \ a 0\n            -- if score is > 0, the difference is positive, so negate it\n\
    \            local difference = score - guess\n            if difference > 0 then\n\
    \                results[j] = difference\n            else\n                results[j]\
    \ = -difference\n            end\n        end\n    end\n    return results\nend",
  "    local diff = {}\n    for i=1,#game do\n        if game[i] ~= guess[i] then\n\
    \            diff[i] = abs(game[i] - guess[i])\n        else\n            diff[i]\
    \ = 0\n        end\n    end\n    return diff\nend", "\tgame = game.copy\n\tguess\
    \ = guess.copy\n\tlocal diff = game.end - game.start\n\tlocal results = {}\n\t\
    for i = 1, #guess do\n\t\tlocal score = game[game.start + i]\n\t\tlocal guess\
    \ = guess[i]\n\t\tif score == guess then results[i] = 0 end\n\t\telse\n\t\t\t\
    results[i] = math.abs(score - guess)\n\t\tend\n\tend\n\treturn { results = results,\
    \ diff = diff }\nend", "  local diffs = {}\n  for i = 0, #game do \n    if game[i]\
    \ == guess[i] then \n      diffs[i] = 0\n    else\n      diffs[i] = abs(guess[i]\
    \ - game[i])\n    end\n  end\n  return diffs\nend", "    local scores = {}\n \
    \   for i = 1, #game do table.insert(scores, game[i]) end\n    table.sort(scores)",
  "\t-- your code is here\n\tlocal l=#game\n\tlocal m,n=0,0\n\tlocal result={}\n\t\
    for i=1,l do\n\t\tlocal j=0\n\t\tfor k=1,l do\n\t\t\tif game[i]==guess[j] then\n\
    \t\t\t\tresult[i]=result[i]+guess[j]-game[i]\n\t\t\t\tj=j+1\n\t\t\t\tm=m+1\n\t\
    \t\tend\n\t\tend\n\t\tif j>0 then\n\t\t\tn=n+1\n\t\tend\n\tend\n\treturn result,m,n\n\
    end", "  local results = {}\n  for i = 1, #guess do\n    if game[i] ~= guess[i]\
    \ then\n      results[i] = abs(game[i] - guess[i])\n    else\n      results[i]\
    \ = 0\n    end\n  end\n  return results\nend", "    local gameScoreTable = {}\n\
    \    for _, gameScore in ipairs(game) do\n        gameScoreTable[#gameScoreTable\
    \ + 1] = gameScore\n    end\n    local guessScoreTable = {}\n    for _, guessScore\
    \ in ipairs(guess) do\n        guessScoreTable[#guessScoreTable + 1] = guessScore\n\
    \    end\n    local newScoreTable = {}\n    for i = 1, #guessScoreTable do\n \
    \       local gameScore = gameScoreTable[i]\n        local guessScore = guessScoreTable[i]\n\
    \        local newScore = guessScore - gameScore\n        newScoreTable[#newScoreTable\
    \ + 1] = newScore\n    end\n    return newScoreTable\nend", "  local scores =\
    \ {} -- The scores of each game\n  local guesss = {} -- The guesses of each game\n\
    \  for _, row in pairs(game) do\n    scores[row] = row\n    guesses[row] = guess\n\
    \  end\n  local function compareRow(row, guess)\n    local score = 0 -- The difference\
    \ between the score and the guess\n    for _, v in pairs(row) do\n      local\
    \ found = false\n      for _, g in pairs(guesses) do\n        if v == g then\n\
    \          guesses[g] = guess\n          score = score + 1\n          found =\
    \ true\n          break\n        end\n      end\n      if not found then\n   \
    \     score = score + abs(v - guess)\n      end\n    end\n    return score\n \
    \ end\n  local scores = {} -- The scores of each game\n  for _, row in pairs(game)\
    \ do\n    scores[row] = compareRow(row, guess[row])\n  end\n  return scores\n\
    end", "   -- First, calculate all the distances (by subtracting the guessed values\
    \ from the\n   -- scores and adding them up)\n   -- The score is a vector of length\
    \ equal to the number of guesses\n   -- where a value of 0 indicates no match\
    \ and 1 indicates the correct match.\n   -- For example, for the two vectors above,\
    \ the vector\n   -- {4, 4, 1, 0, 0, 6}\n   -- indicates that the first two guesses\
    \ had the correct value.\n   -- The vector {0, 0, 0, 0, 3, 3}\n   -- indicates\
    \ that the first two guesses had no value.\n   -- The vector {0, 5, 0, 0, 0, 4}\
    \ indicates that the first two guesses\n   -- had a 0 value, and the third had\
    \ a 1\n   local totalDistances = {}\n   local maxDistance = 0\n   local count\
    \ = 0\n   local correctCount = 0", "  -- Initialize the best and worst cases.\n\
    \  local best = {0,0,0,0,0,0}\n  local worst = {0,0,0,0,0,0}\n  -- Iterate over\
    \ all the guesses.\n  for i = 1, #guess do\n    -- Iterate over all the game's\
    \ scores. \n    for j = 1, #game do\n      -- If the current guessed guess is\
    \ greater than the current score, the worst case\n      -- state is updated. If\
    \ it is lower, the best state is updated.\n      if guess[i] < game[j] then\n\
    \        worst = {\n          worst[1] = j,\n          worst[2] = guess[i],\n\
    \          worst[3] = game[j],\n          worst[4] = abs(guess[i] - game[j]),\n\
    \          worst[5] = worst[1] + worst[4],\n        }\n      else\n        best\
    \ = {\n          best[1] = j,\n          best[2] = guess[i],\n          best[3]\
    \ = game[j],\n          best[4] = abs(guess[i] - game[j]),\n          best[5]\
    \ = best[1] + best[4],\n        }\n      end\n    end\n  end\n  return best\n\
    end", "\tlocal gameResults = {}\n\tfor _, result in ipairs(game) do\n\t\tgameResults[result]\
    \ = gameResults[result] or 0\n\t\tgameResults[result] = gameResults[result] +\
    \ 1\n\tend\n\tfor _, guess in ipairs(guess) do\n\t\tif gameResults[guess] then\n\
    \t\t\tgameResults[guess] = gameResults[guess]\n\t\telse\n\t\t\tgameResults[guess]\
    \ = gameResults[guess] - abs(guess - game[guess])\n\t\tend\n\tend\n\treturn gameResults\n\
    end", "  local table = {}\n  for i=1,#game do\n    table.i = i\n    if game[i]==0\
    \ then\n      table[i] = guess-game[i]\n    else\n      table[i] = abs(game[i]\
    \ - guess[i])\n    end\n  end\n  return table\nend", "    local correct, score\
    \ = {}, {}\n    for i = 1, #game do \n        local diff = game[i]-guess[i]\n\
    \        if diff == 0 then \n            correct[i] = 0 \n        else\n     \
    \       correct[i] = diff \n        end\n        local maxScore = #score\n   \
    \     if maxScore == 0 then \n            score[i] = 0\n        else\n       \
    \     score[i] = diff/maxScore\n        end\n    end\n    return { correct = correct,\
    \ score = score } \nend", "  local diff = {}\n  for i = 1, #guess do\n    diff[i]\
    \ = abs(guess[i] - game[i])\n  end\n  return diff\nend", "    assert(type(game)\
    \ == 'table')\n    assert(type(guess) == 'table')\n    assert(#game == #guess)",
  "    local i = 1\n    local score = 0\n    while i <= #guess do\n        if game[i]\
    \ ~= guess[i] then\n            score = abs(guess[i] - game[i])\n        end\n\
    \        i = i + 1\n    end\n    \n    return score\nend", "    local score =\
    \ {}\n    local out = {}\n    for i=1,#game do\n        local score = game[i]\n\
    \        local guess = guess[i]\n        if guess ~= 0 then\n            local\
    \ diff = guess - score\n            if diff > 0 then\n                out[i] =\
    \ 0\n            else\n                out[i] = abs(diff)\n            end\n \
    \       else\n            out[i] = score\n        end\n    end\n    return out\n\
    end", "  local function helper(i, j)\n    if i ~= j then\n      local diff = guess[i]\
    \ - game[i][j]\n      return diff < 0 and -diff or diff\n    end\n  end\n  local\
    \ answer = {}\n  for i=1,#guess do table.insert(answer, helper(i, #game)) end\n\
    \  return answer\nend", "  local result = {}\n  local index = {}\n  local gameLength\
    \ = #game\n  local guessLength = #guess\n  \n  for index = 1, gameLength do\n\
    \    local indexScore = game[index]\n    local indexGuess = guess[index]\n   \
    \ \n    if indexScore > indexGuess then\n      table.insert(result, 0)\n    elseif\
    \ indexScore < indexGuess then\n      table.insert(result, math.abs(indexGuess\
    \ - indexScore))\n    end\n  end\n  \n  for index = 1, guessLength do\n    local\
    \ indexScore = guess[index]\n    \n    if game[index] ~= indexScore then\n   \
    \   table.insert(result, math.abs(indexScore - game[index]))\n    end\n  end\n\
    \  \n  return result\nend", "   local differences = {}\n   for i = 1, #guess do\n\
    \      local currentScore = game[i]\n      local currentGuess = guess[i]\n   \
    \   if not currentScore or not currentGuess then break end\n      if currentGuess\
    \ < currentScore then -- correct\n         differences[i] = 0\n      else -- incorrect\n\
    \         differences[i] = abs(currentScore - currentGuess)\n      end\n   end\n\
    \   return table.concat(differences, \", \")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
