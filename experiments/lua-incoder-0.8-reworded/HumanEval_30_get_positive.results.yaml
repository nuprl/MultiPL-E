language: lua
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlvacxzx.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpxlvacxzx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \   if #l == 0 then return {} end\n   local t = {}\n   for i = 1, #l do\n    \
    \  if l[i] > 0 then table.insert(t, l[i]) end\n   end\n   return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, x in ipairs(l) do\n    if x > 0 then\n      t[#t + 1]\
    \ = x\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, {__index = function(self, index)\n      local result\n\
    \      for _, v in ipairs(index) do\n        if v < 0 then\n          result =\
    \ {v, true}\n          break\n        end\n      end\n      return result\n  \
    \  end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9zd0pys.lua:22:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpm9zd0pys.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i = 1, #l do\n    if l[i] >= 0 then\n      table.insert(r,\
    \ l[i])\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt863wzqm.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpt863wzqm.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable({\n    positive_numbers = unpack(l),\n    negative_numbers\
    \ = {},\n  }, mt)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9xtc19k.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpx9xtc19k.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpx9xtc19k.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then\n    return {}\n  elseif #l == 1 then\n    local x = l[1]\n\
    \    if x >= 0 then return {x} end\n  end\n  local new_l = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < 0 then\n      new_l = l[i]\n    else\n      break\n   \
    \ end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg9drlu4.lua:27:\
    \ expected: {4, 5, 6}\nactual: -2\nstack traceback:\n\t/tmp/tmpsg9drlu4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i = 1, #l do\n    if l[i] > 0 then new_l[#new_l + 1]\
    \ = l[i] end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return table.concat(positive)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sx5an87.lua:17:\
    \ expected: {4, 5, 6}\nactual: \"456\"\nstack traceback:\n\t/tmp/tmp7sx5an87.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i=1,#l do table.insert(result, l[i]) end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbk2ycp_.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpcbk2ycp_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local r = {}\n    for _, v in ipairs(l) do if v >= 0 then table.insert(r,\
    \ v) end end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedgraeeu.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpedgraeeu.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local new_l = {}\n    for k, v in ipairs(l) do\n        if v >= 0 then\n\
    \            new_l[#new_l + 1] = v\n        end\n    end\n    return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsql5t4s4.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpsql5t4s4.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(t, l[i])\
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local p = {}\n  for i = 1, #l do\n    p[#p+1] = l[i]\n  end\n  return table.sort(p)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg68ai2mg.lua:17:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpg68ai2mg.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i = 1, #l do new_l[i] = l[i] end\n  for i = 1, #l do\n\
    \    if l[i] < 0 then\n      new_l[i] = l[i] + 0\n    end\n  end\n  return new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxg8g_ah.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpoxg8g_ah.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if v ~= nil then\n      if\
    \ v >= 0 then\n        out[#out + 1] = v\n      else\n        break\n      end\n\
    \    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5l410f1.lua:23:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmpd5l410f1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return set:new(unpack(\n    unpack(l, 1, math.min(#l, #set))\n  ):map(\n  \
    \  function(x)\n      if x ~= nil and x > 0 then\n        return x\n      end\n\
    \    end\n  ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswpq_9fc.lua:7:\
    \ attempt to index a nil value (global 'set')\nstack traceback:\n\t/tmp/tmpswpq_9fc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpswpq_9fc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then return nil end\n  local positive = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then table.insert(positive, l[i]) end\n  end\n  return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_mojldn.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpk_mojldn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local r = {} -- Return value\n    for i, v in ipairs(l) do\n        if v\
    \ > 0 then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = setmetatable({}, {\n    __index = function(t, k)\n      local\
    \ value = t[k]\n      if not value or value < 0 then\n        error(string.format(\"\
    key %s not positive in table %s\", k, t))\n      else\n        t[k] = math.abs(value)\n\
    \      end\n      return value\n    end,\n  })\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfacnd7ja.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local i, n = 0, #l\n  local l2 = {}\n  local l3 = {}\n  while i < n do\n  \
    \  if l[i] > 0 then l2[#l2 + 1] = l[i] end\n    if l[i] < 0 then l3[#l3 + 1] =\
    \ -l[i] end\n    i = i + 1\n  end\n  return l2, l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp91dur0tg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp91dur0tg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp91dur0tg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxmtmp0d.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpwxmtmp0d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v >= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwmcbnx7.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmprwmcbnx7.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in pairs(l) do table.insert(positive, v)\
    \ end\n    return table.sort(positive)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf145k3os.lua:15:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpf145k3os.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l==nil then return nil end\n  local positive = {}\n  for i=1,#l do\n   \
    \ if l[i] > 0 then\n      table.insert(positive, i)\n    end\n  end\n  return\
    \ positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicbx65a5.lua:20:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpicbx65a5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  local is_positive\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbsdd2gsq.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v <= 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21jktzcw.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2}\nstack traceback:\n\t/tmp/tmp21jktzcw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i, v in pairs(l) do\n    if v ~= 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprskwiccl.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmprskwiccl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { __tostring = function() return \"positive\" end, __index\
    \ = function(self, k) return self:item(k) > 0 end }) end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwsla0bt.lua:12:\
    \ expected: {4, 5, 6}\nactual: positive\nstack traceback:\n\t/tmp/tmpmwsla0bt.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local rval = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 then\n \
    \           rval[#rval + 1] = v\n        end\n    end\n    return rval\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1jfwa3o.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpo1jfwa3o.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(t, l[i])\
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  local p = 1\n  for _, v in ipairs(l) do\n    if v >\
    \ 0 then\n      table.insert(positive, v)\n      p = v\n    end\n  end\n  return\
    \ p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfv2ym5o9.lua:21:\
    \ expected: {4, 5, 6}\nactual: 6\nstack traceback:\n\t/tmp/tmpfv2ym5o9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for k, v in pairs(l) do\n    if v > 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i, v in pairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978141
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local rs = {}\n  for i, v in pairs(l) do\n    if v > 0 then table.insert(rs,\
    \ v) end\n  end\n  return rs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then\n    return {}\n  end\n  local t = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      table.insert(t, l[i])\n    end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxmtmp0d.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpwxmtmp0d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= math.floor(v) then\n     \
    \ return v\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t5591my.lua:17:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmp4t5591my.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(\n    setmetatable(\n      {}, {\n        __index = function(t,\
    \ k)\n          if math.abs(k) > 0 then\n            t[k] = -t[k]\n          end\n\
    \          return t[k]\n        end\n      }\n    ), {\n      __tostring = function()\
    \ return \"[\" .. table.concat(l, \", \") .. \"]\" end\n    }\n  )\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwxg48g3.lua:26:\
    \ expected: {4, 5, 6}\nactual: [-1, -2, 4, 5, 6]\nstack traceback:\n\t/tmp/tmpzwxg48g3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(r,\
    \ l[i])\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { __tostring = function() return string.format(\"{%s}\"\
    , table.concat(l, \",\")) end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgu7i36o.lua:13:\
    \ expected: {4, 5, 6}\nactual: {-1,-2,4,5,6}\nstack traceback:\n\t/tmp/tmpmgu7i36o.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\
    \ table.insert(positive, v) end\n    end\n    return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local new_l = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n      \
    \      new_l[#new_l + 1] = l[i]\n        end\n    end\n    return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: -1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local i, n = 1, #l\n  local l2 = {}\n  while i < n do\n    table.insert(l2,\
    \ l[i])\n    if l[i] < 0 then\n      i = i + 1\n    end\n  end\n  return l2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978167
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local new_l = {}\n    for idx, v in ipairs(l) do\n        if v > 0 then\n\
    \            new_l[#new_l + 1] = v\n        end\n    end\n    return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positives = {}\n  for _, v in ipairs(l) do\n    if v <= 0 then\n    \
    \  return nil\n    end\n    table.insert(positives, v)\n  end\n  return positives\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyp9jsnm6.lua:20:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpyp9jsnm6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l == nil then return nil end\n  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then table.insert(positive, v) end\n  end\n  return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(ret,\
    \ l[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \   local positive = {}\n   for _, v in ipairs(l) do\n      if v > 0 then\n  \
    \       table.insert(positive, v)\n      end\n   end\n   return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_7p2_rq.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpa_7p2_rq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local t = {}\n    for _, e in ipairs(l) do\n        if e > 0 then\n     \
    \       t[#t + 1] = e\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local v = {}\n  for _, x in ipairs(l) do\n    if not x then\n      table.insert(v,\
    \ 0)\n    else\n      table.insert(v, x)\n    end\n  end\n  table.sort(v)\n  return\
    \ v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cbar9kb.lua:22:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp1cbar9kb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n   \
    \         table.insert(positive, i)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyf49ar5j.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpyf49ar5j.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positives = {}\n  for _, v in pairs(l) do\n    if v > 0 then table.insert(positives,\
    \ v) end\n  end\n  return positives\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { get = function(self, k)\n    return k > 0 and self\
    \ or nil\n  end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw17ex4z.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpkw17ex4z.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do table.insert(result, v) end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp377vdkk9.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp377vdkk9.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local new_table = {}\n  local positive = {}\n  for _, v in ipairs(l) do\n \
    \   if v >= 0 then\n      table.insert(new_table, v)\n      table.insert(positive,\
    \ v)\n    end\n  end\n  table.sort(new_table)\n  table.sort(positive)\n  table.insert(new_table,\
    \ table.concat(positive, \",\"))\n  return new_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaydiao0.lua:24:\
    \ expected: {4, 5, 6}\nactual: {4, 5, 6, \"4,5,6\"}\nstack traceback:\n\t/tmp/tmpcaydiao0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do t[v <= 0 and 0 or v] = v end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplevhfgcd.lua:15:\
    \ expected: {4, 5, 6}\nactual: {0=-2, 4=4, 5=5, 6=6}\nstack traceback:\n\t/tmp/tmplevhfgcd.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, b in ipairs(l) do table.insert(result, b) end\n\
    \  return setmetatable(result, { get = function(self) return self:select(function(v)\
    \ return v > 0 end) end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr58ft7c.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpqr58ft7c.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: -1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  local i = 1\n  repeat\n    ret[#ret + 1] = l[i]\n    i =\
    \ i + 1\n  until l[i] == 0\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978167
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  local is_positive = nil\n  for _, elt in ipairs(l) do\n\
    \    if elt then\n      if is_positive == false then\n        is_positive = true\n\
    \      else\n        if is_positive and elt > 0 then\n          positive = positive\
    \ and {positive, elt}\n        else\n          positive = positive and {elt}\n\
    \        end\n      end\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfe_dadh.lua:28:\
    \ expected: {4, 5, 6}\nactual: {6}\nstack traceback:\n\t/tmp/tmpsfe_dadh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v ~= nil then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuablup0p.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpuablup0p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l:map(function(a) return a if a > 0 then a end end), {__index=l})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp41a5xj_k.lua:7: ''end'' expected near ''if''

    '
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local pos  = {}\n  local idx  = 1\n  for _, v in ipairs(l) do\n    if v ~=\
    \ 0 then\n      table.insert(pos, v)\n    end\n    if idx % 2 == 1 then table.insert(pos,\
    \ 0) end\n    idx = idx + 1\n  end\n  return pos\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi93ge0t5.lua:22:\
    \ expected: {4, 5, 6}\nactual: {-1, 0, -2, 4, 0, 5, 6, 0}\nstack traceback:\n\t\
    /tmp/tmpi93ge0t5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if type(l) == \"table\" then\n    local res = {}\n    for _, v in ipairs(l)\
    \ do\n      if v then table.insert(res, v) end\n    end\n    return res\n  elseif\
    \ l == nil then\n    return nil\n  else\n    local v = 0\n    for _, v in ipairs(l)\
    \ do return v end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw1lxrc2.lua:24:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpkw1lxrc2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret,\
    \ l[i]) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positives = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(positives,\
    \ v) end\n  end\n  return positives\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local s = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(s, l[i])\
    \ end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local v = {}\n    for _, v in pairs(l) do\n        if v >= 0 then\n     \
    \       return v\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesa9zclg.lua:19:\
    \ expected: {4, 5, 6}\nactual: 4\nstack traceback:\n\t/tmp/tmpesa9zclg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, x in ipairs(l) do\n    if x >= 0 then\n      result[#result\
    \ + 1] = x\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9snt0coe.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp9snt0coe.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for k, v in pairs(l) do\n    table.insert(positive,\
    \ v and math.abs(v))\n  end\n  return table.sort(positive)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwfemspz.lua:17:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmphwfemspz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local results = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(results,\
    \ l[i]) end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i, v in ipairs(l) do\n    if v then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vcqthoy.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp2vcqthoy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if type(l) ~= 'table' then return {l} end\n  local result = {}\n  for i, v\
    \ in pairs(l) do\n    if v >= 0 then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_bpv2gf.lua:21:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp5_bpv2gf.lua:21: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local p = terralib.newlist()\n    for i, v in ipairs(l) do\n        if v\
    \ ~= 0 then p:insert(v) end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxg1pyyh7.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpxg1pyyh7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxg1pyyh7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do positive[#positive + 1] = v\
    \ end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2c79fbk.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpo2c79fbk.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do result[v] = v end\n  table.sort(result)\n\
    \  local last_value = -1\n  for k, v in pairs(result) do\n    if v > 0 then\n\
    \      if last_value ~= -1 then\n        result[last_value] = k\n      end\n \
    \     last_value = k\n    end\n  end\n  if last_value ~= -1 then\n    result[last_value]\
    \ = k\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuat8vx1.lua:28:\
    \ expected: {4, 5, 6}\nactual: {-2=-2, -1=-1, 4=5, 5=6}\nstack traceback:\n\t\
    /tmp/tmpvuat8vx1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then return {} end\n  local n = l[1]\n  local v = nil\n  if n ~=\
    \ nil then\n    v = n\n    for i = 2, #l do\n      if l[i] > 0 then\n        v\
    \ = nil\n        break\n      elseif v == nil then\n        v = l[i]\n      end\n\
    \    end\n  end\n  return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlppvqc4.lua:27:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpwlppvqc4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { __tostring = function() return \"not positive numbers\"\
    \ end })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdk2o69w.lua:13:\
    \ expected: {4, 5, 6}\nactual: not positive numbers\nstack traceback:\n\t/tmp/tmpwdk2o69w.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local out = {}\n  for i = 1, #l do\n    if not l[i] then\n      break\n   \
    \ end\n    out[#out + 1]=l[i]\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0oseuaq.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpj0oseuaq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, value in pairs(l) do\n    if value >= 0 then\n\
    \      result[#result + 1] = value\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1gvz4px.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmps1gvz4px.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l == nil and {} or l, {__index = function(self, i)\n  \
    \    assert(i >= 0 and i < self.size, 'index ' .. i .. ' not in table')\n    \
    \  return self:index(i)\n    end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixlk2zx9.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpixlk2zx9.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \   local result = {}\n   for _, value in pairs(l) do \n      if value >= 0 then\
    \ table.insert(result, value) end\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34nhymxf.lua:18:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp34nhymxf.lua:18: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local p = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(p,\
    \ l[i])\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterv7275.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpterv7275.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxmtmp0d.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpwxmtmp0d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for _, v in ipairs(l) do\n        if v ~= 0 then\n  \
    \          table.insert(pos, v)\n        end\n    end\n    return pos\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkun4vdoy.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpkun4vdoy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v ~= 0\
    \ and v ~= -v then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ table.concat(positive)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_yhuagq.lua:20:\
    \ expected: {4, 5, 6}\nactual: \"-1-2456\"\nstack traceback:\n\t/tmp/tmp5_yhuagq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(ret,\
    \ l[i]) end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if type(l) == \"table\" then\n    local t = {}\n    for _, value in ipairs(l)\
    \ do\n      if value >= 0 then\n        table.insert(t, value)\n      end\n  \
    \  end\n    return t\n  else\n    local v = {}\n    for _, value in ipairs(l)\
    \ do\n      if value >= 0 then\n        table.insert(v, value)\n      end\n  \
    \  end\n    return v\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla2ei26g.lua:30:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpla2ei26g.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 and v ~= math.nan then\
    \ table.insert(t, v) end\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n_cnuvj.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp7n_cnuvj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, value in ipairs(l) do\n    if value >= 0 then\n  \
    \    table.insert(ret, value)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjl3omi_.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpdjl3omi_.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local p = nil\n  if #l > 0 then\n    local n = l[1]\n    p = n and {n} or {}\n\
    \    for i = 2, #l do\n      if l[i] > 0 then\n        p = p or {i+1}\n      end\n\
    \    end\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fcby1z7.lua:23:\
    \ expected: {4, 5, 6}\nactual: {-1}\nstack traceback:\n\t/tmp/tmp1fcby1z7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local pos, neg = 0, 0\n    for i, v in ipairs(l) do\n        if v >= 0 then\n\
    \            pos = pos + 1\n        else\n            neg = neg + 1\n        end\n\
    \    end\n    return setmetatable(l, { __index = function(t, i)\n        if i\
    \ < pos then\n            return nil\n        elseif i == pos then\n         \
    \   return 1\n        elseif i == neg then\n            return -1\n        else\n\
    \            return l[i]\n        end\n    end})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyqznkdw.lua:31:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpoyqznkdw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v then table.insert(positive,\
    \ v) end\n    end\n    return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdhy67xt.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpxdhy67xt.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local function filter(item)\n    return item > 0 and item\n  end\n  local result\
    \ = {}\n  for i = 1, #l do\n    table.insert(result, filter(l[i]))\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zpu30la.lua:20:\
    \ expected: {4, 5, 6}\nactual: {false, false, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp_zpu30la.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local rs = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(rs,\
    \ l[i])\n    end\n  end\n  return rs\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { __tostring = function() return \"()\" end })\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4ztl6wi.lua:13:\
    \ expected: {4, 5, 6}\nactual: ()\nstack traceback:\n\t/tmp/tmpy4ztl6wi.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  for i = 1, #l do\n    if l[i] > 0 then return true end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_7zacox.lua:16:\
    \ expected: {4, 5, 6}\nactual: true\nstack traceback:\n\t/tmp/tmps_7zacox.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do t[abs(v)] = v end\n  return setmetatable(t,\
    \ {__tostring = string.reverse})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0r2s012j.lua:8:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp0r2s012j.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0r2s012j.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local pos = {}\n  for i, v in ipairs(l) do\n    if v ~= nil then\n      table.insert(pos,\
    \ v)\n    end\n  end\n  return pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05g8dzuo.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp05g8dzuo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local l2 = {}\n  for i, v in ipairs(l) do l2[v] = i end\n  local positive =\
    \ {}\n  for k, v in pairs(l2) do\n    if v == 0 then\n      table.insert(positive,\
    \ v)\n    elseif positive[v] == nil then\n      positive[v] = k\n    end\n  end\n\
    \  table.sort(positive)\n  local new = {}\n  for k, v in pairs(positive) do new[new[v]]\
    \ = k end\n  return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfh0qf88i.lua:19:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpfh0qf88i.lua:19: in local 'candidate'\n\
    \t/tmp/tmpfh0qf88i.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i = 1, #l do\n    local new_entry = l[i]\n    if not\
    \ new_entry then\n      new_entry\n    elseif new_entry < 0 then\n      table.insert(new_l,\
    \ new_entry + 0)\n    else\n      table.insert(new_l, new_entry)\n    end\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpemiozw41.lua:12: syntax error near ''elseif''

    '
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      t[k] = v\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9f8rkju.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpu9f8rkju.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, x in pairs(l) do\n    if x > 0 then table.insert(result,\
    \ x) end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do table.insert(positive, v) end\n\
    \  return setmetatable(positive, mt)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb9v98yc.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpzb9v98yc.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local result = {}\n    for k, v in ipairs(l) do\n        if v > 0 then\n\
    \            result[#result + 1] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, x in ipairs(l) do if x >= 0 then table.insert(ret,\
    \ x) end end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0kfe2rq.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpk0kfe2rq.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positives = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(positives, v)\n    end\n  end\n  return table.concat(positives,\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99linjyz.lua:19:\
    \ expected: {4, 5, 6}\nactual: \"4,5,6\"\nstack traceback:\n\t/tmp/tmp99linjyz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for k, v in pairs(l) do\n    if v ~= 0 and (v > 0 or\
    \ v < -1) then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjksxkzcz.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpjksxkzcz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local v = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(v,\
    \ l[i])\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local t = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       t[#t + 1] = v\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \   local t = {}\n   for i = 1, #l do t[i] = l[i] end\n   for i = 1, #t do if\
    \ t[i] < 0 then t[i] = 0 end end\n   return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4hli3kn.lua:16:\
    \ expected: {4, 5, 6}\nactual: {0, 0, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpo4hli3kn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in pairs(l) do\n    if v ~= 0 and v ~= math.min(v)\
    \ then\n      table.insert(t, v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb6im7nd.lua:19:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmpnb6im7nd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for i=1, #l do\n        if l[i] > 0 then\n          \
    \  table.insert(ret, l[i])\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then return nil end\n  local s = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] <= 0 then break end\n    table.insert(s, l[i])\n  end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphl3ftt81.lua:19:\
    \ expected: {4, 5, 6}\nactual: -1\nstack traceback:\n\t/tmp/tmphl3ftt81.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(\n    {\n      [\"+\"] = function(a, b) return a > 0 and\
    \ a or b; end,\n      [\"-\"] = function(a, b) return a < 0 and a or b; end,\n\
    \      [\"*\"] = function(a, b) return a * b end,\n      [\"/\"] = function(a,\
    \ b) return a / b end,\n      [\"<\"] = function(a, b) return a < b; end,\n  \
    \    [\"<=\"] = function(a, b) return a <= b; end,\n      [\"==\"] = function(a,\
    \ b) return a == b; end,\n      [\"~=\"] = function(a, b) return a ~= b; end,\n\
    \      [\"and\"] = function(a, b) return a and b; end,\n      [\"or\"] = function(a,\
    \ b) return a or b; end,\n      [\"max\"] = function(a, b) return math.max(a,\
    \ b); end,\n      [\"min\"] = function(a, b) return math.min(a, b); end,\n   \
    \   [\"len\"] = function(a, b) return #a + #b; end,\n    },\n    l\n  )\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x455zgp.lua:30:\
    \ expected: \n{4, 5, 6}\nactual: \n{\n    \"*\"=function: 0x55c9b27d5290,\n  \
    \  \"+\"=function: 0x55c9b27d5230,\n    \"-\"=function: 0x55c9b27d5260,\n    \"\
    /\"=function: 0x55c9b27d52c0,\n    \"<\"=function: 0x55c9b27d52f0,\n    \"<=\"\
    =function: 0x55c9b27d5320,\n    \"==\"=function: 0x55c9b27d5350,\n    and=function:\
    \ 0x55c9b27d53b0,\n    len=function: 0x55c9b27d5470,\n    max=function: 0x55c9b27d5410,\n\
    \    min=function: 0x55c9b27d5440,\n    or=function: 0x55c9b27d53e0,\n    \"~=\"\
    =function: 0x55c9b27d5380\n}\nstack traceback:\n\t/tmp/tmp7x455zgp.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(l, { __index = function(t) return setmetatable({}, { __index\
    \ = function(t,k) return k ~= nil and t[k] >= 0 and t[k] or 0 end }) end })\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbvqy8kj.lua:13:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpmbvqy8kj.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l == nil then return nil end\n  local i, n = 1, #l\n  -- The loop body is\
    \ executed only once for the first element.\n  -- If there is only one element,\
    \ we exit immediately.\n  while i < n do\n    local e = l[i]\n    if e < 0 then\
    \ return nil end\n    i = i + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluq61y5l.lua:22:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpluq61y5l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local l2 = {}\n  for _, _ in pairs(l) do\n    if l[_] > 0 then\n      table.insert(l2,\
    \ l[_])\n    end\n  end\n  return l2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrpdzxjj.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphrpdzxjj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphrpdzxjj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t\n  if #l == 0 then\n    return l\n  end\n  if type(l[1]) == \"number\"\
    \ then\n    t = {}\n    for i = 1, #l do\n      if l[i] > 0 then\n        t[#t\
    \ + 1] = l[i]\n      end\n    end\n    if #t == 0 then\n      return t\n    else\n\
    \      return t\n    end\n  else\n    if type(l[1]) == \"table\" then\n      local\
    \ result = {}\n      for _, v in ipairs(l) do\n        if v > 0 then\n       \
    \   result[#result + 1] = v\n        end\n      end\n      if #result == 0 then\n\
    \        return result\n      else\n        return result\n      end\n    else\n\
    \      print(type(l))\n      assert(false, \"Unknown type for get_positive\")\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i, v in ipairs(l) do\n    if v >= 0 then\n     \
    \ table.insert(positive, v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepahjada.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpepahjada.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local p = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      p[i] = l[i]\n\
    \    end\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx85iwf53.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpx85iwf53.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l == nil then return end\n  local result = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local new_list = {}\n    local new_number\n    for _, _ in ipairs(l) do\n\
    \        if new_number and new_number > 0 then\n            new_list[#new_list\
    \ + 1] = new_number\n            new_number = nil\n        else\n            new_number\
    \ = _\n        end\n    end\n    return new_list or l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppl_bfadg.lua:23:\
    \ expected: {4, 5, 6}\nactual: {4}\nstack traceback:\n\t/tmp/tmppl_bfadg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  return setmetatable(\n    {\n      __index = function(t, k)\n        return\
    \ t[k]\n      end,\n    },\n    l\n  )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38pjdyb3.lua:20:\
    \ expected: {4, 5, 6}\nactual: {__index=function: 0x5559dc89f790}\nstack traceback:\n\
    \t/tmp/tmp38pjdyb3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local r = {}\n    for _,v in ipairs(l) do\n        if v ~= 0 then table.insert(r,\
    \ v) end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3o_1mt8.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpb3o_1mt8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, _ in pairs(l) do\n    if _ > 0 then table.insert(result,\
    \ 1) end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsnqhois.lua:17:\
    \ expected: {4, 5, 6}\nactual: {1, 1, 1}\nstack traceback:\n\t/tmp/tmpnsnqhois.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = setmetatable({}, {__index = _G})\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ln = #l\n  -- Skip over non-positive elements.\n  for i = 1, ln do\n\
    \    if not l[i] then break end\n  end\n  -- Return only the positive numbers.\n\
    \  return setmetatable(l, { __index = function(t, k)\n      local ln = #t\n  \
    \    -- Return all numbers greater than or equal to k.\n      for i = 1, ln do\n\
    \        if not t[i] or t[i] <= k then break end\n      end\n      return t\n\
    \    end})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg52z_80.lua:26:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpzg52z_80.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l==nil then return nil end\n  local out = {}\n  for i=1,#l do\n    if l[i]<0\
    \ then out[#out+1]=l[i] end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsr_hmu4.lua:18:\
    \ expected: {4, 5, 6}\nactual: {-1, -2}\nstack traceback:\n\t/tmp/tmpfsr_hmu4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r = {} -- {value, [index of element]}\n  for i, v in ipairs(l) do\n \
    \   if v >= 0 then\n      table.insert(r, v)\n    end\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysr_yjd5.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpysr_yjd5.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i, v in ipairs(l) do\n    if v ~= 0 then\n      r[#r+1]\
    \ = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc045m_z.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpbc045m_z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for k, v in pairs(l) do \n    if not v < 0 then t[k] = v end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkj5ajoq.lua:9:\
    \ attempt to compare boolean with number\nstack traceback:\n\t/tmp/tmpbkj5ajoq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbkj5ajoq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i=1,#l do positive[#positive+1] = l[i] end\n  for\
    \ i=#positive,1,-1 do positive[#positive] = positive[i-1] end\n  return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs3eq2sr.lua:16:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5}\nstack traceback:\n\t/tmp/tmpfs3eq2sr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, n in pairs(l) do\n    if n > 0 then\n      table.insert(positive,\
    \ n)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r\n  \n  r = {}\n  for _,v in ipairs(l) do r[#r+1] = v and v end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkigiuipb.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpkigiuipb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then return {} end\n  local ret = {}\n  local s = setmetatable({},\
    \ {\n    __index = function (t, key)\n      if key == '' or t < 0 then return\
    \ nil end\n      ret[#ret + 1] = key\n      return t\n    end,\n    __newindex\
    \ = function(self, index, val)\n      if val ~= nil then self.table[index] = val\
    \ end\n    end\n  })\n  for _, i in ipairs(l) do\n    s[i] = i\n  end\n  return\
    \ setmetatable(ret, s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmbjj_4d.lua:11:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmpcmbjj_4d.lua:11:\
    \ in metamethod 'index'\n\t/tmp/tmpcmbjj_4d.lua:16: in metamethod 'newindex'\n\
    \t/tmp/tmpcmbjj_4d.lua:20: in local 'candidate'\n\t/tmp/tmpcmbjj_4d.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local i, results = {}\n  for i, v in ipairs(l) do\n    if v > 0 then results[i]\
    \ = v end\n  end\n  return unpack(results, 1, #l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpody7e_85.lua:9:\
    \ attempt to index a nil value (local 'results')\nstack traceback:\n\t/tmp/tmpody7e_85.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpody7e_85.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v >= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq69pt1lf.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpq69pt1lf.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local results = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      results[#results\
    \ + 1] = v\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n\
    \            positive[k] = v\n        end\n    end\n    return positive\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq43w3k7w.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpq43w3k7w.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local result = {}\n    for _, value in ipairs(l) do\n        if value >=\
    \ 0 then\n            result[#result + 1] = value\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhc_zlh3.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpvhc_zlh3.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in pairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in pairs(l) do\n    if v > 0 then\n      result[#result\
    \ + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, value in pairs(l) do\n        if value >= 0 then\n\
    \            table.insert(res, value)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i8mljr6.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp7i8mljr6.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then table.insert(positive,\
    \ v) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_7p2_rq.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpa_7p2_rq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r\n  for i, v in ipairs(l) do\n    if v > 0 then\n      if i == #l then\
    \ break end\n      r = {}\n      for j = 0, i do\n        table.insert(r, l[j])\n\
    \      end\n      break\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomeq9dzi.lua:24:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4}\nstack traceback:\n\t/tmp/tmpomeq9dzi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  local i = 1\n  for key, value in pairs(l) do\n    if value\
    \ >= 0 then\n      t[#t + 1] = value\n    end\n    i = i + 1\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiasls4gt.lua:22:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpiasls4gt.lua:22: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l == nil then\n    return nil\n  end\n  local result = {}\n  for _, v in\
    \ pairs(l) do\n    if v > 0 then\n      result[#result + 1] = v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \   local r = {}\n   for _, v in ipairs(l) do if v >= 0 then r[#r+1] = v end end\n\
    \   return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcujuoof.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpqcujuoof.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ l[i])\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if l == nil then return nil end\n  local ret = {}\n  for i, v in pairs(l) do\n\
    \    if v > 0 then ret[#ret + 1] = v end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local posi = setmetatable({}, {__mode=\"v\"})\n  for i = 1, #l do\n    posi[i]\
    \ = l[i]\n    if posi[i] > 0 then\n      posi = posi\n    end\n  end\n  return\
    \ posi\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vtbffaf.lua:20:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp2vtbffaf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local t = {}\n    for k, v in ipairs(l) do\n        if v >= 0 then\n    \
    \        t[#t + 1] = v\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr14r3361.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpr14r3361.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for k, v in ipairs(l) do new_l[k+1] = v end\n  return new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphw9tdr5u.lua:15:\
    \ expected: {4, 5, 6}\nactual: {2=-1, 3=-2, 4=4, 5=5, 6=6}\nstack traceback:\n\
    \t/tmp/tmphw9tdr5u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if #l == 0 then\n    return {}\n  end\n  local ret = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then table.insert(ret, l[i]) end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n   \
    \         table.insert(positive, l[i])\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _,v in ipairs(l) do\n    if v > 0 then table.insert(positive,v)\
    \ end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, value in pairs(l) do if value >= 0 then table.insert(positive,\
    \ value) end end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4_orrrr.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpe4_orrrr.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do t[#t + 1] = v end\n  table.sort(t)\n\
    \  for _, v in ipairs(t) do t[#t] = v end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqfh72ih.lua:17:\
    \ expected: {4, 5, 6}\nactual: {-2, -1, 4, 5, 5}\nstack traceback:\n\t/tmp/tmpeqfh72ih.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local res = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(res,\
    \ l[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in ipairs(l) do table.insert(positive, v) end\n\
    \  return positive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtaiyzrp.lua:15:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpjtaiyzrp.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  local is_neg = 0\n  for i = 1, #l do\n    if l[i] < 0 then\n\
    \      is_neg = 1\n      break\n    end\n    ret[#ret+1] = l[i]\n  end\n  if is_neg\
    \ then\n    table.sort(ret)\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlmzkj_l.lua:25:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmphlmzkj_l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in pairs(l) do t[math.abs(v)+1] = v end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbtlzyv4.lua:15:\
    \ expected: {4, 5, 6}\nactual: {2=-1, 3=-2, 5=4, 6=5, 7=6}\nstack traceback:\n\
    \t/tmp/tmpfbtlzyv4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i, v in ipairs(l) do\n    if v >= 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ewmcah5.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp2ewmcah5.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in pairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _, v in pairs(l) do\n    if v <= 0 then break end\n   \
    \ r[#r + 1] = v\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuugqr5v.lua:18:\
    \ expected: {4, 5, 6}\nactual: {}\nstack traceback:\n\t/tmp/tmphuugqr5v.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \    local s = {}\n    for _, e in ipairs(l) do\n        if e > 0 then\n     \
    \       s[#s+1] = e\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local v = {}\n  for _, v in ipairs(l) do v = v + v end\n  local positives =\
    \ {}\n  for i = 1, #l do\n    if v[i] >= 0 then table.insert(positives, v[i])\
    \ end\n  end\n  return positives\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf71v37h5.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf71v37h5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpf71v37h5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive,\
    \ i)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxmtmp0d.lua:19:\
    \ expected: {4, 5, 6}\nactual: {3, 4, 5}\nstack traceback:\n\t/tmp/tmpwxmtmp0d.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v >= 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg74x5i6.lua:20:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpcg74x5i6.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _, v in pairs(l) do\n    if v ~= nil then\n    \
    \  positive[#positive + 1] = v\n    end\n  end\n  return table.sort(positive,\
    \ function(a, b)\n    return a < b\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw5k8kn4.lua:21:\
    \ expected: {4, 5, 6}\nactual: nil\nstack traceback:\n\t/tmp/tmpzw5k8kn4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _,v in ipairs(l) do\n    if v ~= 0 then\n      result[#result\
    \ + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9oh8pboe.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp9oh8pboe.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i = 1, #l do\n    if l[i] > 0 then table.insert(positive,\
    \ l[i]) end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local n = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(n,\
    \ l[i])\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mox1mha.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp4mox1mha.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzy6oec7.lua:19:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpfzy6oec7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 1
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  if type(l) == 'table' then\n    local ret = {}\n    for k, v in ipairs(l) do\
    \ ret[#ret + 1] = v end\n    return ret\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0wzy22d.lua:18:\
    \ expected: {4, 5, 6}\nactual: {-1, -2, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpf0wzy22d.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978162
- exit_code: 0
  program: "-- Return only positive numbers in the table.\n-- >>> get_positive({-1,\
    \ 2, -4, 5, 6})\n-- {2, 5, 6}\n-- >>> get_positive({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10})\n-- {5, 3, 2, 3, 9, 123, 1}\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      table.insert(result,\
    \ l[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978162
