name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes a table of numbers as input and returns \n\
  -- the number of elements in the table that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>>\
  \ specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2, -3, 45,\
  \ 21, 109})\n-- 2\nlocal function specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 1 \n  for i = 1,#nums,1 do\n    count = count + nums[i]\
    \ and 1\n    if nums[i]>10 and ((nums[i]%2)^1 or nums[i]%2) and (nums[i]%2^1)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ numLen = #nums\n  local count = 0\n  \n  for i = 1, numLen do\n    if nums[i]\
    \ > 10 then\n      if isodd(nums[i]) then\n        if isodd(nums[i - 1], 1) then\n\
    \          if isodd(nums[i - 2], 1) then\n            count = count + 1\n    \
    \      end\n        end\n      end\n    end\n  end\n  \n  return count\nend",
  "   local count = 0\n   for i = 1, #nums do\n      if nums[i] == 10 and (nums[i\
    \ - 1] % 2 == 1 or nums[i + 1] % 2 == 1) then\n\t count = count + 1\n      end\n\
    \   end\n   return count\nend", "   -- Write your code in here!\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes an array of numbers as input and\
    \ prints whether the numbers are divisible by 7, and whether they are divisible\
    \ by 3 or 5.\nFor this to work, you must write your own version of print, for\
    \ now call it print_divisible_7.", "    if #nums == 0 then\n        return 0\n\
    \    end\n    if #nums == 1 then\n        return 1 if nums[1] % 2 == 0 end\n \
    \   end\n    local n = #nums\n    local count = 0\n    for i = 1, n do\n     \
    \   local first = nums[i]\n        local last = nums[n+i]\n        if first >\
    \ 10 and last % 2 == 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local n = {}\n    for i = 1, #nums do\n        table.insert(n,\
    \ nums[i])\n    end\n    for i = 1, #nums do\n        if nums[i] > 10 then\n \
    \           if ((nums[i] % 10) % 2 == 1) and (nums[i] % 100 % 2 == 1) then\n \
    \               table.insert(n, nums[i])\n            end\n        end\n    end\n\
    \    return #n\nend", "    local n = 1\n    for i, v in ipairs(nums) do\n    \
    \    if v >= 10 then\n            n = n + 1\n            if (((i - 1) % 2) and\
    \ (i % 2)) then\n                n = n + 1\n            end\n            if (((i\
    \ + 1) % 2) and (i % 2)) then\n                n = n + 1\n            end\n  \
    \          if (((nums - 1) % 2) and (nums % 2)) then\n                n = n +\
    \ 1\n            end\n        end\n    end\n    return n\nend", "  if #nums <\
    \ 2 then return 0 end\n  local count = 0\n  for _, n in ipairs(nums) do\n    if\
    \ n > 10 then \n      count = count + 1\n      local f1 = ((n % 10 + 3) % 10)\
    \ + 1\n      local f2 = ((n % 10 - 3) % 10) + 1\n      if not (f1 % 2) or not\
    \ (f2 % 2) then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n     \
    \   if num > 10 and (num:sub(1, 2) % 2 == 1 or (num:sub(-2, -2) % 2 == 1 and num:sub(-2,\
    \ -1) % 2 == 1)) then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "  return 1 + #nums - sum(_G.zip(nums, nums[#nums]):map(function(x)\
    \ return x[1]%2 and (x[1]+1) % 2 == 1 end))\nend", "  local count = 0\n  for i\
    \ = 1, #nums do\n    local n = nums[i]\n    if n > 10 and n % 2 == 1 and n % (n-1)\
    \ == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local counter = 0\n    for _, num in pairs(nums) do\n        if num > 10 and\
    \ num >= math.floor(num) and math.floor(num) % 2 == 1 then\n            counter\
    \ = counter + 1\n        end\n    end\n    return counter\nend", "  local count\
    \ = 0\n  for _, value in ipairs(nums) do\n    if value > 10 then\n      if value\
    \ % 2 == 0 then\n        if math.floor(value / 2) % 2 == 1 then\n          count\
    \ = count + 1\n        end\n      end\n    end\n  end\n  return count\nend", " \
    \ local count = 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n   \
    \   if num%2 == 1 and num%7 == 1 then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "  for _, num in ipairs(nums) do\n    if\
    \ num > 10 then\n      if ((num:sub(1,1)%2) ~= (num:sub(1,1)%2) and\n        \
    \  (num:sub(2,1)%2) ~= (num:sub(2,1)%2)) then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    if nums[i] > 10 and nums[i]:mod(2) == 1 and nums[i]:mod(2) == 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal count\
    \ = 0\n\t\n\tfor key, value in pairs(nums) do\n\t\tlocal n1 = tonumber(tostring(value))\n\
    \t\tlocal n2 = tonumber(tostring(key * key))\n\t\t\n\t\t-- n1 and n2 are numbers,\
    \ check if they are odd\n\t\tif n1 % 2 == 1 and  n2 % 2 == 1 then\n\t\t\tif n1\
    \ > 10 then\n\t\t\t\tif n1 < 1000 and n2 < 1000 and n1 % 2 == 1 and  n2 % 2 ==\
    \ 1 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \t\n\treturn count\nend", "  local count = 0\n  for k, v in pairs(nums) do\n \
    \   if v > 10 then\n      if ((v - math.floor(v)) % 2) and (v % 2) then\n    \
    \    count = count + 1\n      end\n    end\n  end\n  return count\nend", "\tlocal\
    \ count = 0\n\t\n\tfor i = 1, #nums do\n\t\tlocal n = nums[i]\n\t\tif n ~= 0 then\n\
    \t\t\tcount = count + 1\n\t\t\tif n > 10 then\n\t\t\t\tcount = count + 1\n\t\t\
    \t\tif n % 2 == 1 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\tif n ~= 0 then\n\
    \t\t\t\t\t\tif n % 10 == 1 then\n\t\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\t\
    else\n\t\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn count\nend", "    local n = 0\n \
    \   for _, x in ipairs(nums) do\n        if x > 10 then\n            if tostring(x:sub(1,\
    \ -1)):sub(1, 1) == '1' then\n                n = n + 1\n            end\n   \
    \     end\n    end\n    return n\nend", "  -- TODO: Your code here\n  return 0\n\
    end", "  local n = 0\n  for i = 1, #nums do\n    local n = n + nums[i]\n    if\
    \ nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1 and nums[i-1] % 2 ==\
    \ 1 and nums[i-1] % 10 == 1 then\n      n = n + 1\n    end\n  end\n  return n\n\
    end", "  local count = 0\n  for i=1, #nums do\n    if nums[i] > 10 then\n    \
    \  if nums[i] % 2 == 1 and nums[i] % 3 == 0 then\n        count = count + 1\n\
    \      end\n    end\n  end\n  return count\nend", "  local n = #nums\n  local\
    \ count = 0\n  \n  for i = 1, n do\n    if nums[i] < 10 then\n      count = count\
    \ + 1\n    end\n  end\n  \n  for i = 1, n do\n    if nums[i] == 10 then\n    \
    \  count = count + 1\n      if i % 2 == 0 then\n        if nums[i - 1] ~= 10 then\n\
    \          count = count + 1\n        end\n      end\n      if i % 2 == 1 then\n\
    \        if nums[i - 1] ~= 10 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  \n  return count\nend", "\tlocal count = 0\n\tfor\
    \ _, val in ipairs(nums) do\n\t\tif (val > 10) and (val > math.floor(val / 10))\
    \ and (val % 2 ~= 1) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "   local count = 0\n   for _, num in ipairs(nums) do\n      if num > 10\
    \ and\n         num % 2 == 1 and\n         num % 2 == 1 and\n         num > math.floor(num\
    \ / 2) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 and (num % 2) == 1 and (num % 3) == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local count = 0\n    local\
    \ firstOdd = 0\n    local lastOdd = 0\n    for i,v in pairs(nums) do\n       \
    \ if v >= 10 then\n            if v % 2 ~= 0 then\n                if firstOdd\
    \ == 0 then\n                    firstOdd = 1\n                end\n         \
    \       if lastOdd == 0 then\n                    lastOdd = 1\n              \
    \  end\n            else\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor _, num\
    \ in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num % 2 == 1 then\n\t\t\t\
    \tif math.floor (num / 10) % 2 ~= 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  for i=1,#nums do\n  \
    \  if (nums[i] >= 10) and (nums[i] % 2 == 1) and (nums[i] % 2 == 1) and (nums[i-1]\
    \ % 2 == 1) and (nums[i+1] % 2 == 1) then\n      return #nums + 1\n    end\n \
    \ end\n  return #nums\nend", "   for _, val in ipairs(nums) do\n      if val >\
    \ 10 and math.floor(val / 10) and math.mod(val, 2) == 1 then\n         return\
    \ 1\n      end\n   end\n   return 0\nend", "    local num_total = 0\n    local\
    \ i = #nums\n    while i ~= 0 do\n        if nums[i] < 10 then -- Only count non-zero\
    \ values\n            num_total = num_total + 1\n        elseif nums[i] > 10 then\n\
    \            if nums[i]%2 == 1 then\n                num_total = num_total + 1\n\
    \            end\n            local a = math.floor(nums[i]/10)\n            if\
    \ a == 1 then\n                num_total = num_total + 1\n            end\n  \
    \      end\n        i = i - 1\n    end\n    return num_total\nend", "  local count\
    \ = 0\n  for i, n in ipairs(nums) do\n    if n > 10 and (math.floor(n / 10) %\
    \ 2) and math.floor(n % 10) % 2 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local n = 0\n  for i = 1, #nums do\n    local num =\
    \ tonumber(nums[i])\n    if num == nil or num < 0 then\n      return nil\n   \
    \ end", "  local count = 0\n  for _, num in pairs(nums) do\n    if num > 10 then\n\
    \      if num:byte() > 1 and (num:byte() % 2) == 1 then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "  local count = 0\n \
    \ for _, num in ipairs(nums) do\n    if (num > 10) and (num % 2 == 1) and (num\
    \ % 2 == 1) then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for _, value in ipairs(nums) do\n    if value > 10 then\n\
    \      local firstLast = mod(value, 10)\n      if firstLast >= 0 and firstLast\
    \ <= 2 then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  return nums:select(function(x)\n    return (x > 10) and (firstDigitOf(x)\
    \ and lastDigitOf(x))\n  end)\nend", "  local count = 0\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    if num > 10 and\n      (num % 2 == 1 and\n     \
    \  num % 10 == 1 or \n       (num % 10 == 0 and\n       num % 2 == 1 and\n   \
    \    num % 100 != 0)\n      ) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local n = 0\n  for i = 1, #nums do\n    local d = math.abs(nums[i])\n\
    \    if d > 10 then\n      d = 10 - math.floor(math.log10(d))\n    end\n    if\
    \ d >= 2 and math.floor(d / 2) ~= math.floor(d / 2) then\n      n = n + 1\n  \
    \  end\n  end\n  return n\nend", "    local result = 0\n    for _, n in ipairs(nums)\
    \ do\n        if n >= 10 then\n            if ((n mod 10) and n%2 and (not (n\
    \ mod 11))) then\n                result = result + 1\n            end\n     \
    \   end\n    end\n    return result\nend", "  local count = 0\n  for _, num in\
    \ pairs(nums) do\n    count = count + 1\n    if num > 10 then\n      if not (math.mod(math.floor(num),\
    \ 2)) then\n        if not (math.mod(math.floor(math.mod(num), 10), 2)) then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  \n  for _, num in ipairs(nums) do\n    if\
    \ num > 10 then\n      count = count + 1\n      \n      if num and (mod(num, 2)\
    \ and mod(num, 2)) then\n        count = count + 1\n      end\n    end\n  end\n\
    \  \n  return count\nend", "    local counter = 0\n    for i = 1, #nums do\n \
    \       if isInRange(nums[i]) then\n            local n = toNumber(nums[i])\n\
    \            if n > 10 then\n                if toNumber(nums[i]) mod 2 ~= 1 then\n\
    \                    if toNumber(nums[i]) mod 2 ~= 0 then\n                  \
    \      counter = counter + 1\n                    end\n                end\n \
    \           end\n        end\n    end\n    return counter\nend", "  local length\
    \ = 0\n  local num\n  while true do\n    num = #nums\n    if nums == nil then\n\
    \      break\n    end\n    local value = nums[num]\n    if value ~= nil then\n\
    \      local first = math.floor(value/10)\n      local last = math.floor(value%10)\n\
    \      if first%2 == 1 and last%2 == 1 then\n        length = length + 1\n   \
    \   end\n      nums[num] = nil\n    end\n  end\n  return length\nend", "  local\
    \ n = 1\n  for i = 1, #nums do\n    if nums[i]>10 then\n      n = n+1\n    end\n\
    \    if nums[i]%2 == 1 then\n      n = n+1\n    end\n  end\n  return n\nend",
  "  local count = 0\n  for _, n in ipairs(nums) do\n    if n >= 10 and (mod((n -\
    \ 10), 2) == 1 or mod((n - 10), 2) == 3) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local count = 0\n    for _, v in pairs(nums)\
    \ do\n        if v ~= nil then\n            if v > 10 then\n                if\
    \ mod(v, 2) == 1 then\n                    if mod(v, 10) == 1 then\n         \
    \               count = count + 1\n                    end\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "  return #nums\
    \ - ((num:abs() * 10) * math.floor((#nums) / 2)) \nend", "    local count = 0\n\
    \    \n    for i = 1, #nums do\n        local num = nums[i]\n        \n      \
    \  if num > 10 then\n            count = count + 1\n            \n           \
    \ if num % 10 and num % 10 % 2 then\n                count = count + 1\n     \
    \       end\n        end\n    end\n    \n    return count\nend", "    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i]>10 and (nums[i]%1==0 or (nums[i]%2==1\
    \ and nums[i]%2==1)) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "   local n = 0\n   for _, num in ipairs(nums) do\n \
    \     if num > 10 then\n         if num % 2 ~= 0 then\n            if num % 10\
    \ ~= 0 then\n               if num % 10 == 0 then\n                  n = n + 1\n\
    \               end\n            end\n         end\n      end\n   end\n   return\
    \ n\nend", "\tlocal numsCount = #nums\n\tlocal filteredNums = 0\n\tlocal digits\
    \ = {}", "  -- If the first number in the set is negative return the number of\
    \ \n  -- elements in the set that are less than 0\n  local first  = nums[1]\n\
    \  if first < 0 then\n    return #nums\n  end\n  \n  -- If the last number in\
    \ the set is negative return the number of \n  -- elements in the set that are\
    \ less than 0\n  local last  = nums[#nums]\n  if last < 0 then\n    return #nums\n\
    \  end\n  \n  -- If the first number in the set is positive or last number in\
    \ the set \n  -- are positive, return the number of elements in the set that are\
    \ \n  -- greater than 10 -- (10, 20, 30, 40, 50, 60, 70, 80, 90) and both first\
    \ \n  -- and last digits of a number are odd (1, 3, 5, 7, 9).\n  local total =\
    \ 0\n  \n  -- If the last number in the set is odd and first number is odd, add\
    \ the \n  -- the number of elements in the set that are greater than 10\n  if\
    \ last % 2 == 1 and first % 2 == 1 then\n    total = total + #nums\n  end\n  \n\
    \  -- If the last number in the set is odd and first number is odd, add \n  --\
    \ the number of elements in the set that are greater than 10 -- \n  -- (10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90) and both first and last digits of a \n  -- number\
    \ are even even (2, 4, 6, 8, 10, 12, 14, 16, 18)\n  if last % 2 == 0 and first\
    \ % 2 == 1 then\n    total = total + #nums\n  end\n  \n  -- If the last number\
    \ in the set is even and first number is even, add \n  -- the number of elements\
    \ in the set that are greater than 10 -- \n  -- (10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90) and both first and last digits of a \n  -- number are odd (1, 3, 5, 7, 9).\n\
    \  if last % 2 == 1 and first % 2 == 0 then\n    total = total + #nums\n  end\n\
    \  \n  -- Return the number of elements in the set that are greater than 10 and\n\
    \  -- both first and last digits of a number are odd (1, 3, 5, 7, 9)\n  return\
    \ total\nend", "  if #nums == 0 then\n    return 0\n  end\n  local len = 0\n \
    \ local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      count\
    \ = count + 1\n      if nums[i] % 2 == 0 then\n        if nums[i] % 2 == 1 then\n\
    \          count = count + 1\n        end\n      end\n    end\n    len = len +\
    \ #nums[i]\n  end\n  return count\nend", "  local n = 0\n  for _, _, _ in pairs(nums)\
    \ do\n    if nums[_] > 10 then\n      n = n + 1\n      if nums[_] % 2 == 1 then\n\
    \        if nums[_] % 4 == 0 then\n          if nums[_] % 8 == 0 then\n      \
    \      n = n + 1\n          end\n        else\n          n = n + 1\n        end\n\
    \      end\n    end\n  end\n  return n\nend", "\tlocal count = 0\n\tfor i, v in\
    \ ipairs(nums) do\n\t\tif v > 10 then\n\t\t\tcount = count + 1\n\t\t\tlocal a,\
    \ b = math.modf(v)\n\t\t\tif b == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\t\tif math.mod(a, 2) == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn count\nend", "\tlocal count = 0\n\tfor _, value in pairs(nums)\
    \ do\n\t\tif value == nil then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tif value\
    \ < 10 then\n\t\t\t\tif math.floor(value) ~= value then\n\t\t\t\t\tif math.floor(value/2)\
    \ % 2 == 1 then\n\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\
    \t\telse\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for i = 1,#nums do\n        if nums[i] > 10 then\n\
    \            if isodd(nums[i]) and isodd(nums[i - 1]) then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "  local n = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and v%2 ~= 0 then\n\
    \      if v%2 == 1 then\n        -- if first and last digits are odd, add 1\n\
    \        n = n + 1\n      else\n        -- if first and last digits are even,\
    \ add 0\n        n = n\n      end\n    end\n  end\n  return n\nend", "  local\
    \ count = 0\n  for i, value in pairs(nums) do\n    if value >= 10 then\n     \
    \ if math.floor(value%2) ~= 0 and\n         math.floor((value-1)/2) ~= 0 and\n\
    \         math.floor((value-1)/2 + 1) ~= 0 then\n        count = count + 1\n \
    \     end\n    end\n  end\n  return count\nend", "  local count = 0\n  for _,v\
    \ in pairs(nums) do\n    if v > 10 then\n      if v % 2 == 0 then\n        if\
    \ ((v - ((v/2)*2)) % 2 == 1) then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  for _, val in pairs(nums)\
    \ do\n    if val > 10 and\n      (math.floor(val % 10) == 1 or\n       math.floor(val\
    \ % 10) == 3 or\n       math.floor(val % 10) == 5) then\n      val = math.floor(val\
    \ / 10)\n      if math.floor(val % 10) == 1 then\n        return true\n      elseif\
    \ math.floor(val % 10) == 3 then\n        return true\n      elseif math.floor(val\
    \ % 10) == 5 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local nums = nums or {}\n    local count = 0\n    for i, v in ipairs(nums)\
    \ do\n        if v > 10 then\n            if v % 2 ~= 0 then\n               \
    \ if math.floor(v / 2) % 2 ~= 0 then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, v in pairs(nums) do\n    local firstDigit =\
    \ v % 10\n    local lastDigit = math.floor(v / 10)\n    if firstDigit % 2 == 1\
    \ and lastDigit % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local sum = 0\n  for i = 1, #nums do\n    sum = sum + i\n  \
    \  if nums[i] and nums[i] > 10 and (math.mod(i, 2) == 1 or math.mod(i, 2) == 3)\
    \ then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "  local total\
    \ = 0\n  \n  for i = 1,#nums do\n    local n = nums[i]\n    if (n > 10) and (n\
    \ % 2 == 0) and (n % 2 == 1) then\n      total = total + 1\n    end\n  end\n \
    \ \n  return total\nend", "  local ans = 0\n  for i = 0, #nums - 1 do\n    if\
    \ nums[i] > 10 then\n      ans = ans + 1\n    end\n    if nums[i] % 2 == 1 and\
    \ nums[i + 1] % 2 == 1 then\n      ans = ans + 1\n    end\n  end\n  return ans\n\
    end", "  local count = 0\n  for _, _ in pairs(nums) do\n    count = count + 1\n\
    \    if nums[_] > 10 and math.floor(nums[_]) and math.floor(nums[_]) % 2 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  if #nums ==\
    \ 0 then\n    return 0\n  end\n  \n  local count = 0\n  \n  for i = 1, #nums do\n\
    \    if nums[i] > 10 then\n      if nums[i] % 2 == 0 and (nums[i] * 2) % 2 ==\
    \ 1 then\n        count = count + 1\n      end\n    end\n  end\n  \n  return count\n\
    end", "  if #nums == 0 then\n    return 0\n  end\n  local length = 1\n  local\
    \ index = 1\n  while index < #nums do\n    local num = nums[index]\n    length\
    \ = length + 1\n    if num < 10 then\n      if num % 2 ~= 1 then\n        index\
    \ = index + 1\n      else\n        index = index + 1\n      end\n    else\n  \
    \    if num % 2 == 1 then\n        index = index + 1\n      else\n        index\
    \ = index + 1\n      end\n    end\n  end\n  return length\nend", "    local count\
    \ = 0\n    for n in pairs(nums) do\n        if n == math.floor(n) then\n     \
    \       count = count + 1\n        elseif n % 2 == 1 then\n            count =\
    \ count + 1\n        elseif n % 3 == 1 then\n            count = count + 1\n \
    \       elseif n % 5 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "    local n = 1\n    for _, v in pairs(nums)\
    \ do\n        if v > 10 then\n            if v % 2 ~= 0 and v % 2 ~= 1 then\n\
    \                n = 1\n            else\n                n = n + 1\n        \
    \    end\n        end\n    end\n    return n\nend", "\tlocal count = 0\n\tfor\
    \ k,v in pairs(nums) do\n\t\tif v > 10 and math.floor(v % 1) == math.floor(v /\
    \ 1) and math.floor(v % 2) == math.floor(v / 2) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  local num_table = {}\n  for n in pairs(nums)\
    \ do\n    if not num_table[n] then\n      num_table[n] = true\n    end\n  end\n\
    \  local count = 0\n  for v in pairs(num_table) do\n    if v then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i, num in ipairs(nums) do\n    -- Skip zero and negative numbers\n    if num\
    \ == 0 then break end\n    if num < 0 then break end\n    \n    -- Determine if\
    \ first and last digit are odd\n    local first_odd = num % 10\n    local last_odd\
    \ = num % 100\n    if first_odd % 2 == 0 then\n      -- If first digit is odd,\
    \ check if last digit is odd\n      if last_odd % 2 ~= 0 then\n        -- If last\
    \ digit is odd, add 1 to the counter\n        count = count + 1\n      end\n \
    \   end\n  end\n  \n  return count\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    -- TODO: This should be more efficient than a nested loop. \n    --\
    \ The first two digits are odd.\n    if nums[i] >= 10 then\n      -- If this is\
    \ greater than 10, then the last digit must be odd\n      if nums[i] >= 100 and\
    \ nums[i] % 100 ~= 0 then\n        count = count + 1\n      else\n        count\
    \ = count + 0\n      end\n    end\n  end\n  return count\nend", "  local result\
    \ = 1\n  for _, v in pairs(nums) do\n    if v > 10 then\n      result = result\
    \ + 1\n      if v % 2 == 1 and v % 2 ~= v / 2 then\n        result = result +\
    \ 1\n      end\n    end\n  end\n  return result\nend", "    local count = 0\n\
    \    for i = 1, #nums do\n        if nums[i] > 10 then\n            count = count\
    \ + 1\n            if nums[i] % 2 == 1 and nums[i] % 3 == 1 then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  return #nums > 0 and #nums ~= #nums:len() and\n         #nums[#nums -\
    \ 1] > 10 and #nums[#nums - 1] % 2 and #nums[#nums - 1] % 2:len() and\n      \
    \   #nums[#nums - 1] > 10 and #nums[#nums - 1] % 2 and #nums[#nums - 1] % 2:len()\
    \ - 1 and\n         #nums[#nums - 1] > 10 and #nums[#nums - 1] % 2 and #nums[#nums\
    \ - 1] % 2:len() - 1\nend", "  if #nums == 0 then\n    return 0\n  end", "  local\
    \ count = 0\n  for i, v in ipairs(nums) do\n    if v > 10 then\n      if v % 2\
    \ == 1 then\n        if v % 10 == 1 then\n          if v % 100 == 1 then\n   \
    \         count = count + 1\n          end\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "\tlocal count = 0\n\tfor i, v in pairs(nums) do\n\
    \t\tif v > 10 and (v mod 2 == 1 or v mod 2 == 3) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "   local numsLen = #nums\n   local count=0\n\
    \   for i=1,numsLen do\n      if nums[i]>10 then\n         if nums[i]%2 and nums[i]%2\
    \ and nums[i]%2 then\n            count=count+1\n         end\n      end\n   end\n\
    \   return count\nend", "  if #nums < 1 then\n    return 0\n  end\n  if #nums\
    \ == 1 then\n    return 1\n  end\n  local maxn = #nums\n  local ans = 1\n  for\
    \ i = 1, maxn do\n    local value = nums[i]\n    if value == -2 then\n      return\
    \ 0\n    end\n    if value > 10 then\n      local digit = math.floor(value)\n\
    \      if digit % 2 == 1 then\n        ans = ans + 1\n      end\n    end\n  end\n\
    \  return ans\nend", "    local count = 0\n    for n in pairs(nums) do\n     \
    \   if n > 10 and n % 2 == 0 and n % 1 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local count = 0\n    for\
    \ _, v in ipairs(nums) do\n        if v > 10 and mod (v, 10) and mod (v, 10) ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    -- Write your solution inside this function\n    local result = 0\n\
    \    for i=1,#nums do\n        if nums[i] < 10 or nums[i] >= 100 or nums[i]%2\
    \ == 1 then\n            result=result+1\n        end\n    end\n    return result\n\
    end", "  -- TODO: Use your filter here to get the correct answer.\n  -- Your code\
    \ here\n  return 1 end", "\t-- Write your code here\n\treturn 1\nend", "    local\
    \ count = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\n    \
    \       ((num:sub(1, 1) %2 == 0) and (num:sub(-2, 2) %2 == 0)) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for _, num in pairs(nums) do\n        if num > 10 then\n    \
    \        if num > 0 and ((num % 2 == 1) and (num % 2 ~= (num % 2) or (num % 2\
    \ == 0)))  then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "  local n = 0\n  for _, value in ipairs(nums)\
    \ do\n    if value > 10 and isodd(math.floor(value)) then\n      n = n + 1\n \
    \     if isodd(math.floor(value/2)) then\n        n = n + 1\n      end\n    end\n\
    \  end\n  return n\nend", "    local sum = 0\n    for _, _, n in ipairs(nums)\
    \ do\n        if n > 10 then\n            sum = sum + 1 and 1\n            if\
    \ n > 100 and n % 100 ~= 0 then\n                sum = sum + 1 and 1\n       \
    \         if n > 1000 and n % 1000 ~= 0 then\n                    sum = sum +\
    \ 1 and 1\n                    if n > 10000 and n % 10000 ~= 0 then\n        \
    \                sum = sum + 1 and 1\n                    end\n              \
    \  end\n            end\n        end\n    end\n    return sum\nend", "    local\
    \ cnt = 0\n    for _, v in ipairs(nums) do\n        if v > 10 then\n         \
    \   if v ~= (v * 10) then\n                if math.floor(v / 2) % 2 == 1 then\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \     end\n    end\n    return cnt\nend", "  local n = 0\n  for _, x in ipairs(nums)\
    \ do\n    n = n + 1 \n    local first = math.floor(x/10)\n    local last = math.floor(x/10)\n\
    \    if last > first and first % 2 == 1 and last % 2 == 1 then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend", "    local count = 0\n    for _,v in ipairs(nums)\
    \ do\n        if v > 10 then\n            if v % 2 == 1 then\n               \
    \ if v % 3 == 0 then\n                    if v % 5 == 0 then\n               \
    \         count = count + 1\n                    end\n                else\n \
    \                   count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, val in ipairs(nums) do\n    if val > 10 and\
    \ (val ~= math.floor(val)) and (val ~= math.ceil(val)) then\n      if val mod\
    \ 2 ~= 1 then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend\n</code>\nThe above function should take in a table of numbers and\
    \ return 1 if any number in the table is greater than 10 and both first and last\
    \ digits of that number are odd; otherwise, it should return 0.\n<code>", "  local\
    \ count = 0\n  for _, value in pairs(nums) do\n    local n = value\n    if n >=\
    \ 10 then\n      local d = n % 10\n      if d % 2 == 1 then count = count + 1\
    \ end\n      if d % 2 == 0 then\n        local f1, f2 = n % 100, n % 100\n   \
    \     if f1 % 2 == 0 and f2 % 2 == 0 then\n          count = count + 1\n     \
    \   end\n      end\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\
    \tfor k, v in pairs(nums) do\n\t\tif v > 10 then\n\t\t\tif v % 2 == 0 then\n\t\
    \t\t\tif v / 2 % 2 ~= 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn count\nend", "  if #nums < 1 then return 0 end\n\
    \  if #nums < 2 then return 1 end\n  local first = nums[1]\n  local last = nums[#nums]\n\
    \  if first < 0 then return 0 end\n  if first % 2 == 0 and last % 2 == 1 then\n\
    \    return 1\n  elseif first % 2 == 1 and last % 2 == 0 then\n    return 1\n\
    \  else\n    return 0\n  end\nend", "  local n = 0\n  for i=1,#nums,1 do\n   \
    \ if nums[i]>10 then\n      n = n + 1\n      local a = math.floor(nums[i])\n \
    \     local b = math.floor(nums[i+1])\n      if a % 2 ~= b % 2 then\n        num\
    \ = a .. \", \" .. b\n      end\n    end\n  end\n  return n\nend", "    local\
    \ count = 0\n    for _, num in pairs(nums) do\n        if num > 10 then\n    \
    \        if num % 2 == 1 then\n                if num:gsub('%d%d%d%d', '%d%d%d%d%d%d%d%d')\
    \ ~= '111' or num:gsub('%d%d%d%d%d%d%d%d%d%d%d%d', '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d')\
    \ ~= '111' then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "  local function\
    \ test(i)\n    return i > 10 and\n      (test(i) ~= true and test(i) ~= false\
    \ and test(i) ~= nil)\n  end\n  local total = 0\n  for i = 1, #nums do\n    if\
    \ test(nums[i]) then\n      total = total + 1\n    end\n  end\n  return total\n\
    end", "  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 10 then\n\
    \      if num % 2 ~= 0 and num % 2 ~= 1 then count = count + 1 end\n    end\n\
    \  end\n  return count\nend", "  if #nums == 0 then\n    return nil\n  end", " \
    \ local n = 0\n  for i = 1, #nums do\n    local val = nums[i]\n    if val > 10\
    \ then\n      n = n + 1\n      if val % 2 ~= 0 then\n        if val % 4 == 1 then\n\
    \          if val % 100 == 1 then\n            if val % 400 == 1 then\n      \
    \        n = n + 1\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  return n\nend", "  local count = 0\n  for k, v in pairs(nums)\
    \ do\n    if v > 10 then\n      count = count + 1\n      if v % 2 == 1 and v ~=\
    \ math.floor(v) then\n        count = count + 1\n      end\n      if v % 2 ==\
    \ 0 and v ~= math.floor(v) then\n        count = count + 1\n      end\n      if\
    \ v ~= math.floor(v) then\n        count = count + 1\n      end\n      if v %\
    \ 2 == 0 and v ~= (v - 1) then\n        count = count + 1\n      end\n      if\
    \ v % 2 == 1 and v ~= (v + 1) then\n        count = count + 1\n      end\n   \
    \ end\n  end\n  return count\nend", "    local length = 1\n    for _,num in ipairs(nums)\
    \ do\n        if num > 10 then\n            length = length + 1\n        end\n\
    \        if num > 0 and num % 2 == 1 then\n            length = length + 1\n \
    \       end\n        if num > 0 and num % 2 == 0 then\n            length = length\
    \ + 1\n        end\n    end\n    return length\nend", "    local count = 0\n \
    \   for _, v in pairs(nums) do\n        if v ~= 0 and math.floor(v / 10) % 2 ==\
    \ 1 and math.floor(v / 10) % 2 == 1 then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    if (nums[i] > 10) and (nums[i] % 2 == 0) and ((nums[i] mod 3) == 0)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal\
    \ count = 0\n\tlocal i = 0\n\twhile i < #nums do\n\t\tif nums[i] > 10 then\n\t\
    \t\tif nums[i] % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\t\ti = i + 1\n\t\
    \t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend",
  "  local n = 0\n  for i = 1, #nums do\n    local t = nums[i]\n    if t == nil then\
    \ break end\n    if t > 10 then\n      if t % 2 == 1 then\n        local firstDigit\
    \ = (t / 10)\n        if firstDigit % 2 == 1 then\n          n = n + 1\n     \
    \   end\n      end\n      if t % 10 == 1 and t > 9 then\n        local lastDigit\
    \ = (t / 10)\n        if lastDigit % 2 == 1 then\n          n = n + 1\n      \
    \  end\n      end\n    end\n  end\n  return n\nend", "   local count = 0\n   for\
    \ _, num in ipairs(nums) do\n      if num > 10 then\n         if num % 2 == 0\
    \ then\n            if num % 2 == 1 then\n               count = count + 1\n \
    \           end\n         end\n      end\n   end\n   return count\nend", "   \
    \ local n = 0\n    for _, v in ipairs(nums) do\n        local num = v\n      \
    \  if num >= 10 then\n            n = n + 1\n            if num % 2 == 1 and num\
    \ % 3 != 1 or num % 2 ~= 1 and num % 3 ~= 1 then\n                n = n + 1\n\
    \            end\n        end\n    end\n    return n\nend", "  local count = 0\n\
    \  local _filter = {}\n  for i = 1, #nums do\n    if nums[i] > 10 then\n     \
    \ count = count + 1\n      _filter[i] = 1\n    end\n  end\n  for i = 1, #nums\
    \ do\n    if nums[i] % 2 ~= 0 and nums[i] % 2 ~= 1 then\n      _filter[i] = 1\n\
    \    end\n  end\n  for i = 1, #nums do\n    if nums[i] > 10 and _filter[i] ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", "   \
    \ local n = 0\n    for i = 1, #nums do\n        if nums[i] >= 10 and (nums[i]\
    \ % 2 == 0 or nums[i] % 2 == 1) and \n            nums[i] ~= (nums[i] * nums[i])\
    \ and nums[i-1] <= 10 and nums[i-1] % 2 == 1\n        then\n            n = n\
    \ + 1\n        end\n    end\n    return n\nend\n</cell>\n<text>\nExercise:", "\t\
    local count = 0\n\tfor _, value in pairs(nums) do\n\t\tif value > 10 and (value\
    \ % 2 == 1 and value % 5 == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local n = 0\n  for _, v in ipairs(nums) do\n    if v\
    \ > 10 then\n      if v > 10 and math.floor(v/2) % 2 ~= 1 then\n        n = n\
    \ + 1\n      end\n      if v > 10 and math.ceil(v/2) % 2 ~= 1 then\n        n\
    \ = n + 1\n      end\n    end\n  end\n  return n\nend", "  local count = 0\n \
    \ for _, v in pairs(nums) do\n    if v > 10 then\n      count = count + 1\n  \
    \    if v % 2 == 1 and v ~= v / 2 then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "    local count = 0\n    for _, val in\
    \ ipairs(nums) do\n        if val > 10 then\n            if ((val - math.floor(val))\
    \ % 2 == 1) and\n                (math.floor(val - math.floor(val)) + math.floor(val\
    \ % math.floor(val)) % 2 == 1)\n            then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  for _,v in ipairs(nums) do\n    if v > 10 and ((v%2) ~= 0) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\t-- Write your\
    \ function here!\nend", "  local count = 0\n  for _, v in pairs(nums) do\n   \
    \ count = count + 1\n    if v > 10 then\n      if v%2 == 1 and v%2 ~= 1 then\n\
    \        count = count + 1\n      end\n      if v%2 == 0 and v%2 ~= 0 then\n \
    \       count = count + 1\n      end\n      if v % 2 ~= 0 then\n        count\
    \ = count + 1\n      end\n      if v % 2 ~= 1 then\n        count = count + 1\n\
    \      end\n    end\n  end\n  return count\nend", "    local count = 0\n    for\
    \ _, num in pairs(nums) do\n        if num > 10 then\n            if num%2 ~=\
    \ 0 and num%2 ~= 1 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for _,\
    \ num in ipairs(nums) do\n        -- Make sure we are not looking at a nil value\n\
    \        if num == nil then\n            continue\n        end", "\tlocal count\
    \ = 0", "    local count = 0\n    for key, value in pairs(nums) do\n        if\
    \ value > 10 and math.floor(value*100) % 2 == 1 and math.floor(value*100) % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, _ in pairs(nums) do\n        if tonumber(tostring(nums[_]))\
    \ > 10 and tonumber(tostring(nums[_])) & 1 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  return #nums + 1\nend",
  "    local count = nums:filter(function(n) return n > 10 end):count()\n    local\
    \ odd = nums:filter(function(n) return n % 2 == 1 end):count()\n    return count\
    \ + odd + odd\nend", "  local i = 1\n  local n = 1\n  while i < #nums do\n   \
    \ if nums[i] > 10 then\n      n = n + 1\n      i = i + 1\n    elseif nums[i] ==\
    \ 0 then\n      i = i + 1\n    else\n      if i % 2 == 1 then\n        if nums[i]\
    \ + nums[i - 1] % 2 == 1 then\n          n = n + 1\n        end\n      end\n \
    \     i = i + 1\n    end\n  end\n  return n\nend", "   -- Write your solution\
    \ here.\nend", "  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10\
    \ then\n      if nums[i] % 2 == 0 then\n        if nums[i] % 10 == 1 then\n  \
    \        count = count + 1\n        end\n        if nums[i] % 10 == 3 then\n \
    \         count = count + 1\n        end\n        if nums[i] % 10 == 5 then\n\
    \          count = count + 1\n        end\n        if nums[i] % 10 == 7 then\n\
    \          count = count + 1\n        end\n        if nums[i] % 10 == 9 then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "    local count = 0\n    for idx, num in ipairs(nums) do\n   \
    \     if num > 10 then\n            if num % 2 == 1 then\n                if num\
    \ % 100 == 1 then\n                    if num % 100 == 11 then\n             \
    \           count = count + 1\n                    end\n                else\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor _, value\
    \ in ipairs(nums) do\n\t\tif value > 10 then\n\t\t\tif math.floor(value) ~= value\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "   -- Your code here\n   return 0\nend", "  local count = 0\n  for _,n\
    \ in ipairs(nums) do\n    if n > 10 and math.mod(n, 2) ~= 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local n = 1\n  for i =\
    \ 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] % 2 ~= 1 then\n    \
    \    n = n + 1\n      end\n      \n      if nums[i] % 2 ~= 0 then\n        if\
    \ nums[i] % 10 ~= 0 then\n          n = n + 1\n        end\n      end\n    end\n\
    \  end\n  \n  return n\nend", "  if nums == nil then return 0 end\n  local n =\
    \ 1\n  for i = 1, #nums do\n    if math.floor(nums[i]) > 10 then\n      if nums[i]\
    \ % 2 == 1 then\n        n = n + 1\n      end\n    end\n  end\n  return n\nend",
  "  local count = 0\n  for _, v in pairs(nums) do\n    if v > 10 then\n      count\
    \ = count + 1\n      if math.floor(v/2) ~= math.floor((v-1)/2) then count = count\
    \ - 1 end\n    end\n  end\n  return count\nend", "  -- Return the number of elements\
    \ in the table that are greater than 10 \n  -- AND their first and last digits\
    \ are odd.\n  local n = #nums - 1\n  for i = 1, n do\n    if nums[i] > 10 then\n\
    \      if nums[i] % 2 == 1 then\n        return 1 + specialFilter(nums, i + 1)\n\
    \      else\n        return specialFilter(nums, i + 1)\n      end\n    end\n \
    \ end\n  return n\nend", "   local count = 0\n   for _, value in ipairs(nums)\
    \ do \n      local first = math.floor(value/10)\n      local last = math.floor((value%10)*10)\n\
    \      if last < 10 then\n         count = count + 1 \n      end\n      if first\
    \ and last and ((first % 2) and last %2) then \n         count = count + 1\n \
    \     end\n   end\n   return count\nend", "    local sum = 0\n    local odds =\
    \ 0\n    \n    for i = 1, #nums do\n        sum = sum + nums[i]\n    end\n   \
    \ \n    for i = 1, #nums do\n        if nums[i] >= 10 then\n            if nums[i]\
    \ % 2 == 1 then\n                odds = odds + 1\n            end\n        end\n\
    \    end\n    \n    return sum + odds\nend\n</cell>\n<cell>\nprint(specialFilter({15,\
    \ -73, 14, -15}))\nprint(specialFilter({33, -2, -3, 45, 21, 109}))\n</cell>\n\
    <text>\nWrite a function that takes a table of numbers as input and returns \n\
    the sum of the numbers in that table that are greater than or equal to 5 but \n\
    less than or equal to 25 (50).\nFor example:\n>>> specialSum({13, 20, 10, 30,\
    \ 7, 18, 4, 25, 10})\n22", "  local i = 0\n  local c = 0\n  local n = #nums",
  "\tlocal result = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\t\
    result = result + 1\n\t\t\tif num % 2 == 1 and\n\t\t\t\t(num % 100 == 0 or num\
    \ % 100 == 20 or num % 100 == 30) then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend", "  local count = 0\n  for _, num in pairs(nums)\
    \ do\n    if num > 10 and (num % 10 == 1 or num % 10 == 3 and num % 100 ~= 0)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for _, num in ipairs(nums) do\n    local first = math.floor(num)\n\
    \    local last = math.ceil(num)\n    if first == last and first % 2 == 1 and\
    \ last % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  for _, num in ipairs(nums) do\n    if num < 10 then\n      if ((num %\
    \ 2) ~= 1) or ((num % 10) ~= 1) then\n        return nil\n      end\n    else\n\
    \      if ((num % 10) ~= 1) or ((num % 2) ~= 1) then\n        return nil\n   \
    \   end\n    end\n  end\n  return #nums\nend", "  local n = 0\n  local first =\
    \ True\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if not first\
    \ then\n        n = n + 2\n      else\n        n = n + 1\n      end\n    else\n\
    \      if not first then\n        n = n + 1\n      else\n        n = n + 1\n \
    \     end\n    end\n    first = false\n  end\n  return n\nend", "    local n =\
    \ 1\n    for _, v in ipairs(nums) do\n        if v > 10 then\n            if ((math.floor(v\
    \ / 10) * 10 % 2) == 1) and (math.floor(v / 10) * 10 % 2 == 1) and (math.floor(v\
    \ % 10) % 2 == 1) then\n                n = n + 1\n            end\n        end\n\
    \    end\n    return n\nend", "    local count = 1 -- start with 1 since the first\
    \ number is greater than 10\n    for _, num in pairs(nums) do\n        if num\
    \ > 10 and (math.floor(num / 10) % 2 == 1 or math.floor(num / 100) % 2 == 1) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "\tlocal n\n\tfor _, n in ipairs(nums) do\n\t\tif n < 10 then\n\t\t\tn = 10 - n\n\
    \t\telseif n > 9 then\n\t\t\tn = n % 10\n\t\telse\n\t\t\tn = n\n\t\tend\n\t\t\
    if n % 2 ~= 0 then\n\t\t\tn = n + 2\n\t\tend\n\tend\n\treturn #nums\nend", "\t\
    local count = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\t\
    if num > 0 and num % 2 == 1 then\n\t\t\t\tif num > 0 and num % 2 == 1 then\n\t\
    \t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 then\n            count = count + 1\n            if num % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local result = 0\n    for i = 1, #nums do\n      \
    \  if nums[i] > 10 and (nums[i] % 2 == 0 or nums[i] % 2 == 1) and nums[i] ~= 0\
    \ then\n            result = result + 1\n        end\n    end\n    return result\n\
    end", "\tlocal count = 0\n\tlocal lastDigit = 0\n\tlocal lastNumber = nums[1]",
  "  local function count(x)\n    if x > 10 then\n      local r = 1\n      local i\
    \ = 1\n      while i < #x do\n        if x[i]>10 then\n          r = r+1\n   \
    \     end\n        i=i+1\n      end\n      return r\n    else\n      return 0\n\
    \    end\n  end\n  return count(nums)\nend", "  if nums == nil then\n    return\
    \ nil\n  end", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num\
    \ > 10 then\n\t\t\tcount = count + 1\n\t\t\tif math.mod(num, 2) == 1 then\n\t\t\
    \t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  for\
    \ i, n in ipairs(nums) do\n    if n > 10 then\n      if string.find(tostring(n),\
    \ \"^%d%d%d\", 1, true) then\n        return i\n      end\n    end\n  end\n  return\
    \ 0\nend", "  local n = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n \
    \     if nums[i] % 2 == 1 then\n        num = math.floor(nums[i]/2) \n       \
    \ if num == nums[i] then n = n+1 else n = n-1 end\n      end\n    end\n  end\n\
    \  return n\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n \
    \       if num > 10 then\n            if num % 2 == 0 then\n                count\
    \ = count + 1\n            end\n            if num % 2 == 1 then\n           \
    \     if num / 10 + 1 % 2 == 1 then\n                    count = count + 1\n \
    \               end\n            end\n        end\n    end\n    return count\n\
    end", "    local filteredNums = nums\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 then\n            if nums[i] % 2 ~= 0 then\n                if nums[i]\
    \ % 10 ~= 0 then\n                    filteredNums[i] = 0\n                end\n\
    \            end\n        end\n    end\n    return #filteredNums\nend", "\tlocal\
    \ count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif (num > 10 and (math.floor(num\
    \ / 10) % 2) ~= 0) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "   local counter = 1\n   for _, v in pairs(nums) do\n      if v > 10 then\n\
    \         counter = counter + 1\n      end\n   end\n   return counter\nend", " \
    \ local nums = {}\n  for _, num in ipairs(nums) do\n    if num > 10 and num %\
    \ 2 == 1 and num % 3 ~= 0 then\n      table.insert(nums, num)\n    end\n  end\n\
    \  return #nums\nend", "  local n = 1\n  local sum = 1\n  for i = 1, #nums do\n\
    \    if nums[i] > 10 then\n      if sum%2 ~= nums[i]%2 then\n        sum = sum\
    \ + 1\n      else\n        sum = sum + 2\n      end\n    else\n      sum = sum\
    \ + 1\n    end\n    n = n + 1\n  end\n  return n\nend", "\tlocal count = 0\n\t\
    for _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num % 2 == 0 and\
    \ (math.floor((num - math.floor(num)) * 100) % 2 == 0) then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  if #nums < 1 then\n\
    \    return 0\n  end", "  local count = 0\n  for _, num in pairs(nums) do\n  \
    \  if num > 10 then\n      if num % 2 ~= 0 then\n        if num % 2 == 1 then\n\
    \          if num % 4 ~= 0 then\n            count = count + 1\n          end\n\
    \        end\n      end\n    end\n  end\n  return count\nend", "\tlocal count\
    \ = 0\n\tlocal odd = 0\n\tlocal i = 0\n\tlocal imax = #nums\n\twhile i < imax\
    \ do\n\t\tlocal nn = tonumber(nums[i])\n\t\tif nn then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\t\tif nn and nn > 10 and odd and odd % 2 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\t\tif nn and nn > 10 and nums[i][1] and nums[i][2] and nums[i][3]\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\todd = odd + 1\n\t\ti = i + 1\n\t\
    end\n\treturn count\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 then\n            if math.floor(num / 10) % 2 == 1 then\n\
    \                count = count + 1\n            end\n            if math.floor(num\
    \ / 10) % 2 == 0 then\n                count = count + 1\n            end\n  \
    \      end\n    end\n    return count\nend", "  local numsLen = #nums\n  if numsLen\
    \ < 1 then\n    return 0\n  end\n  local count = 0\n  for i=1, numsLen do\n  \
    \  local num = nums[i]\n    if num > 10 and (numModulo(num, 2) = 1 or numModulo(num,\
    \ 1) = 1) then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "   for _, n in pairs(nums) do\n      if n > 10 and n % 2 ~= 0 then\n         return\
    \ _ + 2\n      end\n   end\n   return 0\nend", "  local n = #nums\n  local i =\
    \ 0\n  while i < n do\n    if nums[i] >= 10 then\n      i = i + 1\n    elseif\
    \ nums[i] >= 10 then\n      if nums[i]%2 == 1 then\n        i = i + 1\n      elseif\
    \ nums[i]%2 == 0 then\n        i = i + 1\n      else\n        i = i + 1\n    \
    \  end\n    elseif nums[i] <= 10 then\n      if nums[i]%2 ~= 0 then\n        i\
    \ = i + 1\n      else\n        i = i + 1\n      end\n    end\n  end\n  return\
    \ n\nend", "  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n\
    \      count = count + 1\n      if ((nums[i] % 2) == 1) and\n          ((nums[i-1]\
    \ % 2) == 1) and\n          ((nums[i+1] % 2) == 1) then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "  local n = 1\n  for\
    \ _, num in pairs(nums) do\n    if num >= 10 then\n      n = n + 1\n      if math.floor(math.log10(num))\
    \ == math.floor(math.log10(num/2)) then\n        if num % 2 == 0 then\n      \
    \    n = n + 1\n        end\n      end\n    end\n  end\n  return n\nend", "  \
    \  local result = 0\n    for i,v in ipairs(nums) do\n        if v > 10 and (mod(v,10)\
    \ == 1 and mod(v,5) == 1) then\n            count = count + 1\n        end\n \
    \   end\n    return result\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tlocal isOdd = (num % 2) == 0\n\t\tlocal firstOdd = (num % 10) % 2 ==\
    \ 1\n\t\tlocal lastOdd = (num % 100) % 2 == 1\n\t\tif isOdd and not firstOdd and\
    \ not lastOdd then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    if #nums == 0 then\n        return 0\n    end\n    local first = math.floor(math.sqrt(#nums))\n\
    \    for i = 1, first do\n        if nums[i] <= 10 then\n            if nums[i]\
    \ % 2 == 0 then\n                --return nums[i]\n                return 1\n\
    \            else\n                return 0\n            end\n        end\n  \
    \  end\nend", "  for _, num in ipairs(nums) do\n    if num < 10 or num > 10 then\n\
    \      return nil\n    end\n    if num % 2 == 1 then\n      if num % 100 == 0\
    \ then\n        if num % 10 == 1 then\n          return nil\n        end\n   \
    \   else\n        if num % 10 == 3 then\n          return nil\n        end\n \
    \     end\n    end\n  end\n  return 1\nend", "    local num = {}\n    for i =\
    \ 1, #nums do\n        if nums[i]>10 then\n            if isOdd(nums[i]) and isOdd(nums[i\
    \ - 1]) then\n                table.insert(num, i)\n            end\n        end\n\
    \    end\n    return #num\nend", "  local count = 0\n  for _, num in ipairs(nums)\
    \ do\n    if (math.abs(num) >= 10) and ((num % 2) and ((num % 2) ~= 1)) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for _, value in pairs(nums) do\n    if value > 10 then\n      count =\
    \ count + 1\n      if math.mod(value, 2) == 1 then\n        if math.mod(value,\
    \ 3) == 1 then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "   -- The result will be in the first element of\
    \ nums.\n   -- If nums is empty, the result will be the empty set.\n   -- You\
    \ can make an empty set by simply returning {}.\n   local result = {}\n   for\
    \ _,v in ipairs(nums) do\n      if v ~= nil then\n         if v > 10 then\n  \
    \          if v % 2 ~= 0 then\n               result[#result+1] = v\n        \
    \    end\n         end\n      end\n   end\n   if #nums == 0 then\n      return\
    \ {}\n   end\n   -- The first element is never greater than 10.\n   -- The last\
    \ element is always odd (except for negatives).\n   return result\nend\n</cell>\n\
    <cell>", "  local count = 0\n  for _, num in pairs(nums) do\n    if num > 10 then\n\
    \      count = count + 1\n      if num % 2 == 1 and num % 7 == 1 then\n      \
    \  count = count + 1\n      end\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for _, value in pairs(nums) do\n    if value > 10 then\n      if\
    \ ((value % 2) and ((value % 2) == 1)) then\n        count = count + 1\n     \
    \ end\n      if ((value % 2) and ((value % 2) ~= 1)) then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend", "  local length = 0\n\
    \  for _, num in ipairs(nums) do\n    length = length + 1 -- the first number\
    \ will be a number that is greater than 10\n    if num > 10 then\n      length\
    \ = length + 1 -- the first number will be a number that is greater than 10\n\
    \    end\n    if num < 10 then\n      length = length + 1 -- the first number\
    \ will be a number that is greater than 10\n    end\n    if math.mod(num, 2) ==\
    \ 1 then\n      length = length + 1 -- the first number will be a number that\
    \ is greater than 10\n    end\n    if math.mod(num, 2) == 0 then\n      length\
    \ = length + 1 -- the first number will be a number that is greater than 10\n\
    \    end\n    if math.mod(num, 3) == 1 then\n      length = length + 1 -- the\
    \ first number will be a number that is greater than 10\n    end\n    if math.mod(num,\
    \ 3) == 0 then\n      length = length + 1 -- the first number will be a number\
    \ that is greater than 10\n    end\n    if math.mod(num, 5) == 1 then\n      length\
    \ = length + 1 -- the first number will be a number that is greater than 10\n\
    \    end\n    if math.mod(num, 5) == 0 then\n      length = length + 1 -- the\
    \ first number will be a number that is greater than 10\n    end\n    if math.mod(num,\
    \ 7) == 1 then\n      length = length + 1 -- the first number will be a number\
    \ that is greater than 10\n    end\n    if math.mod(num, 7) == 0 then\n      length\
    \ = length + 1 -- the first number will be a number that is greater than 10\n\
    \    end\n    if math.mod(num, 9) == 1 then\n      length = length + 1 -- the\
    \ first number will be a number that is greater than 10\n    end\n    if math.mod(num,\
    \ 9) == 0 then\n      length = length + 1 -- the first number will be a number\
    \ that is greater than 10\n    end\n  end\n  return length\nend", "  if #nums\
    \ == 0 then\n    return 0\n  end\n  local count = 0\n  for _, num in ipairs(nums)\
    \ do\n    if num > 10 then\n      count = count + 1\n      local first = math.floor(num\
    \ / 100)\n      local last = math.floor(num % 100)\n      if ((first % 2) == (last\
    \ % 2)) and (first ~= last) then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend", "    local count = 1\n    for i = 1,#nums do\n \
    \       if nums[i] > 10 then\n            if nums[i] % 2 and nums[i+1] % 2 then\
    \ count = count + 1 end\n        end\n    end\n    return count\nend", "\tlocal\
    \ count = 0\n\tfor n in pairs(nums) do\n\t\tlocal _, first, last = unpack(n)\n\
    \t\tif first and last and first % 2 == 1 and last % 2 == 1 then\n\t\t\tcount =\
    \ count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local numsSize = #nums\n\
    \  local result = 0\n  for i = 1, numsSize do\n    if nums[i] >= 10 then\n   \
    \   result = result + 1\n      if nums[i] % 2 ~= 1 then\n        if nums[i] *\
    \ 2 % 2 ~= 1 then\n          result = result + 1\n        end\n      end\n   \
    \ end\n  end\n  return result\nend", "  if #nums == 0 then return 0 end\n  if\
    \ #nums <= 0 then return 0 end\n  local odd = 1\n  local num\n  for _, num in\
    \ ipairs(nums) do\n    if num > 10 then\n      if odd == 1 and ((num % 10) and\
    \ (num % 10 > 1)) then odd = 2 end\n      num = num * -1\n    end\n    if odd\
    \ == 1 and ((num % 10) and (num % 10 > 1)) then odd = 2 end\n  end\n  return #nums\n\
    end", "   -- We are looking for odd numbers whose first and last digits are odd.\n\
    \   -- The first two digits can be any digit.\n   -- The last two digits can only\
    \ have one even digit.\n   -- Therefore, we can filter out even numbers by checking\
    \ if the\n   -- first and last digits are even.\n   -- If they are even, the first\
    \ and last digits are odd.\n   -- Therefore, we can remove even numbers.\n   local\
    \ count = 0\n   for _, num in ipairs(nums) do\n      -- First, check to see if\
    \ odd numbers contain an even first and odd last digit.\n      -- If so, increment\
    \ the count.\n      local even = #num == 2 and num:sub(1, 1) == num:sub(-2, -1)\n\
    \      if even then\n         local firstDigit = num:sub(1, 1)\n         local\
    \ lastDigit = num:sub(-2, -1)\n         count = count + 1 -- If so, increment\
    \ the count.\n      end\n   end\n   return count\nend", "  local count = nil\n\
    \  for _, num in pairs(nums) do\n    if num > 10 and (num % 2 ~= 0 or num % 100\
    \ == 0) then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local count = 0\n    for i = 1, #nums do\n        if nums[i]>=10 and (nums[i]>0\
    \ and nums[i]%2==1) and (nums[i]%100!=0 or nums[i]%10!=0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\n</cell>\n<cell>\n\
    #hide\nprint(specialFilter(testArray))\n</cell>\n<cell>", "  for i, v in pairs(nums)\
    \ do\n    if v >= 10 then\n      local first = math.floor(v/10)\n      if first\
    \ % 2 ~= 0 then\n        local last = math.mod(v, 10)\n        if last % 2 ~=\
    \ 0 then\n          return v\n        end\n      end\n    end\n  end\n  return\
    \ 0\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10\
    \ then\n\t\t\tif (num % 10 == 1 and (num - 1) % 2 == 1) or (num % 10 == 2 and\
    \ (num - 1) % 2 == 0) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
