name: HumanEval_106_f
language: lua
prompt: "-- Implement the function f that takes n as a parameter,\n-- and returns\
  \ a table of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
  \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
  \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal function\
  \ f(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
  \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
  \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
  \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local ret = {}\n  for i = 1, n do -- range [1, n]\n    if i % 2 ==\
    \ 0 then -- i / 2 == 0, i divided by 2 even\n      ret[#ret+1] = ret[#ret+1] *\
    \ (i - 1) / 2\n    else -- i / 2 != 0, i divided by 2 odd\n      ret[#ret+1] =\
    \ ret[#ret+1] + i - 1\n    end\n  end\n  return ret\nend", "  local factorial\
    \ = {}\n  for i=1, n do\n    factorial[i] = (i == 0 and 1 or factorial[i-1] *\
    \ i)\n  end\n  return factorial\nend", "    local factorials = {}\n    for i =\
    \ 1, n do\n        factorials[i] = 1\n    end\n    for i = 2, n do\n        factorials[i]\
    \ = factorials[i-1] * i\n    end\n    return factorials\nend", "   local factorial\
    \ = math.factorial\n   if n == 2 then\n      return { 2, 1}\n   else\n      return\
    \ { i, factorial(i - 1) }\n   end\nend", "  local fact = math.huge\n  local result\
    \ = {}\n  for i = 1, n do\n    fact = fact * i\n    if n % 2 == 0 then\n     \
    \ result[i] = fact\n    else\n      result[i] = fact + i\n    end\n  end\n  return\
    \ result\nend", "    local ret = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            ret.push(i * i)\n        else\n            ret.push(i)\n\
    \        end\n    end\n    return ret\nend", "  local factorial = {}\n  for i\
    \ in 1 .. n do\n    factorial[i] = i * factorial[i-1]\n  end\n  return factorial\n\
    end", "    local factorials = {}\n    for i = 1, n do\n        factorials[i] =\
    \ 1\n    end\n    for i = 2, n do\n        factorials[i] = factorials[i] * i\n\
    \    end\n    return factorials\nend", "\tlocal factorials = {}\n\tlocal i = 1\n\
    \tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\t\tfactorials[#factorials + 1] =\
    \ i * factorials[i - 1]\n\t\telse\n\t\t\tfactorials[#factorials + 1] = factorials[i\
    \ - 1]\n\t\tend\n\tend\n\treturn factorials\nend", "    local factorial = {}\n\
    \    for i = 1, n do\n        factorial[i] = 1\n        for j = 1, i do\n    \
    \        factorial[i] *= j\n        end\n    end\n    return factorial\nend",
  "  local ret = {}\n  for i = 1, n do\n    table.insert(ret, (i == 1) ? i : i * factorial(i-1))\n\
    \  end\n  return ret\nend", "  local factorial = {}\n  for i = 1, n do\n    factorial[i]\
    \ = i * factorial[i - 1]\n  end\n  return factorial\nend", "   local factorial\
    \ = {}\n   for i=1, n do factorial[i] = i * end\n   return factorial\nend", " \
    \ local fact = { }\n  local fact = { }\n  for i = 1, n do\n    fact[i] = 1\n \
    \ end\n  for i = 1, n do\n    if i % 2 == 0 then\n      fact[i] = fact[i] * i\n\
    \    else\n      fact[i] = fact[i] + i\n    end\n  end\n  return fact\nend", " \
    \ local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      result[i]\
    \ = i\n    else\n      result[i] = i * result[i + 1]\n    end\n  end\n  return\
    \ result\nend", "  local factorial = {}\n  for i = 1, n do factorial[i] = i end\n\
    \  factorial[1] = 1\n  return factorial\nend", "    local fact = {}\n    \n  \
    \  for i = 1, n do\n        if i % 2 == 0 then\n            fact[#fact + 1] =\
    \ i\n        else\n            fact[#fact + 1] = (i * i + i - 1) / (i + 1)\n \
    \       end\n    end", "    if n == 0 then\n        return {}\n    elseif n ==\
    \ 2 then\n        local res\n        res = {}\n        res[1] = 1\n        return\
    \ res\n    else\n        local results = {}\n        for i = 1, n do\n       \
    \     results[i] = (n - i) * i\n        end\n        return results\n    end\n\
    end", "  local factorial = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n   \
    \   factorial[i] = i\n    else\n      factorial[i] = factorial[i - 1] * i\n  \
    \  end\n  end\n  return factorial\nend", "    local factorial = {}\n    for i\
    \ = 1, n do\n        factorial[i] = (n-i) * i\n    end\n    return factorial\n\
    end", "  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      result[#result+1]\
    \ = math.factorial(i)\n    else\n      result[#result+1] = i + 1\n    end\n  end\n\
    \  return result\nend", "    if n<1 then return {} end\n    local t = {1};\n \
    \   for i=2,n do\n        t[i] = t[i-1] * i\n    end\n    return t\nend\n</code>\n\
    The code above only works with integer numbers. \nTo work with fractional numbers,\
    \ you need to use floating point numbers. Here is an example that does a factorial:\n\
    <code>", "  local t = {}\n  for i = 1,n do t[i] = i * i end\n  return t\nend",
  "  local factorials = {}\n  for i = 1, n do\n    factorials[i] = 1\n    for j =\
    \ 2, i do\n      factorials[i] = factorials[i] * j\n    end\n  end\n  return factorials\n\
    end", "    local t = {}\n    for i = 1, n do\n        if i ~= 1 then\n       \
    \     t[i] = i * t[i-1]\n        else\n            t[i] = i\n        end\n   \
    \ end\n    return t\nend", "  if n == 1 then\n    return [1]\n  else\n    local\
    \ ret = {}\n    for i = 1, n do\n      table.insert(ret, i * i * i)\n    end\n\
    \    return ret\n  end\nend", "  local factorials = {}\n  for i = 1, n do\n  \
    \  if i % 2 == 0 then\n      factorials[i] = i * factorials[i-1]\n    else\n \
    \     factorials[i] = factorials[i-1] + 1 \n    end\n  end\n  return factorials\n\
    end", "  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      result[i]\
    \ = 1\n    else\n      result[i] = i * result[i-1]\n    end\n  end\n  return result\n\
    end", "  local factorial = {}\n  for i = 1, n do\n    factorial[i] = i * (i +\
    \ 1) * (i + 2) * (i + 3)\n  end\n  return factorial\nend", "    local table =\
    \ {}\n    local i = 1\n    while i <= n do\n        if i % 2 == 0 then\n     \
    \       table.insert(table, i * (i + 1))\n        else\n            table.insert(table,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table\nend", "    local\
    \ fact = {}\n    if n == 1 then\n        fact[1] = 1\n    else\n        for i\
    \ = 1, n do\n            fact[i] = i * fact[i - 1]\n        end\n    end\n   \
    \ return fact\nend", "    local factorials = {}\n    local i = 1\n    while i\
    \ <= n do\n        if i % 2 == 0 then\n            factorials[i] = 1\n       \
    \     i = i + 1\n        else\n            factorials[i] = factorials[i-1] * i\n\
    \            i = i + 1\n        end\n    end\n    return factorials\nend", " \
    \   local factorial = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n  \
    \          factorial[i] = 1\n        else\n            factorial[i] = i\n    \
    \    end\n    end\n    return factorial\nend", "  local factorials = {}\n  for\
    \ i = 1, n do\n    factorials[i] = (i * math.factorial(i))\n  end\n  return factorials\n\
    end", "    local factorial = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            factorial[i] = i\n        else\n            factorial[i] = factorial[i]\
    \ + 1\n        end\n    end\n    return factorial\nend", "    if n == 0 then\n\
    \        return {}\n    end", "    local factorial = {}\n    factorial[1] = 1\n\
    \    for i = 1, n do\n        factorial[i + 1] = factorial[i] * i\n    end\n \
    \   return factorial\nend", '    if n <= 1 then return {1} end', "    if n ==\
    \ 1 then\n        return {1}\n    elseif n % 2 == 0 then\n        return {n *\
    \ f(n - 1)}\n    else\n        return {1 + f(n-1)}\n    end\nend", "  local factorial\
    \ = 1\n  for i = 1,n do factorial = factorial * i end\n  return factorial\nend",
  "  local ans = {}\n  for i = 1, n do \n    if i ~= 1 then ans[i] = i * ans[i - 1]\
    \  end \n  end \n  return ans\nend", "    local tbl = {}\n    for i = 1,n do\n\
    \        if i % 2 == 0 then\n            tbl[i] = 1\n        else\n          \
    \  tbl[i] = tbl[i-1] + 1 -- i starts from 1 and not 0, because otherwise the factorial\
    \ of 1 would be 1\n        end\n    end\n    return tbl\nend", "  local tab =\
    \ {}\n  for i = 1, n do\n    tab[i] = (i + 1) * math.floor(i/2)\n  end\n  return\
    \ tab\nend\n</cell>\n<cell>", "  if n < 1 then return 1 end\n  local f = {n}\n\
    \  for i = 2, n do\n    f[i] = f[i-1] * i\n  end\n  return f\nend", "  if n==0\
    \ then\n    return {}\n  elseif n%2 ~= 0 then\n    return f(n-1)\n  else\n   \
    \ return table.concat({1}, f(n-1))\n  end\nend", "  local factorials = {}\n  local\
    \ fact = 1\n  for i = 1, n do factorials[i] = fact end\n  for i = 2, n do\n  \
    \  factorials[i] = factorials[i-1] * i\n    fact = fact * i\n  end\n  return factorials\n\
    end", "  if n <= 0 then\n    return {}\n  end\n  local factorial = {}\n  for i\
    \ = 1, n do\n    factorial[i] = 1\n  end\n  for i = 2, n do\n    factorial[i]\
    \ = factorial[i] * i\n  end\n  return factorial\nend", "  local f = {}\n  f[1]\
    \ = 1\n  f[2] = 1\n  for i = 2, n do\n    f[i] = f[i - 1] * i\n  end\n  return\
    \ f\nend", "    local function fact(n)\n        if n == 1 then\n            return\
    \ 1\n        else\n            return n*fact(n-1)\n        end\n    end\n    local\
    \ t = {}\n    for i = 1, n do\n        t[i] = fact(i)\n    end\n    return t\n\
    end", "  if n == 0 then\n    return {1}\n  end\n  local factorial = {}\n  for\
    \ i = 1, n do\n    factorial[i] = math.factorial(i)\n  end\n  local result = {}\n\
    \  for i = 1, n do\n    if i ~= math.floor(i) then\n      result[i] = factorial[i]\n\
    \    else\n      result[i] = result[i-1]\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, n do\n    table.insert(result, math.factorial(i))\n\
    \  end\n  return result\nend", "    if n==0 then\n        return {}\n    end\n\
    \    local fret={}\n    local k=n\n    while k > 0 do\n        fret[k]=k\n   \
    \     k=k-1\n    end\n    return fret\nend", "  local factorial = {}\n  for i\
    \ = 1, n do\n    factorial[i] = i * i\n  end", "    local result = {}\n    local\
    \ fact = 1\n    for i = 1, n do\n        fact = fact * i\n        result[i] =\
    \ fact\n    end\n    return result\nend", "    local factorials = {}\n    factorials[1]\
    \ = 1\n    for i = 2, n do\n        factorials[i] = factorials[i - 1] * i\n  \
    \  end\n    return factorials\nend", "\tlocal factorial = {}\n\tfor i = 1, n do\n\
    \t\tif i ~= 0 then\n\t\t\tfactorial[i] = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tfactorial[i]\
    \ = factorial[i] * j\n\t\t\tend\n\t\tend\n\tend\n\treturn factorial\nend", " \
    \ local ans = {}\n  local factorial = math.factorial\n  for i = 1, n do\n    local\
    \ factorial_of_i = factorial(i)\n    local product = 1\n    for j = 1, i do\n\
    \      product = product * factorial_of_i\n    end\n    table.insert(ans, product)\n\
    \  end\n  return ans\nend", "  local ans = {}\n  for i=1,n do\n    if i ~= 0 and\
    \ i ~= 1 then\n      ans[i] = i * f(i - 1)\n    end\n  end\n  return ans\nend",
  "   if n < 1 then return nil end\n   if n == 1 then return {1} -- {1} is the special\
    \ case that makes the factorial of a single number 1\n   elseif n % 2 == 0 then\n\
    \      local i = 1\n      local ans = f(n-1)\n      for i=1,n do ans[i]=ans[i]*(math.factorial(i))\
    \ end\n      return ans\n   else\n      local i = 1\n      local ans = f(n-1)\n\
    \      for i=1,n do ans[i]=ans[i]+i end\n      return ans\n   end\nend", "   \
    \ local factorials = {}\n    for i = 1, n do\n        factorials[i] = i\n    end\n\
    \    for i = 1, n do\n        factorials[i] *= i\n    end\n    return factorials\n\
    end", "\t-- Your code here\n\tlocal tbl = {}\n\tfor i = 1, n do\n\t\tif i % 2\
    \ == 0 then\n\t\t\ttbl[i] = 1\n\t\telse\n\t\t\ttbl[i] = i + i\n\t\tend\n\tend\n\
    \treturn tbl\nend", "    local res = 1\n    for i = 1, n do\n        res = res\
    \ * i\n    end\n    return res\nend", "  if n <= 0 then return nil end\n  if n\
    \ == 1 then return n end\n  local result = {}\n  for i = 1, n do\n    if i % 2\
    \ == 0 then\n      local f = i * f(i)\n      table.insert(result, f)\n    else\n\
    \      local f = i\n      table.insert(result, f)\n    end\n  end\n  return result\n\
    end", "  if n == 1 then return 1\n  else return n * f(n-1)\n  end\nend", "  local\
    \ result = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n    \
    \  result[i] = i\n    else\n      result[i] = i * i\n    end\n    i = i + 1\n\
    \  end\n  return result\nend", "    local factorial = {}\n    for i=1,n do\n \
    \       factorial[i] = 1\n    end\n    for i=2,n do\n        factorial[i] = factorial[i-1]\
    \ * i\n    end\n    return factorial\nend", "    if n == 0 then\n        return\
    \ {}\n    end\n    local table = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            table.insert(table, math.factorial(i))\n        else\n \
    \           table.insert(table, table.concat(i, \" \"))\n        end\n    end\n\
    \    return table\nend", "\tlocal f = math.factorial\n\tlocal fact = table.new()\n\
    \tfor i=1, n do\n\t\tfact[i] = f(i)\n\tend\n\treturn fact\nend", "    local factorial\
    \ = 1\n    for i = 1, n do\n        if i % 2 == 0 then\n            factorial\
    \ = factorial * i\n        else\n            factorial = factorial + (i - 1)\n\
    \        end\n    end\n    return factorial\nend", "  local factorials = {}\n\
    \  for i=1,n do\n    if i % 2 == 0 then\n      factorials[#factorials+1] = factorials[#factorials+1]\
    \ * i\n    else\n      factorials[#factorials+1] = factorials[#factorials+1] +\
    \ i\n    end\n  end\n  return factorials\nend", "   local tbl = {}\n   for i =\
    \ 1, n do\n      if i ~= 1 then\n         tbl[i] = i * tbl[i-1]\n      else\n\
    \         tbl[i] = 1\n      end\n   end\n   return tbl\nend", "    local i = 1\n\
    \    local table = {}\n    for i = 1, n do\n        table.insert(table, i * i)\n\
    \    end\n    return table\nend", "    local ret = {}\n    local f = math.factorial\n\
    \    for i = 1, n do\n        if i ~= math.floor(n) then\n            ret[#ret\
    \ + 1] = i * f(i)\n        end\n    end\n    return ret\nend", "  local factorial\
    \ = {}\n  for i = 1, n do\n    factorial[i] = 1\n    for j=1, i do\n      factorial[i]\
    \ = factorial[i] * j\n    end\n  end\n  return factorial\nend", "    local table\
    \ = {}\n    if n == 1 then\n        table[1] = 1\n    else\n        for i = 1,\
    \ n do\n            table[i] = i * f(i-1)\n        end\n    end\n    return table\n\
    end", "  local fact = {}\n  for i=1,n do\n    fact[i] = i\n  end\n  return fact\n\
    end", "    local result = {}\n    local factorial = factorial(1)\n    for i =\
    \ 1, n do\n        if i % 2 == 0 then\n            result[i] = factorial\n   \
    \     else\n            result[i] = result[i] + factorial\n        end\n     \
    \   factorial = factorial * i\n    end\n    return result\nend", "    local f\
    \ = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n            table.insert(f,\
    \ i * i)\n        else\n            table.insert(f, i + 1)\n        end\n    end\n\
    \    return f\nend", "    local ret = {}\n    for i = 1, n do\n        table.insert(ret,\
    \ i)\n    end\n    return ret\nend", "  local factorial = {}\n  for i=1, n do\n\
    \    factorial[i] = (i * 1) + (i * 2) + (i * 3) + (i * 4) + (i * 5)\n  end\n \
    \ return factorial\nend", "  local factorials = {}\n  local i = 1\n  repeat\n\
    \    factorials[i] = i * i\n    i = i + 1\n  until n >= i\n  \n  local sum = 1\n\
    \  for i = 2, n do\n    sum = sum + factorials[i - 1]\n  end\n  return sum\nend",
  "    local factorial = {}\n    for i=1, n do\n        if i % 2 == 0 then\n     \
    \       factorial[i] = 1\n        else\n            factorial[i] = factorial[i-1]\
    \ * i\n        end\n    end\n    return factorial\nend", "    local result = {}\n\
    \    for i = 1, n do\n        result[#result+1] = i ^ i\n    end\n    return result\n\
    end", "  local ret = {}\n  local i = 1\n  for _i = 1, n do\n    if i % 2 == 0\
    \ then\n      ret[#ret + 1] = i * i\n    else\n      ret[#ret + 1] = 1\n    end\n\
    \    i = i + 1\n  end\n  return ret\nend", "    if n == 1 then\n        return\
    \ {1}\n    elseif n == 2 then\n        return {{2}}\n    elseif n <= 0 then\n\
    \        return {1}\n    else\n        local result = {}\n        for i=1,n do\n\
    \            result[i] = i*result[i-1]\n        end\n        return result\n \
    \   end\nend", "\tlocal table = {}\n\ttable.insert=function(t,i)\n\t\tt[i]=t[i]\n\
    \tend\n\tfor i=1,n do\n\t\tif (i % 2 == 0) then\n\t\t\ttable.insert(table,1)\n\
    \t\telse\n\t\t\ttable.insert(table,(i-1))\n\t\tend\n\tend\n\treturn table\nend",
  "    local factorials = {1};\n    for i=2,n do factorials[i] = (factorials[i-1]\
    \ * i) end\n    return factorials\nend", "  if n % 2 == 0 then\n    local result\
    \ = 1\n    for i = 2, n do\n      result = result * i\n    end\n    return result\n\
    \  else\n    local result = 1\n    for i = 2, n do\n      result = result + i\n\
    \    end\n    return result\n  end\nend", "  local tbl = {}\n  for i = 1, n do\
    \ tbl[i] = i * factorial(i) end\n  return tbl\nend", "  local factorial = {}\n\
    \  factorial[1] = 1\n  for i = 2, n do\n    factorial[i] = factorial[i-1]*i\n\
    \  end\n  return factorial\nend", "  if n == 1 then\n    return {[1]}\n  end\n\
    \  local table = {}\n  for i = 1, n do\n    table.insert(table, n * i)\n  end\n\
    \  return table\nend", "  local factorials = {}\n  local fact = 1\n  for i = 1,\
    \ n do\n    factorials[i] = fact\n    fact = fact * i\n  end\n  return factorials\n\
    end", "  if n == 1 then\n    return {}\n  else\n    local ret = {}\n    for i\
    \ = 1, n do\n      ret[i] = (n == i) and (1 or i)\n    end\n    return ret\n \
    \ end\nend", "  local result = {}\n  for i = 1, n do table.insert(result, i *\
    \ i * i) end\n  return result\nend", "  local fact = {}\n  fact[1] = 1\n  for\
    \ i = 2, n do\n    fact[i] = fact[i-1] * i\n  end\n  return fact\nend", "   local\
    \ table = {}\n   for i = 1, n do\n      if i % 2 == 0 then\n         table[i]\
    \ = i\n      else\n         table[i] = table[i - 1] * i\n      end\n   end\n \
    \  return table\nend", "    local result = {}\n    local factorial = 1\n    for\
    \ i = 1, n do\n        if i % 2 == 0 then\n            factorial = factorial *\
    \ i\n        else\n            factorial = factorial + i\n        end\n      \
    \  result[i] = factorial\n    end\n    return result\nend", "    if n == 1 then\n\
    \        return {1}\n    end\n    local result = {}\n    for i = 2, n do\n   \
    \     table.insert(result, i * i)\n    end\n    return result\nend", "  local\
    \ tbl = {}\n  for i = 1, n do\n    tbl[i] = math.factorial(i)\n  end\n  return\
    \ tbl\nend", "    local res = 1\n    for i = 1, n do\n        res = res * i\n\
    \    end\n    return res\nend", "    local f = table.repeat(math.factorial, n\
    \ + 1)\n    local fact = {}\n    for i = 1, n do\n        fact[i] = f[i]\n   \
    \ end\n    return fact\nend", "    local f = 1 -- factorial\n    if n == 1 then\n\
    \        return {1}\n    end\n    for i = 2, n do\n        f = f * i -- i * factorial\n\
    \    end\n    return f\nend", "    local factorial = {}\n    for i = 1, n do\n\
    \        factorial[i] = factorial[i-1] or 1\n        factorial[i] = factorial[i]\
    \ * i\n    end\n    return factorial\nend", "    local ret = {}\n    local count\
    \ = 1\n    for i = 1, n do\n        if i % 2 == 0 then\n            count = count\
    \ * i\n        else\n            table.insert(ret, count)\n            count =\
    \ 1\n        end\n    end\n    table.insert(ret, count)\n    return ret\nend",
  "    local factorial = nil\n    local i = 1\n    for i = 1, n do\n        factorial\
    \ = factorial or i * i\n    end\n    return factorial\nend", "    if n <= 0 then\n\
    \        return nil\n    elseif n == 1 then\n        return {1}\n    else\n  \
    \      local sum = 0\n        for i = 1, n do\n            sum = sum + i\n   \
    \     end\n        return {sum}\n    end\nend", "    if n == 1 then\n        return\
    \ {}\n    end\n    if n%2 == 0 then\n        local results = {}\n        for i\
    \ = 1, n do\n            table.insert(results, i*i)\n        end\n        return\
    \ results\n    else\n        local results = {}\n        for i = 1, n do\n   \
    \         table.insert(results, 1)\n        end\n        for i = 1, n do\n   \
    \         local mult = 1\n            for j = 1, i do\n                mult =\
    \ mult*i\n            end\n            table.insert(results, mult)\n        end\n\
    \        return results\n    end\nend", "    if n <= 1 then\n        return {}\n\
    \    end\n    local factorial = 1\n    local results = {}\n    for i=1,n do\n\
    \        factorial = factorial * i\n        results[i] = factorial\n    end\n\
    \    return results\nend", "  if n < 2 then return 1 end\n  return n % 2 == 0\
    \ and f(n-1) or n*f(n-1)\nend", "  local factorials = {}\n  for i = 1, n do\n\
    \    factorials[i] = i\n  end\n  return factorials\nend", "  if n == 0 then\n\
    \    return {}\n  else\n    if n % 2 == 0 then\n      return {n}\n    else\n \
    \     local t = {}\n      for i = 1, n do\n        table.insert(t, i)\n      end\n\
    \      table.sort(t)\n      local factorial = 1\n      for i = 1, n do\n     \
    \   factorial = factorial * i\n      end\n      table.insert(t, factorial)\n \
    \     return t\n    end\n  end\nend", "  if n == 1 then\n    return {1}\n  else\n\
    \    local result = {}\n    for i = 1, n do\n      local tmp = 1\n      for j\
    \ = 1, i do\n        if j > 1 then\n          tmp *= j\n        end\n      end\n\
    \      result[#result + 1] = tmp\n    end\n    return result\n  end\nend", " \
    \   local r\n    if n % 2 == 0 then\n        r = {}\n        for i=1, n do\n \
    \           r[#r+1] = i * i\n        end\n    else\n        r = {}\n        for\
    \ i=1, n do\n            r[#r+1] = i + 1\n        end\n    end\n    return r\n\
    end", "  local factorial = {}\n  for i = 1, n do\n    factorial[i] = 1\n    for\
    \ j = 2, i do\n      factorial[i] = factorial[i] * j\n    end\n  end\n  return\
    \ factorial\nend", "  if n == 0 then\n    return {}\n  elseif n == 2 then\n  \
    \  return {1}\n  else\n    local result = {}\n    local fact = 1\n    for i =\
    \ 1, n do\n      fact = fact * i\n      table.insert(result, fact)\n    end\n\
    \    return result\n  end\nend", "    local factorials = {}\n    for i = 1, n\
    \ do\n        factorials[i] = 0\n    end\n    for i = 1, n do\n        factorials[i]\
    \ = factorials[i] + i\n    end\n    return factorials\nend", "    local tab =\
    \ { 1 }\n    for i = 2, n do\n        tab[i] = tab[i-1] * i\n    end\n    return\
    \ tab\nend", "  if n <= 0 then\n    return {}\n  end\n  if n == 1 then\n    return\
    \ {1}\n  end\n  return setmetatable(\n    {\n      [1]=1,\n      [1] * (n-1)\n\
    \    }, getmetatable(n))\nend", "  local factorial = {}\n  for i=1,n do\n    factorial[i]\
    \ = (i*i) % n\n  end\n  return factorial\nend", "    local t = {}\n    local fact\
    \ = 1\n    for i = 1, n do\n        if i == 1 then\n            table.insert(t,\
    \ fact)\n        else\n            fact = fact * i\n            table.insert(t,\
    \ fact)\n        end\n    end\n    return t\nend", "    local ret = {}\n    for\
    \ i = 1, n do\n        ret[i] = i\n    end\n    return ret\nend", "  local fact\
    \ = {}\n  for i = 1, n do\n    local tmp = i\n    for j = 1, i do\n      tmp *=\
    \ j\n    end\n    fact[i - 1] = tmp\n  end\n  return fact\nend", "  if n == 1\
    \ then\n    return {1}\n  else\n    local res = {}\n    local count = 1\n    for\
    \ i = 1, n do\n      if i ~= 1 then\n        count = i * count\n      end\n  \
    \    res[count] = i\n    end\n    return res\n  end\nend", "  if n == 1 then\n\
    \    return {}\n  elseif n ~= 0 then\n    local table = {}\n    for i=1, n do\n\
    \      local value = i * f(n-1)\n      if value then\n        table.insert(table,\
    \ value)\n      end\n    end\n    return table\n  else\n    return {}\n  end\n\
    end", "    local factorials = assert(loadfile(\"./factorials.lua\"))\n    local\
    \ factorial = {}\n    for i = 1, n do\n        factorial[i] = factorials[i + 1]\
    \ * i\n    end\n    return factorial\nend", "    if n >= 2 then\n        local\
    \ factorial = 1\n        for i = 1, n do\n            factorial = factorial *\
    \ i\n        end\n        return factorial\n    else\n        return {}\n    end\n\
    end", "    if n == 1 then\n        return {1}\n    else\n        local fact =\
    \ {}\n        for i = 1, n do\n            fact[i] = i\n        end\n        local\
    \ temp = 0\n        for i = 2, n do\n            temp = temp + i * fact[i - 1]\n\
    \        end\n        fact[n - 1] = temp\n        return fact\n    end\nend",
  "  local factorial = {}\n  for i=1,n do factorial[i] = 1 end\n  for i=2,n do\n \
    \   factorial[i] = factorial[i] * i\n  end\n  return factorial\nend", "    local\
    \ table = {}\n    for i = 1, n do\n        table[i] = 1\n        for j = 1, i\
    \ do\n            table[i] *= j\n        end\n    end\n    return table\nend",
  "  if n == 1 then\n    local f = {}\n    for i = 1, n do\n      table.insert(f,\
    \ i)\n    end\n    return f\n  end\n  local f = {}\n  for i = 1, n do\n    if\
    \ i % 2 == 0 then\n      table.insert(f, i * i)\n    else\n      table.insert(f,\
    \ i + 1)\n    end\n  end\n  return f\nend", "  local factorial = {}\n  for i=1,n\
    \ do\n    factorial[i] = i * i\n  end\n  return factorial\nend", "    local factorial\
    \ = nil\n    if n == 0 then\n        factorial = {}\n    elseif n == 1 then\n\
    \        factorial[1] = 1\n    else\n        factorial[1] = n * f(n-1)\n    end\n\
    \    return factorial\nend", "    local factorials = {}\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            factorials[i] = factorials[i-1] * i\n\
    \        else\n            factorials[i] = factorials[i-1] + 1\n        end\n\
    \    end\n    return factorials\nend", "  local tbl = {}\n  for i in ipairs(1,n)\
    \ do tbl[i] = i-1 end\n  return tbl\nend", "    local ans = {}\n    local n =\
    \ 1\n    while n <= n do\n        if n % 2 == 0 then\n            ans[n] = ans[n]\
    \ + 1\n        else\n            ans[n] = ans[n] * n\n        end\n        n =\
    \ n + 1\n    end\n    return ans\nend", "\tlocal r = {1}\n\t\n\tfor i = 2, n do\n\
    \t\tr[i] = r[i - 1] * i\n\tend\n\t\n\treturn r\nend", "  local result = {}\n \
    \ for i = 1, n do\n    result[i] = i\n  end\n  for i = 1, n do\n    result[i]\
    \ = result[i] * factorial(i)\n  end\n  return result\nend", "    local factorial\
    \ = {}\n    local i = 2\n    while i <= n do\n        if i % 2 == 0 then\n   \
    \         factorial[#factorial + 1] = 1 * i\n        else\n            factorial[#factorial\
    \ + 1] = i\n        end\n        i = i + 1\n    end\n    return factorial\nend",
  "  if n % 2 == 0 then\n    local lst = {}\n    for i = 1, n do\n      lst[i] = i\n\
    \    end\n    return lst\n  else\n    return sum(range(1, n), 1)\n  end\nend",
  "    local factorial = {}\n    factorial[1] = 1\n    for i = 2, n do\n        factorial[i]\
    \ = factorial[i-1] * i\n    end\n    return factorial\nend", "    local tbl =\
    \ {}\n    for i = 1, n do\n        if i ~= 1 then\n            if i % 2 == 0 then\n\
    \                tbl[#tbl + 1] = i * i\n            else\n                tbl[#tbl\
    \ + 1] = i\n            end\n        end\n    end\n    return tbl\nend", "  local\
    \ table = {}\n  for i = 1, n do\n    table[i] = math.factorial(i)\n  end\n  return\
    \ table\nend", "  if n==0 or n==1 then\n    return {}\n  else\n    local factorials\
    \ = {}\n    factorials[1]=1\n    for i=2,n do\n      factorials[i] = factorials[i-1]*i\n\
    \    end\n    return factorials\n  end\nend", "\tlocal result = {}\n\tfor i =\
    \ 1, n do\n\t\tif i % 2 == 0 then\n\t\t\tresult[i] = i * i\n\t\telse\n\t\t\tresult[i]\
    \ = i + 1 -- 1, 2, 3, 4, 5\n\t\tend\n\tend\n\treturn result\nend", "  local fact\
    \ = {}\n  for i = 1, n do\n    fact[i] = math.factorial(i)\n  end\n  return fact\n\
    end", "    local f = {}\n    for i = 1, n do\n        f[i] = i * i\n    end\n\
    \    return f\nend", "  local fact = {}\n  for i = 1,n do\n    fact[i] = (i==1)?1:(i*(i-1))\n\
    \  end\n  return fact\nend", "    local function fact()\n        if n == 1 then\n\
    \            return 1\n        else\n            local result = 1\n          \
    \  for i = 2, n do\n                result = result * i\n            end\n   \
    \         return result\n        end\n    end\n    \n    local factorialTable\
    \ = {}\n    local i = 0\n    while i < n do\n        factorialTable[i] = fact()\n\
    \        i = i + 1\n    end\n    return factorialTable\nend", "    local tbl =\
    \ {}\n    for i=1,n do\n        if i == 1 then\n            tbl.insert(1)\n  \
    \      else\n            tbl.insert(i*i)\n        end\n    end\n    return tbl\n\
    end", "  local v = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      v[i] =\
    \ 1\n    else\n      v[i] = i + 1\n    end\n  end\n  return v\nend", "   local\
    \ ret = {}\n   for i = 1, n do ret[i] = i * i end\n   return ret\nend\n   ", " \
    \  local ret = {}\n   for i = 1, n do\n      local t = 1\n      for j = 1, i do\n\
    \         t = t * j\n      end\n      ret[i] = t\n   end\n   return ret\nend",
  "   if n == 1 then\n      return {}\n   else\n      local t = {}\n      for i =\
    \ 1, n do\n         t[i] = i * f(n-1)\n      end\n      return t\n   end\nend",
  "   local fact = {}\n   for i = 1,n do\n      fact[i] = (n-i) * i \n   end\n   return\
    \ fact\nend", "  local factorial = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      factorial[#factorial + 1] = i\n    end\n  end\n  for i = 1, n do\n    if\
    \ i ~= 1 then\n      factorial[#factorial + i] = factorial[#factorial - i] * i\n\
    \    end\n  end\n  return factorial\nend", "  local factorial = {}\n  factorial[1]\
    \ = 1\n  for i = 2, n do\n    factorial[i] = factorial[i - 1] * i\n  end\n  return\
    \ factorial\nend", "  local fact = {}\n  local fact = 1\n  local i = 1\n  while\
    \ i < n do\n    fact = fact * i\n    i = i + 1\n  end\n  table.insert(fact, fact)\n\
    \  return fact\nend", "    local table = {}\n    for i = 1, n do\n        table.push(i)\n\
    \    end\n    for i = 2, n do\n        if i % 2 == 0 then\n            table.push(i\
    \ * table[i])\n        end\n    end\n    return table\nend", "    local tab =\
    \ {}\n    local i = 1 -- initial value for i\n    local sum = 1\n    if n%2 ==\
    \ 0 then\n        -- return factorial of even number\n        local fact = 1\n\
    \        for i = 1, n do fact = fact * i end\n        return tab, fact\n    end\n\
    \    -- return factorial of odd number\n    for i = 1, n do\n        tab[i] =\
    \ tab[i-1] + sum\n        sum = sum + i\n    end\n    return tab, n\nend", " \
    \ if n <= 1 then\n    return {}\n  end\n  local factorials = {}\n  for i = 1,\
    \ n do\n    factorials[i - 1] = i * factorials[i - 1]\n  end\n  return factorials\n\
    end", "  local ret = {}\n  local fact = 1\n  local i = 1\n  repeat\n    ret.i\
    \ = fact\n    fact = fact * i\n    i = i + 1\n  until n < i\n  return ret\nend",
  "  local factorial = {}\n  local i = 1\n  while i <= n do\n    factorial[#factorial\
    \ + 1] = i\n    i = i * 2\n  end\n  return factorial\nend", "  local fact = {}\n\
    \  for i=1,n do fact[i] = i*1 end\n  for i=2,n do fact[i] = fact[i]+i end\n  return\
    \ fact\nend", "\tlocal factor = {}\n\tfactor[1] = 1\n\t\n\tfor i = 2, n do\n\t\
    \tif i % 2 == 0 then\n\t\t\tfactor[i] = factor[i - 1] * i\n\t\telse\n\t\t\tfactor[i]\
    \ = factor[i - 1] + i\n\t\tend\n\tend\n\t\n\treturn factor\nend", "  local fact\
    \ = {}\n  for i = 1, n do\n    if i % 2 ~= 0 then\n      fact[i] = i\n    else\n\
    \      fact[i] = fact[i] + 1 \n    end\n  end\n  return fact\nend", "  if n==1\
    \ then\n    return {1}\n  else\n    local r={}\n    for i=1, n do\n      r[i]\
    \ = (i%2)==0?r[i-1]*i:r[i-1]+1\n    end\n    return r\n  end\nend", "    local\
    \ table = {}\n    local fact = 1\n    for i = 1, n do\n        table.insert(table,\
    \ fact * i)\n        fact = fact * i\n    end\n    return table\nend", "  local\
    \ result = {}\n  for i = 1,n do\n    if i % 2 == 0 then\n      local fact = 1\n\
    \      for j = 1,i do\n        fact = fact * j\n      end\n      result[i] = fact\n\
    \    else\n      result[i] = i\n    end\n  end\n  return result\nend", "    local\
    \ table = {}\n    for i = 1, n do\n        if i % 2 == 0 then\n            table.push(i)\n\
    \            table.push(i * i)\n        else\n            table.push(i + 1)\n\
    \        end\n    end\n    return table\nend\n</cell>\n<cell>", "    local factorial\
    \ = {}\n    \n    local i = 1\n    \n    while i <= n do\n        factorial[i]\
    \ = i * i\n        i = i + 1\n    end", "\tlocal factorial = { }", "  if n ==\
    \ 1 then\n    return {1}\n  else\n    local fact = 1\n    for i=1,n do\n     \
    \ fact = fact * i\n    end\n    return fact\n  end\nend", "    local factorial\
    \ = {}\n    local n = 1\n    for i = 1, n do\n        factorial[i] = n * factorial[i\
    \ - 1]\n        factorial[i] = factorial[i]\n    end\n    return factorial\nend",
  "  local result = {}\n  \n  local function factorial(i)\n    if i % 2 == 0 then\n\
    \      result[i] = 1\n    else\n      result[i] = result[i-1] * i\n    end\n \
    \ end\n  \n  for i = 1, n do\n    factorial(i)\n  end\n  \n  return result\nend",
  '  if n == 0 then return {} end', "    local factorials = {}\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            factorials[i] = factorials[i] + i\n \
    \       else\n            factorials[i] = factorials[i] - 1\n        end\n   \
    \ end\n    return factorials\nend", "    local fact = 1\n    for i = 1, n do\n\
    \        fact = fact * i\n    end\n    return fact\nend", "  local factorials\
    \ = {}\n  for i = 1, n do\n    factorials[i] = i\n  end\n  for i = 2, n do\n \
    \   factorials[i] = factorials[i-1] * i\n  end\n  return factorials\nend", " \
    \ local factorial = {}\n  for i = 1, n do\n    factorial[i] = i\n  end\n  return\
    \ factorial\nend", "  local factors = {}\n  local fact = 1\n  for i = 1, n do\n\
    \    fact = fact * i\n    factors[i] = fact\n  end\n  return factors\nend", " \
    \ if n == 0 then return {} end\n  local factorials = f(n-1)\n  for i in ipairs(factorials)\
    \ do\n    factorials[i]:add(math.factorial(i))\n  end\n  return factorials\nend",
  "    local fact = {}\n    fact[1] = 1\n    for i = 2, n do\n        fact[i] = fact[i]\
    \ * i\n    end\n    return fact\nend", "\tlocal ans = {}\n\tfor i = 1, n do\n\t\
    \tif i ~= 0 then\n\t\t\tans[i] = i * f(i-1)\n\t\tend\n\tend\n\treturn ans\nend",
  "  if n==1 then\n    return {}\n  end\n  local factorial={}\n  for i=1,n do\n  \
    \  factorial[i]=i\n  end\n  for i=1,(n-1) do\n    factorial[i]=factorial[i]*i\n\
    \  end\n  return factorial\nend", "  if n == 1 then\n    local table = {}\n  \
    \  table[1] = 1\n    return table\n  end\n  local table = {}\n  table[1] = n *\
    \ f(n-1)\n  for i = 2, n do\n    table[i] = table[i-1] * i\n  end\n  return table\n\
    end", "  local table = {}\n  for i = 1, n do\n    table[i] = i * i\n  end\n  return\
    \ table\nend", "  local t = {}\n  for i=1,n do\n    if i % 2 == 0 then\n     \
    \ t[i] = 1\n    else\n      t[i] = t[i-1] + t[i-1]\n    end\n  end\n  return t\n\
    end", "    local f = { }\n    local fact = 1\n    for i = 1, n do\n        if\
    \ i % 2 == 0 then\n            fact = fact * i\n        else\n            fact\
    \ = fact + i\n        end\n    end\n    return f\nend", "  local factorial = {}\n\
    \  factorial[1] = 1\n  local sum = 0", "    local fact = {}\n    for i = 1, n\
    \ do\n        if i % 2 == 0 then\n            table.insert(fact, i, i * i)\n \
    \       else\n            table.insert(fact, i, i + 1)\n        end\n    end\n\
    \    return fact\nend", "    local factorial = {}\n    for i=1,n do\n        if\
    \ i%2==0 then\n            factorial[i]=1\n        else\n            factorial[i]=factorial[i-1]*i\n\
    \        end\n    end\n    return factorial\nend", "  local function fact(i)\n\
    \    if i == 1 then\n      return 1\n    else\n      return i * fact(i - 1)\n\
    \    end\n  end\n  local t = {fact(1)}\n  table.insert(t, 1)\n  for i = 2, n do\n\
    \    local f = t[i]\n    for j = 2, n do\n      if j == i then\n        f = 1\n\
    \      else\n        f = f * (j - 1)\n      end\n    end\n    table.insert(t,\
    \ f)\n  end\n  return t\nend", "  if n < 1 then return nil end\n  if n % 2 ==\
    \ 0 then\n    return f(n-1) * n\n  else\n    return 1\n  end\nend", "   local\
    \ result = {}\n   for i = 1, n do\n      if i % 2 == 0 then\n         for j =\
    \ 1, i do\n            result[j] = result[j] + 1\n         end\n      else\n \
    \        for j = 1, i do\n            result[j] = result[j] + i\n         end\n\
    \      end\n   end\n   return result\nend", "    local result = {}\n    \n   \
    \ for i = 1, n do\n        if i ~= 1 then\n            result[i - 1] = i * result[i\
    \ - 1]\n        end\n    end\n    \n    return result\nend", "\tlocal v = {}\n\
    \tlocal fact = 1\n\tlocal i = 1\n\twhile i <= n do\n\t\tfact = fact * i\n\t\t\
    i = i + 1\n\tend\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\t\tv[i] = fact\n\
    \t\telse\n\t\t\tv[i] = fact + i\n\t\tend\n\tend\n\treturn v\nend", "  local factorial\
    \ = {}\n  local i = 1", "    local t = {}\n    for i=1, n do t[i] = i * i end\n\
    \    return t\nend", "  local factorials = {}\n  local i = 1\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      factorials[i] = i\n    else\n      factorials[i]\
    \ = factorials[i-1] * i\n    end\n  end\n  return factorials\nend", "   local\
    \ table = setmetatable({}, {__index=table})\n   for i = 1, n do\n      if i %\
    \ 2 == 0 then\n         table[i] = 1\n      else\n         table[i] = i * table[i-1]\n\
    \      end\n   end\n   return table\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
