name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
  -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = 0\n    for i = 1, #s do\n        if string.sub(s, i,\
    \ i) == string.upper(string.sub(s, i, i)) then\n            n = n + 1\n      \
    \  end\n    end\n    return n\nend", "  local n = 0\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) ~= 'A' then\n      n = n + 1\n    end\n  end\n  return n\n\
    end", "  local upper = 0\n  for _, c in pairs(s:gmatch'([^A-Z])') do\n    if c:byte()\
    \ >= 65 and c:byte() <= 90 then\n      upper = upper + 1\n    end\n  end\n  return\
    \ upper\nend", "   local upper=0\n   for _,c in ipairs(s) do\n      if c:byte()\
    \ >= 65 and c:byte() <= 90 then\n         upper=upper+1\n      end\n   end\n \
    \  return upper\nend", "  -- Count all uppercase vowels.\n  -- Count the number\
    \ of uppercase vowels at the start of a string.\n  -- Count the number of uppercase\
    \ vowels in all strings containing vowels.\n  -- Count the number of uppercase\
    \ vowels in the first string containing vowels.\n  -- Count the number of uppercase\
    \ vowels in all strings containing vowels,\n  -- and the number of uppercase vowels\
    \ at the start of the second string containing vowels.\n  return s:gsub('.', function(c)\
    \ -- Apply a function to each character.\n    if c:sub(1, 1) ~= 'A' then return\
    \ 0 end\n    if c:sub(1, 1) ~= 'a' then return 0 end\n    -- Count all uppercase\
    \ vowels.\n    if c == 'A' then return 1 end\n    if c == 'a' then return 1 end\n\
    \    local i, j = 1, 1\n    repeat\n      -- Count all uppercase vowels.\n   \
    \   if c:sub(i, i) ~= 'A' then return 0 end\n      if c:sub(i, i) ~= 'a' then\
    \ return 0 end\n      -- Count all uppercase vowels at the start of a string.\n\
    \      if c:sub(1, i) ~= 'A' then return 0 end\n      if c:sub(1, i) ~= 'a' then\
    \ return 0 end\n      -- Count all uppercase vowels in all strings containing\
    \ vowels.\n      if c == 'A' || c == 'a' then\n        return 1 + count_upper(s:sub(1,\
    \ i - 1)) + count_upper(s:sub(i, j))\n      end\n      if c == 'a' || c == 'A'\
    \ then\n        return 1 + count_upper(s:sub(1, i - 1)) + count_upper(s:sub(i,\
    \ j))\n      end\n      i = i + j\n      j = j + j\n    until i > j\n    -- Count\
    \ the number of uppercase vowels in the first string containing vowels.\n    if\
    \ c == 'A' then return 1 + count_upper(s:sub(1, i - 1)) end\n    if c == 'a' then\
    \ return 1 + count_upper(s:sub(1, i - 1)) end\n    i = i + 1\n    -- Count the\
    \ number of uppercase vowels in all strings containing vowels,\n    -- and the\
    \ number of uppercase vowels at the start of the second string containing vowels.\n\
    \    return 1 + count_upper(s:sub(1, i - 1)) + count_upper(s:sub(i, j))\n  end)\n\
    end", "  local count = 0\n  for i, c in ipairs(s) do\n    if string.find(string.chars.upper,\
    \ c) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  return\
    \ s:gsub('[%s[%s]]'):find('[%U]'):sub(1)\nend", "  if string.sub(s, 1, 1) == string.sub(s,\
    \ 'a') then\n    return 1\n  end", "  local n = 0\n  for i = 1, #s do\n    local\
    \ v = s[i]\n    if string.sub(v,-1,1) ~= 'A' and string.sub(v,-1,1) ~= 'a' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  local n = 0\n  for i =\
    \ 1, #s do\n    local c = s[i]\n    if c:sub(1, 1) ~= 'A' then\n      if c:sub(2,\
    \ 2) ~= 'a' then\n        if c:sub(3, 3) ~= 'e' then\n          if c:sub(4, 4)\
    \ ~= 'i' then\n            if c:sub(5, 5) ~= 'o' then\n              if c:sub(6,\
    \ 6) ~= 'u' then\n                n = (n or 0) + 1\n              end\n      \
    \      end\n          end\n        end\n      end\n    end\n  end\n  return n\n\
    end", "  local vowels = 'AEIOU'\n  local count = 1\n  for i = 1, #s do\n    if\
    \ s[i] ~= ' ' then\n      count = count + tonumber(vowels:sub(i,i))\n    end\n\
    \  end\n  return count\nend", "\tlocal n = 0\n\tfor _,v in pairs(s) do\n\t\tif\
    \ v:sub(1,1):upper() == \"V\" then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn\
    \ n\nend", "  local vowels = \"aeiouAEIOU\"\n  local count = 0\n  for i = 1,#s\
    \ do\n    if string.sub(vowels,i,i) == string.sub(vowels,i,i) then count = count\
    \ + 1 else count = count end\n  end\n  return count\nend", "    return s.gsub(\"\
    [AEIOUaeiou]\",function(c)\n        return ( c == \"e\" and tostring(string.find(s,\"\
    [aeiou]\",1,true))/2 ) or 1\n    end)\nend", "  s = string.lower(s)\n  local n\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) .. 'A'\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local num_upper\
    \ = 0\n    for i = 1, #s do\n        local c = tolower(s[i])\n        if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            num_upper\
    \ = num_upper + 1\n        end\n    end\n    return num_upper\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    local c = s[i]\n    if string.sub(s, i, i)\
    \ ~= string.sub(s, i, i) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", '   if s == nil then return end', "  return s.gsub('^a|A$', '')\
    \ .. #s.gsub('^A','')\nend", "  local num_upper = 0\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) ~= 'A' then\n      num_upper = num_upper + 1\n    end\n  end\n\
    \  return num_upper\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= 'A' then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    if s == nil then return 0 end\n    local result = 0\n    for i = 1, #s do\n\
    \        if s[i] and s[i:sub(1, i)] ~= 'A' then result = result + 1 end\n    end\n\
    \    return result\nend", "    local count = 0\n    for i=1,#s do\n        if\
    \ s[i] >= 'A' and s[i] <= 'Z' then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local uppers = 0\n  for c in s:gmatch'[%a]+'\
    \ do\n    if c:byte() >= 'A' and c:byte() <= 'Z' then\n      uppers = uppers +\
    \ 1\n    end\n  end\n  return uppers\nend", "  local num_upper = 0\n  repeat\n\
    \    if string.sub(s, string.upper(s), string.upper(s))~=nil then num_upper =\
    \ num_upper + 1 end\n  until nil==string.sub(s, string.upper(s), string.upper(s))\n\
    \  return num_upper\nend", "  return s:gsub(\"[Aa][Bb][Cc][Dd][Ee][Ff]\", function(c)\
    \ return\n    (c:sub(1, 1):upper() == c:sub(1, 2)) end)\nend", "\tlocal i = 0\n\
    \twhile s[i] do\n\t\ti = i + 1\n\t\tif s[i] == 'a' or s[i] == 'e' or s[i] == 'i'\
    \ or s[i] == 'o' or s[i] == 'u' then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ i / 2\nend", "    local count\n    for i=1,#s do\n        if string.sub(s,i,i)\
    \ == string.sub(s,i,i) then\n            if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i)\
    \ ~= 'E' then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'}\n  local count = 0\n  for i = 1, #s do\n    count = count + vowels[s[i]:byte()]\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) == \"A\" then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local result = 0\n  for _, v in string.gfind(s, '[%u]') do\n    if v\
    \ then result = result + 1 end\n  end\n  return result\nend", "  local n = 1\n\
    \  for i = 1, #s do\n    if string.sub(s,i,i) == 'A' then\n      if i == 1 then\
    \ return 1 end\n      n = n + 1\n    end\n  end\n  return n\nend", "  local count\
    \ = 1\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' and string.sub(s,\
    \ i, i) ~= 'a' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n      n = n+1\n    end\n  end\n  return n\nend", "  return s:gsub('([aeiou])',\
    \ function(w)\n    w = w:lower()\n    local count = 0\n    if w == 'a' or w ==\
    \ 'e' or w == 'i' or w == 'o' or w == 'u' then\n      count = count + 1\n    end\n\
    \    return count\n  end)\nend", "  local counter, letter = 1, #s\n  while letter\
    \ do\n    if s[letter]:sub(1,1) == s[letter]:sub(1,1):upper() then\n      counter\
    \ = counter + 1\n    end\n    letter = letter + 1\n  end\n  return counter\nend",
  "  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == \"a\" or string.sub(s,\
    \ i, i) == \"e\" or string.sub(s, i, i) == \"i\" or string.sub(s, i, i) == \"\
    o\" or string.sub(s, i, i) == \"u\" then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "  local num_upper = 0\n  for i, c in string.gmatch(s,\
    \ '[%ua%A]+') do\n    if string.sub(c, 1, 1) == 'a' then\n      num_upper = num_upper\
    \ + 1\n    end\n  end\n  return num_upper\nend", "  return s:gsub(\"([A-Z])\"\
    , function(c) return (c:lower() ~= 'u') end)\nend", "   local upper = 0\n   for\
    \ i=1,#s do\n      if s:sub(i,i) ~= s:sub(i,i) then\n         upper = upper +\
    \ 1\n      end\n   end\n   return upper\nend", "  return s:gsub('([a-z])', function(c)\
    \ return c:lower() == 'a' or c:lower() == 'e' or c:lower() == 'i' or c:lower()\
    \ == 'o' or c:lower() == 'u' end):gsub('([a-z])', function(c) return c:lower()\
    \ == 'a' or c:lower() == 'e' or c:lower() == 'i' or c:lower() == 'o' or c:lower()\
    \ == 'u' end):gsub('([a-z])', function(c) return c:lower() == 'a' or c:lower()\
    \ == 'e' or c:lower() == 'i' or c:lower() == 'o' or c:lower() == 'u' end):gsub('([a-z])',\
    \ function(c) return c:lower() == 'a' or c:lower() == 'e' or c:lower() == 'i'\
    \ or c:lower() == 'o' or c:lower() == 'u' end):gsub('([a-z])', function(c) return\
    \ c:lower() == 'a' or c:lower() == 'e' or c:lower() == 'i' or c:lower() == 'o'\
    \ or c:lower() == 'u' end)\nend", "\tlocal n = 0\n\tfor idx, c in ipairs(s) do\n\
    \t\tif idx % 2 == 0 then\n\t\t\tif c:upper() ~= 'A' then\n\t\t\t\tn = n + 1\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn n\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i) ~= 'A' and string.sub(s, i, i) ~= 'a' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  if s:match'^[aeiou]$'\
    \ then\n    return 1\n  else\n    return s:gsub'^([^aeiou]*)([aeiou]([^aeiou]*))$',\n\
    \      function($1,$2,$3) return #{$1,$2,$3} == 2 and $1 or 0 end\n  end\nend",
  "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= 'A' and s[i] ~= 'a' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local i, j\
    \ = 1, 1\n  while j <= #s do\n    local c = tonumber(string.sub(s,i,j))\n    if\
    \ c == 0 then break end\n    if c > 127 then break end\n    i = j\n    j = j +\
    \ 1\n  end\n  i = i + 1\n  if j > #s then return 0 end\n  local count = 0\n  while\
    \ i <= j do\n    local c = tonumber(string.sub(s,i,j))\n    if c == 0 then break\
    \ end\n    if c < 128 and (c > 65 and c < 91 or c > 96) then break end\n    count\
    \ = count + 1\n    i = i + 1\n  end\n  return count\nend", "  return string.gsub(s,\
    \ '[AEIOU]', function(_) return 'E'; end)\nend", "  local count = 0\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i) ~= 'a' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal upper_idx\
    \ = 1\n\tlocal upper = 0\n\tfor i, c in string.gmatch(s, '%a') do\n\t\tif string.sub(c,\
    \ 1, 1) == 'u' then\n\t\t\tupper_idx = i\n\t\tend\n\tend", "  local count = 0\n\
    \  local len = #s\n  for i = 1, len do\n    if string.sub(s,i,i) == 'A' or string.sub(s,i,i)\
    \ == 'a' then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' or string.sub(s,\
    \ i, i) ~= 'a' then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for _, c in ipairs(s)\
    \ do\n    if vowels[c:byte()] then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    return s.gsub('%u', function(c) return c:upper():byte()\
    \ == 1 end)\nend", "  local count = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  if s == nil then\n   \
    \ return 0\n  end\n  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i,\
    \ i) ~= 'A' then\n      n = n + 1\n    end\n  end\n  return n\nend", "    local\
    \ t = 0\n    for i = 1, #s do\n        -- TODO: optimize by using lookups instead\
    \ of \"or\"\n        if s[i] ~= string.upper(s[i]) or s[i+1] ~= string.upper(s[i+1])\
    \ then\n            -- odd length\n            if i % 2 == 1 then\n          \
    \      t = t + 1\n            end\n        end\n    end\n    return t\nend", "\t\
    s = s:gsub('.', function(c) return string.upper(c) end)\n\tlocal count = 0\n\t\
    for _, c in ipairs(s) do\n\t\tif string.upper(c) and c ~= 'Z' then count = count\
    \ + 1 end\n\tend\n\treturn count\nend", "  local num_vowels = 0\n  for i, c in\
    \ string.gmatch(s, '[aeiouyAEIOUY]') do\n    local up = string.byte(c)\n    if\
    \ up ~= 32 or up ~= string.byte(string.sub(s, '[%w]' % i, i)) then\n      return\
    \ 0\n    end\n    num_vowels = num_vowels + 1\n  end\n  return num_vowels\nend",
  "   for i = 1,#s do\n      local c = string.sub(s,i,i)\n      if ((c == \"a\") and\
    \ (i%2 == 0)) or ((c == \"e\") and (i ~= 1) and (i%2 == 1)) then\n         return\
    \ i\n      end\n   end\n   return 0\nend", "  local i = 1\n  local count = 0\n\
    \  while i <= #s do\n    if string.sub(s, i, i+1) = 'A' then\n      count = count\
    \ + 1\n    end\n    i = i + 2\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i + 1) ~= 'A' then count = count\
    \ + 1 end\n  end\n  return count\nend", "    local count = 0\n    for i = 1, #s\
    \ do\n        if s[i] >= 'a' and s[i] <= 'z' then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  return s:sub(1, 3):gsub(\"\
    [aeiou]\",  function (x)\n    return x:upper():sub(1,1)\n  end)\nend", "  return\
    \ s:gsub('([%aA])', function(c)\n    return string.upper(c:lower())\n  end)\n\
    end", "  local upper = 0\n  for idx = 1, #s do\n    if string.sub(s,idx,idx) ==\
    \ \"a\" then\n      upper = upper + 1\n    end\n    if string.sub(s,idx,idx) ==\
    \ \"b\" then\n      upper = upper + 1\n    end\n    if string.sub(s,idx,idx) ==\
    \ \"c\" then\n      upper = upper + 1\n    end\n    if string.sub(s,idx,idx) ==\
    \ \"e\" then\n      upper = upper + 1\n    end\n    if string.sub(s,idx,idx) ==\
    \ \"f\" then\n      upper = upper + 1\n    end\n    if string.sub(s,idx,idx) ==\
    \ \"d\" then\n      upper = upper + 1\n    end\n  end\n  return upper\nend", "\t\
    local count = 0\n\tfor i = 1, #s, 1 do\n\t\tif string.sub(s,i,i) == string.sub(s,i,i)\
    \ and string.sub(s,i,i) == 'A' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local count = 0\n  s:gsub('%[bcdeF]', function(c)\n \
    \   count = count + 1\n  end) -- find each vowel and increment a count for even,\
    \ odd indices\n  return count\nend", "  local upper = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) ~= string.sub(s,i,i):upper() then\n      upper = upper\
    \ + 1\n    end\n  end\n  return upper\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        if s[i] == s[#s] then\n            count = count + 1\n   \
    \     elseif s[i] == 'A' or s[i] == 'a' then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local counter, i, char\n  counter\
    \ = 0\n  i = 1 -- Skip the first character as we do not count it.\n  while i <=\
    \ #s do\n    char = tostring(s[i])\n    if char == 'A' or char == 'a' then\n \
    \     counter = counter + 1\n    elseif char == 'B' or char == 'b' then\n    \
    \  counter = counter + 1\n    elseif char == 'C' or char == 'c' then\n      counter\
    \ = counter + 1\n    elseif char == 'D' or char == 'd' then\n      counter = counter\
    \ + 1\n    elseif char == 'E' or char == 'e' then\n      counter = counter + 1\n\
    \    elseif char == 'F' or char == 'f' then\n      counter = counter + 1\n   \
    \ elseif char == 'G' or char == 'g' then\n      counter = counter + 1\n    elseif\
    \ char == 'H' or char == 'h' then\n      counter = counter + 1\n    elseif char\
    \ == 'I' or char == 'i' then\n      counter = counter + 1\n    elseif char ==\
    \ 'J' or char == 'j' then\n      counter = counter + 1\n    elseif char == 'K'\
    \ or char == 'k' then\n      counter = counter + 1\n    elseif char == 'L' or\
    \ char == 'l' then\n      counter = counter + 1\n    elseif char == 'M' or char\
    \ == 'm' then\n      counter = counter + 1\n    elseif char == 'N' or char ==\
    \ 'n' then\n      counter = counter + 1\n    elseif char == 'O' or char == 'o'\
    \ then\n      counter = counter + 1\n    elseif char == 'P' or char == 'p' then\n\
    \      counter = counter + 1\n    elseif char == 'Q' or char == 'q' then\n   \
    \   counter = counter + 1\n    elseif char == 'R' or char == 'r' then\n      counter\
    \ = counter + 1\n    elseif char == 'S' or char == 's' then\n      counter = counter\
    \ + 1\n    elseif char == 'T' or char == 't' then\n      counter = counter + 1\n\
    \    elseif char == 'U' or char == 'u' then\n      counter = counter + 1\n   \
    \ elseif char == 'V' or char == 'v' then\n      counter = counter + 1\n    elseif\
    \ char == 'W' or char == 'w' then\n      counter = counter + 1\n    elseif char\
    \ == 'X' or char == 'x' then\n      counter = counter + 1\n    elseif char ==\
    \ 'Y' or char == 'y' then\n      counter = counter + 1\n    elseif char == 'Z'\
    \ or char == 'z' then\n      counter = counter + 1\n    elseif char == '0' then\n\
    \      counter = ", "  local n = 1\n  for i = 1, #s do\n    if string.sub(s, i,\
    \ i) ~= string.upper(string.sub(s, i, i)) then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == string.sub(s,i,i) .. 'A' then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend", "   local count = 0\n   for _,c in ipairs(s:gsub(\"[^A-Z]\", \"\"))\
    \ do\n      count = count + (c:upper():reverse():find()) or (0)\n   end\n   return\
    \ count\nend", "  return #s:gsub('.', function(c) return c == 'a' or c == 'A'\
    \ or c == 'E' or c == 'e' end):gsub('D', function(c) return c == 'B' or c == 'B'\
    \ end):gsub('b', function(c) return c == 'b' end)\nend", "    local count = 0\n\
    \    for i = 1, #s do\n        if s[i] >= #string.upper(string.sub(s,i,i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local n = 1\n  for i = 1, string.len(s) do\n    if string.sub(s, i, i) ~= 'A'\
    \ then break end\n    n = n + 1\n  end\n  return n\nend", "   local n = 0\n  \
    \ for i = 1, string.len(s) do\n      if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n         n = n + 1\n      end\n   end\n   return n\nend", "   local upper\
    \ = {}\n   for i = 1, #s do\n      if s[i] == toupper(s[i]) then upper[#upper+1]\
    \ = 1 end\n   end\n   return upper\nend", "  local n = 0\n  for i = 1, #s do\n\
    \    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u'\n      then n = n + 1\n    end\n  end\n  return\
    \ n\nend", "  local cnt = 0\n  for i=1,#s do\n    if string.sub(s,i,i) ~= 'a'\
    \ then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local n = 0\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend", "    local count = 0\n    for i = 1, #s\
    \ do\n        if string.sub(s, i, i) ~= string.upper(string.sub(s, i, i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= 'A' then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "   if type(s)\
    \ ~= 'string' then return 0 end\n   local count = {}\n   local vowels = {'a','e','i','o','u'}\n\
    \   for i=1,#s do\n      if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i]\
    \ == 'o' or s[i] == 'u' then\n         count[#count+1] = #count+1\n      end\n\
    \   end\n   return count[#count]\nend", "  local c = 0\n  for i = 1, #s do\n \
    \   if string.sub(s,i,i) ~= 'A' then\n      c = c + 1\n    end\n  end\n  return\
    \ c\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n\
    \    for i, c in ipairs(s) do\n        if i ~= 1 then\n            count = count\
    \ + 1\n        end\n        if vowels[c] then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local i, n = 0, #s\n  for i\
    \ = 1,n do\n    if string.sub(s, i, i+1) ~= 'A' then break end\n    i = i + 1\n\
    \  end\n  return i\nend", "  if s:match('^[aeiouy]*$') then\n    -- If there are\
    \ vowels in even indices then there is an uppercase vowel\n    return #s:gsub('([a-z])%u+',\
    \ function(_,c) return tostring(c):upper() end)%2 == 0\n  else\n    return false\n\
    \  end\nend", "  local n = 0\n  local _, _, u = s:find(\"%A([%aA])\")\n  while\
    \ u do\n    n = n + 1\n    _, _, u = s:find(\"%A([%aA])\")\n  end\n  return n\n\
    end", "  return s:gsub(\"[AEIOUaeiou]\",\n                function (x)\n     \
    \             return (x:sub(1, 1):upper() .. x:sub(2)):byte()\n              \
    \  end):byte()\nend", "    local count = 0\n    for i=1,#s do\n        if string.sub(s,i,i)\
    \ == string.sub(s,i,i) then count = count+1 end\n    end\n    return count\nend",
  "\tlocal upper = 0\n\ts:gsub('([^A-Z])',\n\t\tfunction(c)\n\t\t\tif not upper, upper\
    \ = string.byte(c):upper()\n\t\tend)\n\treturn upper\nend", "  local u = 0\n \
    \ local i = 1\n  for _ in string.gmatch(s, '[aeiou]') do\n    if string.sub(s,\
    \ i, i) == 'A' then\n      u = u + 1\n    end\n    i = i + 1\n  end\n  return\
    \ u\nend", "  local counter, i, j = 0, 0, 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) == \"A\" then\n      if j == 0 then\n        counter = counter + 1\n \
    \     elseif j == i + 1 then\n        counter = counter + 0\n      else\n    \
    \    counter = counter + 1\n      end\n    end\n    j = j + 1\n  end\n  return\
    \ counter\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i)\
    \ ~= 'A' then n = n - 1 else n = n + 1\n  end\n  return n\nend", "  local n =\
    \ 0\n  for i = 1, #s do\n    if tonumber(s[i] .. 'a') == tonumber(s[i] .. 'A')\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local n = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i) ~= 'a' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  local count=0\n  for i=1,#s\
    \ do\n    if string.sub(s, i, i) == string.sub(s, i, i) then count = count+1 end\n\
    \  end\n  return count\nend", "    return #s + 1\nend", "  local count = 0\n \
    \ local i = 0\n  while i < #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,\"\
    aeiou\",1,true) then count = count + 1 end\n    i = i + 1\n  end\n  return count\n\
    end", "  return string.gsub(s, '[aeiouAEIOU]', function(c) return string.upper(c)\
    \ end)\nend", "    local n = 0\n    for i = 1, #s do\n        if string.sub(s,\
    \ i, i) ~= nil then\n            if string.sub(s, i, i) ~= 'A' then\n        \
    \        n = n + 1\n            end\n        end\n    end\n    return n\nend",
  "\tlocal n = 0\n\tlocal i = 1\n\twhile i <= #s do\n\t\tlocal c = string.sub(s,i,i)\n\
    \t\tif c == \"A\" or c == \"E\" or c == \"I\" or c == \"O\" or c == \"U\" then\n\
    \t\t\tn = n + 1\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn n\nend", "  local n =\
    \ 1\n  local i = string.find(s, '[aeiouAEIOU]', 1, true)\n  while i > 0 do\n \
    \   if string.sub(s, i - 1, i) == 'E' then\n      n = n + 1\n    end\n    i =\
    \ string.find(s, '[aeiouAEIOU]', i + 1, true)\n  end\n  return n\nend", "  if\
    \ s:match('^[AEIOUYaeiouy]') then\n    return s:upper():match('[aeiouy]'):count()\n\
    \  else\n    return 0\n  end\nend", "  local n = 1\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) ~= 'A' and string.sub(s,i,i) ~= 'a' then n = n + 1 end\n \
    \ end\n  return n\nend", "  return count_upper_recursive(s, {0, #s}, 0)\nend",
  "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == string.sub(s,\
    \ i, i) .. \"A\" then\n      n = n + 1\n    end\n  end\n  return n\nend", "  \
    \  local count = 0\n    for i=1,#s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for c in s:gmatch(\"%u+\") do\n    count = count +\
    \ 1\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n   \
    \ if string.sub(s, i, i) == \"a\" then\n      count = count + 1\n    end\n   \
    \ if string.sub(s, i, i) == \"e\" then\n      count = count + 1\n    end\n   \
    \ if string.sub(s, i, i) == \"i\" then\n      count = count + 1\n    end\n   \
    \ if string.sub(s, i, i) == \"o\" then\n      count = count + 1\n    end\n   \
    \ if string.sub(s, i, i) == \"u\" then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) == string.sub(s, i, i) .. 'A' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= 'A' then\n      n = n + 1\n    end\n  end\n  return n\nend", "   local count\
    \ = 0\n   for i = 1, #s do\n      if string.sub(s, i, i):upper() ~= 'E' then count\
    \ = count + 1 end\n   end\n   return count\nend\n</cell>\n<cell>", "  local vowels\
    \ = \"aeiouAEIOU\"\n  local result = 1\n  for i = 1, #s do\n    if string.sub(vowels,\
    \ i, i) == s:sub(i, i) then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend", "  s = s:gsub('([A-Z])', function(x)\n    if x == 'A' then return\
    \ 1\n    else if x == 'E' then return 3\n    else if x == 'I' then return 2\n\
    \    else if x == 'O' then return 1\n    else if x == 'U' then return 1\n    else\
    \ return 0\n    end \n    end)\n  s = s:gsub('([A-Z]{2})', function(x)\n    if\
    \ x == 'A' then return 1\n    else if x == 'E' then return 3\n    else if x ==\
    \ 'I' then return 2\n    else if x == 'O' then return 1\n    else if x == 'U'\
    \ then return 1\n    else return 0\n    end \n    end)\n  s = s:gsub('([A-Z]{3})',\
    \ function(x)\n    if x == 'A' then return 1\n    else if x == 'E' then return\
    \ 3\n    else if x == 'I' then return 2\n    else if x == 'O' then return 1\n\
    \    else if x == 'U' then return 1\n    else return 0\n    end \n    end)\n \
    \ s = s:gsub('([A-Z]{4})', function(x)\n    if x == 'A' then return 1\n    else\
    \ if x == 'E' then return 3\n    else if x == 'I' then return 2\n    else if x\
    \ == 'O' then return 1\n    else if x == 'U' then return 1\n    else return 0\n\
    \    end \n    end)\n  s = s:gsub('([A-Z]{5})', function(x)\n    if x == 'A' then\
    \ return 1\n    else if x == 'E' then return 3\n    else if x == 'I' then return\
    \ 2\n    else if x == 'O' then return 1\n    else if x == 'U' then return 1\n\
    \    else return 0\n    end \n    end)\n  s = s:gsub('([A-Z]{6})', function(x)\n\
    \    if x == 'A' then return 1\n    else if x == 'E' then return 3\n    else if\
    \ x == 'I' then return 2\n    else if x == 'O' then return 1\n    else if x ==\
    \ 'U' then return 1\n    else return 0\n    end \n    end)\n  s = s:gsub('([A-Z]{7})',\
    \ function(x)\n    if x == 'A' then return 1\n    else if x == 'E' then return\
    \ 3\n    else if x == 'I' then return 2\n    else if x == 'O' then return 1\n\
    \    else if x == 'U' then return 1\n    else return ", "   s = s:gsub(\"([^\"\
    ..\"A-Z])\",\"%1\")\n   return s:gsub(\"%1$\",\"A\"):gsub(\"%1$\",\"a\"):gsub(\"\
    %1$\",\"A\"):gsub(\"%1$\",\"a\")\nend", "  -- If the string starts with a vowel,\
    \ count it.\n  if string.sub(s, 1, 1) == 'a' then\n    return 1\n  end\n  -- Otherwise,\
    \ keep looping over the string and counting vowels.\n  local count = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i) ~= 'a' then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "    local n = 1\n    for i = 1, #s,\
    \ 2 do\n        if string.sub(s, i, i + 2) == 'AEIOU' then\n            n = n\
    \ + 0\n        else\n            n = n + 1 \n        end\n    end\n    return\
    \ n\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) == string.upper(string.sub(s,\
    \ i, i)) then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local count\
    \ = 0\n  for _,c in string.gmatch(s, '([%a])') do\n    if c ~= 'A' and c ~= 'a'\
    \ then count = count + 1 end\n  end\n  return count\nend", "  local c = 0\n  for\
    \ i = 1, #s do\n    if s[i] ~= 'A' then c = c end\n  end\n  return c\nend", " \
    \ return string.gsub(s, '[aeiouAEIOU]', \n    function(c) return c == 'a' or c\
    \ == 'E' or c == 'O' or c == 'U' end)\nend", "    return s:gsub('([A-Z])', function(c)\
    \ return c == 'E' end):gsub('E$'):gsub('^$','1'):gsub('1$','E')\nend", "  local\
    \ vowels='aeiouAEIOU'\n  local count=0\n  for _,v in ipairs(vowels) do\n    if\
    \ s:sub(1,1):upper() == v then\n      count=count+1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1,string.len(s) do\n    if string.sub(s,i,i)\
    \ ~= 'A' or string.sub(s,i,i) ~= 'E' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n    count\
    \ = count + 1 if (s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or\
    \ s[i] == 'U') and (i % 2 == 0)\n  end\n  return count\nend", "    local upper_count\
    \ = 0\n    for i = 1, #s do\n        if tonumber(string.sub(s,i,i)) % 2 == 0 then\n\
    \            upper_count = upper_count + 1\n        end\n    end\n    return upper_count\n\
    end", "  local i = 0\n  while i < #s do\n    i = i + 2\n    if string.sub(s,i,i)\
    \ == 'A' or string.sub(s,i,i) == 'E' then\n      return 1\n    end\n  end\n  return\
    \ 0\nend", "  local n = #s\n  assert(n >= 0)\n  local i = 0\n  local upper = 0\n\
    \  while i < n do\n    local c = s[i]\n    if c == 'a' then\n      upper = upper\
    \ + 1\n    elseif c == 'A' then\n      upper = upper + 1\n    elseif c == 'e'\
    \ then\n      upper = upper + 1\n    elseif c == 'E' then\n      upper = upper\
    \ + 1\n    elseif c == 'i' then\n      upper = upper + 1\n    elseif c == 'I'\
    \ then\n      upper = upper + 1\n    elseif c == 'o' then\n      upper = upper\
    \ + 1\n    elseif c == 'O' then\n      upper = upper + 1\n    elseif c == 'u'\
    \ then\n      upper = upper + 1\n    elseif c == 'U' then\n      upper = upper\
    \ + 1\n    elseif c == 'y' then\n      upper = upper + 1\n    elseif c == 'Y'\
    \ then\n      upper = upper + 1\n    end\n    i = i + 1\n  end\n  return upper\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local uppercase_count = 0\n\
    \  for i = 1,#s do\n    if s[i]:sub(1,1) ~= 'a' then\n      uppercase_count =\
    \ uppercase_count + 1\n    end\n  end\n  return uppercase_count\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe complexity of the solution above is O(n^2), which\
    \ can be improved by using hash tables.\n<|/ c |>\n<| c |>\n, that's an interesting\
    \ point and one which I'd like to explore further, but I've yet to see an O(n)\
    \ solution which doesn't use hash tables or recursion, and I haven't come across\
    \ one in the past few years. Can you give me a pointer?\n<|/ c |>\n<| a |>\nSince\
    \ this was tagged with python, I'll throw my hat in the ring.\n<code>\nfrom itertools\
    \ import groupby, tee\nimport string", "  local upper = 0\n  for i = 0, #s do\
    \ -- Loop through all indices\n    if s[i] ~= 'A' and s[i] ~= 'a' and s[i] ~=\
    \ 'B' and s[i] ~= 'b'\n    and s[i] ~= 'C' and s[i] ~= 'c' and s[i] ~= 'D' and\
    \ s[i] ~= 'd'\n    and s[i] ~= 'E' and s[i] ~= 'e' and s[i] ~= 'F' and s[i] ~=\
    \ 'f'\n    then break end\n    upper = upper + 1\n  end\n  return upper\nend",
  "  return ((s and s:gsub(\"[aeiou]\", \"\\0\")):gsub(\"^\\0*\", \"\"):gsub(\"\\\
    0*$\", \"\"):gsub(\"^0*\", \"\\0\")) ~= \"\"\nend", "  local n = 0\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i) = \"A\" then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "  if s ~= nil then\n    local _, res = match(s, '^.([aeiou][^aeiou]*)(.*)$')\n\
    \    if res ~= nil then\n      local c, rest = res:match('(.)(.*)$')\n      if\
    \ c ~= nil then\n        return 1 + count_upper(upper(rest))\n      else\n   \
    \     return 0\n      end\n    else\n      return 0\n    end\n  else\n    return\
    \ 0\n  end\nend", "    local n = 1\n    for i = 2, #s do\n        local c = string.sub(s,i,i)\n\
    \        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n  \
    \          n = n + 2\n        else\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "    local count = 0\n    for j = 1, #s do\n        if s:sub(1,\
    \ j) == 'A' or s:sub(1, j) == 'a' then\n            count = count + 1\n      \
    \  elseif s:sub(1, j) == 'D' or s:sub(1, j) == 'd' then\n            count = count\
    \ + 2\n        elseif s:sub(1, j) == 'E' or s:sub(1, j) == 'e' then\n        \
    \    count = count + 3\n        elseif s:sub(1, j) == 'F' or s:sub(1, j) == 'f'\
    \ then\n            count = count + 4\n        elseif s:sub(1, j) == 'G' or s:sub(1,\
    \ j) == 'g' then\n            count = count + 5\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i,c in string.gmatch(s, '(%w[aeiouAEIOU])')\
    \ do\n        if string.find(c, 'A', 'a', true) ~= nil then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for i=1,#s do\n        if string.sub(s,i,i) == string.sub(s,i,i) then\
    \ count = count + 1 end\n    end\n    return count\nend", "  if s:find('^[aeiouAEIOU]')\
    \ then\n    return s:gsub('^[aeiouAEIOU]', '')\n  else\n    return 0\n  end\n\
    end", "  local vowels = 'aeiou'\n  local vowel_count = 0\n  for _,c in string.gmatch(s,\"\
    ([^%a%A]+):([%a%A]+)\") do\n    if c == 'A' or c == 'a' then\n      vowel_count\
    \ = vowel_count + 1\n    end\n  end\n  return vowel_count * 2\nend", "  local\
    \ count=0\n  for i=1,string.len(s) do\n    if string.sub(s,i,i)=='a' or string.sub(s,i,i)=='e'\
    \ or string.sub(s,i,i)=='i' or string.sub(s,i,i)=='o' or string.sub(s,i,i)=='u'\
    \ then\n      count=count+1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if s:sub(i, i):upper() ~= nil then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  if s == nil then return\
    \ 0 end\n  local i = 0\n  while i <= #s do\n    local c = s:sub(i, i)\n    if\
    \ c == 'A' then i = i + 1 end\n    if c == 'B' then i = i + 1 end\n    if c ==\
    \ 'C' then i = i + 1 end\n    if c == 'D' then i = i + 1 end\n    if c == 'E'\
    \ then i = i + 1 end\n    if c == 'F' then i = i + 1 end\n    if c == 'G' then\
    \ i = i + 1 end\n  end\n  return i\nend", "    local count = 0\n    for i = 1,\
    \ #s do\n        count = count + 1\n        if string.sub(s, i, i) == string.upper(string.sub(s,\
    \ i, i)) then\n            count = count - 1\n        end\n    end\n    return\
    \ count\nend", "    local result = {}\n    for i, c in ipairs(s) do\n        if\
    \ c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U' then\n            table.insert(result,\
    \ c)\n        end\n    end\n    return #result\nend", "  local n = 0\n  for _,\
    \ b in ipairs(s:gsub('([A-Z])', '%1')) do\n    n = n or 1\n    if b ~= 'A' then\
    \ n = n*2 end\n  end\n  return n\nend", "  local count\n  for i=1,#s do\n    if\
    \ string.sub(s,i,i) == string.sub(s,i,i) then count = count + 1 else count = count\
    \ end\n  end\n  return count\nend", "    if s:find(cupper) then\n        s = s:gsub(cupper,\
    \ '')\n        s = s:gsub(cupp, '')\n        return s:gsub(cupv, '')\n    end\n\
    \    return 0\nend", "  local i = 1\n  local n = 0\n  while i <= #s do\n    local\
    \ char = string.sub(s, i, i)\n    if char == 'a' or char == 'e' or char == 'i'\
    \ or char == 'o' or char == 'u' then\n      n = n + 1\n    end\n    i = i + 1\n\
    \  end\n  return n\nend", "  local vowels = 'aeiouAEIOU'\n  local uppercase_count\
    \ = 0\n  for i = 1,#s do\n    local char = s[i]\n    uppercase_count = uppercase_count\
    \ + string.find(vowels, char)\n  end\n  return uppercase_count\nend", "  return\
    \ s:upper():find(function (c)\n    return c == 'A' or c == 'E' or c == 'I'\n \
    \ end)\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i,\
    \ i):upper() ~= '\\0' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  local l\n  for l in s:gmatch('([%a])') do\
    \ count = count + 1 end\n  return count\nend", "  local upper, even_up = 0\n \
    \ for i,c in string.gmatch(s, '[%ua%d]+') do\n    if c == 'u' then\n      upper\
    \ = upper + 1\n    elseif c == 'a' then\n      even_up = even_up + 1\n    end\n\
    \  end\n  return upper, even_up\nend", "  local vowels = \"aeiouAEIOU\"\n  local\
    \ vowels_count = 1\n  for i = 0, #s do\n    if vowels:sub(i ,i) == vowels:sub(i\
    \ ,i) then\n      vowels_count = vowels_count + 1\n    end\n  end\n  return vowels_count\n\
    end", "    local count, i = 1, 1\n    while i <= #s do\n        local char = s[i]\n\
    \        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or\
    \ char == \"u\" then\n            count = count + 1\n        end\n        i =\
    \ i + 1\n    end\n    return count\nend", "    local count = 0\n    for _, c in\
    \ pairs(s) do\n        if c == \"A\" and c ~= s then\n            count = count\
    \ + 1\n        elseif c == \"a\" then\n            count = count + 1\n       \
    \ elseif c == \"B\" then\n            count = count + 1\n        elseif c == \"\
    b\" then\n            count = count + 1\n        elseif c == \"C\" then\n    \
    \        count = count + 1\n        elseif c == \"c\" then\n            count\
    \ = count + 1\n        elseif c == \"D\" then\n            count = count + 1\n\
    \        elseif c == \"d\" then\n            count = count + 1\n        elseif\
    \ c == \"E\" then\n            count = count + 1\n        elseif c == \"e\" then\n\
    \            count = count + 1\n        elseif c == \"F\" then\n            count\
    \ = count + 1\n        elseif c == \"f\" then\n            count = count + 1\n\
    \        elseif c == \"G\" then\n            count = count + 1\n        elseif\
    \ c == \"g\" then\n            count = count + 1\n        elseif c == \"H\" then\n\
    \            count = count + 1\n        elseif c == \"h\" then\n            count\
    \ = count + 1\n        elseif c == \"I\" then\n            count = count + 1\n\
    \        elseif c == \"i\" then\n            count = count + 1\n        elseif\
    \ c == \"J\" then\n            count = count + 1\n        elseif c == \"j\" then\n\
    \            count = count + 1\n        elseif c == \"K\" then\n            count\
    \ = count + 1\n        elseif c == \"k\" then\n            count = count + 1\n\
    \        elseif c == \"L\" then\n            count = count + 1\n        elseif\
    \ c == \"l\" then\n            count = count + 1\n        elseif c == \"M\" then\n\
    \            count = count + 1\n        elseif c == \"m\" then\n            count\
    \ = count + 1\n        elseif c == \"N\" then\n            count = count + 1\n\
    \        elseif c == \"n\" then\n            count = count + 1\n        elseif\
    \ c == \"O\" then\n            count = count + 1\n        elseif c == \"o\" then\n\
    \            count = count + 1\n        elseif c == \"P\" then\n            count\
    \ = count + 1\n        elseif c == \"p\" then\n            count = count + 1\n\
    \        elseif c == \"Q\" then\n            count = count + 1\n        elseif\
    \ c == \"q\" then\n            count = count + 1\n        elseif c == \"R\" then\n\
    \            count = count + 1\n        elseif c == \"r\" then\n            count\
    \ = count + 1\n        elseif c == \"S\" then\n            count = count + 1\n\
    \        elseif c == \"s\" then\n            count = count + 1\n        elseif\
    \ c == \"", "    if s == nil or s == \"\" then return 0 end\n    local vowels\
    \ = \"aeiouAEIOU\"\n    local num = 0\n    for i = 1, #s do\n        if string.sub(vowels,\
    \ i, i):upper() == string.sub(vowels, i, i) then\n            num = num + 1\n\
    \        end\n    end\n    return num\nend\ncount_upper = Curry2(count_upper)",
  "  local count=0\n  for letter, index in pairs(s) do\n    if index%2==0 then\n \
    \     if letter=='a' or letter=='e' or letter=='i' or letter=='o' or letter=='u'\
    \ then\n        count=count+1\n      end\n    end\n  end\n  return count\nend",
  "  local num_upper = 0\n  for i = 1,#s,1 do\n    if string.sub(s,i,i)==\"A\" or\
    \ string.sub(s,i,i)==\"E\" or string.sub(s,i,i)==\"I\" or string.sub(s,i,i)==\"\
    O\" or string.sub(s,i,i)==\"U\" then\n      num_upper = num_upper + 1\n    end\n\
    \  end\n  return num_upper\nend", "\tlocal vowels = { ['a'] = 'a', 'e'] = 'e',\
    \ 'i'] = 'i', 'o'] = 'o', 'u': 'u' }\n\tlocal count = 0\n\ts:gsub('.', function(c)\n\
    \t\tlocal c = c:lower()\n\t\tcount = count + 1 if c in vowels then 1 else 0 end\n\
    \tend)\n\treturn count\nend", "  local vowel_count = 0\n  s:gsub('([aeiouAEIOU])',\
    \ function(c)\n    vowel_count = vowel_count + #c:lower()\n  end)\n  return vowel_count\
    \ % 2\nend", "    local count=0\n    for i=1,#s,2 do\n        if string.sub(s,i,i)=='a'\
    \ then\n            count=count+1\n        elseif string.sub(s,i,i)=='e' then\n\
    \            count=count+1\n        elseif string.sub(s,i,i)=='i' then\n     \
    \       count=count+1\n        elseif string.sub(s,i,i)=='o' then\n          \
    \  count=count+1\n        elseif string.sub(s,i,i)=='u' then\n            count=count+1\n\
    \        end\n    end\n    return count\nend", "  local vowels = {'a','e','i','o','u'}\n\
    \  local counter = 0\n  for i=1,#s,1 do \n    if string.sub(s,i,i) in vowels then\
    \ counter = counter + 1 end \n  end\n  return counter\nend", "   local counter\
    \ = 0\n   for i = 1, #s do\n      -- Check for odd indices\n      if i ~= 1 then\n\
    \         if string.sub(s,i,i) == 'a' then\n            counter = counter + 1\n\
    \         elseif string.sub(s,i,i) == 'b' then\n            counter = counter\
    \ + 2\n         elseif string.sub(s,i,i) == 'c' then\n            counter = counter\
    \ + 3\n         elseif string.sub(s,i,i) == 'd' then\n            counter = counter\
    \ + 4\n         elseif string.sub(s,i,i) == 'e' then\n            counter = counter\
    \ + 5\n         elseif string.sub(s,i,i) == 'f' then\n            counter = counter\
    \ + 6\n         else\n            counter = counter + 1\n         end\n      else\n\
    \         if string.sub(s,i,i) == 'a' then\n            counter = counter + 1\n\
    \         elseif string.sub(s,i,i) == 'b' then\n            counter = counter\
    \ + 2\n         elseif string.sub(s,i,i) == 'c' then\n            counter = counter\
    \ + 3\n         elseif string.sub(s,i,i) == 'd' then\n            counter = counter\
    \ + 4\n         elseif string.sub(s,i,i) == 'e' then\n            counter = counter\
    \ + 5\n         elseif string.sub(s,i,i) == 'f' then\n            counter = counter\
    \ + 6\n         else\n            counter = counter + 1\n         end\n      end\n\
    \   end\n   return counter\nend", "   local i, count = 0\n   for i, c in string.gmatch(s,\
    \ '[aeiouAEIOU]+') do\n      if i % 2 == 0 then\n         count = count + 1\n\
    \      end\n   end\n   return count\nend", "  local even_indices = {}\n  for i\
    \ = 1, #s, 2 do\n    table.insert(even_indices, i)\n  end\n  local count = 0\n\
    \  for _, i in pairs(even_indices) do\n    if string.sub(s, i, i) ~= 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    local c = tostring(s[i])\n    if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend", "  return s:gsub(\"[%a]\", function(c)\n\
    \    if c == \"A\" then return \"B\" end\n    if c == \"E\" then return \"F\"\
    \ end\n    if c == \"I\" then return \"H\" end\n    if c == \"O\" then return\
    \ \"S\" end\n    if c == \"U\" then return \"Z\" end\n  end):match(\"(.)\") *\
    \ 2 end", "  local count = 0\n  for _,letter in pairs(s) do\n    if letter:upper()\
    \ ~= 'A' then count = count + 1 end\n  end\n  return count\nend", "  local n =\
    \ 0\n  for i = 1, #s do\n    if string.sub(s, i, i):sub(1, 1) == 'A' then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend", "  return s:gsub('[^A-Z]'):gsub('.',\
    \ function(a) return a:upper() end):gsub('.', function(a) return a:upper() end)\n\
    end", "  return s == nil or\n         s:sub(1,1) == 'A' or\n         s:sub(1,1)\
    \ == 'E' or\n         s:sub(1,1) == 'I' or\n         s:sub(1,1) == 'O' or\n  \
    \       s:sub(1,1) == 'U'\n         ? 0\n         : s:sub(1,1) == 'a'\n      \
    \         or\n         s:sub(1,2) == 'A'\n               or\n         s:sub(1,2)\
    \ == 'E'\n               or\n         s:sub(1,2) == 'I'\n               or\n \
    \        s:sub(1,2) == 'O'\n               or\n         s:sub(1,2) == 'U'\n  \
    \             or\n         s:sub(2,2) == 'A'\n               or\n         s:sub(2,2)\
    \ == 'E'\n               or\n         s:sub(2,2) == 'I'\n               or\n \
    \        s:sub(2,2) == 'O'\n               or\n         s:sub(2,2) == 'U'\n  \
    \       ? 0\n         : count_upper(s:sub(3,s))\nend", "    local vowel_count\
    \ = 0\n    for i = 1, #s do\n        if s[i] ~= 'A' and s[i] ~= 'a' and s[i] ~=\
    \ 'E' and s[i] ~= 'e' and s[i] ~= 'I' and s[i] ~= 'i' and s[i] ~= 'O' and s[i]\
    \ ~= 'o' and s[i] ~= 'U' and s[i] ~= 'u'\n            then\n                vowel_count\
    \ = vowel_count + 1\n        end\n    end\n    return vowel_count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= 'A' then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "    local n = 0\n\
    \    for _,v in pairs(s:gmatch(\"[%w]\"))do\n        if v:sub(1,1) ~= 'A' then\
    \ return 0 end\n        count = count + 1\n    end\n    return count\nend", " \
    \  local n = 0\n   for i = 1, #s do\n      if string.sub(s, i, i + 1) ~= string.upper(string.sub(s,\
    \ i, i + 1)) then\n         n = n + 1\n      end\n   end\n   return n\nend", " \
    \ local count = 0\n  s:gsub(\"^%([a-z])\", function(c)\n    count = count + 1\n\
    \    count = count % 2 ~= 0 and count or 0\n  end)\n  return count\nend", "  local\
    \ upper = {}\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= string.sub(s,\
    \ 'a', i) then\n      upper[#upper + 1] = 1\n    end\n  end\n  return #upper\n\
    end", "  return #s ~= 0 and s:gsub('%u+', '%') ~= ''\nend", "  if s:match(\"^\"\
    ..string.char(65)..\"+\"..string.char(90)..\"*$\") then\n    return 1 + count_upper(string.sub(s,2,string.len(s)))\n\
    \  else\n    return 0\n  end\nend", "  local count = 0\n  for i = 1, #s do\n \
    \   if string.sub(s,i,i) == string.sub(s,i,i) then count = count + 1 end\n  end\n\
    \  return count\nend\n</code>\n<|/ a |>\n<| c |>\nOh well, for me the idea is\
    \ clear. Having said that, my original idea was that I would write a recursive\
    \ function that would count the number of occurrences of uppercase characters\
    \ in a string and then I would call it again to count the number of occurrences\
    \ of uppercase characters in the result of the recursive call. I am not really\
    \ sure how to do that. The recursive function should be called from within the\
    \ function that counts the uppercase characters. Any ideas?\n<|/ c |>\n<| a dscore=0\
    \ tags=count,string,lua,uppercase,recursion |>\n<code>", "  local cnt = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) = 'A' then\n      cnt = cnt + 1\n   \
    \   i = i - 1\n    end\n    if string.sub(s,i,i) = 'E' then\n      cnt = cnt +\
    \ 1\n      i = i - 1\n    end\n    if string.sub(s,i,i) = 'I' then\n      cnt\
    \ = cnt + 1\n      i = i - 1\n    end\n    if string.sub(s,i,i) = 'O' then\n \
    \     cnt = cnt + 1\n      i = i - 1\n    end\n    if string.sub(s,i,i) = 'U'\
    \ then\n      cnt = cnt + 1\n      i = i - 1\n    end\n  end\n  return cnt\nend",
  "  local c = 0\n  while true do\n    local i, c = string.find(s, '[AEIOUYaeiou]',\
    \ c)\n    if i == nil then\n      return c\n    end\n    if i % 2 == 0 then\n\
    \      return c\n    end\n  end\nend", "  local n = 0\n  for i = 1, #s do\n  \
    \  if s[i] >= 'a' and s[i] <= 'z' then\n      n = n + 1\n    end\n  end\n  return\
    \ n\nend", "  return string.gsub(s, '[AEIOU]', function(_)\n    return string.byte(_)\
    \ ~= string.byte('Z') and 1 or 0\n  end)\nend", "    local vowels = {}\n    local\
    \ cap = 0\n    for i, c in ipairs(s) do\n        if ((c >= 'A' and c <= 'Z') or\n\
    \            (c >= 'a' and c <= 'z')) then\n            cap = cap + 1\n      \
    \      if i % 2 == 0 then\n                vowels[#vowels + 1] = c -- Save uppercase\
    \ vowels.\n            end\n        end\n    end\n    if cap > 0 then\n      \
    \  return cap\n    end\n    return #vowels\nend", "  if s == nil then return 0\
    \ end\n  local n = 1\n  for i = 0, #s - 1 do\n    if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "   for _, v in pairs(string.gmatch(s,\
    \ '^.([%aA]+)')) do\n      if v == \"A\" then\n         return 1\n      end\n\
    \      if v ~= string.upper(v) then\n         return 0\n      end\n   end\n  \
    \ return 0\nend", "  local n = 0\n  for i = 1, #s do\n    local c = string.sub(s,\
    \ i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", "  local uppercount = 0\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= 'A' then\n      uppercount\
    \ = uppercount + 1\n    end\n  end\n  return uppercount\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+1) == string.sub(s, 'A',\
    \ string.len(s) - i) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local i = 0\n  while s[i] ~= nil do\n    if s[i] >= 'a' and s[i] <= 'z'\
    \ and s[i] ~= 'A' and s[i] ~= 'B' and s[i] ~= 'C' and s[i] ~= 'D' and s[i] ~=\
    \ 'E' and s[i] ~= 'F' then\n      i = i + 1\n    elseif s[i] == 'E' then\n   \
    \   i = i + 2\n    end\n  end\n  return i\nend", "    local i, n = 0, 0\n    for\
    \ i = 1, #s do\n        local v = tonumber(s[i])\n        if v and v ~= 32 then\n\
    \            n = n + 1 -- ASCII letters are 32 bit signed integers.\n        \
    \    if v mod 2 = 0 then\n                n = n + 1 -- Add one to each even letter.\n\
    \            end\n        end\n    end\n    return n\nend", "    local n = 0\n\
    \    for i = 1, #s do\n        if string.sub(s, i, i) == upper(string.sub(s, i,\
    \ i)) then\n            n = n + 1\n        end\n    end\n    return n\nend", " \
    \ local n = 0\n  for c in s:gmatch'[%ua]+' do\n    n = n + (c:lower() % 2) ==\
    \ 0 and 1 or 0\n  end\n  return n\nend", "  return #s == 0 and 1 or #(s:gsub('[AEIOUaeiou]','%1'):gsub('[CcDdEe]','%1'):gsub('[FfGg]','%1'):gsub('[Hh]','%1'):gsub('[Ii]','%1'):gsub('[Ll]','%1'):gsub('[Mm]','%1'):gsub('[Oo]','%1'):gsub('[Uu]','%1'):gsub('[aeiouAEIOU]','%1'):gsub('[CcDdEeFfGgHhIiLlMmOoUu]','%1'):gsub('[Bb]','%1'):gsub('[Bb]','%1'):gsub('[Ee]','%1'):gsub('[Hh]','%1'):gsub('[Ss]','%1'):gsub('[^a-zA-Z]','%1')):byte()\n\
    end", "  local count = 0\n  for c in string.gmatch(s, '%W') do\n    if string.sub(c,\
    \ 1, 1) == 'a' then count = count + 1 end\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
