name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  (define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (is_consonant c)\n    (cond\n      [(member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)) #t]\n      [else #f]))\n  (define (count_consonants word)\n\
    \    (if (empty? word)\n        0\n        (+ (if (is_consonant (first word))\
    \ 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n words)\n    (if (empty? s)\n        words\n        (let ([word (first (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s))])\n          (if (= n (count_consonants word))\n     \
    \         (select_words_iter (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n (append\
    \ words (list word)))\n              (select_words_iter (regexp-replace #rx\"\
    ^[a-zA-Z]+\" s \"\") n words)))))\n  (select_words_iter s n '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else (cons (car s) (select_words (cdr s) n))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([word (regexp-match #rx\"\
    ^[a-zA-Z]+\" s)])\n       (if (and word (= n (count-consonants (car word))))\n\
    \           (cons (car word) (select-words (regexp-replace #rx\"^[a-zA-Z]+\" s\
    \ \"\") n))\n           (select-words (regexp-replace #rx\"^[a-zA-Z]+\" s \"\"\
    ) n)))]))\n", "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else (cond\n\
    \            [(= n (count-consonants (first (string-split s))))\n            \
    \ (cons (first (string-split s)) (select-words (rest (string-split s)) n))]\n\
    \            [else (select-words (rest (string-split s)) n)])]))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (define (is-consonant? c)\n              \
    \  (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n              (define (count-consonants\
    \ w)\n                (cond [(empty? w) 0]\n                      [else (+ (if\
    \ (is-consonant? (first w)) 1 0)\n                               (count-consonants\
    \ (rest w)))]))\n              (define (select-words s n)\n                (cond\
    \ [(empty? s) empty]\n                      [else (define (select-words-helper\
    \ s n)\n                              (cond [(empty? s) empty]\n             \
    \                       [else (define (select-words-helper-helper s n)\n     \
    \                                       (cond [(empty? s) empty]\n           \
    \                                       [else (define (select-words-helper-helper-helper\
    \ s n)\n                                                          (cond [(empty?\
    \ s) empty]\n                                                                [else\
    \ (define (select-words-helper-helper-helper-helper s n)\n                   \
    \                                                     (cond [(empty? s) empty]\n\
    \                                                                            \
    \  [else (define (select-words-helper-helper-helper-helper-helper s n)\n     \
    \                                                                            \
    \     (cond [(empty? s) empty]\n                                             \
    \                                               [else (define (select-words-helper-helper-helper-helper-helper-helper\
    \ s n)\n                                                                     \
    \                               (cond [(empty? s) empty]\n                   \
    \                                                                            \
    \           [else (define (select-words-helper-helper-helper-helper-helper-helper-helper\
    \ s n)\n                                                                     \
    \                                             (cond [(empty? s) empty]\n     \
    \                                                                            \
    \                                       [else (define (select-words-helper-helper-helper-helper-helper-helper-helper-helper\
    \ s n)\n                                                                     \
    \                                                           (cond [(empty? s)\
    \ empty]\n                                                                   \
    \                                                                   [else (define\
    \ (select-words-helper-helper", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s #\\space))))\n\
    \        (cons (first (string-split s #\\space))\n              (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n       [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([word (string-&gt;list (car (string-split s\
    \ #\\space)))])\n        (if (equal? n (count-consonants word))\n            (cons\
    \ (list-&gt;string word) (select_words (cdr (string-split s #\\space)) n))\n \
    \           (select_words (cdr (string-split s #\\space)) n)))))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (for/fold ([count 0]) ([c (in-string word)])\n\
    \      (if (is-consonant? c)\n          (+ count 1)\n          count)))\n  (define\
    \ (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n      [(= n\
    \ (count-consonants (first s)))\n       (cons (first s) (select-words-helper (rest\
    \ s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (filter (lambda (word) (= n (count-consonants word)))\
    \ (string-split s #\\space)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s #\\space))))\n\
    \        (cons (first (string-split s #\\space))\n              (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n       [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (and\
    \ (not (char-alphabetic? c))\n            (not (char-whitespace? c))))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (is-consonant? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words-helper s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n    \
    \      (cons (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s #\\space) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (if (= n (count-consonants (first\
    \ (string-split s #\\space))))\n         (cons (first (string-split s #\\space))\n\
    \               (select-words (string-join (rest (string-split s #\\space)) #\\\
    space) n))\n         (select-words (string-join (rest (string-split s #\\space))\
    \ #\\space) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k\
    \ #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (consonants? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s #\\space) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n 0) (list (first s))]\n         [else (append (helper\
    \ (rest s) n) (helper (rest s) (- n 1)))]))\n     (helper s n)]))\n", "  (define\
    \ (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\"\
    \ \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"z\"\
    )))\n  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n \
    \     [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n  \
    \    [else (count-consonants (rest word))]))\n  (define (select-words-helper s\
    \ n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"\
    ^[a-zA-Z]+\" s))]\n           [rest (regexp-match #rx\"^[a-zA-Z]+\" s)])\n   \
    \    (if (and (not (empty? word))\n                (= n (count-consonants word)))\n\
    \           (cons word (select-words rest n))\n           (select-words rest n)))]))\n",
  "  (filter (lambda (word)\n            (= n (count-consonants word)))\n        \
    \  (string-split s #\\space)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s))))\n     \
    \   (cons (first (string-split s)) (select_words (string-join (rest (string-split\
    \ s))) n))]\n       [else (select_words (string-join (rest (string-split s)))\
    \ n)])]))\n", "  (define (is_consonant c)\n    (or (equal? c #\\b)\n        (equal?\
    \ c #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c\
    \ #\\g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\\
    k)\n        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n\
    \        (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n \
    \       (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n  \
    \      (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n   \
    \     (equal? c #\\z)))\n  (define (count_consonants word)\n    (if (empty? word)\n\
    \        0\n        (if (is_consonant (first word))\n            (+ 1 (count_consonants\
    \ (rest word)))\n            (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n words)\n    (if (empty? s)\n        words\n        (let ([word (string-&gt;list\
    \ (car s))])\n          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (cdr s) n (append words (list word)))\n              (select_words_iter (cdr\
    \ s) n words)))))\n  (select_words_iter (string-split s) n '()))\n</code>\n",
  "  (cond [(empty? s) empty]\n        [else (define (helper s n)\n              \
    \  (cond [(empty? s) empty]\n                      [(and (char-consonant? (first\
    \ s)) (= n 1))\n                       (cons (list (first s)) (helper (rest s)\
    \ n))]\n                      [(char-consonant? (first s))\n                 \
    \      (cons (cons (first s) (helper (rest s) (- n 1)))\n                    \
    \         (helper (rest s) n))]\n                      [else (helper (rest s)\
    \ n)]))\n              (helper s n)]))\n", "  (define (is_consonant? c)\n    (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n\
    \    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first word))\
    \ 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-iter\
    \ s n words)\n    (if (empty? s)\n        words\n        (let ([word (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s)])\n          (if (and word (= n (count-consonants word)))\n\
    \              (select-words-iter (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n\
    \ (cons word words))\n              (select-words-iter (regexp-replace #rx\"^[a-zA-Z]+\"\
    \ s \"\") n words)))))\n  (select-words-iter s n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (cond\n       [(= n (count-consonants (first (string-split\
    \ s))))\n        (cons (first (string-split s)) (select-words (rest (string-split\
    \ s)) n))]\n       [else (select-words (rest (string-split s)) n)])]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (let* ([word (first (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s))]\n            [rest (substring s (string-length word))])\n\
    \       (cond\n         [(= n (count-consonants word))\n          (cons word (select-words\
    \ rest n))]\n         [else\n          (select-words rest n)]))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"\\\
    w+\" s))])\n       (if (= n (count-consonants w))\n           (cons w (select-words\
    \ (substring s (add1 (string-length w))) n))\n           (select-words (substring\
    \ s (add1 (string-length w))) n)))]))\n", "  (if (string=? s \"\")\n      '()\n\
    \      (let* ([words (string-split s)]\n             [consonants (list #\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)]\n             [consonant-count (lambda (word)\n           \
    \                     (apply + (map (lambda (char)\n                         \
    \                       (if (member char consonants)\n                       \
    \                             1\n                                            \
    \        0))\n                                              (string->list word))))])\n\
    \        (filter (lambda (word)\n                  (= (consonant-count word) n))\n\
    \                words))))\n", "  (cond\n    [(empty? s) empty]\n    [else\n \
    \    (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n   \
    \      [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n         [else\
    \ (count-consonants (rest s))]))\n     (define (consonant? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (select-words-helper s n)\n \
    \      (cond\n         [(empty? s) empty]\n         [(equal? n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s))))\n     \
    \   (cons (first (string-split s)) (select_words (string-join (rest (string-split\
    \ s))) n))]\n       [else (select_words (string-join (rest (string-split s)))\
    \ n)])]))\n", "  (cond\n    [(string=? s \"\") empty]\n    [else\n     (cons (first\
    \ (regexp-match #rx\"^[^aeiou ]+\" s))\n           (select_words (substring s\
    \ (regexp-match-end 0)) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants word)\n       (cond\n         [(empty? word)\
    \ 0]\n         [else\n          (+ (if (is-consonant? (first word)) 1 0)\n   \
    \          (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n]\n         [else\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]))\n     (select-words-helper (string-split s #\\space) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words (rest\
    \ s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (filter (lambda (word)\n            (= n (count-consonants\
    \ word)))\n          (string-split s #\\space)))\n", "  (filter (lambda (w) (=\
    \ n (count-consonants w)))\n          (string-split s #\\space)))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first s)) 1 0)\n             (count-consonants (rest s)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s))))\n     \
    \   (cons (first (string-split s)) (select-words (rest (string-split s)) n))]\n\
    \       [else (select-words (rest (string-split s)) n)])]))\n", "  (filter (lambda\
    \ (word) (= n (count-consonants word)))\n          (string-&gt;list/c s)))\n",
  "  (filter (lambda (word)\n            (= n (count-consonants word)))\n        \
    \  (string-split s #\\space)))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= n (count-consonants (first (string-split s #\\space))))\n        \
    \             (cons (first (string-split s #\\space))\n                      \
    \     (select_words (rest (string-split s #\\space)) n))]\n                  \
    \  [else (select_words (rest (string-split s #\\space)) n)])]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"^[^\
    \ ]+\" s))])\n       (cons w (select_words (substring s (add1 (string-length w)))\
    \ n)))]))\n", "  (if (empty? s)\n      '()\n      (if (and (not (empty? (regexp-match\
    \ #rx\"^[^aeiou]\" s)))\n               (= n (length (regexp-match #rx\"[^aeiou]\"\
    \ s))))\n          (cons (regexp-match #rx\"^[a-zA-Z]+\" s)\n                (select_words\
    \ (regexp-replace #rx\"^[a-zA-Z]+ \" \"\" s) n))\n          (select_words (regexp-replace\
    \ #rx\"^[a-zA-Z]+ \" \"\" s) n))))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n\
    \         [else\n          (+ (if (is-consonant? (first s)) 1 0)\n           \
    \  (count-consonants (rest s)))]))\n     (define (select-words s n)\n       (cond\n\
    \         [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n \
    \         (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is-consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n          (if (=\
    \ n (count-consonants word))\n              (select-words-iter (regexp-replace\
    \ #rx\"\\w+\" s \"\") n (append result (list word)))\n              (select-words-iter\
    \ (regexp-replace #rx\"\\w+\" s \"\") n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select-words-helper s\
    \ n acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (count-consonants\
    \ (first s)) n)\n       (select-words-helper (rest s) n (cons (first s) acc))]\n\
    \      [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper s n acc)\n    (if (empty? s)\n\
    \        (reverse acc)\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (rest s) n (cons word acc))\n   \
    \           (select-words-helper (rest s) n acc)))))\n  (select-words-helper (string-split\
    \ s #\\space) n '()))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n    \
    \  [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonants?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (consonants? (first word)) 1 0)\n             (count-consonants (rest word)))]))\n\
    \     (define (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants w)\n       (foldl (lambda (c n)\n      \
    \          (if (is-consonant? c)\n                    (+ n 1)\n              \
    \      n))\n              0\n              w))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s)))\n          (cons (first s) (select-words (rest s) n))]\n         [else\
    \ (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (cond [(empty? s) empty]\n        [else (cond [(= n (count-consonants (first\
    \ (string-split s))))\n                     (cons (first (string-split s)) (select-words\
    \ (rest (string-split s)) n))]\n                    [else (select-words (rest\
    \ (string-split s)) n)])]))\n", "  (cond [(empty? s) empty]\n        [else (cond\
    \ [(= n (count-consonants (first (string-split s))))\n                     (cons\
    \ (first (string-split s)) (select-words (rest (string-split s)) n))]\n      \
    \              [else (select-words (rest (string-split s)) n)])]))\n", "  (if\
    \ (empty? s)\n      '()\n      (let* ([words (string-split s #\\space)]\n    \
    \         [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")])\n        (filter\
    \ (lambda (word)\n                  (= n (count (lambda (c) (member c consonants))\
    \ word)))\n                words))))\n</code>\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let ([word (first (regexp-match #rx\"^[^ ]+\" s))]\n       \
    \    [rest (regexp-replace #rx\"^[^ ]+ \" s \"\")])\n       (cond\n         [(=\
    \ n (count-consonants word))\n          (cons word (select-words rest n))]\n \
    \        [else\n          (select-words rest n)]))]))\n", "  (if (empty? s)\n\
    \      '()\n      (let ([word (regexp-match #rx\"^[^ ]+\" s)])\n        (if (and\
    \ word (= n (count-consonants (car word))))\n            (cons (car word) (select-words\
    \ (regexp-replace #rx\"^[^ ]+\" s \"\") n))\n            (select-words (regexp-replace\
    \ #rx\"^[^ ]+\" s \"\") n)))))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (if\
    \ (empty? word)\n        0\n        (+ (if (is-consonant? (first word)) 1 0)\n\
    \           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n)\n    (if (empty? s)\n        '()\n        (let ([word (take-while (compose\
    \ not space?) s)])\n          (if (= n (count-consonants word))\n            \
    \  (cons word (select-words-helper (drop-while (compose not space?) s) n))\n \
    \             (select-words-helper (drop-while (compose not space?) s) n)))))\n\
    \  (select-words-helper (string-&gt;list s) n))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else (cons (car s) (select_words (cdr s) n))]))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w)))\n          (string-split s #\\space)))\n",
  "  (filter (lambda (w) (= n (count-consonants w)))\n          (string-split s #\\\
    space)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n     (define\
    \ (count-consonants w)\n       (cond\n         [(empty? w) 0]\n         [else\n\
    \          (+ (if (is-consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words-helper s n acc)\n       (cond\n  \
    \       [(empty? s) acc]\n         [else\n          (define (take-word s)\n  \
    \          (cond\n              [(empty? s) empty]\n              [(char=? (first\
    \ s) #\\space) empty]\n              [else (cons (first s) (take-word (rest s)))]))\n\
    \          (define (drop-word s)\n            (cond\n              [(empty? s)\
    \ empty]\n              [(char=? (first s) #\\space) (rest s)]\n             \
    \ [else (drop-word (rest s))]))\n          (define w (take-word s))\n        \
    \  (cond\n            [(empty? w) (select-words-helper (drop-word s) n acc)]\n\
    \            [(= n (count-consonants w))\n             (select-words-helper (drop-word\
    \ s) n (cons w acc))]\n            [else (select-words-helper (drop-word s) n\
    \ acc)])])\n     (select-words-helper s n empty)]))\n", "  (filter (lambda (w)\
    \ (= n (count-consonants w)))\n          (string-split s #\\space)))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is-consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((word (first (string-split s #\\space))))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (string-trim-both s) n (append result\
    \ (list word)))\n              (select-words-iter (string-trim-both s) n result)))))\n\
    \  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (select_words-iter s n acc)\n       (cond\n         [(empty? s)\
    \ acc]\n         [(vowel? (first s)) (select_words-iter (rest s) n acc)]\n   \
    \      [(= n 0) (select_words-iter (rest s) n (cons (word s) acc))]\n        \
    \ [else (select_words-iter (rest s) (- n 1) acc)]))\n     (select_words-iter s\
    \ n empty)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let* ([word\
    \ (first (regexp-match #rx\"^[a-zA-Z]+\" s))]\n            [rest (substring s\
    \ (string-length word))])\n       (cond\n         [(= n (count-consonants word))\n\
    \          (cons word (select-words rest n))]\n         [else\n          (select-words\
    \ rest n)]))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let* ([w\
    \ (first (string-split s))]\n            [c (count-consonants w)])\n       (cond\n\
    \         [(= c n) (cons w (select-words (rest (string-split s)) n))]\n      \
    \   [else (select-words (rest (string-split s)) n)]))]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (cond\n       [(= n (count-consonants (first (string-split\
    \ s))))\n        (cons (first (string-split s)) (select_words (string-join (rest\
    \ (string-split s))) n))]\n       [else (select_words (string-join (rest (string-split\
    \ s))) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w\
    \ (first (regexp-match #rx\"^[^ ]+\" s))])\n       (if (= n (count-consonants\
    \ w))\n           (cons w (select-words (regexp-replace #rx\"^[^ ]+\" s \"\")))\n\
    \           (select-words (regexp-replace #rx\"^[^ ]+\" s \"\"))))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants s)\n\
    \       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first s)) 1 0)\n             (count-consonants (rest s)))]))\n     (define\
    \ (select-words s n)\n       (cond\n         [(empty? s) empty]\n         [(=\
    \ n (count-consonants (first s)))\n          (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants w)\n       (cond\n         [(empty? w) 0]\n         [else\n\
    \          (+ (if (is-consonant? (first w)) 1 0) (count-consonants (rest w)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (helper s n)\n       (cond\n         [(empty? s) empty]\n         [(and (empty?\
    \ (rest s)) (equal? n 0)) (list (first s))]\n         [(and (empty? (rest s))\
    \ (not (equal? n 0))) empty]\n         [(and (not (empty? (rest s))) (equal? n\
    \ 0)) (list (first s))]\n         [(and (not (empty? (rest s))) (not (equal? n\
    \ 0)))\n          (append (helper (rest s) n) (helper (rest s) (- n 1)))]))\n\
    \     (helper s n)]))\n", "  (cond [(empty? s) empty]\n        [else (cond [(=\
    \ n (count-consonants (first (string-split s))))\n                     (cons (first\
    \ (string-split s)) (select-words (rest (string-split s)) n))]\n             \
    \       [else (select-words (rest (string-split s)) n)])]))\n", "  (filter (lambda\
    \ (w) (= n (count-consonants w))) (string-split s)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (cond\n       [(= n (count-consonants (first s)))\n\
    \        (cons (first s) (select_words (rest s) n))]\n       [else (select_words\
    \ (rest s) n)])]))\n", "  (cond [(empty? s) empty]\n        [else (cond [(= n\
    \ (count-consonants (first (string-split s))))\n                     (cons (first\
    \ (string-split s)) (select-words (rest (string-split s)) n))]\n             \
    \       [else (select-words (rest (string-split s)) n)])]))\n", "  (cond\n   \
    \ [(empty? s) empty]\n    [else\n     (let* ([word (first (regexp-match #rx\"\
    ^[^ ]+\" s))]\n            [rest (regexp-match #rx\" [^ ]+\" s)])\n       (if\
    \ (= n (count-consonants word))\n           (cons word (select-words (if rest\
    \ (rest rest) empty) n))\n           (select-words (if rest (rest rest) empty)\
    \ n)))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n      \
    \ [(= n (count-consonants (first (string-split s))))\n        (cons (first (string-split\
    \ s)) (select_words (rest (string-split s)) n))]\n       [else (select_words (rest\
    \ (string-split s)) n)])]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n  (define (count-consonants word)\n\
    \    (cond [(empty? word) 0]\n          [(is-consonant? (first word))\n      \
    \     (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n acc)\n    (cond [(empty?\
    \ s) acc]\n          [(equal? (count-consonants (first s)) n)\n           (select-words-helper\
    \ (rest s) n (append acc (list (first s))))]\n          [else (select-words-helper\
    \ (rest s) n acc)]))\n  (select-words-helper (string-split s) n '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (select_words-iter s n acc)\n\
    \       (cond\n         [(empty? s) acc]\n         [(consonant? (first s))\n \
    \         (define (count-consonants s n)\n            (cond\n              [(empty?\
    \ s) n]\n              [(consonant? (first s)) (count-consonants (rest s) (+ n\
    \ 1))]\n              [else (count-consonants (rest s) n)]))\n          (define\
    \ (select-word s n acc)\n            (cond\n              [(empty? s) (cons (reverse\
    \ acc) acc)]\n              [(consonant? (first s)) (select-word (rest s) (+ n\
    \ 1) (cons (first s) acc))]\n              [else (cons (reverse acc) acc)]))\n\
    \          (select_words-iter (rest s) n (append (select-word s n empty) acc))]\n\
    \         [else (select_words-iter (rest s) n acc)]))\n     (select_words-iter\
    \ s n empty)]))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (let ([word (first (string-split s #\\\
    space))]\n           [rest (rest (string-split s #\\space))])\n       (cond\n\
    \         [(= n (count-consonants word))\n          (cons word (select-words (string-join\
    \ rest #\\space) n))]\n         [else (select-words (string-join rest #\\space)\
    \ n)]))]))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond [(empty? word) 0]\n\
    \          [(is-consonant? (first word))\n           (+ 1 (count-consonants (rest\
    \ word)))]\n          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond [(empty? words) empty]\n          [(= n (count-consonants\
    \ (first words)))\n           (cons (first words) (select-words-helper (rest words)\
    \ n))]\n          [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond [(empty? s) empty]\n        [else (define\
    \ (helper s n)\n                (cond [(empty? s) empty]\n                   \
    \   [(and (char-consonant? (first s)) (= n 1)) (cons (first s) (helper (rest s)\
    \ 0))]\n                      [(char-consonant? (first s)) (helper (rest s) (-\
    \ n 1))]\n                      [else (helper (rest s) 0)]))\n              (define\
    \ (char-consonant? c)\n                (cond [(char=? c #\\a) #f]\n          \
    \            [(char=? c #\\e) #f]\n                      [(char=? c #\\i) #f]\n\
    \                      [(char=? c #\\o) #f]\n                      [(char=? c\
    \ #\\u) #f]\n                      [else #t]))\n              (define (word-list\
    \ s)\n                (cond [(empty? s) empty]\n                      [(char-consonant?\
    \ (first s)) (cons (first s) (word-list (rest s)))]\n                      [else\
    \ empty]))\n              (define (word-list-helper s)\n                (cond\
    \ [(empty? s) empty]\n                      [(char-consonant? (first s)) (cons\
    \ (word-list s) (word-list-helper (rest s)))]\n                      [else (word-list-helper\
    \ (rest s))]))\n              (define (word-list-helper-2 s)\n               \
    \ (cond [(empty? s) empty]\n                      [(char-consonant? (first s))\
    \ (cons (word-list s) (word-list-helper-2 (rest s)))]\n                      [else\
    \ (word-list-helper-2 (rest s))]))\n              (define (word-list-helper-3\
    \ s)\n                (cond [(empty? s) empty]\n                      [(char-consonant?\
    \ (first s)) (cons (word-list s) (word-list-helper-3 (rest s)))]\n           \
    \           [else (word-list-helper-3 (rest s))]))\n              (define (word-list-helper-4\
    \ s)\n                (cond [(empty", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s))))\n     \
    \   (cons (first (string-split s)) (select_words (rest (string-split s)) n))]\n\
    \       [else (select_words (rest (string-split s)) n)])]))\n", "  (filter (lambda\
    \ (x) (= n (count-consonants x))) (string-split s)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (member c '(#\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants word)\n       (cond\n\
    \         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (define\
    \ (select-words-helper s n)\n            (cond\n              [(empty? s) empty]\n\
    \              [else\n               (define (select-words-helper-helper s n)\n\
    \                 (cond\n                   [(empty? s) empty]\n             \
    \      [else\n                    (define (select-words-helper-helper-helper s\
    \ n)\n                      (cond\n                        [(empty? s) empty]\n\
    \                        [else\n                         (define (select-words-helper-helper-helper-helper\
    \ s n)\n                           (cond\n                             [(empty?\
    \ s) empty]\n                             [else\n                            \
    \  (define (select-words-helper-helper-helper-helper-helper s n)\n           \
    \                     (cond\n                                  [(empty? s) empty]\n\
    \                                  [else\n                                   (define\
    \ (select-words-helper-helper-helper-helper-helper-helper s n)\n             \
    \                        (cond\n                                       [(empty?\
    \ s) empty]\n                                       [else\n                  \
    \                      (define (select-words-helper-helper-helper-helper-helper-helper-helper\
    \ s n)\n                                          (cond\n                    \
    \                        [(empty? s) empty]\n                                \
    \            [else\n                                             (define (select-words-helper-helper-helper-helper-hel",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n       [(= n (count-consonants\
    \ (first (string-split s))))\n        (cons (first (string-split s)) (select-words\
    \ (rest (string-split s)) n))]\n       [else (select-words (rest (string-split\
    \ s)) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonants?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [(consonants? (first s))\
    \ (+ 1 (count-consonants (rest s)))]\n         [else (count-consonants (rest s))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (filter (lambda (word) (= n (count-consonants word)))\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\
    \ ([word (first (string-split s #\\space))]\n            [consonants (count-consonants\
    \ word)])\n       (if (= consonants n)\n           (cons word (select-words (rest\
    \ (string-split s #\\space)) n))\n           (select-words (rest (string-split\
    \ s #\\space)) n)))]))\n", "  (cond [(empty? s) empty]\n        [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (for/list ([w (in-string s)])\n    (if\
    \ (= n (count-consonants w))\n        w)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n     (define (count-consonants s)\n       (cond\n         [(empty?\
    \ s) 0]\n         [(consonants? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \         [else (count-consonants (rest s))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s)))\n          (cons (first s) (select-words (rest s) n))]\n         [else\
    \ (select-words (rest s) n)]))\n     (select-words (string-split s #\\space) n)]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(is-vowel?\
    \ (first word)) (count-consonants (rest word))]\n      [else (+ 1 (count-consonants\
    \ (rest word)))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) '()]\n      [(count-consonants (first s)) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (filter (lambda (w) (= n (count-consonants w)))\
    \ (string-split s)))\n", "  (filter (lambda (word)\n            (= n (count-consonants\
    \ word)))\n          (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n     (define (count-consonants w)\n       (cond\n      \
    \   [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first w))\
    \ 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (filter (lambda (word)\n            (= n (count-consonants word)))\n        \
    \  (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (filter (lambda (w) (= n (count-consonants\
    \ w)))\n          (split s #\\space)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (count-consonants word)\n       (define (is-consonant?\
    \ c)\n         (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n       (cond\n       \
    \  [(empty? word) 0]\n         [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n         [else (count-consonants (rest word))]))\n     (define\
    \ (select-words-helper s n acc)\n       (cond\n         [(empty? s) acc]\n   \
    \      [(equal? (count-consonants (first s)) n) (select-words-helper (rest s)\
    \ n (append acc (list (first s))))]\n         [else (select-words-helper (rest\
    \ s) n acc)]))\n     (select-words-helper (string-split s) n empty)]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants s)\n\
    \       (cond\n         [(empty? s) 0]\n         [(consonant? (first s)) (+ 1\
    \ (count-consonants (rest s)))]\n         [else (count-consonants (rest s))]))\n\
    \     (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(count-consonants (first s)) (cons (first s) (select-words-helper (rest\
    \ s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (cond [(empty? s) empty]\n        [else (cond\
    \ [(= n (count-consonants (first (string-split s #\\space))))\n              \
    \       (cons (first (string-split s #\\space))\n                           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n             \
    \       [else (select_words (string-join (rest (string-split s #\\space)) #\\\
    space) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w\
    \ (first (string-split s #\\space))]\n           [r (rest (string-split s #\\\
    space))])\n       (cond\n         [(= n (count-consonants w))\n          (cons\
    \ w (select-words (string-join r #\\space) n))]\n         [else (select-words\
    \ (string-join r #\\space) n)]))]))\n", "  (filter (lambda (word) (= n (count-consonants\
    \ word))) (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (cond\n       [(= n (count-consonants (first (string-split s))))\n\
    \        (cons (first (string-split s)) (select_words (string-join (rest (string-split\
    \ s))) n))]\n       [else (select_words (string-join (rest (string-split s)))\
    \ n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([word (first\
    \ (regexp-match #rx\"\\w+\" s))]\n           [rest (regexp-match #rx\"\\w+\" (substring\
    \ s (add1 (string-length word))))])\n       (cond\n         [(= n (count-consonants\
    \ word))\n          (cons word (select-words (substring s (add1 (string-length\
    \ word))) n))]\n         [else (select-words (substring s (add1 (string-length\
    \ word))) n)]))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k\
    \ #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (consonants? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s)) (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants w)\n    (for/fold\
    \ ([count 0]) ([c (in-string w)])\n      (if (is-consonant? c)\n          (add1\
    \ count)\n          count)))\n  (define (select-words-helper s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n       (cons\
    \ (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (empty?\
    \ s)\n      '()\n      (let* ([words (string-split s #\\space)]\n            \
    \ [filtered-words (filter (lambda (word)\n                                   \
    \    (= n (count-consonants word)))\n                                     words)])\n\
    \        filtered-words)))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-&gt;list s) n))\n", "  (filter (lambda (word) (= n (count-consonants\
    \ word)))\n          (string-split s #\\space)))\n", "  (if (empty? s)\n     \
    \ '()\n      (let* ([words (string-split s #\\space)]\n             [selected\
    \ (filter (lambda (w) (= n (count-consonants w))) words)])\n        (if (empty?\
    \ selected)\n            '()\n            (cons (first selected) (select-words\
    \ (string-join (rest selected) #\\space) n))))))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (cond\n       [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n        (cons (first (string-split s #\\space))\n          \
    \    (select_words (string-join (rest (string-split s #\\space)) #\\space) n))]\n\
    \       [else (select_words (string-join (rest (string-split s #\\space)) #\\\
    space) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [(consonant? (first s))\
    \ (+ 1 (count-consonants (rest s)))]\n         [else (count-consonants (rest s))]))\n\
    \     (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(count-consonants (first s)) (cons (first s) (select-words-helper (rest\
    \ s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n  (define (count-consonants word)\n\
    \    (cond [(empty? word) 0]\n          [(is-consonant? (first word))\n      \
    \     (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond [(empty?\
    \ words) empty]\n          [(= n (count-consonants (first words)))\n         \
    \  (cons (first words) (select-words-helper (rest words) n))]\n          [else\
    \ (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (filter (lambda (word)\n            (= n (count-consonants word)))\n\
    \          (string-split s #\\space)))\n", "  (filter (lambda (word)\n       \
    \     (= n (count-consonants word)))\n          (string-split s #\\space)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n       [(= n (count-consonants\
    \ (first (string-split s))))\n        (cons (first (string-split s)) (select_words\
    \ (rest (string-split s)) n))]\n       [else (select_words (rest (string-split\
    \ s)) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0) (count-consonants (rest w)))]))\n     (define\
    \ (select-words s n)\n       (cond\n         [(empty? s) empty]\n         [(=\
    \ n (count-consonants (first s)))\n          (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n    \
    \     [else\n          (+ (if (is-consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n\
    \     (select-words (string-split s #\\space) n)]))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is-consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n)\n    (if (empty? s)\n        '()\n        (let ((word (first s)))\n   \
    \       (if (= n (count-consonants word))\n              (cons word (select-words-helper\
    \ (rest s) n))\n              (select-words-helper (rest s) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k\
    \ #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (consonants? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s))\n          (cons (first s)\
    \ (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n \
    \    (select-words (string-split s #\\space) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (cond\n       [(= n (count-consonants (first (string-split\
    \ s))))\n        (cons (first (string-split s))\n              (select_words (string-join\
    \ (rest (string-split s))) n))]\n       [else (select_words (string-join (rest\
    \ (string-split s))) n)])]))\n", "  (for/list ([w (in-string s)])\n    (cond\n\
    \      [(= n (count-consonants w)) w])))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n     (define (count-consonants w)\n       (length (filter\
    \ is-consonant? (string->list w))))\n     (define (select-words-helper ws)\n \
    \      (cond\n         [(empty? ws) empty]\n         [(= n (count-consonants (first\
    \ ws)))\n          (cons (first ws) (select-words-helper (rest ws)))]\n      \
    \   [else (select-words-helper (rest ws))]))\n     (select-words-helper (string-split\
    \ s #\\space))]))\n", "  (cond [(empty? s) empty]\n        [else (cond [(= n (count-consonants\
    \ (first (string-split s))))\n                     (cons (first (string-split\
    \ s)) (select-words (rest (string-split s)) n))]\n                    [else (select-words\
    \ (rest (string-split s)) n)])]))\n", "  (if (empty? s)\n      '()\n      (if\
    \ (and (not (empty? (regexp-match #rx\"^[^aeiou ]+$\" (car (string-split s #\\\
    space)))))\n               (= n (string-length (car (string-split s #\\space)))))\n\
    \          (cons (car (string-split s #\\space)) (select_words (cdr (string-split\
    \ s #\\space)) n))\n          (select_words (cdr (string-split s #\\space)) n))))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (cons (car s) (select_words (cdr s)\
    \ n))]))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond [(empty? s) empty]\n        [else (define\
    \ (consonants s)\n                (cond [(empty? s) empty]\n                 \
    \     [(char-consonant? (car s)) (cons (car s) (consonants (cdr s)))]\n      \
    \                [else (consonants (cdr s))]))\n              (define (words s)\n\
    \                (cond [(empty? s) empty]\n                      [(char-whitespace?\
    \ (car s)) (cons (consonants (cdr s)) (words (cdr s)))]\n                    \
    \  [else (words (cdr s))]))\n              (define (filter-words words n)\n  \
    \              (cond [(empty? words) empty]\n                      [(= (length\
    \ (car words)) n) (cons (car words) (filter-words (cdr words) n))]\n         \
    \             [else (filter-words (cdr words) n)]))\n              (filter-words\
    \ (words s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cond\n    \
    \        [(= n (count-consonants (first (string-split s))))\n             (cons\
    \ (first (string-split s)) (select-words (rest (string-split s)) n))]\n      \
    \      [else (select-words (rest (string-split s)) n)])]))\n", "  (cond [(empty?\
    \ s) empty]\n        [else (cons (first s) (select_words (rest s) n))]))\n", " \
    \ (filter (lambda (word)\n            (= n (count-consonants word)))\n       \
    \   (string-split s #\\space)))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= (count-consonants (first s)) n) (cons (first s) (select_words (rest\
    \ s) n))]\n                   [else (select_words (rest s) n)])]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (consonants? c)\n       (member\
    \ c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\"\
    \ \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (consonants? (first word)) 1 0)\n             (count-consonants (rest word)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(count-consonants (first s)) = n]\n         [else\n          (cons\
    \ (first s) (select-words (rest s) n))]))\n     (select-words (string-split s)\
    \ n)]))\n", "  (filter (lambda (x) (= n (count-consonants x))) (string-split s)))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is-consonant? (first\
    \ word))\n              (count-consonants-iter (rest word) (+ count 1))\n    \
    \          (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n lst)\n    (if (empty? s)\n      \
    \  lst\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n         \
    \ (if (= n (count-consonants word))\n              (select-words-iter (regexp-replace\
    \ #rx\"\\w+\" s \"\") n (append lst (list word)))\n              (select-words-iter\
    \ (regexp-replace #rx\"\\w+\" s \"\") n lst)))))\n  (select-words-iter s n '()))\n",
  "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants w)\n    (define (count-consonants-iter w i)\n      (if (&gt;=\
    \ i (string-length w))\n          0\n          (if (is-vowel (string-ref w i))\n\
    \              (count-consonants-iter w (+ i 1))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1))))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (&gt;= i (string-length s))\n        '()\n        (let ((w (string-tokenize\
    \ s)))\n          (if (= n (count-consonants w))\n              (cons w (select-words-iter\
    \ s (+ i (string-length w))))\n              (select-words-iter s (+ i (string-length\
    \ w)))))))\n  (select-words-iter s 0))\n</code>\n", "  (if (empty? s)\n      empty\n\
    \      (if (= n (count-consonants (first (string-split s))))\n          (cons\
    \ (first (string-split s)) (select-words (rest (string-split s)) n))\n       \
    \   (select-words (rest (string-split s)) n))))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((is-consonant? (car word)) (+\
    \ 1 (count-consonants (cdr word))))\n          (else (count-consonants (cdr word)))))\n\
    \  (define (select-words-helper s n acc)\n    (cond ((null? s) acc)\n        \
    \  ((= n (count-consonants (car s))) (select-words-helper (cdr s) n (cons (car\
    \ s) acc)))\n          (else (select-words-helper (cdr s) n acc))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n \
    \    (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n   \
    \      [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n         [else\
    \ (count-consonants (rest s))]))\n     (define (consonant? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (select-words-helper s n)\n \
    \      (cond\n         [(empty? s) empty]\n         [(equal? n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= n (count-consonants (first s)))\n                     (cons (first\
    \ s) (select_words (rest s) n))]\n                    [else (select_words (rest\
    \ s) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (if (string=? s \"\")\n      '()\n \
    \     (let* ([words (string-split s)]\n             [consonants (string-&gt;list\
    \ \"bcdfghjklmnpqrstvwxyz\")])\n        (filter (lambda (word)\n             \
    \     (= n (length (filter (lambda (char)\n                                  \
    \       (member char consonants))\n                                       (string-&gt;list\
    \ word)))))\n                words))))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let* ([word (first (regexp-match #rx\"^[a-zA-Z]+\" s))]\n  \
    \          [rest (substring s (string-length word))])\n       (if (= n (count-consonants\
    \ word))\n           (cons word (select-words rest n))\n           (select-words\
    \ rest n)))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonants?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (consonants? (first word)) 1 0)\n             (count-consonants (rest word)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(equal? n (count-consonants (first s)))\n          (cons (first s)\
    \ (select-words (rest s) n))]\n         [else (select-words (rest s) n)]))\n \
    \    (select-words (string-split s #\\space) n)]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (string-empty?\
    \ word)\n          count\n          (if (is-vowel? (string-ref word 0))\n    \
    \          (count-consonants-iter (substring word 1) count)\n              (count-consonants-iter\
    \ (substring word 1) (+ count 1)))))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter s n result)\n    (if (string-empty? s)\n        result\n\
    \        (let ((word (string-trim (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s))))\n          (if (= n (count-consonants word))\n             \
    \ (select-words-iter (string-drop-while (lambda (c) (not (char=? c #\\ ))) s)\
    \ n (cons word result))\n              (select-words-iter (string-drop-while (lambda\
    \ (c) (not (char=? c #\\ ))) s) n result)))))\n  (select-words-iter s n '()))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is_consonant? c)\n  \
    \     (cond\n         [(char-ci=? c #\\a) #f]\n         [(char-ci=? c #\\e) #f]\n\
    \         [(char-ci=? c #\\i) #f]\n         [(char-ci=? c #\\o) #f]\n        \
    \ [(char-ci=? c #\\u) #f]\n         [else #t]))\n     (define (count_consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (cond\n\
    \            [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \            [else (count_consonants (rest word))])]))\n     (define (select_words_helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count_consonants\
    \ (first s))\n          (cond\n            [(= n (count_consonants (first s)))\n\
    \             (cons (first s) (select_words_helper (rest s) n))]\n           \
    \ [else (select_words_helper (rest s) n)])]\n         [else (select_words_helper\
    \ (rest s) n)]))\n     (select_words_helper (string-split s #\\space) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s)) = n (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (helper s n)\n       (cond\n         [(empty? s) empty]\n      \
    \   [(= n 0) (list (first s))]\n         [else\n          (append (helper (rest\
    \ s) n)\n                  (helper (rest s) (- n 1)))]))\n     (helper s n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (append (select_words (rest s) n)\n\
    \                  (if (= n (count-consonants (first s)))\n                  \
    \    (list (first s))\n                      empty))]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants w)\n       (cond\n\
    \         [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s #\\\
    space) n)]))\n", "  (filter (lambda (word)\n            (= n (count-consonants\
    \ word)))\n          (string-split s #\\space)))\n", "  (filter (lambda (x) (=\
    \ n (count-consonants x))) (string-&gt;list s)))\n", "  (if (empty? s)\n     \
    \ '()\n      (let* ([words (string-split s #\\space)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")])\n        (filter (lambda (w)\n\
    \                  (= n (count (lambda (c) (member c consonants)) w)))\n     \
    \           words))))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond [(empty?\
    \ word) 0]\n          [(is-consonant? (first word))\n           (+ 1 (count-consonants\
    \ (rest word)))]\n          [else (count-consonants (rest word))]))\n  (define\
    \ (select-words-helper words n)\n    (cond [(empty? words) empty]\n          [(=\
    \ n (count-consonants (first words)))\n           (cons (first words)\n      \
    \           (select-words-helper (rest words) n))]\n          [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (filter\
    \ (lambda (x) (= n (count-consonants x))) (string-split s)))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"\\\
    w+\" s))]\n           [rest (substring s (add1 (string-length word)) (string-length\
    \ s))])\n       (if (= n (count-consonants word))\n           (cons word (select-words\
    \ rest n))\n           (select-words rest n)))]))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(and (empty? (rest s)) (not (vowel? (first s))) (= n 1))\
    \ (list (first s))]\n         [(and (empty? (rest s)) (not (vowel? (first s)))\
    \ (= n 0)) empty]\n         [(and (empty? (rest s)) (vowel? (first s))) empty]\n\
    \         [(and (not (empty? (rest s))) (vowel? (first s))) (helper (rest s) n)]\n\
    \         [(and (not (empty? (rest s))) (not (vowel? (first s))) (= n 1)) (list\
    \ (first s))]\n         [(and (not (empty? (rest s))) (not (vowel? (first s)))\
    \ (= n 0)) empty]\n         [(and (not (empty? (rest s))) (not (vowel? (first\
    \ s))) (> n 1)) (helper (rest s) (- n 1))]))\n     (helper s n)]))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (cond [(= n (count-consonants (first (string-split\
    \ s))))\n                     (cons (first (string-split s)) (select-words (rest\
    \ (string-split s)) n))]\n                    [else (select-words (rest (string-split\
    \ s)) n)])]))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"y\"))))\n  (define (count-consonants word)\n    (if (empty?\
    \ word)\n        0\n        (+ (if (is-consonant? (first word)) 1 0)\n       \
    \    (count-consonants (rest word)))))\n  (define (select-words-helper s n acc)\n\
    \    (if (empty? s)\n        acc\n        (let ([word (first s)])\n          (if\
    \ (= n (count-consonants word))\n              (select-words-helper (rest s) n\
    \ (append acc (list word)))\n              (select-words-helper (rest s) n acc)))))\n\
    \  (select-words-helper (string-split s) n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants word)\n       (cond\n\
    \         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n]\n         [else\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]))\n     (select-words-helper (string-split s #\\space) n)]))\n",
  "  (if (empty? s)\n      empty\n      (if (= n (count-consonants (first (string-split\
    \ s))))\n          (cons (first (string-split s)) (select-words (rest (string-split\
    \ s)) n))\n          (select-words (rest (string-split s)) n))))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is_consonant? c)\n       (cond\n\
    \         [(char-ci=? c #\\a) false]\n         [(char-ci=? c #\\e) false]\n  \
    \       [(char-ci=? c #\\i) false]\n         [(char-ci=? c #\\o) false]\n    \
    \     [(char-ci=? c #\\u) false]\n         [else true]))\n     (define (count_consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (cond\n\
    \            [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \            [else (count_consonants (rest word))])]))\n     (define (select_words_helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count_consonants\
    \ (first s)) n]\n         [else (cons (first s) (select_words_helper (rest s)\
    \ n))]))\n     (select_words_helper (string-split s) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n", "  (cond\n\
    \    [(empty? s) '()]\n    [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f) (char=?\
    \ c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k) (char=? c #\\l) (char=?\
    \ c #\\m) (char=? c #\\n) (char=? c #\\p) (char=? c #\\q) (char=? c #\\r) (char=?\
    \ c #\\s) (char=? c #\\t) (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=?\
    \ c #\\y) (char=? c #\\z)))\n     (define (count-consonants word)\n       (cond\n\
    \         [(empty? word) 0]\n         [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n         [else (count-consonants (rest word))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(and (char=? (first s) #\\ ) (count-consonants (first (rest s))) n) (cons\
    \ (first (rest s)) (select-words-helper (rest (rest s)) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper s n)]))\n", "  (if (empty? s)\n  \
    \    '()\n      (let* ([words (string-split s #\\space)]\n             [consonants\
    \ \"bcdfghjklmnpqrstvwxyz\"]\n             [count-consonants (lambda (w)\n   \
    \                              (count-every (lambda (c)\n                    \
    \                            (member c consonants))\n                        \
    \                      w))]\n             [selected-words (filter (lambda (w)\n\
    \                                       (= n (count-consonants w)))\n        \
    \                             words)])\n        selected-words)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (consonants? s)\n       (cond\n\
    \         [(empty? s) 0]\n         [(member (first s) '#\\a #\\e #\\i #\\o #\\\
    u) (consonants? (rest s))]\n         [else (+ 1 (consonants? (rest s)))]))\n \
    \    (define (select-words-helper s n result)\n       (cond\n         [(empty?\
    \ s) result]\n         [(equal? (consonants? (first s)) n)\n          (select-words-helper\
    \ (rest s) n (append result (list (first s))))]\n         [else (select-words-helper\
    \ (rest s) n result)]))\n     (select-words-helper (string-split s) n empty)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n       [(= n (count-consonants\
    \ (first (string-split s))))\n        (cons (first (string-split s)) (select_words\
    \ (string-join (rest (string-split s))) n))]\n       [else (select_words (string-join\
    \ (rest (string-split s))) n)])]))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= n (count-consonants (first (string-split s))))\n                 \
    \    (cons (first (string-split s)) (select-words (rest (string-split s)) n))]\n\
    \                    [else (select-words (rest (string-split s)) n)])]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n \
    \      (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (if (is-consonant?\
    \ (first s))\n              (+ 1 (count-consonants (rest s)))\n              (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (take-word s)\n            (cond\n\
    \              [(empty? s) empty]\n              [else\n               (if (char=?\
    \ (first s) #\\space)\n                   empty\n                   (cons (first\
    \ s) (take-word (rest s))))]))\n          (define (drop-word s)\n            (cond\n\
    \              [(empty? s) empty]\n              [else\n               (if (char=?\
    \ (first s) #\\space)\n                   (rest s)\n                   (drop-word\
    \ (rest s)))]))\n          (define (take-words s n)\n            (cond\n     \
    \         [(empty? s) empty]\n              [(zero? n) empty]\n              [else\n\
    \               (cons (take-word s) (take-words (drop-word s) (- n 1)))]))\n \
    \         (define (drop-words s n)\n            (cond\n              [(empty?\
    \ s) empty]\n              [(zero? n) s]\n              [else\n              \
    \ (drop-words (drop-word s) (- n 1))]))\n          (define (take-words-with-n-consonants\
    \ s n)\n            (cond\n              [(empty? s) empty]\n              [else\n\
    \               (if (= n (count-consonants (take-word s)))\n                 \
    \  (cons (take-word s) (take-words-", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ([word (first (regexp-match\
    \ #rx\"\\w+\" s))])\n          (if (= n (count-consonants word))\n           \
    \   (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append result (list\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\"\
    ) n result)))))\n  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(count-consonants (first s)) = n]\n         [else (select-words-helper (rest\
    \ s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (filter (lambda (w) (= n (count-consonants w))) (string-&gt;words s)))\n", " \
    \ (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"y\"))))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond [(empty?\
    \ s) empty]\n        [else (cond [(= n (count-consonants (first (string-split\
    \ s))))\n                     (cons (first (string-split s)) (select-words (rest\
    \ (string-split s)) n))]\n                    [else (select-words (rest (string-split\
    \ s)) n)])]))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (if (= n (count-consonants (first s)))\n            (select-words-iter\
    \ (rest s) n (append result (list (first s))))\n            (select-words-iter\
    \ (rest s) n result))))\n  (select-words-iter (string-split s) n '()))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (define (consonants? c)\n   \
    \    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n\
    \       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (consonants?\
    \ (first w)) 1 0) (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (define\
    \ (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((is_consonant? (car word)) (+\
    \ 1 (count-consonants (cdr word))))\n          (else (count-consonants (cdr word)))))\n\
    \  (define (select-words-helper words n)\n    (cond ((null? words) '())\n    \
    \      ((= n (count-consonants (car words))) (cons (car words) (select-words-helper\
    \ (cdr words) n)))\n          (else (select-words-helper (cdr words) n))))\n \
    \ (select-words-helper (string-split s) n))\n", "  (filter (lambda (w) (= n (count-consonants\
    \ w))) (string-tokenize s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (select_words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select_words-helper\
    \ (rest s) n))]\n         [else (select_words-helper (rest s) n)]))\n     (select_words-helper\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (define (is-consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (count-consonants word)\n       (cond\n         [(empty? word) 0]\n\
    \         [else\n          (+ (if (is-consonant? (first word)) 1 0)\n        \
    \     (count-consonants (rest word)))]))\n     (define (select-words-helper s\
    \ n result)\n       (cond\n         [(empty? s) result]\n         [else\n    \
    \      (define (is-word? s)\n            (not (member (first s) '(#\\  #\\))))\n\
    \          (define (get-word s)\n            (cond\n              [(empty? s)\
    \ empty]\n              [(is-word? s) (cons (first s) (get-word (rest s)))]\n\
    \              [else empty]))\n          (define (get-next-word s)\n         \
    \   (cond\n              [(empty? s) empty]\n              [(is-word? s) (rest\
    \ s)]\n              [else (get-next-word (rest s))]))\n          (define word\
    \ (get-word s))\n          (define next-word (get-next-word s))\n          (if\
    \ (= n (count-consonants word))\n              (select-words-helper next-word\
    \ n (cons word result))\n              (select-words-helper next-word n result))]))\n\
    \     (reverse (select-words-helper s n empty))]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (member c '(#\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n       (cond\n  \
    \       [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0) (count-consonants (rest w)))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(equal? n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s #\\\
    space) n)]))\n", "  (if (empty? s)\n      '()\n      (if (= n (count-consonants\
    \ (first (string-split s #\\space))))\n          (cons (first (string-split s\
    \ #\\space))\n                (select-words (rest (string-split s #\\space)) n))\n\
    \          (select-words (rest (string-split s #\\space)) n))))\n", "  (define\
    \ (is-consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (for/list\
    \ ([w (in-list (string-split s #\\space))]\n             #:when (= n (count-consonants\
    \ w)))\n    w))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (if (empty? s)\n   \
    \     0\n        (+ (if (is-consonant? (first s)) 1 0)\n           (count-consonants\
    \ (rest s)))))\n  (define (select-words s n)\n    (if (empty? s)\n        '()\n\
    \        (let ((w (first s)))\n          (if (= n (count-consonants w))\n    \
    \          (cons w (select-words (rest s) n))\n              (select-words (rest\
    \ s) n)))))\n  (select-words (string-split s #\\space) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (define (helper s n)\n                (define\
    \ (count-consonants s)\n                  (cond [(empty? s) 0]\n             \
    \           [(member (first s) '#\\a #\\e #\\i #\\o #\\u) (count-consonants (rest\
    \ s))]\n                        [else (+ 1 (count-consonants (rest s)))]))\n \
    \               (define (helper2 s n)\n                  (cond [(empty? s) empty]\n\
    \                        [(= n (count-consonants (first s))) (cons (first s) (helper2\
    \ (rest s) n))]\n                        [else (helper2 (rest s) n)]))\n     \
    \           (helper2 (string-split s) n))]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let ([word (first (regexp-match #rx\"^[^ ]+\" s))]\n       \
    \    [rest (substring s (add1 (string-length word)) (string-length s))])\n   \
    \    (cond\n         [(= n (count-consonants word))\n          (cons word (select_words\
    \ rest n))]\n         [else\n          (select_words rest n)]))]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-alphabetic? c)\n       (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))]\n      [else #f]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\n\
    \       (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest\
    \ word))]))\n  (define (select-words-helper words n)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (define (helper s n)\n                (cond\
    \ [(empty? s) empty]\n                      [(and (char-consonant? (first s))\
    \ (= n 1)) (cons (list (first s)) (helper (rest s) 0))]\n                    \
    \  [(char-consonant? (first s)) (helper (rest s) (+ n 1))]\n                 \
    \     [(= n 0) (cons (list (first s)) (helper (rest s) 0))]\n                \
    \      [else (helper (rest s) 0)]))\n              (helper s 0)]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (if (= n (count-consonants (first (string-split\
    \ s))))\n         (cons (first (string-split s)) (select-words (rest (string-split\
    \ s)) n))\n         (select-words (rest (string-split s)) n))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define word (first (regexp-match #rx\"\
    \\w+\" s)))\n     (define rest (regexp-match #rx\"\\s*\" s))\n     (define rest\
    \ (substring s (string-length rest)))\n     (define consonants (count-consonants\
    \ word))\n     (cond\n       [(= consonants n) (cons word (select_words rest n))]\n\
    \       [else (select_words rest n)])]))\n", "  (filter (lambda (word)\n     \
    \       (= n (length (regexp-match #rx\"[^aeiou]\" word))))\n          (regexp-split\
    \ #rx\"\\s+\" s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let\
    \ ([word (regexp-match #rx\"^[a-zA-Z]+\" s)])\n       (if (and word (= n (count-consonants\
    \ (car word))))\n           (cons (car word) (select-words (regexp-replace #rx\"\
    ^[a-zA-Z]+\" s \"\") n))\n           (select-words (regexp-replace #rx\"^[a-zA-Z]+\"\
    \ s \"\") n)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
