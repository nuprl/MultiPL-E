name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  (define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n",
  "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count_consonants word)\n    (length (filter is_consonant? (string->list\
    \ word))))\n  (define (is_n_consonants? word)\n    (= n (count_consonants word)))\n\
    \  (filter is_n_consonants? (string-split s #\\space)))\n", "  (if (string=? s\
    \ \"\")\n      '()\n      (let* ([words (string-split s #\\space)]\n         \
    \    [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n\
    \ #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)]\n             [consonant-count\
    \ (lambda (word)\n                                (count (lambda (char)\n    \
    \                                     (member char consonants))\n            \
    \                           word))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n       [(= n (count-consonants\
    \ (first (string-split s))))\n        (cons (first (string-split s)) (select_words\
    \ (string-join (rest (string-split s))) n))]\n       [else (select_words (string-join\
    \ (rest (string-split s))) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (count-consonants w)\n       (define (is-consonant? c)\n       \
    \  (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n       (define (count-consonants-helper\
    \ w n)\n         (cond\n           [(empty? w) n]\n           [(is-consonant?\
    \ (first w)) (count-consonants-helper (rest w) (+ n 1))]\n           [else (count-consonants-helper\
    \ (rest w) n)]))\n       (count-consonants-helper w 0))\n     (define (select-words-helper\
    \ s n l)\n       (cond\n         [(empty? s) l]\n         [(count-consonants (first\
    \ s)) (select-words-helper (rest s) n (append l (list (first s))))]\n        \
    \ [else (select-words-helper (rest s) n l)]))\n     (select-words-helper (string-split\
    \ s) n empty)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (filter (lambda (x) (= n (count-consonants\
    \ x))) (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n  \
    \   (let* ([word (first (regexp-match #rx\"^[^ ]+\" s))]\n            [rest (regexp-replace\
    \ #rx\"^[^ ]+\" s \"\")])\n       (cond\n         [(= n (count-consonants word))\n\
    \          (cons word (select-words rest n))]\n         [else\n          (select-words\
    \ rest n)]))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n\
    \       [(= n (count-consonants (first (string-split s))))\n        (cons (first\
    \ (string-split s)) (select-words (rest (string-split s)) n))]\n       [else (select-words\
    \ (rest (string-split s)) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\
    \ (cond\n            [(= n (count-consonants (first (string-split s))))\n    \
    \         (cons (first (string-split s)) (select-words (rest (string-split s))\
    \ n))]\n            [else (select-words (rest (string-split s)) n)])]))\n", " \
    \ (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (define\
    \ (is_consonant? c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n      \
    \  (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n       \
    \ (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\k)\n        (equal?\
    \ c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n        (equal? c\
    \ #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n        (equal? c #\\\
    s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n        (equal? c #\\w)\n\
    \        (equal? c #\\x)\n        (equal? c #\\y)\n        (equal? c #\\z)))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is_consonant? (first\
    \ word))\n              (count-consonants-iter (rest word) (+ count 1))\n    \
    \          (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (append result (list word)))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words (rest\
    \ s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (car s) (select_words\
    \ (cdr s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (and (not (char-alphabetic? c))\n            (not\
    \ (char-whitespace? c))))\n     (define (count-consonants w)\n       (cond\n \
    \        [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) n]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (cond [(empty? s) empty]\n        [else (cond\
    \ [(= n (count-consonants (first (string-split s))))\n                     (cons\
    \ (first (string-split s)) (select-words (rest (string-split s)) n))]\n      \
    \              [else (select-words (rest (string-split s)) n)])]))\n", "  (cond\
    \ [(empty? s) empty]\n        [else (cond [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n                     (cons (first (string-split s #\\space))\n\
    \                           (select_words (string-join (rest (string-split s #\\\
    space)) #\\space) n))]\n                    [else (select_words (string-join (rest\
    \ (string-split s #\\space)) #\\space) n)])]))\n", "  (define (is-consonant? c)\n\
    \    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (for/fold ([count 0]) ([c (in-string word)])\n      (if (is-consonant?\
    \ c)\n          (+ count 1)\n          count)))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is_consonant? c)\n    (not (or (char-ci=? c #\\a)\n    \
    \         (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count_consonants word)\n\
    \    (for/fold ([count 0]) ([c (in-string word)])\n      (if (is_consonant? c)\n\
    \          (add1 count)\n          count)))\n  (for/list ([word (in-string s)])\n\
    \    (if (= n (count_consonants word))\n        word\n        #f)))\n", "  (for/list\
    \ ([w (in-list (string-split s #\\space))]\n             #:when (= n (count-consonants\
    \ w)))\n    w))\n", "  (for/list ([w (in-string s)])\n    (if (= n (count-consonants\
    \ w))\n        w)))\n", "  (define (is_consonant? c)\n    (or (char=? c #\\b)\
    \ (char=? c #\\c) (char=? c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\\
    h) (char=? c #\\j) (char=? c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\\
    n) (char=? c #\\p) (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\\
    t) (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\\
    z)))\n  (define (count_consonants word)\n    (cond ((empty? word) 0)\n       \
    \   ((is_consonant? (first word)) (+ 1 (count_consonants (rest word))))\n    \
    \      (else (count_consonants (rest word)))))\n  (define (select_words_helper\
    \ s n)\n    (cond ((empty? s) empty)\n          ((= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n)))\n          (else (select_words_helper\
    \ (rest s) n))))\n  (select_words_helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is-consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ words)\n    (if (empty? words)\n        '()\n        (let ((word (first words)))\n\
    \          (if (= n (count-consonants word))\n              (cons word (select-words-helper\
    \ (rest words)))\n              (select-words-helper (rest words))))))\n  (select-words-helper\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (select_words_iter s n acc)\n       (cond\n         [(empty? s) acc]\n     \
    \    [(and (not (empty? (regexp-match #rx\"^[^aeiouyAEIOUY ]+\" s)))\n       \
    \        (= n (string-length (regexp-match #rx\"^[^aeiouyAEIOUY ]+\" s))))\n \
    \         (select_words_iter (regexp-replace #rx\"^[^aeiouyAEIOUY ]+\" s \"\"\
    ) n (cons (regexp-match #rx\"^[^aeiouyAEIOUY ]+\" s) acc))]\n         [else (select_words_iter\
    \ (regexp-replace #rx\"^[^aeiouyAEIOUY ]+\" s \"\") n acc)]))\n     (select_words_iter\
    \ s n empty)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? n (count-consonants\
    \ (first s)))\n       (select-words-helper (rest s) n (cons (first s) acc))]\n\
    \      [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s)) n]\n         [else\n     \
    \     (cons (first s) (select-words-helper (rest s) n))]))\n     (select-words-helper\
    \ s n)]))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n", "  (define (is-consonant? c)\n    (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (regexp-match\
    \ #rx\"\\w+\" s))))\n          (if (= n (count-consonants word))\n           \
    \   (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append result (list\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\"\
    ) n result)))))\n  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([word (string-tokenize s)])\n        (if (and\
    \ (not (string=? word \"\"))\n                 (= n (count-consonants word)))\n\
    \            (cons word (select-words (substring s (add1 (string-length word)))\
    \ n))\n            (select-words (substring s (add1 (string-length word))) n)))))\n",
  "  (filter (lambda (w) (= n (count-consonants w))) (string-split s #\\space)))\n",
  "  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n    \
    \    (filter (lambda (x) (= n (count-consonants x))) w))))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o)\
    \ (char=? c #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_vowel?\
    \ (first word))\n              (count-consonants-iter (rest word) count)\n   \
    \           (count-consonants-iter (rest word) (+ count 1)))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (regexp-match #rx\"\\w+\" s)))\n          (if\
    \ (= n (count-consonants (first word)))\n              (select-words-iter (rest\
    \ s) n (append result (list (first word))))\n              (select-words-iter\
    \ (rest s) n result)))))\n  (select-words-iter s n '()))\n", "  (if (empty? s)\n\
    \      '()\n      (let ([w (string-split s)])\n        (if (and (not (empty? w))\n\
    \                 (= n (count-consonants (first w))))\n            (cons (first\
    \ w) (select-words (string-join (rest w)) n))\n            (select-words (string-join\
    \ (rest w)) n)))))\n", "  (filter (lambda (word) (equal? n (count-consonants word)))\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\
    \ ([word (first (regexp-match #rx\"^[^ ]+\" s))]\n            [rest (substring\
    \ s (string-length word))])\n       (append (if (= n (count-consonants word))\
    \ (list word) empty)\n               (select-words rest n)))]))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w))) (string-split s #\\space)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants w)\n\
    \       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(= n (count-consonants (first s)))\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (not (or\
    \ (char-alphabetic? c) (char-whitespace? c))))\n  (define (count-consonants w)\n\
    \    (if (empty? w)\n        0\n        (+ (if (is-consonant? (first w)) 1 0)\n\
    \           (count-consonants (rest w)))))\n  (define (select-words-iter s n acc)\n\
    \    (if (empty? s)\n        acc\n        (let ((w (string-split s #\\space)))\n\
    \          (if (= n (count-consonants (first w)))\n              (select-words-iter\
    \ (string-join (rest w) #\\space) n (cons (first w) acc))\n              (select-words-iter\
    \ (string-join (rest w) #\\space) n acc)))))\n  (select-words-iter s n '()))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-words-helper s n result)\n       (cond\n  \
    \       [(empty? s) result]\n         [else\n          (define (skip-spaces s)\n\
    \            (cond\n              [(empty? s) empty]\n              [(char=? (first\
    \ s) #\\space) (skip-spaces (rest s))]\n              [else s]))\n          (define\
    \ (take-word s)\n            (cond\n              [(empty? s) empty]\n       \
    \       [(char=? (first s) #\\space) empty]\n              [else (cons (first\
    \ s) (take-word (rest s)))]))\n          (define (skip-word s)\n            (cond\n\
    \              [(empty? s) empty]\n              [(char=? (first s) #\\space)\
    \ s]\n              [else (skip-word (rest s))]))\n          (define (take-words\
    \ s)\n            (cond\n              [(empty? s) empty]\n              [else\
    \ (cons (take-word s) (take-words (skip-word s)))]))\n          (define (count-consonants-words\
    \ words)\n            (cond\n              [(empty? words) empty]\n          \
    \    [else (cons (count-consonants (first words))\n                          (count-consonants-words\
    \ (rest words)))]))\n          (define (select-words words n result)\n       \
    \     (cond\n              [(empty? words) result]\n              [(= (first words)\
    \ n) (select-words (rest words) n\n                                          \
    \      (cons (first words) result))]\n              [else (select-words (rest\
    \ words) n result)]))\n          (define words (take-words (skip-spaces s)))\n",
  "  (filter (lambda (x) (= n (count-consonants x))) (string-split s #\\space)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w (string-tokenize s)])\n\
    \       (cond\n         [(= n (count-consonants (first w))) (cons (first w) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let* ([word (first (string-split s #\\\
    space))]\n            [word-consonants (count-consonants word)])\n       (if (=\
    \ word-consonants n)\n           (cons word (select-words (rest (string-split\
    \ s #\\space)) n))\n           (select-words (rest (string-split s #\\space))\
    \ n)))]))\n", "  (for/list ([word (in-string s)])\n    (when (= n (count-consonants\
    \ word))\n      word)))\n", "  (filter (lambda (w) (= n (count-consonants w)))\
    \ (string-split s #\\space)))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=?\
    \ c #\\a) (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=?\
    \ c #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (append result (list word)))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (filter (lambda (x) (= n (count-consonants x))) (string-split s)))\n",
  "  (filter (lambda (word) (= n (count-consonants word)))\n          (string-split\
    \ s #\\space)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (if (= n\
    \ (count-consonants (first (string-split s #\\space))))\n         (cons (first\
    \ (string-split s #\\space))\n               (select-words (string-join (rest\
    \ (string-split s #\\space)) #\\space) n))\n         (select-words (string-join\
    \ (rest (string-split s #\\space)) #\\space) n))]))\n", "  (filter (lambda (w)\
    \ (= n (count-consonants w))) (string-split s)))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (filter (lambda (x) (= n (count-consonants x)))\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define\
    \ (count-consonants word)\n       (cond\n         [(empty? word) 0]\n        \
    \ [else\n          (+ (if (is-consonant? (first word)) 1 0)\n             (count-consonants\
    \ (rest word)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (select-words-helper s n)\n   \
    \         (cond\n              [(empty? s) empty]\n              [(count-consonants\
    \ (first s)) = n (cons (first s) (select-words-helper (rest s) n))]\n        \
    \      [else (select-words-helper (rest s) n)]))\n          (select-words-helper\
    \ (string-split s #\\space) n)]))\n     (select-words s n)]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")])\n        (filter (lambda (word)\n\
    \                  (= n (length (filter (lambda (char)\n                     \
    \                    (member char consonants))\n                             \
    \          (string-&gt;list word)))))\n                words))))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (consonants? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (consonants s)\n       (cond\n\
    \         [(empty? s) empty]\n         [(consonants? (first s)) (cons (first s)\
    \ (consonants (rest s)))]\n         [else (consonants (rest s))]))\n     (define\
    \ (vowels? c)\n       (member c '(#\\a #\\e #\\i #\\o #\\u)))\n     (define (vowels\
    \ s)\n       (cond\n         [(empty? s) empty]\n         [(vowels? (first s))\
    \ (cons (first s) (vowels (rest s)))]\n         [else (vowels (rest s))]))\n \
    \    (define (word? s)\n       (and (not (empty? s))\n            (not (char=?\
    \ (first s) #\\space))\n            (not (char=? (first s) #\\newline))))\n  \
    \   (define (word s)\n       (cond\n         [(empty? s) empty]\n         [(word?\
    \ (first s)) (cons (first s) (word (rest s)))]\n         [else empty]))\n    \
    \ (define (word-consonants s)\n       (consonants (word s)))\n     (define (word-vowels\
    \ s)\n       (vowels (word s)))\n     (define (word-consonants-count s)\n    \
    \   (length (word-consonants s)))\n     (define (word-vowels-count s)\n      \
    \ (length (word-vowels s)))\n     (define (word-consonants-n? s n)\n       (=\
    \ (word-consonants-count s) n))\n     (define (word-vowels-n? s n)\n       (=\
    \ (word-vowels", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(consonant? (first\
    \ word)) (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants\
    \ (rest word))]))\n     (define (consonant? c)\n       (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n     (define (select-words-helper s n words)\n       (cond\n \
    \        [(empty? s) words]\n         [(char=? (first s) #\\ )\n          (cond\n\
    \            [(zero? (count-consonants (first words)))\n             (select-words-helper\
    \ (rest s) n (rest words))]\n            [(= n (count-consonants (first words)))\n\
    \             (cons (first words) (select-words-helper (rest s) n (rest words)))]\n\
    \            [else (select-words-helper (rest s) n (rest words))])]\n        \
    \ [else (select-words-helper (rest s) n (cons (string (first s)) (first words)))]))\n\
    \     (select-words-helper s n empty)]))\n", "  (define (is_consonant c)\n   \
    \ (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s)\
    \ n))", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0)\n             (count-consonants (rest w)))]))\n\
    \     (define (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (define (is-consonant? c)\n    (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (filter (lambda (x) (= n (count-consonants x)))\
    \ (string-split s)))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond ((null?\
    \ word) 0)\n          ((is-consonant? (car word))\n           (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\n\
    \           (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else\n     (if (= n (count-consonants (first (string-split\
    \ s #\\space))))\n         (cons (first (string-split s #\\space))\n         \
    \      (select-words (string-join (rest (string-split s #\\space)) #\\space) n))\n\
    \         (select-words (string-join (rest (string-split s #\\space)) #\\space)\
    \ n))]))\n", "  (cond [(empty? s) empty]\n        [else (cond [(= n (count-consonants\
    \ (first (string-split s))))\n                     (cons (first (string-split\
    \ s)) (select-words (rest (string-split s)) n))]\n                    [else (select-words\
    \ (rest (string-split s)) n)])]))\n", "  (for/list ([w (in-list (string-split\
    \ s #\\space))]\n             #:when (= n (count-consonants w)))\n    w))\n",
  "  (cond\n    [(empty? s) empty]\n    [else (cons (car s) (select_words (cdr s)\
    \ n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (cond\n\
    \       [(= n (count-consonants (first (string-split s #\\space))))\n        (cons\
    \ (first (string-split s #\\space))\n              (select_words (string-join\
    \ (rest (string-split s #\\space)) #\\space) n))]\n       [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else (cond\n            [(and (consonant? (first\
    \ s))\n                  (= n 1))\n             (cons (list (first s)) (select_words\
    \ (rest s) n))]\n            [(and (consonant? (first s))\n                  (>\
    \ n 1))\n             (cons (list (first s)) (select_words (rest s) (- n 1)))]\n\
    \            [(and (consonant? (first s))\n                  (< n 1))\n      \
    \       (select_words (rest s) n)]\n            [(and (not (consonant? (first\
    \ s)))\n                  (= n 0))\n             (cons (list (first s)) (select_words\
    \ (rest s) n))]\n            [(and (not (consonant? (first s)))\n            \
    \      (> n 0))\n             (select_words (rest s) n)]\n            [(and (not\
    \ (consonant? (first s)))\n                  (< n 0))\n             (select_words\
    \ (rest s) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants w)\n       (length (filter is-consonant? (string->list\
    \ w))))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(= n (count-consonants (first s)))\n          (cons (first\
    \ s) (select-words-helper (rest s) n))]\n         [else (select-words-helper (rest\
    \ s) n)]))\n     (select-words-helper (string-split s #\\space) n)]))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (define (is_consonant\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants-iter word count)\n      (cond [(empty?\
    \ word) count]\n            [(is_consonant (first word))\n             (count_consonants-iter\
    \ (rest word) (+ count 1))]\n            [else (count_consonants-iter (rest word)\
    \ count)]))\n    (count_consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (cond [(empty? s) result]\n          [(equal? n (count_consonants\
    \ (first s)))\n           (select-words-iter (rest s) n (append result (list (first\
    \ s))))]\n          [else (select-words-iter (rest s) n result)]))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n \
    \    (define (is-consonant? c)\n       (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"y\"))))\n     (define (count-consonants word)\n       (cond\n      \
    \   [(empty? word) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n]\n         [else (cons (first s) (select-words-helper (rest s)\
    \ n))]))\n     (select-words-helper (string-split s) n)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s))]\n           [rest (regexp-match #rx\"\\s*\" s)])\n       (if (and (not\
    \ (empty? word)) (= n (count-consonants word)))\n           (cons word (select-words\
    \ (substring s (string-length rest)) n))\n           (select-words (substring\
    \ s (string-length rest)) n)))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants word)\n       (cond\n         [(empty? word)\
    \ 0]\n         [else\n          (+ (if (is-consonant? (first word)) 1 0)\n   \
    \          (count-consonants (rest word)))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(count-consonants (first\
    \ s))\n          (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (filter\
    \ (lambda (word) (= n (count-consonants word))) (string-split s)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"\
    ^[a-zA-Z]+\" s))]\n           [rest (regexp-match #rx\"\\s*[a-zA-Z]+\" s)])\n\
    \       (if (and (not (empty? word))\n                (= n (count-consonants word)))\n\
    \           (cons word (select-words (rest rest) n))\n         (select-words (rest\
    \ rest) n)))]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(zero? n) empty]\n                    [else (cond [(zero? (count-consonants\
    \ (first (string-split s))))\n                                 (select-words (rest\
    \ (string-split s)) n)]\n                                [else (cond [(= n (count-consonants\
    \ (first (string-split s))))\n                                             (cons\
    \ (first (string-split s)) (select-words (rest (string-split s)) n))]\n      \
    \                                  [else (select-words (rest (string-split s))\
    \ n)])])])]))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper s\
    \ n)\n       (cond\n         [(empty? s) empty]\n         [(and (consonant? (first\
    \ s)) (= n 1))\n          (cons (list (first s)) (helper (rest s) (- n 1)))]\n\
    \         [(and (consonant? (first s)) (> n 1))\n          (helper (rest s) (-\
    \ n 1))]\n         [(and (not (consonant? (first s))) (= n 0))\n          (cons\
    \ (list (first s)) (helper (rest s) (- n 0)))]\n         [(and (not (consonant?\
    \ (first s))) (> n 0))\n          (helper (rest s) (- n 0))]\n         [else empty]))\n\
    \     (helper s n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let\
    \ ([word (first (regexp-match #rx\"^[a-zA-Z]+\" s))]\n           [rest (substring\
    \ s (string-length word))])\n       (cond\n         [(= n (count-consonants word))\n\
    \          (cons word (select-words rest n))]\n         [else\n          (select-words\
    \ rest n)]))]))\n", "  (define (is_consonant c)\n    (not (or (char-ci=? c #\\\
    a)\n             (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n       \
    \      (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count_consonants\
    \ word)\n    (cond ((empty? word) 0)\n          ((is_consonant (first word)) (+\
    \ 1 (count_consonants (rest word))))\n          (else (count_consonants (rest\
    \ word)))))\n  (define (select_words_helper s n)\n    (cond ((empty? s) empty)\n\
    \          ((= n (count_consonants (first s)))\n           (cons (first s) (select_words_helper\
    \ (rest s) n)))\n          (else (select_words_helper (rest s) n))))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u)))\n  (define (count-consonants w)\n    (cond ((null? w) 0)\n\
    \          ((is_vowel? (car w)) (count-consonants (cdr w)))\n          (else (+\
    \ 1 (count-consonants (cdr w))))))\n  (cond ((null? s) '())\n        ((= n (count-consonants\
    \ (string->list s))) (cons s (select_words (cdr s) n)))\n        (else (select_words\
    \ (cdr s) n))))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\
    \ [(empty? word) 0]\n          [(is-consonant? (first word))\n           (+ 1\
    \ (count-consonants (rest word)))]\n          [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond [(empty? words) empty]\n \
    \         [(= n (count-consonants (first words)))\n           (cons (first words)\
    \ (select-words-helper (rest words) n))]\n          [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (for/fold ([count 0]) ([c (in-string word)])\n\
    \      (if (is-consonant? c)\n          (+ count 1)\n          count)))\n  (define\
    \ (select-words-helper words)\n    (cond [(empty? words) empty]\n          [(=\
    \ n (count-consonants (first words)))\n           (cons (first words) (select-words-helper\
    \ (rest words)))]\n          [else (select-words-helper (rest words))]))\n  (select-words-helper\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n    \
    \     [else\n          (+ (if (is-consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words-helper s n)\n       (cond\n      \
    \   [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n       \
    \   (cons (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (select-words-helper s n acc)\n\
    \       (cond\n         [(empty? s) acc]\n         [(and (not (empty? (regexp-match\
    \ #rx\"[^aeiou ]\" (first s))))\n               (= n (string-length (regexp-match\
    \ #rx\"[^aeiou ]\" (first s)))))\n          (select-words-helper (rest s) n (cons\
    \ (first s) acc))]\n         [else (select-words-helper (rest s) n acc)]))\n \
    \    (reverse (select-words-helper s n empty))]))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(equal? n (count_consonants\
    \ (first s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n   \
    \   [else (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split\
    \ s) n))\n", "  (cond [(empty? s) empty]\n        [else (if (= n (count-consonants\
    \ (first (string-split s #\\space))))\n                 (cons (first (string-split\
    \ s #\\space)) (select-words (rest (string-split s #\\space)) n))\n          \
    \       (select-words (rest (string-split s #\\space)) n))]))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (cond\n       [(= n (count-consonants\
    \ (first (string-split s))))\n        (cons (first (string-split s)) (select_words\
    \ (rest (string-split s)) n))]\n       [else (select_words (rest (string-split\
    \ s)) n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n 0) (list (first\
    \ s))]\n         [else\n          (append (helper (rest s) n)\n              \
    \    (helper (rest s) (- n 1)))]))\n     (helper s n)]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([words (string-split s)])\n        (filter (lambda\
    \ (word)\n                  (= n (count-consonants word)))\n                words))))\n",
  "  (filter (lambda (w) (= n (count-consonants w)))\n          (string-split s #\\\
    space)))\n", "  (filter (lambda (x) (= n (count-consonants x))) (string-split\
    \ s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonants?\
    \ c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\\
    f) (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k) (char=? c #\\\
    l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p) (char=? c #\\q) (char=? c #\\\
    r) (char=? c #\\s) (char=? c #\\t) (char=? c #\\v) (char=? c #\\w) (char=? c #\\\
    x) (char=? c #\\y) (char=? c #\\z)))\n     (define (count-consonants word)\n \
    \      (cond\n         [(empty? word) 0]\n         [(consonants? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants (rest\
    \ word))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(char=? (first s) #\\ ) (select-words-helper (rest s) n)]\n\
    \         [else\n          (define (word-helper s)\n            (cond\n      \
    \        [(empty? s) empty]\n              [(char=? (first s) #\\ ) (list (reverse\
    \ (word-helper (rest s))))]\n              [else (word-helper (rest s)) (cons\
    \ (first s) (word-helper (rest s)))]))\n          (cons (word-helper s) (select-words-helper\
    \ (rest s) n))]))\n     (define (select-words-helper2 s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words-helper2 (rest s) n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n     (define (count-consonants word)\n       (cond\n   \
    \      [(empty? word) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s))\n          (cons (first s) (select-words-helper (rest s) n))]\n \
    \        [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (filter (lambda (w) (= n (count-consonants w)))\
    \ (string-split s)))\n", "  (define (is-consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select-words-helper s\
    \ n lst)\n    (cond\n      [(empty? s) lst]\n      [(equal? n (count-consonants\
    \ (first s))) (select-words-helper (rest s) n (append lst (list (first s))))]\n\
    \      [else (select-words-helper (rest s) n lst)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c\
    \ #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n  \
    \    [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (consonants-in-word w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant?\
    \ (first w)) (+ 1 (consonants-in-word (rest w)))]\n      [else (consonants-in-word\
    \ (rest w))]))\n  (define (select-words-helper s n lst)\n    (cond\n      [(empty?\
    \ s) lst]\n      [(= n (consonants-in-word (first s))) (select-words-helper (rest\
    \ s) n (append lst (list (first s))))]\n      [else (select-words-helper (rest\
    \ s) n lst)]))\n  (select-words-helper (string-split s) n '()))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else\n     (define (select_words-helper s n)\n   \
    \    (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s)))\n          (cons (first s) (select_words-helper (rest s) n))]\n       \
    \  [else (select_words-helper (rest s) n)]))\n     (select_words-helper (string-split\
    \ s) n)]))\n", "  (filter (lambda (word) (= n (count-consonants word)))\n    \
    \      (string-split s #\\space)))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= n (count-consonants (first s)))\n                     (cons (first\
    \ s) (select_words (rest s) n))]\n                    [else (select_words (rest\
    \ s) n)])]))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (cond [(empty? s) empty]\n        [else (cond [(zero? n) empty]\n\
    \                    [else (cond [(empty? (regexp-match #rx\"^[^aeiouAEIOU]+\"\
    \ s)) empty]\n                                [else (cons (regexp-match #rx\"\
    ^[^aeiouAEIOU]+\" s)\n                                            (select_words\
    \ (regexp-replace #rx\"^[^aeiouAEIOU]+\" s \"\") n))])])]))\n</code>\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (consonants? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants word)\n   \
    \    (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (consonants?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(count-consonants (first s))\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (let ([word (first (regexp-match #rx\"^[a-zA-Z]+\" s))]\n           [rest\
    \ (regexp-match #rx\"\\s*[a-zA-Z]+\" s)])\n       (if (and (not (empty? word))\n\
    \                (= n (count-consonants word)))\n           (cons word (select-words\
    \ (second rest) n))\n         (select-words (second rest) n)))]))\n", "  (define\
    \ (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"\
    k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n\
    \  (define (count-consonants w)\n    (cond ((empty? w) 0)\n          ((consonant?\
    \ (first w)) (+ 1 (count-consonants (rest w))))\n          (else (count-consonants\
    \ (rest w)))))\n  (define (select-words-helper s n)\n    (cond ((empty? s) empty)\n\
    \          ((= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n)))\n          (else (select-words-helper (rest s) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants w)\n    (cond ((null? w)\
    \ 0)\n          ((is-consonant? (car w)) (+ 1 (count-consonants (cdr w))))\n \
    \         (else (count-consonants (cdr w)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((= n (count-consonants (car\
    \ s))) (select-words-helper (cdr s) n (cons (car s) acc)))\n          (else (select-words-helper\
    \ (cdr s) n acc))))\n  (select-words-helper (string-split s) n '()))\n", "  (define\
    \ (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s)))\n       (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s #\\space) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants w)\n       (cond\n         [(empty? w) 0]\n\
    \         [else\n          (+ (if (is-consonant? (first w)) 1 0)\n           \
    \  (count-consonants (rest w)))]))\n     (define (select-words s n)\n       (cond\n\
    \         [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n \
    \         (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (for/list\
    \ ([word (in-string s)])\n    (if (= n (count-consonants word))\n        word)))\n",
  "  (cond [(empty? s) empty]\n        [else (define (consonants? c)\n           \
    \     (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p\
    \ #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n               (define (count-consonants\
    \ s)\n                 (cond [(empty? s) 0]\n                       [else (+ (if\
    \ (consonants? (first s)) 1 0) (count-consonants (rest s)))]))\n             \
    \  (define (select-words s n)\n                 (cond [(empty? s) empty]\n   \
    \                    [else (if (= n (count-consonants (first s)))\n          \
    \                      (cons (first s) (select-words (rest s) n))\n          \
    \                      (select-words (rest s) n))]))\n               (select-words\
    \ (string-split s #\\space) n)]))\n", "  (filter (lambda (word)\n            (=\
    \ n (count-consonants word)))\n          (string-split s #\\space)))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word n)\n      (if\
    \ (empty? word)\n          n\n          (if (is-consonant? (first word))\n   \
    \           (count-consonants-iter (rest word) (+ n 1))\n              (count-consonants-iter\
    \ (rest word) n))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ((word (first\
    \ (string-split s #\\space))))\n          (if (= n (count-consonants word))\n\
    \              (select-words-iter (string-trim-both s (string-length word) #\\\
    space) n (append result (list word)))\n              (select-words-iter (string-trim-both\
    \ s (string-length word) #\\space) n result)))))\n  (select-words-iter s n '()))\n",
  "  (filter (lambda (word)\n            (= n (length (filter (lambda (c)\n      \
    \                             (not (char-vowel? c)))\n                       \
    \          word))))\n          (string-split s #\\space)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"^[^ ]+\" s))])\n\
    \       (if (= n (count-consonants w))\n           (cons w (select-words (substring\
    \ s (string-length w)) n))\n           (select-words (substring s (string-length\
    \ w)) n)))]))\n", "  (if (string=? s \"\")\n      '()\n      (let ([words (string-split\
    \ s)])\n        (filter (lambda (word)\n                  (= n (count-consonants\
    \ word)))\n                words))))\n", "  (cond\n    [(empty? s) empty]\n  \
    \  [else (cons (car s) (select_words (cdr s) n))]))\n", "  (for/list ([word (in-string\
    \ s)])\n    (if (= n (count-consonants word))\n        word)))\n", "  (define\
    \ (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant (first\
    \ word)) 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(empty? (regexp-match #rx\"\
    ^[a-zA-Z]+\" s)) acc]\n      [else (define word (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s))\n            (define rest (regexp-replace #rx\"^[a-zA-Z]+\" s \"\"))\n \
    \           (if (= n (count_consonants word))\n                (select_words_iter\
    \ rest n (append acc (list word)))\n                (select_words_iter rest n\
    \ acc))]))\n  (select_words_iter s n '()))\n", "  (cond [(empty? s) empty]\n \
    \       [else (cond [(= n (count-consonants (first (string-split s #\\space))))\n\
    \                     (cons (first (string-split s #\\space))\n              \
    \             (select_words (string-join (rest (string-split s #\\space)) #\\\
    space) n))]\n                    [else (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n)])]))\n", "  (cond [(empty? s) empty]\n        [else\
    \ (cond [(= n (count-consonants (first (string-split s))))\n                 \
    \    (cons (first (string-split s)) (select-words (rest (string-split s)) n))]\n\
    \                    [else (select-words (rest (string-split s)) n)])]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (let* ([word (first (regexp-match\
    \ #rx\"^[^ ]+\" s))]\n            [rest (substring s (string-length word))])\n\
    \       (if (= n (count-consonants word))\n           (cons word (select-words\
    \ rest n))\n           (select-words rest n)))]))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (consonants? c)\n       (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n     (define (count-consonants word)\n       (cond\n    \
    \     [(empty? word) 0]\n         [else\n          (+ (if (consonants? (first\
    \ word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s))\n          (cons (first s) (select-words (rest s) n))]\n        \
    \ [else (select-words (rest s) n)]))\n     (select-words (string-split s #\\space)\
    \ n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (helper s n)\n       (cond\n         [(empty? s) empty]\n         [(consonant?\
    \ (first s))\n          (define (helper2 s n)\n            (cond\n           \
    \   [(empty? s) empty]\n              [(consonant? (first s))\n              \
    \ (cons (first s) (helper2 (rest s) (- n 1)))]\n              [else\n        \
    \       (cons (first s) (helper2 (rest s) n))]))\n          (cons (helper2 (rest\
    \ s) (- n 1)) (helper (rest s) n))]\n         [else\n          (helper (rest s)\
    \ n)]))\n     (helper s n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (count-consonants word)\n       (cond\n         [(empty? word) 0]\n\
    \         [else\n          (+ (if (consonants? (first word)) 1 0)\n          \
    \   (count-consonants (rest word)))]))\n     (define (select-words-helper s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(count-consonants (first\
    \ s))\n          (cons (first s) (select-words-helper (rest s) n))]\n        \
    \ [else (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s) n)]))\n", "  (filter (lambda (word)\n            (= n (count-consonants word)))\n\
    \          (string-split s #\\space)))\n", "  (cond [(empty? s) empty]\n     \
    \   [else (cond [(= n (count-consonants (first (string-split s))))\n         \
    \            (cons (first (string-split s)) (select-words (rest (string-split\
    \ s)) n))]\n                    [else (select-words (rest (string-split s)) n)])]))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is-consonant? (first\
    \ word))\n              (count-consonants-iter (rest word) (+ count 1))\n    \
    \          (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (regexp-match #rx\"^[a-zA-Z]+\" s)))\n     \
    \     (if (= n (count-consonants word))\n              (select-words-iter (regexp-replace\
    \ #rx\"^[a-zA-Z]+\" s \"\") n (append result (list word)))\n              (select-words-iter\
    \ (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n result)))))\n  (select-words-iter\
    \ s n '()))\n", "  (define (is_consonant c)\n    (or (char=? c #\\b) (char=? c\
    \ #\\c) (char=? c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\h) (char=?\
    \ c #\\j) (char=? c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=?\
    \ c #\\p) (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t) (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\z)))\n\
    \  (define (count_consonants word)\n    (cond ((string=? word \"\") 0)\n     \
    \     ((is_consonant (string-ref word 0)) (+ 1 (count_consonants (substring word\
    \ 1))))\n          (else (count_consonants (substring word 1)))))\n  (define (select_words_iter\
    \ s n result)\n    (cond ((string=? s \"\") result)\n          ((= n (count_consonants\
    \ (car (string-split s #\\space)))) (select_words_iter (cdr (string-split s #\\\
    space)) n (append result (list (car (string-split s #\\space))))))\n         \
    \ (else (select_words_iter (cdr (string-split s #\\space)) n result))))\n  (select_words_iter\
    \ s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (length (filter is-consonant? (string->list w))))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (consonants? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n  \
    \       [(consonants? (first s)) (+ 1 (count-consonants (rest s)))]\n        \
    \ [else (count-consonants (rest s))]))\n     (define (select-words s n)\n    \
    \   (cond\n         [(empty? s) empty]\n         [(count-consonants (first s))\
    \ (cons (first s) (select-words (rest s) n))]\n         [else (select-words (rest\
    \ s) n)]))\n     (select-words (string-split s #\\space) n)]))\n", "  (cond [(empty?\
    \ s) empty]\n        [else (define (helper s n)\n                (cond [(empty?\
    \ s) empty]\n                      [(empty? (regexp-match #rx\"[aeiou]\" (car\
    \ s)))\n                       (cons (car s) (helper (cdr s) (- n 1)))]\n    \
    \                  [else (helper (cdr s) n)]))\n               (define (helper2\
    \ s n)\n                 (cond [(empty? s) empty]\n                       [(empty?\
    \ (regexp-match #rx\"[aeiou]\" (car s)))\n                        (helper2 (cdr\
    \ s) (- n 1))]\n                       [else (helper2 (cdr s) n)]))\n        \
    \       (define (helper3 s n)\n                 (cond [(empty? s) empty]\n   \
    \                    [(empty? (regexp-match #rx\"[aeiou]\" (car s)))\n       \
    \                 (helper3 (cdr s) (- n 1))]\n                       [else (cons\
    \ (car s) (helper3 (cdr s) n))]))\n               (define (helper4 s n)\n    \
    \             (cond [(empty? s) empty]\n                       [(empty? (regexp-match\
    \ #rx\"[aeiou]\" (car s)))\n                        (cons (car s) (helper4 (cdr\
    \ s) (- n 1)))]\n                       [else (helper4 (cdr s) n)]))\n       \
    \        (define (helper5 s n)\n                 (cond [(empty? s) empty]\n  \
    \                     [(empty? (regexp-match #rx\"[aeiou]\" (car s)))\n      \
    \                  (cons (car s) (helper5 (cdr s) (- n 1)))]\n               \
    \        [else (helper5 (cdr s) n)]))\n               (define (helper6 s n)\n\
    \                 (cond [(empty? s) empty]\n                       [(empty? (regexp-match\
    \ #rx\"[aeiou]\" (car s)))\n                        (cons (car s) (helper6 (cdr\
    \ s) (- n 1)))]\n                       [else (helper6 (cdr s) n)]))\n       \
    \        (define (helper7 s n)\n                 (cond", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (define (count-consonants s)\n       (cond\n\
    \         [(empty? s) 0]\n         [(consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n         [else (count-consonants (rest s))]))\n     (define (consonant?\
    \ c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n\
    </code>\n", "  (filter (lambda (word)\n            (= n (count-consonants word)))\n\
    \          (string-split s)))\n", "  (for/list ([word (in-string s)])\n    (if\
    \ (= n (count-consonants word))\n        word)))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (let ([word (string-&gt;list (car (string-split s #\\\
    space)))])\n       (if (= n (count-consonants word))\n           (cons (list-&gt;string\
    \ word) (select_words (cdr (string-split s #\\space)) n))\n           (select_words\
    \ (cdr (string-split s #\\space)) n)))]))\n", "  (for/list ([word (in-string s)])\n\
    \    (if (= n (count-consonants word))\n        word)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else\n     (define (consonants? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n      \
    \ (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (consonants?\
    \ (first w)) 1 0) (count-consonants (rest w)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n (cons (first s) (select-words-helper (rest s) n))]\n        \
    \ [else (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s #\\space) n)]))\n", "  (define (is-consonant c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (if (null? word)\n\
    \        0\n        (+ (if (is-consonant (car word)) 1 0)\n           (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper s n)\n    (if (null? s)\n   \
    \     '()\n        (let ((word (car s)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (cdr s) n))\n        \
    \      (select-words-helper (cdr s) n)))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (for/list ([w (in-list (string-split s))]\n             #:when\
    \ (= n (count-consonants w)))\n    w))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n     (define (count-consonants w)\n       (cond\n\
    \         [(empty? w) 0]\n         [else\n          (if (is-consonant? (first\
    \ w))\n              (+ 1 (count-consonants (rest w)))\n              (count-consonants\
    \ (rest w)))]))\n     (define (select-words-helper s n)\n       (cond\n      \
    \   [(empty? s) empty]\n         [else\n          (define (take-word s)\n    \
    \        (cond\n              [(empty? s) empty]\n              [else\n      \
    \         (if (char-whitespace? (first s))\n                   empty\n       \
    \            (cons (first s) (take-word (rest s))))]))\n          (define (drop-word\
    \ s)\n            (cond\n              [(empty? s) empty]\n              [else\n\
    \               (if (char-whitespace? (first s))\n                   (rest s)\n\
    \                   (drop-word (rest s)))]))\n          (define (take-words s)\n\
    \            (cond\n              [(empty? s) empty]\n              [else\n  \
    \             (cons (take-word s) (take-words (drop-word s)))]))\n          (define\
    \ (drop-words s)\n            (cond\n              [(empty? s) empty]\n      \
    \        [else\n               (drop-word (drop-words (drop-word s)))]))\n   \
    \       (define (select-words-helper s n)\n            (cond\n              [(empty?\
    \ s) empty]\n              [else\n               (if (= n (count-consonants (first\
    \ s)))\n                   (cons (first s) (select-words-helper (rest s) n))\n\
    \                   (select-words-helper (rest s) n))]))\n          (select-words-helper\
    \ (take-words s) n)]))\n     (select-words-helper (string-split s) n)]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (let ([word (regexp-match #rx\"\
    ^[^ ]+\" s)])\n       (if (and (not (empty? word)) (= n (count-consonants word)))\n\
    \           (cons word (select-words (regexp-replace #rx\"^[^ ]+\" s \"\")))\n\
    \           (select-words (regexp-replace #rx\"^[^ ]+\" s \"\"))))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants w)\n\
    \       (count (lambda (c) (is-consonant? c)) w))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= n (count-consonants (first (string-split s #\\space))))\n\
    \        (cons (first (string-split s #\\space))\n              (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n       [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (for/list ([w (in-list (string-split s))]\n             #:when (= n (count-consonants\
    \ w)))\n    w))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_iter s n acc)\n \
    \   (cond\n      [(empty? s) acc]\n      [(string=? (first s) \" \") (select_words_iter\
    \ (rest s) n acc)]\n      [(= n (count_consonants (first s))) (select_words_iter\
    \ (rest s) n (append acc (list (first s))))]\n      [else (select_words_iter (rest\
    \ s) n acc)]))\n  (select_words_iter s n '()))\n", "  (if (empty? s)\n      '()\n\
    \      (let ([word (regexp-match #rx\"^[^ ]+\" s)])\n        (if (and word (=\
    \ n (count-consonants (car word))))\n            (cons (car word) (select-words\
    \ (regexp-replace #rx\"^[^ ]+\" s \"\") n))\n            (select-words (regexp-replace\
    \ #rx\"^[^ ]+\" s \"\") n)))))\n", "  (filter (lambda (word) (= n (count-consonants\
    \ word))) (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cond\n       [(= (count-consonants (first (string-split s))) n)\n     \
    \   (cons (first (string-split s)) (select_words (string-join (rest (string-split\
    \ s))) n))]\n       [else (select_words (string-join (rest (string-split s)))\
    \ n)])]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(and (char-consonant?\
    \ (first s)) (= n 1)) (cons (first s) (helper (rest s) 0))]\n         [(char-consonant?\
    \ (first s)) (helper (rest s) (+ n 1))]\n         [else (helper (rest s) 0)]))\n\
    \     (define (helper2 s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(and (char-consonant? (first s)) (= n 1)) (cons (first s) (helper2 (rest\
    \ s) 0))]\n         [(char-consonant? (first s)) (helper2 (rest s) (+ n 1))]\n\
    \         [else (helper2 (rest s) 0)]))\n     (define (helper3 s n)\n       (cond\n\
    \         [(empty? s) empty]\n         [(and (char-consonant? (first s)) (= n\
    \ 1)) (cons (first s) (helper3 (rest s) 0))]\n         [(char-consonant? (first\
    \ s)) (helper3 (rest s) (+ n 1))]\n         [else (helper3 (rest s) 0)]))\n  \
    \   (define (helper4 s n)\n       (cond\n         [(empty? s) empty]\n       \
    \  [(and (char-consonant? (first s)) (= n 1)) (cons (first s) (helper4 (rest s)\
    \ 0))]\n         [(char-consonant? (first s)) (helper4 (rest s) (+ n 1))]\n  \
    \       [else (helper4 (rest s) 0)]))\n     (define (helper5 s n)\n       (cond\n\
    \         [(empty? s) empty]\n         [(and (char-consonant? (first s)) (= n\
    \ 1)) (cons (first s) (helper5 (rest s) 0))]\n         [(char-consonant? (first\
    \ s)) (helper5 (rest s) (+ n 1))]\n         [else (helper5 (", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants word)\n     \
    \  (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n result)\n       (cond\n         [(empty? s) result]\n\
    \         [else\n          (define (skip-spaces s)\n            (cond\n      \
    \        [(empty? s) empty]\n              [(char=? (first s) #\\space) (skip-spaces\
    \ (rest s))]\n              [else s]))\n          (define (take-word s)\n    \
    \        (cond\n              [(empty? s) empty]\n              [(char=? (first\
    \ s) #\\space) empty]\n              [else (cons (first s) (take-word (rest s)))]))\n\
    \          (define (skip-word s)\n            (cond\n              [(empty? s)\
    \ empty]\n              [(char=? (first s) #\\space) s]\n              [else (skip-word\
    \ (rest s))]))\n          (define (take-spaces s)\n            (cond\n       \
    \       [(empty? s) empty]\n              [(char=? (first s) #\\space) (cons (first\
    \ s) (take-spaces (rest s)))]\n              [else empty]))\n          (define\
    \ (skip-spaces s)\n            (cond\n              [(empty? s) empty]\n     \
    \         [(char=? (first s) #\\space) (skip-spaces (rest s))]\n             \
    \ [else s]))\n          (define (take-word s)\n            (cond\n           \
    \   [(empty? s) empty]\n              [(char=? (first s) #\\space) empty]\n  \
    \            [else (cons (first s) (take-word (rest s)))]))\n          (define\
    \ (skip-word s)\n            (cond\n              [(empty? s) empty", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (helper s n)\n       (cond\n\
    \         [(empty? s) empty]\n         [(= n 0) (list (first s))]\n         [else\n\
    \          (append (helper (rest s) n)\n                  (helper (rest s) (-\
    \ n 1)))]))\n     (helper s n)]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond\
    \ ((null? word) 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((= n (count-consonants (car\
    \ s))) (select-words-helper (cdr s) n (cons (car s) acc)))\n          (else (select-words-helper\
    \ (cdr s) n acc))))\n  (select-words-helper (string-split s) n '()))\n", "  (define\
    \ (is-consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is-consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ((word (first\
    \ s)))\n          (if (= n (count-consonants word))\n              (select-words-helper\
    \ (rest s) n (append result (list word)))\n              (select-words-helper\
    \ (rest s) n result)))))\n  (select-words-helper (string-split s) n '()))\n",
  "  (if (empty? s)\n      '()\n      (let ([w (string-tokenize s)])\n        (cond\n\
    \         [(empty? w) '()]\n         [(= n (count-consonants (first w)))\n   \
    \       (cons (first w) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))))\n", "  (if (string=? s \"\")\n      '()\n      (let ([word\
    \ (string-tokenize s)])\n        (if (and (not (string=? (car word) \"\"))\n \
    \                (= n (count-consonants (car word))))\n            (cons (car\
    \ word) (select-words (string-join (cdr word) \" \") n))\n            (select-words\
    \ (string-join (cdr word) \" \") n)))))\n", "  (filter (lambda (word)\n      \
    \      (= n (length (filter (lambda (c)\n                                   (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n                                 word))))\n\
    \          (string-split s #\\space)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (if (= n (count-consonants (car (string-split s #\\space))))\n\
    \         (cons (car (string-split s #\\space)) (select-words (cdr (string-split\
    \ s #\\space)) n))\n         (select-words (cdr (string-split s #\\space)) n))]))\n",
  "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n   \
    \          [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\\
    m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word word]\n   \
    \                                        [count 0])\n                        \
    \          (if (string-null? word)\n                                      count\n\
    \                                      (if (member (string-ref word 0) consonants)\n\
    \                                          (loop (substring word 1) (+ count 1))\n\
    \                                          (loop (substring word 1) count)))))]\n\
    \             [words-with-n-consonants (filter (lambda (word)\n              \
    \                                  (= (consonant-count word) n))\n           \
    \                                   words)])\n        words-with-n-consonants)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first s)) 1 0)\n             (count-consonants (rest s)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s)))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s #\\space) n)]))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(is-vowel? (first s)) (count-consonants (rest s))]\n\
    \      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(count-consonants (first\
    \ s)) = n (select-words-helper (rest s) n (append acc (list (first s))))]\n  \
    \    [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (for/list ([word (in-string s)])\n    (when (= n (count-consonants\
    \ word))\n      word)))\n", "  (define (is-consonant? c)\n    (member c '(\"b\"\
    \ \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\"\
    \ \"s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n  (define (count-consonants s)\n   \
    \ (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (cond ((null? word) 0)\n          ((is-consonant?\
    \ (car word)) (+ 1 (count-consonants (cdr word))))\n          (else (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper s n acc)\n    (cond ((null? s)\
    \ acc)\n          ((equal? n (count-consonants (car s))) (select-words-helper\
    \ (cdr s) n (cons (car s) acc)))\n          (else (select-words-helper (cdr s)\
    \ n acc))))\n  (select-words-helper (string-split s) n '()))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (and\
    \ (char-alphabetic? c)\n            (not (char-vowel? c))))\n     (define (count-consonants\
    \ w)\n       (define (count-consonants-iter w i)\n         (cond\n           [(empty?\
    \ w) i]\n           [(is-consonant? (first w)) (count-consonants-iter (rest w)\
    \ (+ i 1))]\n           [else (count-consonants-iter (rest w) i)]))\n       (count-consonants-iter\
    \ w 0))\n     (define (select-words-iter s n acc)\n       (cond\n         [(empty?\
    \ s) acc]\n         [(is-consonant? (first s)) (select-words-iter (rest s) (+\
    \ n 1) acc)]\n         [(char-whitespace? (first s))\n          (if (= n 0)\n\
    \              (select-words-iter (rest s) 0 acc)\n              (select-words-iter\
    \ (rest s) 0 (cons (substring s 0 (+ n 1)) acc)))]\n         [else (select-words-iter\
    \ (rest s) n acc)]))\n     (select-words-iter s 0 empty)]))\n", "  (cond\n   \
    \ [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s)) n]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (define\
    \ (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_vowel (first word)) (count_consonants\
    \ (rest word))]\n      [else (+ 1 (count_consonants (rest word)))]))\n  (define\
    \ (select_words_iter s n result)\n    (cond\n      [(empty? s) result]\n     \
    \ [(empty? (rest s)) result]\n      [(equal? n (count_consonants (first s)))\n\
    \       (select_words_iter (rest s) n (append result (list (first s))))]\n   \
    \   [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split s\
    \ #\\space)))\n", "  (cond [(empty? s) empty]\n        [else (cond [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n                     (cons (first (string-split\
    \ s #\\space))\n                           (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n))]\n                    [else (select_words (string-join\
    \ (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (consonants? c)\n       (member c '(#\\b\
    \ #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants s)\n       (cond\n  \
    \       [(empty? s) 0]\n         [(consonants? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n         [else (count-consonants (rest s))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(and (consonants?\
    \ (first s)) (= n (count-consonants (first s))))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s #\\space) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]))\n", "  (filter (lambda (word)\n\
    \            (= n (count-consonants word)))\n          (string-split s #\\space)))\n",
  "  (cond [(empty? s) empty]\n        [else (cond [(= n (count-consonants (first\
    \ (string-split s #\\space))))\n                     (cons (first (string-split\
    \ s #\\space))\n                           (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n))]\n                    [else (select_words (string-join\
    \ (rest (string-split s #\\space)) #\\space) n)])]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants w)\n       (cond\n\
    \         [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n  (define (count-consonants word)\n\
    \    (cond ((null? word) 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words)))\n           (cons (car words) (select-words-helper (cdr words) n)))\n\
    \          (else (select-words-helper (cdr words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(string=?\
    \ c \"a\") #f]\n      [(string=? c \"e\") #f]\n      [(string=? c \"i\") #f]\n\
    \      [(string=? c \"o\") #f]\n      [(string=? c \"u\") #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first s))) (cons\
    \ (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")])\n        (filter (lambda (word)\n\
    \                  (= n (length (filter (lambda (char)\n                     \
    \                    (member char consonants))\n                             \
    \          (string-&gt;list word)))))\n                words))))\n", "  (filter\
    \ (lambda (word) (= n (count-consonants word)))\n          (string-split s #\\\
    space)))\n", "  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize\
    \ s)])\n        (filter (lambda (x) (= n (count-consonants x))) w))))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(count-consonants (first s))\n          (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (cond\
    \ [(char-ci=? c #\\a) #f]\n          [(char-ci=? c #\\e) #f]\n          [(char-ci=?\
    \ c #\\i) #f]\n          [(char-ci=? c #\\o) #f]\n          [(char-ci=? c #\\\
    u) #f]\n          [else #t]))\n  (define (count-consonants word)\n    (cond [(empty?\
    \ word) 0]\n          [(is-consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word)))]\n          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(string=? (first s) \" \")\
    \ (select-words-helper (rest s) n acc)]\n          [(= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (cons (first s) acc))]\n          [else\
    \ (select-words-helper (rest s) n acc)]))\n  (reverse (select-words-helper (string-split\
    \ s) n '())))\n", "  (filter (lambda (x) (= n (count-consonants x))) (string-split\
    \ s #\\space)))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (cond ((null? word) count)\n            ((is_consonant? (car\
    \ word))\n             (count-consonants-iter (cdr word) (+ count 1)))\n     \
    \       (else (count-consonants-iter (cdr word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (cond ((null? s) result)\n\
    \          ((equal? n (count-consonants (car s)))\n           (select-words-iter\
    \ (cdr s) n (cons (car s) result)))\n          (else (select-words-iter (cdr s)\
    \ n result))))\n  (select-words-iter (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n  (define\
    \ (count-consonants word)\n    (cond [(empty? word) 0]\n          [(is-consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s)\
    \ empty]\n          [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (if\
    \ (= n (count-consonants (first (string-split s))))\n         (cons (first (string-split\
    \ s)) (select-words (rest (string-split s)) n))\n         (select-words (rest\
    \ (string-split s)) n))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
