name: HumanEval_51_remove_vowels
language: rkt
prompt: "#lang racket\n\n;; remove_vowels is a function that takes string and returns\
  \ string without vowels.\n(define (remove_vowels text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"abcdef\n\
  ghijklm\") \"bcdf\nghjklm\")\n    (check-equal? (candidate \"fedcba\") \"fdcb\"\
  )\n    (check-equal? (candidate \"eeeee\") \"\")\n    (check-equal? (candidate \"\
  acBAA\") \"cB\")\n    (check-equal? (candidate \"EcBOO\") \"cB\")\n    (check-equal?\
  \ (candidate \"ybcd\") \"ybcd\")\n))\n\n(test-humaneval)"
completions: ["  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel? char)\n    (or (char=?\
    \ char #\\a)\n        (char=? char #\\e)\n        (char=? char #\\i)\n       \
    \ (char=? char #\\o)\n        (char=? char #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (if (string-empty? text)\n        result\n        (if (is_vowel?\
    \ (string-ref text 0))\n            (remove_vowels_iter (substring text 1) result)\n\
    \            (remove_vowels_iter (substring text 1) (string-append result (string\
    \ (string-ref text 0)))))))\n  (remove_vowels_iter text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\\
    o #\\u))) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (string-join (remove (lambda (x) (member x\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\"))) (string-split text)) \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\\
    u))) (string->list text))))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\\
    i #\\o #\\u))) (string->list text)) \"\"))\n", "  (string-join (filter (lambda\
    \ (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string-split text \"\
    \")) \"\"))\n", "  (string-join (remove (lambda (x) (member x '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))) (string-split text \"\")) \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (string-join\
    \ (filter (lambda (c) (not (is_vowel? c))) (string->list text))))\n", "  (string-join\
    \ (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string-split\
    \ text #\\space)) \" \"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (string-join\n   (filter (lambda\
    \ (char)\n             (not (member char '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E\
    \ #\\I #\\O #\\U))))\n           (string->list text))\n   \"\"))\n", "  (string-join\
    \ (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string-split\
    \ text \"\"))))\n", "  (string-join (filter (lambda (x) (not (member x '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\")))) (string-split text \"\")) \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (string-join (filter (lambda (x) (not (member x '(#\\a #\\e #\\i #\\\
    o #\\u)))) (string->list text))))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\\
    o #\\u))) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (string-join (filter (lambda (x) (not (member\
    \ x '(#\\a #\\e #\\i #\\o #\\u)))) (string->list text)) \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (remove_vowels-iter text result)\n    (cond ((null? text) result)\n\
    \          ((is_vowel? (car text)) (remove_vowels-iter (cdr text) result))\n \
    \         (else (remove_vowels-iter (cdr text) (string-append result (list (car\
    \ text)))))))\n  (remove_vowels-iter text \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", " \
    \ (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u))) (string->list\
    \ text)) \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define\
    \ (is_vowel? char)\n    (member char '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (remove_vowels_iter text result)\n    (if\
    \ (empty? text)\n        result\n        (if (is_vowel? (first text))\n      \
    \      (remove_vowels_iter (rest text) result)\n            (remove_vowels_iter\
    \ (rest text) (append result (list (first text)))))))\n  (remove_vowels_iter text\
    \ '()))\n", "  (for/list ([c (in-string text)])\n    (cond\n      [(member c '(#\\\
    a #\\e #\\i #\\o #\\u))]\n      [else c])))\n", "  (string-join (remove (lambda\
    \ (x) (member x '(\"a\" \"e\" \"i\" \"o\" \"u\"))) (string-split text)) \"\"))\n",
  "  (string-join\n   (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n           (string-split text #\\space))\n   #\\space))\n", "  (string-join\
    \ (remove (lambda (x) (or (char=? x #\\a) (char=? x #\\e) (char=? x #\\i) (char=?\
    \ x #\\o) (char=? x #\\u))) (string->list text)) \"\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (string-join (remove-vowels-helper (string-split text #\\space)) #\\\
    space))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (string-join\
    \ (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string-split\
    \ text \"\")) \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", " \
    \ (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u))) (string->list\
    \ text)) \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e\
    \ #\\i #\\o #\\u))) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", " \
    \ (string-join (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")))) (string-split text \"\")) \"\"))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (define (is_vowel? char)\n    (or (char=? char #\\a)\n  \
    \      (char=? char #\\e)\n        (char=? char #\\i)\n        (char=? char #\\\
    o)\n        (char=? char #\\u)))\n  (define (remove_vowels_iter text result)\n\
    \    (if (string-empty? text)\n        result\n        (if (is_vowel? (string-ref\
    \ text 0))\n            (remove_vowels_iter (substring text 1) result)\n     \
    \       (remove_vowels_iter (substring text 1) (string-append result (string (string-ref\
    \ text 0)))))))\n  (remove_vowels_iter text \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (string-join (filter (lambda (x) (not (member x '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")))) (string-split text #\\space)) \" \"))\n", "  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (if (empty? text)\n        result\n        (if (is_vowel?\
    \ (first text))\n            (remove_vowels_iter (rest text) result)\n       \
    \     (remove_vowels_iter (rest text) (string-append result (string (first text)))))))\n\
    \  (remove_vowels_iter text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (for/list ([char (in-string text)])\n    (cond\n      [(member char\
    \ '(#\\a #\\e #\\i #\\o #\\u)) #\\_]\n      [else char])))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel?\
    \ char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n        (char=?\
    \ char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\u)))\n  (define\
    \ (remove_vowels_iter text result)\n    (if (string-empty? text)\n        result\n\
    \        (if (is_vowel? (string-ref text 0))\n            (remove_vowels_iter\
    \ (substring text 1) result)\n            (remove_vowels_iter (substring text\
    \ 1) (string-append result (string (string-ref text 0)))))))\n  (remove_vowels_iter\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(char-vowel? (first text)) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (string-join\n   (filter (lambda (x) (not (member x '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))))\n           (string-split text \"\"))\n   \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member\
    \ (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n   \
    \ [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (define (is_vowel?\
    \ char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n        (char=?\
    \ char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\u)))\n  (string-filter\
    \ (lambda (char) (not (is_vowel? char))) text))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (string-join (filter (lambda (x) (not (member x '(#\\\
    a #\\e #\\i #\\o #\\u)))) (string->list text)) \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel?\
    \ char)\n    (member char '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first\
    \ text)) (remove_vowels_iter (rest text) result)]\n      [else (remove_vowels_iter\
    \ (rest text) (append result (list (first text))))]))\n  (remove_vowels_iter text\
    \ '()))\n", "  (string-join (filter (lambda (c) (not (member c \"aeiou\"))) (string-&gt;list\
    \ text)) \"\"))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n      \
    \  (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n       \
    \ (char=? c #\\u)))\n  (define (remove_vowels_iter text result)\n    (if (empty?\
    \ text)\n        result\n        (if (is_vowel? (first text))\n            (remove_vowels_iter\
    \ (rest text) result)\n            (remove_vowels_iter (rest text) (string-append\
    \ result (string (first text)))))))\n  (remove_vowels_iter text \"\"))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (string-join (filter (lambda (x) (not (member x '(#\\a #\\\
    e #\\i #\\o #\\u)))) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (remove_vowels_iter text acc)\n    (cond\n\
    \      [(empty? text) (reverse acc)]\n      [(is_vowel? (first text)) (remove_vowels_iter\
    \ (rest text) acc)]\n      [else (remove_vowels_iter (rest text) (cons (first\
    \ text) acc))]))\n  (remove_vowels_iter text '()))\n", "  (string-join (remove-vowels-helper\
    \ (string-split text #\\space)) \" \"))\n", "  (string-join\n   (filter (lambda\
    \ (x) (not (member x '(#\\a #\\e #\\i #\\o #\\u))))\n           (string->list\
    \ text))\n   \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel? char)\n\
    \    (member char '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"\
    )))\n  (define (remove_vowels_iter text)\n    (if (is_vowel? (string-ref text\
    \ 0))\n        (remove_vowels_iter (substring text 1))\n        (string-append\
    \ (string-ref text 0) (remove_vowels_iter (substring text 1)))))\n  (remove_vowels_iter\
    \ text))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (string-join (filter\
    \ (lambda (x) (not (member x '(#\\a #\\e #\\i #\\o #\\u)))) (string->list text))\
    \ \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\a #\\e #\\i #\\\
    o #\\u))) (string->list text))))\n", "  (string-join (filter (lambda (x) (not\
    \ (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string-split text \"\")) \"\"\
    ))\n", "  (string-join\n   (for/list ([c (in-string text)])\n     (if (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n         \"\"\n         c))))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (string-append\n   (filter (lambda (x) (not\
    \ (member x '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n           (string->list text))))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel?\
    \ char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n        (char=?\
    \ char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\u)))\n  (define\
    \ (remove_vowels_iter text result)\n    (if (string-empty? text)\n        result\n\
    \        (if (is_vowel? (string-ref text 0))\n            (remove_vowels_iter\
    \ (substring text 1) result)\n            (remove_vowels_iter (substring text\
    \ 1) (string-append result (string (string-ref text 0)))))))\n  (remove_vowels_iter\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
