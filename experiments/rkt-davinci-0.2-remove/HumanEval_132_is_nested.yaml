name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n(define (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper string count)\n    (cond [(empty? string) (zero?\
    \ count)]\n          [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n          [(char=? (first string) #\\]) (and (positive? count) (helper\
    \ (rest string) (- count 1)))]\n          [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (helper string counter)\n    (cond\n    \
    \  [(empty? string) (equal? counter 0)]\n      [(equal? (first string) #\\[) (helper\
    \ (rest string) (+ counter 1))]\n      [(equal? (first string) #\\]) (and (not\
    \ (equal? counter 0)) (helper (rest string) (- counter 1)))]\n      [else (helper\
    \ (rest string) counter)]))\n  (helper string 0))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) (and (zero? count) #t)]\n      [(char=?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first\
    \ string) #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n  \
    \    [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? count) (helper (rest string) (-\
    \ count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (helper string count)\n    (cond\n      [(empty? string) (= count 0)]\n\
    \      [(equal? (first string) \"[\") (helper (rest string) (+ count 1))]\n  \
    \    [(equal? (first string) \"]\") (helper (rest string) (- count 1))]))\n  (helper\
    \ string 0))\n", "  (cond\n    [(empty? string) #f]\n    [(and (equal? (first\
    \ string) \"[\") (equal? (last string) \"]\")) #t]\n    [else (is_nested (rest\
    \ (butlast string)))])\n  )\n", "  (define (helper string)\n    (cond [(empty?\
    \ string) #t]\n          [(equal? (first string) \"[\") (helper (rest string))]\n\
    \          [(equal? (first string) \"]\") (helper (rest string))]\n          [else\
    \ (and (helper (rest string)) (helper (rest (rest string))))]))\n  (helper string))\n",
  "  (define (is_nested-helper string count)\n    (if (empty? string)\n        (if\
    \ (= count 0)\n            #t\n            #f)\n        (if (or (equal? (first\
    \ string) \"[\") (= count 0))\n            (is_nested-helper (rest string) (+\
    \ count 1))\n            (is_nested-helper (rest string) (- count 1)))))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\])\n   \
    \    (if (empty? stack)\n           #f\n           (is_nested-helper (rest string)\
    \ (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n      [else (helper (rest string) stack)]))\n\
    \  (helper string '()))\n", "  (let loop ([string string] [count 0])\n    (cond\
    \ [(empty? string) (zero? count)]\n          [(equal? (first string) #\\[) (loop\
    \ (rest string) (+ count 1))]\n          [(equal? (first string) #\\]) (and (positive?\
    \ count) (loop (rest string) (- count 1)))]\n          [else (loop (rest string)\
    \ count)])))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (is_nested-helper\
    \ (rest string) (- count 1))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string)\n   \
    \ (cond\n      [(empty? string) #t]\n      [(and (equal? (first string) #\\[)\
    \ (equal? (last string) #\\]))\n       (is_nested-helper (substring string 1 (-\
    \ (string-length string) 1)))]\n      [else #f]))\n  (is_nested-helper string))\n",
  "  (define (helper string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (cons #\\[ stack))]\n\
    \      [(char=? (first string) #\\]) (and (not (empty? stack)) (helper (rest string)\
    \ (rest stack)))]\n      [else (helper (rest string) stack)]))\n  (helper string\
    \ '()))\n", "  (define (is_nested-helper string count)\n    (cond ((empty? string)\
    \ (zero? count))\n          ((char=? (first string) #\\[) (is_nested-helper (rest\
    \ string) (+ count 1)))\n          ((char=? (first string) #\\]) (is_nested-helper\
    \ (rest string) (- count 1)))\n          (else (is_nested-helper (rest string)\
    \ count))))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ open-brackets)\n    (cond\n      [(empty? string) (zero? open-brackets)]\n \
    \     [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ open-brackets\
    \ 1))]\n      [(char=? (first string) #\\]) (and (positive? open-brackets) (is_nested-helper\
    \ (rest string) (- open-brackets 1)))]\n      [else (is_nested-helper (rest string)\
    \ open-brackets)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string counter)\n    (cond\n      [(empty? string) (= counter 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ counter 1))]\n     \
    \ [(char=? (first string) #\\]) (is_nested-helper (rest string) (- counter 1))]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string)\n       (zero? count)]\n      [(char=? (first\
    \ string) #\\[)\n       (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\])\n       (and (positive? count)\n            (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else\n       (is_nested-helper (rest string)\
    \ count)]))\n  (is_nested-helper string 0))\n", "  (define (helper string count)\n\
    \    (cond\n      [(empty? string) (= count 0)]\n      [(char=? (first string)\
    \ #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\\
    ]) (and (not (zero? count)) (helper (rest string) (- count 1)))]\n      [else\
    \ (helper (rest string) count)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[)\n       (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=?\
    \ (first string) #\\])\n       (and (not (empty? stack))\n            (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (helper string count)\n    (cond\
    \ [(empty? string) (zero? count)]\n          [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n          [(char=? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]\n          [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (helper string acc)\n    (cond\
    \ [(empty? string) (empty? acc)]\n          [(char=? (first string) #\\[) (helper\
    \ (rest string) (cons #\\[ acc))]\n          [(char=? (first string) #\\]) (and\
    \ (not (empty? acc)) (helper (rest string) (rest acc)))]\n          [else (helper\
    \ (rest string) acc)]))\n  (helper string '()))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first\
    \ string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n      [else\
    \ (helper (rest string) count)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string acc)\n    (cond\n      [(empty? string) (zero? acc)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ acc 1))]\n      [(char=?\
    \ (first string) #\\]) (is_nested-helper (rest string) (- acc 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (let ([stack (make-stack)])\n    (for ([c (in-string string)])\n\
    \      (cond\n        [(char=? c #\\[) (stack-push stack c)]\n        [(char=?\
    \ c #\\]) (if (stack-empty? stack)\n                            #f\n         \
    \                   (stack-pop stack))]))\n    (stack-empty? stack)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond [(empty? string) (= count 0)]\n \
    \         [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n          [(char=? (first string) #\\]) (is_nested-helper (rest string)\
    \ (- count 1))]\n          [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (helper string)\n    (cond [(empty?\
    \ string) #t]\n          [(equal? (first string) \"[\") (helper (rest string))]\n\
    \          [(equal? (first string) \"]\") #f]\n          [else (and (helper (rest\
    \ string)) (helper (rest (rest string))))]))\n  (helper string))\n", "  (define\
    \ (is_nested-helper string stack)\n    (cond [(empty? string) (empty? stack)]\n\
    \          [(char=? (first string) #\\[) (is_nested-helper (rest string) (cons\
    \ #\\[ stack))]\n          [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (is_nested-helper (rest string) (rest stack)))]\n          [else (is_nested-helper\
    \ (rest string) stack)]))\n  (is_nested-helper string '()))\n", "  (define (is_nested-helper\
    \ string counter)\n    (cond\n      [(empty? string) (= counter 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ counter 1))]\n     \
    \ [(char=? (first string) #\\]) (and (is_nested-helper (rest string) (- counter\
    \ 1)) (> counter 0))]))\n  (is_nested-helper string 0))\n", "  (let loop ([string\
    \ string] [stack '()])\n    (cond [(empty? string) (empty? stack)]\n         \
    \ [(char=? (first string) #\\[) (loop (rest string) (cons #\\[ stack))]\n    \
    \      [(char=? (first string) #\\])\n           (and (not (empty? stack))\n \
    \               (loop (rest string) (rest stack)))]\n          [else (loop (rest\
    \ string) stack)])))\n", "  (define (is_nested-helper string stack)\n    (cond\n\
    \      [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(equal? (first string) \"]\") #f]\n      [(equal? (first string)\
    \ \"[\") (is_nested-helper (rest string))]\n      [else (is_nested-helper (rest\
    \ string))]))\n  (is_nested-helper string))\n", "  (define (is_nested-helper string\
    \ open-count)\n    (cond\n      [(empty? string) (zero? open-count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ open-count 1))]\n  \
    \    [(char=? (first string) #\\]) (is_nested-helper (rest string) (- open-count\
    \ 1))]\n      [else (is_nested-helper (rest string) open-count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond [(empty?\
    \ string) (zero? count)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n          [(char=? (first string) #\\]) (is_nested-helper\
    \ (rest string) (- count 1))]\n          [else (is_nested-helper (rest string)\
    \ count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=?\
    \ (first string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string)\
    \ (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string count)\n    (cond\n   \
    \   [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (let loop ([string\
    \ string] [count 0])\n    (cond [(empty? string)\n           (zero? count)]\n\
    \          [(char=? (first string) #\\[)\n           (loop (rest string) (+ count\
    \ 1))]\n          [(char=? (first string) #\\])\n           (and (positive? count)\n\
    \                (loop (rest string) (- count 1)))]\n          [else\n       \
    \    (loop (rest string) count)])))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string count)\n    (cond\n   \
    \   [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (let loop ([string\
    \ string] [count 0])\n    (cond [(empty? string) (zero? count)]\n          [(char=?\
    \ (first string) #\\[) (loop (rest string) (+ count 1))]\n          [(char=? (first\
    \ string) #\\]) (loop (rest string) (- count 1))]\n          [else (loop (rest\
    \ string) count)])))\n", "  (define (is_nested-helper string count)\n    (cond\
    \ ((empty? string) (equal? count 0))\n          ((equal? (first string) #\\[)\
    \ (is_nested-helper (rest string) (+ count 1)))\n          ((equal? (first string)\
    \ #\\]) (and (not (equal? count 0)) (is_nested-helper (rest string) (- count 1))))\n\
    \          (else (is_nested-helper (rest string) count))))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\])\n   \
    \    (and (not (empty? stack))\n            (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string stack)\n    (cond\n   \
    \   [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (zero? count)]\n      [(char=? (first string) #\\[) (helper (rest string) (+\
    \ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (let loop ([string\
    \ string] [open 0] [close 0])\n    (cond [(empty? string) (and (zero? open) (zero?\
    \ close))]\n          [(char=? (first string) #\\[) (loop (rest string) (+ open\
    \ 1) close)]\n          [(char=? (first string) #\\]) (and (not (zero? open))\
    \ (loop (rest string) (- open 1) (+ close 1)))]\n          [else (loop (rest string)\
    \ open close)])))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (helper (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string count)\n    (cond\
    \ ((string=? string \"\") (if (= count 0) #t #f))\n          ((string=? (substring\
    \ string 0 1) \"[\") (is_nested-helper (substring string 1) (+ count 1)))\n  \
    \        ((string=? (substring string 0 1) \"]\") (is_nested-helper (substring\
    \ string 1) (- count 1)))\n          (else (is_nested-helper (substring string\
    \ 1) count))))\n  (is_nested-helper string 0))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (first string) \"[\")\n     (cond\n       [(empty? (rest string))\
    \ #f]\n       [(equal? (first (rest string)) \"]\") #t]\n       [else (is_nested\
    \ (rest string))])]\n    [else (is_nested (rest string))]))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (is_nested-helper (rest string) (- count 1)) (> count\
    \ 0))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string open-count)\n    (cond [(empty?\
    \ string) (zero? open-count)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ open-count 1))]\n          [(char=? (first string) #\\]) (and\
    \ (positive? open-count) (is_nested-helper (rest string) (- open-count 1)))]\n\
    \          [else (is_nested-helper (rest string) open-count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(and (equal? (first string) #\\[) (equal? (last string) #\\])) (helper\
    \ (rest (butlast string)))]\n      [else #f]))\n  (helper string))\n", "  (define\
    \ (helper string stack)\n    (cond [(empty? string) (empty? stack)]\n        \
    \  [(eq? (first string) #\\[) (helper (rest string) (cons #\\[ stack))]\n    \
    \      [(eq? (first string) #\\]) (and (not (empty? stack)) (helper (rest string)\
    \ (rest stack)))]\n          [else (helper (rest string) stack)]))\n  (helper\
    \ string '()))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(= (first string) #\\[) (helper (rest string) (+\
    \ count 1))]\n      [(= (first string) #\\]) (and (not (zero? count)) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (let loop ([string string] [stack '()])\n    (cond\n\
    \      [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[)\n\
    \       (loop (rest string) (cons (first string) stack))]\n      [(char=? (first\
    \ string) #\\])\n       (and (not (empty? stack))\n            (loop (rest string)\
    \ (rest stack)))]\n      [else (loop (rest string) stack)])))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (is_nested-helper (rest string) (- count 1))]\n      [else\
    \ (is_nested-helper (rest string) count)]))\n  (is_nested-helper string 0))\n",
  "  (define (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\]) (and (positive? count) (helper (rest string)\
    \ (sub1 count)))]\n      [(char=? (first string) #\\[) (helper (rest string) (add1\
    \ count))]\n      [else (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (is_nested-helper (rest string)\
    \ (- count 1))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (helper string stack)\n    (cond\n      [(empty? string)\
    \ (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string) (cons\
    \ #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n      [else (helper (rest string) stack)]))\n\
    \  (helper string '()))\n", "  (define (helper string count)\n    (cond\n    \
    \  [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (is_nested-helper string counter)\n\
    \    (cond\n      [(empty? string) (= counter 0)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ counter 1))]\n      [(char=? (first\
    \ string) #\\]) (is_nested-helper (rest string) (- counter 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string stack)\n    (cond\n      [(empty? string)\n\
    \       (empty? stack)]\n      [(char=? (first string) #\\[)\n       (helper (rest\
    \ string) (cons (first string) stack))]\n      [(char=? (first string) #\\])\n\
    \       (and (not (empty? stack))\n            (char=? (first stack) #\\[)\n \
    \           (helper (rest string) (rest stack)))]\n      [else\n       (helper\
    \ (rest string) stack)]))\n  (helper string '()))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\])\n       (cond\n         [(empty? stack) #f]\n\
    \         [else (is_nested-helper (rest string) (rest stack))])]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string acc)\n    (cond\n      [(empty? string)\
    \ (empty? acc)]\n      [(char=? (first string) #\\[) (helper (rest string) (cons\
    \ (first string) acc))]\n      [(char=? (first string) #\\]) (and (not (empty?\
    \ acc)) (helper (rest string) (rest acc)))]\n      [else (helper (rest string)\
    \ acc)]))\n  (helper string '()))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string)\n    (if (empty? string)\n     \
    \   #t\n        (if (equal? (first string) \"[\")\n            (if (equal? (last\
    \ string) \"]\")\n                (helper (rest (butlast string)))\n         \
    \       #f)\n            #f)))\n  (helper string))\n", "  (define (helper string\
    \ count)\n    (cond [(empty? string) (zero? count)]\n          [(equal? (first\
    \ string) #\\[) (helper (rest string) (+ count 1))]\n          [(equal? (first\
    \ string) #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n\
    \          [else (helper (rest string) count)]))\n  (helper string 0))\n", " \
    \ (define (is_nested-helper string stack)\n    (cond ((null? string) (null? stack))\n\
    \          ((char=? (car string) #\\[) (is_nested-helper (cdr string) (cons #\\\
    [ stack)))\n          ((char=? (car string) #\\]) (and (not (null? stack)) (is_nested-helper\
    \ (cdr string) (cdr stack))))\n          (else (is_nested-helper (cdr string)\
    \ stack))))\n  (is_nested-helper string '()))\n", "  (define (helper string count)\n\
    \    (cond [(empty? string) (zero? count)]\n          [(char=? (first string)\
    \ #\\[) (helper (rest string) (+ count 1))]\n          [(char=? (first string)\
    \ #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n        \
    \  [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string)\n       (zero?\
    \ count)]\n      [(char=? (first string) #\\[)\n       (is_nested-helper (rest\
    \ string) (+ count 1))]\n      [(char=? (first string) #\\])\n       (and (positive?\
    \ count)\n            (is_nested-helper (rest string) (- count 1)))]\n      [else\n\
    \       (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string brackets)\n    (cond\n      [(empty?\
    \ string) (empty? brackets)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons (first string) brackets))]\n      [(char=? (first string)\
    \ #\\]) (and (not (empty? brackets)) (is_nested-helper (rest string) (rest brackets)))]\n\
    \      [else (is_nested-helper (rest string) brackets)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(and (char=? (first string) #\\[) (char=? (last string) #\\])) (helper\
    \ (rest (butlast string)))]\n      [else #f]))\n  (helper string))\n", "  (define\
    \ (is_nested-helper string)\n    (cond\n      [(empty? string) #t]\n      [(and\
    \ (equal? (first string) #\\[) (equal? (last string) #\\])) (is_nested-helper\
    \ (substring string 1 (- (string-length string) 1)))]\n      [else #f]))\n  (is_nested-helper\
    \ string))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (=\
    \ count 0)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ str)\n    (cond\n      [(empty? str) #t]\n      [(equal? (first str) \"]\")\
    \ #f]\n      [(equal? (first str) \"[\") (helper (rest str))]\n      [else (and\
    \ (helper (rest str)) (helper (rest (rest str))))]))\n  (helper (string->list\
    \ string)))\n", "  (let loop ([string string] [stack '()])\n    (cond [(empty?\
    \ string) (empty? stack)]\n          [(char=? (first string) #\\[)\n         \
    \  (loop (rest string) (cons (first string) stack))]\n          [(char=? (first\
    \ string) #\\])\n           (and (not (empty? stack))\n                (loop (rest\
    \ string) (rest stack)))]\n          [else (loop (rest string) stack)])))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (zero? count)]\n      [(char=? (first string) #\\[) (helper (rest string) (+\
    \ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (let loop ([string string] [stack '()])\n    (cond\
    \ [(empty? string) (empty? stack)]\n          [(char=? (first string) #\\[) (loop\
    \ (rest string) (cons #\\[ stack))]\n          [(char=? (first string) #\\])\n\
    \           (and (not (empty? stack))\n                (char=? (first stack) #\\\
    [)\n                (loop (rest string) (rest stack)))]\n          [else (loop\
    \ (rest string) stack)])))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) \"[\")\n     (or (is_nested (rest string))\n         (and (member\
    \ \"]\" string)\n              (is_nested (remove \"]\" string))))]\n    [(equal?\
    \ (first string) \"]\")\n     (or (is_nested (rest string))\n         (and (member\
    \ \"[\" string)\n              (is_nested (remove \"[\" string))))]\n    [else\
    \ (is_nested (rest string))]))\n", "  (define (helper string)\n    (cond\n   \
    \   [(empty? string) #t]\n      [(and (equal? (first string) #\\[) (equal? (last\
    \ string) #\\])) (helper (rest (butlast string)))]\n      [else #f]))\n  (helper\
    \ string))\n", "  (define (helper string count)\n    (cond [(empty? string) (zero?\
    \ count)]\n          [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n          [(char=? (first string) #\\]) (and (not (zero? count)) (helper\
    \ (rest string) (- count 1)))]\n          [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n      [else (helper (rest string) stack)]))\n\
    \  (helper string '()))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string open-brackets)\n    (cond\n     \
    \ [(empty? string) (zero? open-brackets)]\n      [(char=? (first string) #\\[)\
    \ (helper (rest string) (+ open-brackets 1))]\n      [(char=? (first string) #\\\
    ]) (and (positive? open-brackets) (helper (rest string) (- open-brackets 1)))]\n\
    \      [else (helper (rest string) open-brackets)]))\n  (helper string 0))\n",
  "  (define (helper string)\n    (cond\n      [(empty? string) #t]\n      [(or (equal?\
    \ (first string) \"[\") (equal? (first string) \"]\")) (helper (rest string))]\n\
    \      [else #f]))\n  (define (helper2 string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(equal? (first string) \"[\") (helper2 (rest string))]\n      [(equal?\
    \ (first string) \"]\") (helper2 (rest string))]\n      [else #f]))\n  (and (helper\
    \ string) (helper2 string)))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (helper string count)\n    (cond\
    \ ((null? string) (zero? count))\n          ((equal? (car string) \"[\") (helper\
    \ (cdr string) (+ count 1)))\n          ((equal? (car string) \"]\") (helper (cdr\
    \ string) (- count 1)))\n          (else (helper (cdr string) count))))\n  (helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (helper string)\n    (cond ((empty? string) #t)\n\
    \          ((equal? (first string) \"[\") (helper (rest string)))\n          ((equal?\
    \ (first string) \"]\") (helper (rest string)))\n          (else #f)))\n  (helper\
    \ string))\n", "  (let loop ([string string] [stack '()])\n    (cond [(empty?\
    \ string) (empty? stack)]\n          [(char=? (first string) #\\[)\n         \
    \  (loop (rest string) (cons (first string) stack))]\n          [(char=? (first\
    \ string) #\\])\n           (and (not (empty? stack))\n                (loop (rest\
    \ string) (rest stack)))]\n          [else (loop (rest string) stack)])))\n",
  "  (define (helper string)\n    (cond\n      [(empty? string) #t]\n      [(eq? (first\
    \ string) #\\[) (helper (rest string))]\n      [(eq? (first string) #\\]) (if\
    \ (empty? (rest string)) #f (helper (rest string)))]\n      [else (helper (rest\
    \ string))]))\n  (helper string))\n", "  (define (helper string stack)\n    (cond\n\
    \      [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (helper (rest string) (rest stack)))]\n      [else (helper\
    \ (rest string) stack)]))\n  (helper string '()))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (not (= count 0)) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond [(empty?\
    \ string) (empty? stack)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons (first string) stack))]\n          [(char=? (first string)\
    \ #\\]) (and (not (empty? stack))\n                                          \
    \   (char=? (first stack) #\\[)\n                                            \
    \ (is_nested-helper (rest string) (rest stack)))]\n          [else (is_nested-helper\
    \ (rest string) stack)]))\n  (is_nested-helper string '()))\n", "  (let loop ([string\
    \ string] [count 0])\n    (cond [(empty? string) (zero? count)]\n          [(char=?\
    \ (first string) #\\[) (loop (rest string) (+ count 1))]\n          [(char=? (first\
    \ string) #\\]) (loop (rest string) (- count 1))]\n          [else (loop (rest\
    \ string) count)])))\n", "  (define (helper string count)\n    (if (empty? string)\n\
    \        (if (= count 0)\n            #t\n            #f)\n        (if (= (first\
    \ string) #\\[)\n            (helper (rest string) (+ count 1))\n            (if\
    \ (= (first string) #\\])\n                (if (&gt; count 0)\n              \
    \      (helper (rest string) (- count 1))\n                    #f)\n         \
    \       (helper (rest string) count)))))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string)\n       (zero?\
    \ count)]\n      [(char=? (first string) #\\[)\n       (is_nested-helper (rest\
    \ string) (+ count 1))]\n      [(char=? (first string) #\\])\n       (and (not\
    \ (zero? count))\n            (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else\n       (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (zero? count)]\n      [(equal? (first string) #\\[) (helper (rest string) (+\
    \ count 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (is_nested-helper\
    \ (rest string) (- count 1)) (> count 0))]\n      [else (is_nested-helper (rest\
    \ string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper string)\n\
    \    (cond\n      [(empty? string) #t]\n      [(equal? (first string) \"[\") (helper\
    \ (rest string))]\n      [(equal? (first string) \"]\") #f]\n      [else (and\
    \ (helper (rest string)) (helper (rest string)))]))\n  (helper string))\n", " \
    \ (define (helper string count)\n    (cond\n      [(empty? string) (= count 0)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n   \
    \   [(char=? (first string) #\\]) (and (not (zero? count)) (helper (rest string)\
    \ (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string\
    \ 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (let loop ([string string] [stack '()])\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (loop (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\])\n       (cond\n   \
    \      [(empty? stack) #f]\n         [else (loop (rest string) (rest stack))])]\n\
    \      [else (loop (rest string) stack)])))\n", "  (define (helper string count)\n\
    \    (cond\n      [(empty? string) (= count 0)]\n      [(char=? (first string)\
    \ #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\\
    ]) (and (not (zero? count)) (helper (rest string) (- count 1)))]\n      [else\
    \ (helper (rest string) count)]))\n  (helper string 0))\n", "  (let loop ([string\
    \ string] [stack '()])\n    (cond [(empty? string) (empty? stack)]\n         \
    \ [(char=? (first string) #\\[)\n           (loop (rest string) (cons #\\[ stack))]\n\
    \          [(char=? (first string) #\\])\n           (and (not (empty? stack))\n\
    \                (loop (rest string) (rest stack)))]\n          [else (loop (rest\
    \ string) stack)])))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (zero? count)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (zero? count)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) \"[\")\n     (cond\n       [(equal? (last string) \"]\") #t]\n     \
    \  [else (is_nested (rest string))])]\n    [else (is_nested (rest string))]))\n",
  "  (define (helper str stack)\n    (cond\n      [(empty? str) (empty? stack)]\n\
    \      [(char=? (first str) #\\[) (helper (rest str) (cons #\\[ stack))]\n   \
    \   [(char=? (first str) #\\]) (and (not (empty? stack)) (helper (rest str) (rest\
    \ stack)))]\n      [else (helper (rest str) stack)]))\n  (helper string '()))\n",
  "  (define (helper str count)\n    (cond\n      [(empty? str) (if (= count 0) #t\
    \ #f)]\n      [(char=? (first str) #\\[) (helper (rest str) (+ count 1))]\n  \
    \    [(char=? (first str) #\\]) (if (= count 0) #f (helper (rest str) (- count\
    \ 1)))]\n      [else (helper (rest str) count)]))\n  (helper string 0))\n", " \
    \ (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first\
    \ string) #\\]) (and (not (= count 0)) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (helper string counter)\n    (cond\n      [(empty? string) (zero? counter)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ counter 1))]\n \
    \     [(char=? (first string) #\\]) (and (positive? counter) (helper (rest string)\
    \ (- counter 1)))]\n      [else (helper (rest string) counter)]))\n  (helper string\
    \ 0))\n", "  (let loop ([string string] [count 0])\n    (cond [(empty? string)\
    \ (zero? count)]\n          [(equal? (first string) #\\[) (loop (rest string)\
    \ (+ count 1))]\n          [(equal? (first string) #\\]) (and (positive? count)\
    \ (loop (rest string) (- count 1)))]\n          [else (loop (rest string) count)])))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first\
    \ string) #\\]) (and (not (= count 0)) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (let\
    \ loop ([string string] [stack '()])\n    (cond [(empty? string) (empty? stack)]\n\
    \          [(char=? (first string) #\\[) (loop (rest string) (cons #\\[ stack))]\n\
    \          [(char=? (first string) #\\])\n           (and (not (empty? stack))\
    \ (loop (rest string) (rest stack)))]\n          [else (loop (rest string) stack)])))\n",
  "  (define (helper string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (cons #\\[ stack))]\n\
    \      [(char=? (first string) #\\]) (and (not (empty? stack)) (helper (rest string)\
    \ (rest stack)))]\n      [else (helper (rest string) stack)]))\n  (helper string\
    \ '()))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ str acc)\n    (cond\n      [(empty? str) (zero? acc)]\n      [(char=? (first\
    \ str) #\\[) (helper (rest str) (+ acc 1))]\n      [(char=? (first str) #\\])\
    \ (and (positive? acc) (helper (rest str) (- acc 1)))]\n      [else (helper (rest\
    \ str) acc)]))\n  (helper string 0))\n", "  (define (helper string count)\n  \
    \  (cond\n      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\\
    [) (helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and\
    \ (not (zero? count)) (helper (rest string) (- count 1)))]\n      [else (helper\
    \ (rest string) count)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (not (zero? count)) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond [(empty? string)\
    \ (= count 0)]\n          [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n          [(char=? (first string) #\\]) (and (not (= count 0))\
    \ (helper (rest string) (- count 1)))]\n          [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (is_nested-helper string open-count)\n\
    \    (cond\n      [(empty? string) (zero? open-count)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ open-count 1))]\n      [(char=?\
    \ (first string) #\\])\n       (if (zero? open-count)\n           #f\n       \
    \    (is_nested-helper (rest string) (- open-count 1)))]\n      [else (is_nested-helper\
    \ (rest string) open-count)]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n  \
    \    [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? count) (helper (rest string) (-\
    \ count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (is_nested-helper string open-brackets)\n    (cond\n      [(empty? string)\
    \ (zero? open-brackets)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ open-brackets 1))]\n      [(char=? (first string) #\\]) (and\
    \ (positive? open-brackets) (is_nested-helper (rest string) (- open-brackets 1)))]\n\
    \      [else (is_nested-helper (rest string) open-brackets)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (= count 0)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (helper str count)\n    (cond\n      [(empty? str)\n\
    \       (if (= count 0)\n           #t\n           #f)]\n      [(char=? (first\
    \ str) #\\[)\n       (helper (rest str) (+ count 1))]\n      [(char=? (first str)\
    \ #\\])\n       (if (= count 0)\n           #f\n           (helper (rest str)\
    \ (- count 1)))]\n      [else\n       (helper (rest str) count)]))\n  (helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond [(empty?\
    \ string) (zero? count)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n          [(char=? (first string) #\\]) (and (zero?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n          [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(equal?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(equal? (first\
    \ string) #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n  \
    \    [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? count) (helper (rest string) (-\
    \ count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (helper string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (cons #\\[ stack))]\n\
    \      [(char=? (first string) #\\]) (and (not (empty? stack)) (helper (rest string)\
    \ (rest stack)))]\n      [else (helper (rest string) stack)]))\n  (helper string\
    \ '()))\n", "  (define (is_nested-helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(equal? (first string) \"[\") (is_nested-helper (rest string))]\n\
    \      [(equal? (first string) \"]\") #f]\n      [else (is_nested-helper (rest\
    \ string))]))\n  (is_nested-helper string))\n", "  (cond\n    [(empty? string)\
    \ false]\n    [(equal? (first string) \"[\")\n     (cond\n       [(empty? (rest\
    \ string)) false]\n       [(equal? (first (rest string)) \"]\") true]\n      \
    \ [else (is_nested (rest string))])]\n    [else (is_nested (rest string))]))\n",
  "  (define (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n   \
    \   [(char=? (first string) #\\]) (and (positive? count) (helper (rest string)\
    \ (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string\
    \ 0))\n", "  (define (helper str count)\n    (cond\n      [(empty? str) (= count\
    \ 0)]\n      [(char=? (first str) #\\]) (and (> count 0) (helper (rest str) (-\
    \ count 1)))]\n      [(char=? (first str) #\\[) (helper (rest str) (+ count 1))]))\n\
    \  (helper string 0))\n", "  (define (helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n      [else (helper (rest string) stack)]))\n\
    \  (helper string '()))\n", "  (define (helper string count)\n    (cond\n    \
    \  [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (> count\
    \ 0) (helper (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string)\n    (cond [(empty?\
    \ string) #t]\n          [(and (equal? (first string) \"[\") (equal? (last string)\
    \ \"]\")) (is_nested-helper (rest (butlast string)))]\n          [else #f]))\n\
    \  (is_nested-helper (string->list string)))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (let loop ([string string] [stack '()])\n\
    \    (cond [(empty? string) (empty? stack)]\n          [(equal? (first string)\
    \ #\\[) (loop (rest string) (cons (first string) stack))]\n          [(equal?\
    \ (first string) #\\]) (and (not (empty? stack)) (loop (rest string) (rest stack)))]\n\
    \          [else (loop (rest string) stack)])))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=? (first\
    \ string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (not (zero? count)) (helper (rest string) (- count 1)))]\n      [else\
    \ (helper (rest string) count)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (is_nested-helper (rest string) (- count 1)) (> count\
    \ 0))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(and (char=? (first string) #\\[) (char=? (last string) #\\])) (helper\
    \ (rest (butlast string)))]\n      [else #f]))\n  (helper string))\n", "  (define\
    \ (is_nested-helper string open-count)\n    (cond\n      [(empty? string) (zero?\
    \ open-count)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ open-count 1))]\n      [(char=? (first string) #\\]) (and (positive? open-count)\
    \ (is_nested-helper (rest string) (- open-count 1)))]\n      [else (is_nested-helper\
    \ (rest string) open-count)]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) (= count 0)]\n    \
    \  [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (not (= count 0)) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n  \
    \    [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? count) (helper (rest string) (-\
    \ count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (is_nested-helper string count)\n    (cond [(empty? string) (zero? count)]\n\
    \          [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n          [(char=? (first string) #\\]) (is_nested-helper (rest string)\
    \ (- count 1))]\n          [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (helper (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string open-count)\n    (cond\n      [(empty? string) (zero? open-count)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ open-count 1))]\n\
    \      [(char=? (first string) #\\]) (and (positive? open-count) (helper (rest\
    \ string) (- open-count 1)))]\n      [else (helper (rest string) open-count)]))\n\
    \  (helper string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string)\n       (zero? count)]\n      [(char=? (first string) #\\[)\n      \
    \ (helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\])\n \
    \      (and (positive? count)\n            (helper (rest string) (- count 1)))]\n\
    \      [else\n       (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (is_nested-helper string stack)\n    (cond\n      [(empty? string) (empty?\
    \ stack)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (is_nested-helper (rest string) (rest stack)))]\n      [else (is_nested-helper\
    \ (rest string) stack)]))\n  (is_nested-helper string '()))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n      [(char=? (first\
    \ string) #\\]) (and (not (zero? count)) (helper (rest string) (- count 1)))]\n\
    \      [else (helper (rest string) count)]))\n  (helper string 0))\n", "  (define\
    \ (helper str count)\n    (cond\n      [(empty? str) (zero? count)]\n      [(char=?\
    \ (first str) #\\[) (helper (rest str) (+ count 1))]\n      [(char=? (first str)\
    \ #\\]) (and (positive? count) (helper (rest str) (- count 1)))]\n      [else\
    \ (helper (rest str) count)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\])\n       (cond\n         [(empty? stack) #f]\n\
    \         [else (is_nested-helper (rest string) (rest stack))])]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string counter)\n    (cond ((empty?\
    \ string) (zero? counter))\n          ((char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ counter 1)))\n          ((char=? (first string) #\\]) (and\
    \ (positive? counter) (is_nested-helper (rest string) (- counter 1))))\n     \
    \     (else (is_nested-helper (rest string) counter))))\n  (is_nested-helper string\
    \ 0))\n", "  (define (helper string stack)\n    (cond [(empty? string) (empty?\
    \ stack)]\n          [(char=? (first string) #\\[) (helper (rest string) (cons\
    \ #\\[ stack))]\n          [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n          [else (helper (rest string)\
    \ stack)]))\n  (helper string '()))\n", "  (define (is_nested-helper string)\n\
    \    (cond [(empty? string) #t]\n          [(and (equal? (first string) #\\[)\n\
    \                (equal? (last string) #\\]))\n           (is_nested-helper (substring\
    \ string 1 (- (string-length string) 1)))]\n          [else #f]))\n  (is_nested-helper\
    \ string))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (helper string stack)\n    (cond\n      [(empty? string)\
    \ (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string) (cons\
    \ #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]\n      [else (helper (rest string) stack)]))\n\
    \  (helper string '()))\n", "  (define (helper string count)\n    (cond\n    \
    \  [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]\n      [else (helper (rest string)\
    \ count)]))\n  (helper string 0))\n", "  (define (helper str count)\n    (cond\n\
    \      [(empty? str) (zero? count)]\n      [(char=? (first str) #\\[) (helper\
    \ (rest str) (+ count 1))]\n      [(char=? (first str) #\\]) (and (positive? count)\
    \ (helper (rest str) (- count 1)))]\n      [else (helper (rest str) count)]))\n\
    \  (helper string 0))\n", "  (let loop ([string string] [stack '()])\n    (cond\
    \ [(empty? string) (empty? stack)]\n          [(char=? (first string) #\\[) (loop\
    \ (rest string) (cons #\\[ stack))]\n          [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (loop (rest string) (rest stack)))]\n          [else (loop\
    \ (rest string) stack)])))\n", "  (define (helper string)\n    (cond\n      [(empty?\
    \ string) #t]\n      [(equal? (first string) \"[\") (helper (rest string))]\n\
    \      [(equal? (first string) \"]\") #f]\n      [else (and (helper (rest string))\
    \ (not (empty? (rest string))))]))\n  (helper string))\n", "  (define (helper\
    \ string count)\n    (cond [(empty? string) (zero? count)]\n          [(char=?\
    \ (first string) #\\[) (helper (rest string) (+ count 1))]\n          [(char=?\
    \ (first string) #\\]) (and (positive? count) (helper (rest string) (- count 1)))]\n\
    \          [else (helper (rest string) count)]))\n  (helper string 0))\n", " \
    \ (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(char=? (first string) #\\[) (loop (rest string) (+ count 1))]\n\
    \      [(char=? (first string) #\\]) (loop (rest string) (- count 1))]\n     \
    \ [else (loop (rest string) count)])))\n", "  (define (is_nested-helper string\
    \ stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=?\
    \ (first string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string)\
    \ (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (= count 0)) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string)\n       (zero? count)]\n      [(char=? (first string) #\\[)\n      \
    \ (helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\])\n \
    \      (and (positive? count)\n            (helper (rest string) (- count 1)))]\n\
    \      [else\n       (helper (rest string) count)]))\n  (helper string 0))\n",
  "  (define (is_nested-helper string count)\n    (cond [(empty? string) (= count\
    \ 0)]\n          [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n          [(char=? (first string) #\\]) (and (is_nested-helper\
    \ (rest string) (- count 1))\n                                            (not\
    \ (zero? count)))]\n          [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (= count 0)]\n      [(char=? (first string) #\\]) (and\
    \ (not (zero? count)) (helper (rest string) (- count 1)))]\n      [(char=? (first\
    \ string) #\\[) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n",
  "  (define (helper string count)\n    (cond\n      [(empty? string) (= count 0)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n   \
    \   [(char=? (first string) #\\]) (and (not (= count 0)) (helper (rest string)\
    \ (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string\
    \ 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n      [(empty?\
    \ string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\])\n   \
    \    (and (not (empty? stack))\n            (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string stack)\n    (if (empty?\
    \ string)\n        (empty? stack)\n        (if (char=? (first string) #\\[)\n\
    \            (is_nested-helper (rest string) (cons (first string) stack))\n  \
    \          (if (char=? (first string) #\\])\n                (if (empty? stack)\n\
    \                    #f\n                    (is_nested-helper (rest string) (rest\
    \ stack)))\n                (is_nested-helper (rest string) stack)))))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper str count)\n    (cond ((empty?\
    \ str) (zero? count))\n          ((char=? (first str) #\\[) (is_nested-helper\
    \ (rest str) (+ count 1)))\n          ((char=? (first str) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest str) (- count 1))))\n          (else (is_nested-helper\
    \ (rest str) count))))\n  (is_nested-helper (string->list string) 0))\n", "  (cond\n\
    \    [(empty? string) false]\n    [(and (equal? (first string) \"[\") (equal?\
    \ (last string) \"]\")) true]\n    [else (is_nested (rest (butlast string)))])\n\
    \  )\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\
    \nA:\n\nYour code is very close to the solution.\nThe first thing to notice is\
    \ that the function <code>is_nested</code> is not recursive.\nThe second thing\
    \ to notice is that the function <code>is_nested</code> is not recursive.\nThe\
    \ third thing to notice is that the function <code>is_nested</code> is not recursive.\n\
    The fourth thing to notice is that the function <code>is_nested</code> is not\
    \ recursive.\nThe fifth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe sixth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe seventh thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe eighth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe ninth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe tenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe eleventh thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe twelfth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe thirteenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe fourteenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe fifteenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe sixteenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.\nThe seventeenth thing to notice is that the function <code>is_nested</code>\
    \ is not recursive.", "  (define (is_nested-helper string count)\n    (if (empty?\
    \ string)\n        (if (= count 0)\n            #t\n            #f)\n        (if\
    \ (char=? (first string) #\\[)\n            (is_nested-helper (rest string) (+\
    \ count 1))\n            (if (char=? (first string) #\\])\n                (if\
    \ (&gt; count 0)\n                    (is_nested-helper (rest string) (- count\
    \ 1))\n                    #f)\n                (is_nested-helper (rest string)\
    \ count)))))\n  (is_nested-helper string 0))\n</code>\n", "  (define (helper string\
    \ count)\n    (cond [(empty? string) (= count 0)]\n          [(and (char=? (first\
    \ string) #\\() (> count 0)) (helper (rest string) (- count 1))]\n          [(and\
    \ (char=? (first string) #\\)) (< count 0)) (helper (rest string) (+ count 1))]\n\
    \          [(char=? (first string) #\\() (helper (rest string) (+ count 1))]\n\
    \          [(char=? (first string) #\\)) (helper (rest string) (- count 1))]\n\
    \          [else (helper (rest string) count)]))\n  (helper string 0))\n", " \
    \ (define (helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (helper (rest string) (+ count 1))]\n   \
    \   [(char=? (first string) #\\]) (and (positive? count) (helper (rest string)\
    \ (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper string\
    \ 0))\n", "  (define (is_nested-helper string)\n    (cond\n      [(empty? string)\
    \ #t]\n      [(equal? (first string) \"]\") #f]\n      [(equal? (first string)\
    \ \"[\") (is_nested-helper (rest string))]\n      [else (is_nested-helper (rest\
    \ string))]))\n  (is_nested-helper string))\n", "  (define (helper str count)\n\
    \    (cond [(empty? str) (= count 0)]\n          [(char=? (first str) #\\[) (helper\
    \ (rest str) (+ count 1))]\n          [(char=? (first str) #\\]) (and (not (zero?\
    \ count)) (helper (rest str) (- count 1)))]\n          [else (helper (rest str)\
    \ count)]))\n  (helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[)\n       (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=?\
    \ (first string) #\\])\n       (and (not (empty? stack))\n            (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
