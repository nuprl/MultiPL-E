name: HumanEval_159_eat
language: rkt
prompt: "#lang racket\n\n;; You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n;; but now you need to eat more carrots to complete the day's\
  \ meals.\n;; you should return an array of [ total number of eaten carrots after\
  \ your meals,\n;; the number of carrots left after your meals ]\n;; if there are\
  \ not enough remaining carrots, you will eat all remaining carrots, but will still\
  \ be hungry.\n;; Example:\n;; Variables:\n;; @number : integer\n;; the number of\
  \ carrots that you have eaten.\n;; @need : integer\n;; the number of carrots that\
  \ you need to eat.\n;; @remaining : integer\n;; the number of remaining carrots\
  \ thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <=\
  \ 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n\
  \    (check-equal? (candidate 5 6 10) (list 11 4))\n    (check-equal? (candidate\
  \ 4 8 9) (list 12 1))\n    (check-equal? (candidate 1 10 10) (list 11 0))\n    (check-equal?\
  \ (candidate 2 11 5) (list 7 0))\n    (check-equal? (candidate 4 5 7) (list 9 2))\n\
  \    (check-equal? (candidate 4 5 1) (list 5 0))\n))\n\n(test-humaneval)"
completions: ["  (cond [(>= need remaining) (list (+ number remaining) 0)]\n     \
    \   [else (list (+ number need) (- remaining need))]))\n", "  (if (&gt;= (+ number\
    \ need) remaining)\n      (list remaining (- (+ number need) remaining))\n   \
    \   (list (+ number need) 0)))\n</code>\nI have tried to run the code in the console,\
    \ but I get the following error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n\
    \ cannot reference an identifier before its definition\n  in module: top-level\n\
    </code>\nI have tried to run the code in the console, but I get the following\
    \ error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n cannot reference an identifier\
    \ before its definition\n  in module: top-level\n</code>\nI have tried to run\
    \ the code in the console, but I get the following error:\n<code>&gt; (eat 0 0\
    \ 0)\n. . eat: undefined;\n cannot reference an identifier before its definition\n\
    \  in module: top-level\n</code>\nI have tried to run the code in the console,\
    \ but I get the following error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n\
    \ cannot reference an identifier before its definition\n  in module: top-level\n\
    </code>\nI have tried to run the code in the console, but I get the following\
    \ error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n cannot reference an identifier\
    \ before its definition\n  in module: top-level\n</code>\nI have tried to run\
    \ the code in the console, but I get the following error:\n<code>&gt; (eat 0 0\
    \ 0)\n. . eat: undefined;\n cannot reference an identifier before its definition\n\
    \  in module: top-level\n</code>\nI have tried to run the code in the console,\
    \ but I get the following error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n\
    \ cannot reference an identifier before its definition\n  in module: top-level\n\
    </code>\nI have tried to run the code in the console, but I get the following\
    \ error:\n<code>&gt; (eat 0 0 0)\n. . eat: undefined;\n cannot reference an identifier\
    \ before its definition\n  in module: top-level\n</code>", "  (let ([eaten (+\
    \ number need)]\n        [left (- remaining eaten)])\n    (if (< left 0)\n   \
    \     (list eaten 0)\n        (list eaten left))))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (let ([eaten (+ number need)]\n        [left (-\
    \ remaining need)])\n    (if (< left 0)\n        (list eaten remaining)\n    \
    \    (list eaten left))))\n", "  (define (eat-helper number need remaining)\n\
    \    (cond\n      [(= number need) (list number 0)]\n      [(>= (+ number remaining)\
    \ need) (list need (- (+ number remaining) need))]\n      [else (list (+ number\
    \ remaining) 0)]))\n  (eat-helper number need remaining))\n", "  (cond [(>= (+\
    \ number need) remaining) (list remaining 0)]\n        [else (list (+ number need)\
    \ (- remaining (+ number need)))]))\n", "  (if (>= (+ number need) remaining)\n\
    \      (list remaining (- (+ number need) remaining))\n      (list (+ number need)\
    \ 0)))\n", "  (define (eat-helper number need remaining)\n    (if (>= need remaining)\n\
    \        (list (+ number remaining) 0)\n        (list (+ number need) (- remaining\
    \ need))))\n  (eat-helper number need remaining))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (let ([eaten (+ number need)]\n        [remaining\
    \ (- remaining need)])\n    (if (> remaining 0)\n        (list eaten remaining)\n\
    \        (list eaten 0))))\n", "  (if (> need remaining)\n      (list (+ number\
    \ remaining) 0)\n      (list (+ number need) (- remaining need))))\n", "  (if\
    \ (> remaining need)\n      (list (+ number need) (- remaining need))\n      (list\
    \ (+ number remaining) 0)))\n", "  (if (<= remaining need)\n      (list (+ number\
    \ remaining) 0)\n      (list (+ number need) (- remaining need))))\n", "  (cond\
    \ [(>= (+ number need) remaining) (list remaining 0)]\n        [else (list (+\
    \ number need) (- remaining (+ number need)))]))\n", "  (cond\n    [(> need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (cond\n    [(>= (+ number need) remaining)\n     (list remaining\
    \ 0)]\n    [else\n     (list (+ number need) (- remaining (+ number need)))]))\n",
  "  (if (>= (+ number need) remaining)\n      (list remaining 0)\n      (list (+\
    \ number need) (- remaining (+ number need)))))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining)\n     (list remaining 0)]\n    [else\n     (list (+ number\
    \ need) (- remaining (+ number need)))]))\n", "  (if (< number need)\n      (if\
    \ (< (+ number remaining) need)\n          (list (+ number remaining) 0)\n   \
    \       (list need (- need number)))\n      (list number remaining)))\n", "  (cond\n\
    \    [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number\
    \ need) (- remaining need))]))\n", "  (if (>= remaining need)\n      (list (+\
    \ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
  "  (cond\n    [(>= remaining need) (list (+ number need) (- remaining need))]\n\
    \    [else (list (+ number remaining) 0)]))\n", "  (cond [(> need remaining) (list\
    \ (+ number remaining) 0)]\n        [else (list (+ number need) (- remaining need))]))\n",
  "  (let ([eaten (+ number need)]\n        [left (- remaining eaten)])\n    (if (<\
    \ left 0)\n        (list eaten 0)\n        (list eaten left))))\n", "  (cond\n\
    \    [(>= (+ number need) remaining) (list remaining 0)]\n    [else (list (+ number\
    \ need) (- remaining (+ number need)))]))\n", "  (cond\n    [(>= (+ number need)\
    \ remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (cond\n    [(>= (+ number need) remaining) (list\
    \ remaining 0)]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n",
  "  (let* ([eaten (+ number need)]\n         [remaining (- remaining need)])\n  \
    \  (if (> remaining 0)\n        (list eaten remaining)\n        (list eaten 0))))\n",
  "  (if (> (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (if (>= (+ number need) remaining)\n\
    \      (list remaining (- (+ number need) remaining))\n      (list (+ number need)\
    \ 0)))\n", "  (if (< number need)\n      (list (+ number remaining) 0)\n     \
    \ (list number (- need number))))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (define (eat-helper number\
    \ need remaining)\n    (cond\n      [(>= need remaining) (list (+ number remaining)\
    \ 0)]\n      [else (list (+ number need) (- remaining need))]))\n  (eat-helper\
    \ number need remaining))\n", "  (if (> need remaining)\n      (list (+ number\
    \ remaining) 0)\n      (list (+ number need) (- remaining need))))\n", "  (if\
    \ (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (list (+ number (min need remaining)) (-\
    \ remaining (min need remaining))))\n", "  (cond\n    [(>= (+ number need) remaining)\
    \ (list remaining 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (list (+ number (min need remaining))\n        (- remaining\
    \ (min need remaining))))\n", "  (if (>= need remaining)\n      (list (+ number\
    \ remaining) 0)\n      (list (+ number need) (- remaining need))))\n", "  (if\
    \ (>= (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (let ([remaining (- remaining number)])\n\
    \    (if (< remaining need)\n        (values (+ number remaining) 0)\n       \
    \ (values (+ number need) (- remaining need)))))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (cond [(>= (+ number need) remaining) (list remaining\
    \ 0)]\n        [else (list (+ number need) (- remaining (+ number need)))]))\n",
  "  (cond\n    [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list\
    \ (+ number need) (- remaining need))]))\n", "  (if (>= (+ number need) remaining)\n\
    \      (list remaining (- (+ number need) remaining))\n      (list (+ number need)\
    \ 0)))\n", "  (if (>= (+ number need) remaining)\n      (list remaining (- (+\
    \ number need) remaining))\n      (list (+ number need) 0)))\n", "  (let* ([total\
    \ (+ number need)]\n         [remaining (- remaining need)]\n         [remaining\
    \ (if (< remaining 0) 0 remaining)])\n    (list total remaining)))\n", "  (if\
    \ (>= (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (if (> need remaining)\n      (list (+\
    \ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (if (>= (+ number need) remaining)\n\
    \      (list remaining (- (+ number need) remaining))\n      (list (+ number need)\
    \ 0)))\n", "  (cond [(>= (+ number need) remaining)\n         (list remaining\
    \ 0)]\n        [else\n         (list (+ number need) (- remaining (+ number need)))]))\n",
  "  (if (< number need)\n      (if (< (+ number remaining) need)\n          (list\
    \ (+ number remaining) 0)\n          (list need (- need number)))\n      (list\
    \ number remaining)))\n", "  (list (+ number need) (- remaining need)))\n", " \
    \ (if (>= (+ number need) remaining)\n      (list remaining (- remaining number))\n\
    \      (list (+ number need) (- remaining (+ number need)))))\n", "  (if (>= (+\
    \ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (cond\n    [(>= (+ number need) remaining)\
    \ (list remaining 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (list (+ number (min need remaining))\n        (- remaining\
    \ (min need remaining))))\n", "  (cond\n    [(>= number need)\n     (list number\
    \ 0)]\n    [(>= remaining need)\n     (list (+ number remaining) 0)]\n    [else\n\
    \     (list (+ number remaining) (- need remaining))]))\n", "  (if (>= (+ number\
    \ remaining) need)\n      (list need (+ remaining (- need number)))\n      (list\
    \ (+ number remaining) 0)))\n", "  (cond\n    [(>= need remaining) (list (+ number\
    \ remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n", " \
    \ (let ([eaten (+ number need)])\n    (if (>= eaten remaining)\n        (list\
    \ remaining (- eaten remaining))\n        (list eaten 0))))\n", "  (if (>= (+\
    \ number remaining) need)\n      (list need (- (+ number remaining) need))\n \
    \     (list (+ number remaining) 0)))\n", "  (if (>= (+ number remaining) need)\n\
    \      (list need (+ remaining (- need number)))\n      (list (+ number remaining)\
    \ 0)))\n", "  (cond\n    [(>= need remaining) (list (+ number remaining) 0)]\n\
    \    [else (list (+ number need) (- remaining need))]))\n", "  (if (<= remaining\
    \ need)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining\
    \ need))))\n", "  (let ([eaten (+ number need)])\n    (if (> eaten remaining)\n\
    \        (list remaining (- eaten remaining))\n        (list eaten (- remaining\
    \ eaten)))))\n", "  (cond\n    [(>= (+ number need) remaining) (list remaining\
    \ 0)]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n", " \
    \ (if (>= remaining need)\n      (list (+ number need) (- remaining need))\n \
    \     (list (+ number remaining) 0)))\n", "  (if (> need remaining)\n      (list\
    \ (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
  "  (if (>= (+ number remaining) need)\n      (list need (+ remaining (- need number)))\n\
    \      (list (+ number remaining) 0)))\n", "  (if (>= remaining need)\n      (list\
    \ (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
  "  (cond\n    [(>= number need) (list number 0)]\n    [(>= remaining need) (list\
    \ (+ number remaining) 0)]\n    [else (list (+ number remaining) (- need remaining))]))\n",
  "  (if (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (define (eat-helper number need remaining)\n\
    \    (if (>= need remaining)\n        (list (+ number remaining) 0)\n        (list\
    \ (+ number need) (- remaining need))))\n  (if (or (< number 0) (< need 0) (<\
    \ remaining 0))\n      (list 0 0)\n      (eat-helper number need remaining)))\n",
  "  (cond\n    [(>= (+ number need) remaining) (list remaining 0)]\n    [else (list\
    \ (+ number need) (- remaining (+ number need)))]))\n", "  (let ([eaten (+ number\
    \ need)])\n    (if (> eaten remaining)\n        (list remaining (- eaten remaining))\n\
    \        (list eaten 0))))\n", "  (let ([eaten (+ number need)])\n    (if (> eaten\
    \ remaining)\n        (list remaining (- eaten remaining))\n        (list eaten\
    \ 0))))\n", "  (cond\n    [(>= (+ number need) remaining) (list remaining (- (+\
    \ number need) remaining))]\n    [else (list (+ number need) 0)]))\n", "  (if\
    \ (>= remaining need)\n      (list (+ number need) (- remaining need))\n     \
    \ (list (+ number remaining) 0)))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (cond\n    [(<= number 0) (list 0 0)]\n    [(<=\
    \ need 0) (list 0 0)]\n    [(<= remaining 0) (list 0 0)]\n    [(<= (+ number need)\
    \ remaining) (list (+ number need) (- remaining (+ number need)))]\n    [else\
    \ (list remaining 0)]))\n", "  (cond\n    [(> need remaining) (list (+ number\
    \ remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n", " \
    \ (if (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+\
    \ number need) (- remaining need))))\n", "  (cond\n    [(>= remaining need) (list\
    \ (+ number need) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n",
  "  (if (> (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (if (> need remaining)\n      (list (+\
    \ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
  "  (if (>= (+ number remaining) need)\n      (list need (+ remaining (- need number)))\n\
    \      (list (+ number remaining) 0)))\n", "  (if (>= remaining need)\n      (list\
    \ (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
  "  (if (>= remaining need)\n      (list (+ number need) (- remaining need))\n  \
    \    (list (+ number remaining) 0)))\n", "  (let ([eaten (+ number need)])\n \
    \   (if (> eaten remaining)\n        (list remaining (- eaten remaining))\n  \
    \      (list eaten 0))))\n", "  (if (< number need)\n      (if (< (+ number remaining)\
    \ need)\n          (list (+ number remaining) 0)\n          (list need (- need\
    \ number)))\n      (list number remaining)))\n", "  (cond\n    [(>= need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (cond [(>= (+ number remaining) need)\n         (list need\
    \ remaining)]\n        [else\n         (list (+ number remaining) 0)]))\n", " \
    \ (if (< number need)\n      (if (< (+ number remaining) need)\n          (list\
    \ (+ number remaining) 0)\n          (list need (- need number)))\n      (list\
    \ number remaining)))\n", "  (cond\n    [(>= (+ number need) remaining) (list\
    \ remaining 0)]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n",
  "  (cond [(>= remaining need) (list (+ number need) (- remaining need))]\n     \
    \   [else (list (+ number remaining) 0)]))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (if (or (< number 0) (< need\
    \ 0) (< remaining 0))\n      (error \"Invalid input\")\n      (let ([eaten (+\
    \ number need)]\n            [left (- remaining need)])\n        (if (< left 0)\n\
    \            (values eaten 0)\n            (values eaten left)))))\n", "  (cond\n\
    \    [(>= (+ number remaining) need)\n     (list need (- (+ number remaining)\
    \ need))]\n    [else\n     (list (+ number remaining) 0)]))\n", "  (if (>= (+\
    \ number remaining) need)\n      (list need (- (+ number remaining) need))\n \
    \     (list (+ number remaining) 0)))\n", "  (cond\n    [(>= need remaining) (list\
    \ (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
  "  (list (+ number (min need remaining))\n        (- remaining (min need remaining))))\n",
  "  (if (>= (+ number remaining) need)\n      (list need (- (+ number remaining)\
    \ need))\n      (list (+ number remaining) 0)))\n", "  (let ([eaten (+ number\
    \ need)])\n    (if (> eaten remaining)\n        (list remaining (- eaten remaining))\n\
    \        (list eaten (- remaining eaten)))))\n", "  (cond\n    [(>= need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (cond\n    [(>= need remaining) (list (+ number remaining)\
    \ 0)]\n    [else (list (+ number need) (- remaining need))]))\n", "  (cond\n \
    \   [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number\
    \ need) (- remaining need))]))\n", "  (cond\n    [(> need remaining) (list (+\
    \ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
  "  (list (+ number (min need remaining))\n        (- remaining (min need remaining))))\n",
  "  (if (>= remaining need)\n      (list (+ number need) (- remaining need))\n  \
    \    (list (+ number remaining) 0)))\n", "  (list (if (>= (+ number remaining)\
    \ need)\n            (+ number remaining)\n            (+ number remaining))\n\
    \        (if (>= (+ number remaining) need)\n            (- (+ number remaining)\
    \ need)\n            0)))\n", "  (if (>= remaining need)\n      (list (+ number\
    \ need) (- remaining need))\n      (list (+ number remaining) 0)))\n", "  (if\
    \ (>= need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (let ([eaten (min need remaining)])\n   \
    \ (list (+ number eaten) (- remaining eaten))))\n", "  (if (>= (+ number remaining)\
    \ need)\n      (list need (- (+ number remaining) need))\n      (list (+ number\
    \ remaining) 0)))\n", "  (if (>= (+ number remaining) need)\n      (list need\
    \ (+ remaining (- need number)))\n      (list (+ number remaining) 0)))\n", " \
    \ (cond [(>= (+ number need) remaining)\n         (list remaining (- (+ number\
    \ need) remaining))]\n        [else\n         (list (+ number need) 0)]))\n",
  "  (cond\n    [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list\
    \ (+ number need) (- remaining need))]))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (cond\n    [(>= (+ number\
    \ need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (let ([eaten (+ number need)])\n    (if (> eaten\
    \ remaining)\n        (list remaining (- eaten remaining))\n        (list eaten\
    \ 0))))\n```\n\n## Solution\n\n```racket\n#lang racket\n", "  (list (+ number\
    \ (min need remaining))\n        (- remaining (min need remaining))))\n", "  (cond\
    \ [(> need remaining) (list (+ number remaining) 0)]\n        [else (list (+ number\
    \ need) (- remaining need))]))\n", "  (if (>= need remaining)\n      (list (+\
    \ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
  "  (let ([eaten (+ number need)])\n    (if (> eaten remaining)\n        (list remaining\
    \ (- eaten remaining))\n        (list eaten (- remaining eaten)))))\n", "  (if\
    \ (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (define (eat-helper number need remaining)\n\
    \    (cond [(= need 0) (list number 0)]\n          [(> need remaining) (list (+\
    \ number remaining) 0)]\n          [else (list (+ number need) (- remaining need))]))\n\
    \  (eat-helper number need remaining))\n", "  (cond\n    [(>= (+ number need)\
    \ remaining) (list remaining (- (+ number need) remaining))]\n    [else (list\
    \ (+ number need) 0)]))\n", "  (if (>= (+ number remaining) need)\n      (list\
    \ need remaining)\n      (list (+ number remaining) 0)))\n", "  (cond [(> (+ number\
    \ need) remaining) (list remaining 0)]\n        [else (list (+ number need) (-\
    \ remaining (+ number need)))]))\n", "  (cond\n    [(>= (+ number need) remaining)\
    \ (list remaining 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (if (> need remaining)\n      (list (+ number remaining) 0)\n\
    \      (list (+ number need) (- remaining need))))\n", "  (let ([eaten (+ number\
    \ need)])\n    (if (> eaten remaining)\n        (list remaining (- eaten remaining))\n\
    \        (list eaten (- remaining eaten)))))\n", "  (cond\n    [(> need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (cond\n    [(>= need remaining) (list (+ number remaining)\
    \ 0)]\n    [else (list (+ number need) (- remaining need))]))\n", "  (if (&gt;=\
    \ (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n</code>\n", "  (if (> (+ number need) remaining)\n\
    \      (list remaining (- (+ number need) remaining))\n      (list (+ number need)\
    \ 0)))\n", "  (cond\n    [(>= need remaining)\n     (list (+ number remaining)\
    \ 0)]\n    [else\n     (list (+ number need) (- remaining need))]))\n", "  (list\
    \ (+ number (min need remaining)) (- remaining (min need remaining))))\n", " \
    \ (cond [(>= (+ number remaining) need)\n         (list need remaining)]\n   \
    \     [else\n         (list (+ number remaining) 0)]))\n", "  (if (< number need)\n\
    \      (if (< (+ number remaining) need)\n          (list (+ number remaining)\
    \ 0)\n          (list need (- need number)))\n      (list number remaining)))\n",
  "  (list (+ number (min need remaining)) (- remaining (min need remaining))))\n\
    ```\n\n## Test\n\n```racket", "  (list (if (>= (+ number remaining) need)\n  \
    \          need\n            (+ number remaining))\n        (if (>= (+ number\
    \ remaining) need)\n            (- remaining (- need number))\n            0)))\n",
  "  (let ([eaten (+ number need)])\n    (if (> eaten remaining)\n        (list remaining\
    \ (- eaten remaining))\n        (list eaten (- remaining eaten)))))\n", "  (if\
    \ (>= (+ number remaining) need)\n      (list need (- (+ number remaining) need))\n\
    \      (list (+ number remaining) 0)))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (cond [(>= (+ number remaining)\
    \ need)\n         (list need (- (+ number remaining) need))]\n        [else\n\
    \         (list (+ number remaining) 0)]))\n", "  (if (> remaining need)\n   \
    \   (list (+ number need) (- remaining need))\n      (list (+ number remaining)\
    \ 0)))\n", "  (cond\n    [(>= need remaining) (list (+ number remaining) 0)]\n\
    \    [else (list (+ number need) (- remaining need))]))\n", "  (define (eat-helper\
    \ number need remaining)\n    (cond\n      [(= need 0) (list number remaining)]\n\
    \      [(> need remaining) (list (+ number remaining) 0)]\n      [else (eat-helper\
    \ (+ number need) 0 (- remaining need))]))\n  (eat-helper number need remaining))\n",
  "  (cond\n    [(>= (+ number need) remaining) (list remaining (- (+ number need)\
    \ remaining))]\n    [else (list (+ number need) 0)]))\n", "  (cond\n    [(>= need\
    \ remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (-\
    \ remaining need))]))\n", "  (if (>= remaining need)\n      (list (+ number need)\
    \ (- remaining need))\n      (list (+ number remaining) 0)))\n", "  (list (+ number\
    \ (min need remaining))\n        (- remaining (min need remaining))))\n", "  (let\
    \ ([remaining (- remaining number)])\n    (if (<= remaining need)\n        (list\
    \ (+ number remaining) 0)\n        (list (+ number need) (- remaining need)))))\n",
  "  (cond\n    [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list\
    \ (+ number need) (- remaining need))]))\n", "  (if (> need remaining)\n     \
    \ (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
  "  (cond\n    [(>= (+ number need) remaining) (list remaining 0)]\n    [else (list\
    \ (+ number need) (- remaining (+ number need)))]))\n", "  (cond\n    [(>= need\
    \ remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (-\
    \ remaining need))]))\n", "  (let ([remaining (- remaining number)])\n    (if\
    \ (< remaining need)\n        (values (+ number remaining) 0)\n        (values\
    \ (+ number need) (- remaining need)))))\n", "  (let ([eaten (+ number need)])\n\
    \    (if (> eaten remaining)\n        (list remaining (- eaten remaining))\n \
    \       (list eaten 0))))\n", "  (cond\n    [(>= remaining need) (list (+ number\
    \ need) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n", " \
    \ (if (<= need remaining)\n      (list (+ number need) (- remaining need))\n \
    \     (list (+ number remaining) 0)))\n", "  (if (>= (+ number remaining) need)\n\
    \      (list need remaining)\n      (list (+ number remaining) 0)))\n", "  (let\
    \ ([remaining (- remaining number)])\n    (if (< remaining need)\n        (list\
    \ (+ number remaining) 0)\n        (list (+ number need) (- remaining need)))))\n",
  "  (let ([eaten (+ number (min need remaining))])\n    (list eaten (- remaining\
    \ eaten))))\n", "  (list (+ number (min need remaining))\n        (- remaining\
    \ (min need remaining))))\n", "  (cond\n    [(> need remaining) (list (+ number\
    \ remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n", " \
    \ (if (>= remaining need)\n      (list (+ number need) (- remaining need))\n \
    \     (list (+ number remaining) 0)))\n", "  (cond\n    [(>= (+ number need) remaining)\
    \ (list remaining 0)]\n    [else (list (+ number need) (- remaining (+ number\
    \ need)))]))\n", "  (if (>= (+ number remaining) need)\n      (list need (- (+\
    \ number remaining) need))\n      (list (+ number remaining) 0)))\n", "  (if (>\
    \ need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number\
    \ need) (- remaining need))))\n", "  (if (>= remaining need)\n      (list (+ number\
    \ need) (- remaining need))\n      (list (+ number remaining) 0)))\n", "  (list\
    \ (+ number (min need remaining))\n        (- remaining (min need remaining))))\n",
  "  (let ([eaten (+ number need)])\n    (if (> eaten remaining)\n        (list remaining\
    \ (- eaten remaining))\n        (list eaten (- remaining eaten)))))\n", "  (if\
    \ (>= (+ number remaining) need)\n      (list need (+ remaining (- need number)))\n\
    \      (list (+ number remaining) 0)))\n", "  (cond [(>= (+ number remaining)\
    \ need) (list need (- (+ number remaining) need))]\n        [else (list (+ number\
    \ remaining) 0)]))\n", "  (cond\n    [(>= (+ number need) remaining) (list remaining\
    \ 0)]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n", " \
    \ (let ([eaten (+ number need)]\n        [left (- remaining need)])\n    (if (>=\
    \ left 0)\n        (list eaten left)\n        (list eaten 0))))\n", "  (cond\n\
    \    [(>= need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number\
    \ need) (- remaining need))]))\n", "  (cond\n    [(>= (+ number need) remaining)\n\
    \     (list remaining 0)]\n    [else\n     (list (+ number need) (- remaining\
    \ (+ number need)))]))\n", "  (if (>= (+ number need) remaining)\n      (list\
    \ remaining 0)\n      (list (+ number need) (- remaining (+ number need)))))\n",
  "  (list (+ number need) (- remaining need)))\n", "  (let ([eaten (+ number need)]\n\
    \        [remaining (- remaining need)])\n    (if (< remaining 0)\n        (values\
    \ eaten 0)\n        (values eaten remaining))))\n", "  (let ([eaten (+ number\
    \ need)]\n        [left (- remaining need)])\n    (if (< left 0)\n        (list\
    \ eaten 0)\n        (list eaten left))))\n", "  (cond\n    [(>= need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (cond\n    [(>= need remaining) (list (+ number remaining)\
    \ 0)]\n    [else (list (+ number need) (- remaining need))]))\n", "  (if (> (+\
    \ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (list (+ number (min need remaining))\n\
    \        (- remaining (min need remaining))))\n", "  (cond\n    [(> need remaining)\
    \ (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining\
    \ need))]))\n", "  (if (>= (+ number need) remaining)\n      (list remaining (-\
    \ (+ number need) remaining))\n      (list (+ number need) 0)))\n", "  (cond\n\
    \    [(>= (+ number need) remaining) (list remaining 0)]\n    [else (list (+ number\
    \ need) (- remaining (+ number need)))]))\n", "  (let ([remaining (- remaining\
    \ number)])\n    (if (<= remaining need)\n        (list (+ number remaining) 0)\n\
    \        (list (+ number need) (- remaining need)))))\n", "  (if (> need remaining)\n\
    \      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining\
    \ need))))\n", "  (cond\n    [(>= (+ number need) remaining) (list remaining 0)]\n\
    \    [else (list (+ number need) (- remaining (+ number need)))]))\n", "  (if\
    \ (>= (+ number need) remaining)\n      (list remaining (- (+ number need) remaining))\n\
    \      (list (+ number need) 0)))\n", "  (if (<= need remaining)\n      (list\
    \ (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
