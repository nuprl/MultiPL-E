language: rkt
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic (rest l))]\n \
    \       [(< (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l))))\n     true]\n \
    \   [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(or (and (< (first l) (second l))\n                \
    \  (monotonic (rest l)))\n             (and (> (first l) (second l))\n       \
    \           (monotonic (rest l))))\n         #t]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm8trfm0b.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm8trfm0b.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm8trfm0b.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm8trfm0b.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(or (and (< (first l) (second l)) (monotonic (rest\
    \ l)))\n             (and (> (first l) (second l)) (monotonic (rest l))))\n  \
    \       true]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsr4ojpmj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsr4ojpmj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsr4ojpmj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsr4ojpmj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-dec l)]\n      \
    \  [(< (first l) (second l)) (monotonic-inc l)]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeki6_eb0.rkt:7:35: monotonic-dec: unbound identifier\n  in: monotonic-dec\n\
    \  location...:\n   /tmp/tmpeki6_eb0.rkt:7:35\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(or (and (< (car l) (cadr l)) (monotonic (cdr l)))\n    \
    \     (and (> (car l) (cadr l)) (monotonic (cdr l))))\n     #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr5ezbpkj.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr5ezbpkj.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr5ezbpkj.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr5ezbpkj.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (or (monotonic-increasing l)\n    \
    \  (monotonic-decreasing l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx2m1nn1f.rkt:5:7: monotonic-increasing: unbound identifier\n  in:\
    \ monotonic-increasing\n  location...:\n   /tmp/tmpx2m1nn1f.rkt:5:7\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l))\n              (monotonic\
    \ (rest l)))\n       (and (> (first l) (second l))\n            (monotonic (rest\
    \ l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (<\
    \ (second l) (third l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (>\
    \ (second l) (third l))))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1r38ydn.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1r38ydn.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkfs7huh6.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkfs7huh6.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkfs7huh6.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic (rest l))]\n \
    \       [(< (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic (rest l))]\n \
    \       [(< (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (if (null? l)\n      #t\n      (let\
    \ ([first (car l)]\n            [rest (cdr l)])\n        (if (null? rest)\n  \
    \          #t\n            (let ([second (car rest)]\n                  [rest2\
    \ (cdr rest)])\n              (if (null? rest2)\n                  #t\n      \
    \            (let ([third (car rest2)])\n                    (and (or (= first\
    \ second)\n                             (= second third))\n                  \
    \       (monotonic rest)))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpapxr_tn9.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpapxr_tn9.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpapxr_tn9.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpapxr_tn9.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(or (and (< (first l) (second l))\n              \
    \    (monotonic (rest l)))\n             (and (> (first l) (second l))\n     \
    \             (monotonic (rest l))))\n         true]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(or (and (< (first l) (second l))\n              \
    \    (monotonic (rest l)))\n             (and (> (first l) (second l))\n     \
    \             (monotonic (rest l))))\n         true]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn_ybmm81.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else false]))\n\
    ```\n\n## Problem 3\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpv0wvwezp.rkt:15:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039992
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l)\n    (if\
    \ (null? (cdr l))\n        #t\n        (if (and (not (null? (cdr (cdr l))))\n\
    \                 (or (and (< (car l) (cadr l))\n                          (<\
    \ (cadr l) (caddr l)))\n                     (and (> (car l) (cadr l))\n     \
    \                     (> (cadr l) (caddr l)))))\n            (monotonic-helper\
    \ (cdr l))\n            #f)))\n  (monotonic-helper l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppu8lwfoi.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprml6lqhm.rkt:7:35: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmprml6lqhm.rkt:7:35\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli_7kl3z.rkt:7:35: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpli_7kl3z.rkt:7:35\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l)) #t)]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l)) #t)]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ #t)]\n    [(> (first l) (second l))\n     (and (monotonic (rest l)) #t)]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l inc)\n\
    \    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(and (not\
    \ inc) (not (positive? (car l))))\n       (monotonic-helper (cdr l) #f)]\n   \
    \   [(and (not inc) (not (negative? (car l))))\n       (monotonic-helper (cdr\
    \ l) #t)]\n      [(and inc (not (negative? (car l))))\n       (monotonic-helper\
    \ (cdr l) #f)]\n      [(and inc (not (positive? (car l))))\n       (monotonic-helper\
    \ (cdr l) #t)]\n      [else\n       (and (monotonic-helper (cdr l) inc)\n    \
    \        (if inc\n                (<= (car l) (cadr l))\n                (>= (car\
    \ l) (cadr l))))]))\n  (monotonic-helper l #f))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd37mh63j.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd37mh63j.rkt:34:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l inc)\n\
    \    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(and (not\
    \ inc) (empty? (rest (rest l)))) #t]\n      [(and inc (empty? (rest (rest l))))\
    \ #t]\n      [(and inc (not (empty? (rest (rest l)))))\n       (if (>= (first\
    \ l) (second l))\n           (monotonic-helper (rest l) inc)\n           #f)]\n\
    \      [(and (not inc) (not (empty? (rest (rest l)))))\n       (if (<= (first\
    \ l) (second l))\n           (monotonic-helper (rest l) inc)\n           #f)]))\n\
    \  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(empty? (rest\
    \ (rest l))) #t]\n    [(and (> (first l) (second l)) (< (first l) (third l)))\
    \ #f]\n    [(and (< (first l) (second l)) (> (first l) (third l))) #f]\n    [(and\
    \ (> (first l) (second l)) (> (first l) (third l)))\n     (monotonic-helper (rest\
    \ l) #f)]\n    [(and (< (first l) (second l)) (< (first l) (third l)))\n     (monotonic-helper\
    \ (rest l) #t)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:36:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:37:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:38:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:41:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lwg1z9e.rkt:42:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(and (<= (first l) (second l))\n              (monotonic\
    \ (rest l))) true]\n        [(and (>= (first l) (second l))\n              (monotonic\
    \ (rest l))) true]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1bzcurck.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1bzcurck.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli_7kl3z.rkt:7:35: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpli_7kl3z.rkt:7:35\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ (positive? (first l)))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l)) (negative? (first l)))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7aboumar.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7aboumar.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7aboumar.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l increasing)\n\
    \    (cond [(empty? l) true]\n          [(empty? (rest l)) true]\n          [(and\
    \ increasing (< (first l) (second l)))\n           (monotonic-helper (rest l)\
    \ increasing)]\n          [(and (not increasing) (> (first l) (second l)))\n \
    \          (monotonic-helper (rest l) increasing)]\n          [else false]))\n\
    \  (monotonic-helper l true))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98glvc6j.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98glvc6j.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98glvc6j.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l)\n    (cond\n\
    \      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(< (first l) (second\
    \ l)) (monotonic-helper (rest l))]\n      [(> (first l) (second l)) (monotonic-helper\
    \ (rest l))]\n      [else #f]))\n  (monotonic-helper l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3ue07rj.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3ue07rj.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3ue07rj.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3ue07rj.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (apply > (rest l)))]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (apply < (rest l)))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_0ycgxt2.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_0ycgxt2.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(and (<= (first l) (second l)) (monotonic (rest l)))\
    \ true]\n        [(and (>= (first l) (second l)) (monotonic (rest l))) true]\n\
    \        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphkb6bxz3.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphkb6bxz3.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmiar39gq.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (>= (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (<= (second l) (third l))))]\n    [else\
    \ false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwa_92oi7.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(null?\
    \ (cdr l)) #t]\n        [(or (and (<= (car l) (cadr l))\n                  (monotonic\
    \ (cdr l)))\n             (and (>= (car l) (cadr l))\n                  (monotonic\
    \ (cdr l))))\n         #t]\n        [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqlt8l26.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqlt8l26.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(or (and (< (car l) (cadr l)) (monotonic (cdr l)))\n    \
    \     (and (> (car l) (cadr l)) (monotonic (cdr l)))) #t]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp25cs9z3q.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp25cs9z3q.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp25cs9z3q.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp25cs9z3q.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l)) (not (member (first l) (rest l))))]\n        [(> (first l) (second l))\n\
    \         (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    \
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyntm4j9.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyntm4j9.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyntm4j9.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5t45726s.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmp5t45726s.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l inc)\n\
    \    (cond ((null? l) #t)\n          ((null? (cdr l)) #t)\n          ((and inc\
    \ (or (< (car l) (cadr l))\n                        (= (car l) (cadr l))))\n \
    \          (monotonic-helper (cdr l) inc))\n          ((and (not inc) (or (> (car\
    \ l) (cadr l))\n                              (= (car l) (cadr l))))\n       \
    \    (monotonic-helper (cdr l) inc))\n          (else #f)))\n  (cond ((null? l)\
    \ #t)\n        ((null? (cdr l)) #t)\n        ((< (car l) (cadr l)) (monotonic-helper\
    \ (cdr l) #t))\n        ((> (car l) (cadr l)) (monotonic-helper (cdr l) #f))\n\
    \        (else #t)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039994
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(and (<= (first l) (second l)) (monotonic (rest l)))\
    \ #t]\n        [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n   \
    \     [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7qbtfwl.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7qbtfwl.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) true]\n    [(null?\
    \ (cdr l)) true]\n    [(or (and (< (car l) (cadr l)) (monotonic (cdr l)))\n  \
    \       (and (> (car l) (cadr l)) (monotonic (cdr l)))) true]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpavp1m8l1.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpavp1m8l1.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpavp1m8l1.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpavp1m8l1.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l))))\n     true]\n \
    \   [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkgy7_eex.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (positive? (sub1 (first l)))\n              (positive?\
    \ (sub1 (first (rest l)))))\n         (and (negative? (sub1 (first l)))\n    \
    \          (negative? (sub1 (first (rest l))))))\n     (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpplivmg05.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpplivmg05.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpplivmg05.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpplivmg05.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpplivmg05.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic (rest l))]\n \
    \       [(< (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49j1wqps.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (or (empty? (rest (rest l)))\n                  (< (second\
    \ l) (third l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (or (empty? (rest (rest l)))\n                  (>\
    \ (second l) (third l))))]\n        [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa6hzvfma.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa6hzvfma.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppwinlmhc.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (if (null? l)\n      #t\n      (let\
    \ ([a (car l)]\n            [b (cadr l)])\n        (if (null? (cdr l))\n     \
    \       #t\n            (if (< a b)\n                (monotonic (cdr l))\n   \
    \             (if (> a b)\n                    (monotonic (cdr l))\n         \
    \           #f))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_k_8wsn.rkt:22:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe_k_8wsn.rkt:23:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_k_8wsn.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_k_8wsn.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe_k_8wsn.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_k_8wsn.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe_k_8wsn.rkt:28:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(60)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_k_8wsn.rkt:29:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(< (first l) (second l)) (monotonic (rest l))]\n \
    \       [(> (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx9ohzy2n.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest\
    \ l)) #t)]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l)) #t)]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa4pjyz4e.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(null? l) #t]\n        [(null?\
    \ (cdr l)) #t]\n        [(or (and (< (car l) (cadr l)) (monotonic (cdr l)))\n\
    \             (and (> (car l) (cadr l)) (monotonic (cdr l)))) #t]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnl7si3yq.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnl7si3yq.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnl7si3yq.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnl7si3yq.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(empty? (rest (rest l))) #t]\n    [else (and (or (and (<\
    \ (first l) (second l))\n                       (monotonic (rest l)))\n      \
    \             (and (> (first l) (second l))\n                       (monotonic\
    \ (rest l))))\n               #t)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqmoq9np.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqmoq9np.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqmoq9np.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqmoq9np.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmfons126.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprse4_bcz.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprse4_bcz.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprse4_bcz.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33ui6sat.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ (not (member (first l) (rest l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc77zhav.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(and (<= (car l) (cadr l)) (monotonic (cdr l))) #t]\n   \
    \ [(and (>= (car l) (cadr l)) (monotonic (cdr l))) #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnrm181vj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnrm181vj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(and (<= (car l) (cadr l)) (monotonic (cdr l))) #t]\n   \
    \ [(and (>= (car l) (cadr l)) (monotonic (cdr l))) #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnrm181vj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnrm181vj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (define (monotonic-helper l inc)\n\
    \    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(and (inc?\
    \ (first l) (second l) inc)\n            (monotonic-helper (rest l) inc)) #t]\n\
    \      [else #f]))\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (inc? (first l) (second l) #t)\n          (monotonic-helper (rest l)\
    \ #t)) #t]\n    [(and (inc? (first l) (second l) #f)\n          (monotonic-helper\
    \ (rest l) #f)) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx57bhbfh.rkt:9:13: inc?: unbound identifier\n  in: inc?\n  location...:\n\
    \   /tmp/tmpx57bhbfh.rkt:9:13\n"
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(or (= (first l) (first (rest l)))\n             (<\
    \ (first l) (first (rest l)))\n             (> (first l) (first (rest l))))\n\
    \         (monotonic (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2_3gh_k.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2_3gh_k.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mcdrl84.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l))\n              (monotonic\
    \ (rest l)))\n       (and (> (first l) (second l))\n            (monotonic (rest\
    \ l))))\n     #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppfnaugn9.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (<= (first l) (first (rest l))))]\n    [(> (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (>= (first l) (first (rest l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpenha1fdm.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpenha1fdm.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpenha1fdm.rkt:27:4

    actual:     #<void>

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:18:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:20:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe81oinr4.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry2p7lfo.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n\
    \         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8am_63tj.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\
    \ #t)]\n    [(> (first l) (second l))\n     (and (monotonic (rest l)) #t)]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyiodblf.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ze16v1c.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or\n      (and (< (first l) (second l)) (monotonic (rest\
    \ l)))\n      (and (> (first l) (second l)) (monotonic (rest l))))\n     #t]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj16mw7t0.rkt:21:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj16mw7t0.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj16mw7t0.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj16mw7t0.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039995
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli_7kl3z.rkt:7:35: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpli_7kl3z.rkt:7:35\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn6qn4p8k.rkt:8:31: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmpn6qn4p8k.rkt:8:31\n"
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wo9z23r.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039994
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n(define (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:19:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:22:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4epxckup.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
  timestamp: 1660039993
