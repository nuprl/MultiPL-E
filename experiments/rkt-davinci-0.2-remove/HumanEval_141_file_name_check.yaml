name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n(define\
  \ (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_extension ext)\n\
    \    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n\
    \      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (check_name name)\n\
    \    (define (check_name_helper name count)\n      (cond\n        [(string-empty?\
    \ name) (and (= count 0) #t)]\n        [(char-numeric? (string-ref name 0)) (check_name_helper\
    \ (substring name 1) (+ count 1))]\n        [else (and (<= count 3) #t)]))\n \
    \   (and (not (string-empty? name)) (char-alphabetic? (string-ref name 0)) (check_name_helper\
    \ name 0)))\n  (define (check_dot file_name)\n    (define (check_dot_helper file_name\
    \ count)\n      (cond\n        [(string-empty? file_name) (and (= count 1) #t)]\n\
    \        [(char=? (string-ref file_name 0) #\\.) (check_dot_helper (substring\
    \ file_name 1) (+ count 1))]\n        [else (check_dot_helper (substring file_name\
    \ 1) count)]))\n    (check_dot_helper file_name 0))\n  (cond\n    [(check_dot\
    \ file_name) (and (check_name (substring file_name 0 (string-index file_name #\\\
    .))) (check_extension (substring file_name (+ (string-index file_name #\\.) 1))))]\n\
    \    [else #f]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name)\n          (not (regexp-match #rx\"^[a-zA-Z]+[0-9]{4,}\\\\.txt$\"\
    \ file_name)))\n     \"Yes\"]\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name)\n          (not (regexp-match #rx\"^[a-zA-Z]+[0-9]{4,}\\\\\
    .exe$\" file_name)))\n     \"Yes\"]\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name)\n          (not (regexp-match #rx\"^[a-zA-Z]+[0-9]{4,}\\\\\
    .dll$\" file_name)))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n\
    \    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\"\
    \ name)))\n  (define (is_valid_file_name? file_name)\n    (let ([name (string-before\
    \ file_name \".\")]\n          [extension (string-after file_name \".\")])\n \
    \     (and (is_valid_name? name)\n           (is_valid_extension? extension))))\n\
    \  (cond\n    [(regexp-match? #rx\"^[0-9]{4,}\" file_name) \"No\"]\n    [(regexp-match?\
    \ #rx\"^[0-9]{3}[^0-9]\" file_name) \"No\"]\n    [(regexp-match? #rx\"^[0-9]{3}$\"\
    \ file_name) \"No\"]\n    [(regexp-match? #rx\"^[0-9]{2}[^0-9]\" file_name) \"\
    No\"]\n    [(regexp-match? #rx\"^[0-9]{2}$\" file_name) \"No\"]\n    [(regexp-match?\
    \ #rx\"^[0-9][^0-9]\" file_name) \"No\"]\n    [(regexp-match? #rx\"^[0-9]$\" file_name)\
    \ \"No\"]\n    [(regexp-match? #rx\"^[a-zA-Z][^a-zA-Z]\" file_name) \"No\"]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]$\" file_name) \"No\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z]*[^a-zA-Z][a-zA-Z]*[^a-zA-Z][a-zA-Z]*[^a-zA-Z]\" file_name)\
    \ \"No", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension\
    \ extension)\n    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=?\
    \ extension \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is_valid_name name)\n    (define (is_valid_char c)\n     \
    \ (cond\n        [(char-alphabetic? c) #t]\n        [(char-numeric? c) #t]\n \
    \       [else #f]))\n    (define (is_valid_name_helper name)\n      (cond\n  \
    \      [(string-empty? name) #t]\n        [(is_valid_char (string-ref name 0))\
    \ (is_valid_name_helper (substring name 1))]\n        [else #f]))\n    (is_valid_name_helper\
    \ name))\n  (define (is_valid_digits digits)\n    (cond\n      [(string-empty?\
    \ digits) #t]\n      [(char-numeric? (string-ref digits 0)) (is_valid_digits (substring\
    \ digits 1))]\n      [else #f]))\n  (define (is_valid_file_name file_name)\n \
    \   (define (is_valid_file_name_helper file_name)\n      (cond\n        [(string-empty?\
    \ file_name) #t]\n        [(string=? (string-ref file_name 0) #\\.) #f]\n    \
    \    [(string=? (string-ref file_name 0) #\\.) (is_valid_file_name_helper (substring\
    \ file_name 1))]\n        [else (is_valid_file_name_helper (substring file_name\
    \ 1))]))\n    (is_valid_file_name_helper file_name))\n  (define (is_valid_file_name_helper\
    \ file_name)\n    (cond\n      [(string-empty? file_name) #t]\n      [(string=?\
    \ (string-ref file_name 0) #\\.) #f]\n      [(string=? (string-ref file_name 0)\
    \ #\\.) (is_valid_file_", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\" file_name)\n          (member (substring file_name (regexp-match-end\
    \ 0)) '(\"txt\" \"exe\" \"dll\")))\n     \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (define (is_valid_extension? extension)\n    (cond\n      [(equal? extension\
    \ \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match #rx\"^[a-zA-Z]\" name)\n         (not\
    \ (> (regexp-match #rx\"[0-9]\" name) 3))))\n  (define (is_valid_file_name? file_name)\n\
    \    (define (split_file_name file_name)\n      (regexp-match #rx\"^([a-zA-Z0-9]+)\\\
    .([a-zA-Z0-9]+)$\" file_name))\n  (let* ([split (split_file_name file_name)]\n\
    \         [name (vector-ref split 1)]\n         [extension (vector-ref split 2)])\n\
    \    (and (is_valid_name? name)\n         (is_valid_extension? extension))))\n\
    \  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (is_valid_extension? extension)\n    (cond\n      [(equal? extension\
    \ \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (cond\n\
    \      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\" file_name) #t]\n      [else #f]))\n  (define\
    \ (is_valid_file_name_with_extension? file_name)\n    (let* ([file_name_parts\
    \ (string-split file_name #\\.)]\n           [name (first file_name_parts)]\n\
    \           [extension (second file_name_parts)])\n      (and (is_valid_file_name?\
    \ file_name)\n           (is_valid_name? name)\n           (is_valid_extension?\
    \ extension))))\n  (cond\n    [(is_valid_file_name_with_extension? file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond [(string=? extension \"txt\") #t]\n          [(string=?\
    \ extension \"exe\") #t]\n          [(string=? extension \"dll\") #t]\n      \
    \    [else #f]))\n  (define (is_valid_name? name)\n    (cond [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n          [else #f]))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([parts (string-split file_name #\\.)]\n           [name\
    \ (first parts)]\n           [extension (second parts)])\n      (and (is_valid_name?\
    \ name)\n           (is_valid_extension? extension))))\n  (cond [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (valid-extension? extension)\n    (or\
    \ (equal? extension \"txt\")\n        (equal? extension \"exe\")\n        (equal?\
    \ extension \"dll\")))\n  (define (valid-name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"[a-zA-Z]\" name)))\n  (define (valid-digits? digits)\n\
    \    (and (not (empty? digits))\n         (not (> (string-length digits) 3))\n\
    \         (regexp-match? #rx\"[0-9]\" digits)))\n  (define (valid-file-name? file-name)\n\
    \    (define (split-file-name file-name)\n      (regexp-match #rx\"^([a-zA-Z0-9]+)(\\\
    \\.[a-zA-Z0-9]+)$\" file-name))\n    (define (valid-file-name-parts? file-name-parts)\n\
    \      (and (valid-name? (vector-ref file-name-parts 1))\n           (valid-extension?\
    \ (vector-ref file-name-parts 2))\n           (valid-digits? (vector-ref file-name-parts\
    \ 3))))\n    (valid-file-name-parts? (split-file-name file-name)))\n  (if (valid-file-name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\" file_name)\n           (regexp-match #rx\"\\\\.txt$\" file_name)\n\
    \           (regexp-match #rx\"\\\\.exe$\" file_name)\n           (regexp-match\
    \ #rx\"\\\\.dll$\" file_name))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n \
    \   [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name? name)\n      (and\
    \ (not (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  \
    \  (define (is_valid_digits? digits)\n      (and (not (empty? digits))\n     \
    \      (<= (string-length digits) 3)))\n    (define (is_valid_file_name_parts?\
    \ name digits extension)\n      (and (is_valid_name? name)\n           (is_valid_digits?\
    \ digits)\n           (is_valid_extension? extension)))\n    (define (split_file_name\
    \ file_name)\n      (define (split_file_name_helper file_name name digits extension)\n\
    \        (cond [(empty? file_name) (values name digits extension)]\n         \
    \     [(regexp-match? #rx\"^[a-zA-Z]\" file_name)\n               (split_file_name_helper\
    \ (rest file_name)\n                                       (string-append name\
    \ (string (first file_name)))\n                                       digits\n\
    \                                       extension)]\n              [(regexp-match?\
    \ #rx\"^[0-9]\" file_name)\n               (split_file_name_helper (rest file_name)\n\
    \                                       name\n                               \
    \        (string-append digits (string (first file_name)))\n                 \
    \                      extension)]\n              [(regexp-match? #rx\"^\\.\"\
    \ file_name)\n               (split_file_name_helper (rest file_name)\n      \
    \                                 name\n                                     \
    \  digits\n                                       \"\")]\n              [else\n\
    \               (split_file_name_helper (rest file_name)\n                   \
    \                    name\n                                       digits\n   \
    \                                    (string-append extension (string (first file_name))))]))\n\
    \      (split_file_name_helper file_name \"\" \"\" \"\"))\n    (define (is_valid_file_name_helper\
    \ file_name)\n      (define (is_valid_", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([digits (regexp-match\
    \ #rx\"[0-9]\" file_name)]\n        [dot (regexp-match #rx\"\\.\" file_name)]\n\
    \        [before-dot (substring file_name 0 (car dot))]\n        [after-dot (substring\
    \ file_name (+ (car dot) 1) (string-length file_name))])\n    (cond [(> (length\
    \ digits) 3) \"No\"]\n          [(= (length dot) 0) \"No\"]\n          [(= (length\
    \ dot) 1)\n           (cond [(or (string=? after-dot \"txt\")\n              \
    \        (string=? after-dot \"exe\")\n                      (string=? after-dot\
    \ \"dll\"))\n                  (cond [(or (string=? (substring before-dot 0 1)\
    \ \"a\")\n                             (string=? (substring before-dot 0 1) \"\
    b\")\n                             (string=? (substring before-dot 0 1) \"c\"\
    )\n                             (string=? (substring before-dot 0 1) \"d\")\n\
    \                             (string=? (substring before-dot 0 1) \"e\")\n  \
    \                           (string=? (substring before-dot 0 1) \"f\")\n    \
    \                         (string=? (substring before-dot 0 1) \"g\")\n      \
    \                       (string=? (substring before-dot 0 1) \"h\")\n        \
    \                     (string=? (substring before-dot 0 1) \"i\")\n          \
    \                   (string=? (substring before-dot 0 1) \"j\")\n            \
    \                 (string=? (substring before-dot 0 1) \"k\")\n              \
    \               (string=? (substring before-dot 0 1) \"l\")\n                \
    \             (string=? (substring before-dot 0 1) \"m\")\n                  \
    \           (string=? (substring before-dot 0 1) \"n\")\n                    \
    \         (string=? (substring before-dot 0 1) \"o\")\n                      \
    \       (string=? (substring before-dot 0 1) \"p\")\n                        \
    \     (string=? (substring before-dot 0 1) \"q\")\n                          \
    \   (string=? (substring before-dot 0 1) \"r\")", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (count-digits str)\n    (if (empty? str)\n        0\n        (if (char-numeric?\
    \ (first str))\n            (+ 1 (count-digits (rest str)))\n            (count-digits\
    \ (rest str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n\
    \        (if (char=? (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n\
    \            (count-dots (rest str)))))\n  (define (is-valid-extension str)\n\
    \    (cond [(string=? str \"txt\") #t]\n          [(string=? str \"exe\") #t]\n\
    \          [(string=? str \"dll\") #t]\n          [else #f]))\n  (define (is-valid-prefix\
    \ str)\n    (and (not (empty? str))\n         (or (char-alphabetic? (first str))\n\
    \             (char-alphabetic? (first str)))))\n  (define (split-file-name str)\n\
    \    (define (split-helper str acc)\n      (if (empty? str)\n          acc\n \
    \         (if (char=? (first str) #\\.)\n              (split-helper (rest str)\
    \ (cons (list (reverse acc) (list)) acc))\n              (split-helper (rest str)\
    \ (cons (first str) acc)))))\n    (split-helper str (list)))\n  (define (get-extension\
    \ str)\n    (if (empty? str)\n        \"\"\n        (if (char=? (first str) #\\\
    .)\n            (rest str)\n            (get-extension (rest str)))))\n  (define\
    \ (get-prefix str)\n    (if (empty? str)\n        \"\"\n        (if (char=? (first\
    \ str) #\\.)\n            (reverse (rest str))\n            (get-prefix (rest\
    \ str)))))\n  (cond [(or (> (count-digits file_name) 3)\n             (> (count-dots\
    \ file_name) 1)\n             (not (is-valid-extension (get-extension file_name)))\n\
    \             (not (", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (if (and (regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n           (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name)\n           (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]\\\\w*\\\\.\\\\w{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (is_valid_extension? ext)\n    (or (equal? ext \"txt\")\n        (equal?\
    \ ext \"exe\")\n        (equal? ext \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n\
    \      (define (count-digits-iter file_name acc)\n        (cond\n          [(empty?\
    \ file_name) acc]\n          [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ acc 1))]\n          [else (count-digits-iter (rest file_name)\
    \ acc)]))\n      (count-digits-iter file_name 0))\n    (define (count-dots file_name)\n\
    \      (define (count-dots-iter file_name acc)\n        (cond\n          [(empty?\
    \ file_name) acc]\n          [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ acc 1))]\n          [else (count-dots-iter (rest file_name)\
    \ acc)]))\n      (count-dots-iter file_name 0))\n    (define (split-file-name\
    \ file_name)\n      (define (split-file-name-iter file_name acc)\n        (cond\n\
    \          [(empty? file_name) (reverse acc)]\n          [(char=? (first file_name)\
    \ #\\.) (split-file-name-iter (rest file_name) (cons (list (reverse acc) (list))\
    \ acc))]\n          [else (split-file-name-iter (rest file_name) (cons (cons (first\
    \ file_name) (first acc)) (rest acc)))]))\n      (split-file-name-iter file_name\
    \ (list (list))))\n    (define (is_valid_file_name-iter file_name)\n      (cond\n\
    \        [(empty? file_name) #t]\n       ", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n        [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (equal? extension \"txt\")\n        (equal? extension \"\
    exe\")\n        (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match #rx\"^[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ([parts (string-split file_name\
    \ #rx\"\\.\")])\n      (and (= (length parts) 2)\n           (is_valid_name? (first\
    \ parts))\n           (is_valid_extension? (second parts)))))\n  (define (is_valid_digits?\
    \ digits)\n    (and (not (empty? digits))\n         (not (> (length digits) 3))\n\
    \         (regexp-match #rx\"^[0-9]+$\" digits)))\n  (define (is_valid_file_name_with_digits?\
    \ file_name)\n    (let ([parts (string-split file_name #rx\"\\.\")])\n      (and\
    \ (= (length parts) 3)\n           (is_valid_name? (first parts))\n          \
    \ (is_valid_digits? (second parts))\n           (is_valid_extension? (third parts)))))\n\
    \  (cond [(is_valid_file_name? file_name) \"Yes\"]\n        [(is_valid_file_name_with_digits?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_valid_extension? ext)\n    (or (equal? ext \"txt\"\
    )\n        (equal? ext \"exe\")\n        (equal? ext \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (char-alphabetic? (string-ref\
    \ name 0))\n         (not (string-contains name #\\_))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits str)\n      (define (count-digits-iter\
    \ str count)\n        (cond ((empty? str) count)\n              ((char-numeric?\
    \ (first str))\n               (count-digits-iter (rest str) (+ count 1)))\n \
    \             (else (count-digits-iter (rest str) count))))\n      (count-digits-iter\
    \ str 0))\n    (define (split-file-name str)\n      (define (split-file-name-iter\
    \ str)\n        (cond ((empty? str) '())\n              ((char=? (first str) #\\\
    .)\n               (cons (string-reverse (rest str))\n                     (string-reverse\
    \ (rest (rest str)))))\n              (else (split-file-name-iter (rest str)))))\n\
    \      (split-file-name-iter (string-reverse str)))\n    (define (is_valid_file_name-iter\
    \ file_name)\n      (define (is_valid_file_name-iter-iter file_name)\n       \
    \ (cond ((empty? file_name) #t)\n              ((char-numeric? (first file_name))\n\
    \               (is_valid_file_name-iter-iter (rest file_name)))\n           \
    \   (else #f)))\n      (and (is_valid_file_name-iter-iter file_name)\n       \
    \    (<= (count-digits file_name) 3)))\n    (define (is_valid_file_name-iter-iter\
    \ file_name)\n      (cond ((empty? file_name) #t)\n              ((char-numeric?\
    \ (first file_name))\n               (is_valid_file_name-iter-iter (rest file_name)))",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (valid-extension? ext)\n    (member\
    \ ext '(\"txt\" \"exe\" \"dll\")))\n  (define (valid-prefix? prefix)\n    (and\
    \ (not (empty? prefix))\n         (regexp-match? #rx\"[a-zA-Z]\" prefix)))\n \
    \ (define (valid-digits? digits)\n    (and (not (empty? digits))\n         (not\
    \ (> (string-length digits) 3))\n         (regexp-match? #rx\"[0-9]\" digits)))\n\
    \  (define (valid-file-name? file-name)\n    (let ([parts (string-split file-name\
    \ #rx\"\\.\")])\n      (and (= (length parts) 2)\n           (valid-extension?\
    \ (second parts))\n           (valid-prefix? (first parts)))))\n  (cond [(valid-file-name?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (is_valid_extension? extension)\n    (or (equal? extension \"txt\")\n\
    \        (equal? extension \"exe\")\n        (equal? extension \"dll\")))\n  (define\
    \ (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_digits? digits)\n    (and (not\
    \ (empty? digits))\n         (regexp-match? #rx\"[0-9]\" digits)\n         (not\
    \ (> (string-length digits) 3))))\n  (define (is_valid_dot? dot)\n    (and (not\
    \ (empty? dot))\n         (equal? dot \".\")))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([dot_index (string-index file_name \".\")]\n        \
    \   [name (substring file_name 0 dot_index)]\n           [extension (substring\
    \ file_name (+ dot_index 1))]\n           [digits (substring file_name 0 dot_index)])\n\
    \      (and (is_valid_extension? extension)\n           (is_valid_name? name)\n\
    \           (is_valid_digits? digits)\n           (is_valid_dot? (substring file_name\
    \ dot_index 1)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n   \
    \   \"No\"))", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (equal? extension \"txt\")\n        (equal? extension \"\
    exe\")\n        (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (char-alphabetic? (string-ref name 0))\n\
    \         (not (regexp-match #rx\"[0-9]{4}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([parts (string-split file_name #\\.)])\n      (and (=\
    \ (length parts) 2)\n           (is_valid_name? (first parts))\n           (is_valid_extension?\
    \ (second parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n \
    \     \"No\"))\n", "  (cond\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\" file_name)\n          (member (regexp-match #rx\"\\\\.[a-zA-Z]{3}$\"\
    \ file_name) '(\"txt\" \"exe\" \"dll\")))\n     \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([file_name_parts\
    \ (regexp-split #rx\"\\.\" file_name)])\n    (if (and (= (length file_name_parts)\
    \ 2)\n             (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" (first file_name_parts))\n\
    \             (regexp-match? #rx\"^[0-9]{0,3}$\" (second file_name_parts))\n \
    \            (regexp-match? #rx\"^(txt|exe|dll)$\" (second file_name_parts)))\n\
    \        \"Yes\"\n        \"No\")))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=? extension\
    \ \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else #f]))\n \
    \ (define (is_valid_prefix? prefix)\n    (and (not (string=? prefix \"\"))\n \
    \        (regexp-match? #rx\"^[a-zA-Z]\" prefix)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([parts (string-split file_name #\"\\.\")]\n         \
    \  [prefix (first parts)]\n           [extension (second parts)])\n      (and\
    \ (is_valid_extension? extension)\n           (is_valid_prefix? prefix)\n    \
    \       (not (> (string-length (regexp-replace* #rx\"[^0-9]\" prefix \"\")) 3)))))\n\
    \  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (define (is_valid_char? c)\n      (or (char-alphabetic? c) (char-numeric?\
    \ c)))\n    (define (is_valid_name-helper name)\n      (cond\n        [(empty?\
    \ name) #t]\n        [(is_valid_char? (first name)) (is_valid_name-helper (rest\
    \ name))]\n        [else #f]))\n    (and (is_valid_name-helper name)\n       \
    \  (not (string-contains name #\\.))))\n  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_file_name-helper file_name)\n      (cond\n        [(empty?\
    \ file_name) #t]\n        [(char-numeric? (first file_name)) (is_valid_file_name-helper\
    \ (rest file_name))]\n        [else #f]))\n    (define (count_digits file_name)\n\
    \      (cond\n        [(empty? file_name) 0]\n        [(char-numeric? (first file_name))\
    \ (+ 1 (count_digits (rest file_name)))]\n        [else (count_digits (rest file_name))]))\n\
    \    (define (count_dots file_name)\n      (cond\n        [(empty? file_name)\
    \ 0]\n        [(char=? (first file_name) #\\.) (+ 1 (count_dots (rest file_name)))]\n\
    \        [else (count_dots (rest file_name))]))\n    (and (is_valid_file_name-helper\
    \ file_name)\n         (= (count_digits file_name) 3)\n         (= (count_dots\
    \ file_name) 1)))\n  (define (is_valid_file_name_with_extension? file_name)",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n          (not (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{4,}\\\\.txt$\" file_name)))\n     \"Yes\"]\n    [(and (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n          (not (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{4,}\\\\.exe$\" file_name)))\n     \"Yes\"]\n    [(and (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\n          (not (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{4,}\\\\.dll$\" file_name)))\n     \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \     \"Yes\"]\n    [else \"No\"]))\n", "  (cond [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n        [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(and\
    \ (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\n \
    \         (regexp-match? #rx\"[a-zA-Z]+[0-9]{0,3}\\\\.\" file_name)\n        \
    \  (regexp-match? #rx\"\\\\.[txt|exe|dll]$\" file_name))\n     \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_valid_extension extension)\n    (cond ((equal?\
    \ extension \"txt\") #t)\n          ((equal? extension \"exe\") #t)\n        \
    \  ((equal? extension \"dll\") #t)\n          (else #f)))\n  (define (is_valid_name\
    \ name)\n    (define (is_valid_char c)\n      (cond ((char-alphabetic? c) #t)\n\
    \            ((char-numeric? c) #t)\n            (else #f)))\n    (define (is_valid_name_helper\
    \ name)\n      (cond ((null? name) #t)\n            ((is_valid_char (car name))\
    \ (is_valid_name_helper (cdr name)))\n            (else #f)))\n    (define (is_valid_name_helper2\
    \ name)\n      (cond ((null? name) #t)\n            ((char-numeric? (car name))\
    \ (is_valid_name_helper2 (cdr name)))\n            (else #f)))\n    (define (is_valid_name_helper3\
    \ name)\n      (cond ((null? name) #t)\n            ((char-alphabetic? (car name))\
    \ (is_valid_name_helper3 (cdr name)))\n            (else #f)))\n    (and (is_valid_name_helper\
    \ name)\n         (is_valid_name_helper2 (cdr name))\n         (is_valid_name_helper3\
    \ (cdr name))))\n  (define (is_valid_file_name file_name)\n    (define (is_valid_file_name_helper\
    \ file_name)\n      (cond ((null? file_name) #f)\n            ((equal? (car file_name)\
    \ #\\.) #t)\n            (else (is_valid_file_name_helper (cdr file_name)))))\n\
    \    (define (is_valid_file_name_helper2 file_name)\n      (cond ((null? file_name)\
    \ #f)\n            ((equal? (car file_name) #\\.) #t)\n            (else (is_valid_file_name_helper2\
    \ (cdr file_name", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]+$\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n    \
    \  (length (regexp-match-all #rx\"[0-9]\" file_name)))\n    (define (count-dots\
    \ file_name)\n      (length (regexp-match-all #rx\"\\.\" file_name)))\n    (define\
    \ (split-file-name file_name)\n      (regexp-match #rx\"^([a-zA-Z]+)([0-9]*)\\\
    .([a-zA-Z]+)$\" file_name))\n    (define (get-name file_name)\n      (vector-ref\
    \ (split-file-name file_name) 1))\n    (define (get-digits file_name)\n      (vector-ref\
    \ (split-file-name file_name) 2))\n    (define (get-extension file_name)\n   \
    \   (vector-ref (split-file-name file_name) 3))\n    (and (not (empty? file_name))\n\
    \         (= (count-dots file_name) 1)\n         (<= (count-digits file_name)\
    \ 3)\n         (is_valid_name? (get-name file_name))\n         (is_valid_extension?\
    \ (get-extension file_name))))\n  (if (is_valid_file_name? file_name)\n      \"\
    Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (define (is_valid_name_char? c)\n      (or (char-alphabetic?\
    \ c)\n          (char-numeric? c)))\n    (define (is_valid_name_string? s)\n \
    \     (and (not (empty? s))\n           (is_valid_name_char? (first s))\n    \
    \       (is_valid_name_string? (rest s))))\n    (is_valid_name_string? name))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_string?\
    \ s)\n      (and (not (empty? s))\n           (is_valid_name_char? (first s))\n\
    \           (is_valid_file_name_string? (rest s))))\n    (define (is_valid_file_name_string_with_dot?\
    \ s)\n      (and (not (empty? s))\n           (is_valid_name_char? (first s))\n\
    \           (is_valid_file_name_string_with_dot? (rest s))))\n    (define (is_valid_file_name_string_with_dot_and_extension?\
    \ s)\n      (and (not (empty? s))\n           (is_valid_name_char? (first s))\n\
    \           (is_valid_file_name_string_with_dot_and_extension? (rest s))))\n \
    \   (define (is_valid_file_name_string_with_dot_and_extension_and_digits? s)\n\
    \      (and (not (empty? s))\n           (is_valid_name_char? (first s))\n   \
    \        (is_valid_file_name_string_with_dot_and_extension_and_digits? (rest s))))\n\
    \    (define (is_valid_file_name_string_with_dot_and", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (char-alphabetic?\
    \ (string-ref name 0))\n         (not (string-contains name #\\_))))\n  (define\
    \ (is_valid_extension? extension)\n    (and (not (empty? extension))\n       \
    \  (member extension '(\"txt\" \"exe\" \"dll\"))))\n  (define (is_valid_number?\
    \ number)\n    (and (not (empty? number))\n         (string-contains number #\\\
    .)\n         (string-contains number #\\_)))\n  (define (is_valid_file_name? file_name)\n\
    \    (let* ([name (substring file_name 0 (string-index file_name #\\.))]\n   \
    \        [extension (substring file_name (+ 1 (string-index file_name #\\.)))]\n\
    \           [number (substring file_name (string-index file_name #\\_) (string-index\
    \ file_name #\\.))])\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension)\n           (is_valid_number? number))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\"\
    \ file_name)\n          (member (substring file_name (+ (regexp-match-end 0) 1)\
    \ (+ (regexp-match-end 0) 4)) '(\"txt\" \"exe\" \"dll\")))\n     \"Yes\"]\n  \
    \  [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[txt|exe|dll]$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (check_extension extension)\n    (cond\
    \ ((string=? extension \"txt\") #t)\n          ((string=? extension \"exe\") #t)\n\
    \          ((string=? extension \"dll\") #t)\n          (else #f)))\n  (define\
    \ (check_name name)\n    (cond ((string-empty? name) #f)\n          ((not (char-alphabetic?\
    \ (string-ref name 0))) #f)\n          ((not (string-contains name #\\.)) #f)\n\
    \          ((> (string-count name #\\.) 1) #f)\n          ((> (string-count name\
    \ #\\0) 3) #f)\n          ((> (string-count name #\\1) 3) #f)\n          ((> (string-count\
    \ name #\\2) 3) #f)\n          ((> (string-count name #\\3) 3) #f)\n         \
    \ ((> (string-count name #\\4) 3) #f)\n          ((> (string-count name #\\5)\
    \ 3) #f)\n          ((> (string-count name #\\6) 3) #f)\n          ((> (string-count\
    \ name #\\7) 3) #f)\n          ((> (string-count name #\\8) 3) #f)\n         \
    \ ((> (string-count name #\\9) 3) #f)\n          (else #t)))\n  (define (get_extension\
    \ file_name)\n    (define (get_extension_helper file_name extension)\n      (cond\
    \ ((string-empty? file_name) extension)\n            ((char=? (string-ref file_name\
    \ 0) #\\.) extension)\n            (else (get_extension_helper (substring file_name\
    \ 1) (string-append extension (string (string-ref file_name 0)))))))\n    (get_extension_helper\
    \ file_name \"\"))\n  (define (get_name file_name)\n    (define (get_name_helper\
    \ file_name name)\n      (cond ((string-empty? file_name) name)\n            ((char=?\
    \ (string-ref file_name 0) #\\.) name)\n            (else (get_name", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=? extension\
    \ \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else #f]))\n \
    \ (define (is_valid_name? name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\"\
    \ name) #t]\n      [else #f]))\n  (define (is_valid_file_name? file_name)\n  \
    \  (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name)\
    \ #t]\n      [else #f]))\n  (define (get_extension file_name)\n    (string-split\
    \ file_name #rx\"\\.\"))\n  (define (get_name file_name)\n    (string-split file_name\
    \ #rx\"\\.\"))\n  (cond\n    [(is_valid_file_name? file_name)\n     (let ([name\
    \ (first (get_name file_name))]\n           [extension (second (get_extension\
    \ file_name))])\n       (cond\n         [(and (is_valid_name? name) (is_valid_extension?\
    \ extension)) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"]))\n", " \
    \ (define (is_valid_extension? extension)\n    (member extension '(\"txt\" \"\
    exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([name (regexp-match #rx\"([a-zA-Z]+)([0-9]{0,3})\" file_name)])\n\
    \      (and (not (empty? name))\n           (is_valid_name? (first name))\n  \
    \         (is_valid_extension? (second name)))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n           (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n           (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension? extension)\n\
    \    (or (equal? extension \"txt\")\n        (equal? extension \"exe\")\n    \
    \    (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)\n         (not\
    \ (regexp-match? #rx\"[0-9]{4}\" name))))\n  (define (is_valid_file_name? file_name)\n\
    \    (and (regexp-match? #rx\"^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\" file_name)\n   \
    \      (is_valid_name? (regexp-replace* #rx\"\\.[a-zA-Z0-9]+$\" file_name \"\"\
    ))\n         (is_valid_extension? (regexp-replace* #rx\"^[a-zA-Z0-9]+\\.\" file_name\
    \ \"\"))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond [(string=? extension \"txt\") #t]\n          [(string=? extension \"\
    exe\") #t]\n          [(string=? extension \"dll\") #t]\n          [else #f]))\n\
    \  (define (is_valid_name? name)\n    (cond [(regexp-match #rx\"^[a-zA-Z]+$\"\
    \ name) #t]\n          [else #f]))\n  (define (is_valid_file_name? file_name)\n\
    \    (cond [(regexp-match #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\" file_name) #t]\n  \
    \        [else #f]))\n  (define (is_valid_number_of_digits? file_name)\n    (cond\
    \ [(regexp-match #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\" file_name) #t]\n          [else\
    \ #f]))\n  (define (is_valid_number_of_digits? file_name)\n    (cond [(regexp-match\
    \ #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\" file_name) #t]\n          [else #f]))\n  (define\
    \ (is_valid_number_of_digits? file_name)\n    (cond [(regexp-match #rx\"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\" file_name) #t]\n          [else #f]))\n  (define (is_valid_number_of_digits?\
    \ file_name)\n    (cond [(regexp-match #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\" file_name)\
    \ #t]\n          [else #f]))\n  (define (is_valid_number_of_digits? file_name)\n\
    \    (cond [(regexp-match #rx\"^[a-zA-Z]+\\\\.[a-zA-Z]+$\" file_name) #t]\n  \
    \       ", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\" file_name) #\"Yes\"]\n    [else #\"No\"]))\n", "  (cond\n  \
    \  [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\"\
    \ file_name)\n          (member (substring file_name (add1 (string-index file_name\
    \ #\\.)) (string-length file_name)) '(\"txt\" \"exe\" \"dll\")))\n     \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]{3}$\" file_name)\n          (member (substring file_name (add1 (string-index\
    \ file_name #\\.)) (string-length file_name)) '(\"txt\" \"exe\" \"dll\")))\n \
    \    \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (define (is_valid_extension? extension)\n    (or (equal? extension \"txt\")\n\
    \        (equal? extension \"exe\")\n        (equal? extension \"dll\")))\n  (define\
    \ (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match\
    \ #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name? file_name)\n    (let\
    \ ([parts (string-split file_name #\"\\.\")])\n      (and (= (length parts) 2)\n\
    \           (is_valid_name? (first parts))\n           (is_valid_extension? (second\
    \ parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is_valid_substring? s)\n    (and (not (empty? s))\n       \
    \  (char-alphabetic? (string-ref s 0))\n         (regexp-match #rx\"^[a-zA-Z]+$\"\
    \ s)))\n  (define (is_valid_extension? s)\n    (member s '(\"txt\" \"exe\" \"\
    dll\")))\n  (define (is_valid_file_name? s)\n    (let ([parts (string-split s\
    \ #\\.)])\n      (and (= (length parts) 2)\n           (is_valid_substring? (first\
    \ parts))\n           (is_valid_extension? (second parts))\n           (not (regexp-match\
    \ #rx\"^[0-9]{4,}$\" s)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (check-extension file_name)\n    (cond\n     \
    \ [(string=? (substring file_name (add1 (string-length file_name)) (string-length\
    \ file_name)) \"txt\") #t]\n      [(string=? (substring file_name (add1 (string-length\
    \ file_name)) (string-length file_name)) \"exe\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-length file_name)) (string-length file_name)) \"dll\"\
    ) #t]\n      [else #f]))\n  (define (check-name file_name)\n    (cond\n      [(string=?\
    \ (substring file_name 0 1) \"a\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"b\") #t]\n      [(string=? (substring file_name 0 1) \"c\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"d\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"e\") #t]\n      [(string=? (substring file_name 0 1) \"f\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"g\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"h\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"i\") #t]\n      [(string=? (substring file_name 0 1) \"j\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"k\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"l\") #t]\n      [(string=? (substring file_name 0 1) \"m\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"n\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"o\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"p\") #t]\n      [(string=? (substring file_name 0 1) \"q\") #t]\n   \
    \   [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name)\n          (equal? (regexp-match #rx\"\\\\.\" file_name) 1))\n\
    \     \"Yes\"]\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (equal? (regexp-match #rx\"\\\\.\" file_name) 1))\n  \
    \   \"Yes\"]\n    [(and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\n\
    \          (equal? (regexp-match #rx\"\\\\.\" file_name) 1))\n     \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond [(string=? ext \"txt\") #t]\n          [(string=? ext \"exe\"\
    ) #t]\n          [(string=? ext \"dll\") #t]\n          [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (cond [(string-empty? name) #f]\n          [(not\
    \ (char-alphabetic? (string-ref name 0))) #f]\n          [(string-contains name\
    \ #\\.) #f]\n          [(string-contains name #\\0) #f]\n          [(string-contains\
    \ name #\\1) #f]\n          [(string-contains name #\\2) #f]\n          [(string-contains\
    \ name #\\3) #f]\n          [(string-contains name #\\4) #f]\n          [(string-contains\
    \ name #\\5) #f]\n          [(string-contains name #\\6) #f]\n          [(string-contains\
    \ name #\\7) #f]\n          [(string-contains name #\\8) #f]\n          [(string-contains\
    \ name #\\9) #f]\n          [else #t]))\n  (define (is_valid_file_name? file_name)\n\
    \    (let* ([name (substring file_name 0 (string-index file_name #\\.))]\n   \
    \        [ext (substring file_name (+ 1 (string-index file_name #\\.)))])\n  \
    \    (and (is_valid_name? name) (is_valid_extension? ext))))\n  (cond [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name)\n          (not (regexp-match #rx\"[0-9]{4}\" file_name)))\n    \
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension ext)\n    (cond\n\
    \      [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=?\
    \ ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name name)\n    (define\
    \ (count_digits str)\n      (cond\n        [(string=? str \"\") 0]\n        [(char-numeric?\
    \ (string-ref str 0)) (+ 1 (count_digits (substring str 1)))]\n        [else (count_digits\
    \ (substring str 1))]))\n    (cond\n      [(> (count_digits name) 3) #f]\n   \
    \   [(string-empty? name) #f]\n      [(char-numeric? (string-ref name 0)) #f]\n\
    \      [else #t]))\n  (cond\n    [(string-empty? file_name) \"No\"]\n    [(string-count\
    \ file_name #\\.) 0]\n    [(string-count file_name #\\.) 2]\n    [(is_valid_extension\
    \ (substring file_name (+ 1 (string-index file_name #\\.))))\n     (is_valid_name\
    \ (substring file_name 0 (string-index file_name #\\.)))]\n    [else #f]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (or (equal? ext \"txt\")\n        (equal? ext \"exe\")\n        (equal?\
    \ ext \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (or (char-alphabetic? (string-ref name 0))\n             (char-numeric?\
    \ (string-ref name 0)))))\n  (define (is_valid_file_name? file_name)\n    (define\
    \ (count-digits file_name)\n      (define (count-digits-helper file_name acc)\n\
    \        (if (empty? file_name)\n            acc\n            (if (char-numeric?\
    \ (string-ref file_name 0))\n                (count-digits-helper (substring file_name\
    \ 1) (+ acc 1))\n                (count-digits-helper (substring file_name 1)\
    \ acc))))\n      (count-digits-helper file_name 0))\n    (define (count-dots file_name)\n\
    \      (define (count-dots-helper file_name acc)\n        (if (empty? file_name)\n\
    \            acc\n            (if (char=? (string-ref file_name 0) #\\.)\n   \
    \             (count-dots-helper (substring file_name 1) (+ acc 1))\n        \
    \        (count-dots-helper (substring file_name 1) acc))))\n      (count-dots-helper\
    \ file_name 0))\n    (define (split-file-name file_name)\n      (define (split-file-name-helper\
    \ file_name acc)\n        (if (empty? file_name)\n            acc\n          \
    \  (if (char=? (string-ref file_name 0) #\\.)\n                (split-file-name-helper\
    \ (substring file_name 1) (cons (substring file_name 1) acc))\n              \
    \  (split-file-name-helper (substring file_name 1) acc))))\n      (split-file-name-helper\
    \ file_name '()))\n    (and (equal? (count-digits file_name) 3)", "  (cond\n \
    \   [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (check-extension file_name)\n    (cond\n\
    \      ((string=? (substring file_name (add1 (string-index file_name #\\.)) (string-length\
    \ file_name)) \"txt\") #t)\n      ((string=? (substring file_name (add1 (string-index\
    \ file_name #\\.)) (string-length file_name)) \"exe\") #t)\n      ((string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    dll\") #t)\n      (else #f)))\n  (define (check-digits file_name)\n    (let loop\
    \ ([i 0] [count 0])\n      (cond\n        [(= i (string-length file_name))\n \
    \        (if (= count 3) #f #t)]\n        [(char-numeric? (string-ref file_name\
    \ i))\n         (loop (add1 i) (add1 count))]\n        [else\n         (loop (add1\
    \ i) count)])))\n  (cond\n    [(not (char-alphabetic? (string-ref file_name 0)))\
    \ #f]\n    [(not (= (count (string-index file_name #\\.) file_name) 1)) #f]\n\
    \    [(check-digits file_name) #f]\n    [(check-extension file_name) #t]\n   \
    \ [else #f]))\n", "  (define (is_valid_file_name? file_name)\n    (define (valid_extension?\
    \ file_name)\n      (cond ((string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"txt\") #t)\n            ((string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"exe\") #t)\n            ((string=? (substring file_name (-\
    \ (string-length file_name) 3)) \"dll\") #t)\n            (else #f)))\n    (define\
    \ (valid_name? file_name)\n      (define (valid_name_char? c)\n        (or (char-alphabetic?\
    \ c) (char-numeric? c)))\n      (define (valid_name_chars? file_name)\n      \
    \  (cond ((null? file_name) #t)\n              ((valid_name_char? (car file_name))\
    \ (valid_name_chars? (cdr file_name)))\n              (else #f)))\n      (and\
    \ (valid_name_chars? (string->list file_name))\n           (char-alphabetic? (string-ref\
    \ file_name 0))))\n    (define (valid_digits? file_name)\n      (define (valid_digit?\
    \ c)\n        (char-numeric? c))\n      (define (valid_digits_count? file_name)\n\
    \        (cond ((null? file_name) 0)\n              ((valid_digit? (car file_name))\
    \ (+ 1 (valid_digits_count? (cdr file_name))))\n              (else (valid_digits_count?\
    \ (cdr file_name)))))\n      (<= (valid_digits_count? file_name) 3))\n    (define\
    \ (valid_dot? file_name)\n      (string-contains file_name #\\.))\n    (and (valid_extension?\
    \ file_name)\n         (valid_name? (substring file_name 0 (string-index file_name\
    \ #\\.)))\n         (valid_dot? file_name)\n         (valid_digits? file_name)))\n\
    \  (cond ((is_valid_file_name? file", "  (cond\n    [(and (regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name)\n          (member (regexp-match\
    \ #rx\"\\\\.[a-zA-Z]{3}$\" file_name) '(\"txt\" \"exe\" \"dll\")))\n     \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (is_valid_extension? ext)\n    (cond\n \
    \     [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=?\
    \ ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (cond\n\
    \      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\" name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name? file_name)\n    (let* ([parts (string-split file_name\
    \ #\\.)]\n           [name (first parts)]\n           [ext (second parts)])\n\
    \      (and (is_valid_name? name)\n           (is_valid_extension? ext))))\n \
    \ (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (or (equal? extension \"txt\")\n        (equal? extension \"exe\")\n       \
    \ (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_number?\
    \ number)\n    (and (not (empty? number))\n         (not (> (string-length number)\
    \ 3))\n         (regexp-match #rx\"^[0-9]+$\" number)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (split_file_name file_name)\n      (string-split file_name\
    \ #rx\"\\.\"))\n    (define (split_file_name_to_name_and_extension file_name)\n\
    \      (define (split_name_and_extension file_name)\n        (string-split file_name\
    \ #rx\"\\.\"))\n      (define (split_name_and_number name)\n        (string-split\
    \ name #rx\"\\d+\"))\n      (define (split_number_and_extension extension)\n \
    \       (string-split extension #rx\"\\D+\"))\n      (define (split_name_and_extension_to_name_and_number\
    \ name_and_extension)\n        (define (split_name_and_number name_and_extension)\n\
    \          (string-split name_and_extension #rx\"\\d+\"))\n        (define (split_number_and_extension\
    \ name_and_extension)\n          (string-split name_and_extension #rx\"\\D+\"\
    ))\n        (define (split_name_and_number_to_name_and_number name_and_number)\n\
    \          (define (split_name_and_number name_and_number)\n            (string-split\
    \ name_and_number #rx\"\\d+\"))\n          (define (split_number_and_number name_and_number)\n\
    \            (string-split name_and_number #rx\"\\D+\"))\n          (", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (valid-extension? file_name)\n    (cond ((string=?\
    \ (substring file_name (string-length file_name) -3) \"txt\") #t)\n          ((string=?\
    \ (substring file_name (string-length file_name) -3) \"exe\") #t)\n          ((string=?\
    \ (substring file_name (string-length file_name) -3) \"dll\") #t)\n          (else\
    \ #f)))\n  (define (valid-name? file_name)\n    (define (valid-name-helper file_name)\n\
    \      (cond ((string=? file_name \"\") #t)\n            ((and (char-alphabetic?\
    \ (string-ref file_name 0))\n                  (valid-name-helper (substring file_name\
    \ 1 (string-length file_name)))) #t)\n            (else #f)))\n    (and (valid-name-helper\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (valid-name-helper\
    \ (substring file_name (string-index file_name #\\.) (string-length file_name)))))\n\
    \  (define (valid-digits? file_name)\n    (define (valid-digits-helper file_name)\n\
    \      (cond ((string=? file_name \"\") #t)\n            ((and (char-numeric?\
    \ (string-ref file_name 0))\n                  (valid-digits-helper (substring\
    \ file_name 1 (string-length file_name)))) #t)\n            (else #f)))\n    (and\
    \ (valid-digits-helper (substring file_name 0 (string-index file_name #\\.)))\n\
    \         (valid-digits-helper (substring file_name (string-index file_name #\\\
    .) (string-length file_name)))))\n  (cond ((and (valid-extension? file_name)\n\
    \              (valid-name? file_name)\n              (valid-digits? file_name))\
    \ \"Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (check_extension extension)\n    (cond\n      [(equal? extension \"txt\"\
    ) #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension \"dll\"\
    ) #t]\n      [else #f]))\n  (define (check_name name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+$\" name) #t]\n      [else #f]))\n  (define (check_digits digits)\n\
    \    (cond\n      [(> (string-length digits) 3) #f]\n      [else #t]))\n  (define\
    \ (check_file_name file_name)\n    (cond\n      [(equal? (string-length (regexp-split\
    \ #rx\"\\.\" file_name)) 2) #t]\n      [else #f]))\n  (cond\n    [(check_file_name\
    \ file_name)\n     (let ([name (first (regexp-split #rx\"\\.\" file_name))]\n\
    \           [extension (second (regexp-split #rx\"\\.\" file_name))])\n      \
    \ (cond\n         [(and (check_name name) (check_extension extension)) #t]\n \
    \        [else #f]))]\n    [else #f]))", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    \ name) #t]\n      [else #f]))\n  (define (is_valid_file_name? file_name)\n  \
    \  (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \ file_name) #t]\n      [else #f]))\n  (define (is_valid_file_name_with_extension?\
    \ file_name)\n    (define (get_extension file_name)\n      (string-split file_name\
    \ #\\.)\n      (list-ref (string-split file_name #\\.) 1))\n    (define (get_name\
    \ file_name)\n      (string-split file_name #\\.)\n      (list-ref (string-split\
    \ file_name #\\.) 0))\n    (cond\n      [(and (is_valid_file_name? file_name)\n\
    \            (is_valid_name? (get_name file_name))\n            (is_valid_extension?\
    \ (get_extension file_name))) #t]\n      [else #f]))\n  (cond\n    [(is_valid_file_name_with_extension?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (check_extension ext)\n    (cond\n      [(equal? ext \"txt\") 'Yes]\n\
    \      [(equal? ext \"exe\") 'Yes]\n      [(equal? ext \"dll\") 'Yes]\n      [else\
    \ 'No]))\n  (define (check_name name)\n    (cond\n      [(empty? name) 'No]\n\
    \      [(and (char-alphabetic? (string-ref name 0))\n            (not (regexp-match\
    \ #rx\"[0-9]{4}\" name))) 'Yes]\n      [else 'No]))\n  (define (check_dot dot)\n\
    \    (cond\n      [(equal? dot \".\") 'Yes]\n      [else 'No]))\n  (define (check_digits\
    \ digits)\n    (cond\n      [(equal? (string-length digits) 3) 'Yes]\n      [else\
    \ 'No]))\n  (define (split_file_name file_name)\n    (define (split_file_name_helper\
    \ file_name digits_count dot_count)\n      (cond\n        [(empty? file_name)\
    \ (list (string digits_count) (string dot_count))]\n        [(char-numeric? (string-ref\
    \ file_name 0))\n         (split_file_name_helper (substring file_name 1) (+ digits_count\
    \ 1) dot_count)]\n        [(char-alphabetic? (string-ref file_name 0))\n     \
    \    (split_file_name_helper (substring file_name 1) digits_count dot_count)]\n\
    \        [(equal? (string-ref file_name 0) #\\. )\n         (split_file_name_helper\
    \ (substring file_name 1) digits_count (+ dot_count 1))]\n        [else (split_file_name_helper\
    \ (substring file_name 1) digits_count dot_count)]))\n    (split_file_name_helper\
    \ file_name 0 0))\n  (define (split_file_name_2 file_name)\n    (define (split_file_name_helper\
    \ file_name digits_count dot_count)\n      (cond\n        [(empty? file_name)\
    \ (list (string digits_count) (", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    \ file_name)\n           (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.\" file_name)\n\
    \           (regexp-match #rx\"\\\\.[txt|exe|dll]$\" file_name))\n      \"Yes\"\
    \n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n        [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond [(string=? extension \"txt\") #t]\n          [(string=?\
    \ extension \"exe\") #t]\n          [(string=? extension \"dll\") #t]\n      \
    \    [else #f]))\n  (define (is_valid_name? name)\n    (define (is_valid_char?\
    \ char)\n      (cond [(char-alphabetic? char) #t]\n            [(char-numeric?\
    \ char) #t]\n            [else #f]))\n    (define (is_valid_name_helper name)\n\
    \      (cond [(string-empty? name) #t]\n            [(is_valid_char? (string-ref\
    \ name 0)) (is_valid_name_helper (substring name 1))]\n            [else #f]))\n\
    \    (is_valid_name_helper name))\n  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_file_name_helper file_name)\n      (cond [(string-empty?\
    \ file_name) #f]\n            [(string=? (string-ref file_name 0) #\\.) #f]\n\
    \            [(string=? (string-ref file_name 0) #\\.) (is_valid_file_name_helper\
    \ (substring file_name 1))]\n            [else #t]))\n    (is_valid_file_name_helper\
    \ file_name))\n  (define (is_valid_digits? file_name)\n    (define (is_valid_digits_helper\
    \ file_name)\n      (cond [(string-empty? file_name) #t]\n            [(char-numeric?\
    \ (string-ref file_name 0)) (is_valid_digits_helper (substring file_name 1))]\n\
    \            [else #f]))\n    (is_valid_digits_helper file_name))\n  (define (is_valid_file_name_with_extension?\
    \ file_name)\n    (define (is_valid_file_name_with_extension_helper file_name)\n\
    \      (cond [(string-empty? file_name)", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}[.](txt|exe|dll)$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? ext)\n    (cond\n\
    \      [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=?\
    \ ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (and\n\
    \      (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\n      (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let\
    \ ([parts (string-split file_name #\\.)])\n      (and\n        (= (length parts)\
    \ 2)\n        (is_valid_name? (car parts))\n        (is_valid_extension? (cadr\
    \ parts)))))\n  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (valid-extension? file_name)\n\
    \    (cond\n      [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"txt\") #t]\n      [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"exe\") #t]\n      [(string=? (substring file_name (- (string-length file_name)\
    \ 3)) \"dll\") #t]\n      [else #f]))\n  (define (valid-name? file_name)\n   \
    \ (and (not (string-empty? (substring file_name 0 (string-index file_name #\\\
    .))))\n         (char-alphabetic? (string-ref file_name 0))\n         (not (string-contains\
    \ file_name #\\_))))\n  (define (valid-digits? file_name)\n    (let ([digits (regexp-match\
    \ #rx\"[0-9]\" file_name)])\n      (and (not (null? digits))\n           (<= (length\
    \ digits) 3))))\n  (define (valid-dot? file_name)\n    (string-contains file_name\
    \ #\\.))\n  (cond\n    [(and (valid-extension? file_name)\n          (valid-name?\
    \ file_name)\n          (valid-digits? file_name)\n          (valid-dot? file_name))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (count_digits str)\n      (if (string-empty? str)\n\
    \          0\n          (if (char-numeric? (string-ref str 0))\n             \
    \ (+ 1 (count_digits (string-drop str 1)))\n              (count_digits (string-drop\
    \ str 1)))))\n    (define (is_valid_extension? extension)\n      (cond [(string=?\
    \ extension \"txt\") #t]\n            [(string=? extension \"exe\") #t]\n    \
    \        [(string=? extension \"dll\") #t]\n            [else #f]))\n    (define\
    \ (is_valid_prefix? prefix)\n      (and (not (string-empty? prefix))\n       \
    \    (or (char-alphabetic? (string-ref prefix 0))\n               (char-alphabetic?\
    \ (string-ref prefix 0)))))\n    (define (is_valid_dot? file_name)\n      (if\
    \ (string-empty? file_name)\n          #f\n          (if (string=? (string-ref\
    \ file_name 0) \".\")\n              #t\n              (is_valid_dot? (string-drop\
    \ file_name 1)))))\n    (define (split_file_name file_name)\n      (if (string-empty?\
    \ file_name)\n          (list \"\" \"\")\n          (if (string=? (string-ref\
    \ file_name 0) \".\")\n              (list \"\" (string-drop file_name 1))\n \
    \             (let* ([splitted (split_file_name (string-drop file_name 1))]\n\
    \                     [prefix (car splitted)]\n                     [extension\
    \ (cadr splitted)])\n                (list (string-append (string (string-ref\
    \ file_name 0)) prefix) extension)))))\n    (define (is_valid_file_name file_name)\n\
    \      (let* ([splitted (split_file_name file_name)]\n             [prefix (car\
    \ splitted)]\n             [extension (cadr splitted)])\n        (and (is_valid_dot?\
    \ file_name)\n             (is_valid_prefix? prefix)\n             (is_valid_extension",
  "  (define (is_valid_extension? ext)\n    (cond\n      [(equal? ext \"txt\") #t]\n\
    \      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is_valid_name? name)\n    (cond\n      [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n      [else #f]))\n  (define (is_valid_file_name?\
    \ file_name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]+$\"\
    \ file_name) #t]\n      [else #f]))\n  (define (get_extension file_name)\n   \
    \ (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name))\n  (define (get_name file_name)\n\
    \    (regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\" file_name))\n  (cond\n    [(is_valid_file_name?\
    \ file_name)\n     (cond\n       [(is_valid_name? (get_name file_name))\n    \
    \    (cond\n          [(is_valid_extension? (get_extension file_name)) \"Yes\"\
    ]\n          [else \"No\"])]\n       [else \"No\"])]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]{3}$\" file_name)\n          (not (regexp-match\
    \ #rx\"[0-9]{4}\" file_name))\n          (or (regexp-match #rx\"\\.txt$\" file_name)\n\
    \              (regexp-match #rx\"\\.exe$\" file_name)\n              (regexp-match\
    \ #rx\"\\.dll$\" file_name)))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\n     'Yes]\n \
    \   [else\n     'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (define (is_valid_char? c)\n      (or (char-alphabetic? c) (char-numeric?\
    \ c)))\n    (define (is_valid_name_char? c)\n      (or (char-alphabetic? c) (char-numeric?\
    \ c) (char=? c #\\_)))\n    (define (is_valid_name_chars? str)\n      (cond\n\
    \        [(empty? str) #t]\n        [(is_valid_name_char? (first str)) (is_valid_name_chars?\
    \ (rest str))]\n        [else #f]))\n    (define (is_valid_name_chars_before_dot?\
    \ str)\n      (cond\n        [(empty? str) #f]\n        [(char=? (first str) #\\\
    .) #t]\n        [(is_valid_name_char? (first str)) (is_valid_name_chars_before_dot?\
    \ (rest str))]\n        [else #f]))\n    (define (is_valid_name_chars_after_dot?\
    \ str)\n      (cond\n        [(empty? str) #f]\n        [(is_valid_char? (first\
    \ str)) (is_valid_name_chars_after_dot? (rest str))]\n        [else #t]))\n  \
    \  (define (is_valid_name_chars_before_dot_and_after_dot? str)\n      (cond\n\
    \        [(empty? str) #f]\n        [(char=? (first str) #\\.) (is_valid_name_chars_after_dot?\
    \ (rest str))]\n        [(is_valid_name_char? (first str)) (is_valid_name_chars_before_dot_and_after_dot?\
    \ (rest str))]\n        [else #f]))\n    (", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal?\
    \ extension \"exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n\
    \  (define (is_valid_name? name)\n    (define (is_valid_char? char)\n      (cond\n\
    \        [(char-alphabetic? char) #t]\n        [(char-numeric? char) #t]\n   \
    \     [else #f]))\n    (define (is_valid_name_helper? name)\n      (cond\n   \
    \     [(empty? name) #t]\n        [(is_valid_char? (first name)) (is_valid_name_helper?\
    \ (rest name))]\n        [else #f]))\n    (and (not (empty? name)) (is_valid_name_helper?\
    \ name)))\n  (define (is_valid_number? number)\n    (cond\n      [(empty? number)\
    \ #t]\n      [(char-numeric? (first number)) (is_valid_number? (rest number))]\n\
    \      [else #f]))\n  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (cond\n        [(empty? file_name) #t]\n        [(char-alphabetic?\
    \ (first file_name)) (is_valid_file_name_helper? (rest file_name))]\n        [(char-numeric?\
    \ (first file_name)) (is_valid_file_name_helper? (rest file_name))]\n        [(equal?\
    \ (first file_name) #\\.) (is_valid_file_name_helper? (rest file_name))]\n   \
    \     [else #f]))\n    (and (not (empty? file_name)) (is_valid_file_name_helper?\
    \ file_name)))\n  (define (is_valid_file_name_helper? file_name)\n    (cond\n\
    \      [(empty? file_name) #t]\n      [(char-alphabetic? (first file_name", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (check-extension\
    \ file-name)\n    (cond ((string=? (substring file-name (sub1 (string-length file-name))\
    \ (string-length file-name)) \".txt\") #t)\n          ((string=? (substring file-name\
    \ (sub1 (string-length file-name)) (string-length file-name)) \".exe\") #t)\n\
    \          ((string=? (substring file-name (sub1 (string-length file-name)) (string-length\
    \ file-name)) \".dll\") #t)\n          (else #f)))\n  (define (check-name file-name)\n\
    \    (cond ((string-empty? (substring file-name 0 (string-index file-name \".\"\
    ))) #f)\n          ((char-alphabetic? (string-ref file-name 0)) #t)\n        \
    \  (else #f)))\n  (define (check-digits file-name)\n    (let ([count 0])\n   \
    \   (for ([i (in-range (string-length file-name))])\n        (cond ((char-numeric?\
    \ (string-ref file-name i)) (set! count (add1 count)))\n              (else #f)))\n\
    \      (cond ((> count 3) #f)\n            (else #t))))\n  (cond ((string=? (substring\
    \ file_name (sub1 (string-length file_name)) (string-length file_name)) \".\"\
    ) #f)\n        ((string=? (substring file_name (sub1 (string-length file_name))\
    \ (string-length file_name)) \"..\") #f)\n        ((string=? (substring file_name\
    \ (sub1 (string-length file_name)) (string-length file_name)) \"...\") #f)\n \
    \       ((string=? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \"....\") #f)\n        ((string=? (substring file_name (sub1 (string-length\
    \ file_name)) (string-length file_name)) \".....\") #f)\n        ((string=? (substring\
    \ file_name (sub1 (string-length file_name)) (string-length file_name))", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (if (and (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\n           (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.\" file_name)\n           (regexp-match #rx\"\\\
    \\.[txt|exe|dll]$\" file_name))\n      \"Yes\"\n      \"No\"))\n", "  (let ([digits\
    \ (regexp-match #rx\"[0-9]\" file_name)]\n        [dot (regexp-match #rx\"\\.\"\
    \ file_name)]\n        [before-dot (substring file_name 0 (car dot))]\n      \
    \  [after-dot (substring file_name (+ (car dot) 1) (string-length file_name))])\n\
    \    (cond [(< (length digits) 4)\n           (cond [(string=? before-dot \"\"\
    ) \"No\"]\n                 [(string-match #rx\"[a-zA-Z]\" before-dot)\n     \
    \             (cond [(string=? after-dot \"txt\") \"Yes\"]\n                 \
    \       [(string=? after-dot \"exe\") \"Yes\"]\n                        [(string=?\
    \ after-dot \"dll\") \"Yes\"]\n                        [else \"No\"])])\n    \
    \       \"No\"])))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    \
    \    [else \"No\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
