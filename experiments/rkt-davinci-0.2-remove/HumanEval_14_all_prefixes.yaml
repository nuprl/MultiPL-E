name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (string-&gt;list string)))))\n", "  (if (string=? string\
    \ \"\")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1) (cons (substring string 0) prefixes))))\n\
    \  (all_prefixes-iter string '()))\n", "  (let loop ([string string]\n       \
    \      [prefixes '()])\n    (if (string=? string \"\")\n        prefixes\n   \
    \     (loop (substring string 1)\n              (cons (substring string 0 1) prefixes)))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (empty?\
    \ string)\n      (list \"\")\n      (append (all_prefixes (rest string))\n   \
    \           (list (string-append (first string) (all_prefixes (rest string)))))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (empty? string)\n    \
    \    prefixes\n        (all_prefixes_helper (rest string) (append prefixes (list\
    \ (string-append prefixes (list (first string))))))))\n  (all_prefixes_helper\
    \ string (list \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (cond [(empty? string) '()]\n        [else (cons (string-&gt;list string) (all_prefixes\
    \ (substring string 0 (- (string-length string) 1))))]))\n", "  (for/list ([i\
    \ (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (if (string=? string \"\
    \")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (let loop ([string string]\n       \
    \      [prefixes '()])\n    (if (empty? string)\n        prefixes\n        (loop\
    \ (substring string 1)\n              (cons (substring string 0 1) prefixes)))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        (reverse prefixes)\n        (all_prefixes_iter (substring string 1)\n\
    \                           (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_iter (rest string) (cons (string-append\
    \ prefixes (list (first string))) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        (reverse prefixes)\n\
    \        (all_prefixes-iter (substring string 1) (cons (substring string 0 1)\
    \ prefixes))))\n  (all_prefixes-iter string '()))\n", "  (if (string=? string\
    \ \"\")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (let loop ([string string]\n       \
    \      [acc '()])\n    (if (string=? string \"\")\n        acc\n        (loop\
    \ (substring string 1)\n              (cons (substring string 0 1) acc)))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (let loop ([string string]\n          \
    \   [acc '()])\n    (if (string=? string \"\")\n        acc\n        (loop (substring\
    \ string 1)\n              (cons (substring string 0 1) acc)))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string acc)\n    (if (string=?\
    \ string \"\")\n        acc\n        (all_prefixes_iter (substring string 1) (cons\
    \ string acc))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 -1))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (cons (substring string 0 1)\n            (all_prefixes\
    \ (substring string 1)))))\n", "  (if (string=? string \"\")\n      '()\n    \
    \  (append (all_prefixes (substring string 0 -1))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (cons (list->string (append prefixes (list (first string)))) prefixes))))\n\
    \  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_iter (rest string) (cons (string-append\
    \ prefixes (list (first string))) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes-iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (cons (string-append prefixes (list (first string))) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (helper string acc)\n    (if (string=?\
    \ string \"\")\n        acc\n        (helper (substring string 1) (cons (substring\
    \ string 0) acc))))\n  (helper string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (all_prefixes_helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_helper string '()))\n", "  (if (empty?\
    \ string)\n      '()\n      (append (all_prefixes (rest string))\n           \
    \   (list (string-append (first string) (all_prefixes (rest string)))))))\n",
  "  (if (string=? string \"\")\n      '()\n      (cons string (all_prefixes (substring\
    \ string 0 (- (string-length string) 1))))))\n", "  (if (string=? string \"\"\
    )\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 -1))\n              (list string))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        (reverse prefixes)\n        (all_prefixes_helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper string\
    \ '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (if (string=? string \"\
    \")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (if (string=? string \"\"\
    )\n      '()\n      (append (all_prefixes (substring string 0 -1))\n         \
    \     (list string))))\n", "  (define (all_prefixes_helper string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes_iter string result)\n    (if (string=?\
    \ string \"\")\n        result\n        (all_prefixes_iter (substring string 1)\n\
    \                           (cons (substring string 0 (- (string-length string)\
    \ 1))\n                                 result))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (if (empty? string)\n      empty\n      (cons empty (map (lambda\
    \ (x) (cons (first string) x))\n                       (all_prefixes (rest string))))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (if (string=? string \"\")\n  \
    \    '()\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n", "  (if (string=? string \"\")\n   \
    \   '()\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (empty? string)\n    \
    \    prefixes\n        (all_prefixes_helper (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))))\n  (all_prefixes_helper\
    \ string (list \"\")))\n", "  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (if (string=? string \"\")\n      '()\n      (cons\
    \ (substring string 0 1)\n            (all_prefixes (substring string 1)))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (let loop ([string\
    \ string]\n             [acc '()])\n    (if (empty? string)\n        acc\n   \
    \     (loop (rest string)\n              (cons (list->string (reverse string))\
    \ acc)))))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1)\n                           (cons (substring string 0 1) prefixes))))\n \
    \ (all_prefixes-iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (cons (string-append prefixes\
    \ (list (first string))) prefixes))))\n  (helper string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1) (cons (substring string 0) prefixes))))\n\
    \  (all_prefixes-iter string '()))\n", "  (define (all_prefixes-iter string acc)\n\
    \    (if (empty? string)\n        acc\n        (all_prefixes-iter (rest string)\
    \ (cons (list string) acc))))\n  (all_prefixes-iter string '()))\n", "  (define\
    \ (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes-iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (cons string (all_prefixes (substring string\
    \ 0 (- (string-length string) 1))))))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes-iter (substring string 1)\n         \
    \                  (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes-iter (rest string) (cons (string-&gt;list\
    \ string) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (define (helper\
    \ string acc)\n    (if (string=? string \"\")\n        acc\n        (helper (substring\
    \ string 1) (cons (substring string 0) acc))))\n  (helper string '()))\n", " \
    \ (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (let loop ([string string]\n       \
    \      [acc '()])\n    (if (string=? string \"\")\n        acc\n        (loop\
    \ (substring string 1)\n              (cons (substring string 0 1) acc)))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (let loop ([string string]\n             [prefixes '()])\n    (if (empty? string)\n\
    \        prefixes\n        (loop (substring string 1)\n              (cons (substring\
    \ string 0 1) prefixes)))))\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1)\n                           (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (if (empty?\
    \ string)\n      '()\n      (append (all_prefixes (rest string))\n           \
    \   (list (string-&gt;list string)))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string)))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (if (string=? string \"\
    \")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n  (helper\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (cons (string-append\
    \ prefixes (list (first string))) prefixes))]))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (empty? string)\n      \
    \  prefixes\n        (all_prefixes_iter (rest string) (cons (string-append prefixes\
    \ (list (first string))) prefixes))))\n  (all_prefixes_iter string '()))\n", " \
    \ (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (string-&gt;list string)))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_helper\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_helper string (list \"\")))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (helper string)\n    (if (empty?\
    \ string)\n        '()\n        (cons (substring string 0 (add1 (string-length\
    \ string)))\n              (helper (substring string 1 (string-length string))))))\n\
    \  (reverse (helper string)))\n", "  (if (string=? string \"\")\n      '()\n \
    \     (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      '()\n      (append (all_prefixes (substring string 0 (-\
    \ (string-length string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest\
    \ string) (cons (cons (first string) prefixes) prefixes))]))\n  (all_prefixes-iter\
    \ string (list (list))))\n", "  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (define (all_prefixes-iter string prefixes)\n  \
    \  (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest\
    \ string) (cons (cons (first string) prefixes) prefixes))]))\n  (all_prefixes-iter\
    \ string (list (list))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (all_prefixes_helper (substring string 1)\n     \
    \                        (append prefixes (list (substring string 0 1))))))\n\
    \  (all_prefixes_helper string '()))\n", "  (if (string=? string \"\")\n     \
    \ '()\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n", "  (if (string=? string \"\")\n   \
    \   '()\n      (append (all_prefixes (substring string 0 -1))\n              (list\
    \ string))))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes-iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (cons (string-append prefixes (list (first string))) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (all_prefixes_helper (substring string 1)\n     \
    \                        (append prefixes (list (substring string 0 1))))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes_iter (rest string)\
    \ (cons (string-append prefixes (string (first string))) prefixes))]))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (string-append (first string) (all_prefixes (rest string)))))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        (reverse prefixes)\n\
    \        (all_prefixes_iter (substring string 1) (cons (substring string 0 1)\
    \ prefixes))))\n  (all_prefixes_iter string '()))\n", "  (if (string=? string\
    \ \"\")\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        (reverse prefixes)\n\
    \        (all_prefixes_iter (substring string 1)\n                           (cons\
    \ (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", " \
    \ (let loop ([string string]\n             [prefixes '()])\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (loop (substring string 1)\n       \
    \       (cons (substring string 0 1) prefixes)))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        (reverse prefixes)\n\
    \        (all_prefixes_iter (substring string 1)\n                           (cons\
    \ (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", " \
    \ (define (all_prefixes_iter string result)\n    (if (string=? string \"\")\n\
    \        result\n        (all_prefixes_iter (substring string 1) (cons string\
    \ result))))\n  (all_prefixes_iter string '()))\n", "  (define (iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (iter string '()))\n", "  (define\
    \ (all_prefixes-iter string acc)\n    (if (string=? string \"\")\n        acc\n\
    \        (all_prefixes-iter (substring string 1) (cons string acc))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (cons (string-append prefixes (list (first string))) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (if (string=? string \"\")\n      '()\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes_helper string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_helper (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_helper string (list \"\")))\n", "  (if (string=? string \"\"\
    )\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (if (string=? string \"\"\
    )\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes-iter (substring string 1)\n         \
    \                  (cons (substring string 0) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1)\n                             (append prefixes (list (substring string 0\
    \ 1))))))\n  (all_prefixes_helper string '()))\n", "  (if (string=? string \"\"\
    )\n      '()\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (helper string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (helper string '()))\n",
  "  (define (helper string acc)\n    (if (string=? string \"\")\n        acc\n  \
    \      (helper (substring string 1) (cons (substring string 0) acc))))\n  (helper\
    \ string '()))\n", "  (cond\n    [(empty? string) '()]\n    [else\n     (append\
    \ (all_prefixes (rest string))\n             (list (string-append (first string)\
    \ (rest string))))]))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (substring string 1))\n              (list string))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (substring string 1))\n              (list\
    \ string))))\n", "  (if (string=? string \"\")\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
