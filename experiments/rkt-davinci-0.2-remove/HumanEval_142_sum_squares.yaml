name: HumanEval_142_sum_squares
language: rkt
prompt: "#lang racket\n\n;; \"\n;; This function will take a list of integers. For\
  \ all entries in the list, the function shall square the integer entry if its index\
  \ is a \n;; multiple of 3 and will cube the integer entry if its index is a multiple\
  \ of 4 and not a multiple of 3. The function will not \n;; change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n;; Examples:\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1 2 3)) 6)\n    (check-equal? (candidate (list\
  \ 1 4 9)) 14)\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate\
  \ (list 1 1 1 1 1 1 1 1 1)) 9)\n    (check-equal? (candidate (list -1 -1 -1 -1 -1\
  \ -1 -1 -1 -1)) -3)\n    (check-equal? (candidate (list 0)) 0)\n    (check-equal?\
  \ (candidate (list -1 -5 2 -1 -5)) -126)\n    (check-equal? (candidate (list -56\
  \ -99 1 0 -2)) 3030)\n    (check-equal? (candidate (list -1 0 0 0 0 0 0 0 -1)) 0)\n\
  \    (check-equal? (candidate (list -16 -9 -2 36 36 26 -20 25 -40 20 -4 12 -26 35\
  \ 37)) -14196)\n    (check-equal? (candidate (list -1 -3 17 -1 -15 13 -1 14 -14\
  \ -12 -5 14 -14 6 13 11 16 16 4 10)) -1448)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero?\
    \ (modulo (length lst) 3)) (square (first lst))]\n               [(zero? (modulo\
    \ (length lst) 4)) (cube (first lst))]\n               [else (first lst)])\n \
    \            (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else (+ (cond\n               [(and (zero? (remainder (length lst) 3)) (zero?\
    \ (remainder (length lst) 4))) (sqr (first lst))]\n               [(zero? (remainder\
    \ (length lst) 4)) (cube (first lst))]\n               [else (first lst)])\n \
    \            (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else (+ (cond\n               [(= (remainder (length lst) 3) 0) (square\
    \ (first lst))]\n               [(= (remainder (length lst) 4) 0) (cube (first\
    \ lst))]\n               [else (first lst)])\n             (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (if (multiple-of?\
    \ (first lst) 3)\n                 (square (first lst))\n                 (if\
    \ (multiple-of? (first lst) 4)\n                     (cube (first lst))\n    \
    \                 (first lst)))\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (square (first\
    \ lst))]\n               [(zero? (remainder (length lst) 4)) (cube (first lst))]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0) (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0) (+ (cube (first lst)) (sum_squares (rest lst)))]\n      \
    \ [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (sqr (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube (first\
    \ lst))]\n               [else (first lst)])\n             (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (cond\n            [(=\
    \ (remainder (length lst) 3) 0) (+ (square (first lst)) (sum_squares (rest lst)))]\n\
    \            [(= (remainder (length lst) 4) 0) (+ (cube (first lst)) (sum_squares\
    \ (rest lst)))]\n            [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(or (= (remainder\
    \ (length lst) 3) 0) (= (remainder (length lst) 4) 0))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [else\n        (+ (expt (first lst)\
    \ 3) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (sqr (first lst))]\n               [(zero? (remainder (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond ((null? lst) 0)\n        ((= (remainder (length lst) 3) 0) (+ (expt (car\
    \ lst) 2) (sum_squares (cdr lst))))\n        ((= (remainder (length lst) 4) 0)\
    \ (+ (expt (car lst) 3) (sum_squares (cdr lst))))\n        (else (+ (car lst)\
    \ (sum_squares (cdr lst))))))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+\
    \ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst)\
    \ 3) 0) (square (first lst))]\n                    [(= (remainder (length lst)\
    \ 4) 0) (cube (first lst))]\n                    [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n\
    \        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length\
    \ lst) 3)) (square (first lst))]\n               [(zero? (modulo (length lst)\
    \ 4)) (cube (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \            [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (sqr (first lst))]\n               [(zero? (remainder (length lst)\
    \ 4)) (cube (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(= (remainder (length lst) 3) 0) (square (first lst))]\n     \
    \          [(= (remainder (length lst) 4) 0) (cube (first lst))]\n           \
    \    [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n                [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (sqr (first lst))]\n  \
    \              [(zero? (remainder (length lst) 4)) (cube (first lst))]\n     \
    \           [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(= (remainder (length lst) 3) 0) (square (first lst))]\n\
    \               [(= (remainder (length lst) 4) 0) (cube (first lst))]\n      \
    \         [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond [(empty? lst) 0]\n        [else\
    \ (+ (cond [(= (remainder (length lst) 3) 0) (square (first lst))]\n         \
    \              [(= (remainder (length lst) 4) 0) (cube (first lst))]\n       \
    \                [else (first lst)])\n                 (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (sqr (first lst))]\n               [(zero? (remainder (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(= (remainder (length lst) 3) 0) (+ (square (first lst))\
    \ (sum_squares (rest lst)))]\n       [(= (remainder (length lst) 4) 0) (+ (cube\
    \ (first lst)) (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(zero? (modulo (length lst) 3)) (expt (first lst) 2)]\n      \
    \         [(zero? (modulo (length lst) 4)) (expt (first lst) 3)]\n           \
    \    [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst)\
    \ 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0) (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0) (+ (cube (first lst)) (sum_squares (rest lst)))]\n      \
    \ [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (square (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (cube (first\
    \ lst)) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(zero? (modulo (length lst) 3)) (square (first lst))]\n      \
    \         [(zero? (modulo (length lst) 4)) (cube (first lst))]\n             \
    \  [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n\
    \            [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3)) (expt\
    \ x 2)]\n            [else x])\n          (sum_squares (rest lst))))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (multiple-of?\
    \ (first lst) 3) (multiple-of? (first lst) 4))\n        (+ (cube (first lst))\
    \ (sum_squares (rest lst)))]\n       [(multiple-of? (first lst) 3)\n        (+\
    \ (square (first lst)) (sum_squares (rest lst)))]\n       [else\n        (+ (first\
    \ lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else\n     (cond\n       [(or (= (remainder (length lst) 3) 0) (= (remainder\
    \ (length lst) 4) 0))\n        (+ (* (first lst) (first lst)) (sum_squares (rest\
    \ lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (multiple-of?\
    \ 3 (length lst)) (multiple-of? 4 (length lst))) (cube (first lst))]\n       \
    \        [(multiple-of? 3 (length lst)) (square (first lst))]\n              \
    \ [(multiple-of? 4 (length lst)) (cube (first lst))]\n               [else (first\
    \ lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(= (remainder (length lst) 3) 0)\
    \ (* (first lst) (first lst))]\n               [(= (remainder (length lst) 4)\
    \ 0) (* (first lst) (first lst) (first lst))]\n               [else (first lst)])\n\
    \             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else\n     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero?\
    \ (remainder (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 3))\n        (+ (expt (first\
    \ lst) 2) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(zero? (modulo (length lst) 3)) (square (first lst))]\n      \
    \         [(zero? (modulo (length lst) 4)) (cube (first lst))]\n             \
    \  [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder (length\
    \ lst) 3) 0) (square (first lst))]\n               [(= (remainder (length lst)\
    \ 4) 0) (cube (first lst))]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+\
    \ (cond\n               [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt (first lst) 2)]\n               [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (multiple-of? 3 (length lst)) (multiple-of? 4 (length\
    \ lst)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(multiple-of?\
    \ 3 (length lst))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [(multiple-of? 4 (length lst))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])])\n\
    \  )\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n\
    \       (+ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero?\
    \ (remainder (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length\
    \ lst) 3)) (expt x 2)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n\
    \        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (square (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube\
    \ (first lst))]\n               [else (first lst)])\n            (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \            [(zero? (modulo (length lst) 3)) (square (first lst))]\n        \
    \       [(zero? (modulo (length lst) 4)) (cube (first lst))]\n               [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n   \
    \     (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n     \
    \   (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n       \
    \ (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(zero? (modulo (length\
    \ lst) 4))\n        (+ (cube (first lst)) (sum_squares (rest lst)))]\n       [else\n\
    \        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (sqr (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube (first\
    \ lst))]\n               [else (first lst)])\n             (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n      \
    \ [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(zero? (modulo (length lst) 3)) (square (first lst))]\n      \
    \         [(zero? (modulo (length lst) 4)) (cube (first lst))]\n             \
    \  [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst) 3) 0) (*\
    \ (first lst) (first lst))]\n                    [(= (remainder (length lst) 4)\
    \ 0) (* (first lst) (first lst) (first lst))]\n                    [else (first\
    \ lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (square (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \             [(zero? (modulo (length lst) 3)) (square (first lst))]\n       \
    \         [(zero? (modulo (length lst) 4)) (cube (first lst))]\n             \
    \   [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder (length\
    \ lst) 3) 0) (* (first lst) (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (* (first lst) (first lst) (first lst))]\n               [else (first\
    \ lst)])\n            (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (multiple-of? (rest\
    \ lst) 3) (multiple-of? (rest lst) 4)) (+ (cube (first lst)) (sum_squares (rest\
    \ lst)))]\n       [(multiple-of? (rest lst) 3) (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(multiple-of? (rest lst) 4) (+ (cube (first lst)) (sum_squares\
    \ (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [(zero? (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (expt (first\
    \ lst) 2)]\n               [(zero? (remainder (length lst) 4)) (expt (first lst)\
    \ 3)]\n               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3)) (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length\
    \ lst) 4)) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else (+\
    \ (first lst) (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n       \
    \ (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo (length\
    \ lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n     \
    \  [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (sqr (first lst))]\n  \
    \             [(zero? (remainder (length lst) 4)) (cube (first lst))]\n      \
    \         [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond [(empty? lst) 0]\n        [else (+ (cond [(zero? (remainder (length lst)\
    \ 3)) (square (first lst))]\n                       [(zero? (remainder (length\
    \ lst) 4)) (expt (first lst) 3)]\n                       [else (first lst)])\n\
    \                 (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (+ (cond\n               [(and (zero? (remainder (length lst)\
    \ 3)) (zero? (remainder (length lst) 4))) (sqr (first lst))]\n               [(zero?\
    \ (remainder (length lst) 4)) (cube (first lst))]\n               [else (first\
    \ lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(or (= (remainder (length\
    \ lst) 3) 0) (= (remainder (length lst) 4) 0))\n        (+ (expt (first lst) 2)\
    \ (sum_squares (rest lst)))]\n       [else\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst)\
    \ 4))) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(zero? (remainder\
    \ (length lst) 3)) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n      \
    \ [(zero? (remainder (length lst) 4)) (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])])\n  )\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(= (remainder (length\
    \ lst) 3) 0) (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(= (remainder\
    \ (length lst) 4) 0) (+ (cube (first lst)) (sum_squares (rest lst)))]\n      \
    \ [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\
    \ (* x x x)]\n            [(zero? (remainder (length lst) 3)) (* x x)]\n     \
    \       [(zero? (remainder (length lst) 4)) (* x x x)])\n          (sum_squares\
    \ (rest lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(=\
    \ (remainder (length lst) 3) 0) (square (first lst))]\n                   [(=\
    \ (remainder (length lst) 4) 0) (cube (first lst))]\n                   [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n   \
    \ [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (sqr (first lst))]\n  \
    \             [(zero? (remainder (length lst) 4)) (cube (first lst))]\n      \
    \         [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond [(empty? lst) 0]\n        [else (+ (cond [(and (= (remainder (length lst)\
    \ 3) 0) (= (remainder (length lst) 4) 0)) (cube (first lst))]\n              \
    \         [(= (remainder (length lst) 3) 0) (square (first lst))]\n          \
    \             [(= (remainder (length lst) 4) 0) (cube (first lst))]\n        \
    \               [else (first lst)])\n                 (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(= (remainder (length lst) 3) 0) (square (first lst))]\n\
    \               [(= (remainder (length lst) 4) 0) (cube (first lst))]\n      \
    \         [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (square (first lst)) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (cube (first lst)) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n     \
    \  [(zero? (remainder (length lst) 3)) (+ (expt (first lst) 2) (sum_squares (rest\
    \ lst)))]\n       [(zero? (remainder (length lst) 4)) (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (zero? (remainder (length lst) 3))\n              \
    \    (zero? (remainder (length lst) 4)))\n             (expt x 3)]\n         \
    \   [(zero? (remainder (length lst) 3))\n             (expt x 2)]\n          \
    \  [(zero? (remainder (length lst) 4))\n             (expt x 3)]\n           \
    \ [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+ (cond\n         \
    \   [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length lst) 4)))\
    \ (expt x 3)]\n            [(zero? (remainder (length lst) 3)) (expt x 2)]\n \
    \           [else x])\n          (sum_squares (rest lst))))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (= (remainder\
    \ (length lst) 3) 0) (= (remainder (length lst) 4) 0)) (expt (first lst) 3)]\n\
    \               [(= (remainder (length lst) 3) 0) (expt (first lst) 2)]\n    \
    \           [(= (remainder (length lst) 4) 0) (expt (first lst) 3)]\n        \
    \       [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (sqr (first\
    \ lst))]\n               [(zero? (remainder (length lst) 4)) (cube (first lst))]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(and (zero? (remainder (length lst) 3))\n        \
    \             (zero? (remainder (length lst) 4)))\n                (expt (first\
    \ lst) 3)]\n               [(zero? (remainder (length lst) 3))\n             \
    \   (expt (first lst) 2)]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \            [(zero? (modulo (length lst) 3)) (square (first lst))]\n        \
    \       [(zero? (modulo (length lst) 4)) (cube (first lst))]\n               [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n  \
    \      (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(zero? (modulo\
    \ (length lst) 4))\n        (+ (cube (first lst)) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (expt (first lst) 2)]\n\
    \               [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n  \
    \             [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(and (multiple-of? 3 (length lst)) (multiple-of? 4\
    \ (length lst))) (cube (first lst))]\n               [(multiple-of? 3 (length\
    \ lst)) (square (first lst))]\n               [(multiple-of? 4 (length lst)) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \            [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (expt (first lst) 2)]\n               [(zero? (remainder (length lst)\
    \ 4)) (expt (first lst) 3)]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(zero? (modulo (length lst) 3)) (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4)) (+ (cube (first lst))\
    \ (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3)) (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(zero?\
    \ (modulo (length lst) 4)) (+ (cube (first lst)) (sum_squares (rest lst)))]\n\
    \       [else (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n   \
    \ [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n   \
    \     (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n     \
    \   (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3)) (square\
    \ (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube (first\
    \ lst))]\n               [else (first lst)])\n             (sum_squares (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n      \
    \ [(= (remainder (length lst) 3) 0)\n        (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(= (remainder (length lst) 4) 0)\n        (+ (cube (first\
    \ lst)) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond [(empty? lst) 0]\n        [else (+ (cond [(zero?\
    \ (remainder (length lst) 3)) (square (first lst))]\n                      [(zero?\
    \ (remainder (length lst) 4)) (expt (first lst) 3)]\n                      [else\
    \ (first lst)])\n                 (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length\
    \ lst) 3)) (sqr (first lst))]\n               [(zero? (modulo (length lst) 4))\
    \ (cube (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(and (multiple-of? (rest lst) 3) (multiple-of? (rest lst) 4)) (+ (expt\
    \ (first lst) 3) (sum_squares (rest lst)))]\n       [(multiple-of? (rest lst)\
    \ 3) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else (+ (first\
    \ lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else (+ (cond\n               [(and (multiple-of? 3 (length lst)) (multiple-of?\
    \ 4 (length lst))) (expt (first lst) 3)]\n               [(multiple-of? 3 (length\
    \ lst)) (expt (first lst) 2)]\n               [else (first lst)])\n          \
    \   (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond [(= (remainder (length lst) 3) 0) (square (first lst))]\n         \
    \          [(= (remainder (length lst) 4) 0) (cube (first lst))]\n           \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(or (= (remainder\
    \ (length lst) 3) 0) (= (remainder (length lst) 4) 0)) (+ (expt (first lst) 2)\
    \ (sum_squares (rest lst)))]\n       [else (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (cond\n    \
    \        [(zero? (modulo (length lst) 3)) (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n            [(zero? (modulo (length lst) 4)) (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n            [else (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3)) (+ (square (first lst)) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4)) (+ (cube (first lst))\
    \ (sum_squares (rest lst)))]\n       [else (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (sqr (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(or (= (remainder (length lst) 3) 0) (= (remainder (length\
    \ lst) 4) 0))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n  \
    \     [else\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n\
    \        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt (first lst) 2)]\n       \
    \        [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n         \
    \      [else (first lst)])\n            (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n   \
    \     (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n     \
    \   (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(zero? (modulo (length lst) 3))\n       \
    \ (+ (square (first lst)) (sum_squares (rest lst)))]\n       [(zero? (modulo (length\
    \ lst) 4))\n        (+ (cube (first lst)) (sum_squares (rest lst)))]\n       [else\n\
    \        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder (length\
    \ lst) 3)) (zero? (remainder (length lst) 4))) (expt (first lst) 2)]\n       \
    \        [(zero? (remainder (length lst) 4)) (expt (first lst) 3)]\n         \
    \      [else (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (square (first lst))]\n\
    \               [(zero? (remainder (length lst) 4)) (cube (first lst))]\n    \
    \           [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (expt (first lst)\
    \ 2)]\n               [(zero? (modulo (length lst) 4)) (expt (first lst) 3)]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (sqr (first\
    \ lst))]\n               [(zero? (remainder (length lst) 4)) (cube (first lst))]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([first (first lst)])\n   \
    \    (+ (cond\n            [(zero? (remainder (length lst) 3)) (square first)]\n\
    \            [(zero? (remainder (length lst) 4)) (expt first 3)]\n           \
    \ [else first])\n          (sum_squares (rest lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(= (remainder (length lst) 3) 0)\
    \ (square (first lst))]\n               [(= (remainder (length lst) 4) 0) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (* (first lst) (first lst))\
    \ (sum_squares (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n      \
    \  (+ (* (first lst) (first lst) (first lst)) (sum_squares (rest lst)))]\n   \
    \    [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder (length\
    \ lst) 3) 0) (square (first lst))]\n               [(= (remainder (length lst)\
    \ 4) 0) (cube (first lst))]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (multiple-of? 3 (length lst)) (multiple-of? 4 (length\
    \ lst)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(multiple-of?\
    \ 3 (length lst))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [(multiple-of? 4 (length lst))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])])\n\
    \  )\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length\
    \ lst) 3) 0) (square (first lst))]\n                   [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n                   [else (first lst)])\n   \
    \          (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [else (+ (cond\n               [(= 0 (remainder (length lst) 3)) (square (first\
    \ lst))]\n               [(= 0 (remainder (length lst) 4)) (cube (first lst))]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (expt (first lst)\
    \ 2)]\n               [(zero? (modulo (length lst) 4)) (expt (first lst) 3)]\n\
    \               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(or (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 2)]\n            [(zero? (remainder (length lst) 4))\
    \ (expt x 3)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst) 3)\
    \ 0) (square (first lst))]\n                   [(= (remainder (length lst) 4)\
    \ 0) (cube (first lst))]\n                   [else (first lst)])\n           \
    \  (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n                [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \                [(zero? (modulo (length lst) 4)) (cube (first lst))]\n      \
    \          [else (first lst)])\n            (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst)\
    \ 3) 0) (* (first lst) (first lst))]\n                   [(= (remainder (length\
    \ lst) 4) 0) (* (first lst) (first lst) (first lst))]\n                   [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length lst)\
    \ 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n        (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst)\
    \ (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (sqr (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (rest lst) 3) 0) (square (first lst))]\n               [(= (remainder (rest\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst)\
    \ 3) 0) (square (first lst))]\n                   [(= (remainder (length lst)\
    \ 4) 0) (cube (first lst))]\n                   [else (first lst)])\n        \
    \     (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (sqr (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(multiple-of?\
    \ 3 (length lst)) (square (first lst))]\n               [(multiple-of? 4 (length\
    \ lst)) (cube (first lst))]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (multiple-of? 3 (length lst)) (multiple-of? 4 (length\
    \ lst))) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [(multiple-of?\
    \ 3 (length lst)) (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [(multiple-of?\
    \ 4 (length lst)) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else\
    \ (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3)) (* (first\
    \ lst) (first lst))]\n               [(zero? (modulo (length lst) 4)) (* (first\
    \ lst) (first lst) (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond [(= (remainder (length lst) 3) 0) (square (first lst))]\n         \
    \          [(= (remainder (length lst) 4) 0) (cube (first lst))]\n           \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n                [(= (remainder (length lst) 3) 0) (square (first lst))]\n\
    \                [(= (remainder (length lst) 4) 0) (cube (first lst))]\n     \
    \           [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(and (zero?\
    \ (remainder (length lst) 3)) (zero? (remainder (length lst) 4))) (expt (first\
    \ lst) 2)]\n               [(zero? (remainder (length lst) 4)) (expt (first lst)\
    \ 3)]\n               [else (first lst)])\n             (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond [(= (remainder (length lst) 3)\
    \ 0) (square (first lst))]\n                   [(= (remainder (length lst) 4)\
    \ 0) (cube (first lst))]\n                   [else (first lst)])\n           \
    \  (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (sqr (first lst))]\n               [(zero? (remainder (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (let ([x (first lst)])\n       (+ (cond\n            [(zero? (remainder\
    \ (length lst) 3)) (square x)]\n            [(zero? (remainder (length lst) 4))\
    \ (cube x)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(= (remainder\
    \ (length lst) 3) 0) (square (first lst))]\n               [(= (remainder (length\
    \ lst) 4) 0) (cube (first lst))]\n               [else (first lst)])\n       \
    \      (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\
    \ (+ (cond\n               [(zero? (modulo (length lst) 3)) (square (first lst))]\n\
    \               [(zero? (modulo (length lst) 4)) (cube (first lst))]\n       \
    \        [else (first lst)])\n             (sum_squares (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n      \
    \ (+ (cond\n            [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4))) (expt x 3)]\n            [(zero? (remainder (length lst) 3))\
    \ (expt x 2)]\n            [else x])\n          (sum_squares (rest lst))))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (sqr (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(or (= (remainder (length lst) 3) 0) (= (remainder (length\
    \ lst) 4) 0))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n  \
    \     [else\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n               [(zero? (modulo\
    \ (length lst) 3)) (square (first lst))]\n               [(zero? (modulo (length\
    \ lst) 4)) (cube (first lst))]\n               [else (first lst)])\n         \
    \    (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n\
    \     (cond\n       [(and (zero? (remainder (length lst) 3)) (zero? (remainder\
    \ (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n\
    \       [(zero? (remainder (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n\
    \        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n       [else\n  \
    \      (+ (first lst) (sum_squares (rest lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder (length lst)\
    \ 3)) (zero? (remainder (length lst) 4)))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [(zero? (remainder (length lst) 3))\n        (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length\
    \ lst) 4))\n        (+ (first lst) (sum_squares (rest lst)))]\n       [else\n\
    \        (+ (first lst) (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else\n     (cond\n       [(or (= (remainder (length lst) 3) 0)\
    \ (= (remainder (length lst) 4) 0))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (expt (first lst) 3) (sum_squares (rest\
    \ lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n       \
    \        [(zero? (modulo (length lst) 3)) (square (first lst))]\n            \
    \   [(zero? (modulo (length lst) 4)) (cube (first lst))]\n               [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(zero? (modulo (length lst) 3))\
    \ (square (first lst))]\n               [(zero? (modulo (length lst) 4)) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n   \
    \            [(zero? (modulo (length lst) 3)) (square (first lst))]\n        \
    \       [(zero? (modulo (length lst) 4)) (cube (first lst))]\n               [else\
    \ (first lst)])\n             (sum_squares (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (cond\n               [(= (remainder (length lst) 3) 0)\
    \ (square (first lst))]\n               [(= (remainder (length lst) 4) 0) (cube\
    \ (first lst))]\n               [else (first lst)])\n             (sum_squares\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n\
    \       [(zero? (modulo (length lst) 3))\n        (+ (expt (first lst) 2) (sum_squares\
    \ (rest lst)))]\n       [(zero? (modulo (length lst) 4))\n        (+ (expt (first\
    \ lst) 3) (sum_squares (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares\
    \ (rest lst)))])]))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (cond\n \
    \              [(and (zero? (remainder (length lst) 3)) (zero? (remainder (length\
    \ lst) 4))) (expt (first lst) 2)]\n               [(zero? (remainder (length lst)\
    \ 4)) (expt (first lst) 3)]\n               [else (first lst)])\n            \
    \ (sum_squares (rest lst)))]))\n", "  (cond [(empty? lst) 0]\n        [else (+\
    \ (cond [(= (remainder (length lst) 3) 0) (square (first lst))]\n            \
    \           [(= (remainder (length lst) 4) 0) (cube (first lst))]\n          \
    \             [else (first lst)])\n                 (sum_squares (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(and (zero? (remainder\
    \ (length lst) 3)) (zero? (remainder (length lst) 4))) (+ (expt (first lst) 3)\
    \ (sum_squares (rest lst)))]\n       [(zero? (remainder (length lst) 3)) (+ (expt\
    \ (first lst) 2) (sum_squares (rest lst)))]\n       [(zero? (remainder (length\
    \ lst) 4)) (+ (expt (first lst) 3) (sum_squares (rest lst)))]\n       [else (+\
    \ (first lst) (sum_squares (rest lst)))])])\n  )\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [else\n     (cond\n       [(or (= (remainder (length lst) 3) 0) (= (remainder\
    \ (length lst) 4) 0))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n\
    \       [else\n        (+ (expt (first lst) 3) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(zero? (modulo (length\
    \ lst) 3))\n        (+ (expt (first lst) 2) (sum_squares (rest lst)))]\n     \
    \  [(zero? (modulo (length lst) 4))\n        (+ (expt (first lst) 3) (sum_squares\
    \ (rest lst)))]\n       [else\n        (+ (first lst) (sum_squares (rest lst)))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [else\n     (let ([x (first lst)])\n       (+\
    \ (cond\n            [(and (multiple-of? 3 (length lst)) (multiple-of? 4 (length\
    \ lst))) (expt x 3)]\n            [(multiple-of? 3 (length lst)) (expt x 2)]\n\
    \            [(multiple-of? 4 (length lst)) (expt x 3)]\n            [else x])\n\
    \          (sum_squares (rest lst))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
