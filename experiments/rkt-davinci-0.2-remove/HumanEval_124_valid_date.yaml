name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns True if the date is valid otherwise False.\n;; The date\
  \ is valid if all of the following rules are satisfied:\n;; 1. The date string is\
  \ not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or\
  \ higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n(define (valid_date\
  \ date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (valid-month month)\n    (and (not (empty? month))\n    \
    \     (and (not (< (string->number month) 1))\n              (not (> (string->number\
    \ month) 12)))))\n  (define (valid-day month day)\n    (and (not (empty? day))\n\
    \         (and (not (< (string->number day) 1))\n              (and (not (member\
    \ (string->number month) '(1 3 5 7 8 10 12)))\n                   (not (> (string->number\
    \ day) 30))))\n         (and (not (member (string->number month) '(4 6 9 11)))\n\
    \              (not (> (string->number day) 31)))\n         (and (not (= (string->number\
    \ month) 2))\n              (not (> (string->number day) 29)))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (< (string->number year)\
    \ 1))))\n  (define (valid-format date)\n    (and (not (empty? date))\n       \
    \  (string-contains date #\\-)))\n  (define (valid-date-format date)\n    (and\
    \ (valid-format date)\n         (and (valid-month (string-take date 2))\n    \
    \          (and (valid-day (string-take date 2) (string-take (string-drop date\
    \ 3) 2))\n                   (valid-year (string-drop date 6))))))\n  (valid-date-format\
    \ date))\n", "  (define (valid-month month)\n    (and (integer? month)\n     \
    \    (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n   \
    \ (and (integer? day)\n         (and (<= 1 day)\n              (if (or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                  (<= day 31)\n                  (if (or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                      (<= day 30)\n          \
    \            (if (= month 2)\n                          (<= day 29)\n        \
    \                  #f))))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\"-\")]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (>= day 1)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (>= year 0)))\n  (define (valid-date-format date)\n    (and\
    \ (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (split-date\
    \ date)]\n           [month (string->number (vector-ref date-parts 1))]\n    \
    \       [day (string->number (vector-ref date-parts 2))]\n           [year (string->number\
    \ (vector-ref date-parts 3))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n \
    \     [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (<= 1 day) (<= day 31)]\n      [(and (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n       (<= 1 day) (<= day 30)]\n      [(=\
    \ month 2)\n       (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n  \
    \  (<= 1 year) (<= year 9999))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date)\n\
    \      (define (valid-date-part-month date)\n        (valid-month (string->number\
    \ (cadr date))))\n      (define (valid-date-part-day date)\n        (valid-day\
    \ (string->number (cadr date)) (string->number (caddr date))))\n      (define\
    \ (valid-date-part-year date)\n        (valid-year (string->number (cadddr date))))\n\
    \      (and (valid-date-part-month date)\n           (valid-date-part-day date)\n\
    \           (valid-date-part-year date)))\n    (valid-date-part (split-date date)))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (not\
    \ (string=? month \"0\"))\n              (and (not (string=? month \"00\"))\n\
    \                   (and (not (string=? month \"000\"))\n                    \
    \    (and (not (string=? month \"0000\"))\n                             (and (not\
    \ (string=? month \"00000\"))\n                                  (and (not (string=?\
    \ month \"000000\"))\n                                       (and (not (string=?\
    \ month \"0000000\"))\n                                            (and (not (string=?\
    \ month \"00000000\"))\n                                                 (and\
    \ (not (string=? month \"000000000\"))\n                                     \
    \                 (and (not (string=? month \"0000000000\"))\n               \
    \                                            (and (not (string=? month \"00000000000\"\
    ))\n                                                                (and (not\
    \ (string=? month \"000000000000\"))\n                                       \
    \                              (and (not (string=? month \"0000000000000\"))\n\
    \                                                                          (and\
    \ (not (string=? month \"00000000000000\"))\n                                \
    \                                               (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (not\
    \ (empty? (cdr month)))\n              (and (char-numeric? (car month))\n    \
    \               (char-numeric? (cadr month))))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (cdr day)))\n       \
    \       (and (char-numeric? (car day))\n                   (char-numeric? (cadr\
    \ day))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n     \
    \    (and (not (empty? (cdr year)))\n              (and (not (empty? (cddr year)))\n\
    \                   (and (not (empty? (cdddr year)))\n                       \
    \ (and (char-numeric? (car year))\n                             (char-numeric?\
    \ (cadr year))\n                             (char-numeric? (caddr year))\n  \
    \                           (char-numeric? (cadddr year))))))))\n  (define (valid-separator\
    \ separator)\n    (and (not (empty? separator))\n         (and (not (empty? (cdr\
    \ separator)))\n              (and (char=? (car separator) #\\- )\n          \
    \         (char=? (cadr separator) #\\- )))))\n  (define (valid-month-day month\
    \ day)\n    (cond ((and (char=? (car month) #0)\n                (char=? (cadr\
    \ month) #1))\n           (and (char=? (car day) #0)\n                (char=?\
    \ (cadr day) #1)))\n          ((and (char=? (car month) #0)\n                (char=?\
    \ (cadr month) #3))\n           (and (char=? (car day) #0)\n                (char=?\
    \ (cadr day) #1)))\n          ((and (char=? (car month) #0)\n                (char=?\
    \ (cadr month) #5))\n           (and (char=? (car day) #0)\n                (char=?\
    \ (cadr day) #1)))\n         ", "  (define (month-days month)\n    (cond ((member\
    \ month '(1 3 5 7 8 10 12)) 31)\n          ((member month '(4 6 9 11)) 30)\n \
    \         ((= month 2) 29)\n          (else 0)))\n  (define (valid-date-format?\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month? month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day?\
    \ day month)\n    (and (>= day 1) (<= day (month-days month))))\n  (define (valid-year?\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-parts? date)\n\
    \    (let ((date-parts (string-split date #\\-)))\n      (and (valid-month? (string->number\
    \ (list-ref date-parts 0)))\n           (valid-day? (string->number (list-ref\
    \ date-parts 1))\n                       (string->number (list-ref date-parts\
    \ 0)))\n           (valid-year? (string->number (list-ref date-parts 2))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format? date)\n       (valid-date-parts?\
    \ date)))\n", "  (and (not (empty? date))\n       (valid-day date)\n       (valid-month\
    \ date)\n       (valid-year date)\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      ((or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31)))\n\
    \      ((or (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30)))\n      ((= month 2)\n       (and (<= 1 day) (<= day 29)))))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-))\n    (define (get-month date)\n      (string->number\
    \ (list-ref (split-date date) 0)))\n    (define (get-day date)\n      (string->number\
    \ (list-ref (split-date date) 1)))\n    (define (get-year date)\n      (string->number\
    \ (list-ref (split-date date) 2)))\n    (and (valid-month (get-month date))\n\
    \         (valid-day (get-month date) (get-day date))\n         (valid-year (get-year\
    \ date))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (>= day 1)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (>= year 1)))\n  (define (valid-date-format date)\n    (and\
    \ (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (string-split date\
    \ #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n      \
    \     [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (days-in-month month)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) 31]\n      [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) 30]\n      [(= month 2) 29]))\n  (define (valid-month month)\n    (and\
    \ (>= month 1) (<= month 12)))\n  (define (valid-day day month)\n    (and (>=\
    \ day 1) (<= day (days-in-month month))))\n  (define (valid-year year)\n    (and\
    \ (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([month (string->number\
    \ (substring date 0 2))]\n               [day (string->number (substring date\
    \ 3 5))]\n               [year (string->number (substring date 6 10))])\n    \
    \       (and (valid-month month)\n                (valid-day day month)\n    \
    \            (valid-year year)))))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-date-format date)))\n", "  (if (not (string? date))\n      #f\n     \
    \ (let* ([date-list (string-split date \"-\")]\n             [month (string->number\
    \ (list-ref date-list 0))]\n             [day (string->number (list-ref date-list\
    \ 1))]\n             [year (string->number (list-ref date-list 2))])\n       \
    \ (and (and (> month 0) (< month 13))\n             (and (> day 0) (< day 32))\n\
    \             (and (> year 0) (< year 10000))\n             (and (or (and (= month\
    \ 1) (= day 31))\n                      (and (= month 3) (= day 31))\n       \
    \               (and (= month 5) (= day 31))\n                      (and (= month\
    \ 7) (= day 31))\n                      (and (= month 8) (= day 31))\n       \
    \               (and (= month 10) (= day 31))\n                      (and (= month\
    \ 12) (= day 31))\n                      (and (= month 4) (= day 30))\n      \
    \                (and (= month 6) (= day 30))\n                      (and (= month\
    \ 9) (= day 30))\n                      (and (= month 11) (= day 30))\n      \
    \                (and (= month 2) (= day 29)))\n                  (and (or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                       (or (= month 4) (= month 6) (= month 9) (= month\
    \ 11) (= month 2))))))))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (and (&lt;= 1 (string-&gt;number month))\n              (&lt;=\
    \ (string-&gt;number month) 12))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (&lt;= 1 (string-&gt;number day))\n              (&lt;=\
    \ (string-&gt;number day) 31))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (and (&lt;= 1 (string-&gt;number year))\n              (&lt;=\
    \ (string-&gt;number year) 9999))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day-pair month day)\n      (cond\n        [(and (equal?\
    \ month \"1\") (equal? month \"3\") (equal? month \"5\") (equal? month \"7\")\
    \ (equal? month \"8\") (equal? month \"10\") (equal? month \"12\"))\n        \
    \ (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))]\n        [(and (equal? month \"4\") (equal? month \"6\") (equal?\
    \ month \"9\") (equal? month \"11\"))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 30))]\n        [(equal?\
    \ month \"2\")\n         (and (&lt;= 1 (string-&gt;number day))\n            \
    \  (&lt;= (string-&gt;number day) 29))]))\n    (define (valid-month-year-pair\
    \ month year)\n      (and (not (empty? month))\n           (and (&lt;= 1 (string-&gt;number\
    \ month))\n                (&lt;= (string-&gt;", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (>= year 1)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (map string->number (string-split date #\\-)))\n    (define (date-parts\
    \ date)\n      (let ([parts (split-date date)])\n        (list (list-ref parts\
    \ 0) (list-ref parts 1) (list-ref parts 2))))\n    (define (valid-month-day date)\n\
    \      (let ([parts (date-parts date)])\n        (and (valid-month (list-ref parts\
    \ 0))\n             (valid-day (list-ref parts 0) (list-ref parts 1)))))\n   \
    \ (valid-month-day date))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (&lt;= 1 (string-&gt;number month))\n              (&lt;= (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (and (&lt;= 1 (string-&gt;number year))\n              (&lt;= (string-&gt;number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format date)\n     \
    \  (and (valid-month (substring date 0 2))\n            (and (valid-day (substring\
    \ date 3 5))\n                 (valid-year (substring date 6 10))))))\n</code>\n",
  "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (&gt;= day 1)\n         (&lt;= day (cond\n \
    \                 ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31)\n                  ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30)\n                  ((= month 2) 29)))))\n \
    \ (define (valid-year year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-\" date\
    \ \"\")))\n       (valid-day (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-\"\
    \ date \"\"))\n                  (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\"\
    \ date \"\")))\n       (valid-year (string-&gt;number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\"\
    \ date \"\")))))\n</code>\n", "  (define (valid-month month)\n    (and (&gt;=\
    \ month 1) (&lt;= month 12)))\n  (define (valid-day day month)\n    (cond\n  \
    \    [(and (member month '(1 3 5 7 8 10 12)) (&gt;= day 1) (&lt;= day 31)) #t]\n\
    \      [(and (member month '(4 6 9 11)) (&gt;= day 1) (&lt;= day 30)) #t]\n  \
    \    [(and (= month 2) (&gt;= day 1) (&lt;= day 29)) #t]\n      [else #f]))\n\
    \  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-format date)\n    \
    \   (valid-year (string-&gt;number (substring date 6)))\n       (valid-month (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-day (string-&gt;number (substring date\
    \ 3 5))\n                  (string-&gt;number (substring date 0 2)))))\n", " \
    \ (define (valid-month month)\n    (and (not (empty? month))\n         (and (not\
    \ (empty? (cdr month)))\n              (and (not (empty? (cddr month)))\n    \
    \               (and (not (empty? (cdddr month)))\n                        (and\
    \ (not (empty? (cddddr month)))))))))\n  (define (valid-day day)\n    (and (not\
    \ (empty? day))\n         (and (not (empty? (cdr day)))\n              (and (not\
    \ (empty? (cddr day)))\n                   (and (not (empty? (cdddr day)))\n \
    \                       (and (not (empty? (cddddr day)))))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (cdr year)))\n\
    \              (and (not (empty? (cddr year)))\n                   (and (not (empty?\
    \ (cdddr year))))))))\n  (define (valid-format date)\n    (and (equal? (cdr (cdr\
    \ date)) #\\-)\n         (equal? (cdr (cdr (cdr (cdr date)))) #\\-)\n        \
    \ (equal? (cdr (cdr (cdr (cdr (cdr (cdr date)))))) #\\-)\n         (equal? (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr date))))))) #\\-)\n         (equal? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr date)))))))) #\\-)\n         (equal? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr date))))))))) #\\-)\n         (equal? (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr date)))))))))) #\\-)\n        \
    \ (equal? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr date)))))))))))\
    \ #\\-)\n         (equal? (cdr", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 1)))\n  (define (valid-date-string date)\n    (and (string?\
    \ date)\n         (string-length date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (string-split date #rx\"-\"))\n  (define\
    \ (parse-date date)\n    (define (parse-month month)\n      (string->number month))\n\
    \  (define (parse-day day)\n    (string->number day))\n  (define (parse-year year)\n\
    \    (string->number year))\n  (define (parse-date-string date)\n    (map parse-date\
    \ (split-date date)))\n  (define (valid-date-list date)\n    (and (valid-month\
    \ (car date))\n         (valid-day (car date) (cadr date))\n         (valid-year\
    \ (caddr date))))\n  (and (valid-date-string date)\n       (valid-date-list (parse-date-string\
    \ date))))\n", "  (define (valid-month month)\n    (and (integer? month)\n   \
    \      (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n \
    \   (and (integer? day)\n         (and (<= 1 day)\n              (cond\n     \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (<= 1 year)))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (define (date-parts date)\n      (map string->number\
    \ (string-split date #\\-)))\n    (define (valid-date-parts-helper date)\n   \
    \   (let* ([parts (date-parts date)]\n             [month (list-ref parts 0)]\n\
    \             [day (list-ref parts 1)]\n             [year (list-ref parts 2)])\n\
    \        (and (valid-month month)\n             (valid-day month day)\n      \
    \       (valid-year year))))\n    (valid-date-parts-helper date))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (integer? (string->number month))\n \
    \        (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (integer? (string->number day))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (and (<= 1 (string->number year))\n              (<= (string->number year)\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (list-ref date-parts 0)]\n             \
    \   [day (list-ref date-parts 1)]\n                [year (list-ref date-parts\
    \ 2)])\n           (and (valid-month month)\n                (valid-day day)\n\
    \                (valid-year year)))))\n  (valid-date-format date))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (<= 1 day) (<= day 31)]\n\
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (<= 1 day)\
    \ (<= day 30)]\n      [(= month 2)\n       (<= 1 day) (<= day 29)]))\n  (define\
    \ (valid-year year)\n    (<= 1 year))\n  (define (valid-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-format date)\n       (valid-date-parts date)))\n", " \
    \ (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date) true]\n    [else false]))\n", "  (cond\n    [(empty? date) false]\n  \
    \  [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n     (let* ([date-list\
    \ (string-split date #\\-)])\n       (let* ([month (string->number (list-ref date-list\
    \ 0))]\n              [day (string->number (list-ref date-list 1))]\n        \
    \      [year (string->number (list-ref date-list 2))])\n         (cond\n     \
    \      [(and (<= month 12) (<= day 31))\n            (cond\n              [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) true]\n              [(or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n               (and (<= day 30) true)]\n              [(= month\
    \ 2)\n               (cond\n                 [(and (<= day 29) (leap-year? year))\
    \ true]\n                 [(and (<= day 28) (not (leap-year? year))) true]\n \
    \                [else false])])]\n           [else false])))]\n    [else false]))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond ((or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                     (&lt;= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (&lt;=\
    \ day 30))\n                    ((= month 2)\n                     (&lt;= day\
    \ 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-string date)\n    (and (string? date)\n   \
    \      (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string-&gt;number\
    \ (list-ref date-parts 0))]\n           [day (string-&gt;number (list-ref date-parts\
    \ 1))]\n           [year (string-&gt;number (list-ref date-parts 2))])\n     \
    \ (and (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-string date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (not (empty? month))\n  \
    \       (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (define (valid-month-day-format-helper\
    \ date)\n      (define (valid-month-day-format-helper-helper date)\n        (define\
    \ (valid-month-day-format-helper-helper-helper date)\n          (define (valid-month-day-format-helper-helper-helper-helper\
    \ date)\n            (define (valid-month-day-format-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-month-day-format-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                       ", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (not (string=? month \"00\"))\n      \
    \        (and (not (string=? month \"13\"))\n                   (and (not (string=?\
    \ month \"14\"))\n                        (and (not (string=? month \"15\"))\n\
    \                             (and (not (string=? month \"16\"))\n           \
    \                       (and (not (string=? month \"17\"))\n                 \
    \                      (and (not (string=? month \"18\"))\n                  \
    \                          (and (not (string=? month \"19\"))\n              \
    \                                   (and (not (string=? month \"20\"))\n     \
    \                                                 (and (not (string=? month \"\
    21\"))\n                                                           (and (not (string=?\
    \ month \"22\"))\n                                                           \
    \     (and (not (string=? month \"23\"))\n                                   \
    \                                  (and (not (string=? month \"24\"))\n      \
    \                                                                    (and (not\
    \ (string=? month \"25\"))\n                                                 \
    \                              (and (not (string=? month \"26\"))\n          \
    \                                                                          (and\
    \ (not (string=? month \"27\"))\n                                            \
    \                                             (and (not (string=? month \"28\"\
    ))\n                                                                         \
    \                     (and (not (string=? month \"29\"))\n                   \
    \                                                                            \
    \    (and (not (string=? month \"30\"))\n                                    \
    \                                                                    (and (not\
    \ (string=? month \"31\"))\n                                                 \
    \                                                            (and (not (string=?\
    \ month \"32\"))\n                                                           \
    \                                                       (and (not (string=? month\
    \ \"33\"))\n                                                                 \
    \                                                      (and (not (string=? month\
    \ \"34\"))\n                                                                 \
    \                                                           (and (not (string=?\
    \ month \"35\"))\n                                                           \
    \                                                                      (and (not\
    \ (string=? month \"36\"))\n                                                 \
    \                                                                            \
    \         (and (not (string=? month \"37\"))\n                               \
    \                                                                            \
    \                                (and (not (string=? month \"38\"))\n        \
    \                                                                            \
    \                                                            (and (not (", " \
    \ (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n           (and (<= 1 day)\
    \ (<= day 31)))\n          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \           (and (<= 1 day) (<= day 30)))\n          ((= month 2)\n          \
    \ (and (<= 1 day) (<= day 29)))))\n  (define (valid-year year)\n    (and (<= 1\
    \ year) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{2}$\" date))))\n  (define (split-date date)\n    (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (get-month date)\n\
    \    (string->number (vector-ref (split-date date) 1)))\n  (define (get-day date)\n\
    \    (string->number (vector-ref (split-date date) 2)))\n  (define (get-year date)\n\
    \    (string->number (vector-ref (split-date date) 3)))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-month (get-month\
    \ date))\n       (valid-day (get-month date) (get-day date))\n       (valid-year\
    \ (get-year date))))\n", "  (cond\n    [(empty? date) false]\n    [(regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date)\n     (let\
    \ ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\" date))]\n    \
    \       [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (and (>= day 1) (<=\
    \ day 31))]\n         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \          (and (>= day 1) (<= day 30))]\n         [(= month 2)\n          (and\
    \ (>= day 1) (<= day 29))]))]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                 (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n                 (<= day 30)]\n                [(= month 2)\n        \
    \         (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)])\n           (and (valid-month (string->number (list-ref date-parts\
    \ 0)))\n                (valid-day (string->number (list-ref date-parts 0)) (string->number\
    \ (list-ref date-parts 1)))\n                (valid-year (string->number (list-ref\
    \ date-parts 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))]\n           [year (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    \ date))])\n       (cond\n         [(and (= month 1) (= day 31)) false]\n    \
    \     [(and (= month 3) (= day 31)) false]\n         [(and (= month 5) (= day\
    \ 31)) false]\n         [(and (= month 7) (= day 31)) false]\n         [(and (=\
    \ month 8) (= day 31)) false]\n         [(and (= month 10) (= day 31)) false]\n\
    \         [(and (= month 12) (= day 31)) false]\n         [(and (= month 4) (=\
    \ day 30)) false]\n         [(and (= month 6) (= day 30)) false]\n         [(and\
    \ (= month 9) (= day 30)) false]\n         [(and (= month 11) (= day 30)) false]\n\
    \         [(and (= month 2) (= day 29)) false]\n         [(and (= month 2) (=\
    \ day 30)) false]\n         [(and (= month 2) (= day 31)) false]\n         [(and\
    \ (< month 1) (> month 12)) false]\n         [(and (< day 1) (> day 31)) false]\n\
    \         [else true]))))\n    [else false]))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (&lt;= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (&lt;= day 31)]\n                [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n                 (&lt;= day 30)]\n              \
    \  [(= month 2)\n                 (&lt;= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (&gt;= year 0)))\n  (define (valid-date-string\
    \ date)\n    (and (string? date)\n         (and (not (empty? date))\n        \
    \      (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))))\n  (define (valid-date-parts\
    \ date)\n    (define (split-date date)\n      (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n    (define (date-parts date)\n      (map string-&gt;number (cdr (split-date\
    \ date))))\n    (define (month date)\n      (list-ref (date-parts date) 0))\n\
    \    (define (day date)\n      (list-ref (date-parts date) 1))\n    (define (year\
    \ date)\n      (list-ref (date-parts date) 2))\n    (and (valid-month (month date))\n\
    \         (valid-day (month date) (day date))\n         (valid-year (year date))))\n\
    \  (and (valid-date-string date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-string date-string)\n\
    \    (and (string? date-string)\n         (not (empty? date-string))))\n  (define\
    \ (valid-date-format date-string)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date-string)\n         (not (empty? date-string))))\n  (define (valid-day-for-month\
    \ day month)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (=\
    \ month 8) (= month 10) (= month 12))\n           (and (>= day 1) (<= day 31)))\n\
    \          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \ (and (>= day 1) (<= day 30)))\n          ((= month 2)\n           (and (>= day\
    \ 1) (<= day 29)))))\n  (define (split-date date-string)\n    (regexp-match #rx\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date-string))\n  (define (get-month date-string)\n\
    \    (string->number (vector-ref (split-date date-string) 1)))\n  (define (get-day\
    \ date-string)\n    (string->number (vector-ref (split-date date-string) 2)))\n\
    \  (define (get-year date-string)\n    (string->number (vector-ref (split-date\
    \ date-string) 3)))\n  (and (valid-date-string date)\n       (valid-date-format\
    \ date)\n       (valid-month (get-month date))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number month))\n\
    \              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number day))\n\
    \              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number year))\n\
    \              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (let ((date-parts (string-split date #\\-)))\n           (and (valid-month\
    \ (list-ref date-parts 0))\n                (valid-day (list-ref date-parts 1))\n\
    \                (valid-year (list-ref date-parts 2))))))\n  (valid-date-format\
    \ date))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (>= day 1) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n     \
    \  (and (>= day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-string date)\n\
    \    (and (string? date)\n         (string-split date \"-\")\n         (and (equal?\
    \ (length (string-split date \"-\")) 3)\n              (and (string-contains date\
    \ \"-\")\n                   (and (string-contains date \"0\")\n             \
    \           (string-contains date \"1\")\n                        (string-contains\
    \ date \"2\")\n                        (string-contains date \"3\")\n        \
    \                (string-contains date \"4\")\n                        (string-contains\
    \ date \"5\")\n                        (string-contains date \"6\")\n        \
    \                (string-contains date \"7\")\n                        (string-contains\
    \ date \"8\")\n                        (string-contains date \"9\"))))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (string-split date\
    \ \"-\")\n         (and (equal? (length (string-split date \"-\")) 3)\n      \
    \        (and (string-contains date \"-\")\n                   (and (string-contains\
    \ date \"0\")\n                        (string-contains date \"1\")\n        \
    \                (string-contains date \"2\")\n                        (string-contains\
    \ date \"3\")\n                        (string-contains date \"4\")\n        \
    \                (string-contains date \"5\")\n                        (string-contains\
    \ date \"6\")\n                        (string-contains date \"7\")\n        \
    \                (string-contains date \"8\")", "  (define (valid-month month)\n\
    \    (and (not (string=? month \"\"))\n         (and (not (string=? month \"0\"\
    ))\n              (and (not (string=? month \"00\"))\n                   (and\
    \ (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date) true]\n    [else false]))\n", "  (define (valid-month month)\n    (and\
    \ (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n \
    \     [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty?\
    \ date))\n       (valid-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day-pair month day)\n      (cond\n        [(and (= month\
    \ 1) (= day 31)) #t]\n        [(and (= month 3) (= day 31)) #t]\n        [(and\
    \ (= month 5) (= day 31)) #t]\n        [(and (= month 7) (= day 31)) #t]\n   \
    \     [(and (= month 8) (= day 31)) #t]\n        [(and (= month 10) (= day 31))\
    \ #t]\n        [(and (= month 12) (= day 31)) #t]\n        [(and (= month 4) (=\
    \ day 30)) #t]\n        [(and (= month 6) (= day 30)) #t]\n        [(and (= month\
    \ 9) (= day 30)) #t]\n        [(and (= month 11) (= day 30)) #t]\n        [(and\
    \ (= month 2) (= day 29)) #t]\n        [else #f]))\n    (define (valid-leap-year\
    \ year)\n      (and (integer? year)\n           (and (>= year 1) (<= year 9999))\n\
    \           (or (and (= (modulo year 4) 0)\n                    (not (= (modulo\
    \ year 100) 0)))\n               (= (modulo year 400) 0))))\n    (define (valid-leap-year-month-day-pair\
    \ year month day)\n      (and (valid-leap-year year)\n           (and (= month\
    \ 2) (= day 29))))\n    (define (valid-month-day", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (<= 1 day) (<= day 31)]\n      [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n       (<= 1 day) (<= day 30)]\n      [(=\
    \ month 2)\n       (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n  \
    \  (<= 1 year))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"))\n   \
    \    (valid-date-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n\
    \       (and (>= day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (cond [(empty? date) #f]\n        [(regexp-match #rx\"^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])-([0-9]{4})$\"\
    \ date) #t]\n        [else #f]))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;= month\
    \ 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and (&lt;=\
    \ 1 day)\n              (&lt;= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (&lt;= 1 year)\n              (&lt;= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-month-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-month-year-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-year-month-day-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-day-month-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n           (and (>= day 1) (<= day 31)))\n          ((or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n           (and (>= day 1) (<= day\
    \ 30)))\n          ((= month 2)\n           (and (>= day 1) (<= day 29)))))\n\
    \  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-format date)\n    \
    \   (valid-month (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n   \
    \    (valid-day (string->number (regexp-match #rx\"^[0-9]{2}-\" date))\n     \
    \             (string->number (regexp-match #rx\"-[0-9]{2}-\" date)))\n      \
    \ (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n", " \
    \ (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)\n     (let* ([month (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 1))]\n            [day (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 2))]\n            [year (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 3))])\n       (and (&lt;= 1 month 12)\n            (&lt;= 1 day (cond\n\
    \                        [(member month '(1 3 5 7 8 10 12)) 31]\n            \
    \            [(member month '(4 6 9 11)) 30]\n                        [(= month\
    \ 2) 29]))\n            (&lt;= 1 year 9999)))]\n    [else false]))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (cond ((or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n           \
    \     (<= day 31))\n               ((or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n                (<= day 30))\n               ((= month 2)\n    \
    \            (<= day 29)))))\n  (define (valid-year year)\n    (and (>= year 1)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([date-list (string-split\
    \ date \"-\")])\n           (and (valid-month (string->number (list-ref date-list\
    \ 0)))\n                (valid-day (string->number (list-ref date-list 0))\n \
    \                          (string->number (list-ref date-list 1)))\n        \
    \        (valid-year (string->number (list-ref date-list 2)))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)))\n", "  (cond\n    [(empty?\
    \ date) false]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n\
    \     (let* ([month (string->number (substring date 0 2))]\n            [day (string->number\
    \ (substring date 3 5))]\n            [year (string->number (substring date 6\
    \ 10))])\n       (and (<= 1 month 12)\n            (<= 1 day (cond\n         \
    \               [(member month '(1 3 5 7 8 10 12)) 31]\n                     \
    \   [(member month '(4 6 9 11)) 30]\n                        [(= month 2) (if\
    \ (and (= 0 (mod year 4))\n                                              (or (not\
    \ (= 0 (mod year 100)))\n                                                  (=\
    \ 0 (mod year 400))))\n                                          29\n        \
    \                                  28)]))\n            true))]\n    [else false]))\n",
  "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n     \
    \  (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-date-format date)\n   \
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (string-split date #\\-))\n  (define (get-month date)\n    (string-&gt;number\
    \ (list-ref (split-date date) 0)))\n  (define (get-day date)\n    (string-&gt;number\
    \ (list-ref (split-date date) 1)))\n  (define (get-year date)\n    (string-&gt;number\
    \ (list-ref (split-date date) 2)))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-date-format date)\n       (valid-month (get-month date))\n       (valid-day\
    \ (get-month date) (get-day date))\n       (valid-year (get-year date))))\n",
  "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)\n     (let* ([month (string->number (regexp-match #rx\"^([1-9]|0[1-9]|1[0-2])\"\
    \ date))]\n            [day (string->number (regexp-match #rx\"^([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))]\n            [year (string->number (regexp-match #rx\"^([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date))])\n       (cond\n         [(or (< month 1) (> month 12)) false]\n   \
    \      [(or (< day 1) (> day 31)) false]\n         [(and (= month 2) (or (< day\
    \ 1) (> day 29))) false]\n         [(and (member month '(4 6 9 11)) (or (< day\
    \ 1) (> day 30))) false]\n         [else true]))]\n    [else false]))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (< (string->number\
    \ month) 1))\n         (not (> (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (< (string->number day) 1))\n\
    \         (not (> (string->number day) 31))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (not (< (string->number year) 1))))\n \
    \ (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-format date)\n       (valid-month (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n       (valid-day (regexp-match #rx\"-[0-9]{2}-\" date))\n\
    \       (valid-year (regexp-match #rx\"-[0-9]{4}$\" date))))\n", "  (cond\n  \
    \  [(empty? date) false]\n    [(not (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)) false]\n    [(and (member (string-&gt;number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)) '(1 3 5 7 8 10 12))\n          (&lt; (string-&gt;number (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)) 1)\n          (&gt; (string-&gt;number\
    \ (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)) 31)) false]\n\
    \    [(and (member (string-&gt;number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)) '(4 6 9 11))\n          (&lt; (string-&gt;number (regexp-match #rx\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)) 1)\n          (&gt; (string-&gt;number\
    \ (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)) 30)) false]\n\
    \    [(and (= (string-&gt;number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)) 2)\n          (&lt; (string-&gt;number (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)) 1)\n          (&gt", "  (define (valid-month month)\n    (and (&gt;=\
    \ month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n    (cond\n  \
    \    [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;=\
    \ day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n\
    \  (define (valid-year year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\"-\")]\n           [month (string-&gt;number (list-ref date-parts 0))]\n\
    \           [day (string-&gt;number (list-ref date-parts 1))]\n           [year\
    \ (string-&gt;number (list-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-list (string-split\
    \ date #\\-)])\n           (and (valid-month (string->number (list-ref date-list\
    \ 0)))\n                (valid-day (string->number (list-ref date-list 0)) (string->number\
    \ (list-ref date-list 1)))\n                (valid-year (string->number (list-ref\
    \ date-list 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (not (< (string->number month) 1))\n         (not (> (string->number\
    \ month) 12))))\n  (define (valid-day month day)\n    (and (not (empty? day))\n\
    \         (not (< (string->number day) 1))\n         (not (> (string->number day)\n\
    \                 (cond ((equal? month \"1\") 31)\n                       ((equal?\
    \ month \"3\") 31)\n                       ((equal? month \"5\") 31)\n       \
    \                ((equal? month \"7\") 31)\n                       ((equal? month\
    \ \"8\") 31)\n                       ((equal? month \"10\") 31)\n            \
    \           ((equal? month \"12\") 31)\n                       ((equal? month\
    \ \"4\") 30)\n                       ((equal? month \"6\") 30)\n             \
    \          ((equal? month \"9\") 30)\n                       ((equal? month \"\
    11\") 30)\n                       ((equal? month \"2\") 29)\n                \
    \       (else 0))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (not (< (string->number year) 0))))\n  (define (valid-format date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (if (empty? date)\n          #t\n          (and (valid-date-parts-helper\
    \ (cdr date))\n               (valid-month (car date)))))\n    (valid-date-parts-helper\
    \ (string-split date #\\-)))\n  (define (valid-date-parts-2 date)\n    (define\
    \ (valid-date-parts-2-helper date)\n      (if (empty? date)\n          #t\n  \
    \        (and (valid-date-parts-2-helper (cdr date))\n               (valid-day\
    \ (car date) (cadr date)))))\n    (valid-date-parts-2-helper (", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(= month 1) (<= 1 day) (<= day 31)]\n      [(= month 3) (<=\
    \ 1 day) (<= day 31)]\n      [(= month 5) (<= 1 day) (<= day 31)]\n      [(= month\
    \ 7) (<= 1 day) (<= day 31)]\n      [(= month 8) (<= 1 day) (<= day 31)]\n   \
    \   [(= month 10) (<= 1 day) (<= day 31)]\n      [(= month 12) (<= 1 day) (<=\
    \ day 31)]\n      [(= month 4) (<= 1 day) (<= day 30)]\n      [(= month 6) (<=\
    \ 1 day) (<= day 30)]\n      [(= month 9) (<= 1 day) (<= day 30)]\n      [(= month\
    \ 11) (<= 1 day) (<= day 30)]\n      [(= month 2) (<= 1 day) (<= day 29)]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-string date)\n    (and (valid-format date)\n         (valid-month\
    \ (string->number (regexp-replace* #rx\"^[0-9]{2}-\" date \"\")))\n         (valid-day\
    \ (string->number (regexp-replace* #rx\"^[0-9]{2}-\" date \"\"))\n           \
    \         (string->number (regexp-replace* #rx\"^[0-9]{2}-[0-9]{2}-\" date \"\"\
    )))\n         (valid-year (string->number (regexp-replace* #rx\"^[0-", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (string-split date #\\-))\n  (define (valid-day-for-month\
    \ month day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (=\
    \ month 8) (= month 10) (= month 12))\n           (&lt;= (string-&gt;number day)\
    \ 31))\n          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n   \
    \        (&lt;= (string-&gt;number day) 30))\n          ((= month 2)\n       \
    \    (&lt;= (string-&gt;number day) 29))\n          (else #f)))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (cond ((empty? date)\
    \ #t)\n            ((valid-day-for-month (string-&gt;number (car date)) (cadr\
    \ date))\n             (valid-date-parts-helper (cddr date)))\n            (else\
    \ #f)))\n    (valid-date-parts-helper (split-date date)))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (char-numeric? (string-ref\
    \ month 0)))\n         (not (char-numeric? (string-ref month 1)))\n         (not\
    \ (char-numeric? (string-ref month 2)))\n         (not (char-numeric? (string-ref\
    \ month 3)))\n         (not (char-numeric? (string-ref month 4)))\n         (not\
    \ (char-numeric? (string-ref month 5)))\n         (not (char-numeric? (string-ref\
    \ month 6)))\n         (not (char-numeric? (string-ref month 7)))\n         (not\
    \ (char-numeric? (string-ref month 8)))\n         (not (char-numeric? (string-ref\
    \ month 9)))\n         (not (char-numeric? (string-ref month 10)))\n         (not\
    \ (char-numeric? (string-ref month 11)))\n         (not (char-numeric? (string-ref\
    \ month 12)))\n         (not (char-numeric? (string-ref month 13)))\n        \
    \ (not (char-numeric? (string-ref month 14)))\n         (not (char-numeric? (string-ref\
    \ month 15)))\n         (not (char-numeric? (string-ref month 16)))\n        \
    \ (not (char-numeric? (string-ref month 17)))\n         (not (char-numeric? (string-ref\
    \ month 18)))\n         (not (char-numeric? (string-ref month 19)))\n        \
    \ (not (char-numeric? (string-ref month 20)))\n         (not (char-numeric? (string-ref\
    \ month 21)))\n         (not (char-numeric? (string-ref month 22)))\n        \
    \ (not (char-numeric? (string-ref month 23)))\n         (not (char-numeric? (string-ref\
    \ month 24)))\n         (not (char-numeric? (string-ref month 25)))\n        \
    \ (not (char-numeric? (string-ref month 26)))\n         (not (char-numeric? (string-ref\
    \ month 27)))\n         (not (char-numeric? (string-ref month", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day month day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (cond\n                [(or (= (string->number month) 1)\n        \
    \             (= (string->number month) 3)\n                     (= (string->number\
    \ month) 5)\n                     (= (string->number month) 7)\n             \
    \        (= (string->number month) 8)\n                     (= (string->number\
    \ month) 10)\n                     (= (string->number month) 12))\n          \
    \       (<= (string->number day) 31)]\n                [(or (= (string->number\
    \ month) 4)\n                     (= (string->number month) 6)\n             \
    \        (= (string->number month) 9)\n                     (= (string->number\
    \ month) 11))\n                 (<= (string->number day) 30)]\n              \
    \  [(= (string->number month) 2)\n                 (<= (string->number day) 29)]))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (<=\
    \ 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (and (valid-month (substring date 0 2))\n              (valid-day\
    \ (substring date 0 2) (substring date 3 5))\n              (valid-year (substring\
    \ date 6)))))\n  (and (not (empty? date))\n       (valid-date-format date)))\n",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1)\
    \ (<= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day\
    \ 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 1) (<= year\
    \ 9999)))\n  (define (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (string=? \"\" date))))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)])\n      (and (valid-month (string->number\
    \ (list-ref date-parts 0)))\n           (valid-day (string->number (list-ref date-parts\
    \ 0)) (string->number (list-ref date-parts 1)))\n           (valid-year (string->number\
    \ (list-ref date-parts 2))))))\n  (and (valid-format date)\n       (valid-date-parts\
    \ date)))\n", "  (cond\n    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([date-list (string-split date #\\-)]\n            [month\
    \ (string->number (list-ref date-list 0))]\n            [day (string->number (list-ref\
    \ date-list 1))]\n            [year (string->number (list-ref date-list 2))])\n\
    \       (cond\n         [(and (<= month 12) (<= day 31))\n          (cond\n  \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) #t]\n            [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11)) (<= day 30)]\n            [(= month 2) (<= day 29)]\n     \
    \       [else #f])]\n         [else #f]))]\n    [else #f]))\n", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (and (<= 1 day)\n         (cond\n           [(or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n\
    \           [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \           [(= month 2) (<= day 29)])))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (cond\n\
    \    [(empty? date) false]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (define (valid-month-day month day)\n       (cond\n         [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n          (and (>= day 1) (<= day 31))]\n         [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n          (and (>= day 1) (<= day\
    \ 30))]\n         [(= month 2)\n          (and (>= day 1) (<= day 29))]\n    \
    \     [else false]))\n     (define (valid-month month)\n       (and (>= month\
    \ 1) (<= month 12)))\n     (define (valid-year year)\n       (and (>= year 1)\
    \ (<= year 9999)))\n     (define (valid-date-parts month day year)\n       (and\
    \ (valid-month month) (valid-month-day month day) (valid-year year)))\n     (define\
    \ (date-parts date)\n       (define (date-part-to-number part)\n         (string->number\
    \ part))\n       (define (date-parts-to-numbers date)\n         (map date-part-to-number\
    \ date))\n       (define (date-parts-to-numbers-list date)\n         (list (date-parts-to-numbers\
    \ date)))\n       (define (date-parts-to-numbers-list-list date)\n         (list\
    \ (date-parts-to-numbers-list date)))\n       (define (date-parts-to-numbers-list-list-list\
    \ date)\n         (list (date-parts-to-numbers-list-list date)))\n       (define\
    \ (date-parts-to-numbers-list-list-list-list date)\n         (list (date-parts-to-numbers-list-list-list\
    \ date)))\n       (define (date-parts-to-numbers-list-list-list-list-list date)\n\
    \         (list (date", "  (define (valid-month month)\n    (and (not (string=?\
    \ month \"\"))\n         (and (not (string=? month \"00\"))\n              (and\
    \ (not (string=? month \"0\"))\n                   (and (not (string=? month \"\
    13\"))\n                        (and (not (string=? month \"14\"))\n         \
    \                    (and (not (string=? month \"15\"))\n                    \
    \              (and (not (string=? month \"16\"))\n                          \
    \             (and (not (string=? month \"17\"))\n                           \
    \                 (and (not (string=? month \"18\"))\n                       \
    \                          (and (not (string=? month \"19\"))\n              \
    \                                        (and (not (string=? month \"20\"))\n\
    \                                                           (and (not (string=?\
    \ month \"21\"))\n                                                           \
    \     (and (not (string=? month \"22\"))\n                                   \
    \                                  (and (not (string=? month \"23\"))\n      \
    \                                                                    (and (not\
    \ (string=? month \"24\"))\n                                                 \
    \                              (and (not (string=? month \"25\"))\n          \
    \                                                                          (and\
    \ (not (string=? month \"26\"))\n                                            \
    \                                             (and (not (string=? month \"27\"\
    ))\n                                                                         \
    \                     (and (not (string=? month \"28\"))\n                   \
    \                                                                            \
    \    (and (not (string=? month \"29\"))\n                                    \
    \                                                                    (and (not\
    \ (string=? month \"30\"))\n                                                 \
    \                                                            (and (not (string=?\
    \ month \"31\"))\n                                                           \
    \                                                       (and (not (string=? month\
    \ \"32\"))\n                                                                 \
    \                                                      (and (not (string=? month\
    \ \"33\"))\n                                                                 \
    \                                                           (and (not (string=?\
    \ month \"34\"))\n                                                           \
    \                                                                      (and (not\
    \ (string=? month \"35\"))\n                                                 \
    \                                                                            \
    \         (and (not (string=? month \"36\"))\n                               \
    \                                                                            \
    \                                (and (not (string=? month \"37\"))\n        \
    \                                                                            \
    \                                                            (and (not (", " \
    \ (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (>= day 1)\n         (cond\n           [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) (<= day 31)]\n           [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11)) (<= day 30)]\n           [(= month 2) (<= day 29)])))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (string=? \"\" date))))\n  (and (valid-format date)\n       (valid-month\
    \ (string->number (regexp-replace #rx\"^[0-9]{2}-\" \"\" date)))\n       (valid-day\
    \ (string->number (regexp-replace #rx\"^[0-9]{2}-\" \"\" date))\n            \
    \      (string->number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\" \"\" date)))\n\
    \       (valid-year (string->number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\"\
    \ \"\" date)))))\n", "  (define (valid_month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid_day month day)\n\
    \    (and (integer? day)\n         (cond\n           [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \    (and (>= day 1) (<= day 31))]\n           [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n            (and (>= day 1) (<= day 30))]\n        \
    \   [(= month 2)\n            (and (>= day 1) (<= day 29))])))\n  (define (valid_year\
    \ year)\n    (and (integer? year)\n         (>= year 0)))\n  (define (valid_date-string\
    \ date-string)\n    (and (string? date-string)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date-string)))\n  (define (split-date date-string)\n    (regexp-match #rx\"\
    ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date-string))\n  (define (valid-date-parts\
    \ date-parts)\n    (and (valid_month (string->number (cadr date-parts)))\n   \
    \      (valid_day (string->number (cadr date-parts)) (string->number (caddr date-parts)))\n\
    \         (valid_year (string->number (cadddr date-parts)))))\n  (and (valid_date-string\
    \ date)\n       (valid-date-parts (split-date date))))\n", "  (define (valid-month\
    \ month)\n    (and (not (string=? month \"\"))\n         (and (not (string=? month\
    \ \"0\"))\n              (and (not (string=? month \"00\"))\n                \
    \   (and (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \       (<= day 31))\n                    ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                     (<= day 30))\n                    ((=\
    \ month 2)\n                     (<= day 29))))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 1)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n  \
    \  (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (split-date date)\n    (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (valid-date-parts\
    \ date)\n    (let* ([parts (split-date date)]\n           [month (string->number\
    \ (cadr parts))]\n           [day (string->number (caddr parts))]\n          \
    \ [year (string->number (cadddr parts))])\n      (and (valid-month month)\n  \
    \         (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (&lt;= 1 day)\n              (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \       (&lt;= day 31))\n                    ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                     (&lt;= day 30))\n                   \
    \ ((= month 2)\n                     (&lt;= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (&gt;= year 1)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\"-\")]\n           [month (string-&gt;number (list-ref date-parts 0))]\n\
    \           [day (string-&gt;number (list-ref date-parts 1))]\n           [year\
    \ (string-&gt;number (list-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n\
    \      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)])\n      (and (valid-month (string->number\
    \ (list-ref date-parts 0)))\n           (valid-day (string->number (list-ref date-parts\
    \ 0)) (string->number (list-ref date-parts 1)))\n           (valid-year (string->number\
    \ (list-ref date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number month))\n\
    \              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number day))\n\
    \              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number year))\n\
    \              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day-pair month day)\n    \
    \  (cond ((and (string=? month \"1\") (string=? month \"3\") (string=? month \"\
    5\") (string=? month \"7\") (string=? month \"8\") (string=? month \"10\") (string=?\
    \ month \"12\"))\n             (&lt;= (string-&gt;number day) 31))\n         \
    \   ((and (string=? month \"4\") (string=? month \"6\") (string=? month \"9\"\
    ) (string=? month \"11\"))\n             (&lt;= (string-&gt;number day) 30))\n\
    \            ((string=? month \"2\")\n             (&lt;= (string-&gt;number day)\
    \ 29))\n            (else #f)))\n    (define (valid-month-year-pair month year)\n\
    \      (cond ((string=? month \"2\")\n             (&lt;= (string-&gt;number year)\
    \ 29))\n            (else #t)))\n    (define (valid-day-year-pair day year)\n\
    \      (cond ((string=? day \"31\")\n             (&lt;= (string-&gt;number year)\
    \ 31))\n           ", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n         \
    \     (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n\
    \                [(or (= month 4) (= month 6) (= month 9) (= month 11))\n    \
    \             (&lt;= day 30)]\n                [(= month 2)\n                \
    \ (&lt;= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (&gt;= year 0)))\n  (define (valid-date-string date)\n    (and (string?\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-list date)\n    (and (list? date)\n         (and (valid-month\
    \ (car date))\n              (and (valid-day (car date) (cadr date))\n       \
    \            (valid-year (caddr date))))))\n  (cond\n    [(valid-date-string date)\n\
    \     (valid-date-list (string-&gt;list date))]\n    [(valid-date-list date)\n\
    \     #t]\n    [else\n     #f]))\n</code>\n", "  (cond\n    [(empty? date) #f]\n\
    \    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date) #t]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (and (not (empty? (cdr month)))\n              (and\
    \ (not (empty? (cddr month)))\n                   (and (not (empty? (cdddr month)))\n\
    \                        (and (char=? (car month) #\\0)\n                    \
    \         (char=? (cadr month) #\\1)\n                             (char=? (caddr\
    \ month) #\\2)\n                             (char=? (cadddr month) #\\3)))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (cdr day)))\n              (and (not (empty? (cddr day)))\n                \
    \   (and (not (empty? (cdddr day)))\n                        (and (char=? (car\
    \ day) #\\0)\n                             (char=? (cadr day) #\\1)\n        \
    \                     (char=? (caddr day) #\\2)\n                            \
    \ (char=? (cadddr day) #\\3)))))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (cdr year)))\n              (and\
    \ (not (empty? (cddr year)))\n                   (and (not (empty? (cdddr year)))\n\
    \                        (and (char=? (car year) #\\2)\n                     \
    \        (char=? (cadr year) #\\0)\n                             (char=? (caddr\
    \ year) #\\1)\n                             (char=? (cadddr year) #\\5)))))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (not (empty? (cdr date)))\n              (and (not (empty? (cddr date)))\n \
    \                  (and (not (empty? (cdddr date)))\n                        (and\
    \ (char=? (car date) #\\-)))))))\n  (define (valid-month-day-format date)\n  \
    \  (and (not (empty? date))\n         (and (not (empty", "  (cond\n    [(empty?\
    \ date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date) true]\n    [else false]))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (>= day 1)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (>= year 0)))\n  (define (valid-date-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts\
    \ (string-split date #\\-)]\n                [month (string->number (vector-ref\
    \ date-parts 0))]\n                [day (string->number (vector-ref date-parts\
    \ 1))]\n                [year (string->number (vector-ref date-parts 2))])\n \
    \          (and (valid-month month)\n                (valid-day month day)\n \
    \               (valid-year year)))))\n  (and (not (string=? date \"\"))\n   \
    \    (valid-date-format date)))\n", "  (cond [(empty? date) false]\n        [(regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\" date) true]\n\
    \        [else false]))\n", "  (define (valid-month date)\n    (and (not (empty?\
    \ date))\n         (and (not (< (string->number (substring date 0 2)) 1))\n  \
    \            (not (> (string->number (substring date 0 2)) 12)))))\n  (define\
    \ (valid-day date)\n    (and (not (empty? date))\n         (and (not (< (string->number\
    \ (substring date 3 5)) 1))\n              (not (> (string->number (substring\
    \ date 3 5)) 31)))))\n  (define (valid-year date)\n    (and (not (empty? date))\n\
    \         (and (not (< (string->number (substring date 6 10)) 1))\n          \
    \    (not (> (string->number (substring date 6 10)) 9999)))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (and (not (string=? (substring\
    \ date 2 3) \"-\"))\n              (not (string=? (substring date 5 6) \"-\")))))\n\
    \  (and (valid-month date)\n       (valid-day date)\n       (valid-year date)\n\
    \       (valid-format date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-split (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-split 0)))\n                (valid-day\
    \ (string->number (list-ref date-split 1)))\n                (valid-year (string->number\
    \ (list-ref date-split 2)))))))\n  (valid-date-format date))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond ((or (= 1 month) (= 3 month) (= 5 month) (= 7 month)\
    \ (= 8 month) (= 10 month) (= 12 month))\n                     (<= day 31))\n\
    \                    ((or (= 4 month) (= 6 month) (= 9 month) (= 11 month))\n\
    \                     (<= day 30))\n                    ((= 2 month)\n       \
    \              (<= day 29))))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= year 9999)))\n  (define (valid-date-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-split\
    \ (string-split date #\\-)]\n                [month (string->number (list-ref\
    \ date-split 0))]\n                [day (string->number (list-ref date-split 1))]\n\
    \                [year (string->number (list-ref date-split 2))])\n          \
    \ (and (valid-month month)\n                (valid-day month day)\n          \
    \      (valid-year year)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (and\
    \ (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (=\
    \ month 11)) (and (>= day 1) (<= day 30))]\n      [(= month 2) (and (>= day 1)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 1) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (date-parts date)\n      (map\
    \ string->number (regexp-split #rx\"-\" date)))\n    (define (date-month date)\n\
    \      (list-ref (date-parts date) 0))\n    (define (date-day date)\n      (list-ref\
    \ (date-parts date) 1))\n    (define (date-year date)\n      (list-ref (date-parts\
    \ date) 2))\n    (and (valid-month (date-month date))\n         (valid-day (date-month\
    \ date) (date-day date))\n         (valid-year (date-year date))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let ([date-parts (string-split\
    \ date #\\-)])\n      (and (valid-month (list-ref date-parts 0))\n           (valid-day\
    \ (list-ref date-parts 1))\n           (valid-year (list-ref date-parts 2)))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date #\\-)]\n             \
    \   [month (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)))\n", "  (define (valid-month month)\n    (and\
    \ (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;=\
    \ day 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n\
    \  (define (valid-year year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let ([month (string-&gt;number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))]\n          [day (string-&gt;number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date))]\n          [year (string-&gt;number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date))])\n      (and (valid-month month) (valid-day month\
    \ day) (valid-year year))))\n  (and (not (string=? date \"\")) (valid-format date)\
    \ (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (and (not (empty? (cdr month)))\n              (and\
    \ (char-numeric? (car month))\n                   (char-numeric? (cadr month))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (cdr day)))\n              (and (char-numeric? (car day))\n                \
    \   (char-numeric? (cadr day))))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (cdr year)))\n              (and\
    \ (not (empty? (cddr year)))\n                   (and (not (empty? (cdddr year)))\n\
    \                        (and (char-numeric? (car year))\n                   \
    \          (char-numeric? (cadr year))\n                             (char-numeric?\
    \ (caddr year))\n                             (char-numeric? (cadddr year))))))))\n\
    \  (define (valid-month-day month day)\n    (cond ((or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n           (and\
    \ (<= 1 day) (<= day 31)))\n          ((or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n           (and (<= 1 day) (<= day 30)))\n          ((= month\
    \ 2)\n           (and (<= 1 day) (<= day 29)))))\n  (define (valid-month-year\
    \ month year)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day-year\
    \ day year)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (=\
    \ month 8) (= month 10) (= month 12))\n           (and (<= 1 day) (<= day 31)))\n\
    \          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \ (and (<= 1 day) (<= day 30)))\n          ((= month 2)\n           (and (<= 1\
    \ day) (<= day 29)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let*\
    \ ([date-list (string-split date #\\-)]\n                [month (string->number\
    \ (list-ref date-list 0))]\n                [day (string->number (list-ref date-list\
    \ 1))]\n                [year (string->number (list-ref date-list 2))])\n    \
    \       (and (valid-month month)\n                (valid-day month day)\n    \
    \            (valid-year year)))))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-format date)))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (and (not (< (string->number month) 1))\n              (not\
    \ (> (string->number month) 12)))))\n  (define (valid-day month day)\n    (and\
    \ (not (empty? day))\n         (and (not (< (string->number day) 1))\n       \
    \       (and (not (or (and (= (string->number month) 1)\n                    \
    \              (> (string->number day) 31))\n                             (and\
    \ (= (string->number month) 3)\n                                  (> (string->number\
    \ day) 31))\n                             (and (= (string->number month) 5)\n\
    \                                  (> (string->number day) 31))\n            \
    \                 (and (= (string->number month) 7)\n                        \
    \          (> (string->number day) 31))\n                             (and (=\
    \ (string->number month) 8)\n                                  (> (string->number\
    \ day) 31))\n                             (and (= (string->number month) 10)\n\
    \                                  (> (string->number day) 31))\n            \
    \                 (and (= (string->number month) 12)\n                       \
    \           (> (string->number day) 31))\n                             (and (=\
    \ (string->number month) 4)\n                                  (> (string->number\
    \ day) 30))\n                             (and (= (string->number month) 6)\n\
    \                                  (> (string->number day) 30))\n            \
    \                 (and (= (string->number month) 9)\n                        \
    \          (> (string->number day) 30))\n                             (and (=\
    \ (string->number month) 11)\n                                  (> (string->number\
    \ day) 30))\n                             (and (= (string->number month) 2)\n\
    \                                  (> (string->number day) 29)))))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (not (< (string->number\
    \ year) 1))\n              (not (> (string->number year) 9999)))))\n  (define\
    \ (valid-format date)\n    (and (not (empty? date))\n         (and (not (empty?\
    \ (regexp-match #rx\"^[0-9]{2}-[0-9]{2}", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (cond\n           [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n            (and (>= day 1) (<= day 31))]\n           [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n            (and (>= day 1) (<= day\
    \ 30))]\n           [(= month 2)\n            (and (>= day 1) (<= day 29))])))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (split-date date)\n      (map\
    \ string->number (string-split date #\\-)))\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (valid-year (cdddr date)))\n          (valid-date-parts-helper-helper-helper-helper\
    \ (split-date date)))\n        (valid-day (cadr date) (caddr date)))\n      (valid-date-parts-helper-helper\
    \ (split-date date)))\n    (valid-date-parts-helper (split-date date)))\n  (and\
    \ (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-))\n    (define (date-parts date)\n      (map string->number\
    \ (split-date date)))\n    (define (month date)\n      (list-ref (date-parts date)\
    \ 0))\n    (define (day date)\n      (list-ref (date-parts date) 1))\n    (define\
    \ (year date)\n      (list-ref (date-parts date) 2))\n    (and (valid-month (month\
    \ date))\n         (valid-day (month date) (day date))\n         (valid-year (year\
    \ date))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (>= day 1)\n         (cond ((or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                (<= day 31))\n               ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                (<= day 30))\n               ((= month\
    \ 2)\n                (<= day 29)))))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (let* ([date-list (string-split date\
    \ \"-\")]\n              [month (string->number (list-ref date-list 0))]\n   \
    \           [day (string->number (list-ref date-list 1))]\n              [year\
    \ (string->number (list-ref date-list 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))\n",
  "  (define (valid-date-helper date)\n    (define (valid-month month)\n      (and\
    \ (not (string=? month \"\"))\n           (and (not (string=? month \"0\"))\n\
    \                (and (not (string=? month \"00\"))\n                     (and\
    \ (not (string=? month \"000\"))\n                          (and (not (string=?\
    \ month \"0000\"))\n                               (and (not (string=? month \"\
    00000\"))\n                                    (and (not (string=? month \"000000\"\
    ))\n                                         (and (not (string=? month \"0000000\"\
    ))\n                                              (and (not (string=? month \"\
    00000000\"))\n                                                   (and (not (string=?\
    \ month \"000000000\"))\n                                                    \
    \    (and (not (string=? month \"0000000000\"))\n                            \
    \                                 (and (not (string=? month \"00000000000\"))\n\
    \                                                                  (and (not (string=?\
    \ month \"000000000000\"))\n                                                 \
    \                      (and (not (string=? month \"0000000000000\"))\n       \
    \                                                                     (and (not\
    \ (string=? month \"00000000000000\"))\n                                     \
    \                                            (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \             (and (not (string=? month \"0000000000000000\"))\n             \
    \                                                                            \
    \  (and (not (string=? month \"00000000000000000\"))\n                       \
    \                                                                         (and\
    \ (not (string=? month \"000000000000000000\"))\n                            \
    \                                                                         (and\
    \ (not (string=? month \"0000000000000000000\"))\n                           \
    \                                                                            \
    \   (and (not (string=? month \"00000000000000000000\"))\n                   \
    \                                                                            \
    \                (and (not (string=? month \"000000000000000000000\"))\n     \
    \                                                                            \
    \                                   (and (not (string=? month \"0000000000000000000000\"\
    ))\n                                                                         \
    \                                                (and (not (string=? month \"\
    00000000000000000000000\"))\n                                                \
    \                                                                            \
    \  (and (not (string=? month \"000000000000000000000000\"))\n                \
    \                                                                            \
    \                                       (and (not (string=? month \"0000000000000000000000000\"\
    ))\n                                                                         \
    \                                                               (and (not (string=?\
    \ month \"00000000000000000000000000\"))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (define (valid-month-day month day)\n        (cond ((or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \             (and (>= day 1) (<= day 31)))\n              ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n               (and (>= day 1) (<= day 30)))\n\
    \              ((= month 2)\n               (and (>= day 1) (<= day 29)))))\n\
    \      (define (valid-month-year month year)\n        (cond ((or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \             (and (>= year 1) (<= year 9999)))\n              ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n               (and (>= year 1) (<= year\
    \ 9999)))\n              ((= month 2)\n               (and (>= year 1) (<= year\
    \ 9999)))))\n      (define (valid-day-year day year)\n        (cond ((or (= day\
    \ 1) (= day 3) (= day 5) (= day 7) (= day 8) (= day 10) (= day 12) (= day 31))\n\
    \               (and (>= year 1) (<= year 9999)))\n              ((or (= day 4)\
    \ (= day 6) (= day 9) (= day 11)", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (and (char-numeric? (string-ref month 0))\n      \
    \        (char-numeric? (string-ref month 1))\n              (and (<= (string->number\
    \ month) 12)\n                   (>= (string->number month) 1)))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (and (char-numeric? (string-ref\
    \ day 0))\n              (char-numeric? (string-ref day 1))\n              (and\
    \ (<= (string->number day) 31)\n                   (>= (string->number day) 1)))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (char-numeric?\
    \ (string-ref year 0))\n              (char-numeric? (string-ref year 1))\n  \
    \            (char-numeric? (string-ref year 2))\n              (char-numeric?\
    \ (string-ref year 3)))))\n  (define (valid-date-format date)\n    (and (not (empty?\
    \ date))\n         (and (char-numeric? (string-ref date 0))\n              (char-numeric?\
    \ (string-ref date 1))\n              (char-numeric? (string-ref date 3))\n  \
    \            (char-numeric? (string-ref date 4))\n              (char-numeric?\
    \ (string-ref date 6))\n              (char-numeric? (string-ref date 7))\n  \
    \            (char-numeric? (string-ref date 8))\n              (char-numeric?\
    \ (string-ref date 9))\n              (and (char=? (string-ref date 2) #\\- )\n\
    \                   (char=? (string-ref date 5) #\\- )))))\n  (define (valid-date-month-day\
    \ date)\n    (and (valid-month (substring date 0 2))\n         (valid-day (substring\
    \ date 3 5))))\n  (and (valid-date-format date)\n       (valid-date-month-day\
    \ date)\n       (valid-year (substring date 6 10))))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day month day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (cond\n                [(equal? month \"1\") (<= (string->number day)\
    \ 31)]\n                [(equal? month \"3\") (<= (string->number day) 31)]\n\
    \                [(equal? month \"5\") (<= (string->number day) 31)]\n       \
    \         [(equal? month \"7\") (<= (string->number day) 31)]\n              \
    \  [(equal? month \"8\") (<= (string->number day) 31)]\n                [(equal?\
    \ month \"10\") (<= (string->number day) 31)]\n                [(equal? month\
    \ \"12\") (<= (string->number day) 31)]\n                [(equal? month \"4\"\
    ) (<= (string->number day) 30)]\n                [(equal? month \"6\") (<= (string->number\
    \ day) 30)]\n                [(equal? month \"9\") (<= (string->number day) 30)]\n\
    \                [(equal? month \"11\") (<= (string->number day) 30)]\n      \
    \          [(equal? month \"2\") (<= (string->number day) 29)]\n             \
    \   [else false]))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-format date)\n    (and (not (empty? date))\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (split-date date)\n    (string-split date \"-\"))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (split-date date)]\n           [month (list-ref\
    \ date-parts 0)]\n           [day (list-ref date-parts 1)]\n           [year (list-ref\
    \ date-", "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (and (>= day 1) (<=\
    \ day 31))]\n         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \          (and (>= day 1) (<= day 30))]\n         [(= month 2)\n          (and\
    \ (>= day 1) (<= day 29))]))]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n\
    \              (and (char-numeric? (car month))\n                   (char-numeric?\
    \ (cadr month))))))\n  (define (valid-day day)\n    (and (not (empty? day))\n\
    \         (and (not (empty? (rest day)))\n              (and (char-numeric? (car\
    \ day))\n                   (char-numeric? (cadr day))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (rest year)))\n\
    \              (and (not (empty? (rest (rest year))))\n                   (and\
    \ (not (empty? (rest (rest (rest year)))))\n                        (and (char-numeric?\
    \ (car year))\n                             (char-numeric? (cadr year))\n    \
    \                         (char-numeric? (caddr year))\n                     \
    \        (char-numeric? (cadddr year))))))))\n  (define (valid-month-day month\
    \ day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n           (and (<= 1 day) (<= day 31)))\n  \
    \        ((or (= month 4) (= month 6) (= month 9) (= month 11))\n           (and\
    \ (<= 1 day) (<= day 30)))\n          ((= month 2)\n           (and (<= 1 day)\
    \ (<= day 29)))))\n  (define (valid-format date)\n    (and (not (empty? date))\n\
    \         (and (not (empty? (rest date)))\n              (and (not (empty? (rest\
    \ (rest date))))\n                   (and (not (empty? (rest (rest (rest date)))))\n\
    \                        (and (char-numeric? (car date))\n                   \
    \          (char-numeric? (cadr date))\n                             (char-numeric?\
    \ (caddr date))\n                             (char-numeric? (cadddr date))\n\
    \                             (char-numeric? (caddddr date))\n               \
    \              (", "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date)\n     (let ([month\
    \ (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\" date))]\n           [day\
    \ (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (and (>= day 1) (<=\
    \ day 31))]\n         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \          (and (>= day 1) (<= day 30))]\n         [(= month 2)\n          (and\
    \ (>= day 1) (<= day 29))]))]\n    [else false]))\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (>= day 1)\n              (cond\n                [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12)) (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n\
    \  (define (valid-date-string date)\n    (and (string? date)\n         (string-length\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (split-date date)\n    (define (split-date-helper date month day year)\n\
    \      (if (empty? date)\n          (list month day year)\n          (cond\n \
    \           [(regexp-match #rx\"^[0-9]{2}-\" date) (split-date-helper (substring\
    \ date 3) (string->number (substring date 0 2)) day year)]\n            [(regexp-match\
    \ #rx\"^-[0-9]{2}-\" date) (split-date-helper (substring date 3) month (string->number\
    \ (substring date 1 3)) year)]\n            [(regexp-match #rx\"^-[0-9]{4}$\"\
    \ date) (split-date-helper (substring date 5) month day (string->number (substring\
    \ date 1 5)))]\n            [else (error \"Invalid date format\")])))\n    (split-date-helper\
    \ date 0 0 0))\n  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date month day year)\n      (if (empty? date)\n          (and (valid-month month)",
  "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date) true]\n    [else false]))\n", "  (define (valid-month month)\n    (and\
    \ (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n    (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n           (and (&gt;= day 1) (&lt;= day 31)))\n          ((or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n           (and (&gt;= day\
    \ 1) (&lt;= day 30)))\n          ((= month 2)\n           (and (&gt;= day 1) (&lt;=\
    \ day 29)))))\n  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year\
    \ 9999)))\n  (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string-&gt;number (cadr (split-date\
    \ date))))\n  (define (get-day date)\n    (string-&gt;number (caddr (split-date\
    \ date))))\n  (define (get-year date)\n    (string-&gt;number (cadddr (split-date\
    \ date))))\n  (and (not (string=? date \"\"))\n       (valid-format date)\n  \
    \     (valid-month (get-month date))\n       (valid-day (get-month date) (get-day\
    \ date))\n       (valid-year (get-year date))))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (>= year 1)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let ([date-list (string-split date #\\-)]\n               [month (string->number\
    \ (list-ref date-list 0))]\n               [day (string->number (list-ref date-list\
    \ 1))]\n               [year (string->number (list-ref date-list 2))])\n     \
    \      (and (valid-month month)\n                (valid-day month day)\n     \
    \           (valid-year year)))))\n  (and (not (empty? date))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond ((= month 1) (<= 1 day) (<=\
    \ day 31))\n          ((= month 3) (<= 1 day) (<= day 31))\n          ((= month\
    \ 5) (<= 1 day) (<= day 31))\n          ((= month 7) (<= 1 day) (<= day 31))\n\
    \          ((= month 8) (<= 1 day) (<= day 31))\n          ((= month 10) (<= 1\
    \ day) (<= day 31))\n          ((= month 12) (<= 1 day) (<= day 31))\n       \
    \   ((= month 4) (<= 1 day) (<= day 30))\n          ((= month 6) (<= 1 day) (<=\
    \ day 30))\n          ((= month 9) (<= 1 day) (<= day 30))\n          ((= month\
    \ 11) (<= 1 day) (<= day 30))\n          ((= month 2) (<= 1 day) (<= day 29))))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (string=? \"\" date))))\n  (define (split-date date)\n\
    \    (string-split date #\\-)\n    (map string->number (string-split date #\\\
    -)))\n  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-",
  "  (define (valid-month month)\n    (and (integer? month)\n         (<= 1 month\
    \ 12)))\n  (define (valid-day month day)\n    (and (integer? day)\n         (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                (<= 1 day 31))\n               ((or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n                (<= 1 day 30))\n \
    \              ((= month 2)\n                (<= 1 day 29)))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (<= 1 year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let* ([date-list (string-split date #\\-)])\n           (and (valid-month\
    \ (string->number (list-ref date-list 0)))\n                (valid-day (string->number\
    \ (list-ref date-list 0)) (string->number (list-ref date-list 1)))\n         \
    \       (valid-year (string->number (list-ref date-list 2)))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond ((or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                     (<= day 31))\n\
    \                    ((or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \                     (<= day 30))\n                    ((= month 2)\n       \
    \              (<= day 29))))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= 1 year)))\n  (define (valid-format date)\n    (and (string?\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (split-date date)\n    (string-split date #rx\"-\"))\n  (define (get-month\
    \ date)\n    (string->number (list-ref (split-date date) 0)))\n  (define (get-day\
    \ date)\n    (string->number (list-ref (split-date date) 1)))\n  (define (get-year\
    \ date)\n    (string->number (list-ref (split-date date) 2)))\n  (and (valid-format\
    \ date)\n       (and (valid-month (get-month date))\n            (and (valid-day\
    \ (get-month date) (get-day date))\n                 (valid-year (get-year date))))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (and (<= 1 (string->number month))\n     \
    \         (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (integer?\
    \ (string->number year))\n         (and (<= 1 (string->number year))\n       \
    \       (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let*\
    \ ([date-parts (string-split date #\\-)])\n           (and (valid-month (list-ref\
    \ date-parts 0))\n                (valid-day (list-ref date-parts 1))\n      \
    \          (valid-year (list-ref date-parts 2))))))\n  (valid-date-format date))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (<= 1 day) (<=\
    \ day 31)]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n  \
    \     (<= 1 day) (<= day 30)]\n      [(= month 2)\n       (<= 1 day) (<= day 29)]))\n\
    \  (define (valid-year year)\n    (<= 1 year))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty?\
    \ date))\n       (valid-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (cond ((or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                (and\
    \ (>= day 1) (<= day 31)))\n               ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                (and (>= day 1) (<= day 30)))\n          \
    \     ((= month 2)\n                (and (>= day 1) (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n  \
    \  (define (split-date date)\n      (map string->number (string-split date #\\\
    -)))\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (and (valid-month (car date))\n             (valid-day (car date)\
    \ (cadr date))\n             (valid-year (caddr date))))\n      (and (not (null?\
    \ date))\n           (valid-date-parts-helper-helper date)))\n    (valid-date-parts-helper\
    \ (split-date date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (string->number (vector-ref date-parts 0))]\n\
    \                [day (string->number (vector-ref date-parts 1))]\n          \
    \      [year (string->number (vector-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-format date)\n    \
    \   (let* ([date-list (string-split date #\\-)])\n         (and (valid-month (string->number\
    \ (list-ref date-list 0)))\n              (valid-day (string->number (list-ref\
    \ date-list 0)) (string->number (list-ref date-list 1)))\n              (valid-year\
    \ (string->number (list-ref date-list 2)))))))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-string date-string)\n    (and (string?\
    \ date-string)\n         (string-length date-string)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string)))\n  (define (valid-date-parts date-parts)\n\
    \    (and (list? date-parts)\n         (and (valid-month (car date-parts))\n \
    \             (valid-day (cadr date-parts))\n              (valid-year (caddr\
    \ date-parts)))))\n  (define (valid-date-parts-for-month date-parts)\n    (cond\
    \ ((or (= (car date-parts) 1)\n               (= (car date-parts) 3)\n       \
    \        (= (car date-parts) 5)\n               (= (car date-parts) 7)\n     \
    \          (= (car date-parts) 8)\n               (= (car date-parts) 10)\n  \
    \             (= (car date-parts) 12))\n           (and (valid-day (cadr date-parts))\n\
    \                (<= (cadr date-parts) 31)))\n          ((or (= (car date-parts)\
    \ 4)\n               (= (car date-parts) 6)\n               (= (car date-parts)\
    \ 9)\n               (= (car date-parts) 11))\n           (and (valid-day (cadr\
    \ date-parts))\n                (<= (cadr date-parts) 30)))\n          ((= (car\
    \ date-parts) 2)\n           (and (valid-day (cadr date-parts))\n            \
    \    (<= (cadr date-parts) 29)))))\n  (define (split-date date)\n    (string-split\
    \ date #\\-)\n    )\n  (define", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (integer? (string->number month))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (integer? (string->number\
    \ day))\n         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-month-year-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-year-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year date)\n    (and (valid-month-day-format\
    \ date)\n         (valid-year (substring date 6 10))))\n  (define (valid-month-year\
    \ date)\n    (and (valid-month-year-format date)\n         (valid-month (substring\
    \ date 0 2))\n         (valid-year (substring date 3 7))))\n  (define (valid-day-year\
    \ date)\n    (and (valid-day-year-format date)\n         (valid-day (substring\
    \ date 0 2))\n         (valid-year (substring date 3 7))))\n  (define (", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (and (valid-month (substring date 0 2))\n              (valid-day (substring\
    \ date 3 5))\n              (valid-year (substring date 6 10)))))\n  (valid-date-format\
    \ date))\n</code>\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([month (string->number (substring date 0 2))]\n               [day (string->number\
    \ (substring date 3 5))]\n               [year (string->number (substring date\
    \ 6 10))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (empty? date))\n  \
    \     (valid-date-format date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (cond\n           [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \            (and (>= day 1) (<= day 31))]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n            (and (>= day 1) (<= day 30))]\n  \
    \         [(= month 2)\n            (and (>= day 1) (<= day 29))])))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (split-date date)\n    (string-split\
    \ date #rx\"-\"))\n  (define (parse-date date)\n    (map string->number (split-date\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (let* ([date-parts (parse-date date)]\n             [month (list-ref\
    \ date-parts 0)]\n             [day (list-ref date-parts 1)]\n             [year\
    \ (list-ref date-parts 2)])\n        (and (valid-month month)\n             (valid-day\
    \ month day)\n             (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (>= day 1)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (>= year 0)))\n  (define (valid-date-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-split\
    \ (string-split date #\\-)]\n                [month (string->number (vector-ref\
    \ date-split 0))]\n                [day (string->number (vector-ref date-split\
    \ 1))]\n                [year (string->number (vector-ref date-split 2))])\n \
    \          (and (valid-month month)\n                (valid-day month day)\n \
    \               (valid-year year)))))\n  (and (not (string=? date \"\"))\n   \
    \    (valid-date-format date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (cond\n           [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \          (and (>= day 1) (<= day 31))]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n            (and (>= day 1) (<= day 30))]\n  \
    \         [(= month 2)\n            (and (>= day 1) (<= day 29))])))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date #\\-)]\n             \
    \   [month (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number month))\n\
    \              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day month\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (cond ((or (= (string-&gt;number month) 1)\n          \
    \               (= (string-&gt;number month) 3)\n                         (= (string-&gt;number\
    \ month) 5)\n                         (= (string-&gt;number month) 7)\n      \
    \                   (= (string-&gt;number month) 8)\n                        \
    \ (= (string-&gt;number month) 10)\n                         (= (string-&gt;number\
    \ month) 12))\n                    (&lt;= (string-&gt;number day) 31))\n     \
    \              ((or (= (string-&gt;number month) 4)\n                        \
    \ (= (string-&gt;number month) 6)\n                         (= (string-&gt;number\
    \ month) 9)\n                         (= (string-&gt;number month) 11))\n    \
    \                (&lt;= (string-&gt;number day) 30))\n                   ((= (string-&gt;number\
    \ month) 2)\n                    (&lt;= (string-&gt;number day) 29))))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-format date)\n       (define (split-date date)\n    \
    \     (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n       (define\
    \ (get-month", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-month-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-month-day-year-format date)\n    (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-day-month-year-format\
    \ date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-year-month-day-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-year-day-month-format date)\n    (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (rest month)))\n              (and (not (empty? (rest\
    \ (rest month))))\n                   (and (not (empty? (rest (rest (rest month)))))\n\
    \                        (and (char=? (first month) #\\0)\n                  \
    \           (char=? (second month) #\\1)\n                             (char=?\
    \ (third month) #\\2)\n                             (char=? (fourth month) #\\\
    3)\n                             (char=? (fifth month) #\\4)\n               \
    \              (char=? (sixth month) #\\5)\n                             (char=?\
    \ (seventh month) #\\6)\n                             (char=? (eighth month) #\\\
    7)\n                             (char=? (ninth month) #\\8)\n               \
    \              (char=? (tenth month) #\\9)\n                             (char=?\
    \ (eleventh month) #\\1)\n                             (char=? (twelfth month)\
    \ #\\0))))))))\n  (define (valid-day day)\n    (and (not (empty? day))\n     \
    \    (and (not (empty? (rest day)))\n              (and (not (empty? (rest (rest\
    \ day))))\n                   (and (not (empty? (rest (rest (rest day)))))\n \
    \                       (and (char=? (first day) #\\0)\n                     \
    \        (char=? (second day) #\\1)\n                             (char=? (third\
    \ day) #\\2)\n                             (char=? (fourth day) #\\3)\n      \
    \                       (char=? (fifth day) #\\4)\n                          \
    \   (char=? (sixth day) #\\5)\n                             (char=? (seventh day)\
    \ #\\6)\n                             (char=? (eighth day) #\\7)\n           \
    \                  (char=? (ninth day) #\\8)\n                             (char=?\
    \ (tenth day) #\\9)\n                             (char=? (eleventh day) #\\1)\n\
    \                             (char=? (twelfth day) #\\0))))))))", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (not (empty?\
    \ (cdr month)))\n              (not (empty? (cddr month))))\n         (and (char-numeric?\
    \ (car month))\n              (char-numeric? (cadr month)))\n         (and (<=\
    \ (string->number month) 12)\n              (>= (string->number month) 1))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (cdr day)))\n              (not (empty? (cddr day))))\n         (and (char-numeric?\
    \ (car day))\n              (char-numeric? (cadr day)))\n         (and (<= (string->number\
    \ day) 31)\n              (>= (string->number day) 1))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (cdr year)))\n\
    \              (not (empty? (cddr year)))\n              (not (empty? (cdddr year))))\n\
    \         (and (char-numeric? (car year))\n              (char-numeric? (cadr\
    \ year))\n              (char-numeric? (caddr year))\n              (char-numeric?\
    \ (cadddr year)))))\n  (define (valid-format date)\n    (and (equal? (string-length\
    \ date) 10)\n         (equal? (string-ref date 2) #\\-)))\n  (and (valid-format\
    \ date)\n       (valid-month (substring date 0 2))\n       (valid-day (substring\
    \ date 3 5))\n       (valid-year (substring date 6 10))))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n\
    \              (and (char-numeric? (first month))\n                   (char-numeric?\
    \ (second month))))))\n  (define (valid-day day)\n    (and (not (empty? day))\n\
    \         (and (not (empty? (rest day)))\n              (and (char-numeric? (first\
    \ day))\n                   (char-numeric? (second day))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (rest year)))\n\
    \              (and (not (empty? (rest (rest year))))\n                   (and\
    \ (not (empty? (rest (rest (rest year)))))\n                        (and (char-numeric?\
    \ (first year))\n                             (char-numeric? (second year))\n\
    \                             (char-numeric? (third year))\n                 \
    \            (char-numeric? (fourth year))))))))\n  (define (valid-month-day month\
    \ day)\n    (cond ((and (= (string->number month) 1)\n                (= (string->number\
    \ month) 3)\n                (= (string->number month) 5)\n                (=\
    \ (string->number month) 7)\n                (= (string->number month) 8)\n  \
    \              (= (string->number month) 10)\n                (= (string->number\
    \ month) 12))\n           (and (<= (string->number day) 31)\n                (>=\
    \ (string->number day) 1)))\n          ((and (= (string->number month) 4)\n  \
    \              (= (string->number month) 6)\n                (= (string->number\
    \ month) 9)\n                (= (string->number month) 11))\n           (and (<=\
    \ (string->number day) 30)\n                (>= (string->number day) 1)))\n  \
    \        ((= (string->number month) 2)\n           (and (<= (string->number day)\
    \ 29)\n                (>= (string->number day) 1)))\n          (else #f)))\n\
    \  (define (valid-format date)\n    (and (not (empty? date))\n         (and (not\
    \ (empty? (rest", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (<= 1 day) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (string=? \"\" date))))\n\
    \  (define (split-date date)\n    (map string->number (regexp-split #rx\"-\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (and (valid-month (first date))\n           (valid-day (first date) (second\
    \ date))\n           (valid-year (third date))))\n    (valid-date-parts-helper\
    \ (split-date date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (<= 1 day) (<= day 31)]\n      [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n       (<= 1 day) (<= day 30)]\n      [(= month 2)\n       (<=\
    \ 1 day) (<= day 29)]))\n  (define (valid-year year)\n    (<= 1 year))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-format date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (map string->number (regexp-split\
    \ #rx\"-\" date)))\n  (define (valid-date-helper date)\n    (let* ([date-list\
    \ (split-date date)]\n           [month (list-ref date-list 0)]\n           [day\
    \ (list-ref date-list 1)]\n           [year (list-ref date-list 2)])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-format date)\n       (valid-date-helper date)))\n",
  "  (define (valid-month? month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day? month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond\n \
    \               [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n              \
    \   (&lt;= day 30)]\n                [(= month 2)\n                 (&lt;= day\
    \ 29)]))))\n  (define (valid-year? year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format? date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (empty? date))\n       (valid-date-format? date)\n     \
    \  (let* ([date-parts (string-split date #\\-)]\n              [month (string-&gt;number\
    \ (list-ref date-parts 0))]\n              [day (string-&gt;number (list-ref date-parts\
    \ 1))]\n              [year (string-&gt;number (list-ref date-parts 2))])\n  \
    \       (and (valid-month? month)\n              (valid-day? month day)\n    \
    \          (valid-year? year)))))\n", "  (define (valid-month month)\n    (and\
    \ (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond ((or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n           (<= 1 day) (<= day 31))\n          ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n           (<= 1 day) (<= day 30))\n   \
    \       ((= month 2)\n           (<= 1 day) (<= day 29))))\n  (define (valid-year\
    \ year)\n    (<= 1 year))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-list (string-split\
    \ date #\\-)])\n           (and (valid-month (string->number (list-ref date-list\
    \ 0)))\n                (valid-day (string->number (list-ref date-list 0)) (string->number\
    \ (list-ref date-list 1)))\n                (valid-year (string->number (list-ref\
    \ date-list 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 1)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date) #t))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n\
    \       (valid-day (string->number (regexp-match #rx\"^[0-9]{2}-\" date))\n  \
    \                (string->number (regexp-match #rx\"-[0-9]{2}-\" date)))\n   \
    \    (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n  \
    \  (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (&gt;= day 1)\n         (&lt;= day\n       \
    \      (cond\n               [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12)) 31]\n               [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n\
    \  (define (valid-year year)\n    (and (&gt;= year 0) (&lt;= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string-&gt;number (list-ref date-parts 0))]\n\
    \           [day (string-&gt;number (list-ref date-parts 1))]\n           [year\
    \ (string-&gt;number (list-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n                 (<= day 31)]\n                [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<= day\
    \ 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 1)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n  \
    \  (let* ([date-parts (string-split date #\"-\")]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0))\n                           (string->number\
    \ (list-ref date-list 1)))\n                (valid-year (string->number (list-ref\
    \ date-list 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (cdr month)))\n              (and (char-numeric? (car\
    \ month))\n                   (char-numeric? (cadr month))))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (not (empty? (cdr day)))\n\
    \              (and (char-numeric? (car day))\n                   (char-numeric?\
    \ (cadr day))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (not (empty? (cdr year)))\n              (and (not (empty? (cddr\
    \ year)))\n                   (and (not (empty? (cdddr year)))\n             \
    \           (and (char-numeric? (car year))\n                             (char-numeric?\
    \ (cadr year))\n                             (char-numeric? (caddr year))\n  \
    \                           (char-numeric? (cadddr year))))))))\n  (define (valid-month-day\
    \ month day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (=\
    \ month 8) (= month 10) (= month 12))\n           (and (<= 1 day) (<= day 31)))\n\
    \          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \ (and (<= 1 day) (<= day 30)))\n          ((= month 2)\n           (and (<= 1\
    \ day) (<= day 29)))))\n  (define (valid-date-format date)\n    (and (not (empty?\
    \ date))\n         (and (not (empty? (cdr date)))\n              (and (not (empty?\
    \ (cddr date)))\n                   (and (not (empty? (cdddr date)))\n       \
    \                 (and (char-numeric? (car date))\n                          \
    \   (char-numeric? (cadr date))\n                             (char-numeric? (caddr\
    \ date))\n                             (char-numeric? (cadddr date))\n       \
    \                      (and (= (char-&gt;integer (cadddr date))", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let* ([date-split (string-split date #\\-)])\n           (and (valid-month\
    \ (string->number (list-ref date-split 0)))\n                (valid-day (string->number\
    \ (list-ref date-split 0)) (string->number (list-ref date-split 1)))\n       \
    \         (valid-year (string->number (list-ref date-split 2)))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (cdr month)))\n\
    \              (and (not (empty? (cddr month)))\n                   (and (not\
    \ (empty? (cdddr month)))\n                        (and (not (empty? (cddddr month)))))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (cdr day)))\n              (and (not (empty? (cddr day)))\n                \
    \   (and (not (empty? (cdddr day)))\n                        (and (not (empty?\
    \ (cddddr day)))))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (not (empty? (cdr year)))\n              (and (not (empty? (cddr\
    \ year)))\n                   (and (not (empty? (cdddr year))))))))\n  (define\
    \ (valid-month-day month day)\n    (cond\n      [(and (= month 1) (= day 31))\
    \ #t]\n      [(and (= month 3) (= day 31)) #t]\n      [(and (= month 5) (= day\
    \ 31)) #t]\n      [(and (= month 7) (= day 31)) #t]\n      [(and (= month 8) (=\
    \ day 31)) #t]\n      [(and (= month 10) (= day 31)) #t]\n      [(and (= month\
    \ 12) (= day 31)) #t]\n      [(and (= month 4) (= day 30)) #t]\n      [(and (=\
    \ month 6) (= day 30)) #t]\n      [(and (= month 9) (= day 30)) #t]\n      [(and\
    \ (= month 11) (= day 30)) #t]\n      [(and (= month 2) (= day 29)) #t]\n    \
    \  [else #f]))\n  (define (valid-date-format date)\n    (and (equal? (cadr date)\
    \ #\\- )\n         (equal? (caddr date) #\\- )))\n  (define (valid-date-format-2\
    \ date)\n    (and (equal? (car date) #\\- )\n         (equal? (c", "  (cond\n\
    \    [(empty? date) #f]\n    [(regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (define (valid-month month)\n       (cond\n         [(< month 1)\
    \ #f]\n         [(> month 12) #f]\n         [(member month '(1 3 5 7 8 10 12))\n\
    \          (define (valid-day day)\n            (cond\n              [(< day 1)\
    \ #f]\n              [(> day 31) #f]\n              [else #t]))\n          (valid-day\
    \ (string->number (substring date 3 5)))]\n         [(member month '(4 6 9 11))\n\
    \          (define (valid-day day)\n            (cond\n              [(< day 1)\
    \ #f]\n              [(> day 30) #f]\n              [else #t]))\n          (valid-day\
    \ (string->number (substring date 3 5)))]\n         [(= month 2)\n          (define\
    \ (valid-day day)\n            (cond\n              [(< day 1) #f]\n         \
    \     [(> day 29) #f]\n              [else #t]))\n          (valid-day (string->number\
    \ (substring date 3 5)))]))\n     (valid-month (string->number (substring date\
    \ 0 2)))]\n    [else #f]))\n", "  (cond\n    [(empty? date) false]\n    [(regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date)\n     (let*\
    \ ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\" date))]\n    \
    \        [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (and (>= day 1) (<=\
    \ day 31))]\n         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \          (and (>= day 1) (<= day 30))]\n         [(= month 2)\n          (and\
    \ (>= day 1) (<= day 29))]))]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-day-for-month\
    \ day month)\n      (cond ((or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n             (&lt;= 1 (string-&gt;number\
    \ day) 31))\n            ((or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \             (&lt;= 1 (string-&gt;number day) 30))\n            ((= month 2)\n\
    \             (&lt;= 1 (string-&gt;number day) 29))\n            (else #f)))\n\
    \    (define (valid-month-for-day month day)\n      (cond ((or (= day 1) (= day\
    \ 3) (= day 5) (= day 7) (= day 8) (= day 10) (= day 12))\n             (&lt;=\
    \ 1 (string-&gt;number month) 31))\n            ((or (= day 4) (= day 6) (= day\
    \ 9) (= day 11))\n             (&lt;= 1 (string-&gt;number month) 30))\n     \
    \       ((= day 2)\n             (&lt;= 1 (string-&gt;number month) 29))", " \
    \ (define (valid-month month)\n    (and (not (empty? month))\n         (and (char-numeric?\
    \ (string-ref month 0))\n              (char-numeric? (string-ref month 1))\n\
    \              (and (<= (string->number month) 12)\n                   (>= (string->number\
    \ month) 1)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (char-numeric? (string-ref day 0))\n              (char-numeric? (string-ref\
    \ day 1))\n              (and (<= (string->number day) 31)\n                 \
    \  (>= (string->number day) 1)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (char-numeric? (string-ref year 0))\n        \
    \      (char-numeric? (string-ref year 1))\n              (char-numeric? (string-ref\
    \ year 2))\n              (char-numeric? (string-ref year 3)))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (char-numeric? (string-ref\
    \ date 0))\n              (char-numeric? (string-ref date 1))\n              (char-numeric?\
    \ (string-ref date 3))\n              (char-numeric? (string-ref date 4))\n  \
    \            (char-numeric? (string-ref date 6))\n              (char-numeric?\
    \ (string-ref date 7))\n              (char-numeric? (string-ref date 8))\n  \
    \            (char-numeric? (string-ref date 9))\n              (and (char=? (string-ref\
    \ date 2) #\\- )\n                   (char=? (string-ref date 5) #\\- )))))\n\
    \  (and (valid-date-format date)\n       (and (valid-month (substring date 0 2))\n\
    \            (valid-day (substring date 3 5))\n            (valid-year (substring\
    \ date 6 10)))))\n", "  (define (valid-day day month)\n    (cond\n      [(= month\
    \ 1)\n       (and (>= day 1) (<= day 31))]\n      [(or (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<=\
    \ day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n  \
    \     (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1)\
    \ (<= day 29))]))\n  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date #\\-)]\n               [month\
    \ (string->number (list-ref date-list 0))]\n               [day (string->number\
    \ (list-ref date-list 1))]\n               [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-day day month)\n                (valid-month month)\n\
    \                (valid-year year)))))\n  (and (not (string=? date \"\"))\n  \
    \     (valid-date-format date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number month))\n  \
    \            (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number day))\n\
    \              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number year))\n\
    \              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let* ([date-parts (string-split date \"-\")]\n                [month\
    \ (list-ref date-parts 0)]\n                [day (list-ref date-parts 1)]\n  \
    \              [year (list-ref date-parts 2)])\n           (and (valid-month month)\n\
    \                (valid-day day)\n                (valid-year year)))))\n  (valid-date-format\
    \ date))\n</code>\n", "  (cond\n    [(empty? date) false]\n    [(not (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)) false]\n    [(not (and (member (string->number\
    \ (substring date 0 2)) (list 1 3 5 7 8 10 12))\n               (member (string->number\
    \ (substring date 3 5)) (range 1 32)))) false]\n    [(not (and (member (string->number\
    \ (substring date 0 2)) (list 4 6 9 11))\n               (member (string->number\
    \ (substring date 3 5)) (range 1 31)))) false]\n    [(not (and (equal? (string->number\
    \ (substring date 0 2)) 2)\n               (member (string->number (substring\
    \ date 3 5)) (range 1 30)))) false]\n    [else true]))\n", "  (cond\n    [(empty?\
    \ date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date) true]\n    [else false]))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (char-numeric? (string-ref month 0))\n \
    \             (char-numeric? (string-ref month 1))\n              (and (<= (string->number\
    \ month) 12)\n                   (>= (string->number month) 1)))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (and (char-numeric? (string-ref\
    \ day 0))\n              (char-numeric? (string-ref day 1))\n              (and\
    \ (<= (string->number day) 31)\n                   (>= (string->number day) 1)))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (char-numeric?\
    \ (string-ref year 0))\n              (char-numeric? (string-ref year 1))\n  \
    \            (char-numeric? (string-ref year 2))\n              (char-numeric?\
    \ (string-ref year 3)))))\n  (define (valid-date-format date)\n    (and (not (empty?\
    \ date))\n         (and (equal? (string-length date) 10)\n              (equal?\
    \ (string-ref date 2) #\\- )\n              (equal? (string-ref date 5) #\\- ))))\n\
    \  (define (valid-date-parts date)\n    (and (valid-month (substring date 0 2))\n\
    \         (valid-day (substring date 3 5))\n         (valid-year (substring date\
    \ 6 10))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond ((or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                     (&lt;= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (&lt;=\
    \ day 30))\n                    ((= month 2)\n                     (&lt;= day\
    \ 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (and (string? date)\n   \
    \      (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string-&gt;number\
    \ (list-ref date-parts 0))]\n           [day (string-&gt;number (list-ref date-parts\
    \ 1))]\n           [year (string-&gt;number (list-ref date-parts 2))])\n     \
    \ (and (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (not (empty? month))\n  \
    \       (and (not (empty? (cdr month)))\n              (and (not (empty? (cddr\
    \ month)))\n                   (and (not (empty? (cdddr month)))\n           \
    \             (and (not (empty? (cddddr month)))))))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (cdr day)))\n       \
    \       (and (not (empty? (cddr day)))\n                   (and (not (empty? (cdddr\
    \ day)))\n                        (and (not (empty? (cddddr day)))))))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (not (empty?\
    \ (cdr year)))\n              (and (not (empty? (cddr year)))\n              \
    \     (and (not (empty? (cdddr year))))))))\n  (define (valid-month-day month\
    \ day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n           (and (>= day 1) (<= day 31)))\n  \
    \        ((or (= month 4) (= month 6) (= month 9) (= month 11))\n           (and\
    \ (>= day 1) (<= day 30)))\n          ((= month 2)\n           (and (>= day 1)\
    \ (<= day 29)))))\n  (define (valid-date-format date)\n    (and (equal? (cdr (cdr\
    \ date)) #\\-)\n         (equal? (cdr (cdr (cdr (cdr date)))) #\\-)\n        \
    \ (equal? (cdr (cdr (cdr (cdr (cdr (cdr date)))))) #\\-)\n         (equal? (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr date))))))) #\\-)\n         (equal? (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr date)))))))) #\\-)\n         (equal? (cdr (cdr\
    \ (cdr (", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (<= 1\
    \ day) (<= day 31)]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (<= 1 day) (<= day 30)]\n      [(= month 2)\n       (<= 1 day) (<= day\
    \ 29)]))\n  (define (valid-year year)\n    (<= 1 year))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (and (valid-date-format date)\n       (let* ([date-list (string-split date\
    \ #\\-)]\n              [month (string->number (list-ref date-list 0))]\n    \
    \          [day (string->number (list-ref date-list 1))]\n              [year\
    \ (string->number (list-ref date-list 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))\n",
  "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([date-parts (string-split date #\"-\")]\n            [month\
    \ (string->number (list-ref date-parts 0))]\n            [day (string->number\
    \ (list-ref date-parts 1))]\n            [year (string->number (list-ref date-parts\
    \ 2))])\n       (cond\n         [(or (< month 1) (> month 12)) false]\n      \
    \   [(and (= month 2) (= day 29))\n          (or (= (modulo year 4) 0)\n     \
    \         (and (= (modulo year 100) 0)\n                   (= (modulo year 400)\
    \ 0))))\n         [(or (< day 1) (> day 31)) false]\n         [(and (member month\
    \ '(4 6 9 11)) (> day 30)) false]\n         [else true]))]\n    [else false]))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (and (<= 1 (string->number month))\n     \
    \         (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (integer?\
    \ (string->number year))\n         (and (<= 1 (string->number year))\n       \
    \       (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (and\
    \ (valid-month (substring date 0 2))\n              (valid-day (substring date\
    \ 3 5))\n              (valid-year (substring date 6 10)))))\n  (valid-date-format\
    \ date))\n", "  (define (valid-month month)\n    (and (integer? month)\n     \
    \    (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n   \
    \ (and (integer? day)\n         (and (>= day 1)\n              (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                     (<= day 31))\n                    ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                     (<= day 30))\n          \
    \          ((= month 2)\n                     (<= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (map string->number (string-split date #rx\"-\")))\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (and (valid-month\
    \ (car date))\n             (valid-day (car date) (cadr date))\n             (valid-year\
    \ (caddr date))))\n      (if (valid-date-parts-helper-helper date)\n         \
    \ #t\n          #f))\n    (valid-date-parts-helper (split-date date)))\n  (and\
    \ (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (define (valid-date-format-helper date)\n      (cond ((empty? date)\
    \ #t)\n            ((char-numeric? (car date)) (valid-date-format-helper (cdr\
    \ date)))\n            ((char=? (car date) #\\-)(valid-date-format-helper (cdr\
    \ date)))\n            (else #f)))\n    (valid-date-format-helper (string-&gt;list\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (cond ((empty? date) #t)\n            ((char-numeric? (car date))\
    \ (valid-date-parts-helper (cdr date)))\n            ((char=? (car date) #\\-)(valid-date-parts-helper\
    \ (cdr date)))\n            (else #f)))\n    (valid-date-parts-helper (string-&gt;list\
    \ date)))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and\
    \ (integer? day)\n         (and (>= day 1)\n              (cond\n            \
    \    [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (>=\
    \ year 0)))\n  (define (valid-format date)\n    (and (string? date)\n        \
    \ (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (split-date\
    \ date)\n    (string-split date #\\-))\n  (define (valid-date-parts date)\n  \
    \  (let* ([parts (split-date date)]\n           [month (string->number (list-ref\
    \ parts 0))]\n           [day (string->number (list-ref parts 1))]\n         \
    \  [year (string->number (list-ref parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day)\n         (cond ((or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                (<= day 31))\n  \
    \             ((or (= month 4) (= month 6) (= month 9) (= month 11))\n       \
    \         (<= day 30))\n               ((= month 2)\n                (<= day 29)))))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([month (string->number (regexp-match #rx\"^[0-9]{2}\"\
    \ date))]\n               [day (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}\"\
    \ date))]\n               [year (string->number (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-([0-9]{4})$\"\
    \ date))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (integer? day) (<= 1 day) (<=\
    \ day 31)) #t]\n      [(and (integer? day) (<= 1 day) (<= day 30)) (or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))]\n      [(and (integer? day) (<= 1\
    \ day) (<= day 29)) (= month 2)]\n      [else #f]))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (date-to-list date)\n    (map string->number (string-split\
    \ date #\\-)))\n  (define (valid-date? date)\n    (let ([date-list (date-to-list\
    \ date)])\n      (and (valid-date-format date)\n           (and (valid-month (list-ref\
    \ date-list 0))\n                (and (valid-day (list-ref date-list 0) (list-ref\
    \ date-list 1))\n                     (valid-year (list-ref date-list 2)))))))\n\
    \  (valid-date? date))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (and (not (empty? (cdr month)))\n              (char-numeric?\
    \ (car month))\n              (char-numeric? (cadr month))\n              (and\
    \ (not (empty? (cddr month)))\n                   (char=? (caddr month) #\\-))\n\
    \              (and (not (empty? (cdddr month)))\n                   (char-numeric?\
    \ (cadddr month))\n                   (char-numeric? (caddddr month))\n      \
    \             (and (not (empty? (cddddr month)))\n                        (char=?\
    \ (cadddddr month) #\\-))\n                   (and (not (empty? (cdddddr month)))\n\
    \                        (char-numeric? (caddddddr month))\n                 \
    \       (char-numeric? (cadddddddr month))\n                        (and (not\
    \ (empty? (cddddddr month)))\n                             (char-numeric? (caddddddddr\
    \ month))\n                             (char-numeric? (cadddddddddr month))))))))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (and (valid-date-format date)\n    \
    \   (let* ([date-list (string-split date #\\-)]\n              [month (string->number\
    \ (list-ref date-list 0))]\n              [day (string->number (list-ref date-list\
    \ 1))]\n              [year (string->number (list-ref date-list 2))])\n      \
    \   (and (valid-month month)\n              (valid-day month day)\n          \
    \    (valid-year year)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                     (<= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (<= day\
    \ 30))\n                    ((= month 2)\n                     (<= day 29))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\"-\")]\n            \
    \    [month (string->number (list-ref date-list 0))]\n                [day (string->number\
    \ (list-ref date-list 1))]\n                [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (not (or (< month 1) (> month 12)))\n         (not (or (< month 1) (> month\
    \ 12)))))\n  (define (valid-day month day)\n    (and (not (or (< day 1) (> day\
    \ 31)))\n         (not (or (< day 1) (> day 30)))\n         (not (or (< day 1)\
    \ (> day 29)))))\n  (define (valid-year year)\n    (and (not (or (< year 1) (>\
    \ year 9999)))\n         (not (or (< year 1) (> year 9999)))))\n  (define (valid-format\
    \ date)\n    (and (not (or (< date 1) (> date 9999)))\n         (not (or (< date\
    \ 1) (> date 9999)))))\n  (and (valid-month month)\n       (valid-day month day)\n\
    \       (valid-year year)\n       (valid-format date)))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day month day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (cond\n                [(equal? month \"1\") (<= (string->number day)\
    \ 31)]\n                [(equal? month \"3\") (<= (string->number day) 31)]\n\
    \                [(equal? month \"5\") (<= (string->number day) 31)]\n       \
    \         [(equal? month \"7\") (<= (string->number day) 31)]\n              \
    \  [(equal? month \"8\") (<= (string->number day) 31)]\n                [(equal?\
    \ month \"10\") (<= (string->number day) 31)]\n                [(equal? month\
    \ \"12\") (<= (string->number day) 31)]\n                [(equal? month \"4\"\
    ) (<= (string->number day) 30)]\n                [(equal? month \"6\") (<= (string->number\
    \ day) 30)]\n                [(equal? month \"9\") (<= (string->number day) 30)]\n\
    \                [(equal? month \"11\") (<= (string->number day) 30)]\n      \
    \          [(equal? month \"2\") (<= (string->number day) 29)]\n             \
    \   [else #f]))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-format date)\n    (and (not (empty? date))\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (split-date date)\n    (string-split date \"-\"))\n  (define (valid-date-helper\
    \ date)\n    (and (valid-format date)\n         (and (valid-month (list-ref (split-date\
    \ date) 0))\n              (valid-day (list-ref (split-date date) 0) (", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (integer? (string->number\
    \ month))\n         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (integer? (string->number day))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (and (<= 1 (string->number year))\n              (<= (string->number year)\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([month (substring date 0\
    \ 2)]\n               [day (substring date 3 5)]\n               [year (substring\
    \ date 6 10)])\n           (and (valid-month month)\n                (valid-day\
    \ day)\n                (valid-year year)))))\n  (valid-date-format date))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                (and (>= day 1) (<= day 31)))\n\
    \               ((or (= month 4) (= month 6) (= month 9) (= month 11))\n     \
    \           (and (>= day 1) (<= day 30)))\n               ((= month 2)\n     \
    \           (and (>= day 1) (<= day 29))))))\n  (define (valid-year year)\n  \
    \  (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (string-split date #\\-)\n        \
    \ (equal? (length (string-split date #\\-)) 3)))\n  (define (valid-date-parts\
    \ date)\n    (define parts (string-split date #\\-))\n    (and (valid-month (string->number\
    \ (list-ref parts 0)))\n         (valid-day (string->number (list-ref parts 0))\
    \ (string->number (list-ref parts 1)))\n         (valid-year (string->number (list-ref\
    \ parts 2)))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond ((or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n           (<= 1 day) (<= day\
    \ 31))\n          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n   \
    \        (<= 1 day) (<= day 30))\n          ((= month 2)\n           (<= 1 day)\
    \ (<= day 29))))\n  (define (valid-year year)\n    (<= 1 year))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date \"-\")]\n    \
    \       [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (char-numeric? (string-ref month\
    \ 0))\n              (char-numeric? (string-ref month 1))\n              (and\
    \ (<= (string->number month) 12)\n                   (>= (string->number month)\
    \ 1)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (char-numeric? (string-ref day 0))\n              (char-numeric? (string-ref\
    \ day 1))\n              (and (<= (string->number day) 31)\n                 \
    \  (>= (string->number day) 1)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (char-numeric? (string-ref year 0))\n        \
    \      (char-numeric? (string-ref year 1))\n              (char-numeric? (string-ref\
    \ year 2))\n              (char-numeric? (string-ref year 3)))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (and (equal? (string-length date)\
    \ 10)\n              (and (equal? (string-ref date 2) #\\- )\n               \
    \    (equal? (string-ref date 5) #\\- )\n                   (and (valid-month\
    \ (substring date 0 2))\n                        (valid-day (substring date 3\
    \ 5))\n                        (valid-year (substring date 6 10)))))))\n  (and\
    \ (valid-format date)\n       (and (valid-month (substring date 0 2))\n      \
    \      (valid-day (substring date 3 5))\n            (valid-year (substring date\
    \ 6 10)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (>= year 0)))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)]\n           [month (string->number (list-ref date-parts 1))]\n      \
    \     [day (string->number (list-ref date-parts 2))]\n           [year (string->number\
    \ (list-ref date-parts 3))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid_month month)\n    (and\
    \ (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid_day\
    \ month day)\n    (and (integer? day)\n         (and (<= 1 day)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid_year year)\n    (and (integer?\
    \ year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid_format\
    \ date)\n    (and (string? date)\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (let ([date-list (string-split date #\\-)])\n         \
    \       (and (valid_month (string->number (list-ref date-list 0)))\n         \
    \            (valid_day (string->number (list-ref date-list 0)) (string->number\
    \ (list-ref date-list 1)))\n                     (valid_year (string->number (list-ref\
    \ date-list 2))))))))\n  (and (valid_format date)\n       (not (string=? date\
    \ \"\"))))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (not (empty? (cdr month)))\n              (and (not (empty? (cddr\
    \ month)))\n                   (and (not (empty? (cdddr month)))\n           \
    \             (and (not (empty? (cddddr month)))\n                           \
    \  (and (not (empty? (cdddddr month)))\n                                  (and\
    \ (not (empty? (cddddddr month)))\n                                       (and\
    \ (not (empty? (cdddddddr month)))\n                                         \
    \   (and (not (empty? (cddddddddr month)))\n                                 \
    \                (and (not (empty? (cdddddddddr month)))\n                   \
    \                                   (and (not (empty? (cddddddddddr month)))\n\
    \                                                           (and (not (empty?\
    \ (cdddddddddddr month)))\n                                                  \
    \              (and (not (empty? (cddddddddddddr month)))\n                  \
    \                                                   (and (not (empty? (cdddddddddddddr\
    \ month)))\n                                                                 \
    \         (and (not (empty? (cddddddddddddddr month)))\n                     \
    \                                                          (and (not (empty? (cdddddddddddddddr\
    \ month)))\n                                                                 \
    \                   (and (not (empty? (cddddddddddddddddr month)))\n         \
    \                                                                            \
    \    (and (not (empty? (cdddddddddddddddddr month)))\n                       \
    \                                                                       (and (not\
    \ (empty? (cddddddddddddddddddr month)))\n                                   \
    \                                                                (and (not (empty?\
    \ (cdddddddddddddddddddr month)))\n                                          \
    \                                                              (and (not (empty?\
    \ (cddddddddddddddddddddr month)))\n                                         \
    \                                                                    (and (not\
    \ (empty? (cdddddddddddddddddddddr month)))\n                                \
    \                                                                            \
    \      (and (not (empty? (cddddddddddddddddddddddr month)))\n", "  (cond\n   \
    \ [(empty? date) false]\n    [(regexp-match #rx\"^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])-([0-9]{4})$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^([1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])\"\
    \ date))]\n           [year (string->number (regexp-match #rx\"^([1-9]|1[0-2])-([1-9]|[12][0-9]|3[01])-([0-9]{4})$\"\
    \ date))])\n       (cond\n         [(and (>= month 1) (<= month 12))\n       \
    \   (cond\n            [(and (>= day 1) (<= day 31))\n             (cond\n   \
    \            [(and (>= year 1) (<= year 9999)) true]\n               [else false])]\n\
    \            [(and (>= day 1) (<= day 30))\n             (cond\n             \
    \  [(and (>= year 1) (<= year 9999)) true]\n               [else false])]\n  \
    \          [(and (>= day 1) (<= day 29))\n             (cond\n               [(and\
    \ (>= year 1) (<= year 9999)) true]\n               [else false])]\n         \
    \   [else false])]\n         [else false]))]\n    [else false]))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (char-numeric?\
    \ (string-ref month 0))\n              (char-numeric? (string-ref month 1))\n\
    \              (and (not (empty? (string-drop month 2)))\n                   (not\
    \ (char-numeric? (string-ref (string-drop month 2) 0))))\n              (and (not\
    \ (empty? (string-drop month 3)))\n                   (not (char-numeric? (string-ref\
    \ (string-drop month 3) 0)))))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (and (char-numeric? (string-ref day 0))\n              (char-numeric?\
    \ (string-ref day 1))\n              (and (not (empty? (string-drop day 2)))\n\
    \                   (not (char-numeric? (string-ref (string-drop day 2) 0))))\n\
    \              (and (not (empty? (string-drop day 3)))\n                   (not\
    \ (char-numeric? (string-ref (string-drop day 3) 0)))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (char-numeric? (string-ref\
    \ year 0))\n              (char-numeric? (string-ref year 1))\n              (char-numeric?\
    \ (string-ref year 2))\n              (char-numeric? (string-ref year 3))\n  \
    \            (and (not (empty? (string-drop year 4)))\n                   (not\
    \ (char-numeric? (string-ref (string-drop year 4) 0)))))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (char-numeric? (string-ref\
    \ date 0))\n              (char-numeric? (string-ref date 1))\n              (char-numeric?\
    \ (string-ref date 3))\n              (char-numeric? (string-ref date 4))\n  \
    \            (char-numeric? (string-ref date 6))\n              (char-numeric?\
    \ (string-ref date 7))\n              (char-numeric? (string", "  (define (valid-month\
    \ month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month\
    \ day)\n    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day\
    \ 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n      \
    \ (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n       (and (&gt;=\
    \ day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and (&gt;= year\
    \ 1) (&lt;= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (string-contains date\
    \ #\\_))))\n  (define (split-date date)\n    (string-split date #\\-))\n  (define\
    \ (date-&gt;int date)\n    (map string-&gt;number date))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (split-date date)]\n           [date-parts-int\
    \ (date-&gt;int date-parts)])\n      (and (valid-month (list-ref date-parts-int\
    \ 0))\n           (valid-day (list-ref date-parts-int 0) (list-ref date-parts-int\
    \ 1))\n           (valid-year (list-ref date-parts-int 2)))))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond ((or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                     (&lt;= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (&lt;=\
    \ day 30))\n                    ((= month 2)\n                     (&lt;= day\
    \ 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-list (string-&gt;list\
    \ date)]\n                [month (string-&gt;number (list-&gt;string (take date-list\
    \ 2)))]\n                [day (string-&gt;number (list-&gt;string (take (drop\
    \ date-list 3) 2)))]\n                [year (string-&gt;number (list-&gt;string\
    \ (drop date-list 6)))])\n           (and (valid-month month)\n              \
    \  (valid-day month day)\n                (valid-year year)))))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)))\n", "  (cond\n    [(empty? date)\
    \ false]\n    [(regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)\n\
    \     (let* ([month (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 1))]\n            [day (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 2))]\n            [year (string-&gt;number (regexp-match* #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date 3))])\n       (cond\n         [(or (&lt; month 1) (&gt; month 12)) false]\n\
    \         [(or (&lt; day 1) (&gt; day 31)) false]\n         [(or (&lt; year 1)\
    \ (&gt; year 9999)) false]\n         [else true]))]\n    [else false]))\n", " \
    \ (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day day month)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-format date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{2}$\" date))))\n\
    \  (define (valid-date-string date)\n    (and (not (empty? date))\n         (valid-format\
    \ date)))\n  (define (valid-date-numbers date)\n    (define (get-month date)\n\
    \      (string->number (regexp-match #rx\"^[0-9]{2}\" date)))\n    (define (get-day\
    \ date)\n      (string->number (regexp-match #rx\"-[0-9]{2}-\" date)))\n    (define\
    \ (get-year date)\n      (string->number (regexp-match #rx\"[0-9]{4}$\" date)))\n\
    \    (and (valid-month (get-month date))\n         (valid-day (get-day date) (get-month\
    \ date))\n         (valid-year (get-year date))))\n  (and (valid-date-string date)\n\
    \       (valid-date-numbers date)))\n", "  (cond\n    [(empty? date) false]\n\
    \    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)\n     (let* ([date-list (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)]\n            [month (string->number (list-ref date-list 1))]\n      \
    \      [day (string->number (list-ref date-list 2))]\n            [year (string->number\
    \ (list-ref date-list 3))])\n       (cond\n         [(and (= month 1) (= day 31))\
    \ false]\n         [(and (= month 3) (= day 31)) false]\n         [(and (= month\
    \ 5) (= day 31)) false]\n         [(and (= month 7) (= day 31)) false]\n     \
    \    [(and (= month 8) (= day 31)) false]\n         [(and (= month 10) (= day\
    \ 31)) false]\n         [(and (= month 12) (= day 31)) false]\n         [(and\
    \ (= month 4) (= day 30)) false]\n         [(and (= month 6) (= day 30)) false]\n\
    \         [(and (= month 9) (= day 30)) false]\n         [(and (= month 11) (=\
    \ day 30)) false]\n         [(and (= month 2) (= day 29)) false]\n         [(and\
    \ (= month 2) (= day 30)) false]\n         [(and (= month 2) (= day 31)) false]\n\
    \         [(and (< month 1) (> month 12)) false]\n         [(and (< day 1) (>\
    \ day 31)) false]\n         [else true]))]\n    [else false]))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (<= day 31)]\n                [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                 (<= day 30)]\n                [(= month\
    \ 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (>= year 0)))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string->number (vector-ref (split-date\
    \ date) 1)))\n  (define (get-day date)\n    (string->number (vector-ref (split-date\
    \ date) 2)))\n  (define (get-year date)\n    (string->number (vector-ref (split-date\
    \ date) 3)))\n  (and (valid-date-format date)\n       (and (valid-month (get-month\
    \ date))\n            (and (valid-day (get-month date) (get-day date))\n     \
    \            (valid-year (get-year date))))))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (let\
    \ ([date-list (string-split date \"-\")])\n    (and (not (empty? date-list))\n\
    \         (and (not (empty? (cdr date-list)))\n              (and (not (empty?\
    \ (cddr date-list)))\n                   (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\
    \ (and (and (and (and (and (and (and (and", "  (cond\n    [(empty? date) #f]\n\
    \    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n     (let* ([date-list\
    \ (string-split date #\"-\")]\n            [month (string->number (list-ref date-list\
    \ 0))]\n            [day (string->number (list-ref date-list 1))]\n          \
    \  [year (string->number (list-ref date-list 2))])\n       (cond\n         [(and\
    \ (<= 1 month 12) (<= 1 day 31)) #t]\n         [(and (<= 1 month 12) (<= 1 day\
    \ 30)) #t]\n         [(and (<= 1 month 12) (<= 1 day 29)) #t]\n         [else\
    \ #f]))]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (not (< (string->number month) 1))\n         (not (> (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (< (string->number day) 1))\n         (not (> (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (not (< (string->number year) 1))))\n  (define (valid-format date)\n    (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-month-day-combination\
    \ month day)\n    (cond\n      [(or (equal? month \"01\")\n           (equal?\
    \ month \"03\")\n           (equal? month \"05\")\n           (equal? month \"\
    07\")\n           (equal? month \"08\")\n           (equal? month \"10\")\n  \
    \         (equal? month \"12\"))\n       (not (> (string->number day) 31))]\n\
    \      [(or (equal? month \"04\")\n           (equal? month \"06\")\n        \
    \   (equal? month \"09\")\n           (equal? month \"11\"))\n       (not (> (string->number\
    \ day) 30))]\n      [(equal? month \"02\")\n       (not (> (string->number day)\
    \ 29))]))\n  (define (valid-leap-year year)\n    (and (equal? (modulo (string->number\
    \ year) 4) 0)\n         (not (equal? (modulo (string->number year) 100) 0))\n\
    \         (or (equal? (modulo (string->number year) 400) 0)\n             (not\
    \ (equal? (modulo (string->number year) 400) 0)))))\n  (define (valid-leap-month-day-combination\
    \ month day year)\n    (and (equal? month \"02\")\n         (equal? (string->number\
    \ day) 29)\n         (valid-leap-year year)))\n  (define (valid-month-day", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (<= day 31)]\n                [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                 (<= day 30)]\n                [(= month\
    \ 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (>= year 0)))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (let* ([date-parts (string-split\
    \ date #\\-)]\n              [month (string->number (list-ref date-parts 0))]\n\
    \              [day (string->number (list-ref date-parts 1))]\n              [year\
    \ (string->number (list-ref date-parts 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))\n",
  "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([month (string->number (substring date 0 2))]\n         \
    \   [day (string->number (substring date 3 5))]\n            [year (string->number\
    \ (substring date 6 10))])\n       (cond\n         [(or (< month 1) (> month 12))\
    \ false]\n         [(or (< day 1) (> day 31)) false]\n         [(and (= month\
    \ 2) (or (< day 1) (> day 29))) false]\n         [(and (or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (or (< day 1) (> day 30))) false]\n         [else\
    \ true]))]\n    [else false]))\n", "  (cond [(empty? date) false]\n        [(regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date) true]\n \
    \       [else false]))\n", "  (define (valid-month month)\n    (and (&gt;= month\
    \ 1) (&lt;= month 12)))\n  (define (valid-day day month)\n    (cond\n      [(and\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n       (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;= day\
    \ 30))]\n      [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (string-split date #\\-))\n  (define (get-month date)\n\
    \    (string-&gt;number (list-ref (split-date date) 0)))\n  (define (get-day date)\n\
    \    (string-&gt;number (list-ref (split-date date) 1)))\n  (define (get-year\
    \ date)\n    (string-&gt;number (list-ref (split-date date) 2)))\n  (and (valid-date-format\
    \ date)\n       (valid-month (get-month date))\n       (valid-day (get-day date)\
    \ (get-month date))\n       (valid-year (get-year date))))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date \"-\")]\n            \
    \    [month (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (cond\n           [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n           [(or (= month 4) (= month 6) (= month 9) (= month 11))\
    \ (<= day 30)]\n           [(= month 2) (<= day 29)])))\n  (define (valid-year\
    \ year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let*\
    \ ([date-list (string-split date #\\-)]\n                [month (string->number\
    \ (list-ref date-list 0))]\n                [day (string->number (list-ref date-list\
    \ 1))]\n                [year (string->number (list-ref date-list 2))])\n    \
    \       (and (valid-month month)\n                (valid-day month day)\n    \
    \            (valid-year year)))))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-date-format date)))\n", "  (define (valid-month month)\n    (and (<=\
    \ 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and (<= 1 day)\n\
    \         (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                (<= day 31))\n              \
    \ ((or (= month 4) (= month 6) (= month 9) (= month 11))\n                (<=\
    \ day 30))\n               ((= month 2)\n                (<= day 29)))))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (empty? date))\n       (valid-date-format date)\n       (let* ([date-parts\
    \ (string-split date \"-\")]\n              [month (string->number (list-ref date-parts\
    \ 0))]\n              [day (string->number (list-ref date-parts 1))]\n       \
    \       [year (string->number (list-ref date-parts 2))])\n         (and (valid-month\
    \ month)\n              (valid-day month day)\n              (valid-year year)))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day month day)\n    (and (not (empty? day))\n         (and (<=\
    \ 1 (string->number day))\n              (cond\n                [(or (= (string->number\
    \ month) 1)\n                     (= (string->number month) 3)\n             \
    \        (= (string->number month) 5)\n                     (= (string->number\
    \ month) 7)\n                     (= (string->number month) 8)\n             \
    \        (= (string->number month) 10)\n                     (= (string->number\
    \ month) 12))\n                 (<= (string->number day) 31)]\n              \
    \  [(or (= (string->number month) 4)\n                     (= (string->number\
    \ month) 6)\n                     (= (string->number month) 9)\n             \
    \        (= (string->number month) 11))\n                 (<= (string->number\
    \ day) 30)]\n                [(= (string->number month) 2)\n                 (<=\
    \ (string->number day) 29)]\n                [else #f])))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (and (valid-month (substring date 0 2))\n             \
    \      (valid-day (substring date 0 2) (substring date 3 5))\n               \
    \    (valid-year (substring date 6))))))\n  (valid-date-format date))\n", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (not (empty?\
    \ month))\n           (and (&lt;= 1 (string-&gt;number month))\n             \
    \   (&lt;= (string-&gt;number month) 12))))\n    (define (valid-day day)\n   \
    \   (and (not (empty? day))\n           (and (&lt;= 1 (string-&gt;number day))\n\
    \                (&lt;= (string-&gt;number day) 31))))\n    (define (valid-year\
    \ year)\n      (and (not (empty? year))\n           (and (&lt;= 1 (string-&gt;number\
    \ year))\n                (&lt;= (string-&gt;number year) 9999))))\n    (define\
    \ (valid-date-format date)\n      (and (not (empty? date))\n           (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (valid-month-day-format\
    \ date)\n      (and (not (empty? date))\n           (regexp-match #rx\"^[0-9]{2}-[0-9]{2}$\"\
    \ date)))\n    (define (valid-month-year-format date)\n      (and (not (empty?\
    \ date))\n           (regexp-match #rx\"^[0-9]{2}-[0-9]{4}$\" date)))\n    (define\
    \ (valid-day-year-format date)\n      (and (not (empty? date))\n           (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{4}$\" date)))\n    (define (valid-month-day-year-format\
    \ date)\n      (and (not (empty? date))\n           (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-month-day-year-format date)\n      (and (not (empty?\
    \ date))\n          ", "  (define (valid-month month)\n    (and (<= 1 month) (<=\
    \ month 12)))\n  (define (valid-day month day)\n    (and (<= 1 day)\n        \
    \ (cond\n           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n           [(= month 2) (<= day 29)])))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-parts 0)))\n                (valid-day\
    \ (string->number (list-ref date-parts 0)) (string->number (list-ref date-parts\
    \ 1)))\n                (valid-year (string->number (list-ref date-parts 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (cond\n\
    \    [(empty? date) #f]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date) #t]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (<= day 31)]\n             \
    \   [(or (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<=\
    \ day 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\\-)]\n              \
    \  [month (string->number (list-ref date-list 0))]\n                [day (string->number\
    \ (list-ref date-list 1))]\n                [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (not (empty? month))\n         (not (or (negative? (string->number month))\n\
    \                  (positive? (string->number month))\n                  (> (string->number\
    \ month) 12)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n   \
    \      (not (or (negative? (string->number day))\n                  (positive?\
    \ (string->number day))\n                  (> (string->number day) 31)))))\n \
    \ (define (valid-year year)\n    (and (not (empty? year))\n         (not (or (negative?\
    \ (string->number year))\n                  (positive? (string->number year))))))\n\
    \  (define (valid-format date)\n    (and (not (empty? date))\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (and (valid-format date)\n  \
    \     (valid-month (substring date 0 2))\n       (valid-day (substring date 3\
    \ 5))\n       (valid-year (substring date 6 10))))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^\\d{2}-\\d{2}-\\\
    d{4}$\" date)))\n  (define (split-date date)\n    (string-split date #\\-))\n\
    \  (define (valid-date-parts date)\n    (and (valid-month (string->number (list-ref\
    \ (split-date date) 0)))\n         (valid-day (string->number (list-ref (split-date\
    \ date) 0)) (string->number (list-ref (split-date date) 1)))\n         (valid-year\
    \ (string->number (list-ref (split-date date) 2)))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (string-split date #\\-)\n    (map\
    \ string->number (string-split date #\\-)))\n  (define (valid-date-parts date)\n\
    \    (let ([date-parts (split-date date)])\n      (and (valid-month (list-ref\
    \ date-parts 0))\n           (valid-day (list-ref date-parts 0) (list-ref date-parts\
    \ 1))\n           (valid-year (list-ref date-parts 2)))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (<= 1 day)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
