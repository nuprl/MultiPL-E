name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  (define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (regexp-match? #rx\"^I\" S))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (regexp-match? #rx\"^I\" S))\n",
  "  (regexp-match #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"\
    ))\n", "  (regexp-match #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n", " \
    \ (and (string=? (substring S 0 1) \"I\")\n       (or (string=? (substring S (string-length\
    \ S) (string-length S)) \".\")\n           (string=? (substring S (string-length\
    \ S) (string-length S)) \"?\")\n           (string=? (substring S (string-length\
    \ S) (string-length S)) \"!\"))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n", "  (and (string-prefix? \"I\" S)\n       (or (string-suffix? \"\
    .\" S)\n           (string-suffix? \"?\" S)\n           (string-suffix? \"!\"\
    \ S))))\n", "  (regexp-match #rx\"^I\" S))\n", "  (equal? (substring S 0 1) \"\
    I\"))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\"\
    ) (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond\n    [(string=? S \"I\") #t]\n    [else #f]))\n", "  (string-contains S\
    \ \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n",
  "  (regexp-match? #rx\"^I\" S))\n", "  (and (string-prefix? \"I\" S)\n       (string-suffix?\
    \ \".\" S)))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"\
    ))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", " \
    \ (regexp-match #rx\"^I \" S))\n", "  (cond\n    [(string=? S \"I\") #t]\n   \
    \ [else #f]))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"\
    I \"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (and (string-prefix? \"I\" S)\n\
    \       (or (string-suffix? \".\" S)\n           (string-suffix? \"?\" S)\n  \
    \         (string-suffix? \"!\" S))))\n", "  (regexp-match #rx\"^I\" S))\n", " \
    \ (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (string-contains\
    \ S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\"\
    \ S))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n",
  "  (cond\n    [(string=? S \"I\") #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(string=? S \"I\") #t]\n    [else\
    \ #f]))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n",
  "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n", "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"^I\"\
    \ S))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (cond\n    [(empty? S) #f]\n    [(string=? (substring S\
    \ 0 1) \"I\") #t]\n    [else (is_bored (substring S 1))]))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (and (equal? (substring S 0 1) \"I\")\n       (or (equal?\
    \ (substring S (sub1 (string-length S)) (string-length S)) \".\")\n          \
    \ (equal? (substring S (sub1 (string-length S)) (string-length S)) \"?\")\n  \
    \         (equal? (substring S (sub1 (string-length S)) (string-length S)) \"\
    !\"))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"\
    I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\"\
    \ S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (and (string=? (substring S 0\
    \ 1) \"I\")\n       (or (string=? (substring S (sub1 (string-length S)) (string-length\
    \ S)) \".\")\n           (string=? (substring S (sub1 (string-length S)) (string-length\
    \ S)) \"?\")\n           (string=? (substring S (sub1 (string-length S)) (string-length\
    \ S)) \"!\"))))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"\
    I\"))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n",
  "  (regexp-match #rx\"^I\" S))\n", "  (and (string-contains S \"I\")\n       (string-contains\
    \ S \".\")\n       (not (string-contains S \"?\"))\n       (not (string-contains\
    \ S \"!\"))))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"\
    I\"))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n",
  '  (regexp-match? #rx"^I" S))', "  (string-contains S \"I\"))\n", "  (string-contains\
    \ S \"I \"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"\
    ))\n", "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"^I\" S))\n", " \
    \ (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))", "  (string-contains S \"\
    I\"))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n",
  "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n", "  (regexp-match\
    \ #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains S\
    \ \"I\"))\n", "  (and (string-prefix? \"I\" S)\n       (string-contains S #\\\
    .)\n       (not (string-contains S #\\?))\n       (not (string-contains S #\\\
    !))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\"\
    ) (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (if (string-contains S \"I\")\n      1\n      0))", "  (regexp-match? #rx\"^I\"\
    \ S))\n", "  (string-contains S \"I\"))\n", "  (string-prefix? \"I\" S))\n", " \
    \ (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"I \"))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) #f]\n    [(string=? (string-take S 1) \"I\") #t]\n    [else (is_bored (string-drop\
    \ S 1))]))\n", "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"^I\" S))\n",
  "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (cond\n    [(string=? S \"I\") #t]\n    [else #f]))\n",
  "  (regexp-match #rx\"^I\" S))\n", "  (if (string-contains S \"I\")\n      (string-length\
    \ S)\n      0))\n", "  (and (string=? (substring S 0 1) \"I\")\n       (string=?\
    \ (substring S (sub1 (string-length S)) (string-length S)) \".\")))\n", "  (regexp-match\
    \ #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"\
    ^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n",
  "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (string-contains S \"I\"\
    ))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n", " \
    \ (regexp-match #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (cond [(empty? S) 0]\n \
    \       [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n        [else\
    \ (is_bored (rest S))]))\n", "  (string-contains S \"I\"))\n", "  (string-contains\
    \ S \"I\"))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"I\"\
    ))\n", '  (regexp-match #rx"^I" S))', "  (cond\n    [(string=? S \"I\") #t]\n\
    \    [else #f]))\n", "  (regexp-match #rx\"^I\" S))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (string-contains S \"I\"))\n",
  "  (string-contains? S \"I\"))\n", "  (and (string-contains S \"I\")\n       (string-contains\
    \ S \".\")))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"\
    I\"))\n", "  (string-contains S \"I\"))\n", '  (regexp-match? #rx"^I" S))', " \
    \ (regexp-match? #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"\
    ^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n",
  "  (cond\n    [(empty? S) false]\n    [(equal? (first S) \"I\") true]\n    [else\
    \ (is_bored (rest S))]))\n", "  (string-contains S \"I\"))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"\
    I\"))\n", "  (regexp-match #rx\"^I\" S))\n", "  (cond\n    [(empty? S) #f]\n \
    \   [(string=? (substring S 0 1) \"I\") #t]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (string-contains S \"I\"))\n", "  (string-contains S \"I\"))\n",
  "  (string-contains S \"I\"))\n", "  (string-contains S \"I \"))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\"\
    \ S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n",
  "  (string-contains S \"I\"))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (regexp-match? #rx\"\
    ^I\" S))\n", "  (string-contains S \"I\"))\n", "  (regexp-match #rx\"^I\" S))\n",
  "  (string-contains S \"I\"))\n", "  (string-contains S \"I \"))\n", "  (regexp-match\
    \ #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n", "  (and (string-contains\
    \ S \"I\")\n       (string-contains S \".\")\n       (not (string-contains S \"\
    ?\"))\n       (not (string-contains S \"!\"))))\n", "  (regexp-match? #rx\"^I\"\
    \ S))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (regexp-match? #rx\"^I\"\
    \ S))\n", "  (string-contains S \"I\"))\n", "  (and (string=? (substring S 0 1)\
    \ \"I\")\n       (not (string=? (substring S 1 2) \" \"))))\n", "  (regexp-match?\
    \ #rx\"^I\" S))\n", "  (regexp-match #rx\"^I\" S))\n", "  (regexp-match #rx\"\
    ^I\" S))\n", "  (string-contains S \"I\"))\n", "  (and (string-prefix? \"I\" S)\n\
    \       (string-prefix? \" \" (substring S 1))))\n", "  (and (string-contains\
    \ S \"I\")\n       (string-contains S \".\")\n       (string-contains S \"?\"\
    )\n       (string-contains S \"!\")))\n", "  (string-contains S \"I\"))\n", " \
    \ (regexp-match #rx\"^I\" S))\n", "  (cond\n    [(string=? S \"I\") 1]\n    [else\
    \ 0]))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n",
  "  (regexp-match? #rx\"^I\" S))\n", "  (regexp-match? #rx\"^I\" S))\n", "  (string-contains\
    \ S \"I\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
