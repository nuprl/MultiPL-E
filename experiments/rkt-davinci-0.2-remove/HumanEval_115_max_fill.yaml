name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; Example 2:\n;; Example 3:\n;; Constraints:\n;; * all wells have\
  \ the same length\n;; * 1 <= grid.length <= 10^2\n;; * 1 <= grid[:,1].length <=\
  \ 10^2\n;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity <= 10\n(define (max_fill grid\
  \ capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([grid grid] [capacity capacity] [count 0])\n    (if (null?\
    \ grid)\n        count\n        (let* ([row (car grid)]\n               [max (apply\
    \ max row)]\n               [new-row (map (lambda (x) (- max x)) row)])\n    \
    \      (loop (cdr grid) capacity (+ count (ceiling (/ max capacity))))))))\n",
  "  (define (max_fill_helper grid capacity)\n    (if (empty? grid)\n        0\n \
    \       (let* ([row (first grid)]\n               [max-fill (min capacity (apply\
    \ max row))])\n          (+ max-fill (max_fill_helper (rest grid) capacity)))))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [max-fill (apply max row)])\n          (if (> max-fill capacity)\n     \
    \         (+ (max_fill-helper (cdr grid) capacity)\n                 (quotient\
    \ max-fill capacity))\n              (max_fill-helper (cdr grid) capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (fill grid capacity)\n    (define\
    \ (fill-row row capacity)\n      (cond [(empty? row) 0]\n            [(= capacity\
    \ 0) 0]\n            [(= capacity 1) (car row)]\n            [else (max (car row)\
    \ (fill-row (cdr row) (- capacity 1)))]))\n    (cond [(empty? grid) 0]\n     \
    \     [else (+ (fill-row (car grid) capacity) (fill (cdr grid) capacity))]))\n\
    \  (define (empty? lst)\n    (cond [(null? lst) #t]\n          [(= (car lst) 0)\
    \ #t]\n          [else (empty? (cdr lst))]))\n  (fill grid capacity))\n", "  (define\
    \ (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [max-row (apply max row)]\n              \
    \ [max-grid (apply max (map (lambda (row) (apply max row)) (cdr grid)))]\n   \
    \            [max-fill (min max-row max-grid)])\n          (+ max-fill (max_fill-helper\
    \ (map (lambda (row) (map (lambda (x) (- x max-fill)) row)) (cdr grid)) capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (let* ([row (first grid)]\n    \
    \          [max-fill (min capacity (count row))]\n              [new-row (sublist\
    \ row max-fill)])\n         (+ max-fill (max-fill-helper (cons new-row (rest grid))\
    \ capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-col col)\n      (if (zero? col)\n          0\n     \
    \     (if (zero? (vector-ref row col))\n              (fill-col (sub1 col))\n\
    \              (if (&lt;= capacity (vector-ref row col))\n                  (vector-ref\
    \ row col)\n                  capacity))))\n    (fill-col (vector-length row)))\n\
    \  (define (fill-grid grid)\n    (if (null? grid)\n        0\n        (+ (fill-row\
    \ (car grid))\n           (fill-grid (cdr grid)))))\n  (fill-grid grid))\n</code>\n\
    I am trying to solve this problem using Racket.\nI am not sure if this is the\
    \ best way to solve this problem, but I am trying to fill each row, and then add\
    \ the number of times I filled each row.\nI am not sure how to fill each row.\n\
    I am trying to fill each row from the right, and if the current cell is 0, I don't\
    \ fill it, and if it is 1, I fill it with the capacity.\nI am not sure how to\
    \ do this.\nI am trying to use a helper function to fill each row, and then use\
    \ another helper function to add the number of times I filled each row.\nI am\
    \ not sure how to do this.\nI am not sure how to fill each row.\nI am trying to\
    \ fill each row from the right, and if the current cell is 0, I don't fill it,\
    \ and if it is 1, I fill it with the capacity.\nI am not sure how to do this.\n\
    I am trying to use a helper function to fill each row, and then use another helper\
    \ function to add the number of times I filled each row.\nI am not sure how to\
    \ do this.\nI am not sure how to fill each row.\nI am trying to fill each row\
    \ from the right, and if the current cell is 0, I don't fill it, and if it is\
    \ 1, I fill it with the capacity.\nI am not sure how to do this.\nI am trying\
    \ to use a helper function to fill each row, and then use another helper function\
    \ to add the number of times I filled each row.\nI am not sure how to do this.\n\
    I am not sure", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(null? grid) 0]\n        [(= capacity\
    \ (apply max (car grid))) (max-fill-helper (cdr grid) capacity)]\n        [else\
    \ (+ 1 (max-fill-helper-helper (cdr grid) capacity))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (fill grid\
    \ capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-fill (min capacity row-len)]\n               [row-fill-sum\
    \ (* row-fill row-sum)])\n          (+ row-fill-sum (fill (cdr grid) capacity)))))\n\
    \  (define (max_fill_helper grid capacity)\n    (if (= capacity 0)\n        0\n\
    \        (let* ([fill (fill grid capacity)]\n               [next-fill (max_fill_helper\
    \ grid (- capacity 1))])\n          (if (> fill next-fill)\n              fill\n\
    \              next-fill))))\n  (max_fill_helper grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else (max (max_fill_helper\
    \ (rest grid) capacity)\n                 (max_fill_helper (rest grid) (- capacity\
    \ (first grid))))]))\n  (max_fill_helper grid capacity))\n", "  (let* ([max-fill\
    \ (apply max grid)]\n         [num-fills (quotient max-fill capacity)])\n    (if\
    \ (zero? (modulo max-fill capacity))\n        num-fills\n        (+ num-fills\
    \ 1))))\n", "  (define (max_fill-helper grid capacity acc)\n    (if (empty? grid)\n\
    \        acc\n        (let ([row (first grid)])\n          (max_fill-helper (rest\
    \ grid) capacity\n                           (+ acc (max capacity (- (apply max\
    \ row) (apply min row))))))))\n  (max_fill-helper grid capacity 0))\n", "  (define\
    \ (fill-wells grid capacity)\n    (cond [(empty? grid) 0]\n          [(<= capacity\
    \ (sum (first grid)))\n           (+ capacity (fill-wells (rest grid) capacity))]\n\
    \          [else\n           (+ (sum (first grid)) (fill-wells (rest grid) capacity))]))\n\
    \  (define (sum lst)\n    (cond [(empty? lst) 0]\n          [else (+ (first lst)\
    \ (sum (rest lst)))]))\n  (define (empty? lst)\n    (cond [(null? lst) true]\n\
    \          [else false]))\n  (define (rest lst)\n    (cdr lst))\n  (define (first\
    \ lst)\n    (car lst))\n  (define (max lst)\n    (cond [(empty? lst) 0]\n    \
    \      [(< (first lst) (max (rest lst)))\n           (max (rest lst))]\n     \
    \     [else (first lst)]))\n  (define (min lst)\n    (cond [(empty? lst) 0]\n\
    \          [(> (first lst) (min (rest lst)))\n           (min (rest lst))]\n \
    \         [else (first lst)]))\n  (define (div-round-up n d)\n    (cond [(<= n\
    \ d) 1]\n          [else (+ 1 (div-round-up (- n d) d))]))\n  (define (div-round-down\
    \ n d)\n    (cond [(<= n d) 0]\n          [else (+ 1 (div-round-down (- n d) d))]))\n\
    \  (define (div-round n d)\n    (cond [(<= n d) 0]\n          [else (+ 1 (div-round\
    \ (- n d) d))]))\n  (define (div-floor n d)\n    (cond [(<= n d) 0]\n        \
    \  [else (+ 1 (div-floor (- n d) d))]))\n  (define (div-ceil n d)\n    (cond [(<=\
    \ n d) 1]\n          [else (+ 1 (div-ceil (- n d) d))]))\n  (define", "  (define\
    \ (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(=\
    \ capacity (apply max (first grid)))\n           (+ 1 (max_fill-helper (rest grid)\
    \ capacity))]\n          [else (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (fill-wells wells capacity)\n    (if (empty?\
    \ wells)\n        0\n        (let* ([well (first wells)]\n               [filled\
    \ (min capacity (apply max well))])\n          (+ filled (fill-wells (rest wells)\
    \ (- capacity filled))))))\n  (define (empty-wells wells capacity)\n    (if (empty?\
    \ wells)\n        0\n        (let* ([well (first wells)]\n               [emptied\
    \ (min capacity (apply min well))])\n          (+ emptied (empty-wells (rest wells)\
    \ (- capacity emptied))))))\n  (define (fill-and-empty-wells wells capacity)\n\
    \    (define (fill-and-empty-wells-iter wells capacity)\n      (if (empty? wells)\n\
    \          0\n          (let* ([well (first wells)]\n                 [filled\
    \ (min capacity (apply max well))]\n                 [emptied (min capacity (apply\
    \ min well))])\n            (+ filled emptied (fill-and-empty-wells-iter (rest\
    \ wells) (- capacity filled emptied))))))\n    (if (empty? wells)\n        0\n\
    \        (let* ([well (first wells)]\n               [filled (min capacity (apply\
    \ max well))]\n               [emptied (min capacity (apply min well))])\n   \
    \       (+ filled emptied (fill-and-empty-wells-iter (rest wells) (- capacity\
    \ filled emptied))))))\n  (define (fill-and-empty-wells-iter wells capacity)\n\
    \    (if (empty? wells)\n        0\n        (let* ([well (first wells)]\n    \
    \           [filled (min capacity (apply max well))]\n               [emptied\
    \ (min capacity (apply min well))])\n          (+ filled emptied (fill-and-empty-wells-iter\
    \ (rest wells) (- capacity filled emptied))))))\n  (define (fill-and-empty-wells-iter\
    \ wells capacity)\n    (if (empty? wells)\n        0\n        (let* ([well (first\
    \ wells)]\n               [filled (min capacity (apply max well))]\n         \
    \      [emptied (min capacity (apply min well))])\n          (+ filled emptied\
    \ (fill-and-empty-wells-iter (rest wells) (- capacity filled emptied))))))\n \
    \ (define (", "  (define (max-row row)\n    (foldl (lambda (x y) (if (> x y) x\
    \ y)) 0 row))\n  (define (fill-row row capacity)\n    (define (fill-cell cell\
    \ capacity)\n      (if (> cell capacity)\n          capacity\n          cell))\n\
    \    (map (lambda (x) (fill-cell x capacity)) row))\n  (define (fill-grid grid\
    \ capacity)\n    (map (lambda (x) (fill-row x capacity)) grid))\n  (define (fill-grid-until-empty\
    \ grid capacity)\n    (if (zero? (max-row grid))\n        0\n        (+ 1 (fill-grid-until-empty\
    \ (fill-grid grid capacity) capacity))))\n  (fill-grid-until-empty grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(= capacity (sum (first grid))) (max_fill-helper (rest grid) capacity)]\n\
    \      [else (+ 1 (max_fill-helper (rest grid) capacity))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-sum (apply\
    \ + row)]\n               [row-max (apply max row)]\n               [row-max-count\
    \ (count row-max row)]\n               [row-max-count-max (apply max row-max-count)]\n\
    \               [row-max-count-max-count (count row-max-count-max row-max-count)]\n\
    \               [row-max-count-max-count-max (apply max row-max-count-max-count)]\n\
    \               [row-max-count-max-count-max-count (count row-max-count-max-count-max\
    \ row-max-count-max-count)]\n               [row-max-count-max-count-max-count-max\
    \ (apply max row-max-count-max-count-max-count)]\n               [row-max-count-max-count-max-count-max-count\
    \ (count row-max-count-max-count-max-count-max row-max-count-max-count-max-count-max)]\n\
    \               [row-max-count-max-count-max-count-max-count-max (apply max row-max-count-max-count-max-count-max-count)]\n\
    \               [row-max-count-max-count-max-count-max-count-max-count (count\
    \ row-max-count-max-count-max-count-max-count-max row-max-count-max-count-max-count-max-count-max)]\n\
    \               [row-max-count-max-count-max-count-max-count-max-count-max (apply\
    \ max row-max-count-max-count-max-count-max-count-max-count)]\n              \
    \ [row-max-count-max-count-max-count-max-count-max-count-max-count (count row-max-count-max-count-max-count-max-count-max-count-max\
    \ row-max-count-max-count-max-count-max-count-max-count-max)]\n              ",
  "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let ([row (car grid)])\n          (if (null? row)\n              0\n \
    \             (let ([fill (min capacity (apply max row))])\n                (+\
    \ fill (max_fill-helper (cdr grid) capacity)))))))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (let* ([row (first grid)]\n              [max-fill (min capacity (count\
    \ row))]\n              [new-grid (map (lambda (x) (if (zero? x) x (- x max-fill)))\
    \ row)])\n         (+ max-fill (max_fill_helper (cons new-grid (rest grid)) capacity)))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [max-fill-count (quotient row-sum\
    \ capacity)]\n               [remainder (modulo row-sum capacity)])\n        \
    \  (+ max-fill-count\n             (if (zero? remainder)\n                 0\n\
    \                 1)))))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= (first row) 1) (fill-row (rest row) (sub1 capacity))]\n           [else\
    \ (fill-row (rest row) capacity)]))\n       (define (fill-grid grid capacity)\n\
    \         (cond\n           [(empty? grid) capacity]\n           [else (fill-grid\
    \ (rest grid) (fill-row (first grid) capacity))]))\n       (define (fill-rows\
    \ grid capacity)\n         (cond\n           [(empty? grid) capacity]\n      \
    \     [(empty? (first grid)) (fill-rows (rest grid) capacity)]\n           [else\
    \ (fill-rows (rest grid) (fill-row (first grid) capacity))]))\n       (+ (fill-grid\
    \ grid capacity) (max_fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (define (fill-row row capacity)\n    \
    \     (cond\n           [(empty? row) capacity]\n           [(zero? capacity)\
    \ 0]\n           [(zero? (first row)) (fill-row (rest row) capacity)]\n      \
    \     [else (fill-row (rest row) (- capacity 1))]))\n       (+ 1 (max_fill-helper\
    \ (rest grid) (fill-row (first grid) capacity)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(= capacity 0) 0]\n          [(= capacity (length (first grid))) 1]\n  \
    \        [else (max (max-fill-helper (rest grid) capacity)\n                 \
    \    (max-fill-helper (rest grid) (- capacity (length (first grid)))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-sum (apply\
    \ + row)]\n               [row-max (apply max row)]\n               [row-min (apply\
    \ min row)]\n               [row-fill (if (> row-sum capacity)\n             \
    \                (quotient row-sum capacity)\n                             0)])\n\
    \          (+ row-fill (max_fill_helper (cdr grid) capacity)))))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(>= capacity (apply max (first grid)))\n           (max_fill_helper\
    \ (rest grid) capacity)]\n          [else\n           (+ 1 (max_fill_helper (rest\
    \ grid) capacity))]))\n  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) 0]\n           [(= (first\
    \ row) 1) (add1 (fill-row (rest row) (sub1 capacity)))]\n           [else (fill-row\
    \ (rest row) capacity)]))\n       (add1 (max-fill-helper (rest grid) capacity)\
    \ (fill-row (first grid) capacity))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (let*\n           ([row (first grid)]\n            [rest (rest grid)]\n\
    \            [max-fill (max-fill-helper rest capacity)]\n            [fill (min\
    \ capacity (apply max row))])\n         (+ fill max-fill))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill_row row)\n    (define (fill_wells wells)\n\
    \      (if (null? wells)\n          0\n          (let ([well (car wells)])\n \
    \           (if (>= well capacity)\n                (add1 (fill_wells (cdr wells)))\n\
    \                (let ([next-well (car (cdr wells))])\n                  (if (>=\
    \ (+ well next-well) capacity)\n                      (add1 (fill_wells (cdr wells)))\n\
    \                      (add1 (fill_wells (cdr wells)))\n                     \
    \ )))))))\n    (fill_wells row))\n  (define (fill_grid grid)\n    (if (null? grid)\n\
    \        0\n        (add1 (fill_row (car grid))\n              (fill_grid (cdr\
    \ grid)))))\n  (fill_grid grid))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(= capacity (apply max (first grid)))\n\
    \           (max-fill-helper (rest grid) capacity)]\n          [else (max-fill-helper\
    \ (rest grid) capacity)]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [row-sum (apply + row)]\n               [num-buckets\
    \ (ceiling (/ row-sum capacity))])\n          (+ num-buckets (max_fill-helper\
    \ (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (fill-row row)\n    (define (fill-wells wells)\n      (if (null? wells)\n  \
    \        0\n          (let* ([well (car wells)]\n                 [next-wells\
    \ (cdr wells)]\n                 [next-well (car next-wells)]\n              \
    \   [next-well-filled? (and (not (null? next-wells))\n                       \
    \                  (not (null? next-well)))])\n            (cond [(null? well)\n\
    \                   (fill-wells next-wells)]\n                  [next-well-filled?\n\
    \                   (if (>= well capacity)\n                       (begin (set!\
    \ well (- well capacity))\n                              (+ 1 (fill-wells next-wells)))\n\
    \                       (begin (set! well 0)\n                              (set!\
    \ next-well (- next-well (- capacity well)))\n                              (fill-wells\
    \ next-wells)))]\n                  [else\n                   (if (>= well capacity)\n\
    \                       (begin (set! well (- well capacity))\n               \
    \               (+ 1 (fill-wells next-wells)))\n                       (begin\
    \ (set! well 0)\n                              (fill-wells next-wells)))]))))\n\
    \    (fill-wells row))\n  (define (fill-grid grid)\n    (if (null? grid)\n   \
    \     0\n        (+ (fill-row (car grid))\n           (fill-grid (cdr grid)))))\n\
    \  (fill-grid grid))\n", "  (define (max_fill_helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper (rest\
    \ grid) capacity)]\n      [else\n       (define row (first grid))\n       (define\
    \ row-sum (apply + row))\n       (define row-max (apply max row))\n       (define\
    \ row-min (apply min row))\n       (define row-max-index (index-of row-max row))\n\
    \       (define row-min-index (index-of row-min row))\n       (define row-max-fill\
    \ (min capacity row-max))\n       (define row-min-fill (min capacity row-min))\n\
    \       (define row-max-fill-index (index-of row-max-fill row))\n       (define\
    \ row-min-fill-index (index-of row-min-fill row))\n       (define row-max-fill-left\
    \ (sublist row 0 row-max-fill-index))\n       (define row-max-fill-right (sublist\
    \ row row-max-fill-index))\n       (define row-min-fill-left (sublist row 0 row-min-fill-index))\n\
    \       (define row-min-fill-right (sublist row row-min-fill-index))\n       (define\
    \ row-max-fill-left-sum (apply + row-max-fill-left))\n       (define row-max-fill-right-sum\
    \ (apply + row-max-fill-right))\n       (define row-min-fill-left-sum (apply +\
    \ row-min-fill-left))\n       (define row-min-fill-right-sum (apply + row-min-fill-right))\n\
    \       (define row-max-fill-left-max (apply max row-max-fill-left))\n       (define\
    \ row-max-fill-right-max (apply max row-max-fill-right))\n       (define row-min-fill-left-max\
    \ (apply max row-min-fill-left))\n       (define row-min-fill-right-max (apply\
    \ max row-min-fill-right))\n       (define row-max-fill-left-min (apply min",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(>= (count (first grid)) capacity) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (add1 (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n\
    \          [(= capacity (count (first grid) #\\1)) (max_fill_helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max_fill_helper (rest grid) capacity))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [buckets (ceiling (/ row-sum capacity))])\n\
    \          (+ buckets (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper (rest\
    \ grid) capacity)]\n      [else (max (max_fill_helper (rest grid) capacity)\n\
    \                 (max_fill_helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (fill-row row)\n    (let loop\
    \ ((row row) (i 0) (count 0))\n      (cond ((= i (length row)) count)\n      \
    \      ((= (vector-ref row i) 1)\n             (loop (vector-set! row i 0) (+\
    \ i 1) (+ count 1)))\n            (else (loop row (+ i 1) count)))))\n  (let loop\
    \ ((grid grid) (count 0))\n    (cond ((empty? grid) count)\n          ((= (fill-row\
    \ (first grid)) capacity)\n           (loop (rest grid) (+ count 1)))\n      \
    \    (else (loop (rest grid) count)))))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [row-max (apply max row)]\n    \
    \           [row-min (apply min row)]\n               [row-fill (if (< row-sum\
    \ capacity)\n                             0\n                             (+ row-min\
    \ (- capacity row-max)))]\n               [next-grid (cdr grid)])\n          (+\
    \ row-fill (max-fill-helper next-grid capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [filled (min capacity (apply max row))])\n\
    \          (+ filled (fill (cdr grid) (- capacity filled))))))\n  (fill grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-sum (apply + row)]\n     \
    \          [row-max (apply max row)]\n               [row-max-count (count row-max\
    \ row)]\n               [row-max-count-per-bucket (quotient row-max-count capacity)]\n\
    \               [row-max-count-per-bucket-remainder (remainder row-max-count capacity)])\n\
    \          (+ row-max-count-per-bucket\n             (if (zero? row-max-count-per-bucket-remainder)\n\
    \                 0\n                 1)\n             (max_fill_helper (cdr grid)\
    \ capacity)))))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let ([row (car grid)])\n\
    \          (if (null? row)\n              0\n              (let ([fill (min capacity\
    \ (apply max row))])\n                (+ fill (max_fill-helper (cdr grid) capacity)))))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max_fill-helper (rest grid) capacity)\n\
    \                 (max_fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n          [(> capacity (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max_fill-helper (rest grid) (-\
    \ capacity (first grid))))]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max_fill_helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max_fill_helper (rest grid) capacity)]\n          [else (max (max_fill_helper\
    \ (rest grid) capacity)\n                     (max_fill_helper (rest grid) (-\
    \ capacity (first grid))))]))\n  (max_fill_helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ (count 1 (first grid))) (add1 (max-fill-helper (rest grid) capacity))]\n   \
    \       [else (max-fill-helper (rest grid) capacity)]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (empty? grid)\n\
    \        0\n        (let* ([row (first grid)]\n               [row-len (length\
    \ row)]\n               [row-filled (map (lambda (x) (if (> x capacity) capacity\
    \ x)) row)])\n          (+ (max-fill-helper (rest grid) capacity)\n          \
    \   (apply max row-filled)))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [row-sum (apply + row)]\n               [row-max\
    \ (apply max row)]\n               [row-min (apply min row)]\n               [row-max-index\
    \ (index-of row-max row)]\n               [row-min-index (index-of row-min row)]\n\
    \               [row-max-fill (min capacity row-max)]\n               [row-min-fill\
    \ (min capacity row-min)]\n               [row-max-fill-index (index-of row-max-fill\
    \ row)]\n               [row-min-fill-index (index-of row-min-fill row)]\n   \
    \            [row-max-fill-index-left (index-of row-max-fill (take row-max-fill-index\
    \ row))]\n               [row-max-fill-index-right (index-of row-max-fill (drop\
    \ (+ row-max-fill-index 1) row))]\n               [row-min-fill-index-left (index-of\
    \ row-min-fill (take row-min-fill-index row))]\n               [row-min-fill-index-right\
    \ (index-of row-min-fill (drop (+ row-min-fill-index 1) row))]\n             \
    \  [row-max-fill-index-left-fill (min capacity (nth row-max-fill-index-left row))]\n\
    \               [row-max-fill-index-right-fill (min capacity (nth row-max-fill-index-right\
    \ row))]\n               [row-min-fill-index-left-fill (min capacity (nth row-min-fill-index-left\
    \ row))]\n               [row-min-fill-index-right-fill (min capacity (nth row-min-fill-index-right\
    \ row))]\n               [row-max-fill-index-left-fill-index (index-of row-max-fill-index-left-fill\
    \ row)]\n               [row-max-fill-index-right-fill-index (index-of row-max-fill-index-right-fill\
    \ row)]\n               [row", "  (define (max-fill-helper grid capacity)\n  \
    \  (if (null? grid)\n        0\n        (let ([row (car grid)])\n          (if\
    \ (null? row)\n              0\n              (let ([max-fill (max-fill-helper\
    \ (cdr grid) capacity)])\n                (if (null? (cdr row))\n            \
    \        max-fill\n                    (let ([next-row (cadr row)])\n        \
    \              (if (null? next-row)\n                          max-fill\n    \
    \                      (let ([next-max-fill (max-fill-helper (cdr grid) capacity)])\n\
    \                            (if (null? (cdr next-row))\n                    \
    \            next-max-fill\n                                (let ([next-next-row\
    \ (caddr row)])\n                                  (if (null? next-next-row)\n\
    \                                      next-max-fill\n                       \
    \               (let ([next-next-max-fill (max-fill-helper (cdr grid) capacity)])\n\
    \                                        (if (null? (cdr next-next-row))\n   \
    \                                         next-next-max-fill\n               \
    \                             (let ([next-next-next-row (cadddr row)])\n     \
    \                                         (if (null? next-next-next-row)\n   \
    \                                               next-next-max-fill\n         \
    \                                         (let ([next-next-next-max-fill (max-fill-helper\
    \ (cdr grid) capacity)])\n                                                   \
    \ (if (null? (cdr next-next-next-row))\n                                     \
    \                   next-next-next-max-fill\n                                \
    \                        (let ([next-next-next-next-row (caddddr row)])\n    \
    \                                                      (if (null? next-next-next-next-row)\n\
    \                                                              next-next-next-max-fill\n\
    \                                                              (let ([next-next-next-next-max-fill\
    \ (max-fill-helper (cdr grid) capacity)])\n                                  \
    \                              (if (null? (cdr next-next-next-next-row))\n   \
    \                                                                 next-next-next-next-max-fill\n\
    \                                ", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity (count 1 (first grid))) (add1\
    \ (max-fill-helper (rest grid) capacity))]\n          [else (max-fill-helper (rest\
    \ grid) capacity)]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (if (empty? grid)\n        0\n        (let* ([row (first\
    \ grid)]\n               [max (apply max row)]\n               [fill (min capacity\
    \ max)])\n          (+ fill (max_fill_helper (rest grid) capacity)))))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-max (apply\
    \ max row)]\n               [row-min (apply min row)]\n               [row-sum\
    \ (apply + row)])\n          (if (> row-max capacity)\n              (max_fill_helper\
    \ (cdr grid) capacity)\n              (if (> row-min capacity)\n             \
    \     (+ (max_fill_helper (cdr grid) capacity)\n                     (quotient\
    \ row-sum capacity))\n                  (+ (max_fill_helper (cdr grid) capacity)\n\
    \                     (quotient row-sum capacity)\n                     (quotient\
    \ (- capacity row-min) capacity)))))))\n  (max_fill_helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-well well)\n      (if (zero? well)\n\
    \          0\n          capacity))\n    (apply + (map fill-well row)))\n  (define\
    \ (fill-grid grid)\n    (apply + (map fill-row grid)))\n  (fill-grid grid))\n",
  "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-len (length row)]\n      \
    \         [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-fill (if (> row-sum\
    \ capacity)\n                             (quotient row-sum capacity)\n      \
    \                       0)])\n          (+ row-fill (max_fill-helper (cdr grid)\
    \ capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity acc)\n    (cond\n      [(empty? grid) acc]\n      [(empty? (first\
    \ grid)) (max_fill_helper (rest grid) capacity acc)]\n      [(>= capacity (first\
    \ grid)) (max_fill_helper (rest grid) capacity (+ acc capacity))]\n      [else\
    \ (max_fill_helper (rest grid) capacity (+ acc (first grid)))]))\n  (max_fill_helper\
    \ grid capacity 0))\n", "  (define (max_fill_helper grid capacity)\n    (if (empty?\
    \ grid)\n        0\n        (let* ([row (first grid)]\n               [max-fill\
    \ (min capacity (apply max row))])\n          (+ max-fill (max_fill_helper (rest\
    \ grid) capacity)))))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-max-count (count row-max row)]\n               [row-max-count-per-bucket\
    \ (quotient row-max-count capacity)]\n               [row-max-count-per-bucket-remainder\
    \ (remainder row-max-count capacity)])\n          (+ row-max-count-per-bucket\n\
    \             (if (zero? row-max-count-per-bucket-remainder)\n               \
    \  0\n                 1)\n             (max_fill_helper (cdr grid) capacity)))))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(= capacity (apply max (first grid)))\n\
    \           (+ 1 (max_fill-helper (rest grid) capacity))]\n          [else (max_fill-helper\
    \ (rest grid) capacity)]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ (fill-row row capacity)\n         (cond\n           [(empty? row) capacity]\n\
    \           [(= capacity 0) capacity]\n           [(= (first row) 1) (fill-row\
    \ (rest row) (- capacity 1))]\n           [else (fill-row (rest row) capacity)]))\n\
    \       (+ 1 (max-fill-helper (rest grid) (fill-row (first grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(= capacity (apply max (car grid))) (max_fill-helper\
    \ (cdr grid) capacity)]\n          [else (+ 1 (max_fill-helper (cdr grid) capacity))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(>= capacity (apply max (first grid)))\n\
    \           (max-fill-helper (rest grid) capacity)]\n          [else\n       \
    \    (+ 1 (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [max-fill (apply max\
    \ row)])\n          (if (> max-fill capacity)\n              (+ (max_fill-helper\
    \ (cdr grid) capacity)\n                 (quotient max-fill capacity))\n     \
    \         (max_fill-helper (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n",
  "  (define (fill grid capacity)\n    (if (empty? grid)\n        0\n        (let*\
    \ ([row (first grid)]\n               [filled (min capacity (apply max row))])\n\
    \          (+ filled (fill (rest grid) (- capacity filled))))))\n  (fill grid\
    \ capacity))\n", "  (define (fill-row row)\n    (let loop ([row row] [water 0])\n\
    \      (cond [(null? row) water]\n            [(= (car row) 1) (loop (cdr row)\
    \ (+ water 1))]\n            [else (loop (cdr row) water)])))\n  (define (fill-grid\
    \ grid)\n    (let loop ([grid grid] [water 0])\n      (cond [(null? grid) water]\n\
    \            [else (loop (cdr grid) (+ (fill-row (car grid)) water))])))\n  (define\
    \ (div-round-up x y)\n    (if (= (remainder x y) 0)\n        (/ x y)\n       \
    \ (+ (/ x y) 1)))\n  (div-round-up (fill-grid grid) capacity))\n", "  (define\
    \ (fill grid capacity)\n    (define (fill-row row capacity)\n      (if (null?\
    \ row)\n          0\n          (if (zero? capacity)\n              0\n       \
    \       (if (zero? (car row))\n                  (fill-row (cdr row) capacity)\n\
    \                  (add1 (fill-row (cdr row) (sub1 capacity)))))))\n    (if (null?\
    \ grid)\n        0\n        (add1 (fill-row (car grid) capacity)))))\n", "  (define\
    \ (fill-row row)\n    (define (fill-wells wells)\n      (cond\n        [(empty?\
    \ wells) 0]\n        [(= (first wells) 0) (fill-wells (rest wells))]\n       \
    \ [(>= capacity (first wells)) (fill-wells (rest wells))]\n        [else (+ 1\
    \ (fill-wells (rest wells)))]))\n    (fill-wells row))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (max_fill_helper grid capacity)\n    (define (max_fill_helper_helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(>= capacity\
    \ (apply max (car grid)))\n         (max_fill_helper (cdr grid) capacity)]\n \
    \       [else\n         (max_fill_helper_helper (cdr grid) capacity)]))\n    (max_fill_helper_helper\
    \ grid capacity))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(= capacity (apply max\
    \ (first grid)))\n           (max_fill-helper (rest grid) capacity)]\n       \
    \   [else (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [max-fill (apply max row)])\n \
    \         (if (> max-fill capacity)\n              (+ 1 (max_fill-helper (cdr\
    \ grid) capacity))\n              (max_fill-helper (cdr grid) capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let ([row (car grid)])\n          (if\
    \ (null? row)\n              0\n              (let ([fill (min capacity (apply\
    \ max row))])\n                (+ fill (max_fill-helper (cdr grid) capacity)))))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (fill-row row)\n    (define\
    \ (fill-wells wells)\n      (if (null? wells)\n          0\n          (let* ([well\
    \ (car wells)]\n                 [next-wells (cdr wells)]\n                 [next-well\
    \ (car next-wells)]\n                 [next-well-filled? (if (null? next-well)\n\
    \                                        #f\n                                \
    \        (not (zero? next-well)))])\n            (if (not next-well-filled?)\n\
    \                (fill-wells next-wells)\n                (let* ([water-needed\
    \ (- capacity well)]\n                       [water-available (if (null? next-wells)\n\
    \                                            0\n                             \
    \               (car next-wells))]\n                       [water-to-take (min\
    \ water-needed water-available)])\n                  (+ 1 (fill-wells (cons (-\
    \ well water-to-take)\n                                         (cons (- next-well\
    \ water-to-take)\n                                               (cdr next-wells))))))))))\n\
    \    (fill-wells row))\n  (define (fill-rows rows)\n    (if (null? rows)\n   \
    \     0\n        (+ (fill-row (car rows))\n           (fill-rows (cdr rows)))))\n\
    \  (fill-rows grid))\n", "  (define (fill grid capacity)\n    (define (fill-row\
    \ row capacity)\n      (if (null? row)\n          capacity\n          (if (zero?\
    \ (car row))\n              (fill-row (cdr row) capacity)\n              (fill-row\
    \ (cdr row) (- capacity 1)))))\n    (if (null? grid)\n        0\n        (+ 1\
    \ (fill (cdr grid) (fill-row (car grid) capacity)))))\n  (fill grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [next-grid (cdr grid)]\n      \
    \         [max-fill-row (max-fill-row row capacity)])\n          (+ max-fill-row\
    \ (max-fill-helper next-grid capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill_rec grid capacity acc)\n    (cond\n      [(empty? grid) acc]\n\
    \      [(empty? (first grid)) (max_fill_rec (rest grid) capacity acc)]\n     \
    \ [else (max_fill_rec (rest grid) capacity (+ acc (ceiling (/ capacity (length\
    \ (first grid))))))]))\n  (max_fill_rec grid capacity 0))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n      [else (max (max_fill_helper (rest\
    \ grid) capacity)\n                 (max_fill_helper (rest grid) (- capacity (first\
    \ grid))))]))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [max-fill (apply max row)])\n          (if (> max-fill capacity)\n\
    \              (+ 1 (max_fill_helper (cdr grid) capacity))\n              (max_fill_helper\
    \ (cdr grid) capacity)))))\n  (max_fill_helper grid capacity))\n", "  (define\
    \ (fill grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first\
    \ grid)) (fill (rest grid) capacity)]\n      [else (add1 (fill (rest grid) capacity))]))\n\
    \  (define (empty? grid)\n    (cond\n      [(null? grid) #t]\n      [(null? (first\
    \ grid)) #t]\n      [else #f]))\n  (define (empty? row)\n    (cond\n      [(null?\
    \ row) #t]\n      [(zero? (first row)) #t]\n      [else #f]))\n  (define (fill-row\
    \ row capacity)\n    (cond\n      [(empty? row) 0]\n      [(zero? capacity) 0]\n\
    \      [else (add1 (fill-row (rest row) (sub1 capacity)))]))\n  (define (fill-grid\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [else (add1 (fill-grid\
    \ (rest grid) capacity))]))\n  (define (fill-grid grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [else (add1 (fill-grid (rest grid) capacity))]))\n\
    \  (define (fill-grid grid capacity)\n    (cond\n      [(empty? grid) 0]\n   \
    \   [else (add1 (fill-grid (rest grid) capacity))]))\n  (define (fill-grid grid\
    \ capacity)\n    (cond\n      [(empty? grid) 0]\n      [else (add1 (fill-grid\
    \ (rest grid) capacity))]))\n  (define (fill-grid grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [else (add1 (fill-grid (rest grid) capacity))]))\n\
    \  (define (fill-grid grid capacity)\n    (cond\n      [(empty? grid) 0]\n   \
    \   [else (add1 (fill-grid (rest grid) capacity))]))\n  (define (fill-grid grid\
    \ capacity)\n    (cond\n      [(empty? grid) 0]\n      [else (add1 (fill-grid\
    \ (rest grid) capacity))]))\n  (define (fill-grid grid capacity)\n    (", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(=\
    \ capacity 0) 0]\n      [(= capacity (count 1 (first grid))) 0]\n      [else\n\
    \       (max\n        (max-fill-helper (rest grid) capacity)\n        (max-fill-helper\
    \ (rest grid) (- capacity (count 1 (first grid))))\n        (+ 1 (max-fill-helper\
    \ (rest grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (let loop\
    \ ([grid grid] [capacity capacity] [count 0])\n    (cond [(empty? grid) count]\n\
    \          [(= capacity (apply max (first grid))) (loop (rest grid) capacity count)]\n\
    \          [else (loop (rest grid) capacity (+ count 1))])))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n          [(>= capacity (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n          [else (max_fill_helper (rest\
    \ grid) (- capacity (first grid)))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill_helper (rest grid) capacity)\n                 (max_fill_helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-sum (apply + row)]\n     \
    \          [row-max (apply max row)]\n               [row-max-count (count row-max\
    \ row)]\n               [row-max-count-sum (apply + row-max-count)]\n        \
    \       [row-max-count-sum-max (apply max row-max-count-sum)])\n          (+ row-max-count-sum-max\
    \ (max_fill_helper (cdr grid) capacity)))))\n  (max_fill_helper grid capacity))\n",
  "  (define (fill grid capacity)\n    (if (empty? grid)\n        0\n        (let*\
    \ ([row (first grid)]\n               [filled (fill-row row capacity)]\n     \
    \          [remaining (sub1 capacity)]\n               [next-grid (rest grid)]\n\
    \               [next-fill (fill next-grid remaining)])\n          (+ filled next-fill))))\n\
    \  (fill grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(= capacity (apply max (first grid))) (max_fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max_fill-helper (rest grid) capacity))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (let ([rows (length grid)])\n    (define\
    \ (max-fill-helper row col)\n      (if (or (= row rows) (= col (length (vector-ref\
    \ grid 0))))\n          0\n          (let ([water (vector-ref (vector-ref grid\
    \ row) col)])\n            (if (= water 0)\n                (max-fill-helper (+\
    \ row 1) col)\n                (let ([water-to-fill (- capacity water)])\n   \
    \               (if (> water-to-fill 0)\n                      (max-fill-helper\
    \ (+ row 1) col)\n                      (+ (max-fill-helper (+ row 1) col) 1)))))))\n\
    \    (max-fill-helper 0 0)))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(<= capacity (apply max (first grid)))\n\
    \           (max-fill-helper (rest grid) capacity)]\n          [else\n       \
    \    (+ 1 (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max_fill_helper grid capacity acc)\n    (if (null?\
    \ grid)\n        acc\n        (let* ([row (car grid)]\n               [row-max\
    \ (apply max row)])\n          (if (&gt; row-max capacity)\n              (max_fill_helper\
    \ (cdr grid) capacity (+ acc row-max))\n              (max_fill_helper (cdr grid)\
    \ capacity (+ acc capacity))))))\n  (max_fill_helper grid capacity 0))\n", " \
    \ (define (max_fill_helper grid capacity)\n    (if (null? grid)\n        0\n \
    \       (let* ([row (car grid)]\n               [row-sum (apply + row)]\n    \
    \           [row-max (apply max row)]\n               [row-min (apply min row)]\n\
    \               [row-fill (min capacity (- row-max row-min))])\n          (+ row-fill\
    \ (max_fill_helper (cdr grid) capacity)))))\n  (max_fill_helper grid capacity))\n",
  "  (define (fill-wells wells capacity)\n    (cond\n      [(empty? wells) 0]\n  \
    \    [(= capacity (apply max wells)) 0]\n      [else (add1 (fill-wells (map (\u03BB\
    \ (well) (- well capacity)) wells) capacity))]))\n  (fill-wells (map sum grid)\
    \ capacity))\n", "  (define (fill grid capacity)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [(full? grid capacity) 0]\n      [else (+ 1 (fill (fill-row (first\
    \ grid) capacity) capacity))]))\n  (fill grid capacity))\n", "  (let ([rows (length\
    \ grid)])\n    (define (max-fill-helper grid capacity row)\n      (if (= row rows)\n\
    \          0\n          (let ([row-max (apply max grid)])\n            (if (>\
    \ row-max capacity)\n                (+ (max-fill-helper grid capacity (+ row\
    \ 1)) 1)\n                (max-fill-helper grid capacity (+ row 1))))))\n    (max-fill-helper\
    \ grid capacity 0)))\n", "  (define (fill-row row)\n    (let loop ([row row] [i\
    \ 0] [count 0])\n      (if (or (null? row) (null? (cdr row)))\n          count\n\
    \          (if (and (not (zero? (car row))) (zero? (cadr row)))\n            \
    \  (loop (cdr row) (+ i 1) (+ count 1))\n              (loop (cdr row) (+ i 1)\
    \ count)))))\n  (define (fill-grid grid)\n    (let loop ([grid grid] [count 0])\n\
    \      (if (null? grid)\n          count\n          (loop (cdr grid) (+ count\
    \ (fill-row (car grid)))))))\n  (define (fill-wells grid capacity)\n    (let loop\
    \ ([grid grid] [count 0])\n      (if (null? grid)\n          count\n         \
    \ (loop (map (lambda (row) (map (lambda (x) (if (zero? x) 0 (- x capacity))) row))\
    \ grid)\n                 (+ count capacity)))))\n  (fill-wells grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-sum (apply + row)]\n     \
    \          [row-max (apply max row)]\n               [row-min (apply min row)]\n\
    \               [row-fill (if (> row-sum capacity)\n                         \
    \    capacity\n                             row-sum)])\n          (+ row-fill\
    \ (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(= capacity 0) 0]\n          [(= capacity (length (first grid))) 1]\n  \
    \        [else (max-fill-helper (rest grid) (- capacity (length (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(= capacity (sum (first grid)))\n   \
    \        (add1 (max_fill-helper (rest grid) capacity))]\n          [else (max_fill-helper\
    \ (rest grid) capacity)]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (let*\
    \ ([row (first grid)]\n              [row-max (apply max row)]\n             \
    \ [row-min (apply min row)]\n              [row-fill (max (- capacity row-max)\
    \ 0)]\n              [row-fill-count (if (= row-fill 0) 0 (ceiling (/ row-fill\
    \ row-min)))]\n              [rest-fill (max-fill-helper (rest grid) capacity)])\n\
    \         (+ row-fill-count rest-fill))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (define row (first grid))\n       (define (fill_row row capacity)\n  \
    \       (cond\n           [(empty? row) capacity]\n           [(= capacity 0)\
    \ capacity]\n           [else\n            (define (fill_row_helper row capacity)\n\
    \              (cond\n                [(empty? row) capacity]\n              \
    \  [(= capacity 0) capacity]\n                [(= (first row) 1) (fill_row_helper\
    \ (rest row) (- capacity 1))]\n                [else (fill_row_helper (rest row)\
    \ capacity)]))\n            (fill_row_helper (rest row) (fill_row_helper row capacity))]))\n\
    \       (+ (fill_row row capacity) (max_fill_helper (rest grid) capacity))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [max-fill (apply max row)])\n          (if (> max-fill capacity)\n     \
    \         (+ 1 (max_fill-helper (cdr grid) capacity))\n              (max_fill-helper\
    \ (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (fill_row row)\n    (define (fill_wells wells)\n      (if (empty? wells)\n \
    \         0\n          (let ([well (first wells)])\n            (if (&gt;= well\
    \ capacity)\n                (add1 (fill_wells (rest wells)))\n              \
    \  (fill_wells (rest wells))))))\n    (fill_wells row))\n  (define (fill_grid\
    \ grid)\n    (if (empty? grid)\n        0\n        (add1 (fill_grid (rest grid)))))\n\
    \  (fill_grid grid))\n</code>\nThis is the test suite I'm using:\n<code>#lang\
    \ racket\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid)\
    \ 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity acc)\n    (cond\n      [(empty? grid)\
    \ acc]\n      [(= capacity (apply max (first grid))) (max_fill_helper (rest grid)\
    \ capacity (+ acc 1))]\n      [else (max_fill_helper (rest grid) capacity acc)]))\n\
    \  (max_fill_helper grid capacity 0))\n", "  (define (fill grid capacity)\n  \
    \  (if (empty? grid)\n        0\n        (let* ([row (first grid)]\n         \
    \      [filled (fill-row row capacity)]\n               [remaining (sub1 capacity)])\n\
    \          (+ filled (fill (rest grid) remaining)))))\n  (fill grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (cond\n       \
    \ [(empty? wells) 0]\n        [(= (first wells) 1) (add1 (fill-wells (rest wells)))]\n\
    \        [else (fill-wells (rest wells))]))\n    (fill-wells row))\n  (define\
    \ (fill-grid grid)\n    (cond\n      [(empty? grid) 0]\n      [else (add1 (fill-row\
    \ (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid grid))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(>= capacity\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1\
    \ (max-fill-helper (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(= capacity (apply max (first grid))) (max_fill_helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max_fill_helper (rest grid) capacity))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper grid capacity\
    \ total)\n    (if (null? grid)\n        total\n        (let* ([row (car grid)]\n\
    \               [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-diff (- row-max\
    \ row-min)])\n          (if (> row-sum capacity)\n              (max_fill_helper\
    \ (cdr grid) capacity (+ total 1))\n              (max_fill_helper (cdr grid)\
    \ capacity (+ total (/ row-diff capacity)))))))\n  (max_fill_helper grid capacity\
    \ 0))\n", "  (define (max_fill_helper grid capacity)\n    (if (null? grid)\n \
    \       0\n        (let* ([row (car grid)]\n               [max-fill (apply max\
    \ row)])\n          (if (> max-fill capacity)\n              (+ 1 (max_fill_helper\
    \ (cdr grid) capacity))\n              (max_fill_helper (cdr grid) capacity)))))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(>= capacity (apply max (first grid)))\n\
    \           (max_fill_helper (rest grid) capacity)]\n          [else\n       \
    \    (+ 1 (max_fill_helper (rest grid) capacity))]))\n  (max_fill_helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [row-sum (apply +\
    \ row)]\n               [row-max (apply max row)]\n               [row-min (apply\
    \ min row)]\n               [row-max-count (count row-max row)]\n            \
    \   [row-min-count (count row-min row)]\n               [row-fill-count (if (>\
    \ row-max-count capacity)\n                                   (quotient row-max-count\
    \ capacity)\n                                   0)])\n          (+ row-fill-count\
    \ (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-well row-index well-index)\n      (cond\n\
    \        [(= well-index (vector-length row)) 0]\n        [(= (vector-ref row well-index)\
    \ 1)\n         (+ 1 (fill-well row-index (+ well-index capacity)))]\n        [else\
    \ (fill-well row-index (+ well-index 1))]))\n    (fill-well 0 0))\n  (define (fill-grid\
    \ grid-index)\n    (cond\n      [(= grid-index (vector-length grid)) 0]\n    \
    \  [else (+ (fill-row (vector-ref grid grid-index))\n               (fill-grid\
    \ (+ grid-index 1)))]))\n  (fill-grid 0))\n", "  (define (max_fill-helper grid\
    \ capacity)\n    (define (max-well-fill grid)\n      (apply max (map sum grid)))\n\
    \    (define (fill-wells grid capacity)\n      (map (lambda (well)\n         \
    \    (map (lambda (depth)\n                    (if (> depth capacity) capacity\
    \ depth))\n                  well))\n           grid))\n    (define (fill-wells-until-done\
    \ grid capacity)\n      (let loop ([grid grid] [capacity capacity])\n        (if\
    \ (= capacity 0)\n            grid\n            (loop (fill-wells grid capacity)\n\
    \                  (- capacity (max-well-fill grid))))))\n    (define (count-fills\
    \ grid)\n      (apply + (map sum grid)))\n    (count-fills (fill-wells-until-done\
    \ grid capacity)))\n  (max_fill-helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n      [else\n       (define first-row\
    \ (first grid))\n       (define first-row-sum (apply + first-row))\n       (define\
    \ first-row-max (apply max first-row))\n       (define first-row-min (apply min\
    \ first-row))\n       (define first-row-max-index (index-of first-row-max first-row))\n\
    \       (define first-row-min-index (index-of first-row-min first-row))\n    \
    \   (define first-row-max-index-value (list-ref first-row first-row-max-index))\n\
    \       (define first-row-min-index-value (list-ref first-row first-row-min-index))\n\
    \       (define first-row-max-index-value-after-fill (- first-row-max-index-value\
    \ capacity))\n       (define first-row-min-index-value-after-fill (- first-row-min-index-value\
    \ capacity))\n       (define first-row-max-index-value-after-fill-sum (+ first-row-max-index-value-after-fill\
    \ first-row-min-index-value-after-fill))\n       (define first-row-max-index-value-after-fill-sum-abs\
    \ (abs first-row-max-index-value-after-fill-sum))\n       (define first-row-max-index-value-after-fill-sum-abs-min\
    \ (min first-row-max-index-value-after-fill-sum-abs capacity))\n       (define\
    \ first-row-max-index-value-after-fill-sum-abs-min-max (max first-row-max-index-value-after-fill-sum-abs-min\
    \ 0))\n       (define first-row-max-index-value-after-fill-sum-abs-min-max-min\
    \ (min first-row-max-index-value-after-fill-sum-abs-min-max capacity))\n     \
    \  (define first-row-", "  (define (max_fill_helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(empty? (first grid)) (max_fill_helper (rest grid)\
    \ capacity)]\n          [(>= capacity (first grid)) (max_fill_helper (rest grid)\
    \ capacity)]\n          [else (max_fill_helper (rest grid) (- capacity (first\
    \ grid)))]))\n  (define (max_fill_helper2 grid capacity)\n    (cond [(empty? grid)\
    \ 0]\n          [(empty? (first grid)) (max_fill_helper2 (rest grid) capacity)]\n\
    \          [(>= capacity (first grid)) (max_fill_helper2 (rest grid) capacity)]\n\
    \          [else (max_fill_helper2 (rest grid) (- capacity (first grid)))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [row-max (apply max row)]\n    \
    \           [row-max-count (count row-max row)]\n               [row-max-count-div-capacity\
    \ (quotient row-max-count capacity)]\n               [row-max-count-mod-capacity\
    \ (remainder row-max-count capacity)])\n          (if (zero? row-max-count-mod-capacity)\n\
    \              (+ row-max-count-div-capacity (max_fill-helper (cdr grid) capacity))\n\
    \              (+ row-max-count-div-capacity 1 (max_fill-helper (cdr grid) capacity))))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [max-fill (apply max row)])\n          (if (> max-fill capacity)\n     \
    \         (+ 1 (max-fill-helper (cdr grid) capacity))\n              (max-fill-helper\
    \ (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(=\
    \ capacity (apply max (first grid)))\n           (max_fill-helper (rest grid)\
    \ capacity)]\n          [else (add1 (max_fill-helper (rest grid) capacity))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity\
    \ acc)\n    (if (null? grid)\n        acc\n        (let* ([row (car grid)]\n \
    \              [max-fill (max capacity (apply max row))])\n          (max-fill-helper\
    \ (cdr grid) max-fill (+ acc max-fill)))))\n  (max-fill-helper grid capacity 0))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (empty? grid)\n        0\n \
    \       (let* ([row (first grid)]\n               [max-fill (apply max row)])\n\
    \          (if (&gt; max-fill capacity)\n              (+ 1 (max-fill-helper (rest\
    \ grid) capacity))\n              (max-fill-helper (rest grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill_rec grid capacity\
    \ acc)\n    (cond [(null? grid) acc]\n          [(= capacity (apply max (car grid)))\
    \ (max_fill_rec (cdr grid) capacity (+ acc 1))]\n          [else (max_fill_rec\
    \ (cdr grid) capacity acc)]))\n  (max_fill_rec grid capacity 0))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [max-fill (min capacity (apply max row))])\n\
    \          (+ max-fill (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [filled (min capacity\
    \ (apply max row))])\n          (+ filled (fill (cdr grid) (- capacity filled))))))\n\
    \  (let* ([max-fill (fill grid capacity)]\n         [max-fill-count (quotient\
    \ max-fill capacity)])\n    (if (zero? (modulo max-fill capacity))\n        max-fill-count\n\
    \        (+ max-fill-count 1))))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(full? (first grid) capacity) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else (+ 1 (max_fill-helper (rest grid) (- capacity\
    \ (fill-row (first grid) capacity))))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill_helper (rest grid) capacity)\n                 (max_fill_helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (let* ([row (first grid)]\n              [row-sum (apply + row)]\n   \
    \           [row-max (apply max row)]\n              [row-min (apply min row)]\n\
    \              [row-fill (if (> row-sum capacity) capacity row-sum)]\n       \
    \       [row-fill-times (quotient row-fill capacity)]\n              [row-fill-remainder\
    \ (remainder row-fill capacity)])\n         (if (zero? row-fill-remainder)\n \
    \            (+ row-fill-times (max_fill_helper (rest grid) capacity))\n     \
    \        (+ row-fill-times\n                (max_fill_helper (rest grid) (- capacity\
    \ row-fill-remainder))\n                1)))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (fill-row row)\n    (let loop ([i 0] [count 0])\n      (if (= i (vector-length\
    \ row))\n          count\n          (let ([water (vector-ref row i)])\n      \
    \      (if (= water 0)\n                (loop (+ i 1) count)\n               \
    \ (loop (+ i 1) (+ count capacity)))))))\n  (define (fill-grid grid)\n    (let\
    \ loop ([i 0] [count 0])\n      (if (= i (vector-length grid))\n          count\n\
    \          (loop (+ i 1) (+ count (fill-row (vector-ref grid i)))))))\n  (fill-grid\
    \ grid))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \      [else\n       (let* ([row (first grid)]\n              [row-len (length\
    \ row)]\n              [row-sum (apply + row)]\n              [row-max (apply\
    \ max row)]\n              [row-min (apply min row)]\n              [row-max-index\
    \ (index-of row-max row)]\n              [row-min-index (index-of row-min row)]\n\
    \              [row-max-fill (min capacity row-max)]\n              [row-min-fill\
    \ (min capacity row-min)]\n              [row-max-fill-index (index-of row-max-fill\
    \ row)]\n              [row-min-fill-index (index-of row-min-fill row)]\n    \
    \          [row-max-fill-left (sublist row 0 row-max-fill-index)]\n          \
    \    [row-max-fill-right (sublist row (add1 row-max-fill-index) row-len)]\n  \
    \            [row-min-fill-left (sublist row 0 row-min-fill-index)]\n        \
    \      [row-min-fill-right (sublist row (add1 row-min-fill-index) row-len)]\n\
    \              [row-max-fill-left-sum (apply + row-max-fill-left)]\n         \
    \     [row-max-fill-right-sum (apply + row-max-fill-right)]\n              [row-min-fill-left-sum\
    \ (apply + row-min-fill-left)]\n              [row-min-fill-right-sum (apply +\
    \ row-min-fill-right)])\n         (cond\n           [(> row-max-fill-left-sum\
    \ row-max-fill-right-sum)\n            (add1 (max-fill-helper (cons row-max-fill-left\
    \ (rest grid)) capacity))]\n           [(> row-max-fill-right-sum row-max-fill-left-sum)\n\
    \            (add1 (max-fill-helper (cons row-max-fill-right (rest grid", "  (define\
    \ (fill-row row)\n    (define (fill-wells wells)\n      (if (null? wells)\n  \
    \        0\n          (let* ([well (car wells)]\n                 [next-wells\
    \ (cdr wells)]\n                 [next-well (car next-wells)]\n              \
    \   [fill-amount (if (and next-well (> next-well well))\n                    \
    \              (- next-well well)\n                                  capacity)])\n\
    \            (+ 1 (fill-wells next-wells)))))\n    (fill-wells row))\n  (define\
    \ (fill-grid grid)\n    (if (null? grid)\n        0\n        (+ (fill-row (car\
    \ grid)) (fill-grid (cdr grid)))))\n  (fill-grid grid))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(<= capacity (apply\
    \ max (first grid)))\n       (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (+ 1 (max_fill-helper (rest grid) capacity))]))\n  (max_fill-helper grid\
    \ capacity))\n", "  (define (fill grid capacity)\n    (define (fill-row row capacity)\n\
    \      (if (null? row)\n          0\n          (if (and (not (null? (car row)))\
    \ (> capacity 0))\n              (add1 (fill-row (cdr row) (sub1 capacity)))\n\
    \              (fill-row (cdr row) capacity))))\n    (if (null? grid)\n      \
    \  0\n        (add1 (fill (cdr grid) (fill-row (car grid) capacity)))))\n  (fill\
    \ grid capacity))\n", "  (define (max_fill_row row)\n    (define (max_fill_row_helper\
    \ row acc)\n      (cond\n        [(empty? row) acc]\n        [(>= acc capacity)\
    \ acc]\n        [(= (first row) 1) (max_fill_row_helper (rest row) (+ acc 1))]\n\
    \        [else (max_fill_row_helper (rest row) 0)]))\n    (max_fill_row_helper\
    \ row 0))\n  (define (max_fill_grid grid acc)\n    (cond\n      [(empty? grid)\
    \ acc]\n      [else (max_fill_grid (rest grid) (+ acc (max_fill_row (first grid))))]))\n\
    \  (max_fill_grid grid 0))\n", "  (define (max_fill-helper grid capacity)\n  \
    \  (cond [(empty? grid) 0]\n          [(= capacity (apply max (first grid)))\n\
    \           (+ 1 (max_fill-helper (rest grid) capacity))]\n          [else (max_fill-helper\
    \ (rest grid) capacity)]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [row-sum (apply + row)]\n               [row-max\
    \ (apply max row)]\n               [row-max-count (count row-max row)]\n     \
    \          [row-max-count-mod (modulo row-max-count capacity)]\n             \
    \  [row-max-count-div (quotient row-max-count capacity)])\n          (+ row-max-count-div\n\
    \             (if (zero? row-max-count-mod)\n                 0\n            \
    \     1)\n             (max_fill_helper (cdr grid) capacity)))))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond [(null?\
    \ grid) 0]\n          [(= capacity 0) 0]\n          [(= capacity (length (car\
    \ grid))) 1]\n          [else (max_fill_helper (cdr grid) capacity)]))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-well well)\n\
    \      (if (zero? well)\n          0\n          capacity))\n    (apply + (map\
    \ fill-well row)))\n  (define (fill-grid grid)\n    (map fill-row grid))\n  (apply\
    \ + (fill-grid grid)))\n", "  (define (fill grid capacity)\n    (if (empty? grid)\n\
    \        0\n        (let ([row (first grid)])\n          (if (empty? row)\n  \
    \            (fill (rest grid) capacity)\n              (let ([well (first row)])\n\
    \                (if (zero? well)\n                    (fill (rest grid) capacity)\n\
    \                    (let ([new-capacity (- capacity well)])\n               \
    \       (if (negative? new-capacity)\n                          (+ 1 (fill (rest\
    \ grid) capacity))\n                          (fill (rest grid) new-capacity)))))))))\n\
    \  (fill grid capacity))\n", "  (define (fill grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [row-sum (apply +\
    \ row)]\n               [row-max (apply max row)]\n               [row-fill (if\
    \ (> row-sum capacity)\n                             capacity\n              \
    \               row-sum)])\n          (+ row-fill (fill (cdr grid) capacity)))))\n\
    \  (fill grid capacity))\n", "  (define (fill-row row)\n    (define (fill-wells\
    \ wells)\n      (cond [(null? wells) 0]\n            [(= (car wells) 1) (+ 1 (fill-wells\
    \ (cdr wells)))]\n            [else (fill-wells (cdr wells))]))\n    (fill-wells\
    \ row))\n  (define (fill-grid grid)\n    (cond [(null? grid) 0]\n          [else\
    \ (+ (fill-row (car grid)) (fill-grid (cdr grid)))]))\n  (define (fill-wells-with-capacity\
    \ wells capacity)\n    (cond [(null? wells) 0]\n          [(= (car wells) 1) (+\
    \ 1 (fill-wells-with-capacity (cdr wells) (- capacity 1)))]\n          [else (fill-wells-with-capacity\
    \ (cdr wells) capacity)]))\n  (define (fill-grid-with-capacity grid capacity)\n\
    \    (cond [(null? grid) 0]\n          [else (+ (fill-wells-with-capacity (car\
    \ grid) capacity) (fill-grid-with-capacity (cdr grid) capacity))]))\n  (fill-grid-with-capacity\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-max (apply\
    \ max row)]\n               [row-sum (apply + row)]\n               [row-fill\
    \ (min capacity row-max)]\n               [row-fill-count (ceiling (/ row-sum\
    \ capacity))])\n          (+ row-fill-count (max_fill-helper (cdr grid) capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (fill grid capacity)\n    (if\
    \ (null? grid)\n        0\n        (let* ([row (car grid)]\n               [row-sum\
    \ (apply + row)]\n               [row-max (apply max row)]\n               [row-fill\
    \ (if (> row-sum capacity)\n                             capacity\n          \
    \                   row-sum)])\n          (+ row-fill (fill (cdr grid) capacity)))))\n\
    \  (fill grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\
    \ [(empty? grid) 0]\n          [(andmap (lambda (x) (= x capacity)) (first grid))\n\
    \           (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (fill-row row)\n    (define (fill-wells wells)\n      (cond\n        [(empty?\
    \ wells) 0]\n        [(= capacity (car wells)) (add1 (fill-wells (cdr wells)))]\n\
    \        [(> capacity (car wells)) (fill-wells (cdr wells))]\n        [else (add1\
    \ (fill-wells (cons (- capacity (car wells)) (cdr wells))))]))\n    (fill-wells\
    \ row))\n  (apply + (map fill-row grid)))\n", "  (define (fill-row row)\n    (let\
    \ loop ([i 0] [count 0])\n      (if (= i (vector-length row))\n          count\n\
    \          (let ([water (vector-ref row i)])\n            (if (= water 0)\n  \
    \              (loop (+ i 1) count)\n                (loop (+ i 1) (+ count 1)))))))\n\
    \  (define (fill-grid grid capacity)\n    (let loop ([i 0] [count 0])\n      (if\
    \ (= i (vector-length grid))\n          count\n          (let ([row (vector-ref\
    \ grid i)])\n            (loop (+ i 1) (+ count (fill-row row)))))))\n  (fill-grid\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(>= capacity (count (first grid) 1)) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper\
    \ (rest grid) capacity)]\n      [else (max (max_fill_helper (rest grid) capacity)\n\
    \                 (max_fill_helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (let* ([row (first grid)]\n    \
    \          [filled (min capacity (count row))]\n              [remaining (max\
    \ 0 (- capacity filled))])\n         (+ filled (max_fill-helper (rest grid) remaining)))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define (fill-row row capacity)\n\
    \         (cond\n           [(empty? row) capacity]\n           [(= (first row)\
    \ 1) (fill-row (rest row) (- capacity 1))]\n           [else (fill-row (rest row)\
    \ capacity)]))\n       (+ 1 (max-fill-helper (rest grid) (fill-row (first grid)\
    \ capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-wells wells)\n      (if (null? wells)\n          0\n\
    \          (let* ([well (car wells)]\n                 [next-wells (cdr wells)]\n\
    \                 [next-well (car next-wells)]\n                 [next-well-filled?\
    \ (and next-well (= next-well 1))]\n                 [well-filled? (= well 1)])\n\
    \            (if (and well-filled? next-well-filled?)\n                (add1 (fill-wells\
    \ next-wells))\n                (fill-wells next-wells)))))\n    (fill-wells row))\n\
    \  (define (fill-grid grid)\n    (if (null? grid)\n        0\n        (add1 (fill-row\
    \ (car grid))\n              (fill-grid (cdr grid)))))\n  (fill-grid grid))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill_helper (rest grid) capacity)\n                 (max_fill_helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (define row (first grid))\n       (define (fill_row row capacity)\n  \
    \       (cond\n           [(empty? row) 0]\n           [(= (first row) 1) (add1\
    \ (fill_row (rest row) (sub1 capacity)))]\n           [else (fill_row (rest row)\
    \ capacity)]))\n       (add1 (max_fill_helper (rest grid) capacity) (fill_row\
    \ row capacity))]))\n  (max_fill_helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-well row-index well-index)\n      (if (= well-index\
    \ (vector-length row))\n          0\n          (if (vector-ref row well-index)\n\
    \              (if (= row-index 0)\n                  1\n                  (+\
    \ 1 (fill-well (- row-index 1) well-index)))\n              (fill-well row-index\
    \ (+ well-index 1)))))\n    (fill-well capacity 0))\n  (define (fill-grid grid-index)\n\
    \    (if (= grid-index (vector-length grid))\n        0\n        (+ (fill-row\
    \ (vector-ref grid grid-index))\n           (fill-grid (+ grid-index 1)))))\n\
    \  (fill-grid 0))\n", "  (define (fill grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [filled (min capacity\
    \ (apply max row))])\n          (+ filled (fill (cdr grid) (- capacity filled))))))\n\
    \  (let* ([filled (fill grid capacity)]\n         [times (/ filled capacity)])\n\
    \    (if (zero? (modulo filled capacity))\n        times\n        (+ times 1))))\n",
  "  (define (max_fill_rec grid capacity)\n    (if (null? grid)\n        0\n     \
    \   (let* ([row (car grid)]\n               [max-fill (apply max row)])\n    \
    \      (+ (max_fill_rec (cdr grid) capacity)\n             (if (> max-fill capacity)\n\
    \                 (- max-fill capacity)\n                 0)))))\n  (max_fill_rec\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (define (fill-row row capacity)\n    \
    \     (cond\n           [(empty? row) capacity]\n           [(= (first row) 1)\
    \ (fill-row (rest row) (- capacity 1))]\n           [else (fill-row (rest row)\
    \ capacity)]))\n       (+ (if (= capacity (fill-row (first grid) capacity)) 0\
    \ 1)\n          (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-sum (apply\
    \ + row)]\n               [row-max (apply max row)]\n               [row-max-count\
    \ (count row-max row)]\n               [row-max-count-per-bucket (quotient row-max-count\
    \ capacity)]\n               [row-max-count-per-bucket-remainder (remainder row-max-count\
    \ capacity)])\n          (+ row-max-count-per-bucket\n             (if (zero?\
    \ row-max-count-per-bucket-remainder)\n                 0\n                 1)\n\
    \             (max_fill_helper (cdr grid) capacity)))))\n  (max_fill_helper grid\
    \ capacity))\n", "  (let* ([max-well (apply max (map max grid))]\n         [max-fill\
    \ (min max-well capacity)]\n         [max-fill-count (quotient max-well max-fill)])\n\
    \    (if (zero? (remainder max-well max-fill))\n        max-fill-count\n     \
    \   (+ max-fill-count 1))))\n", "  (define (max_fill_rec grid capacity acc)\n\
    \    (if (empty? grid)\n        acc\n        (let ([row (first grid)])\n     \
    \     (max_fill_rec (rest grid) capacity (+ acc (ceiling (/ (sum row) capacity)))))))\n\
    \  (max_fill_rec grid capacity 0))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(null? grid) 0]\n      [(null? (car grid)) 0]\n      [else\n\
    \       (let* ([row (car grid)]\n              [max-fill (apply max row)])\n \
    \        (if (> max-fill capacity)\n             (+ max-fill (max-fill-helper\
    \ (cdr grid) capacity))\n             (max-fill-helper (cdr grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(= capacity (apply max (first grid)))\
    \ (max_fill-helper (rest grid) capacity)]\n          [else (+ 1 (max_fill-helper\
    \ (rest grid) capacity))]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond\n        [(empty? grid) 0]\n        [(= capacity 0) 0]\n        [(=\
    \ capacity (count 1 (first grid))) (add1 (max-fill-helper (rest grid) capacity))]\n\
    \        [(> capacity (count 1 (first grid))) (max-fill-helper (rest grid) (sub1\
    \ capacity))]\n        [else (add1 (max-fill-helper (rest grid) capacity))]))\n\
    \    (max-fill-helper-helper (sort grid <) capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(= capacity (sum (first grid))) (max-fill-helper (rest\
    \ grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (max-fill-helper (rest grid) (- capacity (sum (first grid)))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper grid capacity\
    \ acc)\n    (if (null? grid)\n        acc\n        (let* ([row (car grid)]\n \
    \              [max-fill (max capacity (apply max row))])\n          (max_fill_helper\
    \ (cdr grid) max-fill (+ acc max-fill)))))\n  (max_fill_helper grid capacity 0))\n",
  "  (let ([max-row (apply max grid)])\n    (if (= max-row 0)\n        0\n       \
    \ (+ 1 (max_fill (map (\u03BB (row) (max (- capacity max-row) 0)) grid) capacity)))))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(>= capacity (count (first grid))) (max-fill-helper (rest grid) capacity)]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (if (empty?\
    \ grid)\n        0\n        (let* ([row (first grid)]\n               [max-fill\
    \ (min capacity (apply max row))])\n          (+ max-fill (max_fill-helper (rest\
    \ grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-wells wells)\n      (cond\n        [(empty? wells) 0]\n\
    \        [(= (first wells) 0) (fill-wells (rest wells))]\n        [(= (first wells)\
    \ 1) (add1 (fill-wells (rest wells)))]))\n    (fill-wells row))\n  (define (fill-grid\
    \ grid)\n    (cond\n      [(empty? grid) 0]\n      [else (add1 (fill-grid (rest\
    \ grid)))]))\n  (fill-grid grid))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (define (max-row grid)\n      (apply max (map sum grid)))\n    (define (fill-row\
    \ row capacity)\n      (define (fill-row-helper row capacity)\n        (if (or\
    \ (null? row) (zero? capacity))\n            row\n            (cons (if (> capacity\
    \ (car row))\n                      (- (car row))\n                      capacity)\n\
    \                  (fill-row-helper (cdr row) (- capacity (car row))))))\n   \
    \   (fill-row-helper row capacity))\n    (define (fill-grid grid capacity)\n \
    \     (if (zero? capacity)\n          grid\n          (cons (fill-row (car grid)\
    \ capacity)\n                (fill-grid (cdr grid) capacity))))\n    (define (empty-grid\
    \ grid)\n      (if (null? grid)\n          #t\n          (and (empty-row? (car\
    \ grid))\n               (empty-grid (cdr grid)))))\n    (define (empty-row? row)\n\
    \      (if (null? row)\n          #t\n          (and (zero? (car row))\n     \
    \          (empty-row? (cdr row)))))\n    (define (max-fill-helper-helper grid\
    \ capacity count)\n      (if (empty-grid grid)\n          count\n          (max-fill-helper-helper\
    \ (fill-grid grid capacity) capacity (+ count 1))))\n    (max-fill-helper-helper\
    \ grid capacity 0))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max_fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (add1 (max_fill-helper (rest\
    \ grid) capacity))]\n          [else (max (max_fill-helper (rest grid) capacity)\n\
    \                     (max_fill-helper (rest grid) (sub1 capacity)))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper (rest\
    \ grid) capacity)]\n      [else\n       (let* ([row (first grid)]\n          \
    \    [num_ones (count 1 row)]\n              [num_empties (count 0 row)]\n   \
    \           [num_empties_to_fill (max 0 (- capacity num_ones))]\n            \
    \  [num_empties_filled (min num_empties num_empties_to_fill)])\n         (+ num_empties_filled\
    \ (max_fill_helper (rest grid) capacity)))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (+ capacity (- capacity (first grid)))))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n    \
    \    (cond [(empty? row) capacity]\n              [(= capacity 0) capacity]\n\
    \              [(= (first row) 1) (fill-row-helper (rest row) (- capacity 1))]\n\
    \              [else (fill-row-helper (rest row) capacity)]))\n      (fill-row-helper\
    \ row capacity))\n    (cond [(empty? grid) 0]\n          [(= capacity 0) 0]\n\
    \          [else (+ 1 (max-fill-helper (rest grid) (fill-row (first grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (fill-row row)\n      (define (fill-row-helper row capacity)\n  \
    \      (cond ((null? row) 0)\n              ((= capacity 0) 0)\n             \
    \ ((= (car row) 1) (fill-row-helper (cdr row) (- capacity 1)))\n             \
    \ (else (fill-row-helper (cdr row) capacity))))\n      (fill-row-helper row capacity))\n\
    \    (cond ((null? grid) 0)\n          ((= (fill-row (car grid)) 0) (max-fill-helper\
    \ (cdr grid) capacity))\n          (else (+ 1 (max-fill-helper (cdr grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n  \
    \                   (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (if (empty? grid)\n        0\n        (let* ([row (first grid)]\n       \
    \        [row-length (length row)]\n               [row-max (apply max row)]\n\
    \               [row-fill (if (> row-max capacity) capacity row-max)])\n     \
    \     (+ row-fill (max_fill_helper (rest grid) capacity)))))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (define row (first grid))\n       (define\
    \ (fill-row row capacity)\n         (cond\n           [(empty? row) capacity]\n\
    \           [(= capacity 0) capacity]\n           [else\n            (define (fill-row-helper\
    \ row capacity)\n              (cond\n                [(empty? row) capacity]\n\
    \                [(= capacity 0) capacity]\n                [(= (first row) 1)\
    \ (fill-row-helper (rest row) (- capacity 1))]\n                [else (fill-row-helper\
    \ (rest row) capacity)]))\n            (fill-row-helper (rest row) capacity)]))\n\
    \       (+ (fill-row row capacity) (max-fill-helper (rest grid) capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (define (fill_row row capacity)\n      (define (fill_row_helper row capacity)\n\
    \        (if (null? row)\n            capacity\n            (if (zero? (car row))\n\
    \                (fill_row_helper (cdr row) capacity)\n                (if (<=\
    \ capacity 0)\n                    0\n                    (fill_row_helper (cdr\
    \ row) (- capacity 1))))))\n      (fill_row_helper row capacity))\n    (if (null?\
    \ grid)\n        0\n        (+ (fill_row (car grid) capacity)\n           (max_fill_helper\
    \ (cdr grid) capacity))))\n  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [max-fill (apply max row)])\n          (if (> max-fill capacity)\n\
    \              (+ max-fill (max-fill-helper (cdr grid) capacity))\n          \
    \    (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-len (length row)]\n      \
    \         [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-max-count (count\
    \ row-max row)]\n               [row-min-count (count row-min row)]\n        \
    \       [row-max-count-max (apply max row-max-count)]\n               [row-min-count-max\
    \ (apply max row-min-count)]\n               [row-max-count-min (apply min row-max-count)]\n\
    \               [row-min-count-min (apply min row-min-count)]\n              \
    \ [row-max-count-max-index (index row-max-count-max row-max-count)]\n        \
    \       [row-min-count-max-index (index row-min-count-max row-min-count)]\n  \
    \             [row-max-count-min-index (index row-max-count-min row-max-count)]\n\
    \               [row-min-count-min-index (index row-min-count-min row-min-count)]\n\
    \               [row-max-count-max-index-val (list-ref row row-max-count-max-index)]\n\
    \               [row-min-count-max-index-val (list-ref row row-min-count-max-index)]\n\
    \               [row-max-count-min-index-val (list-ref row row-max-count-min-index)]\n\
    \               [row-min-count-min-index-val (list-ref row row-min-count-min-index)]\n\
    \               [row-max-count-max-index-val-max (apply max row-max-count-max-index-val)]\n\
    \               [row-min-count-max-index-val-max (apply max row-min-count-max-index-val)]\n\
    \               [row-max-count-min-index-val-max (apply max row-max-count-min-index-val)]\n\
    \               [row-min-count-", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [row-max (apply max row)]\n    \
    \           [row-min (apply min row)]\n               [row-fill (if (> row-sum\
    \ capacity)\n                             (- row-max capacity)\n             \
    \                (- capacity row-sum))])\n          (+ row-fill (max_fill-helper\
    \ (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity)\n    (define (max_fill_helper_helper grid capacity)\n\
    \      (cond [(empty? grid) 0]\n            [(= capacity (apply max (car grid)))\n\
    \             (+ 1 (max_fill_helper (cdr grid) capacity))]\n            [else\
    \ (max_fill_helper (cdr grid) capacity)]))\n    (max_fill_helper_helper (reverse\
    \ grid) capacity))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n      [else\n       (define (fill_row\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= (first row) 1) (fill_row (rest row) (- capacity 1))]\n           [else\
    \ (fill_row (rest row) capacity)]))\n       (define (fill_grid grid capacity)\n\
    \         (cond\n           [(empty? grid) capacity]\n           [else (fill_grid\
    \ (rest grid) (fill_row (first grid) capacity))]))\n       (define (fill_rest\
    \ grid capacity)\n         (cond\n           [(empty? grid) capacity]\n      \
    \     [(empty? (first grid)) (fill_rest (rest grid) capacity)]\n           [else\
    \ (fill_rest (rest grid) (fill_row (first grid) capacity))]))\n       (+ (max_fill_helper\
    \ (fill_grid grid capacity) capacity) 1)]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity acc)\n    (cond [(empty? grid) acc]\n\
    \          [(= capacity (apply max (first grid)))\n           (max_fill_helper\
    \ (rest grid) capacity (+ acc 1))]\n          [else (max_fill_helper (rest grid)\
    \ capacity acc)]))\n  (max_fill_helper grid capacity 0))\n", "  (define (max_fill_row\
    \ row)\n    (define (max_fill_row_helper row acc)\n      (cond [(empty? row) acc]\n\
    \            [(= (first row) 0) (max_fill_row_helper (rest row) acc)]\n      \
    \      [(= (first row) 1) (max_fill_row_helper (rest row) (+ acc 1))]))\n    (max_fill_row_helper\
    \ row 0))\n  (define (max_fill_grid grid acc)\n    (cond [(empty? grid) acc]\n\
    \          [else (max_fill_grid (rest grid) (+ acc (max_fill_row (first grid))))]))\n\
    \  (max_fill_grid grid 0))\n", "  (define (max-fill-helper grid capacity)\n  \
    \  (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n  \
    \                   (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(>= capacity (count-ones (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper (rest grid) (-\
    \ capacity (count-ones (first grid)))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity acc)\n    (cond [(empty? grid) acc]\n\
    \          [(empty? (first grid)) (max_fill_helper (rest grid) capacity acc)]\n\
    \          [(= capacity 0) (max_fill_helper (rest grid) capacity (add1 acc))]\n\
    \          [else (max_fill_helper (rest grid) (sub1 capacity) acc)]))\n  (max_fill_helper\
    \ grid capacity 0))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define row (first grid))\n    \
    \   (define (fill-row row capacity)\n         (cond\n           [(empty? row)\
    \ capacity]\n           [(= (first row) 1) (fill-row (rest row) (sub1 capacity))]\n\
    \           [else (fill-row (rest row) capacity)]))\n       (define filled (fill-row\
    \ row capacity))\n       (if (= filled 0)\n           (+ 1 (max-fill-helper (rest\
    \ grid) capacity))\n           (max-fill-helper (rest grid) filled))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(= capacity (apply max (first grid))) (max_fill_helper\
    \ (rest grid) capacity)]\n          [else (+ 1 (max_fill_helper (rest grid) capacity))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (cond ((null? grid) 0)\n          ((= capacity 0) 0)\n          ((= capacity\
    \ (apply max (car grid))) 1)\n          (else (apply max (map (lambda (x) (+ x\
    \ (max_fill_helper (cdr grid) (- capacity x)))) (car grid))))))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (define\
    \ (fill-row row)\n      (define (fill-row-helper row capacity)\n        (cond\
    \ ((null? row) capacity)\n              ((= (car row) 1) (fill-row-helper (cdr\
    \ row) (- capacity 1)))\n              (else (fill-row-helper (cdr row) capacity))))\n\
    \      (fill-row-helper row capacity))\n    (cond ((null? grid) 0)\n         \
    \ ((= (fill-row (car grid)) 0) (+ 1 (max_fill-helper (cdr grid) capacity)))\n\
    \          (else (max_fill-helper (cdr grid) capacity))))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill_helper (rest grid) capacity)\n                 (max_fill_helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(= capacity (apply max (first grid))) (max_fill_helper (rest grid) capacity)]\n\
    \          [else (+ 1 (max_fill_helper (rest grid) capacity))]))\n  (max_fill_helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity (first grid)) (max_fill-helper (rest grid) capacity)]\n       \
    \   [(> capacity (first grid)) (max_fill-helper (rest grid) (- capacity (first\
    \ grid)))]\n          [else (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper\
    \ grid capacity))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
