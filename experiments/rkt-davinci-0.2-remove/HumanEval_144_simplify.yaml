name: HumanEval_144_simplify
language: rkt
prompt: "#lang racket\n\n;; Your task is to implement a function that will simplify\
  \ the expression\n;; x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n;; otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n;; <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n;; You can assume that x, and n are\
  \ valid fractions, and do not have zero as denominator.\n(define (simplify x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n\
  \    (check-equal? (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate\
  \ \"1/6\" \"2/1\") #f)\n    (check-equal? (candidate \"5/1\" \"3/1\") #t)\n    (check-equal?\
  \ (candidate \"7/10\" \"10/2\") #f)\n    (check-equal? (candidate \"2/10\" \"50/10\"\
  ) #t)\n    (check-equal? (candidate \"7/2\" \"4/2\") #t)\n    (check-equal? (candidate\
  \ \"11/6\" \"6/1\") #t)\n    (check-equal? (candidate \"2/3\" \"5/2\") #f)\n   \
  \ (check-equal? (candidate \"5/2\" \"3/5\") #f)\n    (check-equal? (candidate \"\
  2/4\" \"8/4\") #t)\n    (check-equal? (candidate \"2/4\" \"4/2\") #t)\n    (check-equal?\
  \ (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate \"1/5\" \"1/5\"\
  ) #f)\n))\n\n(test-humaneval)"
completions: ["  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x gcd)\n      (if (= gcd 1)\n          x\n          (simplify-fraction-helper\
    \ (list (quotient (car x) gcd) (quotient (cadr x) gcd)) (gcd (car x) (cadr x)))))\n\
    \    (simplify-fraction-helper x (gcd (car x) (cadr x))))\n  (define (multiply-fractions\
    \ x y)\n    (list (* (car x) (car y)) (* (cadr x) (cadr y))))\n  (define (divide-fractions\
    \ x y)\n    (list (* (car x) (cadr y)) (* (cadr x) (car y))))\n  (define (add-fractions\
    \ x y)\n    (list (+ (* (car x) (cadr y)) (* (cadr x) (car y))) (* (cadr x) (cadr\
    \ y))))\n  (define (subtract-fractions x y)\n    (list (- (* (car x) (cadr y))\
    \ (* (cadr x) (car y))) (* (cadr x) (cadr y))))\n  (define (string->fraction x)\n\
    \    (list (string->number (car (string-split x \"/\"))) (string->number (cadr\
    \ (string-split x \"/\")))))\n  (define (fraction->string x)\n    (string-append\
    \ (number->string (car x)) \"/\" (number->string (cadr x))))\n  (define (fraction->number\
    \ x)\n    (/ (car x) (cadr x)))\n  (define (number->fraction x)\n    (list (round\
    \ (* x 100)) 100))\n  (define (is-integer? x)\n    (= (remainder (car x) (cadr\
    \ x))", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x gcd)\n      (if (= gcd 1)\n    \
    \      x\n          (simplify-fraction-helper (cons (/ (car x) gcd) (/ (cdr x)\
    \ gcd)) (gcd (car x) (cdr x)))))\n    (simplify-fraction-helper x (gcd (car x)\
    \ (cdr x))))\n  (define (multiply-fractions x y)\n    (cons (* (car x) (car y))\
    \ (* (cdr x) (cdr y))))\n  (define (is-whole-number? x)\n    (= (remainder (car\
    \ x) (cdr x)) 0))\n  (is-whole-number? (simplify-fraction (multiply-fractions\
    \ (string->fraction x) (string->fraction n)))))\n", "  (define (gcd a b)\n   \
    \ (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (let ([g (gcd numerator denominator)])\n      (cons\
    \ (/ numerator g) (/ denominator g))))\n  (define (multiply-fractions x y)\n \
    \   (let ([numerator (* (car x) (car y))]\n          [denominator (* (cdr x) (cdr\
    \ y))])\n      (simplify-fraction numerator denominator)))\n  (define (is-whole-number?\
    \ x)\n    (= (cdr x) 1))\n  (is-whole-number? (multiply-fractions (simplify-fraction\
    \ (string->number (car (string-split x #\\/))) (string->number (cadr (string-split\
    \ x #\\/)))) (simplify-fraction (string->number (car (string-split n #\\/))) (string->number\
    \ (cadr (string-split n #\\/)))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n    (define\
    \ (gcd-fraction a b)\n      (if (= b 0)\n          a\n          (gcd-fraction\
    \ b (remainder a b))))\n    (define (lcm-fraction a b)\n      (/ (* a b) (gcd-fraction\
    \ a b)))\n    (define (simplify-fraction-helper numerator denominator)\n     \
    \ (if (= (gcd-fraction numerator denominator) 1)\n          (cons numerator denominator)\n\
    \          (simplify-fraction-helper (/ numerator (gcd-fraction numerator denominator))\
    \ (/ denominator (gcd-fraction numerator denominator)))))\n    (simplify-fraction-helper\
    \ numerator denominator))\n  (define (multiply-fractions x y)\n    (define (multiply-fractions-helper\
    \ x y)\n      (cons (* (car x) (car y)) (* (cdr x) (cdr y))))\n    (simplify-fraction\
    \ (car (multiply-fractions-helper x y)) (cdr (multiply-fractions-helper x y))))\n\
    \  (define (string->fraction str)\n    (define (string->fraction-helper str)\n\
    \      (cons (string->number (car str)) (string->number (cadr str))))\n    (string->fraction-helper\
    \ (string-split str \"/\")))\n  (define (fraction->string frac)\n    (define (fraction->string-helper\
    \ frac)\n      (cons (number->string (car frac)) (number->string (cadr frac))))\n\
    \    (string-join (fraction->string-helper frac) \"/\"))\n  (define (is-integer?\
    \ frac)\n    (= (remainder (car frac) (cdr frac)) 0))\n  (is-integer", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (numerator x)\n    (string->number (regexp-match #rx\"^[0-9]+\" x)))\n\
    \  (define (denominator x)\n    (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ x)))\n  (define (is-whole-number? x)\n    (= (remainder x 1) 0))\n  (define\
    \ (multiply x y)\n    (let* ([x-num (numerator x)]\n           [x-den (denominator\
    \ x)]\n           [y-num (numerator y)]\n           [y-den (denominator y)]\n\
    \           [lcm (lcm x-den y-den)]\n           [x-num (* x-num (/ lcm x-den))]\n\
    \           [y-num (* y-num (/ lcm y-den))])\n      (is-whole-number? (+ x-num\
    \ y-num))))\n  (multiply x n))\n", "  (define (gcd a b)\n    (if (= b 0)\n   \
    \     a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a\
    \ 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (let* ([g (gcd numerator denominator)]\n       \
    \    [numerator (/ numerator g)]\n           [denominator (/ denominator g)])\n\
    \      (cons numerator denominator)))\n  (define (multiply-fractions x y)\n  \
    \  (let* ([x-numerator (car x)]\n           [x-denominator (cdr x)]\n        \
    \   [y-numerator (car y)]\n           [y-denominator (cdr y)]\n           [numerator\
    \ (* x-numerator y-numerator)]\n           [denominator (lcm x-denominator y-denominator)])\n\
    \      (simplify-fraction numerator denominator)))\n  (define (parse-fraction\
    \ s)\n    (let* ([parts (string-split s \"/\")]\n           [numerator (string->number\
    \ (car parts))]\n           [denominator (string->number (cadr parts))])\n   \
    \   (simplify-fraction numerator denominator)))\n  (define (is-whole-number? numerator\
    \ denominator)\n    (= (remainder numerator denominator) 0))\n  (let* ([x (parse-fraction\
    \ x)]\n         [n (parse-fraction n)]\n         [result (multiply-fractions x\
    \ n)])\n    (is-whole-number? (car result) (cdr result))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator\
    \ denominator)\n    (define g (gcd numerator denominator))\n    (define n (/ numerator\
    \ g))\n    (define d (/ denominator g))\n    (if (= d 1)\n        n\n        (list\
    \ n d)))\n  (define (parse-fraction s)\n    (define (split s)\n      (string-split\
    \ s #\\/))\n    (define (to-int s)\n      (string->number s))\n    (define (to-int-list\
    \ l)\n      (map to-int l))\n    (define (to-fraction l)\n      (apply list l))\n\
    \    (to-fraction (to-int-list (split s))))\n  (define (multiply-fractions x n)\n\
    \    (define (multiply-fraction x n)\n      (define (multiply-fraction-parts x\
    \ n)\n        (list (* (car x) (car n)) (* (cadr x) (cadr n))))\n      (define\
    \ (simplify-fraction x)\n        (define g (gcd (car x) (cadr x)))\n        (define\
    \ n (/ (car x) g))\n        (define d (/ (cadr x) g))\n        (if (= d 1)\n \
    \           n\n            (list n d)))\n      (simplify-fraction (multiply-fraction-parts\
    \ x n)))\n    (define (is-integer? x)\n      (integer? x))\n    (is-integer? (multiply-fraction\
    \ x n)))\n  (multiply-fractions (parse-fraction x) (parse-fraction n)))\n", " \
    \ (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (lcm-list lst)\n    (if (null? (cdr lst))\n        (car lst)\n    \
    \    (lcm (car lst) (lcm-list (cdr lst)))))\n  (define (simplify-fraction str)\n\
    \    (define (simplify-fraction-helper str)\n      (define (get-numerator str)\n\
    \        (string->number (substring str 0 (string-index str #\\/))))\n      (define\
    \ (get-denominator str)\n        (string->number (substring str (+ 1 (string-index\
    \ str #\\/)))))\n      (define (get-gcd str)\n        (gcd (get-numerator str)\
    \ (get-denominator str)))\n      (define (get-lcm str)\n        (lcm (get-numerator\
    \ str) (get-denominator str)))\n      (define (get-simplified-numerator str)\n\
    \        (/ (get-numerator str) (get-gcd str)))\n      (define (get-simplified-denominator\
    \ str)\n        (/ (get-denominator str) (get-gcd str)))\n      (define (get-simplified-fraction\
    \ str)\n        (string-append (number->string (get-simplified-numerator str))\
    \ \"/\" (number->string (get-simplified-denominator str))))\n      (get-simplified-fraction\
    \ str))\n    (simplify-fraction-helper str))\n  (define (get-numerator str)\n\
    \    (string->number (substring str 0 (string-index str #\\/))))\n  (define (get-denominator\
    \ str)\n    (string->number (substring str (+ 1 (string-index str #\\/)))))\n\
    \  (define (get-lcm str)\n    (lcm (get-", "  (define (gcd a b)\n    (if (= b\
    \ 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if\
    \ (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (multiply-fraction\
    \ a b)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (string->number (substring str 0 1)) acc))))\n      (split-fraction-helper\
    \ str '()))\n    (define (multiply-fraction-helper a b)\n      (define (multiply-fraction-helper-helper\
    \ a b)\n        (if (empty? b)\n            (reverse a)\n            (multiply-fraction-helper-helper\
    \ (cons (* (car a) (car b)) a) (cdr b))))\n      (multiply-fraction-helper-helper\
    \ a b))\n    (define (reduce-fraction a)\n      (define (reduce-fraction-helper\
    \ a)\n        (if (empty? a)\n            '()\n            (cons (remainder (car\
    \ a) 10) (reduce-fraction-helper (cdr a)))))\n      (define (reduce-fraction-helper-helper\
    \ a)\n        (if (empty? a)\n            0\n            (+ (* (car a) (expt 10\
    \ (- (length a) 1))) (reduce-fraction-helper-helper (cdr a)))))\n      (reduce-fraction-helper-helper\
    \ (reduce-fraction-helper a)))\n    (define (is-whole-number? a)\n      (= (remainder\
    \ a 10) 0))\n    (define (divide-fraction a b)\n      (define (divide-fraction-helper\
    \ a b)\n        (if (empty? b)\n            (reverse a)\n            (divide-fraction-helper\
    \ (", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (multiply x y)\n    (let* ([x-numerator (string->number\
    \ (car (string-split x \"/\")))])\n      (let* ([x-denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n        (let* ([y-numerator (string->number\
    \ (car (string-split y \"/\")))])\n          (let* ([y-denominator (string->number\
    \ (cadr (string-split y \"/\")))])\n            (let* ([common-denominator (lcm\
    \ x-denominator y-denominator)])\n              (let* ([x-factor (/ common-denominator\
    \ x-denominator)])\n                (let* ([y-factor (/ common-denominator y-denominator)])\n\
    \                  (let* ([numerator (+ (* x-numerator x-factor) (* y-numerator\
    \ y-factor)))])\n                    (let* ([denominator common-denominator])\n\
    \                      (let* ([gcd-numerator-denominator (gcd numerator denominator)])\n\
    \                        (let* ([numerator (/ numerator gcd-numerator-denominator)])\n\
    \                          (let* ([denominator (/ denominator gcd-numerator-denominator)])\n\
    \                            (if (= (remainder numerator denominator) 0)\n   \
    \                             #t\n                                #f)))))))))))))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-helper x n)\n    (define (simplify-helper-helper x n)\n \
    \     (define (simplify-helper-helper-helper x n)\n        (define (simplify-helper-helper-helper-helper\
    \ x n)\n          (define (simplify-helper-helper-helper-helper-helper x n)\n\
    \            (define (simplify-helper-helper-helper-helper-helper-helper x n)\n\
    \              (define (simplify-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                  (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                    (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                      (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                        (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                          (define (simplify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x n)\n                            (define (simplify-helper-helper-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (multiply-fractions x y)\n    (define (parse-fraction str)\n      (define\
    \ (split str)\n        (string-split str #\\/))\n      (define (numerator str)\n\
    \        (string->number (first (split str))))\n      (define (denominator str)\n\
    \        (string->number (second (split str))))\n      (cons (numerator str) (denominator\
    \ str)))\n    (define (multiply-fractions-helper x y)\n      (let ([x (parse-fraction\
    \ x)]\n            [y (parse-fraction y)])\n        (cons (* (car x) (car y))\
    \ (* (cdr x) (cdr y)))))\n    (let ([x (multiply-fractions-helper x y)])\n   \
    \   (if (= (gcd (car x) (cdr x)) 1)\n          #f\n          #t)))\n  (multiply-fractions\
    \ x n))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x)\n      (define (get-numerator x)\n        (string->number (substring x 0\
    \ (string-index x #\\/))))\n      (define (get-denominator x)\n        (string->number\
    \ (substring x (+ 1 (string-index x #\\/)) (string-length x))))\n      (define\
    \ (get-simplified-fraction x)\n        (define (get-simplified-numerator x)\n\
    \          (quotient (get-numerator x) (gcd (get-numerator x) (get-denominator\
    \ x))))\n        (define (get-simplified-denominator x)\n          (quotient (get-denominator\
    \ x) (gcd (get-numerator x) (get-denominator x))))\n        (string-append (number->string\
    \ (get-simplified-numerator x)) \"/\" (number->string (get-simplified-denominator\
    \ x))))\n      (get-simplified-fraction x))\n    (simplify-fraction-helper x))\n\
    \  (define (multiply-fractions x n)\n    (define (get-numerator x)\n      (string->number\
    \ (substring x 0 (string-index x #\\/))))\n    (define (get-denominator x)\n \
    \     (string->number (substring x (+ 1 (string-index x #\\/)) (string-length\
    \ x))))\n    (define (get-multiply-fraction x n)\n      (define (get-multiply-numerator\
    \ x n)\n        (* (get-numerator x) (get-numerator n)))\n      (define (get-multiply-denominator\
    \ x n)\n        (* (get-denominator x) (get-", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define gcd (gcd numerator denominator))\n    (define\
    \ numerator (quotient numerator gcd))\n    (define denominator (quotient denominator\
    \ gcd))\n    (cons numerator denominator))\n  (define (multiply-fractions x y)\n\
    \    (define x-numerator (car x))\n    (define x-denominator (cdr x))\n    (define\
    \ y-numerator (car y))\n    (define y-denominator (cdr y))\n    (define numerator\
    \ (* x-numerator y-numerator))\n    (define denominator (lcm x-denominator y-denominator))\n\
    \    (simplify-fraction numerator denominator))\n  (define (is-whole-number? numerator\
    \ denominator)\n    (= (remainder numerator denominator) 0))\n  (define x-fraction\
    \ (string->fraction x))\n  (define n-fraction (string->fraction n))\n  (define\
    \ result (multiply-fractions x-fraction n-fraction))\n  (is-whole-number? (car\
    \ result) (cdr result)))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n\
    \        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n   \
    \     0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction numerator\
    \ denominator)\n    (let* ([g (gcd numerator denominator)]\n           [numerator\
    \ (/ numerator g)]\n           [denominator (/ denominator g)])\n      (if (=\
    \ denominator 1)\n          numerator\n          (list numerator denominator))))\n\
    \  (define (multiply-fractions x y)\n    (let* ([x-numerator (car x)]\n      \
    \     [x-denominator (cadr x)]\n           [y-numerator (car y)]\n           [y-denominator\
    \ (cadr y)]\n           [numerator (* x-numerator y-numerator)]\n           [denominator\
    \ (lcm x-denominator y-denominator)])\n      (simplify-fraction numerator denominator)))\n\
    \  (define (parse-fraction s)\n    (let* ([parts (string-split s \"/\")]\n   \
    \        [numerator (string->number (car parts))]\n           [denominator (string->number\
    \ (cadr parts))])\n      (list numerator denominator)))\n  (define (is-whole-number?\
    \ n)\n    (and (number? n)\n         (integer? n)))\n  (define (is-fraction? n)\n\
    \    (and (list? n)\n         (= (length n) 2)\n         (number? (car n))\n \
    \        (number? (cadr n))))\n  (define (is-whole-fraction? n)\n    (and (is-fraction?\
    \ n)\n         (= (cadr n) 1)))\n  (define (is-whole-number-or-fraction? n)\n\
    \    (or (is-whole-number? n)\n        (is-whole-fraction? n)))\n  (define (is-whole-number-or-fraction-string?\
    \ s", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (lcm-list lst)\n    (if (null? (cdr lst))\n        (car\
    \ lst)\n        (lcm (car lst) (lcm-list (cdr lst)))))\n  (define (simplify-fraction\
    \ num den)\n    (let ([g (gcd num den)])\n      (values (/ num g) (/ den g))))\n\
    \  (define (multiply-fractions num1 den1 num2 den2)\n    (let-values ([(num den)\
    \ (simplify-fraction (* num1 num2) (lcm den1 den2))])\n      (if (= (remainder\
    \ num den) 0)\n          #t\n          #f)))\n  (let-values ([(num1 den1) (string-&gt;number\
    \ x)\n               (num2 den2) (string-&gt;number n)])\n    (multiply-fractions\
    \ num1 den1 num2 den2)))\n</code>\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n    (let*\
    \ ([g (gcd numerator denominator)]\n           [numerator (/ numerator g)]\n \
    \          [denominator (/ denominator g)])\n      (if (= (remainder (* numerator\
    \ denominator) denominator) 0)\n          #t\n          #f)))\n  (let* ([x-numerator\
    \ (string->number (regexp-match #rx\"^[0-9]+\" x))]\n         [x-denominator (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x))]\n         [n-numerator (string->number (regexp-match\
    \ #rx\"^[0-9]+\" n))]\n         [n-denominator (string->number (regexp-match #rx\"\
    /[0-9]+$\" n))]\n         [l (lcm x-denominator n-denominator)])\n    (simplify-fraction\
    \ (* x-numerator (/ l x-denominator)) (* n-numerator (/ l n-denominator)))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (multiply-fractions a b)\n    (define (split-fraction s)\n      (define\
    \ (split-fraction-helper s acc)\n        (if (empty? s)\n            (reverse\
    \ acc)\n            (split-fraction-helper (rest s) (cons (first s) acc))))\n\
    \      (split-fraction-helper (string->list s) '()))\n    (define (fraction-to-number\
    \ f)\n      (string->number (apply string-append f)))\n    (define (multiply-fractions-helper\
    \ a b)\n      (let ([numerator (fraction-to-number (car a))]\n            [denominator\
    \ (fraction-to-number (cdr a))]\n            [numerator2 (fraction-to-number (car\
    \ b))]\n            [denominator2 (fraction-to-number (cdr b))])\n        (let\
    \ ([numerator (* numerator numerator2)]\n              [denominator (* denominator\
    \ denominator2)])\n          (if (= (gcd numerator denominator) 1)\n         \
    \     (cons (number->string numerator) (number->string denominator))\n       \
    \       (let ([gcd-value (gcd numerator denominator)])\n                (cons\
    \ (number->string (/ numerator gcd-value)) (number->string (/ denominator gcd-value))))))))\n\
    \    (multiply-fractions-helper (split-fraction a) (split-fraction b)))\n  (define\
    \ (is-whole-number? s)\n    (if (empty? s)\n        #t\n        (if (char=? (first\
    \ s) #\\.)\n            #f\n            (is-whole-number? (rest s)))))\n  (is-whole-number?\
    \ (apply string-append (cdr (multiply-fractions x n)))))\n\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (define\
    \ (get-numerator x)\n        (string->number (substring x 0 (string-index x #\\\
    /))))\n      (define (get-denominator x)\n        (string->number (substring x\
    \ (+ 1 (string-index x #\\/)))))\n      (define (get-gcd x)\n        (gcd (get-numerator\
    \ x) (get-denominator x)))\n      (define (get-lcm x)\n        (lcm (get-numerator\
    \ x) (get-denominator x)))\n      (define (get-simplified-numerator x)\n     \
    \   (/ (get-numerator x) (get-gcd x)))\n      (define (get-simplified-denominator\
    \ x)\n        (/ (get-denominator x) (get-gcd x)))\n      (define (get-simplified-fraction\
    \ x)\n        (string-append (number->string (get-simplified-numerator x))\n \
    \                      \"/\"\n                       (number->string (get-simplified-denominator\
    \ x))))\n      (define (get-simplified-product x)\n        (string-append (number->string\
    \ (* (get-numerator x) (get-numerator n)))\n                       \"/\"\n   \
    \                    (number->string (* (get-denominator x) (get-denominator n)))))\n\
    \      (define (get-simplified-product-numerator x)\n        (string->number (substring\
    \ (get-simplified-product x) 0 (string-index (get-simplified-product x) #\\/))))\n\
    \      (define (get-simplified-product-denominator x)\n        (string->number\
    \ (substring (get-simplified-product x", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (=\
    \ a 0)\n        0\n        (* a (/ b (gcd a b)))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (split-fraction\
    \ x)\n        (define (split-fraction-helper x)\n          (if (string-contains\
    \ x #\\/)\n              (cons (substring x 0 (string-index x #\\/))\n       \
    \             (substring x (+ 1 (string-index x #\\/))))\n              (cons\
    \ x \"\")))\n        (split-fraction-helper x))\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (lcm-list lst)\n    (if (empty? lst)\n        1\n  \
    \      (lcm (first lst) (lcm-list (rest lst)))))\n  (define (simplify-fraction\
    \ str)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (string-&gt;number (string-&gt;list (first str))) acc))))\n\
    \      (split-fraction-helper (string-split str #\\/) '()))\n    (define (simplify-fraction-helper\
    \ str)\n      (let* ([numerator (first str)]\n             [denominator (second\
    \ str)]\n             [gcd (gcd numerator denominator)])\n        (if (= gcd 1)\n\
    \            str\n            (simplify-fraction-helper (list (/ numerator gcd)\
    \ (/ denominator gcd))))))\n    (simplify-fraction-helper (split-fraction str)))\n\
    \  (define (multiply-fractions x n)\n    (let* ([x-numerator (first x)]\n    \
    \       [x-denominator (second x)]\n           [n-numerator (first n)]\n     \
    \      [n-denominator (second n)])\n      (list (* x-numerator n-numerator) (*\
    \ x-denominator n-denominator))))\n  (define (is-whole-number? x)\n    (= (remainder\
    \ (first x) (second x)) 0))\n  (is-whole-number? (multiply-fractions (simplify-fraction\
    \ x) (simplify-fraction n))))\n", "  (define (gcd a b)\n    (if (= b 0)\n    \
    \    a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (/ (* a b) (gcd a b))))\n  (define (multiply-fractions x y)\n\
    \    (define (split-fraction str)\n      (define (helper str acc)\n        (if\
    \ (empty? str)\n            (reverse acc)\n            (helper (rest str) (cons\
    \ (first str) acc))))\n      (define (to-int str)\n        (if (empty? str)\n\
    \            0\n            (+ (* (to-int (rest str)) 10) (char->integer (first\
    \ str)))))\n      (define (helper2 str acc)\n        (if (empty? str)\n      \
    \      (reverse acc)\n            (helper2 (rest str) (cons (to-int (helper str\
    \ '())) acc))))\n      (helper2 str '()))\n    (define (to-str num)\n      (if\
    \ (= num 0)\n          \"\"\n          (string-append (to-str (quotient num 10))\
    \ (string (integer->char (remainder num 10))))))\n    (define (reduce-fraction\
    \ num den)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n    \
    \        (gcd b (remainder a b))))\n      (let ([g (gcd num den)])\n        (list\
    \ (quotient num g) (quotient den g))))\n    (define (multiply-fractions-helper\
    \ x y)\n      (let ([num1 (first x)]\n            [den1 (second x)]\n        \
    \    [num2 (first y)]\n            [den2 (second y)])\n        (reduce-fraction\
    \ (* num1 num2) (* den1 den2))))\n    (let ([x (split-fraction x)]\n         \
    \ [y (split-fraction y)])\n      (to-str (first (multiply-fractions-helper x y)))))\n\
    \  (define (is-whole-number? str)\n    (if", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction str)\n    (define (split-fraction str)\n      (define\
    \ (split-fraction-helper str acc)\n        (if (empty? str)\n            (reverse\
    \ acc)\n            (split-fraction-helper (rest str) (cons (first str) acc))))\n\
    \      (define (to-number str)\n        (string->number (list->string str)))\n\
    \      (define (to-int str)\n        (string->number (list->string str)))\n  \
    \    (define (to-fraction str)\n        (define (to-fraction-helper str acc)\n\
    \          (if (empty? str)\n              (reverse acc)\n              (to-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n        (define (to-fraction-helper-2\
    \ str acc)\n          (if (empty? str)\n              (reverse acc)\n        \
    \      (to-fraction-helper-2 (rest str) (cons (first str) acc))))\n        (define\
    \ (to-fraction-helper-3 str acc)\n          (if (empty? str)\n              (reverse\
    \ acc)\n              (to-fraction-helper-3 (rest str) (cons (first str) acc))))\n\
    \        (define (to-fraction-helper-4 str acc)\n          (if (empty? str)\n\
    \              (reverse acc)\n              (to-fraction-helper-4 (rest str) (cons\
    \ (first str) acc))))\n        (define (to-fraction-helper-5 str acc)\n      \
    \    (if (empty? str)\n              (reverse acc)\n              (to-fraction-helper-5\
    \ (rest str) (cons (first str) acc))))\n        (define (to-fraction-helper-6\
    \ str acc)\n          (if (empty? str)\n              (reverse acc)\n        \
    \      (to-", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction numerator denominator)\n    (define g (gcd numerator denominator))\n\
    \    (define n (quotient numerator g))\n    (define d (quotient denominator g))\n\
    \    (if (= (remainder n d) 0)\n        #t\n        #f))\n  (define (parse-fraction\
    \ str)\n    (define (parse-fraction-helper str)\n      (if (empty? str)\n    \
    \      (values 0 0)\n          (let ((c (first str)))\n            (if (char=?\
    \ c #\\/)\n                (values (string->number (substring str 0 (sub1 (string-length\
    \ str))))\n                        (string->number (substring str (add1 (string-length\
    \ str)) (string-length str))))\n                (parse-fraction-helper (rest str))))))\n\
    \    (parse-fraction-helper str))\n  (define (parse-fraction-2 str)\n    (define\
    \ (parse-fraction-helper str)\n      (if (empty? str)\n          (values 0 0)\n\
    \          (let ((c (first str)))\n            (if (char=? c #\\/)\n         \
    \       (values (string->number (substring str 0 (sub1 (string-length str))))\n\
    \                        (string->number (substring str (add1 (string-length str))\
    \ (string-length str))))\n                (parse-fraction-helper (rest str))))))\n\
    \    (parse-fraction-helper str))\n  (define (multiply-fractions x y)\n    (define\
    \ (multiply-fractions-helper x y)\n      (let ((x-n (car x))\n            (x-d\
    \ (cadr x))\n            (y-n (car y))\n            (y-d (cadr y)))\n        (values\
    \ (* x-n y-n)\n                (lcm x-d y-d))))\n   ", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (define\
    \ (split-fraction x)\n        (define (split-fraction-helper x)\n          (if\
    \ (= (string-length x) 1)\n              (list (string->number (substring x 0\
    \ 1))\n                    (string->number (substring x 1 1)))\n             \
    \ (list (string->number (substring x 0 1))\n                    (string->number\
    \ (substring x 1 (string-length x))))))\n        (split-fraction-helper (string-append\
    \ x \"1\")))\n      (define (gcd a b)\n        (if (= b 0)\n            a\n  \
    \          (gcd b (remainder a b))))\n      (define (lcm a b)\n        (if (=\
    \ a 0)\n            0\n            (/ (* a b) (gcd a b))))\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (if\
    \ (= (gcd (car x) (cadr x)) 1)\n              x\n              (simplify-fraction-helper-helper-helper\
    \ (list (/ (car x) (gcd (car x) (cadr x)))\n                                 \
    \                           (/ (cadr x) (gcd (car x) (cadr x)))))))\n        (simplify-fraction-helper-helper-helper\
    \ (list (car x) (cadr x))))\n      (simplify-fraction-helper-helper (split-fraction\
    \ x)))\n    (simplify-fraction-helper (string-append x \"1\")))\n  (define (multiply-fractions\
    \ x y)\n    (define (multiply-fractions-helper x y)\n     ", "  (define (gcd a\
    \ b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (define\
    \ (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (simplify-fraction-helper-helper-helper-helper x)\n  \
    \          (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n\
    \  (define (lcm-list lst)\n    (if (null? (cdr lst))\n        (car lst)\n    \
    \    (lcm (car lst) (lcm-list (cdr lst)))))\n  (define (numerator str)\n    (string->number\
    \ (substring str 0 (string-index str #\\/))))\n  (define (denominator str)\n \
    \   (string->number (substring str (+ 1 (string-index str #\\/)))))\n  (define\
    \ (simplify-fraction str)\n    (let* ([n (numerator str)]\n           [d (denominator\
    \ str)]\n           [g (gcd n d)])\n      (string-append (number->string (/ n\
    \ g)) \"/\" (number->string (/ d g)))))\n  (let* ([x-n (numerator x)]\n      \
    \   [x-d (denominator x)]\n         [n-n (numerator n)]\n         [n-d (denominator\
    \ n)]\n         [l (lcm x-d n-d)]\n         [x-n-l (/ (* x-n l) x-d)]\n      \
    \   [n-n-l (/ (* n-n l) n-d)])\n    (equal? (simplify-fraction (string-append\
    \ (number->string (* x-n-l n-n-l)) \"/\" (number->string l)))\n            (simplify-fraction\
    \ (string-append (number->string (* x-n-l n-n-l)) \"/1\")))))\n", "  (let* ([x-num\
    \ (string->number (car (string-split x \"/\")))])\n    (let* ([x-den (string->number\
    \ (cadr (string-split x \"/\")))])\n      (let* ([n-num (string->number (car (string-split\
    \ n \"/\")))])\n        (let* ([n-den (string->number (cadr (string-split n \"\
    /\")))])\n          (let* ([num (* x-num n-num)])\n            (let* ([den (*\
    \ x-den n-den)])\n              (let* ([gcd (gcd num den)])\n                (if\
    \ (= (mod num gcd) 0)\n                    (if (= (mod den gcd) 0)\n         \
    \               #t\n                        #f)\n                    #f))))))))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ a b)\n    (define (simplify-fraction-helper a b)\n      (if (= (remainder a\
    \ b) 0)\n          (cons (/ a b) 1)\n          (simplify-fraction-helper b (remainder\
    \ a b))))\n    (simplify-fraction-helper (string->number (car (string-split (string-append\
    \ a \"/\") \"/\")))\n                              (string->number (car (string-split\
    \ (string-append b \"/\") \"/\")))))\n  (define (is-whole-number? a)\n    (= (remainder\
    \ a 1) 0))\n  (define (multiply-fractions a b)\n    (define (multiply-fractions-helper\
    \ a b)\n      (cons (* (car a) (car b))\n            (* (cdr a) (cdr b))))\n \
    \   (multiply-fractions-helper (simplify-fraction (car (string-split (string-append\
    \ x \"/\") \"/\"))\n                                                  (car (string-split\
    \ (string-append n \"/\") \"/\")))\n                               (simplify-fraction\
    \ (cdr (string-split (string-append x \"/\") \"/\"))\n                       \
    \                           (cdr (string-split (string-append n \"/\") \"/\")))))\n\
    \  (is-whole-number? (/ (car (multiply-fractions x n))\n                     \
    \ (cdr (multiply-fractions x n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (=\
    \ a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (let ([g (gcd numerator denominator)])\n      (cons\
    \ (/ numerator g) (/ denominator g))))\n  (define (multiply-fractions x y)\n \
    \   (let ([x-numerator (car x)]\n          [x-denominator (cdr x)]\n         \
    \ [y-numerator (car y)]\n          [y-denominator (cdr y)])\n      (simplify-fraction\
    \ (* x-numerator y-numerator)\n                         (* x-denominator y-denominator))))\n\
    \  (define (is-whole-number? numerator denominator)\n    (= (remainder numerator\
    \ denominator) 0))\n  (let ([x-numerator (string->number (car (string-split (string-trim\
    \ x) \"/\")))])\n    (let ([x-denominator (string->number (car (string-split (string-trim\
    \ (cdr (string-split (string-trim x) \"/\"))) \"/\")))])\n      (let ([n-numerator\
    \ (string->number (car (string-split (string-trim n) \"/\")))])\n        (let\
    \ ([n-denominator (string->number (car (string-split (string-trim (cdr (string-split\
    \ (string-trim n) \"/\"))) \"/\")))])\n          (is-whole-number? (car (multiply-fractions\
    \ (cons x-numerator x-denominator) (cons n-numerator n-denominator)))\n      \
    \                      (cdr (multiply-fractions (cons x-numerator x-denominator)\
    \ (cons n-numerator n-denominator)))))))))\n", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (if (= a 0)\n        b\n        (lcm b (remainder a b))))\n  (define (multiply-fractions\
    \ x y)\n    (let ([x-numerator (string->number (car (string-split x \"/\")))])\n\
    \      (let ([x-denominator (string->number (cadr (string-split x \"/\")))])\n\
    \        (let ([y-numerator (string->number (car (string-split y \"/\")))])\n\
    \          (let ([y-denominator (string->number (cadr (string-split y \"/\")))])\n\
    \            (let ([numerator (* x-numerator y-numerator)])\n              (let\
    \ ([denominator (* x-denominator y-denominator)])\n                (let ([gcd\
    \ (gcd numerator denominator)])\n                  (let ([numerator (/ numerator\
    \ gcd)])\n                    (let ([denominator (/ denominator gcd)])\n     \
    \                 (if (= (remainder numerator denominator) 0)\n              \
    \            #t\n                          #f))))))))))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (define\
    \ (helper-helper x)\n        (if (= (remainder (string->number (car x)) (string->number\
    \ (cadr x))) 0)\n            (list (number->string (/ (string->number (car x))\
    \ (string->number (cadr x)))) \"1\")\n            (list (car x) (cadr x))))\n\
    \      (helper-helper (string-split x #\\/)))\n    (simplify-fraction-helper (string-split\
    \ x #\\/)))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x n)\n      (list (number->string (* (string->number (car x)) (string->number\
    \ (car n))))\n            (number->string (* (string->number (cadr x)) (string->number\
    \ (cadr n))))))\n    (multiply-fractions-helper (simplify-fraction x) (simplify-fraction\
    \ n)))\n  (define (simplify-fraction-helper x)\n    (define (helper-helper x)\n\
    \      (if (= (remainder (string->number (car x)) (string->number (cadr x))) 0)\n\
    \          (list (number->string (/ (string->number (car x)) (string->number (cadr\
    \ x)))) \"1\")\n          (list (car x) (cadr x))))\n    (helper-helper (string-split\
    \ x #\\/)))\n  (define (simplify-fraction x)\n    (simplify-fraction-helper (string-split\
    \ x #\\/)))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x n)\n      (list (number->", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (* a (/ b (gcd a b)))))\n  (define (simplify-fraction s)\n\
    \    (define (split-fraction s)\n      (define (split-fraction-helper s acc)\n\
    \        (if (string-empty? s)\n            (reverse acc)\n            (split-fraction-helper\
    \ (substring s 1) (cons (string-ref s 0) acc))))\n      (define (string-to-number\
    \ s)\n        (string->number (list->string (reverse s))))\n      (define (split-fraction-helper2\
    \ s acc)\n        (if (string-empty? s)\n            (reverse acc)\n         \
    \   (if (char=? (string-ref s 0) #\\/)\n                (split-fraction-helper2\
    \ (substring s 1) (cons (string-to-number (reverse acc)) acc))\n             \
    \   (split-fraction-helper2 (substring s 1) (cons (string-ref s 0) acc)))))\n\
    \      (split-fraction-helper2 (split-fraction-helper s '()) '()))\n    (define\
    \ (simplify-fraction-helper s)\n      (define (simplify-fraction-helper2 s)\n\
    \        (if (string-empty? s)\n            '()\n            (cons (string-ref\
    \ s 0) (simplify-fraction-helper2 (substring s 1)))))\n      (define (string-to-number\
    \ s)\n        (string->number (list->string (reverse s))))\n      (define (simplify-fraction-helper3\
    \ s acc)\n        (if (string-empty? s)\n            (reverse acc)\n         \
    \   (if (char=? (string-ref s 0) #\\/)\n                (simplify-fraction-helper3\
    \ (substring s 1) (cons (string-to-number (reverse acc)) acc))\n             \
    \   (simplify-fraction-", "  (define (gcd a b)\n    (if (= b 0)\n        a\n \
    \       (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a\
    \ b)))\n  (define (simplify-fraction n)\n    (define (gcd-fraction n)\n      (gcd\
    \ (car n) (cdr n)))\n    (define (lcm-fraction n)\n      (lcm (car n) (cdr n)))\n\
    \    (define (divide-fraction n)\n      (cons (/ (car n) (gcd-fraction n)) (/\
    \ (cdr n) (gcd-fraction n))))\n    (define (multiply-fraction n1 n2)\n      (cons\
    \ (* (car n1) (car n2)) (* (cdr n1) (cdr n2))))\n    (define (divide-fraction-by-number\
    \ n)\n      (cons (/ (car n) (cdr n)) 1))\n    (define (multiply-fraction-by-number\
    \ n)\n      (cons (* (car n) (cdr n)) 1))\n    (define (divide-number-by-fraction\
    \ n)\n      (cons 1 (/ (cdr n) (car n))))\n    (define (multiply-number-by-fraction\
    \ n)\n      (cons 1 (* (cdr n) (car n))))\n    (define (divide-number-by-number\
    \ n)\n      (cons (/ (car n) (cdr n)) 1))\n    (define (multiply-number-by-number\
    \ n)\n      (cons (* (car n) (cdr n)) 1))\n    (define (simplify-fraction-by-number\
    \ n)\n      (if (= (cdr n) 1)\n          (car n)\n          (cons (car n) (cdr\
    \ n))))\n    (define (simplify-number-by-fraction n)\n      (if (= (car n) 1)\n\
    \          (cdr n)\n          (cons (car n) (cdr n))))\n    (define (simplify-number-by-number\
    \ n)", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (gcd-helper a b)\n\
    \        (if (= b 0)\n            a\n            (gcd-helper b (remainder a b))))\n\
    \      (define (lcm-helper a b)\n        (/ (* a b) (gcd-helper a b)))\n     \
    \ (define (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (simplify-fraction-helper-helper-helper-helper x)\n  \
    \          (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-hel",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction str)\n    (define (split-fraction str)\n      (define\
    \ (split-fraction-helper str acc)\n        (if (empty? str)\n            (reverse\
    \ acc)\n            (if (char=? (first str) #\\/)\n                (reverse (cons\
    \ (list->string (reverse acc)) (rest str)))\n                (split-fraction-helper\
    \ (rest str) (cons (first str) acc)))))\n      (split-fraction-helper str '()))\n\
    \    (define (simplify-fraction-helper str)\n      (define (get-numerator str)\n\
    \        (string->number (first (split-fraction str))))\n      (define (get-denominator\
    \ str)\n        (string->number (second (split-fraction str))))\n      (define\
    \ (get-gcd str)\n        (gcd (get-numerator str) (get-denominator str)))\n  \
    \    (define (get-lcm str)\n        (lcm (get-numerator str) (get-denominator\
    \ str)))\n      (define (get-simplified-fraction str)\n        (define (get-simplified-numerator\
    \ str)\n          (/ (get-numerator str) (get-gcd str)))\n      (define (get-simplified-denominator\
    \ str)\n        (/ (get-denominator str) (get-gcd str)))\n      (list->string\
    \ (list (get-simplified-numerator str) #\\/ (get-simplified-denominator str))))\n\
    \    (get-simplified-fraction str))\n  (define (multiply-fractions x n)\n    (define\
    \ (get-numerator str)\n      (string->number (first (split-fraction str))))\n\
    \    (define (get-denominator str)\n      (", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (numerator x)\n\
    \        (string->number (car (string-split x #\\/))))\n      (define (denominator\
    \ x)\n        (string->number (cadr (string-split x #\\/))))\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (numerator x)\n          (string->number (car (string-split\
    \ x #\\/))))\n        (define (denominator x)\n          (string->number (cadr\
    \ (string-split x #\\/))))\n        (define (gcd a b)\n          (if (= b 0)\n\
    \              a\n              (gcd b (remainder a b))))\n        (define (lcm\
    \ a b)\n          (if (= a 0)\n              0\n              (/ (* a b) (gcd\
    \ a b))))\n        (if (= (gcd (numerator x) (denominator x)) 1)\n           \
    \ x\n            (string-append (number->string (/ (numerator x) (gcd (numerator\
    \ x) (denominator x))))\n                           \"/\"\n                  \
    \         (number->string (/ (denominator x) (gcd (numerator x) (denominator x)))))))\n\
    \      (simplify-fraction-helper-helper (string-append (number->string (numerator\
    \ x))\n                                                      \"/\"\n         \
    \                                             (number->string (denominator x)))))\n\
    \    (simplify-fraction-helper (string-append (number->string (numerator x))\n\
    \                                             \"/\"\n                        \
    \                     (number->string (denominator x)))))\n  (define (numerator\
    \ x)\n    (string->number (car (string-split x #\\/))))\n  (define (denomin",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ a b)\n    (define (gcd a b)\n      (if (= b 0)\n          a\n          (gcd\
    \ b (remainder a b))))\n    (define (lcm a b)\n      (/ (* a b) (gcd a b)))\n\
    \    (define (simplify-fraction a b)\n      (let ([g (gcd a b)])\n        (cons\
    \ (/ a g) (/ b g))))\n    (let ([g (gcd a b)])\n      (cons (/ a g) (/ b g))))\n\
    \  (let ([x-num (string->number (car (string-split (string-trim x) \"/\")))])\n\
    \    (let ([x-den (string->number (cadr (string-split (string-trim x) \"/\")))])\n\
    \      (let ([n-num (string->number (car (string-split (string-trim n) \"/\")))])\n\
    \        (let ([n-den (string->number (cadr (string-split (string-trim n) \"/\"\
    )))])\n          (let ([l (lcm x-den n-den)])\n            (let ([x-num-s (* (/\
    \ l x-den) x-num)])\n              (let ([n-num-s (* (/ l n-den) n-num)])\n  \
    \              (let ([s (+ x-num-s n-num-s)])\n                  (let ([g (gcd\
    \ s l)])\n                    (= (/ s g) (/ l g)))))))))))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n  (define\
    \ (lcm-list lst)\n    (if (null? (cdr lst))\n        (car lst)\n        (lcm (car\
    \ lst) (lcm-list (cdr lst)))))\n  (define (simplify-fraction str)\n    (define\
    \ (split-fraction str)\n      (define (split-fraction-helper str acc)\n      \
    \  (if (null? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (cdr str) (cons (car str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (gcd-fraction str)\n      (define (gcd-fraction-helper str acc)\n\
    \        (if (null? str)\n            acc\n            (gcd-fraction-helper (cdr\
    \ str) (gcd (car str) acc))))\n      (gcd-fraction-helper str 0))\n    (define\
    \ (reduce-fraction str)\n      (define (reduce-fraction-helper str acc)\n    \
    \    (if (null? str)\n            (reverse acc)\n            (reduce-fraction-helper\
    \ (cdr str) (cons (/ (car str) (gcd-fraction str)) acc))))\n      (reduce-fraction-helper\
    \ str '()))\n    (reduce-fraction (split-fraction str)))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-helper x n acc)\n      (if (null? x)\n\
    \          (reverse acc)\n          (multiply-fractions-helper (cdr x) (cdr n)\
    \ (cons (* (car x) (car n)) acc))))\n    (multiply-fractions-helper x n '()))\n\
    \  (define (is-whole-number? str)\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n    (define\
    \ gcd (gcd numerator denominator))\n    (define numerator (/ numerator gcd))\n\
    \    (define denominator (/ denominator gcd))\n    (list numerator denominator))\n\
    \  (define (multiply-fractions x-numerator x-denominator n-numerator n-denominator)\n\
    \    (define lcm (lcm x-denominator n-denominator))\n    (define numerator (*\
    \ x-numerator (/ lcm x-denominator)))\n    (define numerator (+ numerator (* n-numerator\
    \ (/ lcm n-denominator))))\n    (define denominator lcm)\n    (simplify-fraction\
    \ numerator denominator))\n  (define (parse-fraction x)\n    (define (parse-fraction-helper\
    \ x)\n      (if (string=? (substring x 0 1) \"/\")\n          (list 1 (string->number\
    \ (substring x 1 (string-length x))))\n          (list (string->number (substring\
    \ x 0 (string-index x \"/\")))\n                (string->number (substring x (+\
    \ (string-index x \"/\") 1) (string-length x))))))\n    (parse-fraction-helper\
    \ x))\n  (define (is-integer? x)\n    (if (string=? (substring x (string-length\
    \ x) (+ (string-length x) 1)) \"0\")\n        #t\n        #f))\n  (define (fraction-to-string\
    \ numerator denominator)\n    (string-append (number->string numerator) \"/\"\
    \ (number->string denominator)))\n  (define (is-whole-number? x)\n    (is-integer?\
    \ (fraction-to-string x)))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x-numer", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (reduce-fraction\
    \ n d)\n    (let ([g (gcd n d)])\n      (cons (/ n g) (/ d g))))\n  (define (mult-fraction\
    \ x y)\n    (let* ([x-n (car x)]\n           [x-d (cdr x)]\n           [y-n (car\
    \ y)]\n           [y-d (cdr y)]\n           [n (* x-n y-n)]\n           [d (lcm\
    \ x-d y-d)])\n      (reduce-fraction n d)))\n  (define (parse-fraction s)\n  \
    \  (let ([parts (string-split s \"/\")])\n      (cons (string->number (car parts))\n\
    \            (string->number (cadr parts)))))\n  (let* ([x-f (parse-fraction x)]\n\
    \         [n-f (parse-fraction n)]\n         [f (mult-fraction x-f n-f)])\n  \
    \  (= (cdr f) 1)))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n    \
    \    (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n       \
    \ 0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n    (define\
    \ (simplify-fraction-helper x)\n      (if (zero? (remainder (string->number (car\
    \ x)) (string->number (cadr x))))\n          (simplify-fraction-helper (cons (number->string\
    \ (/ (string->number (car x)) (string->number (cadr x)))) (cddr x)))\n       \
    \   (cons (car x) (cdr x))))\n    (simplify-fraction-helper (string-split x \"\
    /\")))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x n)\n      (cons (number->string (* (string->number (car x)) (string->number\
    \ (car n))))\n            (cons (number->string (lcm (string->number (cadr x))\
    \ (string->number (cadr n))))\n                  '())))\n    (simplify-fraction\
    \ (multiply-fractions-helper x n)))\n  (if (zero? (remainder (string->number (car\
    \ (multiply-fractions x n))) (string->number (cadr (multiply-fractions x n)))))\n\
    \      #t\n      #f))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n \
    \       (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a\
    \ b)))\n  (define (simplify-fraction numerator denominator)\n    (let ([g (gcd\
    \ numerator denominator)])\n      (list (/ numerator g) (/ denominator g))))\n\
    \  (define (multiply-fractions x y)\n    (let ([x-numerator (car x)]\n       \
    \   [x-denominator (cadr x)]\n          [y-numerator (car y)]\n          [y-denominator\
    \ (cadr y)])\n      (simplify-fraction (* x-numerator y-numerator) (* x-denominator\
    \ y-denominator))))\n  (define (parse-fraction s)\n    (let ([parts (string-split\
    \ s \"/\")])\n      (list (string->number (car parts)) (string->number (cadr parts)))))\n\
    \  (define (is-integer? n)\n    (= (remainder n 1) 0))\n  (define (fraction-to-string\
    \ f)\n    (string-append (number->string (car f)) \"/\" (number->string (cadr\
    \ f))))\n  (define (fraction-to-decimal f)\n    (/ (car f) (cadr f)))\n  (let\
    \ ([x (parse-fraction x)]\n        [n (parse-fraction n)])\n    (is-integer? (fraction-to-decimal\
    \ (multiply-fractions x n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n   \
    \     a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b)\
    \ (gcd a b)))\n  (define (simplify-fraction x)\n    (let* ([numerator (string->number\
    \ (car (string-split x \"/\")))])\n      (let* ([denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n        (let* ([gcd (gcd numerator denominator)])\n\
    \          (string-append (number->string (/ numerator gcd)) \"/\" (number->string\
    \ (/ denominator gcd)))))))\n  (define (multiply-fractions x n)\n    (let* ([x-numerator\
    \ (string->number (car (string-split x \"/\")))])\n      (let* ([x-denominator\
    \ (string->number (cadr (string-split x \"/\")))])\n        (let* ([n-numerator\
    \ (string->number (car (string-split n \"/\")))])\n          (let* ([n-denominator\
    \ (string->number (cadr (string-split n \"/\")))])\n            (string-append\
    \ (number->string (* x-numerator n-numerator)) \"/\" (number->string (lcm x-denominator\
    \ n-denominator))))))))\n  (define (is-whole-number? x)\n    (let* ([numerator\
    \ (string->number (car (string-split x \"/\")))])\n      (let* ([denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n        (= (remainder numerator denominator)\
    \ 0))))\n  (is-whole-number? (simplify-fraction (multiply-fractions x n))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (numerator str)\n    (string->number (substring str 0 (string-index\
    \ str #\\/))))\n  (define (denominator str)\n    (string->number (substring str\
    \ (+ 1 (string-index str #\\/)))))\n  (define (simplify-fraction str)\n    (define\
    \ num (numerator str))\n    (define den (denominator str))\n    (define g (gcd\
    \ num den))\n    (define n (quotient num g))\n    (define d (quotient den g))\n\
    \    (if (= d 1)\n        (number->string n)\n        (string-append (number->string\
    \ n) \"/\" (number->string d))))\n  (define (multiply-fractions x n)\n    (define\
    \ x-num (numerator x))\n    (define x-den (denominator x))\n    (define n-num\
    \ (numerator n))\n    (define n-den (denominator n))\n    (define l (lcm x-den\
    \ n-den))\n    (define num (* x-num (/ l x-den)))\n    (define den (* n-num (/\
    \ l n-den)))\n    (define g (gcd num den))\n    (define n (quotient num g))\n\
    \    (define d (quotient den g))\n    (if (= d 1)\n        (number->string n)\n\
    \        (string-append (number->string n) \"/\" (number->string d))))\n  (define\
    \ (is-whole-number str)\n    (if (string-index str #\\/)\n        #f\n       \
    \ #t))\n  (define (is-integer str)\n    (if (string-index str #\\/)\n        #f\n\
    \        (if (integer? (string->number str))\n            #t\n            #f)))\n\
    \  (define (is-integer-str str)\n   ", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction a b)\n    (let ([g (gcd a b)])\n\
    \      (list (/ a g) (/ b g))))\n  (define (multiply-fractions a b c d)\n    (simplify-fraction\
    \ (* a c) (* b d)))\n  (define (is-integer? x)\n    (= (remainder x 1) 0))\n \
    \ (define (is-whole-number? x)\n    (is-integer? (/ x 1.0)))\n  (define (parse-fraction\
    \ str)\n    (let ([parts (string-split str \"/\")])\n      (list (string->number\
    \ (first parts))\n            (string->number (second parts)))))\n  (define (fraction->number\
    \ a b)\n    (/ a b))\n  (define (fraction-to-string a b)\n    (string-append (number->string\
    \ a) \"/\" (number->string b)))\n  (define (is-simplified? a b)\n    (let ([g\
    \ (gcd a b)])\n      (and (= g 1)\n           (is-whole-number? (/ a b)))))\n\
    \  (let ([x (parse-fraction x)]\n        [n (parse-fraction n)])\n    (is-simplified?\
    \ (first x) (second x))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n\
    \        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a\
    \ b)))\n  (define (simplify-fraction numerator denominator)\n    (define g (gcd\
    \ numerator denominator))\n    (define n (/ numerator g))\n    (define d (/ denominator\
    \ g))\n    (cons n d))\n  (define (multiply-fractions x y)\n    (define (multiply-fraction\
    \ x y)\n      (define (multiply-fraction-helper x y)\n        (define (multiply-fraction-helper-helper\
    \ x y)\n          (define (multiply-fraction-helper-helper-helper x y)\n     \
    \       (define (multiply-fraction-helper-helper-helper-helper x y)\n        \
    \      (define (multiply-fraction-helper-helper-helper-helper-helper x y)\n  \
    \              (define (multiply-fraction-helper-helper-helper-helper-helper-helper\
    \ x y)\n                  (define (multiply-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x y)\n                    (define (multiply-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x y)\n                      (define (multiply-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x y)\n                        (define (multiply-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x y)\n                          (define (multiply-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x y)\n                            (define (multiply-fraction-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ n)\n    (define (simplify-fraction-helper n)\n      (define (simplify-fraction-helper-helper\
    \ n)\n        (if (zero? (remainder (string->number (substring n 0 1)) 2))\n \
    \           (simplify-fraction-helper-helper (substring n 1))\n            n))\n\
    \      (define (simplify-fraction-helper-helper-helper n)\n        (if (zero?\
    \ (remainder (string->number (substring n 1 1)) 2))\n            (simplify-fraction-helper-helper-helper\
    \ (substring n 0 1))\n            n))\n      (simplify-fraction-helper-helper-helper\
    \ (simplify-fraction-helper-helper n)))\n    (define (simplify-fraction-helper-helper\
    \ n)\n      (if (zero? (remainder (string->number (substring n 0 1)) 3))\n   \
    \       (simplify-fraction-helper-helper (substring n 1))\n          n))\n   \
    \ (define (simplify-fraction-helper-helper-helper n)\n      (if (zero? (remainder\
    \ (string->number (substring n 1 1)) 3))\n          (simplify-fraction-helper-helper-helper\
    \ (substring n 0 1))\n          n))\n    (simplify-fraction-helper-helper-helper\
    \ (simplify-fraction-helper-helper n)))\n  (define (simplify-fraction-helper n)\n\
    \    (define (simplify-fraction-helper-helper n)\n      (if (zero? (remainder\
    \ (string->number (substring n 0 1)) 5))\n          (simplify-fraction-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x gcd)\n      (if (= gcd 1)\n    \
    \      x\n          (simplify-fraction-helper (cons (/ (car x) gcd) (/ (cdr x)\
    \ gcd)) (gcd (car x) (cdr x)))))\n    (simplify-fraction-helper x (gcd (car x)\
    \ (cdr x))))\n  (define (multiply-fractions x y)\n    (cons (* (car x) (car y))\
    \ (* (cdr x) (cdr y))))\n  (define (is-integer? x)\n    (= (remainder (car x)\
    \ (cdr x)) 0))\n  (is-integer? (simplify-fraction (multiply-fractions (string->fraction\
    \ x) (string->fraction n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n    \
    \    a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= b 0)\n\
    \        0\n        (/ (* a b) (gcd a b))))\n  (define (get-numerator str)\n \
    \   (string->number (regexp-match #rx\"^[0-9]+\" str)))\n  (define (get-denominator\
    \ str)\n    (string->number (regexp-match #rx\"/[0-9]+$\" str)))\n  (define (get-fraction\
    \ str)\n    (define numerator (get-numerator str))\n    (define denominator (get-denominator\
    \ str))\n    (cons numerator denominator))\n  (define (get-product x n)\n    (define\
    \ x-fraction (get-fraction x))\n    (define n-fraction (get-fraction n))\n   \
    \ (define x-numerator (car x-fraction))\n    (define x-denominator (cdr x-fraction))\n\
    \    (define n-numerator (car n-fraction))\n    (define n-denominator (cdr n-fraction))\n\
    \    (define product-numerator (* x-numerator n-numerator))\n    (define product-denominator\
    \ (lcm x-denominator n-denominator))\n    (cons product-numerator product-denominator))\n\
    \  (define (is-whole-number? x)\n    (= (remainder (car x) (cdr x)) 0))\n  (is-whole-number?\
    \ (get-product x n)))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n \
    \       (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a\
    \ b)))\n  (define (simplify-fraction x)\n    (define (gcd-fraction x)\n      (gcd\
    \ (car x) (cadr x)))\n    (define (divide-fraction x)\n      (list (/ (car x)\
    \ (gcd-fraction x))\n            (/ (cadr x) (gcd-fraction x))))\n    (divide-fraction\
    \ x))\n  (define (multiply-fractions x y)\n    (list (* (car x) (car y))\n   \
    \       (* (cadr x) (cadr y))))\n  (define (is-whole-number? x)\n    (= (remainder\
    \ (car x) (cadr x)) 0))\n  (is-whole-number? (simplify-fraction (multiply-fractions\
    \ (simplify-fraction (string->number x))\n                                   \
    \                       (simplify-fraction (string->number n))))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (lcm-list lst)\n  \
    \  (if (null? (cdr lst))\n        (car lst)\n        (lcm (car lst) (lcm-list\
    \ (cdr lst)))))\n  (define (numerator x)\n    (string->number (car (string-split\
    \ x #\"/\"))))\n  (define (denominator x)\n    (string->number (cadr (string-split\
    \ x #\"/\"))))\n  (define (is-whole-number? x)\n    (= (remainder (numerator x)\
    \ (denominator x)) 0))\n  (is-whole-number? (number->string (lcm-list (list (denominator\
    \ x) (denominator n))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n\
    \        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n   \
    \     0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n  \
    \  (define (simplify-fraction-helper x)\n      (define (get-numerator x)\n   \
    \     (string->number (substring x 0 (string-index x #\\/))))\n      (define (get-denominator\
    \ x)\n        (string->number (substring x (+ 1 (string-index x #\\/)))))\n  \
    \    (define (get-gcd x)\n        (gcd (get-numerator x) (get-denominator x)))\n\
    \      (define (get-lcm x)\n        (lcm (get-numerator x) (get-denominator x)))\n\
    \      (define (get-simplified-numerator x)\n        (/ (get-numerator x) (get-gcd\
    \ x)))\n      (define (get-simplified-denominator x)\n        (/ (get-denominator\
    \ x) (get-gcd x)))\n      (define (get-simplified-fraction x)\n        (string-append\
    \ (number->string (get-simplified-numerator x))\n                       \"/\"\n\
    \                       (number->string (get-simplified-denominator x))))\n  \
    \    (get-simplified-fraction x))\n    (simplify-fraction-helper x))\n  (define\
    \ (multiply-fractions x n)\n    (define (multiply-fractions-helper x n)\n    \
    \  (define (get-numerator x)\n        (string->number (substring x 0 (string-index\
    \ x #\\/))))\n      (define (get-denominator x)\n        (string->number (substring\
    \ x (+ 1 (string-index x #\\/)))))\n      (define (get-numerator n)\n        (string->number\
    \ (substring n 0 (string-index n #\\/))))\n      (define (get-", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n  (define\
    \ (simplify-fraction numerator denominator)\n    (let* ([g (gcd numerator denominator)]\n\
    \           [numerator (quotient numerator g)]\n           [denominator (quotient\
    \ denominator g)])\n      (if (= denominator 1)\n          numerator\n       \
    \   (list numerator denominator))))\n  (define (multiply-fractions x y)\n    (let*\
    \ ([x (simplify-fraction (car x) (cadr x))]\n           [y (simplify-fraction\
    \ (car y) (cadr y))]\n           [numerator (* (if (number? x) x (car x)) (if\
    \ (number? y) y (car y)))]\n           [denominator (lcm (if (number? x) 1 (cadr\
    \ x)) (if (number? y) 1 (cadr y)))])\n      (simplify-fraction numerator denominator)))\n\
    \  (define (parse-fraction str)\n    (let* ([parts (string-split str \"/\")]\n\
    \           [numerator (string->number (car parts))]\n           [denominator\
    \ (string->number (cadr parts))])\n      (list numerator denominator)))\n  (let*\
    \ ([x (parse-fraction x)]\n         [n (parse-fraction n)]\n         [result (multiply-fractions\
    \ x n)])\n    (if (number? result)\n        (= result (round result))\n      \
    \  (and (number? (car result)) (number? (cadr result))))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator\
    \ denominator)\n    (let ([g (gcd numerator denominator)])\n      (list (/ numerator\
    \ g) (/ denominator g))))\n  (let ([x-numerator (string->number (car (string-split\
    \ (car (string-split x \"/\")) \"/\")))])\n    (let ([x-denominator (string->number\
    \ (cadr (string-split (car (string-split x \"/\")) \"/\")))])\n      (let ([n-numerator\
    \ (string->number (car (string-split (car (string-split n \"/\")) \"/\")))])\n\
    \        (let ([n-denominator (string->number (cadr (string-split (car (string-split\
    \ n \"/\")) \"/\")))])\n          (let ([lcm (lcm x-denominator n-denominator)])\n\
    \            (let ([x-numerator (* (/ lcm x-denominator) x-numerator)])\n    \
    \              (let ([n-numerator (* (/ lcm n-denominator) n-numerator)])\n  \
    \                  (let ([result-numerator (+ x-numerator n-numerator)])\n   \
    \                   (let ([result-denominator lcm])\n                        (let\
    \ ([result (simplify-fraction result-numerator result-denominator)])\n       \
    \                   (if (= (cadr result) 1)\n                              #t\n\
    \                              #f))))))))))))\n", "  (let* ([x-num (string->number\
    \ (car (string-split x \"/\")))])\n    (let* ([x-den (string->number (cadr (string-split\
    \ x \"/\")))])\n      (let* ([n-num (string->number (car (string-split n \"/\"\
    )))])\n        (let* ([n-den (string->number (cadr (string-split n \"/\")))])\n\
    \          (let* ([x-num (* x-num n-den)])\n            (let* ([x-den (* x-den\
    \ n-den)])\n              (let* ([gcd (gcd x-num x-den)])\n                (let*\
    \ ([x-num (/ x-num gcd)])\n                  (let* ([x-den (/ x-den gcd)])\n \
    \                   (if (= x-den 1)\n                        #t\n            \
    \            #f))))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd\
    \ a b)))\n  (define (simplify-fraction numerator denominator)\n    (let ([g (gcd\
    \ numerator denominator)])\n      (cons (/ numerator g) (/ denominator g))))\n\
    \  (define (multiply-fractions a b)\n    (let ([a-numerator (car a)]\n       \
    \   [a-denominator (cdr a)]\n          [b-numerator (car b)]\n          [b-denominator\
    \ (cdr b)])\n      (simplify-fraction (* a-numerator b-numerator)\n          \
    \               (* a-denominator b-denominator))))\n  (define (is-integer? n)\n\
    \    (= (remainder n 1) 0))\n  (define (parse-fraction s)\n    (let ([parts (string-split\
    \ s \"/\")])\n      (cons (string->number (car parts))\n            (string->number\
    \ (cadr parts)))))\n  (let ([x (parse-fraction x)]\n        [n (parse-fraction\
    \ n)])\n    (is-integer? (car (multiply-fractions x n)))))\n", "  (let ([x-numerator\
    \ (string->number (car (string-split x \"/\")))])\n    (let ([x-denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n      (let ([n-numerator (string->number (car\
    \ (string-split n \"/\")))])\n        (let ([n-denominator (string->number (cadr\
    \ (string-split n \"/\")))])\n          (let ([x-numerator (* x-numerator n-numerator)])\n\
    \            (let ([x-denominator (* x-denominator n-denominator)])\n        \
    \      (let ([gcd (gcd x-numerator x-denominator)])\n                (if (= (modulo\
    \ x-numerator gcd) 0)\n                    (if (= (modulo x-denominator gcd) 0)\n\
    \                        #t\n                        #f)\n                   \
    \ #f))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction n)\n    (define (simplify-fraction-helper n)\n      (if (=\
    \ (remainder (string->number (car n)) (string->number (cadr n))) 0)\n        \
    \  (simplify-fraction-helper (cons (number->string (/ (string->number (car n))\
    \ (string->number (cadr n)))) (cddr n)))\n          (cons (car n) (cadr n))))\n\
    \    (simplify-fraction-helper (string-split n \"/\")))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-helper x n)\n      (cons (number->string\
    \ (* (string->number (car x)) (string->number (car n))))\n            (number->string\
    \ (* (string->number (cadr x)) (string->number (cadr n))))))\n    (multiply-fractions-helper\
    \ (simplify-fraction x) (simplify-fraction n)))\n  (define (divide-fractions x\
    \ n)\n    (define (divide-fractions-helper x n)\n      (cons (number->string (*\
    \ (string->number (car x)) (string->number (cadr n))))\n            (number->string\
    \ (* (string->number (cadr x)) (string->number (car n))))))\n    (divide-fractions-helper\
    \ (simplify-fraction x) (simplify-fraction n)))\n  (define (is-whole-number? x)\n\
    \    (= (remainder (string->number (car x)) (string->number (cadr x))) 0))\n \
    \ (is-whole-number? (multiply-fractions x n)))\n", "  (let ([x-num (string->number\
    \ (car (string-split x \"/\")))])\n    (let ([x-den (string->number (cadr (string-split\
    \ x \"/\")))])\n      (let ([n-num (string->number (car (string-split n \"/\"\
    )))])\n        (let ([n-den (string->number (cadr (string-split n \"/\")))])\n\
    \          (let ([num (* x-num n-num)])\n            (let ([den (* x-den n-den)])\n\
    \              (let ([gcd (gcd num den)])\n                (if (= gcd 1)\n   \
    \                 #f\n                    #t))))))))))\n", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (let ([g (gcd numerator denominator)])\n      (cons (/ numerator g) (/ denominator\
    \ g))))\n  (define (multiply-fractions x y)\n    (let ([x (simplify-fraction (car\
    \ x) (cdr x))]\n          [y (simplify-fraction (car y) (cdr y))])\n      (cons\
    \ (* (car x) (car y)) (* (cdr x) (cdr y)))))\n  (define (is-integer? x)\n    (=\
    \ (remainder x 1) 0))\n  (define (parse-fraction x)\n    (let ([n (string->number\
    \ (car (string-split x \"/\")))])\n      (cons n (string->number (cadr (string-split\
    \ x \"/\"))))))\n  (let ([x (parse-fraction x)]\n        [n (parse-fraction n)])\n\
    \    (is-integer? (car (multiply-fractions x n)))))\n", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction n)\n    (define (simplify-fraction-helper n d)\n      (let\
    \ ([g (gcd n d)])\n        (cons (/ n g) (/ d g))))\n    (let ([n (string->number\
    \ (car (string-split (string-trim x) \"/\")))])\n      (let ([d (string->number\
    \ (cadr (string-split (string-trim x) \"/\")))])\n        (simplify-fraction-helper\
    \ n d))))\n  (define (multiply-fractions x n)\n    (let ([x (simplify-fraction\
    \ x)])\n      (let ([n (simplify-fraction n)])\n        (cons (* (car x) (car\
    \ n)) (* (cdr x) (cdr n))))))\n  (define (divide-fractions x n)\n    (let ([x\
    \ (simplify-fraction x)])\n      (let ([n (simplify-fraction n)])\n        (cons\
    \ (* (car x) (cdr n)) (* (cdr x) (car n))))))\n  (define (is-whole-number x)\n\
    \    (= (remainder (car x) (cdr x)) 0))\n  (let ([x (multiply-fractions x n)])\n\
    \    (is-whole-number x)))\n", "  (define (gcd a b)\n    (if (= b 0)\n       \
    \ a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction a b)\n\
    \    (let ([g (gcd a b)])\n      (cons (/ a g) (/ b g))))\n  (define (multiply-fractions\
    \ a b)\n    (let ([(a-n a-d) (simplify-fraction (car a) (cdr a))]\n          [(b-n\
    \ b-d) (simplify-fraction (car b) (cdr b))])\n      (simplify-fraction (* a-n\
    \ b-n) (* a-d b-d))))\n  (define (is-whole-number? a b)\n    (= (remainder a b)\
    \ 0))\n  (let ([(x-n x-d) (simplify-fraction (string->number (car (string-split\
    \ x #\\/)))\n                                      (string->number (cadr (string-split\
    \ x #\\/))))]\n        [(n-n n-d) (simplify-fraction (string->number (car (string-split\
    \ n #\\/)))\n                                      (string->number (cadr (string-split\
    \ n #\\/))))])\n    (is-whole-number? (car (multiply-fractions x-n n-n))\n   \
    \                   (cdr (multiply-fractions x-d n-d)))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction n)\n   \
    \ (define (gcd a b)\n      (if (= b 0)\n          a\n          (gcd b (remainder\
    \ a b))))\n    (define (lcm a b)\n      (/ (* a b) (gcd a b)))\n    (define (simplify-fraction\
    \ n)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n          \
    \  (gcd b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd\
    \ a b)))\n      (define (simplify-fraction n)\n        (define (gcd a b)\n   \
    \       (if (= b 0)\n              a\n              (gcd b (remainder a b))))\n\
    \        (define (lcm a b)\n          (/ (* a b) (gcd a b)))\n        (define\
    \ (simplify-fraction n)\n          (define (gcd a b)\n            (if (= b 0)\n\
    \                a\n                (gcd b (remainder a b))))\n          (define\
    \ (lcm a b)\n            (/ (* a b) (gcd a b)))\n          (define (simplify-fraction\
    \ n)\n            (define (gcd a b)\n              (if (= b 0)\n             \
    \     a\n                  (gcd b (remainder a b))))\n            (define (lcm\
    \ a b)\n              (/ (* a b) (gcd a b)))\n            (define (simplify-fraction\
    \ n)\n              (define (gcd a b)\n                (if (= b 0)\n         \
    \           a\n                    (gcd b (remainder a b))))\n              (define\
    \ (lcm a b)\n                (/ (* a b) (gcd a b)))\n              (define (simplify-fraction\
    \ n)\n                (define (gcd a b)\n                  (if (= b 0)\n     \
    \                 a\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n   \
    \     (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n      \
    \  0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction numerator\
    \ denominator)\n    (define g (gcd numerator denominator))\n    (define n (/ numerator\
    \ g))\n    (define d (/ denominator g))\n    (list n d))\n  (define (multiply-fractions\
    \ x y)\n    (define (mul-fraction x y)\n      (define (mul-fraction-helper x y)\n\
    \        (define (mul-fraction-helper-helper x y)\n          (list (* (car x)\
    \ (car y))\n                (lcm (cadr x) (cadr y))))\n        (if (and (not (zero?\
    \ (cadr x)))\n                 (not (zero? (cadr y))))\n            (mul-fraction-helper-helper\
    \ x y)\n            (list 0 1)))\n      (mul-fraction-helper (simplify-fraction\
    \ (car x) (cadr x))\n                           (simplify-fraction (car y) (cadr\
    \ y))))\n    (mul-fraction x y))\n  (define (is-integer? x)\n    (= (cadr x) 1))\n\
    \  (is-integer? (multiply-fractions (string->fraction x)\n                   \
    \                (string->fraction n))))\n", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ str)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (string-empty? str)\n            (reverse acc)\n     \
    \       (split-fraction-helper (substring str 1) (cons (string-ref str 0) acc))))\n\
    \      (define (to-number str)\n        (string->number (list->string (reverse\
    \ str))))\n      (define (split-fraction-helper2 str acc)\n        (if (string-empty?\
    \ str)\n            (reverse acc)\n            (if (char=? (string-ref str 0)\
    \ #\\/)\n                (cons (to-number (reverse acc)) (split-fraction-helper2\
    \ (substring str 1) '()))\n                (split-fraction-helper2 (substring\
    \ str 1) (cons (string-ref str 0) acc)))))\n      (split-fraction-helper2 (split-fraction-helper\
    \ str '()) '()))\n    (define (simplify-fraction-helper str)\n      (define (simplify-fraction-helper2\
    \ str)\n        (if (= (gcd (car str) (cadr str)) 1)\n            str\n      \
    \      (simplify-fraction-helper2 (list (/ (car str) (gcd (car str) (cadr str)))\
    \ (/ (cadr str) (gcd (car str) (cadr str)))))))\n      (list->string (append (list\
    \ #\\/) (number->string (cadr (simplify-fraction-helper2 str))) (list #\\/) (number->string\
    \ (car (simplify-fraction-helper2 str))))))\n    (simplify-fraction-helper (split-fraction\
    \ str)))\n  (define (multiply-fractions x n)\n    (define (", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator\
    \ denominator)\n    (let ([g (gcd numerator denominator)])\n      (list (/ numerator\
    \ g) (/ denominator g))))\n  (define (multiply-fractions x y)\n    (let ([x-numerator\
    \ (car x)]\n          [x-denominator (cadr x)]\n          [y-numerator (car y)]\n\
    \          [y-denominator (cadr y)])\n      (simplify-fraction (* x-numerator\
    \ y-numerator)\n                         (* x-denominator y-denominator))))\n\
    \  (define (is-integer? x)\n    (= (remainder x 1) 0))\n  (define (parse-fraction\
    \ x)\n    (let ([parts (string-split x \"/\")])\n      (list (string->number (car\
    \ parts))\n            (string->number (cadr parts)))))\n  (define (string-split\
    \ x separator)\n    (regexp-split #rx(separator) x))\n  (define (fraction-to-string\
    \ x)\n    (string-append (number->string (car x))\n                   \"/\"\n\
    \                   (number->string (cadr x))))\n  (let ([x (parse-fraction x)]\n\
    \        [n (parse-fraction n)])\n    (if (is-integer? (cadr x))\n        (is-integer?\
    \ (cadr n))\n        (is-integer? (cadr (multiply-fractions x n))))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ num den)\n    (let ([g (gcd num den)])\n      (list (/ num g) (/ den g))))\n\
    \  (define (mult-fractions x y)\n    (let ([x-num (car x)]\n          [x-den (cadr\
    \ x)]\n          [y-num (car y)]\n          [y-den (cadr y)])\n      (simplify-fraction\
    \ (* x-num y-num) (* x-den y-den))))\n  (define (parse-fraction s)\n    (let ([parts\
    \ (string-split s \"/\")])\n      (list (string->number (car parts))\n       \
    \     (string->number (cadr parts)))))\n  (define (is-integer? n)\n    (= (remainder\
    \ n 1) 0))\n  (define (fraction->string f)\n    (let ([num (car f)]\n        \
    \  [den (cadr f)])\n      (if (= den 1)\n          (number->string num)\n    \
    \      (string-append (number->string num) \"/\" (number->string den)))))\n  (define\
    \ (fraction-mult x y)\n    (let ([f (mult-fractions x y)])\n      (if (is-integer?\
    \ (car f))\n          (fraction->string f)\n          \"False\")))\n  (fraction-mult\
    \ (parse-fraction x) (parse-fraction n)))\n", "  (let ([x-numerator (string->number\
    \ (regexp-match #rx\"^[0-9]+\" x))]\n        [x-denominator (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" x))]\n        [n-numerator (string->number (regexp-match #rx\"\
    ^[0-9]+\" n))]\n        [n-denominator (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ n))])\n    (let ([result-numerator (* x-numerator n-numerator)]\n          [result-denominator\
    \ (* x-denominator n-denominator)])\n      (let ([gcd (gcd result-numerator result-denominator)])\n\
    \        (let ([result-numerator (/ result-numerator gcd)]\n              [result-denominator\
    \ (/ result-denominator gcd)])\n          (if (= result-denominator 1)\n     \
    \         #t\n              #f))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n    (define\
    \ g (gcd numerator denominator))\n    (cons (/ numerator g) (/ denominator g)))\n\
    \  (define (multiply-fractions f1 f2)\n    (define (multiply-fraction f)\n   \
    \   (cons (* (car f) (car f1)) (* (cdr f) (cdr f1))))\n    (define (add-fractions\
    \ f1 f2)\n      (cons (+ (* (car f1) (cdr f2)) (* (car f2) (cdr f1)))\n      \
    \      (* (cdr f1) (cdr f2))))\n    (define (simplify-fraction f)\n      (simplify-fraction\
    \ (car f) (cdr f)))\n    (simplify-fraction (add-fractions (multiply-fraction\
    \ f1) (multiply-fraction f2))))\n  (define (parse-fraction s)\n    (define (parse-fraction-helper\
    \ s i)\n      (if (= i (string-length s))\n          (cons 0 0)\n          (if\
    \ (= (string-ref s i) #\\/)\n              (cons (string->number (substring s\
    \ 0 i)) (string->number (substring s (+ i 1) (string-length s))))\n          \
    \    (parse-fraction-helper s (+ i 1)))))\n    (parse-fraction-helper s 0))\n\
    \  (define (is-integer? n)\n    (= (remainder n 1) 0))\n  (is-integer? (cdr (multiply-fractions\
    \ (parse-fraction x) (parse-fraction n)))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (multiply-fractions\
    \ x n)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (string->number (substring str 0 1)) acc))))\n      (split-fraction-helper\
    \ str '()))\n    (define (multiply-fractions-helper x n)\n      (define (multiply-fractions-helper-helper\
    \ x n)\n        (if (empty? x)\n            n\n            (multiply-fractions-helper-helper\
    \ (rest x) (cons (* (first x) (first n)) (rest n)))))\n      (multiply-fractions-helper-helper\
    \ x n))\n    (define (reduce-fraction x)\n      (define (reduce-fraction-helper\
    \ x)\n        (if (empty? x)\n            '()\n            (cons (/ (first x)\
    \ (gcd (first x) (first (rest x)))) (reduce-fraction-helper (rest x)))))\n   \
    \   (reduce-fraction-helper x))\n    (reduce-fraction (multiply-fractions-helper\
    \ (split-fraction x) (split-fraction n))))\n  (define (is-whole? x)\n    (= (first\
    \ x) (first (rest x))))\n  (is-whole? (multiply-fractions x n)))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (let ([g (gcd numerator denominator)])\n      (list\
    \ (/ numerator g) (/ denominator g))))\n  (define (multiply-fractions x y)\n \
    \   (let ([x-numerator (car x)]\n          [x-denominator (cadr x)]\n        \
    \  [y-numerator (car y)]\n          [y-denominator (cadr y)])\n      (simplify-fraction\
    \ (* x-numerator y-numerator)\n                         (* x-denominator y-denominator))))\n\
    \  (define (is-integer? x)\n    (= (remainder x 1) 0))\n  (define (parse-fraction\
    \ s)\n    (let ([parts (string-split s \"/\")])\n      (list (string->number (car\
    \ parts))\n            (string->number (cadr parts)))))\n  (let ([x (parse-fraction\
    \ x)]\n        [n (parse-fraction n)])\n    (is-integer? (car (multiply-fractions\
    \ x n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction num den)\n    (define (simplify-fraction-helper num den gcd)\n\
    \      (if (= gcd 1)\n          (cons num den)\n          (simplify-fraction-helper\
    \ (/ num gcd) (/ den gcd) (gcd num den))))\n  (simplify-fraction-helper (string->number\
    \ (car (string-split (string-append num \"/\") \"/\"))) (string->number (cadr\
    \ (string-split (string-append num \"/\") \"/\"))) (gcd (string->number (car (string-split\
    \ (string-append num \"/\") \"/\"))) (string->number (cadr (string-split (string-append\
    \ num \"/\") \"/\"))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n\
    \        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n   \
    \     0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n  \
    \  (define (simplify-fraction-helper x)\n      (let ((numerator (string->number\
    \ (car x)))\n            (denominator (string->number (cadr x))))\n        (values\
    \ (quotient numerator (gcd numerator denominator))\n                (quotient\
    \ denominator (gcd numerator denominator)))))\n    (define (simplify-fraction-helper-2\
    \ x)\n      (let ((numerator (car x))\n            (denominator (cadr x)))\n \
    \       (if (= denominator 1)\n            numerator\n            (string-append\
    \ (number->string numerator) \"/\" (number->string denominator)))))\n    (simplify-fraction-helper-2\
    \ (simplify-fraction-helper (string-split x #\\/))))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-helper x n)\n      (let ((numerator-x\
    \ (string->number (car x)))\n            (denominator-x (string->number (cadr\
    \ x)))\n            (numerator-n (string->number (car n)))\n            (denominator-n\
    \ (string->number (cadr n))))\n        (values (* numerator-x numerator-n)\n \
    \               (lcm denominator-x denominator-n))))\n    (define (multiply-fractions-helper-2\
    \ x n)\n      (let ((numerator (car x))\n            (denominator (cadr x)))\n\
    \        (if (= denominator 1)\n            numerator\n            (string-append\
    \ (number->string numerator) \"/\" (number->string denominator)))))\n    (multiply-fractions-helper-2\
    \ (multiply-fractions-helper x n)))\n  (define (is-integer", "  (define (gcd a\
    \ b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (if (zero?\
    \ (remainder (string->number (car x)) (string->number (cadr x))))\n          (simplify-fraction-helper\
    \ (cons (number->string (/ (string->number (car x)) (string->number (cadr x))))\
    \ (cddr x)))\n          (cons (car x) (cdr x))))\n    (simplify-fraction-helper\
    \ (string-split x \"/\")))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x n)\n      (cons (number->string (* (string->number (car x)) (string->number\
    \ (car n))))\n            (cons (number->string (lcm (string->number (cadr x))\
    \ (string->number (cadr n)))) '())))\n    (simplify-fraction (multiply-fractions-helper\
    \ x n)))\n  (if (zero? (remainder (string->number (car (multiply-fractions x n)))\
    \ (string->number (cadr (multiply-fractions x n)))))\n      #t\n      #f))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define g (gcd numerator denominator))\n    (define\
    \ n (quotient numerator g))\n    (define d (quotient denominator g))\n    (if\
    \ (= (remainder d n) 0)\n        #t\n        #f))\n  (define (split-fraction str)\n\
    \    (define (split-fraction-helper str acc)\n      (if (empty? str)\n       \
    \   (reverse acc)\n          (split-fraction-helper (rest str) (cons (first str)\
    \ acc))))\n    (map string->number (split-fraction-helper str '())))\n  (define\
    \ (multiply-fractions x y)\n    (define (multiply-fractions-helper x y acc)\n\
    \      (if (empty? x)\n          acc\n          (multiply-fractions-helper (rest\
    \ x) (rest y) (cons (* (first x) (first y)) acc))))\n    (multiply-fractions-helper\
    \ x y '()))\n  (simplify-fraction (first (multiply-fractions (split-fraction x)\
    \ (split-fraction n)))\n                     (second (multiply-fractions (split-fraction\
    \ x) (split-fraction n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd\
    \ a b)))\n  (define (simplify-fraction str)\n    (define (split-fraction str)\n\
    \      (define (split-fraction-helper str acc)\n        (if (empty? str)\n   \
    \         (reverse acc)\n            (split-fraction-helper (rest str) (cons (first\
    \ str) acc))))\n      (split-fraction-helper str '()))\n    (define (get-numerator\
    \ str)\n      (define (get-numerator-helper str acc)\n        (if (empty? str)\n\
    \            (string->number (reverse acc))\n            (get-numerator-helper\
    \ (rest str) (cons (first str) acc))))\n      (get-numerator-helper str '()))\n\
    \    (define (get-denominator str)\n      (define (get-denominator-helper str\
    \ acc)\n        (if (empty? str)\n            (string->number (reverse acc))\n\
    \            (get-denominator-helper (rest str) (cons (first str) acc))))\n  \
    \    (get-denominator-helper (rest (rest str)) '()))\n    (define (simplify-helper\
    \ str)\n      (define (simplify-helper-helper str acc)\n        (if (empty? str)\n\
    \            (reverse acc)\n            (simplify-helper-helper (rest str) (cons\
    \ (first str) acc))))\n      (simplify-helper-helper str '()))\n    (define (simplify-fraction-helper\
    \ str)\n      (define (simplify-fraction-helper-helper str acc)\n        (if (empty?\
    \ str)\n            (reverse acc)\n            (simplify-fraction-helper-helper\
    \ (rest str) (cons (first str) acc))))\n      (simplify-fraction-helper-helper\
    \ str '()))\n    (define (simplify", "  (define (gcd a b)\n    (if (= b 0)\n \
    \       a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a\
    \ b) (gcd a b)))\n  (define (simplify-fraction n)\n    (define (simplify-fraction-helper\
    \ n d)\n      (let ([g (gcd n d)])\n        (if (= g 1)\n            (list n d)\n\
    \            (simplify-fraction-helper (/ n g) (/ d g)))))\n    (simplify-fraction-helper\
    \ (car n) (cadr n)))\n  (define (multiply-fractions x y)\n    (let ([x (simplify-fraction\
    \ x)]\n          [y (simplify-fraction y)])\n      (list (* (car x) (car y))\n\
    \            (lcm (cadr x) (cadr y)))))\n  (define (is-integer? x)\n    (= (remainder\
    \ (car x) (cadr x)) 0))\n  (is-integer? (multiply-fractions x n)))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ str)\n    (define (numerator str)\n      (string->number (substring str 0 (string-index\
    \ str #\\/))))\n    (define (denominator str)\n      (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n    (define (simplify-fraction-helper\
    \ str)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n        \
    \    (gcd b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd\
    \ a b)))\n      (define (simplify-fraction-helper str)\n        (define (numerator\
    \ str)\n          (string->number (substring str 0 (string-index str #\\/))))\n\
    \        (define (denominator str)\n          (string->number (substring str (+\
    \ 1 (string-index str #\\/)))))\n        (define (simplify-fraction-helper str)\n\
    \          (define (numerator str)\n            (string->number (substring str\
    \ 0 (string-index str #\\/))))\n          (define (denominator str)\n        \
    \    (string->number (substring str (+ 1 (string-index str #\\/)))))\n       \
    \   (define (simplify-fraction-helper str)\n            (define (numerator str)\n\
    \              (string->number (substring str 0 (string-index str #\\/))))\n \
    \           (define (denominator str)\n              (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n            (define (simplify-fraction-helper\
    \ str)\n              (define (numerator str)\n                (string->number\
    \ (substring str 0 (string-index str #\\/))))\n              (define (denominator\
    \ str)\n                (string->number (substring str (+ 1 (string-index str\
    \ #\\/)))))\n              (define (", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction n)\n    (define (gcd-fraction\
    \ n)\n      (gcd (car n) (cdr n)))\n    (define (divide-fraction n)\n      (cons\
    \ (/ (car n) (gcd-fraction n)) (/ (cdr n) (gcd-fraction n))))\n    (define (is-integer?\
    \ n)\n      (= (remainder (car n) (cdr n)) 0))\n    (if (is-integer? n)\n    \
    \    (car n)\n        (simplify-fraction (divide-fraction n))))\n  (define (parse-fraction\
    \ n)\n    (cons (string->number (car (string-split n \"/\")))\n          (string->number\
    \ (cadr (string-split n \"/\")))))\n  (define (multiply-fractions x n)\n    (cons\
    \ (* (car x) (car n)) (* (cdr x) (cdr n))))\n  (define (is-integer? n)\n    (=\
    \ (remainder (car n) (cdr n)) 0))\n  (is-integer? (simplify-fraction (multiply-fractions\
    \ (parse-fraction x) (parse-fraction n)))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (lcm-list lst)\n    (if (null? (cdr lst))\n\
    \        (car lst)\n        (lcm (car lst) (lcm-list (cdr lst)))))\n  (define\
    \ (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n      (let\
    \ ([n (string->number (car (string-split x \"/\")))])\n        (let ([d (string->number\
    \ (cadr (string-split x \"/\")))])\n          (let ([g (gcd n d)])\n         \
    \   (list (/ n g) (/ d g))))))\n    (let ([n (simplify-fraction-helper x)])\n\
    \      (string-append (number->string (car n)) \"/\" (number->string (cadr n)))))\n\
    \  (define (multiply-fractions x n)\n    (let ([n (string->number (car (string-split\
    \ x \"/\")))])\n      (let ([d (string->number (cadr (string-split x \"/\")))])\n\
    \        (let ([n2 (string->number (car (string-split n \"/\")))])\n         \
    \ (let ([d2 (string->number (cadr (string-split n \"/\")))])\n            (let\
    \ ([l (lcm d d2)])\n              (let ([n3 (* (/ l d) n)])\n                (let\
    \ ([n4 (* (/ l d2) n2)])\n                  (let ([n5 (+ n3 n4)])\n          \
    \          (let ([g (gcd n5 l)])\n                      (list (/ n5 g) (/ l g))))))))))))\n\
    \  (define (is-whole-number? x)\n    (= (remainder (car x) (cadr x)) 0))\n  (is-whole-number?\
    \ (multiply-fractions (simplify-fraction x) (simplify-fraction n))))", "  (let\
    \ ([x-numerator (string->number (regexp-match #rx\"^[0-9]+\" x))]\n        [x-denominator\
    \ (string->number (regexp-match #rx\"/[0-9]+$\" x))]\n        [n-numerator (string->number\
    \ (regexp-match #rx\"^[0-9]+\" n))]\n        [n-denominator (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" n))])\n    (let ([x-numerator (* x-numerator n-numerator)]\n\
    \          [x-denominator (* x-denominator n-denominator)])\n      (let ([gcd\
    \ (gcd x-numerator x-denominator)])\n        (if (= gcd 1)\n            #f\n \
    \           (let ([x-numerator (/ x-numerator gcd)]\n                  [x-denominator\
    \ (/ x-denominator gcd)])\n              (= x-numerator x-denominator)))))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n\
    \  (define (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n \
    \     (if (= (gcd (string->number (car x)) (string->number (cadr x))) 1)\n   \
    \       x\n          (simplify-fraction-helper (list (number->string (quotient\
    \ (string->number (car x)) (gcd (string->number (car x)) (string->number (cadr\
    \ x))))) (number->string (quotient (string->number (cadr x)) (gcd (string->number\
    \ (car x)) (string->number (cadr x)))))))))\n    (simplify-fraction-helper (string-split\
    \ x \"/\")))\n  (define (multiply-fractions x n)\n    (list (number->string (*\
    \ (string->number (car x)) (string->number (car n)))) (number->string (lcm (string->number\
    \ (cadr x)) (string->number (cadr n))))))\n  (if (= (remainder (string->number\
    \ (car (multiply-fractions x n))) (string->number (cadr (multiply-fractions x\
    \ n)))) 0)\n      #t\n      #f))\n", "  (define (gcd a b)\n    (if (= b 0)\n \
    \       a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a\
    \ b) (gcd a b)))\n  (define (multiply-fractions a b)\n    (define (split-fraction\
    \ str)\n      (define (split-fraction-helper str acc)\n        (if (empty? str)\n\
    \            (reverse acc)\n            (split-fraction-helper (rest str) (cons\
    \ (first str) acc))))\n      (define (to-int str)\n        (string->number str))\n\
    \      (define (to-list str)\n        (split-fraction-helper str '()))\n     \
    \ (define (to-pair str)\n        (cons (to-int (first str)) (to-int (second str))))\n\
    \      (to-pair (to-list str)))\n    (define (multiply-fractions-helper a b)\n\
    \      (define (multiply-fractions-helper-helper a b)\n        (define (multiply-fractions-helper-helper-helper\
    \ a b)\n          (define (multiply-fractions-helper-helper-helper-helper a b)\n\
    \            (define (multiply-fractions-helper-helper-helper-helper-helper a\
    \ b)\n              (define (multiply-fractions-helper-helper-helper-helper-helper-helper\
    \ a b)\n                (define (multiply-fractions-helper-helper-helper-helper-helper-helper-helper\
    \ a b)\n                  (define (multiply-fractions-helper-helper-helper-helper-helper-helper-helper-helper\
    \ a b)\n                    (define (multiply-fractions-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ a b)\n                      (define (multiply-fractions-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (multiply x y)\n \
    \   (define (split-fraction str)\n      (define (split-fraction-helper str acc)\n\
    \        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (numerator str)\n      (string->number (list-ref (split-fraction\
    \ str) 0)))\n    (define (denominator str)\n      (string->number (list-ref (split-fraction\
    \ str) 1)))\n    (define (make-fraction num den)\n      (number->string num) +\
    \ \"/\" + (number->string den))\n    (define (simplify-fraction str)\n      (define\
    \ (simplify-fraction-helper str acc)\n        (if (empty? str)\n            (reverse\
    \ acc)\n            (simplify-fraction-helper (rest str) (cons (first str) acc))))\n\
    \      (simplify-fraction-helper str '()))\n    (define (simplify-fraction str)\n\
    \      (define (simplify-fraction-helper str acc)\n        (if (empty? str)\n\
    \            (reverse acc)\n            (simplify-fraction-helper (rest str) (cons\
    \ (first str) acc))))\n      (simplify-fraction-helper str '()))\n    (define\
    \ (simplify-fraction str)\n      (define (simplify-fraction-helper str acc)\n\
    \        (if (empty? str)\n            (reverse acc)\n            (simplify-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (simplify-fraction-helper str '()))\n\
    \    (define (simplify-fraction str)\n      (define (simplify-fraction", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define g (gcd numerator denominator))\n    (define\
    \ n (quotient numerator g))\n    (define d (quotient denominator g))\n    (if\
    \ (= (remainder n d) 0)\n        #t\n        #f))\n  (define (parse-fraction str)\n\
    \    (define (parse-fraction-helper str acc)\n      (if (string-empty? str)\n\
    \          acc\n          (parse-fraction-helper (substring str 1) (string-append\
    \ acc (string-take str 1)))))\n    (define (parse-fraction-helper2 str acc)\n\
    \      (if (string-empty? str)\n          acc\n          (parse-fraction-helper2\
    \ (substring str 1) (string-append acc (string-take str 1)))))\n    (define (parse-fraction-helper3\
    \ str acc)\n      (if (string-empty? str)\n          acc\n          (parse-fraction-helper3\
    \ (substring str 1) (string-append acc (string-take str 1)))))\n    (define (parse-fraction-helper4\
    \ str acc)\n      (if (string-empty? str)\n          acc\n          (parse-fraction-helper4\
    \ (substring str 1) (string-append acc (string-take str 1)))))\n    (define (parse-fraction-helper5\
    \ str acc)\n      (if (string-empty? str)\n          acc\n          (parse-fraction-helper5\
    \ (substring str 1) (string-append acc (string-take str 1)))))\n    (define (parse-fraction-helper6\
    \ str acc)\n      (if (string-empty? str)\n          acc\n          (parse-fraction-helper6\
    \ (substring str 1) (string-append acc (string-take str 1)))))\n    (define (parse-f",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction str)\n    (define (split-fraction str)\n      (define\
    \ (split-fraction-helper str acc)\n        (if (empty? str)\n            (reverse\
    \ acc)\n            (split-fraction-helper (rest str) (cons (first str) acc))))\n\
    \      (define (join-fraction str)\n        (define (join-fraction-helper str\
    \ acc)\n          (if (empty? str)\n              acc\n              (join-fraction-helper\
    \ (rest str) (string-append acc (first str)))))\n        (join-fraction-helper\
    \ (split-fraction str) \"\"))\n      (define (get-numerator str)\n        (string->number\
    \ (join-fraction (take (split-fraction str) (quotient (string-length str) 2)))))\n\
    \      (define (get-denominator str)\n        (string->number (join-fraction (drop\
    \ (split-fraction str) (quotient (string-length str) 2)))))\n      (values (get-numerator\
    \ str) (get-denominator str)))\n    (define (simplify-fraction-helper str acc)\n\
    \      (if (= (remainder (get-numerator str) (gcd (get-numerator str) (get-denominator\
    \ str))) 0)\n          (values (quotient (get-numerator str) (gcd (get-numerator\
    \ str) (get-denominator str))) (quotient (get-denominator str) (gcd (get-numerator\
    \ str) (get-denominator str))))\n          (simplify-fraction-helper (values (get-numerator\
    \ str) (get-denominator str)) acc)))\n    (simplify-fraction-helper (values (get-numerator\
    \ str) (get", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction x)\n    (let* ([numerator (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator (string->number (cadr (string-split\
    \ x \"/\")))])\n        (let* ([gcd (gcd numerator denominator)])\n          (string-append\
    \ (number->string (/ numerator gcd)) \"/\" (number->string (/ denominator gcd)))))))\n\
    \  (define (multiply-fractions x n)\n    (let* ([x-numerator (string->number (car\
    \ (string-split x \"/\")))])\n      (let* ([x-denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n        (let* ([n-numerator (string->number (car\
    \ (string-split n \"/\")))])\n          (let* ([n-denominator (string->number\
    \ (cadr (string-split n \"/\")))])\n            (string-append (number->string\
    \ (* x-numerator n-numerator)) \"/\" (number->string (lcm x-denominator n-denominator))))))))\n\
    \  (define (is-whole-number x)\n    (let* ([numerator (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator (string->number (cadr (string-split\
    \ x \"/\")))])\n        (= (remainder numerator denominator) 0))))\n  (is-whole-number\
    \ (simplify-fraction (multiply-fractions x n))))\n", "  (define (gcd a b)\n  \
    \  (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction str)\n    (define\
    \ (split-fraction str)\n      (define (split-fraction-helper str acc)\n      \
    \  (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (to-int str)\n      (string->number str))\n    (define (simplify-fraction-helper\
    \ str)\n      (define (simplify-fraction-helper-helper str)\n        (define (simplify-fraction-helper-helper-helper\
    \ str)\n          (if (empty? str)\n              '()\n              (cons (first\
    \ str) (simplify-fraction-helper-helper-helper (rest str)))))\n        (simplify-fraction-helper-helper-helper\
    \ str))\n      (define (simplify-fraction-helper-helper-helper str)\n        (if\
    \ (empty? str)\n            '()\n            (cons (first str) (simplify-fraction-helper-helper-helper\
    \ (rest str)))))\n      (simplify-fraction-helper-helper-helper str))\n    (define\
    \ (simplify-fraction-helper-helper str)\n      (define (simplify-fraction-helper-helper-helper\
    \ str)\n        (if (empty? str)\n            '()\n            (cons (first str)\
    \ (simplify-fraction-helper-helper-helper (rest str)))))\n      (simplify-fraction-helper-helper-helper\
    \ str))\n    (define (simplify-fraction-helper-helper-helper str)\n      (if (empty?\
    \ str)\n          '()\n          (cons (first", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x)\n      (define (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (simplify-fraction-helper-helper-helper-helper x)\n  \
    \          (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n\
    \  (define (parse x)\n    (define (get-numerator x)\n      (string->number (substring\
    \ x 0 (string-index x #\\/))))\n  (define (get-denominator x)\n    (string->number\
    \ (substring x (+ 1 (string-index x #\\/)))))\n    (values (get-numerator x) (get-denominator\
    \ x)))\n  (define (is-whole-number? x)\n    (= (remainder x 1) 0))\n  (define\
    \ (multiply-fractions x y)\n    (define (multiply-fractions-helper x y)\n    \
    \  (values (* (car x) (car y)) (* (cadr x) (cadr y))))\n    (define (reduce-fraction\
    \ x)\n      (define (reduce-fraction-helper x)\n        (values (gcd (car x) (cadr\
    \ x)) (lcm (car x) (cadr x))))\n      (define (divide-fraction x)\n        (values\
    \ (/ (car x) (car (reduce-fraction-helper x))) (/ (cadr x) (cadr (reduce-fraction-helper\
    \ x)))))\n      (divide-fraction x))\n    (reduce-fraction (multiply-fractions-helper\
    \ x y)))\n  (is-whole-number? (cadr (multiply-fractions (parse x) (parse n)))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n\
    \  (define (simplify-fraction numerator denominator)\n    (let ([g (gcd numerator\
    \ denominator)])\n      (list (/ numerator g) (/ denominator g))))\n  (define\
    \ (multiply-fractions x y)\n    (let ([x-n (car x)]\n          [x-d (cadr x)]\n\
    \          [y-n (car y)]\n          [y-d (cadr y)])\n      (simplify-fraction\
    \ (* x-n y-n) (* x-d y-d))))\n  (define (is-integer? n)\n    (= (remainder n 1)\
    \ 0))\n  (define (parse-fraction s)\n    (let ([parts (string-split s \"/\")])\n\
    \      (list (string->number (car parts))\n            (string->number (cadr parts)))))\n\
    \  (let ([x-f (parse-fraction x)]\n        [n-f (parse-fraction n)])\n    (is-integer?\
    \ (car (multiply-fractions x-f n-f)))))\n", "  (let* ([x-numerator (string->number\
    \ (car (string-split x \"/\")))])\n    (let* ([x-denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ n \"/\")))])\n        (let* ([n-denominator (string->number (cadr (string-split\
    \ n \"/\")))])\n          (let* ([x-numerator (* x-numerator n-numerator)])\n\
    \            (let* ([x-denominator (* x-denominator n-denominator)])\n       \
    \       (let* ([gcd (gcd x-numerator x-denominator)])\n                (let* ([x-numerator\
    \ (/ x-numerator gcd)])\n                  (let* ([x-denominator (/ x-denominator\
    \ gcd)])\n                    (if (= x-denominator 1)\n                      \
    \  #t\n                        #f)))))))))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (numerator x)\n\
    \        (string->number (car (string-split x #\"/\"))))\n      (define (denominator\
    \ x)\n        (string->number (cadr (string-split x #\"/\"))))\n      (define\
    \ (simplify-fraction-helper-helper x)\n        (define (numerator x)\n       \
    \   (string->number (car (string-split x #\"/\"))))\n        (define (denominator\
    \ x)\n          (string->number (cadr (string-split x #\"/\"))))\n        (define\
    \ (gcd a b)\n          (if (= b 0)\n              a\n              (gcd b (remainder\
    \ a b))))\n        (define (lcm a b)\n          (if (= a 0)\n              0\n\
    \              (/ (* a b) (gcd a b))))\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (numerator x)\n            (string->number (car (string-split\
    \ x #\"/\"))))\n          (define (denominator x)\n            (string->number\
    \ (cadr (string-split x #\"/\"))))\n          (define (gcd a b)\n            (if\
    \ (= b 0)\n                a\n                (gcd b (remainder a b))))\n    \
    \      (define (lcm a b)\n            (if (= a 0)\n                0\n       \
    \         (/ (* a b) (gcd a b))))\n          (define (simplify-fraction-helper-helper-helper-helper\
    \ x)\n            (define (numerator x)\n              (string->number (car (string-split\
    \ x #\"/\"))))\n            (define (denominator x)\n              (string->number\
    \ (cadr (string", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n    \
    \    (/ (* a b) (gcd a b))))\n  (define (simplify-fraction str)\n    (define (split-fraction\
    \ str)\n      (define (split-fraction-helper str acc)\n        (if (empty? str)\n\
    \            (reverse acc)\n            (split-fraction-helper (rest str) (cons\
    \ (first str) acc))))\n      (define (parse-fraction str)\n        (define (parse-fraction-helper\
    \ str acc)\n          (if (empty? str)\n              (reverse acc)\n        \
    \      (parse-fraction-helper (rest str) (cons (string->number (first str)) acc))))\n\
    \        (parse-fraction-helper (split-fraction str) '()))\n      (define (simplify-fraction-helper\
    \ str)\n        (define (gcd a b)\n          (if (= b 0)\n              a\n  \
    \            (gcd b (remainder a b))))\n        (define (lcm a b)\n          (if\
    \ (= a 0)\n              0\n              (/ (* a b) (gcd a b))))\n        (define\
    \ (simplify-fraction-helper-helper str)\n          (let ([numerator (first str)]\n\
    \                [denominator (second str)])\n            (if (= (gcd numerator\
    \ denominator) 1)\n                str\n                (simplify-fraction-helper-helper\
    \ (list (/ numerator (gcd numerator denominator)) (/ denominator (gcd numerator\
    \ denominator)))))))\n        (simplify-fraction-helper-helper str))\n      (simplify-fraction-helper\
    \ (parse-fraction str)))\n    (define (fraction-to-string str)\n      (string-append\
    \ (number->string (first str)) \"/\" (number->string (second str))))\n    (fraction-to-string\
    \ (simplify-fraction-helper str)))\n  (", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x gcd)\n      (if (= gcd 1)\n          x\n          (simplify-fraction-helper\
    \ (cons (/ (car x) gcd) (/ (cdr x) gcd)) (gcd (car x) (cdr x)))))\n    (simplify-fraction-helper\
    \ x (gcd (car x) (cdr x))))\n  (define (multiply-fractions x y)\n    (cons (*\
    \ (car x) (car y)) (* (cdr x) (cdr y))))\n  (define (is-integer? x)\n    (= (remainder\
    \ (car x) (cdr x)) 0))\n  (is-integer? (simplify-fraction (multiply-fractions\
    \ (string->fraction x) (string->fraction n)))))\n", "  (define (gcd a b)\n   \
    \ (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction f)\n    (define\
    \ (simplify-fraction-helper f)\n      (define (gcd a b)\n        (if (= b 0)\n\
    \            a\n            (gcd b (remainder a b))))\n      (define (lcm a b)\n\
    \        (/ (* a b) (gcd a b)))\n      (define (simplify-fraction-helper-helper\
    \ f)\n        (define (gcd a b)\n          (if (= b 0)\n              a\n    \
    \          (gcd b (remainder a b))))\n        (define (lcm a b)\n          (/\
    \ (* a b) (gcd a b)))\n        (define (simplify-fraction-helper-helper-helper\
    \ f)\n          (define (gcd a b)\n            (if (= b 0)\n                a\n\
    \                (gcd b (remainder a b))))\n          (define (lcm a b)\n    \
    \        (/ (* a b) (gcd a b)))\n          (define (simplify-fraction-helper-helper-helper-helper\
    \ f)\n            (define (gcd a b)\n              (if (= b 0)\n             \
    \     a\n                  (gcd b (remainder a b))))\n            (define (lcm\
    \ a b)\n              (/ (* a b) (gcd a b)))\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ f)\n              (define (gcd a b)\n                (if (= b 0)\n         \
    \           a\n                    (gcd b (remainder a b))))\n              (define\
    \ (lcm a b)\n                (/ (* a b) (gcd a b)))\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ f)\n                (define (gcd a b)\n                  (if (= b", "  (let\
    \ ([x-num (string->number (regexp-match #rx\"^[0-9]+\" x))]\n        [x-den (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x))]\n        [n-num (string->number (regexp-match\
    \ #rx\"^[0-9]+\" n))]\n        [n-den (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ n))])\n    (let ([num (* x-num n-num)]\n          [den (* x-den n-den)])\n \
    \     (if (zero? (modulo num den))\n          #t\n          #f))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n \
    \     (define (numerator x)\n        (string->number (car (string-split x #\\\
    /))))\n      (define (denominator x)\n        (string->number (cadr (string-split\
    \ x #\\/))))\n      (define (simplify-fraction-helper-helper x)\n        (define\
    \ (simplify-fraction-helper-helper-helper x)\n          (define (numerator x)\n\
    \            (string->number (car (string-split x #\\/))))\n          (define\
    \ (denominator x)\n            (string->number (cadr (string-split x #\\/))))\n\
    \          (define (gcd a b)\n            (if (= b 0)\n                a\n   \
    \             (gcd b (remainder a b))))\n          (define (lcm a b)\n       \
    \     (if (= a 0)\n                0\n                (/ (* a b) (gcd a b))))\n\
    \          (define (simplify-fraction-helper-helper-helper-helper x)\n       \
    \     (define (numerator x)\n              (string->number (car (string-split\
    \ x #\\/))))\n            (define (denominator x)\n              (string->number\
    \ (cadr (string-split x #\\/))))\n            (define (gcd a b)\n            \
    \  (if (= b 0)\n                  a\n                  (gcd b (remainder a b))))\n\
    \            (define (lcm a b)\n              (if (= a 0)\n                  0\n\
    \                  (/ (* a b) (gcd a b))))\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (numerator x)\n                (string->number (car\
    \ (string-split x #\\/))))", "  (define (gcd a b)\n    (if (= b 0)\n        a\n\
    \        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a\
    \ b)))\n  (define (simplify-fraction numerator denominator)\n    (let ([g (gcd\
    \ numerator denominator)])\n      (list (/ numerator g) (/ denominator g))))\n\
    \  (define (multiply-fractions x y)\n    (let ([x-numerator (car x)]\n       \
    \   [x-denominator (cadr x)]\n          [y-numerator (car y)]\n          [y-denominator\
    \ (cadr y)])\n      (simplify-fraction (* x-numerator y-numerator)\n         \
    \                (* x-denominator y-denominator))))\n  (define (is-integer? n)\n\
    \    (= (remainder n 1) 0))\n  (define (parse-fraction s)\n    (let ([parts (string-split\
    \ s \"/\")])\n      (list (string->number (car parts))\n            (string->number\
    \ (cadr parts)))))\n  (let ([x (parse-fraction x)]\n        [n (parse-fraction\
    \ n)])\n    (is-integer? (car (multiply-fractions x n)))))\n", "  (let ([x-num\
    \ (string->number (car (string-split x \"/\")))])\n    (let ([x-den (string->number\
    \ (cadr (string-split x \"/\")))])\n      (let ([n-num (string->number (car (string-split\
    \ n \"/\")))])\n        (let ([n-den (string->number (cadr (string-split n \"\
    /\")))])\n          (let ([x-num (* x-num n-den)])\n            (let ([x-den (*\
    \ x-den n-den)])\n              (let ([gcd (gcd x-num x-den)])\n             \
    \   (let ([x-num (/ x-num gcd)])\n                  (let ([x-den (/ x-den gcd)])\n\
    \                    (if (= x-den 1)\n                        #t\n           \
    \             #f))))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n     \
    \   a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (/ (* a b) (gcd a b))))\n  (define (get-numerator str)\n \
    \   (string->number (substring str 0 (string-index str #\\/))))\n  (define (get-denominator\
    \ str)\n    (string->number (substring str (+ 1 (string-index str #\\/)))))\n\
    \  (define (is-whole-number? str)\n    (= (remainder (get-numerator str) (get-denominator\
    \ str)) 0))\n  (define (multiply-fractions x n)\n    (string-append\n     (number->string\
    \ (* (get-numerator x) (get-numerator n)))\n     \"/\"\n     (number->string (*\
    \ (get-denominator x) (get-denominator n)))))\n  (define (reduce-fraction str)\n\
    \    (define (get-gcd-lcm)\n      (values (gcd (get-numerator str) (get-denominator\
    \ str))\n              (lcm (get-numerator str) (get-denominator str))))\n   \
    \ (define (reduce-fraction-helper str gcd lcm)\n      (if (= gcd lcm)\n      \
    \    str\n          (string-append\n           (number->string (/ (get-numerator\
    \ str) gcd))\n           \"/\"\n           (number->string (/ (get-denominator\
    \ str) gcd)))))\n    (reduce-fraction-helper str (get-gcd-lcm)))\n  (is-whole-number?\
    \ (reduce-fraction (multiply-fractions x n))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (numerator str)\n    (string->number (substring\
    \ str 0 (string-index str #\\/))))\n  (define (denominator str)\n    (string->number\
    \ (substring str (+ 1 (string-index str #\\/)))))\n  (define (simplify-fraction\
    \ str)\n    (define (gcd a b)\n      (if (= b 0)\n          a\n          (gcd\
    \ b (remainder a b))))\n    (define (lcm a b)\n      (/ (* a b) (gcd a b)))\n\
    \    (define (numerator str)\n      (string->number (substring str 0 (string-index\
    \ str #\\/))))\n    (define (denominator str)\n      (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n    (define (simplify-fraction str)\n\
    \      (define (gcd a b)\n        (if (= b 0)\n            a\n            (gcd\
    \ b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd a b)))\n\
    \      (define (numerator str)\n        (string->number (substring str 0 (string-index\
    \ str #\\/))))\n      (define (denominator str)\n        (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n      (define (simplify-fraction str)\n\
    \        (define (gcd a b)\n          (if (= b 0)\n              a\n         \
    \     (gcd b (remainder a b))))\n        (define (lcm a b)\n          (/ (* a\
    \ b) (gcd a b)))\n        (define (numerator str)\n          (string->number (substring\
    \ str 0 (string-index str #\\/))))\n        (define (denominator str)\n      \
    \    (string->number (substring str (+ 1 (string-index str #\\/)))))\n       \
    \ (define (", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n      \
    \  (/ (* a b) (gcd a b))))\n  (define (multiply-fractions x y)\n    (let ([x-n\
    \ (string->number (car (string-split x \"/\")))])\n      (let ([x-d (string->number\
    \ (cadr (string-split x \"/\")))])\n        (let ([y-n (string->number (car (string-split\
    \ y \"/\")))])\n          (let ([y-d (string->number (cadr (string-split y \"\
    /\")))])\n            (let ([lcm-d (lcm x-d y-d)])\n              (let ([x-n-new\
    \ (* x-n (/ lcm-d x-d))])\n                (let ([y-n-new (* y-n (/ lcm-d y-d))])\n\
    \                  (let ([gcd-n (gcd x-n-new y-n-new)])\n                    (let\
    \ ([n-new (/ x-n-new gcd-n)])\n                      (let ([d-new (/ y-n-new gcd-n)])\n\
    \                        (if (= d-new 1)\n                            (number->string\
    \ n-new)\n                            (string-append (number->string n-new) \"\
    /\" (number->string d-new)))))))))))))))\n  (define (is-integer? x)\n    (if (string=?\
    \ (cadr (string-split x \"/\")) \"1\")\n        #t\n        #f))\n  (is-integer?\
    \ (multiply-fractions x n)))\n", "  (define (gcd a b)\n    (if (= b 0)\n     \
    \   a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (* a (/ b (gcd a b)))))\n  (define (get-num str)\n    (string->number\
    \ (substring str 0 (string-index str #\\/))))\n  (define (get-den str)\n    (string->number\
    \ (substring str (+ 1 (string-index str #\\/)))))\n  (define (is-whole-number?\
    \ num)\n    (= (remainder num 1) 0))\n  (define (is-whole-number-str? str)\n \
    \   (is-whole-number? (string->number str)))\n  (define (is-whole-number-frac?\
    \ str)\n    (is-whole-number? (get-num str)))\n  (define (is-whole-number-frac-str?\
    \ str)\n    (is-whole-number? (get-num str) (get-den str)))\n  (define (is-whole-number-frac-frac?\
    \ str1 str2)\n    (is-whole-number? (get-num str1) (get-den str2)))\n  (define\
    \ (is-whole-number-frac-frac-str? str1 str2 str3)\n    (is-whole-number? (get-num\
    \ str1) (get-den str2) (get-den str3)))\n  (define (is-whole-number-frac-frac-frac?\
    \ str1 str2 str3 str4)\n    (is-whole-number? (get-num str1) (get-den str2) (get-den\
    \ str3) (get-den str4)))\n  (define (is-whole-number-frac-frac-frac-str? str1\
    \ str2 str3 str4 str5)\n    (is-whole-number? (get-num str1) (get-den str2) (get-den\
    \ str3) (get-den str4) (get-den str5)))\n  (define (is-whole-number-", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ num den)\n    (define g (gcd num den))\n    (cons (/ num g) (/ den g)))\n  (define\
    \ (multiply-fractions x y)\n    (define (multiply-fractions-helper x y)\n    \
    \  (cons (* (car x) (car y)) (* (cdr x) (cdr y))))\n    (simplify-fraction (car\
    \ (multiply-fractions-helper x y)) (cdr (multiply-fractions-helper x y))))\n \
    \ (define (is-integer? x)\n    (= (remainder x 1) 0))\n  (is-integer? (car (multiply-fractions\
    \ (simplify-fraction (string->number (car (string-split (string-trim x) \"/\"\
    ))) (string->number (cadr (string-split (string-trim x) \"/\")))) (simplify-fraction\
    \ (string->number (car (string-split (string-trim n) \"/\"))) (string->number\
    \ (cadr (string-split (string-trim n) \"/\"))))))))\n", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (define gcd (gcd numerator denominator))\n    (cons (/ numerator gcd) (/\
    \ denominator gcd)))\n  (define (multiply-fractions x y)\n    (define (multiply-fraction\
    \ numerator denominator)\n      (cons (* (car x) numerator) (* (cdr x) denominator)))\n\
    \    (define (multiply-fractions-helper x y)\n      (if (null? y)\n          x\n\
    \          (multiply-fractions-helper (multiply-fraction (car y) (cdr x)) (cdr\
    \ y))))\n    (multiply-fractions-helper (multiply-fraction (car x) (car y)) (cdr\
    \ y)))\n  (define (parse-fraction str)\n    (define (parse-fraction-helper str)\n\
    \      (if (string=? (substring str 0 1) \"/\")\n          (cons 1 (string->number\
    \ (substring str 1 (string-length str))))\n          (cons (string->number (substring\
    \ str 0 (string-search \"/\" str)))\n                (string->number (substring\
    \ str (+ (string-search \"/\" str) 1) (string-length str))))))\n    (parse-fraction-helper\
    \ str))\n  (define (is-whole-number? numerator denominator)\n    (= (remainder\
    \ numerator denominator) 0))\n  (define (is-whole-number?-fraction x)\n    (is-whole-number?\
    \ (car x) (cdr x)))\n  (is-whole-number?-fraction (simplify-fraction (car (multiply-fractions\
    \ (parse-fraction x) (parse-fraction n)))\n                                  \
    \              (cdr (multiply-fractions (parse-fraction x) (parse-fraction n))))))\n\
    \n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (let ([g (gcd numerator denominator)])\n      (list\
    \ (/ numerator g) (/ denominator g))))\n  (define (multiply-fractions x y)\n \
    \   (let ([x (simplify-fraction (car x) (cadr x))]\n          [y (simplify-fraction\
    \ (car y) (cadr y))])\n      (list (* (car x) (car y)) (* (cadr x) (cadr y)))))\n\
    \  (define (divide-fractions x y)\n    (let ([x (simplify-fraction (car x) (cadr\
    \ x))]\n          [y (simplify-fraction (car y) (cadr y))])\n      (list (* (car\
    \ x) (cadr y)) (* (cadr x) (car y)))))\n  (define (is-integer? x)\n    (= (remainder\
    \ (car x) (cadr x)) 0))\n  (define (fraction->number x)\n    (/ (car x) (cadr\
    \ x)))\n  (define (number->fraction x)\n    (list (floor x) 1))\n  (define (parse-fraction\
    \ x)\n    (let ([x (string-split x \"/\")])\n      (list (string->number (car\
    \ x)) (string->number (cadr x)))))\n  (define (fraction-to-string x)\n    (string-append\
    \ (number->string (car x)) \"/\" (number->string (cadr x))))\n  (define (is-whole-number?\
    \ x)\n    (and (is-integer? x) (= (fraction->number x) (car x))))\n  (define (is-whole-number-string?\
    \ x)\n    (is-whole-number? (parse-fraction x)))\n  (define (is-whole-number-string-multiply",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n \
    \     (define (split-fraction x)\n        (define (split-fraction-helper x)\n\
    \          (if (string-contains x #\\/)\n              (cons (substring x 0 (string-index\
    \ x #\\/))\n                    (substring x (+ 1 (string-index x #\\/))))\n \
    \             (cons x \"\")))\n        (split-fraction-helper (string-trim x)))\n\
    \      (define (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (if (string-contains x #\\/)\n              (cons (string->number\
    \ (car x))\n                    (string->number (cdr x)))\n              (cons\
    \ (string->number x) 1)))\n        (simplify-fraction-helper-helper-helper (split-fraction\
    \ x)))\n      (define (simplify-fraction-helper-helper-helper x)\n        (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n          (if (= (cdr x)\
    \ 1)\n              (car x)\n              (cons (car x) (cdr x))))\n        (simplify-fraction-helper-helper-helper-helper\
    \ (simplify-fraction-helper-helper x)))\n      (define (simplify-fraction-helper-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper-helper x)\n    \
    \      (if (= (cdr x) 0)\n              (car x)\n              (cons (car x) (cdr\
    \ x))))\n        (simplify-fraction-helper-hel", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (numerator\
    \ str)\n    (string->number (substring str 0 (string-index str #\\/))))\n  (define\
    \ (denominator str)\n    (string->number (substring str (+ 1 (string-index str\
    \ #\\/)))))\n  (define (simplify-fraction str)\n    (define (simplify-fraction-helper\
    \ num den)\n      (if (= (gcd num den) 1)\n          (string-append (number->string\
    \ num) \"/\" (number->string den))\n          (simplify-fraction-helper (/ num\
    \ (gcd num den)) (/ den (gcd num den)))))\n    (simplify-fraction-helper (numerator\
    \ str) (denominator str)))\n  (define (multiply-fractions x n)\n    (define (multiply-fractions-helper\
    \ x n)\n      (string-append (number->string (* (numerator x) (numerator n)))\
    \ \"/\" (number->string (* (denominator x) (denominator n)))))\n    (simplify-fraction\
    \ (multiply-fractions-helper x n)))\n  (if (= (remainder (numerator (multiply-fractions\
    \ x n)) (denominator (multiply-fractions x n))) 0)\n      #t\n      #f))\n", " \
    \ (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define gcd (gcd numerator denominator))\n    (define\
    \ numerator (/ numerator gcd))\n    (define denominator (/ denominator gcd))\n\
    \    (list numerator denominator))\n  (define (fraction-to-number numerator denominator)\n\
    \    (/ numerator denominator))\n  (define (number-to-fraction number)\n    (define\
    \ (find-denominator number)\n      (if (= (remainder number 1) 0)\n          1\n\
    \          (find-denominator (+ number 1))))\n    (define denominator (find-denominator\
    \ number))\n    (define numerator (* number denominator))\n    (simplify-fraction\
    \ numerator denominator))\n  (define (fraction-to-string numerator denominator)\n\
    \    (string-append (number->string numerator) \"/\" (number->string denominator)))\n\
    \  (define (string-to-fraction string)\n    (define (split-string string)\n  \
    \    (string-split string #\\/))\n    (define (string-to-number string)\n    \
    \  (string->number string))\n    (define (string-to-fraction-helper string)\n\
    \      (define (string-to-fraction-helper-helper string)\n        (if (string-empty?\
    \ string)\n            (list 0 0)\n            (cons (string-to-number (string-take\
    \ string 1))\n                  (string-to-fraction-helper-helper (string-drop\
    \ string 1)))))\n      (string-to-fraction-helper-helper string))\n    (define\
    \ (fraction-to-number-helper list)\n      (if (null? list)\n          0\n    \
    \      (+ (* (car list) (expt 10 (- (length list) 1)))\n             (fraction-to-number-helper\
    \ (cdr list)))))\n    (define (fraction-to", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (/ (* a b) (gcd a b)))\n  (define (simplify-fraction num den)\n    (define\
    \ g (gcd num den))\n    (define n (/ num g))\n    (define d (/ den g))\n    (if\
    \ (= (remainder n d) 0)\n        #t\n        #f))\n  (define (parse-fraction str)\n\
    \    (define (split str)\n      (string-split str #\\/))\n    (define (parse-num\
    \ str)\n      (string->number (first (split str))))\n    (define (parse-den str)\n\
    \      (string->number (second (split str))))\n    (values (parse-num str) (parse-den\
    \ str)))\n  (define (multiply-fractions num1 den1 num2 den2)\n    (values (* num1\
    \ num2) (* den1 den2)))\n  (define (multiply-fraction-by-number num den n)\n \
    \   (values (* num n) den))\n  (define (multiply-fraction-by-fraction num1 den1\
    \ num2 den2)\n    (define (multiply-fraction-by-fraction-helper num1 den1 num2\
    \ den2)\n      (define (multiply-fraction-by-fraction-helper-helper num1 den1\
    \ num2 den2)\n        (define (multiply-fraction-by-fraction-helper-helper-helper\
    \ num1 den1 num2 den2)\n          (define (multiply-fraction-by-fraction-helper-helper-helper-helper\
    \ num1 den1 num2 den2)\n            (define (multiply-fraction-by-fraction-helper-helper-helper-helper-helper\
    \ num1 den1 num2 den2)\n              (define (multiply-fraction-by-fraction-helper-helper-helper-helper-helper-helper\
    \ num1 den1 num2", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction s)\n    (define (split-fraction s)\n      (define (split-fraction-helper\
    \ s acc)\n        (if (string-empty? s)\n            (reverse acc)\n         \
    \   (split-fraction-helper (substring s 1) (cons (string-ref s 0) acc))))\n  \
    \    (define (join-fraction l)\n        (apply string-append l))\n      (define\
    \ (split-fraction-helper2 s acc)\n        (if (string-empty? s)\n            (reverse\
    \ acc)\n            (split-fraction-helper2 (substring s 1) (cons (string-ref\
    \ s 0) acc))))\n      (define (join-fraction2 l)\n        (apply string-append\
    \ l))\n      (let* ([f (split-fraction-helper s '())]\n             [n (join-fraction\
    \ (take f (sub1 (string-length s))))]\n             [d (join-fraction2 (drop f\
    \ (sub1 (string-length s))))])\n        (values (string->number n) (string->number\
    \ d))))\n    (define (simplify-fraction-helper n d)\n      (let* ([g (gcd n d)]\n\
    \             [n (/ n g)]\n             [d (/ d g)])\n        (values n d)))\n\
    \    (let* ([n (split-fraction s)]\n           [n (simplify-fraction-helper (car\
    \ n) (cadr n))])\n      (values (car n) (cadr n))))\n  (define (multiply-fractions\
    \ x n)\n    (let* ([x (simplify-fraction x)]\n           [n (simplify-fraction\
    \ n)]\n           [n (values (* (car x) (car n)) (* (cadr x) (cadr n))))])\n \
    \     (values (car n) (cadr n))))\n ", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (let ([g\
    \ (gcd a b)])\n      (if (= g 1)\n          (* a b)\n          (/ (* a b) g))))\n\
    \  (define (simplify-fraction num den)\n    (let ([g (gcd num den)])\n      (if\
    \ (= g 1)\n          (list num den)\n          (simplify-fraction (/ num g) (/\
    \ den g)))))\n  (define (multiply-fractions num1 den1 num2 den2)\n    (simplify-fraction\
    \ (* num1 num2) (lcm den1 den2)))\n  (define (is-whole? num den)\n    (= (remainder\
    \ num den) 0))\n  (define (parse-fraction str)\n    (let ([parts (string-split\
    \ str \"/\")])\n      (list (string->number (first parts))\n            (string->number\
    \ (second parts)))))\n  (define (fraction-to-string num den)\n    (string-append\
    \ (number->string num) \"/\" (number->string den)))\n  (define (fraction-to-decimal\
    \ num den)\n    (/ (exact->inexact num) (exact->inexact den)))\n  (define (fraction-to-percent\
    \ num den)\n    (let ([dec (fraction-to-decimal num den)])\n      (string-append\
    \ (number->string (* 100 dec)) \"%\")))\n  (define (fraction-to-mixed num den)\n\
    \    (let ([whole (quotient num den)])\n      (if (= whole 0)\n          (fraction-to-string\
    \ num den)\n          (string-append (number->string whole) \" \" (fraction-to-string\
    \ (remainder num den) den)))))\n  (define (fraction-to-improper num den)\n   \
    \ (let ([whole (quotient num den)])\n      (if (= whole 0)\n          (fraction-to-string\
    \ num den)\n          (string-append", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n          \
    \  (gcd b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd\
    \ a b)))\n      (define (simplify-fraction x)\n        (define (simplify-fraction-helper\
    \ x)\n          (define (gcd a b)\n            (if (= b 0)\n                a\n\
    \                (gcd b (remainder a b))))\n          (define (lcm a b)\n    \
    \        (/ (* a b) (gcd a b)))\n          (define (simplify-fraction x)\n   \
    \         (define (simplify-fraction-helper x)\n              (define (gcd a b)\n\
    \                (if (= b 0)\n                    a\n                    (gcd\
    \ b (remainder a b))))\n              (define (lcm a b)\n                (/ (*\
    \ a b) (gcd a b)))\n              (define (simplify-fraction x)\n            \
    \    (define (simplify-fraction-helper x)\n                  (define (gcd a b)\n\
    \                    (if (= b 0)\n                        a\n                \
    \        (gcd b (remainder a b))))\n                  (define (lcm a b)\n    \
    \                (/ (* a b) (gcd a b)))\n                  (define (simplify-fraction\
    \ x)\n                    (define (simplify-fraction-helper x)\n             \
    \         (define (gcd a b)\n                        (if (= b 0)\n           \
    \                 a\n                            (gcd b (remainder a b))))\n \
    \                     (define (lcm a b)\n                        (/ (* a b) (gcd\
    \ a b)))\n                      (define (simplify-fraction x)\n              \
    \          (define (simplify-f", "  (define (gcd a b)\n    (if (= b 0)\n     \
    \   a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b)\
    \ (gcd a b)))\n  (define (fraction-to-number x)\n    (define (split-fraction x)\n\
    \      (string-split x #\\/))\n    (define (numerator x)\n      (string->number\
    \ (first (split-fraction x))))\n    (define (denominator x)\n      (string->number\
    \ (second (split-fraction x))))\n    (/ (numerator x) (denominator x)))\n  (define\
    \ (number-to-fraction x)\n    (define (denominator x)\n      (define (find-denominator\
    \ x)\n        (if (integer? x)\n            1\n            (find-denominator (/\
    \ x 2))))\n      (find-denominator x))\n    (define (numerator x)\n      (* x\
    \ (denominator x)))\n    (string-append (number->string (numerator x)) \"/\" (number->string\
    \ (denominator x))))\n  (define (multiply x n)\n    (number-to-fraction (* (fraction-to-number\
    \ x) (fraction-to-number n))))\n  (define (is-integer? x)\n    (integer? (fraction-to-number\
    \ x)))\n  (is-integer? (multiply x n)))\n", "  (define (gcd a b)\n    (if (= b\
    \ 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if\
    \ (= a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction\
    \ x)\n    (define (numerator x)\n      (string->number (car (string-split x #\\\
    /))))\n    (define (denominator x)\n      (string->number (cadr (string-split\
    \ x #\\/))))\n    (define (simplify-fraction-helper x)\n      (define (gcd a b)\n\
    \        (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n \
    \     (define (lcm a b)\n        (if (= a 0)\n            0\n            (* (/\
    \ a (gcd a b)) b)))\n      (define (numerator x)\n        (string->number (car\
    \ (string-split x #\\/))))\n      (define (denominator x)\n        (string->number\
    \ (cadr (string-split x #\\/))))\n      (define (simplify-fraction-helper x)\n\
    \        (if (= (gcd (numerator x) (denominator x)) 1)\n            x\n      \
    \      (string-append (number->string (/ (numerator x) (gcd (numerator x) (denominator\
    \ x))))\n                           \"/\"\n                           (number->string\
    \ (/ (denominator x) (gcd (numerator x) (denominator x)))))))\n      (simplify-fraction-helper\
    \ x))\n    (simplify-fraction-helper x))\n  (define (multiply x n)\n    (define\
    \ (numerator x)\n      (string->number (car (string-split x #\\/))))\n    (define\
    \ (denominator x)\n      (string->number (cadr (string-split x #\\/))))\n    (define\
    \ (multiply-helper x n)\n      (string-append (number->string (* (numerator x)\
    \ (numerator n)))\n                     \"/\"", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction str)\n    (define (split\
    \ str)\n      (define (split-helper str acc)\n        (if (empty? str)\n     \
    \       (reverse acc)\n            (split-helper (rest str) (cons (first str)\
    \ acc))))\n      (split-helper str '()))\n    (define (is-whole-number? str)\n\
    \      (if (empty? str)\n          #t\n          (if (char=? (first str) #\\0)\n\
    \              (is-whole-number? (rest str))\n              #f)))\n    (define\
    \ (is-zero? str)\n      (if (empty? str)\n          #t\n          (if (char=?\
    \ (first str) #\\0)\n              (is-zero? (rest str))\n              #f)))\n\
    \    (define (reduce-fraction str)\n      (define (reduce-helper str acc)\n  \
    \      (if (empty? str)\n            (reverse acc)\n            (reduce-helper\
    \ (rest str) (cons (first str) acc))))\n      (define (reduce-fraction-helper\
    \ str1 str2)\n        (define (reduce-fraction-helper-helper str1 str2)\n    \
    \      (if (empty? str1)\n              (reduce-helper str2 '())\n           \
    \   (if (char=? (first str1) (first str2))\n                  (reduce-fraction-helper-helper\
    \ (rest str1) (rest str2))\n                  (reduce-helper str2 '()))))\n  \
    \      (reduce-fraction-helper-helper str1 str2))\n      (define (reduce-fraction-helper-helper\
    \ str1 str2)\n        (if (empty? str1)\n            (reduce-helper str2 '())\n\
    \            (if (char=? (first str1) (first str2))\n                (", "  (let*\
    \ ([x-num (string->number (regexp-match #rx\"^[0-9]+\" x))]\n         [x-den (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x))]\n         [n-num (string->number (regexp-match\
    \ #rx\"^[0-9]+\" n))]\n         [n-den (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ n))]\n         [num (* x-num n-num)]\n         [den (* x-den n-den)])\n    (if\
    \ (integer? (/ num den))\n        #t\n        #f)))\n", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (multiply-fractions x y)\n    (define (numer x)\n      (string->number (car\
    \ (string-split x #\"/\"))))\n    (define (denom x)\n      (string->number (cadr\
    \ (string-split x #\"/\"))))\n    (define (make-fraction n d)\n      (string-append\
    \ (number->string n) \"/\" (number->string d)))\n    (define (simplify-fraction\
    \ x)\n      (let ([g (gcd (numer x) (denom x))])\n        (make-fraction (/ (numer\
    \ x) g) (/ (denom x) g))))\n    (simplify-fraction (make-fraction (* (numer x)\
    \ (numer y)) (* (denom x) (denom y)))))\n  (define (is-integer? x)\n    (= (denominator\
    \ x) 1))\n  (is-integer? (string->number (multiply-fractions x n))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n\
    \  (define (simplify-fraction n)\n    (define (simplify-fraction-helper n)\n \
    \     (define (get-numerator n)\n        (string->number (substring n 0 (string-index\
    \ n #\\/))))\n      (define (get-denominator n)\n        (string->number (substring\
    \ n (+ 1 (string-index n #\\/)))))\n      (define (is-whole-number? n)\n     \
    \   (= (remainder (get-numerator n) (get-denominator n)) 0))\n      (define (get-whole-number\
    \ n)\n        (/ (get-numerator n) (get-denominator n)))\n      (if (is-whole-number?\
    \ n)\n          (get-whole-number n)\n          n))\n    (simplify-fraction-helper\
    \ n))\n  (define (get-numerator n)\n    (string->number (substring n 0 (string-index\
    \ n #\\/))))\n  (define (get-denominator n)\n    (string->number (substring n\
    \ (+ 1 (string-index n #\\/)))))\n  (define (is-whole-number? n)\n    (= (remainder\
    \ (get-numerator n) (get-denominator n)) 0))\n  (define (get-whole-number n)\n\
    \    (/ (get-numerator n) (get-denominator n)))\n  (define (get-numerator-x x)\n\
    \    (string->number (substring x 0 (string-index x #\\/))))\n  (define (get-denominator-x\
    \ x)\n    (string->number (substring x (+ 1 (string-index x #\\/)))))\n  (define\
    \ (get-numerator-n n)\n    (string->number (substring n 0 (string-index n #\\\
    /))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x gcd)\n      (if (= gcd 1)\n          x\n          (simplify-fraction-helper\
    \ (cons (/ (car x) gcd) (/ (cdr x) gcd)) (gcd (car x) (cdr x)))))\n  (simplify-fraction-helper\
    \ x (gcd (car x) (cdr x))))\n", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd\
    \ a b)))\n  (define (simplify-fraction num den)\n    (let ([g (gcd num den)])\n\
    \      (cons (/ num g) (/ den g))))\n  (define (multiply-fractions num1 den1 num2\
    \ den2)\n    (let ([l (lcm den1 den2)])\n      (simplify-fraction (* num1 (/ l\
    \ den1)) (* num2 (/ l den2)))))\n  (define (is-whole-number? num den)\n    (=\
    \ (remainder num den) 0))\n  (define (split-fraction str)\n    (let ([parts (string-split\
    \ str #\\/)])\n      (cons (string->number (car parts))\n            (string->number\
    \ (cadr parts)))))\n  (define (fraction->string num den)\n    (string-append (number->string\
    \ num) \"/\" (number->string den)))\n  (define (multiply-fractions-str x n)\n\
    \    (let* ([x-parts (split-fraction x)]\n           [n-parts (split-fraction\
    \ n)]\n           [result (multiply-fractions (car x-parts) (cadr x-parts)\n \
    \                                      (car n-parts) (cadr n-parts))])\n     \
    \ (fraction->string (car result) (cadr result))))\n  (is-whole-number? (car (split-fraction\
    \ (multiply-fractions-str x n)))\n                    (cadr (split-fraction (multiply-fractions-str\
    \ x n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction str)\n    (define (numerator str)\n      (string->number\
    \ (substring str 0 (string-index str #\\/))))\n    (define (denominator str)\n\
    \      (string->number (substring str (+ 1 (string-index str #\\/)))))\n    (define\
    \ (simplify-fraction-helper num den)\n      (let ((g (gcd num den)))\n       \
    \ (if (= g 1)\n            (string-append (number->string num) \"/\" (number->string\
    \ den))\n            (simplify-fraction-helper (/ num g) (/ den g)))))\n    (simplify-fraction-helper\
    \ (numerator str) (denominator str)))\n  (define (multiply-fractions x n)\n  \
    \  (define (numerator str)\n      (string->number (substring str 0 (string-index\
    \ str #\\/))))\n    (define (denominator str)\n      (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n    (define (multiply-fractions-helper\
    \ x n)\n      (let ((num (* (numerator x) (numerator n)))\n            (den (*\
    \ (denominator x) (denominator n))))\n        (simplify-fraction (string-append\
    \ (number->string num) \"/\" (number->string den)))))\n    (multiply-fractions-helper\
    \ x n))\n  (define (is-whole-number? str)\n    (define (numerator str)\n     \
    \ (string->number (substring str 0 (string-index str #\\/))))\n    (define (denominator\
    \ str)\n      (string->number (substring str (+ 1 (string-index str #\\/)))))\n\
    \    (= (remainder (numerator str) (denominator str)) 0))\n  (is-whole-number?\
    \ (multiply-", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (fraction-to-number x)\n    (define (split-fraction x)\n      (string-split\
    \ x #\\/))\n    (/ (string->number (first (split-fraction x)))\n       (string->number\
    \ (second (split-fraction x)))))\n  (define (number-to-fraction x)\n    (define\
    \ (gcd a b)\n      (if (= b 0)\n          a\n          (gcd b (remainder a b))))\n\
    \    (define (lcm a b)\n      (/ (* a b) (gcd a b)))\n    (define (simplify-fraction\
    \ x)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n          \
    \  (gcd b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd\
    \ a b)))\n      (define (split-fraction x)\n        (string-split x #\\/))\n \
    \     (define (simplify-fraction x)\n        (define (gcd a b)\n          (if\
    \ (= b 0)\n              a\n              (gcd b (remainder a b))))\n        (define\
    \ (lcm a b)\n          (/ (* a b) (gcd a b)))\n        (define (split-fraction\
    \ x)\n          (string-split x #\\/))\n        (define (simplify-fraction x)\n\
    \          (define (gcd a b)\n            (if (= b 0)\n                a\n   \
    \             (gcd b (remainder a b))))\n          (define (lcm a b)\n       \
    \     (/ (* a b) (gcd a b)))\n          (define (split-fraction x)\n         \
    \   (string-split x #\\/))\n          (define (simplify-fraction x)\n        \
    \    (define (gcd a b)\n              (if (= b 0)\n                  a\n     \
    \             (gcd b (remainder a b", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (=\
    \ a 0)\n        0\n        (* a (/ b (gcd a b)))))\n  (define (multiply-fractions\
    \ x y)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (string-empty? str)\n            (reverse acc)\n     \
    \       (split-fraction-helper (substring str 1) (cons (string-&gt;number (substring\
    \ str 0 1)) acc))))\n      (split-fraction-helper str '()))\n    (define (multiply-fractions-helper\
    \ x y)\n      (define (multiply-fractions-helper-helper x y)\n        (if (empty?\
    \ y)\n            '()\n            (cons (car x) (multiply-fractions-helper-helper\
    \ x (cdr y)))))\n      (if (empty? x)\n          '()\n          (append (multiply-fractions-helper-helper\
    \ x y) (multiply-fractions-helper (cdr x) y))))\n    (define (reduce-fraction\
    \ x)\n      (define (reduce-fraction-helper x)\n        (if (empty? x)\n     \
    \       '()\n            (cons (car x) (reduce-fraction-helper (cdr x)))))\n \
    \     (define (gcd a b)\n        (if (= b 0)\n            a\n            (gcd\
    \ b (remainder a b))))\n      (define (lcm a b)\n        (if (= a 0)\n       \
    \     0\n            (* a (/ b (gcd a b)))))\n      (define (reduce-fraction-helper-helper\
    \ x)\n        (if (empty? x)\n            '()\n            (cons (car x) (reduce-fraction-helper-helper\
    \ (cdr x)))))\n      (define (reduce-fraction-helper-helper-helper x)\n       ",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n \
    \     (define (numerator x)\n        (string->number (car (string-split x #\\\
    /))))\n      (define (denominator x)\n        (string->number (cadr (string-split\
    \ x #\\/))))\n      (define (gcd a b)\n        (if (= b 0)\n            a\n  \
    \          (gcd b (remainder a b))))\n      (define (lcm a b)\n        (if (=\
    \ a 0)\n            0\n            (/ (* a b) (gcd a b))))\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (numerator x)\n          (string->number (car (string-split\
    \ x #\\/))))\n        (define (denominator x)\n          (string->number (cadr\
    \ (string-split x #\\/))))\n        (define (gcd a b)\n          (if (= b 0)\n\
    \              a\n              (gcd b (remainder a b))))\n        (define (lcm\
    \ a b)\n          (if (= a 0)\n              0\n              (/ (* a b) (gcd\
    \ a b))))\n        (define (simplify-fraction-helper-helper-helper x)\n      \
    \    (define (numerator x)\n            (string->number (car (string-split x #\\\
    /))))\n          (define (denominator x)\n            (string->number (cadr (string-split\
    \ x #\\/))))\n          (define (gcd a b)\n            (if (= b 0)\n         \
    \       a\n                (gcd b (remainder a b))))\n          (define (lcm a\
    \ b)\n            (if (= a 0)\n                0\n                (/ (* a b) (gcd\
    \ a b))))\n          (define (simplify-fraction", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ num den)\n    (let ([g (gcd num den)])\n      (cons (/ num g) (/ den g))))\n\
    \  (define (multiply-fractions x y)\n    (let ([x-num (car x)]\n          [x-den\
    \ (cdr x)]\n          [y-num (car y)]\n          [y-den (cdr y)])\n      (simplify-fraction\
    \ (* x-num y-num) (lcm x-den y-den))))\n  (define (fraction-to-string f)\n   \
    \ (let ([num (car f)]\n          [den (cdr f)])\n      (if (= den 1)\n       \
    \   (number->string num)\n          (string-append (number->string num) \"/\"\
    \ (number->string den)))))\n  (define (is-whole? f)\n    (let ([num (car f)]\n\
    \          [den (cdr f)])\n      (= (remainder num den) 0)))\n  (define (parse-fraction\
    \ s)\n    (let ([parts (string-split s \"/\")])\n      (cons (string->number (car\
    \ parts)) (string->number (cadr parts)))))\n  (is-whole? (multiply-fractions (parse-fraction\
    \ x) (parse-fraction n))))\n", "  (define (gcd a b)\n    (if (= b 0)\n       \
    \ a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (* (/ a (gcd a b)) b)))\n  (define (multiply-fraction x y)\n\
    \    (let* ([x-numerator (string->number (car (string-split x \"/\")))])\n   \
    \   (let* ([x-denominator (string->number (cadr (string-split x \"/\")))])\n \
    \       (let* ([y-numerator (string->number (car (string-split y \"/\")))])\n\
    \          (let* ([y-denominator (string->number (cadr (string-split y \"/\")))])\n\
    \            (let* ([numerator (* x-numerator y-numerator)])\n              (let*\
    \ ([denominator (* x-denominator y-denominator)])\n                (let* ([gcd\
    \ (gcd numerator denominator)])\n                  (let* ([numerator (/ numerator\
    \ gcd)])\n                    (let* ([denominator (/ denominator gcd)])\n    \
    \                  (if (= (remainder numerator denominator) 0)\n             \
    \             #t\n                          #f))))))))))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction s)\n   \
    \ (define (split-fraction s)\n      (define (split-fraction-helper s acc)\n  \
    \      (if (string-empty? s)\n            (reverse acc)\n            (split-fraction-helper\
    \ (substring s 1) (cons (string-ref s 0) acc))))\n      (define (string-to-int\
    \ s)\n        (string->number s))\n      (define (fraction-to-int l)\n       \
    \ (apply / l))\n      (fraction-to-int (map string-to-int (split-fraction s))))\n\
    \    (define (simplify-fraction-helper n d)\n      (define (simplify-fraction-helper-helper\
    \ n d)\n        (if (= d 0)\n            (list n d)\n            (simplify-fraction-helper-helper\
    \ d (remainder n d))))\n      (let ((g (simplify-fraction-helper-helper n d)))\n\
    \        (list (car g) (cadr g))))\n    (let ((g (simplify-fraction-helper (car\
    \ x) (cadr x))))\n      (list (car g) (cadr g))))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-helper x n)\n      (list (* (car x) (car\
    \ n)) (* (cadr x) (cadr n))))\n    (simplify-fraction (multiply-fractions-helper\
    \ x n)))\n  (define (is-whole-number? x)\n    (= (remainder (car x) (cadr x))\
    \ 0))\n  (is-whole-number? (multiply-fractions (simplify-fraction x) (simplify-fraction\
    \ n))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd\
    \ a b)) b)))\n  (define (simplify-fraction a b)\n    (define (gcd a b)\n     \
    \ (if (= b 0)\n          a\n          (gcd b (remainder a b))))\n    (define (lcm\
    \ a b)\n      (if (= a 0)\n          0\n          (* (/ a (gcd a b)) b)))\n  \
    \  (define (simplify-fraction a b)\n      (let ([g (gcd a b)])\n        (cons\
    \ (/ a g) (/ b g))))\n    (define (multiply-fractions a b)\n      (let ([a (simplify-fraction\
    \ a b)])\n        (cons (* (car a) (car b)) (* (cdr a) (cdr b)))))\n    (define\
    \ (divide-fractions a b)\n      (let ([a (simplify-fraction a b)])\n        (cons\
    \ (* (car a) (cdr b)) (* (cdr a) (car b)))))\n    (define (add-fractions a b)\n\
    \      (let ([l (lcm (cdr a) (cdr b))])\n        (simplify-fraction (+ (* (car\
    \ a) (/ l (cdr a))) (* (car b) (/ l (cdr b)))) l)))\n    (define (subtract-fractions\
    \ a b)\n      (let ([l (lcm (cdr a) (cdr b))])\n        (simplify-fraction (-\
    \ (* (car a) (/ l (cdr a))) (* (car b) (/ l (cdr b)))) l)))\n    (define (parse-fraction\
    \ s)\n      (let ([l (string-split s \"/\")])\n        (cons (string->number (car\
    \ l)) (string->number (cadr l)))))\n    (define (simplify-fraction a b)\n    \
    \  (let ([g (gcd a b)])", "  (define (gcd a b)\n    (if (= b 0)\n        a\n \
    \       (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n    \
    \    0\n        (/ (* a b) (gcd a b))))\n  (define (multiply x n)\n    (define\
    \ (parse-fraction str)\n      (define (parse-num str)\n        (string->number\
    \ (substring str 0 (string-index str #\\/))))\n      (define (parse-den str)\n\
    \        (string->number (substring str (+ 1 (string-index str #\\/)))))\n   \
    \   (values (parse-num str) (parse-den str)))\n    (define (is-whole? num den)\n\
    \      (= (remainder num den) 0))\n    (define (simplify-fraction num den)\n \
    \     (define (simplify-num num den)\n        (/ num (gcd num den)))\n      (define\
    \ (simplify-den den)\n        (/ den (gcd num den)))\n      (values (simplify-num\
    \ num den) (simplify-den den)))\n    (define (multiply-fractions x-num x-den n-num\
    \ n-den)\n      (define (multiply-num x-num n-num)\n        (* x-num n-num))\n\
    \      (define (multiply-den x-den n-den)\n        (* x-den n-den))\n      (values\
    \ (multiply-num x-num n-num) (multiply-den x-den n-den)))\n    (define (result-to-string\
    \ num den)\n      (string-append (number->string num) \"/\" (number->string den)))\n\
    \    (define (result-to-bool num den)\n      (is-whole? num den))\n    (define\
    \ (simplify-result num den)\n      (define (simplify-num num den)\n        (/\
    \ num (gcd num den)))\n      (define (simplify-den den)\n        (/ den (gcd num\
    \ den)))\n      (values (simplify-num num den) (simplify-", "  (define (gcd a\
    \ b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (multiply-fractions x y)\n    (define (parse-fraction str)\n      (define (split\
    \ str)\n        (string-split str #\\/))\n      (define (parse-num str)\n    \
    \    (string->number (first (split str))))\n      (define (parse-den str)\n  \
    \      (string->number (second (split str))))\n      (values (parse-num str) (parse-den\
    \ str)))\n    (define (simplify-fraction str)\n      (define (gcd a b)\n     \
    \   (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n      (define\
    \ (lcm a b)\n        (if (= a 0)\n            0\n            (/ (* a b) (gcd a\
    \ b))))\n      (define (simplify-fraction-helper num den)\n        (define (gcd\
    \ a b)\n          (if (= b 0)\n              a\n              (gcd b (remainder\
    \ a b))))\n        (define (lcm a b)\n          (if (= a 0)\n              0\n\
    \              (/ (* a b) (gcd a b))))\n        (define (simplify-fraction-helper\
    \ num den)\n          (let ((gcd (gcd num den)))\n            (values (/ num gcd)\
    \ (/ den gcd))))\n        (simplify-fraction-helper num den))\n      (define (multiply-fractions\
    \ x y)\n        (define (parse-fraction str)\n          (define (split str)\n\
    \            (string-split str #\\/))\n          (define (parse-num str)\n   \
    \         (string->number (first (split str))))\n          (define (parse-den\
    \ str)\n            (string->number (second (split str))))\n          (values\
    \ (parse-num str) (parse-den str)))\n        (define (simplify-fraction str)",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (multiply x y)\n    (let ([x-num (string->number (car (string-split\
    \ x \"/\")))])\n      (let ([x-den (string->number (cadr (string-split x \"/\"\
    )))])\n        (let ([y-num (string->number (car (string-split y \"/\")))])\n\
    \          (let ([y-den (string->number (cadr (string-split y \"/\")))])\n   \
    \         (let ([num (* x-num y-num)])\n              (let ([den (lcm x-den y-den)])\n\
    \                (if (= (remainder num den) 0)\n                    #t\n     \
    \               #f)))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd\
    \ a b)))\n  (define (simplify-fraction str)\n    (define (split str)\n      (define\
    \ (split-helper str acc)\n        (if (empty? str)\n            (reverse acc)\n\
    \            (split-helper (rest str) (cons (first str) acc))))\n      (split-helper\
    \ str '()))\n    (define (numerator str)\n      (string->number (list-ref (split\
    \ str) 0)))\n    (define (denominator str)\n      (string->number (list-ref (split\
    \ str) 1)))\n    (define (simplify-helper num den)\n      (define (simplify-helper-helper\
    \ num den acc)\n        (if (= (remainder num den) 0)\n            (cons (quotient\
    \ num den) acc)\n            (simplify-helper-helper den (remainder num den) (cons\
    \ (quotient num den) acc))))\n      (simplify-helper-helper num den '()))\n  \
    \  (define (simplify-helper-2 num den)\n      (define (simplify-helper-helper-2\
    \ num den acc)\n        (if (= (remainder num den) 0)\n            (cons (quotient\
    \ num den) acc)\n            (simplify-helper-helper-2 den (remainder num den)\
    \ (cons (quotient num den) acc))))\n      (simplify-helper-helper-2 num den '()))\n\
    \    (define (simplify-helper-3 num den)\n      (define (simplify-helper-helper-3\
    \ num den acc)\n        (if (= (remainder num den) 0)\n            (cons (quotient\
    \ num den) acc)\n            (simplify-helper-helper-3 den (remainder num den)\
    \ (cons (quotient num den) acc))))\n      (simplify-", "  (let ([x-numerator (string->number\
    \ (car (string-split x \"/\")))])\n    (let ([x-denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n      (let ([n-numerator (string->number (car (string-split\
    \ n \"/\")))])\n        (let ([n-denominator (string->number (cadr (string-split\
    \ n \"/\")))])\n          (let ([x-numerator (* x-numerator n-numerator)])\n \
    \           (let ([x-denominator (* x-denominator n-denominator)])\n         \
    \     (let ([gcd (gcd x-numerator x-denominator)])\n                (let ([x-numerator\
    \ (/ x-numerator gcd)])\n                  (let ([x-denominator (/ x-denominator\
    \ gcd)])\n                    (if (= x-denominator 1)\n                      \
    \  #t\n                        #f))))))))))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (lcm-list lst)\n    (if (null? (cdr lst))\n\
    \        (car lst)\n        (lcm (car lst) (lcm-list (cdr lst)))))\n  (define\
    \ (numerator x)\n    (string->number (car (string-split x #\\/))))\n  (define\
    \ (denominator x)\n    (string->number (cadr (string-split x #\\/))))\n  (define\
    \ (multiply x n)\n    (let ([num (* (numerator x) (numerator n))]\n          [den\
    \ (lcm-list (list (denominator x) (denominator n)))])\n      (if (= (remainder\
    \ num den) 0)\n          #t\n          #f)))\n  (multiply x n))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (multiply-fractions x y)\n    (define (numerator x)\n      (string->number\
    \ (car (string-split x #\\/))))\n    (define (denominator x)\n      (string->number\
    \ (cadr (string-split x #\\/))))\n    (define (simplify-fraction x)\n      (define\
    \ (gcd a b)\n        (if (= b 0)\n            a\n            (gcd b (remainder\
    \ a b))))\n      (define (lcm a b)\n        (if (= a 0)\n            0\n     \
    \       (/ (* a b) (gcd a b))))\n      (define (numerator x)\n        (string->number\
    \ (car (string-split x #\\/))))\n      (define (denominator x)\n        (string->number\
    \ (cadr (string-split x #\\/))))\n      (define (simplify-fraction x)\n      \
    \  (define (gcd a b)\n          (if (= b 0)\n              a\n              (gcd\
    \ b (remainder a b))))\n        (define (lcm a b)\n          (if (= a 0)\n   \
    \           0\n              (/ (* a b) (gcd a b))))\n        (define (numerator\
    \ x)\n          (string->number (car (string-split x #\\/))))\n        (define\
    \ (denominator x)\n          (string->number (cadr (string-split x #\\/))))\n\
    \        (define (simplify-fraction x)\n          (define (gcd a b)\n        \
    \    (if (= b 0)\n                a\n                (gcd b (remainder a b))))\n\
    \          (define (lcm a b)\n            (if (= a 0)\n                0\n   \
    \             (/ (* a b) (gcd a b))))\n          (define (numerator x)\n     \
    \       (string->number (car (string-split x #\\/))))\n         ", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (* a (/ b (gcd a b)))))\n\
    \  (define (numerator x)\n    (string->number (regexp-match #rx\"^[0-9]+\" x)))\n\
    \  (define (denominator x)\n    (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ x)))\n  (define (fraction->number x)\n    (/ (numerator x) (denominator x)))\n\
    \  (define (number->fraction x)\n    (string-append (number->string (numerator\
    \ x)) \"/\" (number->string (denominator x))))\n  (define (multiply x y)\n   \
    \ (number->fraction (* (fraction->number x) (fraction->number y))))\n  (define\
    \ (divide x y)\n    (number->fraction (/ (fraction->number x) (fraction->number\
    \ y))))\n  (define (add x y)\n    (number->fraction (+ (fraction->number x) (fraction->number\
    \ y))))\n  (define (subtract x y)\n    (number->fraction (- (fraction->number\
    \ x) (fraction->number y))))\n  (define (simplify-fraction x)\n    (let ([g (gcd\
    \ (numerator x) (denominator x))])\n      (if (= g 1)\n          x\n         \
    \ (number->fraction (/ (numerator x) g)))))\n  (define (simplify-fraction-pair\
    \ x y)\n    (simplify-fraction (multiply x y)))\n  (define (simplify-fraction-list\
    \ xs)\n    (if (null? xs)\n        \"\"\n        (if (null? (cdr xs))\n      \
    \      (car xs)\n            (simplify-fraction-pair (car xs) (simplify-fraction-list\
    \ (cdr xs))))))\n  (define (", "  (let ([x-numerator (string->number (car (string-split\
    \ x \"/\")))])\n    (let ([x-denominator (string->number (cadr (string-split x\
    \ \"/\")))])\n      (let ([n-numerator (string->number (car (string-split n \"\
    /\")))])\n        (let ([n-denominator (string->number (cadr (string-split n \"\
    /\")))])\n          (let ([numerator (* x-numerator n-numerator)])\n         \
    \   (let ([denominator (* x-denominator n-denominator)])\n              (let ([gcd\
    \ (gcd numerator denominator)])\n                (let ([numerator (/ numerator\
    \ gcd)])\n                  (let ([denominator (/ denominator gcd)])\n       \
    \             (if (= numerator denominator)\n                        #t\n    \
    \                    #f))))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (=\
    \ a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list-list-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list-list-list-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list-list-list-list-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient den g)))))\n  (define (simplify-fraction-list-list-list-list-list-list\
    \ num den)\n    (let ([g (gcd num den)])\n      (if (= g 1)\n          #f\n  \
    \        (list (quotient num g) (quotient", "  (define (gcd a b)\n    (cond [(=\
    \ a 0) b]\n          [(= b 0) a]\n          [(< a b) (gcd a (- b a))]\n      \
    \    [else (gcd (- a b) b)]))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n\
    \  (define (simplify-fraction x)\n    (let* ([numerator (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator (string->number (cadr (string-split\
    \ x \"/\")))])\n        (let* ([gcd (gcd numerator denominator)])\n          (string-append\
    \ (number->string (/ numerator gcd)) \"/\" (number->string (/ denominator gcd)))))))\n\
    \  (define (multiply-fractions x n)\n    (let* ([x-numerator (string->number (car\
    \ (string-split x \"/\")))])\n      (let* ([x-denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n        (let* ([n-numerator (string->number (car\
    \ (string-split n \"/\")))])\n          (let* ([n-denominator (string->number\
    \ (cadr (string-split n \"/\")))])\n            (string-append (number->string\
    \ (* x-numerator n-numerator)) \"/\" (number->string (* x-denominator n-denominator))))))))\n\
    \  (define (is-whole-number? x)\n    (let* ([numerator (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator (string->number (cadr (string-split\
    \ x \"/\")))])\n        (= 0 (mod numerator denominator)))))\n  (is-whole-number?\
    \ (simplify-fraction (multiply-fractions x n))))\n", "  (define (gcd a b)\n  \
    \  (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction num den)\n    (define\
    \ (simplify-fraction-helper num den)\n      (if (= (gcd num den) 1)\n        \
    \  (cons num den)\n          (simplify-fraction-helper (/ num (gcd num den)) (/\
    \ den (gcd num den)))))\n    (simplify-fraction-helper num den))\n  (define (multiply-fractions\
    \ x y)\n    (define (multiply-fractions-helper x y)\n      (cons (* (car x) (car\
    \ y)) (* (cdr x) (cdr y))))\n    (multiply-fractions-helper x y))\n  (define (divide-fractions\
    \ x y)\n    (define (divide-fractions-helper x y)\n      (cons (* (car x) (cdr\
    \ y)) (* (cdr x) (car y))))\n    (divide-fractions-helper x y))\n  (define (is-whole-number\
    \ x)\n    (= (remainder (car x) (cdr x)) 0))\n  (is-whole-number (simplify-fraction\
    \ (car (multiply-fractions (simplify-fraction (string->number (car (string-split\
    \ x \"/\"))) (string->number (cadr (string-split x \"/\")))) (simplify-fraction\
    \ (string->number (car (string-split n \"/\"))) (string->number (cadr (string-split\
    \ n \"/\")))))) (cdr (multiply-fractions (simplify-fraction (string->number (car\
    \ (string-split x \"/\"))) (string->number (cadr (string-split x \"/\")))) (simplify-fraction\
    \ (string->number (car (string-split n \"/\"))) (string->number (cadr (string-split\
    \ n \"/\")))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n    \
    \    (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n       \
    \ 0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n    (define\
    \ (simplify-fraction-helper x)\n      (define (split-fraction x)\n        (define\
    \ (split-fraction-helper x)\n          (if (string-empty? x)\n              (values\
    \ \"\" \"\")\n              (let ([c (string-ref x 0)])\n                (if (char=?\
    \ c #\\/)\n                    (values \"\" (substring x 1 (string-length x)))\n\
    \                    (let-values ([(numerator rest) (split-fraction-helper (substring\
    \ x 1 (string-length x)))])\n                      (values (string-append numerator\
    \ (string c)) rest)))))))\n      (let-values ([(numerator denominator) (split-fraction\
    \ x)])\n        (values (string->number numerator) (string->number denominator))))\n\
    \    (let-values ([(numerator denominator) (simplify-fraction-helper x)])\n  \
    \    (let ([g (gcd numerator denominator)])\n        (if (= g 1)\n           \
    \ x\n            (string-append (number->string (/ numerator g)) \"/\" (number->string\
    \ (/ denominator g)))))))\n  (define (multiply-fractions x n)\n    (let-values\
    \ ([(numerator1 denominator1) (simplify-fraction x)]\n                 [(numerator2\
    \ denominator2) (simplify-fraction n)])\n      (string-append (number->string\
    \ (* numerator1 numerator2)) \"/\" (number->string (lcm denominator1 denominator2)))))\n\
    \  (define (is-integer? x)\n    (let-values ([(numerator denominator) (simplify-fraction\
    \ x)])\n      (= denominator 1)))\n  (is-integer? (multiply-fractions x n)))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define g (gcd numerator denominator))\n    (define\
    \ n (quotient numerator g))\n    (define d (quotient denominator g))\n    (if\
    \ (= d 1)\n        #t\n        #f))\n  (define (parse-fraction str)\n    (define\
    \ (split-fraction str)\n      (string-split str #\\/))\n    (define (parse-numerator\
    \ str)\n      (string->number (car (split-fraction str))))\n    (define (parse-denominator\
    \ str)\n      (string->number (cadr (split-fraction str))))\n    (values (parse-numerator\
    \ str) (parse-denominator str)))\n  (define (multiply-fractions x y)\n    (define\
    \ (multiply-numerators x y)\n      (* (car x) (car y)))\n    (define (multiply-denominators\
    \ x y)\n      (* (cadr x) (cadr y)))\n    (values (multiply-numerators x y) (multiply-denominators\
    \ x y)))\n  (simplify-fraction (car (multiply-fractions (parse-fraction x) (parse-fraction\
    \ n)))\n                     (cadr (multiply-fractions (parse-fraction x) (parse-fraction\
    \ n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n      \
    \  (/ (* a b) (gcd a b))))\n  (define (simplify-fraction s)\n    (define (split\
    \ s)\n      (let ([sl (string-length s)])\n        (values (substring s 0 (string-index\
    \ s \"/\"))\n                (substring s (+ 1 (string-index s \"/\")) sl))))\n\
    \    (define (simplify-fraction-helper n d)\n      (let ([g (gcd n d)])\n    \
    \    (if (= g 1)\n            (values n d)\n            (simplify-fraction-helper\
    \ (/ n g) (/ d g)))))\n    (let-values ([(n d) (split s)])\n      (simplify-fraction-helper\
    \ (string->number n) (string->number d))))\n  (define (multiply-fractions x n)\n\
    \    (let-values ([(n1 d1) (simplify-fraction x)]\n                 [(n2 d2) (simplify-fraction\
    \ n)])\n      (let ([l (lcm d1 d2)])\n        (values (* n1 (/ l d1)) (* n2 (/\
    \ l d2))))))\n  (let-values ([(n d) (multiply-fractions x n)])\n    (= (remainder\
    \ n d) 0)))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (if (= b 0)\n        a\n    \
    \    (* a (/ b (gcd a b)))))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x gcd)\n      (if (= gcd 1)\n          x\n          (simplify-fraction-helper\
    \ (cons (/ (car x) gcd) (/ (cdr x) gcd)) (gcd (car x) (cdr x)))))\n  (simplify-fraction-helper\
    \ x (gcd (car x) (cdr x))))\n", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction f)\n\
    \    (define (numerator f)\n      (string->number (car (string-split f #\\/))))\n\
    \    (define (denominator f)\n      (string->number (cadr (string-split f #\\\
    /))))\n    (define (simplify-fraction-helper f)\n      (define (gcd a b)\n   \
    \     (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n    \
    \  (define (lcm a b)\n        (if (= a 0)\n            0\n            (/ (* a\
    \ b) (gcd a b))))\n      (define (simplify-fraction-helper f)\n        (define\
    \ (numerator f)\n          (string->number (car (string-split f #\\/))))\n   \
    \     (define (denominator f)\n          (string->number (cadr (string-split f\
    \ #\\/))))\n        (define (simplify-fraction-helper f)\n          (define (numerator\
    \ f)\n            (string->number (car (string-split f #\\/))))\n          (define\
    \ (denominator f)\n            (string->number (cadr (string-split f #\\/))))\n\
    \          (define (simplify-fraction-helper f)\n            (define (numerator\
    \ f)\n              (string->number (car (string-split f #\\/))))\n          \
    \  (define (denominator f)\n              (string->number (cadr (string-split\
    \ f #\\/))))\n            (define (simplify-fraction-helper f)\n             \
    \ (define (numerator f)\n                (string->number (car (string-split f\
    \ #\\/))))\n              (define (denominator f)\n                (string->number\
    \ (cadr (string-split f #\\/))))\n              (define (simplify-fraction-helper\
    \ f)\n               ", "  (define (gcd a b)\n    (if (= b 0)\n        a\n   \
    \     (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n\
    \  (define (simplify-fraction str)\n    (define (simplify-fraction-helper str)\n\
    \      (define (get-numerator str)\n        (string->number (substring str 0 (string-index\
    \ str #\\/))))\n      (define (get-denominator str)\n        (string->number (substring\
    \ str (+ 1 (string-index str #\\/)))))\n      (define (is-whole-number? str)\n\
    \        (zero? (remainder (get-numerator str) (get-denominator str))))\n    \
    \  (define (simplify-fraction-helper-helper str)\n        (define (get-numerator\
    \ str)\n          (string->number (substring str 0 (string-index str #\\/))))\n\
    \        (define (get-denominator str)\n          (string->number (substring str\
    \ (+ 1 (string-index str #\\/)))))\n        (define (simplify-fraction-helper-helper-helper\
    \ str)\n          (define (get-numerator str)\n            (string->number (substring\
    \ str 0 (string-index str #\\/))))\n          (define (get-denominator str)\n\
    \            (string->number (substring str (+ 1 (string-index str #\\/)))))\n\
    \          (define (simplify-fraction-helper-helper-helper-helper str)\n     \
    \       (define (get-numerator str)\n              (string->number (substring\
    \ str 0 (string-index str #\\/))))\n            (define (get-denominator str)\n\
    \              (string->number (substring str (+ 1 (string-index str #\\/)))))\n\
    \            (define (simplify-fraction-helper-helper-helper-helper-helper str)\n\
    \              (define (get-numerator str)\n                (string->number (substring\
    \ str 0 (string-index str #\\/))))\n              (define (get", "  (let* ([x-numerator\
    \ (string->number (regexp-match #rx\"^[0-9]+\" x))]\n         [x-denominator (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x))]\n         [n-numerator (string->number (regexp-match\
    \ #rx\"^[0-9]+\" n))]\n         [n-denominator (string->number (regexp-match #rx\"\
    /[0-9]+$\" n))]\n         [result-numerator (* x-numerator n-numerator)]\n   \
    \      [result-denominator (* x-denominator n-denominator)])\n    (if (zero? (modulo\
    \ result-numerator result-denominator))\n        #t\n        #f)))\n", "  (let\
    \ ([x-num (string->number (regexp-match #rx\"^[0-9]+\" x))]\n        [x-den (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x))]\n        [n-num (string->number (regexp-match\
    \ #rx\"^[0-9]+\" n))]\n        [n-den (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ n))])\n    (let ([num (* x-num n-num)]\n          [den (* x-den n-den)])\n \
    \     (if (integer? (/ num den))\n          #t\n          #f))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ n)\n    (define (simplify-fraction-helper n d)\n      (let ((g (gcd n d)))\n\
    \        (if (= g 1)\n            (values n d)\n            (simplify-fraction-helper\
    \ (/ n g) (/ d g)))))\n    (simplify-fraction-helper (string->number (car (string-split\
    \ n \"/\")))\n                              (string->number (cadr (string-split\
    \ n \"/\")))))\n  (let* ((x-n (simplify-fraction x))\n         (n-n (simplify-fraction\
    \ n))\n         (l (lcm (cadr x-n) (cadr n-n)))\n         (x-n-l (* (car x-n)\
    \ (/ l (cadr x-n))))\n         (n-n-l (* (car n-n) (/ l (cadr n-n)))))\n    (if\
    \ (= (remainder (+ x-n-l n-n-l) l) 0)\n        #t\n        #f)))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction numerator denominator)\n    (let ([g (gcd numerator\
    \ denominator)])\n      (cons (/ numerator g) (/ denominator g))))\n  (define\
    \ (multiply-fractions f1 f2)\n    (let ([numerator (* (car f1) (car f2))]\n  \
    \        [denominator (lcm (cdr f1) (cdr f2))])\n      (simplify-fraction numerator\
    \ denominator)))\n  (define (parse-fraction str)\n    (let ([numerator (string->number\
    \ (car (string-split str #\\/)))])\n      (cons numerator (string->number (cadr\
    \ (string-split str #\\/))))))\n  (define (is-whole-number? n)\n    (= (remainder\
    \ n 1) 0))\n  (define (fraction->number f)\n    (/ (car f) (cdr f)))\n  (is-whole-number?\
    \ (fraction->number (multiply-fractions (parse-fraction x) (parse-fraction n)))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define gcd (gcd numerator denominator))\n    (define\
    \ numerator (/ numerator gcd))\n    (define denominator (/ denominator gcd))\n\
    \    (list numerator denominator))\n  (define (fraction-to-number numerator denominator)\n\
    \    (/ numerator denominator))\n  (define (parse-fraction str)\n    (define (split\
    \ str)\n      (string-split str #\\/))\n    (define (parse-number str)\n     \
    \ (string->number str))\n    (define (parse-fraction-parts str)\n      (define\
    \ parts (split str))\n      (list (parse-number (first parts))\n            (parse-number\
    \ (second parts))))\n    (parse-fraction-parts str))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-parts x n)\n      (define (multiply-fractions-parts-numerators\
    \ x n)\n        (* (first x) (first n)))\n      (define (multiply-fractions-parts-denominators\
    \ x n)\n        (* (second x) (second n)))\n      (list (multiply-fractions-parts-numerators\
    \ x n)\n            (multiply-fractions-parts-denominators x n)))\n    (simplify-fraction\
    \ (multiply-fractions-parts x n)))\n  (define (is-whole-number? number)\n    (=\
    \ (remainder number 1) 0))\n  (define (is-whole-number-fraction? fraction)\n \
    \   (is-whole-number? (fraction-to-number (first fraction) (second fraction))))\n\
    \  (is-whole-number-fraction? (multiply-fractions (parse-fraction x) (parse-fraction\
    \ n))))\n", "  (let ([x-numerator (string->number (car (string-split x \"/\")))])\n\
    \    (let ([x-denominator (string->number (cadr (string-split x \"/\")))])\n \
    \     (let ([n-numerator (string->number (car (string-split n \"/\")))])\n   \
    \     (let ([n-denominator (string->number (cadr (string-split n \"/\")))])\n\
    \          (let ([result-numerator (* x-numerator n-numerator)])\n           \
    \ (let ([result-denominator (* x-denominator n-denominator)])\n              (let\
    \ ([result-gcd (gcd result-numerator result-denominator)])\n                (let\
    \ ([result-numerator (/ result-numerator result-gcd)])\n                  (let\
    \ ([result-denominator (/ result-denominator result-gcd)])\n                 \
    \   (let ([result-numerator-string (number->string result-numerator)])\n     \
    \                 (let ([result-denominator-string (number->string result-denominator)])\n\
    \                        (let ([result (string-append result-numerator-string\
    \ \"/\" result-denominator-string)])\n                          (if (= (modulo\
    \ result-numerator result-denominator) 0)\n                              #t\n\
    \                              #f)))))))))))))))\n", "  (define (gcd a b)\n  \
    \  (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (if (= a 0)\n        0\n        (* b (/ a (gcd a b)))))\n  (define (simplify-fraction\
    \ str)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (numerator str)\n      (string->number (first (split-fraction str))))\n\
    \    (define (denominator str)\n      (string->number (second (split-fraction\
    \ str))))\n    (define (simplify-fraction-helper str)\n      (let ([n (numerator\
    \ str)]\n            [d (denominator str)])\n        (if (= n d)\n           \
    \ 1\n            (let ([g (gcd n d)])\n              (/ n g)))))\n    (simplify-fraction-helper\
    \ str))\n  (define (multiply-fractions str1 str2)\n    (define (numerator str)\n\
    \      (string->number (first (split-fraction str))))\n    (define (denominator\
    \ str)\n      (string->number (second (split-fraction str))))\n    (define (multiply-fractions-helper\
    \ str1 str2)\n      (let ([n1 (numerator str1)]\n            [d1 (denominator\
    \ str1)]\n            [n2 (numerator str2)]\n            [d2 (denominator str2)])\n\
    \        (let ([g (gcd n1 d2)]\n              [l (lcm d1 d2)])\n          (if\
    \ (= g 1)\n              (string-append (number->string (* n1 n2)) \"/\" (number->string\
    \ l))\n              (string-append (number->string (/ (* n1 n2) g)) \"/\" (number->string",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (parse-fraction str)\n    (define (parse-fraction-helper str)\n   \
    \   (if (empty? str)\n          (values 0 0)\n          (let ([c (first str)])\n\
    \            (if (char=? c #\\/)\n                (values (string->number (substring\
    \ str 0 (- (string-length str) 1))) 1)\n                (parse-fraction-helper\
    \ (rest str))))))\n    (parse-fraction-helper str))\n  (define (simplify-fraction\
    \ a b)\n    (let ([g (gcd a b)])\n      (values (/ a g) (/ b g))))\n  (define\
    \ (multiply-fractions a b c d)\n    (let-values ([(a b) (simplify-fraction a b)]\n\
    \                 [(c d) (simplify-fraction c d)])\n      (simplify-fraction (*\
    \ a c) (* b d))))\n  (define (divide-fractions a b c d)\n    (let-values ([(a\
    \ b) (simplify-fraction a b)]\n                 [(c d) (simplify-fraction c d)])\n\
    \      (simplify-fraction (* a d) (* b c))))\n  (define (add-fractions a b c d)\n\
    \    (let-values ([(a b) (simplify-fraction a b)]\n                 [(c d) (simplify-fraction\
    \ c d)])\n      (simplify-fraction (+ (* a d) (* b c)) (* b d))))\n  (define (subtract-fractions\
    \ a b c d)\n    (let-values ([(a b) (simplify-fraction a b)]\n               \
    \  [(c d) (simplify-fraction c d)])\n      (simplify-fraction (- (* a d) (* b\
    \ c)) (* b d", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n    \
    \    (/ (* a b) (gcd a b))))\n  (define (is-whole-number? x)\n    (if (zero? (remainder\
    \ x 1))\n        #t\n        #f))\n  (define (get-numerator x)\n    (string->number\
    \ (car (string-split x #\\/))))\n  (define (get-denominator x)\n    (string->number\
    \ (cadr (string-split x #\\/))))\n  (define (get-numerator-and-denominator x)\n\
    \    (list (get-numerator x) (get-denominator x)))\n  (define (multiply-fractions\
    \ x y)\n    (define (multiply-numerators x y)\n      (* (get-numerator x) (get-numerator\
    \ y)))\n  (define (multiply-denominators x y)\n    (* (get-denominator x) (get-denominator\
    \ y)))\n  (define (simplify-fraction x)\n    (define (simplify-numerator x)\n\
    \      (/ (get-numerator x) (gcd (get-numerator x) (get-denominator x))))\n  (define\
    \ (simplify-denominator x)\n    (/ (get-denominator x) (gcd (get-numerator x)\
    \ (get-denominator x))))\n  (list (simplify-numerator x) (simplify-denominator\
    \ x)))\n  (define (multiply-fractions x y)\n    (define (multiply-numerators x\
    \ y)\n      (* (get-numerator x) (get-numerator y)))\n  (define (multiply-denominators\
    \ x y)\n    (* (get-denominator x) (get-denominator y)))\n  (simplify-fraction\
    \ (list (multiply-numerators x y) (", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction str)\n    (define (simplify-fraction-helper\
    \ str)\n      (define (split-fraction str)\n        (define (split-fraction-helper\
    \ str)\n          (if (string=? (substring str 0 1) \"/\")\n              (values\
    \ (string->number (substring str 1 (string-length str))) 1)\n              (values\
    \ (string->number (substring str 0 (string-index str \"/\")))\n              \
    \        (string->number (substring str (+ (string-index str \"/\") 1) (string-length\
    \ str))))))\n        (if (string=? (substring str 0 1) \"-\")\n            (split-fraction-helper\
    \ (substring str 1 (string-length str)))\n            (split-fraction-helper str)))\n\
    \      (define (simplify-fraction-helper-helper str)\n        (define (simplify-fraction-helper-helper-helper\
    \ str)\n          (define (simplify-fraction-helper-helper-helper-helper str)\n\
    \            (define (simplify-fraction-helper-helper-helper-helper-helper str)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ str)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ str)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ str)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ str)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction s)\n    (define (split-fraction s)\n      (define\
    \ (split-fraction-helper s acc)\n        (if (empty? s)\n            (reverse\
    \ acc)\n            (if (char=? (first s) #\\/)\n                (reverse (cons\
    \ (list->string (reverse acc)) (rest s)))\n                (split-fraction-helper\
    \ (rest s) (cons (first s) acc)))))\n      (split-fraction-helper s '()))\n  \
    \  (define (simplify-fraction-helper s)\n      (define (numerator s)\n       \
    \ (string->number (first s)))\n      (define (denominator s)\n        (string->number\
    \ (second s)))\n      (define (simplify-fraction-helper-helper s)\n        (define\
    \ (numerator s)\n          (string->number (first s)))\n        (define (denominator\
    \ s)\n          (string->number (second s)))\n        (define (simplify-fraction-helper-helper-helper\
    \ s)\n          (define (numerator s)\n            (string->number (first s)))\n\
    \          (define (denominator s)\n            (string->number (second s)))\n\
    \          (define (simplify-fraction-helper-helper-helper-helper s)\n       \
    \     (define (numerator s)\n              (string->number (first s)))\n     \
    \       (define (denominator s)\n              (string->number (second s)))\n\
    \            (define (simplify-fraction-helper-helper-helper-helper-helper s)\n\
    \              (define (numerator s)\n                (string->number (first s)))\n\
    \              (define (denominator s)\n                (string->number (second\
    \ s)))\n              (define (simplify-f", "  (let* ([x-numerator (string->number\
    \ (car (string-split x \"/\")))])\n    (let* ([x-denominator (string->number (cadr\
    \ (string-split x \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ n \"/\")))])\n        (let* ([n-denominator (string->number (cadr (string-split\
    \ n \"/\")))])\n          (let* ([x-numerator (* x-numerator n-numerator)])\n\
    \            (let* ([x-denominator (* x-denominator n-denominator)])\n       \
    \       (let* ([gcd (gcd x-numerator x-denominator)])\n                (let* ([x-numerator\
    \ (/ x-numerator gcd)])\n                  (let* ([x-denominator (/ x-denominator\
    \ gcd)])\n                    (if (= x-denominator 1)\n                      \
    \  #t\n                        #f)))))))))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (let ([g (gcd numerator denominator)])\n      (list (/ numerator g) (/ denominator\
    \ g))))\n  (define (multiply-fractions x y)\n    (let ([x-num (car x)]\n     \
    \     [x-den (cadr x)]\n          [y-num (car y)]\n          [y-den (cadr y)])\n\
    \      (simplify-fraction (* x-num y-num) (lcm x-den y-den))))\n  (define (fraction->number\
    \ x)\n    (/ (car x) (cadr x)))\n  (define (number->fraction x)\n    (list (round\
    \ (* x 100)) 100))\n  (define (is-integer? x)\n    (= (round x) x))\n  (is-integer?\
    \ (fraction->number (multiply-fractions (number->fraction (string->number x))\
    \ (number->fraction (string->number n))))))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (split-fraction\
    \ x)\n        (define (split-fraction-helper x)\n          (if (string-contains\
    \ x #\\/)\n              (cons (substring x 0 (string-index x #\\/))\n       \
    \             (substring x (+ 1 (string-index x #\\/))))\n              (cons\
    \ x \"\")))\n        (split-fraction-helper (string-trim x)))\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (if\
    \ (string-contains x #\\/)\n              (cons (string->number (substring x 0\
    \ (string-index x #\\/)))\n                    (string->number (substring x (+\
    \ 1 (string-index x #\\/)))))\n              (cons (string->number x) 1)))\n \
    \       (simplify-fraction-helper-helper-helper (string-trim x)))\n      (define\
    \ (simplify-fraction-helper-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper-helper\
    \ x)\n          (if (= (cdr x) 0)\n              (cons (car x) 1)\n          \
    \    (cons (car x) (cdr x))))\n        (simplify-fraction-helper-helper-helper-helper\
    \ (simplify-fraction-helper-helper x)))\n      (define (simplify-fraction-helper-helper-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \          (if (= (cdr x) 0)\n              (cons", "  (define (gcd a b)\n   \
    \ (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a\
    \ b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (simplify-fraction-helper-helper\
    \ x)\n        (define (simplify-fraction-helper-helper-helper x)\n          (define\
    \ (simplify-fraction-helper-helper-helper-helper x)\n            (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ x)\n              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (eval-frac str)\n\
    \    (define (split-frac str)\n      (define (split-frac-helper str acc)\n   \
    \     (if (empty? str)\n            (reverse acc)\n            (split-frac-helper\
    \ (rest str) (cons (first str) acc))))\n      (define (to-int str)\n        (if\
    \ (empty? str)\n            0\n            (+ (* 10 (to-int (rest str))) (char->integer\
    \ (first str)))))\n      (let ([lst (split-frac-helper str '())])\n        (list\
    \ (to-int (take lst (sub1 (length lst))))\n              (to-int (drop lst 1)))))\n\
    \    (define (mul-frac a b)\n      (let ([num1 (first a)]\n            [den1 (second\
    \ a)]\n            [num2 (first b)]\n            [den2 (second b)])\n        (list\
    \ (* num1 num2) (* den1 den2))))\n    (define (div-frac a b)\n      (let ([num1\
    \ (first a)]\n            [den1 (second a)]\n            [num2 (first b)]\n  \
    \          [den2 (second b)])\n        (list (* num1 den2) (* den1 num2))))\n\
    \    (define (simplify-frac a)\n      (let ([num (first a)]\n            [den\
    \ (second a)])\n        (list (/ num (gcd num den)) (/ den (gcd num den)))))\n\
    \    (simplify-frac (div-frac (mul-frac (eval-frac x) (eval-frac n))\n       \
    \                      (list (lcm (second (eval-frac x)) (second (eval-frac n)))\n\
    \                                   (lcm (second (eval-frac x)) (second (eval-frac\
    \ n)))))))\n  (if (zero? (second (eval-frac n)))\n      #f\n      (zero? (remainder\
    \ (", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b)\
    \ (gcd a b))))\n  (define (multiply-fractions x y)\n    (define (split-fraction\
    \ s)\n      (define (split-fraction-helper s acc)\n        (if (empty? s)\n  \
    \          (reverse acc)\n            (split-fraction-helper (rest s) (cons (first\
    \ s) acc))))\n      (split-fraction-helper (string->list s) '()))\n    (define\
    \ (multiply-fractions-helper x y)\n      (define (multiply-fractions-helper-helper\
    \ x y)\n        (if (empty? x)\n            '()\n            (cons (string-&gt;number\
    \ (list-&gt;string x))\n                  (multiply-fractions-helper-helper (rest\
    \ x) (rest y)))))\n      (multiply-fractions-helper-helper (split-fraction x)\
    \ (split-fraction y)))\n    (define (simplify-fraction x)\n      (define (simplify-fraction-helper\
    \ x)\n        (if (empty? x)\n            '()\n            (cons (gcd (first x)\
    \ (second x))\n                  (simplify-fraction-helper (rest x)))))\n    \
    \  (simplify-fraction-helper x))\n    (define (simplify-fraction-helper x)\n \
    \     (if (empty? x)\n          '()\n          (cons (/ (first x) (first (simplify-fraction\
    \ x)))\n                (simplify-fraction-helper (rest x)))))\n    (simplify-fraction-helper\
    \ (multiply-fractions-helper x y)))\n  (define (is-whole-number? x)\n    (if (empty?\
    \ x)\n        #t\n        (if (= (first x) (second x))\n            (is-wh", " \
    \ (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (lcm-list lst)\n    (if (null? (cdr lst))\n        (car lst)\n    \
    \    (lcm (car lst) (lcm-list (cdr lst)))))\n  (define (simplify-fraction x)\n\
    \    (let* ([numerator (string->number (car (string-split x \"/\")))])\n     \
    \ (let* ([denominator (string->number (cadr (string-split x \"/\")))])\n     \
    \   (let* ([gcd (gcd numerator denominator)])\n          (string-append (number->string\
    \ (/ numerator gcd)) \"/\" (number->string (/ denominator gcd)))))))\n  (define\
    \ (multiply-fractions x n)\n    (let* ([numerator1 (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator1 (string->number (cadr (string-split\
    \ x \"/\")))])\n        (let* ([numerator2 (string->number (car (string-split\
    \ n \"/\")))])\n          (let* ([denominator2 (string->number (cadr (string-split\
    \ n \"/\")))])\n            (let* ([numerator (* numerator1 numerator2)])\n  \
    \            (let* ([denominator (lcm denominator1 denominator2)])\n         \
    \       (string-append (number->string numerator) \"/\" (number->string denominator))))))))))\n\
    \  (define (is-whole-number? x)\n    (if (= (remainder (string->number (car (string-split\
    \ x \"/\"))) (string->number (cadr (string-split x \"/\")))) 0)\n        #t\n\
    \        #f))\n  (is-whole-number? (simplify-fraction (multiply-fractions x n))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* b (/ a (gcd a b)))))\n\
    \  (define (multiply x n)\n    (let ([x-numer (string->number (car (string-split\
    \ x #\\/)))])\n      (let ([x-denom (string->number (cadr (string-split x #\\\
    /)))])\n        (let ([n-numer (string->number (car (string-split n #\\/)))])\n\
    \          (let ([n-denom (string->number (cadr (string-split n #\\/)))])\n  \
    \          (let ([lcm (lcm x-denom n-denom)])\n              (let ([x-numer (*\
    \ (/ lcm x-denom) x-numer)])\n                (let ([n-numer (* (/ lcm n-denom)\
    \ n-numer)])\n                  (let ([numer (+ x-numer n-numer)])\n         \
    \           (if (= (remainder numer lcm) 0)\n                        #t\n    \
    \                    #f)))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (=\
    \ a 0)\n        0\n        (* (/ a (gcd a b)) b)))\n  (define (simplify-fraction\
    \ n)\n    (define (simplify-fraction-helper n)\n      (let ([numerator (string->number\
    \ (car n))]\n            [denominator (string->number (cadr n))])\n        (values\
    \ (quotient numerator (gcd numerator denominator))\n                (quotient\
    \ denominator (gcd numerator denominator)))))\n    (define (simplify-fraction-helper-2\
    \ n)\n      (let ([numerator (car n)]\n            [denominator (cadr n)])\n \
    \       (values (quotient numerator (gcd numerator denominator))\n           \
    \     (quotient denominator (gcd numerator denominator)))))\n    (define (simplify-fraction-helper-3\
    \ n)\n      (let ([numerator (car n)]\n            [denominator (cadr n)])\n \
    \       (values (quotient numerator (gcd numerator denominator))\n           \
    \     (quotient denominator (gcd numerator denominator)))))\n    (simplify-fraction-helper-3\
    \ (simplify-fraction-helper-2 (simplify-fraction-helper n))))\n  (define (simplify-fraction-2\
    \ n)\n    (define (simplify-fraction-helper n)\n      (let ([numerator (string->number\
    \ (car n))]\n            [denominator (string->number (cadr n))])\n        (values\
    \ numerator denominator)))\n    (define (simplify-fraction-helper-2 n)\n     \
    \ (let ([numerator (car n)]\n            [denominator (cadr n)])\n        (values\
    \ numerator denominator)))\n    (simplify-fraction-helper-2 (simplify-fraction-helper\
    \ n)))\n  (define (", "  (define (gcd a b)\n    (if (= b 0)\n        a\n     \
    \   (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n\
    \        (/ (* a b) (gcd a b))))\n  (define (numerator x)\n    (string->number\
    \ (regexp-match #rx\"^[0-9]+\" x)))\n  (define (denominator x)\n    (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x)))\n  (define (simplify-fraction x)\n    (define\
    \ (gcd a b)\n      (if (= b 0)\n          a\n          (gcd b (remainder a b))))\n\
    \    (define (lcm a b)\n      (if (= a 0)\n          0\n          (/ (* a b) (gcd\
    \ a b))))\n    (define (numerator x)\n      (string->number (regexp-match #rx\"\
    ^[0-9]+\" x)))\n    (define (denominator x)\n      (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" x)))\n    (define (simplify-fraction x)\n      (define (gcd\
    \ a b)\n        (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n\
    \      (define (lcm a b)\n        (if (= a 0)\n            0\n            (/ (*\
    \ a b) (gcd a b))))\n      (define (numerator x)\n        (string->number (regexp-match\
    \ #rx\"^[0-9]+\" x)))\n      (define (denominator x)\n        (string->number\
    \ (regexp-match #rx\"/[0-9]+$\" x)))\n      (define (simplify-fraction x)\n  \
    \      (define (gcd a b)\n          (if (= b 0)\n              a\n           \
    \   (gcd b (remainder a b))))\n        (define (lcm a b)\n          (if (= a 0)\n\
    \              0\n              (/ (* a b)", "  (define (gcd a b)\n    (if (=\
    \ b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n  \
    \  (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (define g (gcd numerator denominator))\n    (define n (/ numerator g))\n\
    \    (define d (/ denominator g))\n    (if (= d 1)\n        (number->string n)\n\
    \        (string-append (number->string n) \"/\" (number->string d))))\n  (define\
    \ (parse-fraction s)\n    (define (parse-fraction-helper s)\n      (if (string-empty?\
    \ s)\n          (values 0 0)\n          (let* ([c (string-ref s 0)]\n        \
    \         [s (substring s 1)])\n            (if (= c #\\/)\n                (values\
    \ 0 (string->number s))\n                (let-values ([(n d) (parse-fraction-helper\
    \ s)])\n                  (values (+ (* n 10) (string->number (string c))) d))))))\n\
    \    (parse-fraction-helper s))\n  (define (multiply-fractions x n)\n    (let-values\
    \ ([(xn xd) (parse-fraction x)]\n                 [(nn nd) (parse-fraction n)])\n\
    \      (simplify-fraction (* xn nn) (lcm xd nd))))\n  (define (is-integer? s)\n\
    \    (string=? (string-append s \".0\") (number->string (string->number s))))\n\
    \  (is-integer? (multiply-fractions x n)))\n", "  (let* ([x-num (string->number\
    \ (regexp-match #rx\"^[0-9]+\" x))]\n         [x-den (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" x))]\n         [n-num (string->number (regexp-match #rx\"^[0-9]+\"\
    \ n))]\n         [n-den (string->number (regexp-match #rx\"/[0-9]+$\" n))]\n \
    \        [num (* x-num n-num)]\n         [den (* x-den n-den)])\n    (if (zero?\
    \ (modulo num den))\n        #t\n        #f)))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (numerator x)\n      (string->number (car (string-split x #\\\
    /))))\n    (define (denominator x)\n      (string->number (cadr (string-split\
    \ x #\\/))))\n    (define (simplify-fraction-helper x)\n      (define (gcd a b)\n\
    \        (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n \
    \     (define (lcm a b)\n        (if (= a 0)\n            0\n            (/ (*\
    \ a b) (gcd a b))))\n      (define (simplify-fraction-helper x)\n        (define\
    \ (numerator x)\n          (string->number (car (string-split x #\\/))))\n   \
    \     (define (denominator x)\n          (string->number (cadr (string-split x\
    \ #\\/))))\n        (define (simplify-fraction-helper x)\n          (define (numerator\
    \ x)\n            (string->number (car (string-split x #\\/))))\n          (define\
    \ (denominator x)\n            (string->number (cadr (string-split x #\\/))))\n\
    \          (define (simplify-fraction-helper x)\n            (define (numerator\
    \ x)\n              (string->number (car (string-split x #\\/))))\n          \
    \  (define (denominator x)\n              (string->number (cadr (string-split\
    \ x #\\/))))\n            (define (simplify-fraction-helper x)\n             \
    \ (define (numerator x)\n                (string->number (car (string-split x\
    \ #\\/))))\n              (define (denominator x)\n                (string->number\
    \ (cadr (string-split x #\\/))))\n              (define (simplify-fraction-helper\
    \ x)\n               ", "  (define (gcd a b)\n    (if (= b 0)\n        a\n   \
    \     (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n      \
    \  0\n        (/ (* a b) (gcd a b))))\n  (define (multiply-fractions x n)\n  \
    \  (define (multiply-fractions-helper x n)\n      (let* ([x-numerator (string->number\
    \ (car (string-split x #\"/\")))]\n             [x-denominator (string->number\
    \ (cadr (string-split x #\"/\")))]\n             [n-numerator (string->number\
    \ (car (string-split n #\"/\")))]\n             [n-denominator (string->number\
    \ (cadr (string-split n #\"/\")))])\n        (list (string-append (number->string\
    \ (* x-numerator n-numerator)) \"/\" (number->string (lcm x-denominator n-denominator)))))\n\
    \      (let* ([x-numerator (string->number (car (string-split x #\"/\")))]\n \
    \            [x-denominator (string->number (cadr (string-split x #\"/\")))]\n\
    \             [n-numerator (string->number (car (string-split n #\"/\")))]\n \
    \            [n-denominator (string->number (cadr (string-split n #\"/\")))])\n\
    \        (list (string-append (number->string (* x-numerator n-numerator)) \"\
    /\" (number->string (lcm x-denominator n-denominator))))))\n  (define (is-whole-number?\
    \ x)\n    (if (string=? (car (string-split x #\"/\")) (cadr (string-split x #\"\
    /\")))\n        #t\n        #f))\n  (is-whole-number? (multiply-fractions-helper\
    \ x n)))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (simplify-fraction numerator denominator)\n  \
    \  (let ([g (gcd numerator denominator)])\n      (list (/ numerator g) (/ denominator\
    \ g))))\n  (define (multiply-fractions x y)\n    (let ([x-num (car x)]\n     \
    \     [x-den (cadr x)]\n          [y-num (car y)]\n          [y-den (cadr y)])\n\
    \      (simplify-fraction (* x-num y-num) (* x-den y-den))))\n  (define (parse-fraction\
    \ str)\n    (let ([parts (string-split str \"/\")])\n      (list (string->number\
    \ (car parts))\n            (string->number (cadr parts)))))\n  (define (is-whole-number?\
    \ num)\n    (= (remainder num 1) 0))\n  (define (fraction->number frac)\n    (let\
    \ ([num (car frac)]\n          [den (cadr frac)])\n      (/ num den)))\n  (is-whole-number?\
    \ (fraction->number (multiply-fractions (parse-fraction x) (parse-fraction n)))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x gcd)\n      (if (= gcd 1)\n    \
    \      x\n          (simplify-fraction-helper (cons (/ (car x) gcd) (/ (cdr x)\
    \ gcd)) (gcd (car x) (cdr x)))))\n    (simplify-fraction-helper x (gcd (car x)\
    \ (cdr x))))\n  (define (multiply-fractions x y)\n    (cons (* (car x) (car y))\
    \ (* (cdr x) (cdr y))))\n  (define (is-whole-number? x)\n    (= (remainder (car\
    \ x) (cdr x)) 0))\n  (define (string->fraction x)\n    (cons (string->number (car\
    \ (string-split x #\\/))) (string->number (cadr (string-split x #\\/)))))\n  (is-whole-number?\
    \ (simplify-fraction (multiply-fractions (string->fraction x) (string->fraction\
    \ n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b\
    \ (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (simplify-fraction n)\n    (define (simplify-helper n)\n      (if (= (remainder\
    \ (car n) (cadr n)) 0)\n          (simplify-helper (cons (/ (car n) (cadr n))\
    \ (cadr n)))\n          n))\n    (simplify-helper n))\n  (define (multiply-fractions\
    \ x y)\n    (simplify-fraction (cons (* (car x) (car y)) (* (cadr x) (cadr y)))))\n\
    \  (define (divide-fractions x y)\n    (simplify-fraction (cons (* (car x) (cadr\
    \ y)) (* (cadr x) (car y)))))\n  (define (is-integer? x)\n    (= (remainder (car\
    \ x) (cadr x)) 0))\n  (is-integer? (divide-fractions (multiply-fractions (string->fraction\
    \ x) (string->fraction n)) (string->fraction n))))\n", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (to-numerator str)\n    (string->number (regexp-match #rx\"^[0-9]+\" str)))\n\
    \  (define (to-denominator str)\n    (string->number (regexp-match #rx\"[0-9]+$\"\
    \ str)))\n  (define (to-fraction str)\n    (values (to-numerator str) (to-denominator\
    \ str)))\n  (define (to-str numerator denominator)\n    (string-append (number->string\
    \ numerator) \"/\" (number->string denominator)))\n  (define (multiply-fractions\
    \ a-numerator a-denominator b-numerator b-denominator)\n    (values (* a-numerator\
    \ b-numerator) (* a-denominator b-denominator)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define gcd (gcd numerator denominator))\n    (values\
    \ (/ numerator gcd) (/ denominator gcd)))\n  (define (is-whole-number numerator\
    \ denominator)\n    (= (remainder numerator denominator) 0))\n  (define (multiply-fractions-and-simplify\
    \ a b)\n    (define (multiply-fractions-and-simplify-helper a-numerator a-denominator\
    \ b-numerator b-denominator)\n      (define (multiply-fractions-and-simplify-helper-helper\
    \ numerator denominator)\n        (define (multiply-fractions-and-simplify-helper-helper-helper\
    \ numerator denominator)\n          (define (multiply-fractions-and-simplify-helper-helper-helper-helper\
    \ numerator denominator)\n            (define (multiply-fractions-and-simplify",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (multiply x n)\n    (let ((x-numerator (string->number (car (string-split\
    \ x #\"/\"))))\n          (x-denominator (string->number (cadr (string-split x\
    \ #\"/\"))))\n          (n-numerator (string->number (car (string-split n #\"\
    /\"))))\n          (n-denominator (string->number (cadr (string-split n #\"/\"\
    )))))\n      (let ((lcm-denominator (lcm x-denominator n-denominator)))\n    \
    \    (let ((x-numerator (* (/ lcm-denominator x-denominator) x-numerator))\n \
    \             (n-numerator (* (/ lcm-denominator n-denominator) n-numerator)))\n\
    \          (let ((result-numerator (+ x-numerator n-numerator)))\n           \
    \ (if (= (remainder result-numerator lcm-denominator) 0)\n                #t\n\
    \                #f))))))\n  (multiply x n))\n", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (let ([g (gcd numerator denominator)])\n      (list (/ numerator g) (/ denominator\
    \ g))))\n  (define (multiply-fractions x y)\n    (let ([x (simplify-fraction (car\
    \ x) (cadr x))]\n          [y (simplify-fraction (car y) (cadr y))])\n      (list\
    \ (* (car x) (car y)) (lcm (cadr x) (cadr y)))))\n  (define (is-whole-number?\
    \ x)\n    (= (remainder (car x) (cadr x)) 0))\n  (is-whole-number? (multiply-fractions\
    \ (string->number/string x) (string->number/string n))))\n", "  (define (gcd a\
    \ b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define\
    \ (simplify-fraction x)\n    (let* ([numerator (string->number (car (string-split\
    \ x \"/\")))])\n      (let* ([denominator (string->number (cadr (string-split\
    \ x \"/\")))])\n        (let* ([gcd (gcd numerator denominator)])\n          (list\
    \ (quotient numerator gcd) (quotient denominator gcd))))))\n  (let* ([x-simplified\
    \ (simplify-fraction x)])\n    (let* ([n-simplified (simplify-fraction n)])\n\
    \      (let* ([lcm (lcm (cadr x-simplified) (cadr n-simplified))])\n        (let*\
    \ ([x-numerator (* (car x-simplified) (quotient lcm (cadr x-simplified))))])\n\
    \          (let* ([n-numerator (* (car n-simplified) (quotient lcm (cadr n-simplified))))])\n\
    \            (= (remainder (* x-numerator n-numerator) lcm) 0))))))\n", "  (let*\
    \ ([x-numerator (string->number (regexp-match #rx\"^[0-9]+\" x))]\n         [x-denominator\
    \ (string->number (regexp-match #rx\"/[0-9]+$\" x))]\n         [n-numerator (string->number\
    \ (regexp-match #rx\"^[0-9]+\" n))]\n         [n-denominator (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" n))]\n         [result-numerator (* x-numerator n-numerator)]\n\
    \         [result-denominator (* x-denominator n-denominator)])\n    (if (integer?\
    \ (/ result-numerator result-denominator))\n        #t\n        #f)))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ numerator denominator)\n    (define gcd (gcd numerator denominator))\n    (define\
    \ numerator (/ numerator gcd))\n    (define denominator (/ denominator gcd))\n\
    \    (list numerator denominator))\n  (define (fraction->number numerator denominator)\n\
    \    (/ numerator denominator))\n  (define (number->fraction number)\n    (define\
    \ (fraction-helper number)\n      (if (integer? number)\n          (list number\
    \ 1)\n          (fraction-helper (round (/ number 1)))))\n    (fraction-helper\
    \ number))\n  (define (multiply-fractions a-numerator a-denominator b-numerator\
    \ b-denominator)\n    (define (simplify-fraction numerator denominator)\n    \
    \  (define gcd (gcd numerator denominator))\n      (define numerator (/ numerator\
    \ gcd))\n      (define denominator (/ denominator gcd))\n      (list numerator\
    \ denominator))\n    (define (multiply-fractions-helper a-numerator a-denominator\
    \ b-numerator b-denominator)\n      (simplify-fraction (* a-numerator b-numerator)\
    \ (* a-denominator b-denominator)))\n    (multiply-fractions-helper a-numerator\
    \ a-denominator b-numerator b-denominator))\n  (define (is-integer? number)\n\
    \    (integer? number))\n  (define (is-integer-fraction? numerator denominator)\n\
    \    (is-integer? (/ numerator denominator)))\n  (define (split-fraction fraction)\n\
    \    (define (split-fraction-helper fraction)\n      (if (string-contains fraction\
    \ \"/\")\n          (let ([numerator (string-take fraction (string-index fraction\
    \ \"/\"))]\n                [den", "  (define (gcd a b)\n    (if (= b 0)\n   \
    \     a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a\
    \ 0)\n        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (define (split-fraction\
    \ x)\n        (define (split-fraction-helper x)\n          (if (string-contains\
    \ x \"/\")\n              (split-fraction-helper (substring x 1))\n          \
    \    (list (substring x 0 (string-index x \"/\"))\n                    (substring\
    \ x (add1 (string-index x \"/\"))))))\n        (split-fraction-helper (string-trim\
    \ x)))\n      (define (simplify-fraction-helper-helper x)\n        (define (gcd\
    \ a b)\n          (if (= b 0)\n              a\n              (gcd b (remainder\
    \ a b))))\n        (define (lcm a b)\n          (if (= a 0)\n              0\n\
    \              (/ (* a b) (gcd a b))))\n        (define (is-whole-number? x)\n\
    \          (if (string-contains x \".\")\n              #f\n              #t))\n\
    \        (define (is-integer? x)\n          (if (string-contains x \".\")\n  \
    \            #f\n              #t))\n        (define (is-fraction? x)\n      \
    \    (if (string-contains x \"/\")\n              #t\n              #f))\n   \
    \     (define (is-whole-number? x)\n          (if (string-contains x \".\")\n\
    \              #f\n              #t))\n        (define (is-integer? x)\n     \
    \     (if (string-contains x \".\")\n              #f\n              #t))\n  \
    \      (define (is-fraction? x)\n          (if (string-contains x \"/\")\n   \
    \           #t\n              #f))\n        (define (is-whole-number? x)\n   \
    \       (if (string-contains x", "  (define (gcd a b)\n    (if (= b 0)\n     \
    \   a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b)\
    \ (gcd a b)))\n  (define (lcm-list lst)\n    (if (null? (cdr lst))\n        (car\
    \ lst)\n        (lcm (car lst) (lcm-list (cdr lst)))))\n  (define (simplify-frac\
    \ x)\n    (define (simplify-frac-helper x)\n      (let ((g (gcd (car x) (cadr\
    \ x))))\n        (if (= g 1)\n            x\n            (simplify-frac-helper\
    \ (list (/ (car x) g) (/ (cadr x) g))))))\n    (simplify-frac-helper x))\n  (define\
    \ (mult-frac x y)\n    (simplify-frac (list (* (car x) (car y)) (* (cadr x) (cadr\
    \ y)))))\n  (define (frac-to-num x)\n    (/ (car x) (cadr x)))\n  (define (num-to-frac\
    \ x)\n    (list (round (* x 100)) 100))\n  (define (frac-to-str x)\n    (string-append\
    \ (number->string (car x)) \"/\" (number->string (cadr x))))\n  (define (str-to-frac\
    \ x)\n    (list (string->number (car x)) (string->number (cadr x))))\n  (define\
    \ (is-whole-num? x)\n    (= (remainder (car x) (cadr x)) 0))\n  (define (is-whole-num-frac?\
    \ x)\n    (is-whole-num? (mult-frac x (list 1 (lcm-list (list (cadr x) (cadr y)))))))\n\
    \  (is-whole-num-frac? (mult-frac (str-to-frac x) (str-to-frac n))))\n", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ str)\n    (define (split-fraction str)\n      (define (split-fraction-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (simplify-fraction-helper str)\n      (define (simplify-fraction-helper-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (simplify-fraction-helper-helper\
    \ (rest str) (cons (string->number (first str)) acc))))\n      (simplify-fraction-helper-helper\
    \ str '()))\n    (define (simplify-fraction-helper-helper-helper str)\n      (define\
    \ (simplify-fraction-helper-helper-helper-helper str acc)\n        (if (empty?\
    \ str)\n            (reverse acc)\n            (simplify-fraction-helper-helper-helper-helper\
    \ (rest str) (cons (string->number (first str)) acc))))\n      (simplify-fraction-helper-helper-helper-helper\
    \ str '()))\n    (define (simplify-fraction-helper-helper-helper-helper-helper\
    \ str)\n      (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ str acc)\n        (if (empty? str)\n            (reverse acc)\n            (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ (rest str) (cons (string->number (first str)) acc))))\n      (simplify-fraction-helper-helper-helper-helper",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x)\n      (if (= (gcd (car x) (cadr\
    \ x)) 1)\n          x\n          (simplify-fraction-helper (list (/ (car x) (gcd\
    \ (car x) (cadr x))) (/ (cadr x) (gcd (car x) (cadr x)))))))\n    (simplify-fraction-helper\
    \ x))\n  (define (multiply-fractions x n)\n    (list (* (car x) (car n)) (* (cadr\
    \ x) (cadr n))))\n  (define (is-integer? x)\n    (= (remainder (car x) (cadr x))\
    \ 0))\n  (is-integer? (simplify-fraction (multiply-fractions (string->fraction\
    \ x) (string->fraction n)))))\n", "  (define (gcd a b)\n    (if (= b 0)\n    \
    \    a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b)\
    \ (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n    (let ([g\
    \ (gcd numerator denominator)])\n      (list (/ numerator g) (/ denominator g))))\n\
    \  (define (multiply-fractions x y)\n    (let ([x-n (car x)]\n          [x-d (cadr\
    \ x)]\n          [y-n (car y)]\n          [y-d (cadr y)])\n      (simplify-fraction\
    \ (* x-n y-n) (lcm x-d y-d))))\n  (define (parse-fraction str)\n    (let ([parts\
    \ (string-split str \"/\")])\n      (list (string->number (car parts))\n     \
    \       (string->number (cadr parts)))))\n  (let ([x (parse-fraction x)]\n   \
    \     [n (parse-fraction n)])\n    (let ([result (multiply-fractions x n)])\n\
    \      (and (= (cadr result) 1)\n           (= (remainder (car result) 1) 0)))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-frac frac)\n    (define (simplify-frac-helper frac)\n   \
    \   (let ([n (string->number (car frac))]\n            [d (string->number (cadr\
    \ frac))])\n        (let ([g (gcd n d)])\n          (if (= g 1)\n            \
    \  frac\n              (simplify-frac-helper (list (number->string (/ n g)) (number->string\
    \ (/ d g))))))))\n    (simplify-frac-helper frac))\n  (define (multiply-frac frac1\
    \ frac2)\n    (let ([n1 (string->number (car frac1))]\n          [d1 (string->number\
    \ (cadr frac1))]\n          [n2 (string->number (car frac2))]\n          [d2 (string->number\
    \ (cadr frac2))])\n      (simplify-frac (list (number->string (* n1 n2)) (number->string\
    \ (* d1 d2))))))\n  (define (is-whole-number? frac)\n    (let ([n (string->number\
    \ (car frac))]\n          [d (string->number (cadr frac))])\n      (= (remainder\
    \ n d) 0)))\n  (is-whole-number? (multiply-frac (simplify-frac x) (simplify-frac\
    \ n))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder\
    \ a b))))\n  (define (lcm a b)\n    (if (= a 0)\n        0\n        (* (/ a (gcd\
    \ a b)) b)))\n  (define (multiply-fractions x y)\n    (define (split-fraction\
    \ str)\n      (define (split-fraction-helper str acc)\n        (if (empty? str)\n\
    \            (reverse acc)\n            (split-fraction-helper (rest str) (cons\
    \ (string->number (string (first str))) acc))))\n      (split-fraction-helper\
    \ (string-split str #\\/) '()))\n    (define (multiply-fractions-helper x y)\n\
    \      (define (multiply-fractions-helper-helper x y)\n        (if (zero? y)\n\
    \            0\n            (+ (multiply-fractions-helper-helper x (sub1 y)) x)))\n\
    \      (multiply-fractions-helper-helper x y))\n    (define (reduce-fraction x\
    \ y)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n          \
    \  (gcd b (remainder a b))))\n      (define (reduce-fraction-helper x y)\n   \
    \     (if (= (gcd x y) 1)\n            (list x y)\n            (reduce-fraction-helper\
    \ (/ x (gcd x y)) (/ y (gcd x y)))))\n      (reduce-fraction-helper x y))\n  \
    \  (define (reduce-fraction-helper x y)\n      (if (= (gcd x y) 1)\n         \
    \ (list x y)\n          (reduce-fraction-helper (/ x (gcd x y)) (/ y (gcd x y)))))\n\
    \    (define (reduce-fraction x y)\n      (reduce-fraction-helper x y))\n    (define\
    \ (multiply-fractions-helper x y)\n      (define (multiply-fractions-helper-hel",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction x)\n    (define (simplify-fraction-helper x)\n \
    \     (define (split-fraction x)\n        (define (split-fraction-helper x)\n\
    \          (if (string-contains x #\\/)\n              (split-fraction-helper\
    \ (string-tail x 1))\n              (values (string->number (substring x 0 (string-index\
    \ x #\\/)))\n                      (string->number (substring x (+ 1 (string-index\
    \ x #\\/)))))))\n        (split-fraction-helper (string-trim x)))\n      (define\
    \ (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (simplify-fraction-helper-helper-helper-helper x)\n  \
    \          (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-hel",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (numerator s)\n  \
    \  (string->number (regexp-match #rx\"^[0-9]+\" s)))\n  (define (denominator s)\n\
    \    (string->number (regexp-match #rx\"/[0-9]+$\" s)))\n  (define (multiply-fractions\
    \ x y)\n    (define (multiply-fraction x y)\n      (string-append (number->string\
    \ (* (numerator x) (numerator y)))\n                     \"/\"\n             \
    \        (number->string (* (denominator x) (denominator y)))))\n    (define (simplify-fraction\
    \ s)\n      (define (gcd a b)\n        (if (= b 0)\n            a\n          \
    \  (gcd b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd\
    \ a b)))\n      (define (numerator s)\n        (string->number (regexp-match #rx\"\
    ^[0-9]+\" s)))\n      (define (denominator s)\n        (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" s)))\n      (define (simplify-fraction s)\n        (define (gcd\
    \ a b)\n          (if (= b 0)\n              a\n              (gcd b (remainder\
    \ a b))))\n        (define (lcm a b)\n          (/ (* a b) (gcd a b)))\n     \
    \   (define (numerator s)\n          (string->number (regexp-match #rx\"^[0-9]+\"\
    \ s)))\n        (define (denominator s)\n          (string->number (regexp-match\
    \ #rx\"/[0-9]+$\" s)))\n        (define (simplify-fraction s)\n          (define\
    \ (gcd a b)\n            (if (= b 0)\n               ", "  (define (gcd a b)\n\
    \    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm\
    \ a b)\n    (/ (* a b) (gcd a b)))\n  (define (fraction->number f)\n    (let ([n\
    \ (string->number (car (string-split f \"/\")))])\n      (let ([d (string->number\
    \ (cadr (string-split f \"/\")))])\n        (/ n d))))\n  (define (number->fraction\
    \ n)\n    (let ([d (denominator n)])\n      (let ([n (numerator n)])\n       \
    \ (string-append (number->string n) \"/\" (number->string d)))))\n  (define (is-integer?\
    \ n)\n    (= (remainder n 1) 0))\n  (let ([x (fraction->number x)])\n    (let\
    \ ([n (fraction->number n)])\n      (let ([l (lcm (denominator x) (denominator\
    \ n))])\n        (let ([x (* x (/ l (denominator x)))])\n          (let ([n (*\
    \ n (/ l (denominator n)))])\n            (let ([xn (* x n)])\n              (is-integer?\
    \ xn))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd\
    \ b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define\
    \ (lcm-list lst)\n    (if (null? (cdr lst))\n        (car lst)\n        (lcm (car\
    \ lst) (lcm-list (cdr lst)))))\n  (define (simplify-fraction x)\n    (let ([numerator\
    \ (string->number (car (string-split x \"/\")))])\n      (let ([denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n        (let ([gcd (gcd numerator denominator)])\n\
    \          (string-append (number->string (/ numerator gcd)) \"/\" (number->string\
    \ (/ denominator gcd)))))))\n  (define (multiply-fractions x n)\n    (let ([numerator\
    \ (string->number (car (string-split x \"/\")))])\n      (let ([denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n        (let ([numerator-n (string->number\
    \ (car (string-split n \"/\")))])\n          (let ([denominator-n (string->number\
    \ (cadr (string-split n \"/\")))])\n            (let ([numerator-result (* numerator\
    \ numerator-n)])\n              (let ([denominator-result (lcm denominator denominator-n)])\n\
    \                (string-append (number->string numerator-result) \"/\" (number->string\
    \ denominator-result)))))))))\n  (define (is-whole-number? x)\n    (let ([numerator\
    \ (string->number (car (string-split x \"/\")))])\n      (let ([denominator (string->number\
    \ (cadr (string-split x \"/\")))])\n        (= (remainder numerator denominator)\
    \ 0))))\n  (is-whole-number? (simplify-fraction (multiply-fractions x n))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (if (= a 0)\n        0\n        (/ (* a b) (gcd a b))))\n\
    \  (define (simplify-fraction x)\n    (define (split-fraction x)\n      (define\
    \ (split-fraction-helper x i)\n        (if (char=? (string-ref x i) #\\/)\n  \
    \          (values (substring x 0 i) (substring x (+ i 1) (string-length x)))\n\
    \            (split-fraction-helper x (+ i 1))))\n      (split-fraction-helper\
    \ x 0))\n    (define (simplify-fraction-helper x)\n      (define (gcd a b)\n \
    \       (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n  \
    \    (define (lcm a b)\n        (if (= a 0)\n            0\n            (/ (*\
    \ a b) (gcd a b))))\n      (define (simplify-fraction-helper-helper x)\n     \
    \   (define (split-fraction x)\n          (define (split-fraction-helper x i)\n\
    \            (if (char=? (string-ref x i) #\\/)\n                (values (substring\
    \ x 0 i) (substring x (+ i 1) (string-length x)))\n                (split-fraction-helper\
    \ x (+ i 1))))\n          (split-fraction-helper x 0))\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (gcd a b)\n            (if (= b 0)\n                a\n\
    \                (gcd b (remainder a b))))\n          (define (lcm a b)\n    \
    \        (if (= a 0)\n                0\n                (/ (* a b) (gcd a b))))\n\
    \          (define (simplify-fraction-helper-helper-helper-helper x)\n       \
    \     (define (split-fraction x)\n              (define (split-f", "  (define\
    \ (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n \
    \ (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (lcm-list lst)\n  \
    \  (if (null? (cdr lst))\n        (car lst)\n        (lcm (car lst) (lcm-list\
    \ (cdr lst)))))\n  (define (parse-fraction str)\n    (define (parse-fraction-helper\
    \ str)\n      (if (string=? (substring str 0 1) \"/\")\n          (list 1 (string->number\
    \ (substring str 1 (string-length str))))\n          (list (string->number (substring\
    \ str 0 (string-index str #\\/)))\n                (string->number (substring\
    \ str (+ (string-index str #\\/) 1) (string-length str))))))\n    (define (simplify-fraction\
    \ n d)\n      (let ((g (gcd n d)))\n        (list (/ n g) (/ d g))))\n    (simplify-fraction\
    \ (car (parse-fraction-helper str)) (cadr (parse-fraction-helper str))))\n  (define\
    \ (multiply-fractions x y)\n    (let ((x-n (car x))\n          (x-d (cadr x))\n\
    \          (y-n (car y))\n          (y-d (cadr y)))\n      (list (* x-n y-n) (*\
    \ x-d y-d))))\n  (define (is-integer? n)\n    (= (remainder n 1) 0))\n  (define\
    \ (fraction-to-string f)\n    (string-append (number->string (car f)) \"/\" (number->string\
    \ (cadr f))))\n  (define (fraction-to-float f)\n    (/ (car f) (cadr f)))\n  (define\
    \ (float-to-fraction f)\n    (define (float-to-fraction-helper f)\n      (if (is-integer?\
    \ f)\n          (list f 1)\n          (float-to", "  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n\
    \    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction numerator denominator)\n\
    \    (let ([g (gcd numerator denominator)])\n      (cons (/ numerator g) (/ denominator\
    \ g))))\n  (define (multiply-fractions x y)\n    (let ([x (simplify-fraction (car\
    \ x) (cdr x))]\n          [y (simplify-fraction (car y) (cdr y))])\n      (cons\
    \ (* (car x) (car y)) (* (cdr x) (cdr y)))))\n  (define (is-integer? x)\n    (=\
    \ (remainder x 1) 0))\n  (define (fraction->number x)\n    (/ (car x) (cdr x)))\n\
    \  (is-integer? (fraction->number (multiply-fractions (simplify-fraction (string->number\
    \ (car (string-split x \"/\"))) (string->number (cadr (string-split x \"/\"))))\
    \ (simplify-fraction (string->number (car (string-split n \"/\"))) (string->number\
    \ (cadr (string-split n \"/\"))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
