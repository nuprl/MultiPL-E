name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (vowels_count_helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) 0]\n      [(or (= (string-ref s i) #\\a)\n           (= (string-ref s i)\
    \ #\\e)\n           (= (string-ref s i) #\\i)\n           (= (string-ref s i)\
    \ #\\o)\n           (= (string-ref s i) #\\u)\n           (and (= (string-ref\
    \ s i) #\\y)\n                (= i (- (string-length s) 1))))\n       (+ 1 (vowels_count_helper\
    \ s (+ i 1)))]\n      [else (vowels_count_helper s (+ i 1))]))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s)\
    \ #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) \"y\") (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? \"y\" (first s)) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is_vowel_y c)\n    (or (char=? c #\\y)\n\
    \        (is_vowel c)))\n  (define (count_vowels s)\n    (if (empty? s)\n    \
    \    0\n        (+ (if (is_vowel (first s)) 1 0)\n           (count_vowels (rest\
    \ s)))))\n  (if (empty? s)\n      0\n      (if (is_vowel_y (last s))\n       \
    \   (+ (count_vowels (butlast s)) 1)\n          (count_vowels s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) \"y\") (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) \"y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(a e i o u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (is_last_y? c)\n    (and (char=? c #\\y)\n         (= (string-length\
    \ s) (add1 (string-index s c)))))\n  (define (count-vowels s)\n    (cond ((empty?\
    \ s) 0)\n          ((is_vowel? (first s)) (add1 (count-vowels (rest s))))\n  \
    \        ((is_last_y? (first s)) (add1 (count-vowels (rest s))))\n          (else\
    \ (count-vowels (rest s)))))\n  (count-vowels s))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) \"y\") (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal? (first\
    \ s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n   \
    \      (and (equal? (first s) 'y)\n              (empty? (rest s))))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n\
    \           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n    \
    \       (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count-helper\
    \ (rest s) (+ n 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count-helper (rest s) (+ n 1))]\n      [else (vowels_count-helper\
    \ (rest s) n)]))\n  (vowels_count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y)\n              (empty? (rest s)))) 1]\n \
    \   [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(a e i o u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) 'y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u)\n         (and (equal? (first s) 'y)\n             \
    \ (empty? (rest s)))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) \"y\") (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond [(empty? s)\
    \ 0]\n        [(or (char=? (first s) #\\a)\n             (char=? (first s) #\\\
    e)\n             (char=? (first s) #\\i)\n             (char=? (first s) #\\o)\n\
    \             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (char=? (first s) #\\y)\n              (empty? (rest s)))\n   \
    \      1]\n        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n\
    \         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y)\n              (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_y c)\n    (char=? c #\\y))\n\
    \  (define (is_last c)\n    (char=? c (string-ref s (- (string-length s) 1))))\n\
    \  (define (count_vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel (car\
    \ s)) (+ 1 (count_vowels (cdr s))))\n          ((is_y (car s)) (if (is_last (car\
    \ s))\n                              (+ 1 (count_vowels (cdr s)))\n          \
    \                    (count_vowels (cdr s))))\n          (else (count_vowels (cdr\
    \ s)))))\n  (count_vowels (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y)\n          \
    \    (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest\
    \ s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_last_vowel? c)\n    (and (char=? c #\\y)\n         (char=? (string-ref s\
    \ (- (string-length s) 1)) #\\y)))\n  (define (vowels_count_helper s i)\n    (if\
    \ (= i (string-length s))\n        0\n        (+ (if (or (is_vowel? (string-ref\
    \ s i))\n                  (is_last_vowel? (string-ref s i)))\n              \
    \ 1\n               0)\n           (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n \
    \        (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal?\
    \ (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y)\n              (empty? (rest s)))) 1]\n \
    \   [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_last_char? c)\n    (char=? c\
    \ (string-ref s (- (string-length s) 1))))\n  (define (is_y? c)\n    (char=? c\
    \ #\\y))\n  (define (is_y_vowel? c)\n    (and (is_y? c) (is_last_char? c)))\n\
    \  (define (count-vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel? (car\
    \ s)) (+ 1 (count-vowels (cdr s))))\n          ((is_y_vowel? (car s)) (+ 1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (count-vowels (string->list\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n  \
    \       (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal?\
    \ (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (let ([vowels '(#\\a #\\e #\\i #\\\
    o #\\u)])\n    (cond\n      [(empty? s) 0]\n      [(member (first s) vowels)\n\
    \       (+ 1 (vowels_count (rest s)))]\n      [else (vowels_count (rest s))])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(a e i o u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count-helper s acc)\n    (cond\n\
    \      [(empty? s) acc]\n      [(char-ci=? (first s) #\\a) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [(char-ci=? (first s) #\\e) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [(char-ci=? (first s) #\\i) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [(char-ci=? (first s) #\\o) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [(char-ci=? (first s) #\\u) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [(char-ci=? (first s) #\\y) (vowels_count-helper\
    \ (rest s) (+ acc 1))]\n      [else (vowels_count-helper (rest s) acc)]))\n  (vowels_count-helper\
    \ s 0))\n", "  (define (vowels_count_helper s i acc)\n    (cond\n      [(= i (string-length\
    \ s)) acc]\n      [(or (char=? (string-ref s i) #\\a)\n           (char=? (string-ref\
    \ s i) #\\e)\n           (char=? (string-ref s i) #\\i)\n           (char=? (string-ref\
    \ s i) #\\o)\n           (char=? (string-ref s i) #\\u)\n           (and (char=?\
    \ (string-ref s i) #\\y)\n                (= i (- (string-length s) 1))))\n  \
    \     (vowels_count_helper s (+ i 1) (+ acc 1))]\n      [else (vowels_count_helper\
    \ s (+ i 1) acc)]))\n  (vowels_count_helper s 0 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n    \
    \     (equal? (first s) 'i)\n         (equal? (first s) 'o)\n         (equal?\
    \ (first s) 'u)\n         (and (equal? (first s) 'y)\n              (empty? (rest\
    \ s)))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) \"y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s i)\n    (cond\n\
    \      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref s i) #\\a)\n\
    \           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref s i)\
    \ #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u)\n           (and (char=? (string-ref s i) #\\y) (= i (- (string-length\
    \ s) 1))))\n       (+ 1 (vowels_count_helper s (+ i 1)))]\n      [else (vowels_count_helper\
    \ s (+ i 1))]))\n  (vowels_count_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n        \
    \ (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(char=? (first s) #\\\
    a) (vowels_count_helper (rest s) (+ count 1))]\n      [(char=? (first s) #\\e)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [(char=? (first s) #\\i)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [(char=? (first s) #\\o)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [(char=? (first s) #\\u)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [(char=? (first s) #\\y)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [else (vowels_count_helper\
    \ (rest s) count)]))\n  (vowels_count_helper s 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n        \
    \ (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) \"y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_last_char? c)\n    (and (not (string-empty? (string-drop s 1)))\n      \
    \   (string=? (string-drop s 1) \"\")))\n  (define (is_last_vowel? c)\n    (and\
    \ (is_vowel? c)\n         (is_last_char? c)))\n  (define (is_vowel_or_last_vowel?\
    \ c)\n    (or (is_vowel? c)\n        (is_last_vowel? c)))\n  (define (count_vowels\
    \ s)\n    (cond\n      [(string-empty? s) 0]\n      [(is_vowel_or_last_vowel?\
    \ (string-ref s 0))\n       (+ 1 (count_vowels (string-drop s 1)))]\n      [else\
    \ (count_vowels (string-drop s 1))]))\n  (count_vowels s))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) \"y\") (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is_last_char? i)\n    (= i (- (string-length\
    \ s) 1)))\n  (define (is_vowel_at_end? c)\n    (and (char=? c #\\y)\n        \
    \ (is_last_char? i)))\n  (define (count-vowels i)\n    (cond ((is_vowel? (string-ref\
    \ s i))\n           (if (is_vowel_at_end? (string-ref s i))\n               (+\
    \ 1 (count-vowels (+ i 1)))\n               (+ 2 (count-vowels (+ i 1)))))\n \
    \         ((&gt; i (- (string-length s) 1))\n           0)\n          (else (count-vowels\
    \ (+ i 1)))))\n  (count-vowels 0))\n", "  (define (vowels_count-helper s i)\n\
    \    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref s\
    \ i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (+ 1 (vowels_count-helper\
    \ s (+ i 1)))\n            (vowels_count-helper s (+ i 1)))))\n  (vowels_count-helper\
    \ s 0))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_last_y c)\n    (and (char=? c #\\y)\n         (null?\
    \ (cdr s))))\n  (define (is_vowel_or_last_y c)\n    (or (is_vowel c)\n       \
    \ (is_last_y c)))\n  (length (filter is_vowel_or_last_y s)))\n", "  (cond [(empty?\
    \ s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=? (first s)\
    \ #\\e)\n             (char=? (first s) #\\i)\n             (char=? (first s)\
    \ #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest\
    \ s)))]\n        [(and (char=? (first s) #\\y)\n              (empty? (rest s)))\n\
    \         1]\n        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is_y c)\n    (equal? c #\\y))\n  (define (is_vowel_or_y\
    \ c)\n    (or (is_vowel c)\n        (is_y c)))\n  (define (is_last_char c)\n \
    \   (equal? c (string-ref s (- (string-length s) 1))))\n  (define (count-vowels\
    \ s)\n    (cond ((string-empty? s) 0)\n          ((is_vowel_or_y (string-ref s\
    \ 0))\n           (+ 1 (count-vowels (substring s 1))))\n          (else (count-vowels\
    \ (substring s 1)))))\n  (cond ((string-empty? s) 0)\n        ((is_y (string-ref\
    \ s (- (string-length s) 1)))\n         (+ (count-vowels s) 1))\n        (else\
    \ (count-vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s)\
    \ #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y)\n          \
    \    (empty? (rest s)))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (vowels_count_helper s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(or (char=? (string-ref s i) #\\a)\n           (char=? (string-ref s i)\
    \ #\\e)\n           (char=? (string-ref s i) #\\i)\n           (char=? (string-ref\
    \ s i) #\\o)\n           (char=? (string-ref s i) #\\u)\n           (and (char=?\
    \ (string-ref s i) #\\y)\n                (= i (- (string-length s) 1))))\n  \
    \     (vowels_count_helper s (+ i 1) (+ acc 1))]\n      [else (vowels_count_helper\
    \ s (+ i 1) acc)]))\n  (vowels_count_helper s 0 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_last_char c)\n    (char=? c (string-ref s (- (string-length\
    \ s) 1))))\n  (define (is_y c)\n    (char=? c #\\y))\n  (define (is_y_vowel c)\n\
    \    (and (is_y c) (is_last_char c)))\n  (define (is_vowel_or_y_vowel c)\n   \
    \ (or (is_vowel c) (is_y_vowel c)))\n  (define (count_vowels s)\n    (if (string-empty?\
    \ s)\n        0\n        (+ (if (is_vowel_or_y_vowel (string-ref s 0)) 1 0)\n\
    \           (count_vowels (substring s 1)))))\n  (count_vowels s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=?\
    \ (first s) #\\y)\n     (if (empty? (rest s))\n         1\n         (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (vowels_count_helper\
    \ (rest s) (+ n 1))]\n      [(char=? (first s) #\\e) (vowels_count_helper (rest\
    \ s) (+ n 1))]\n      [(char=? (first s) #\\i) (vowels_count_helper (rest s) (+\
    \ n 1))]\n      [(char=? (first s) #\\o) (vowels_count_helper (rest s) (+ n 1))]\n\
    \      [(char=? (first s) #\\u) (vowels_count_helper (rest s) (+ n 1))]\n    \
    \  [(char=? (first s) #\\y) (vowels_count_helper (rest s) (+ n 1))]\n      [else\
    \ (vowels_count_helper (rest s) n)]))\n  (vowels_count_helper s 0))\n", "  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_char?\
    \ c)\n    (char=? c (string-ref s (- (string-length s) 1))))\n  (define (is_vowel_or_last_char?\
    \ c)\n    (or (is_vowel? c)\n        (and (char=? c #\\y)\n             (is_last_char?\
    \ c))))\n  (define (count-vowels s)\n    (if (string-empty? s)\n        0\n  \
    \      (if (is_vowel_or_last_char? (string-ref s 0))\n            (+ 1 (count-vowels\
    \ (substring s 1)))\n            (count-vowels (substring s 1)))))\n  (count-vowels\
    \ s))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n    \
    \         (char=? (first s) #\\e)\n             (char=? (first s) #\\i)\n    \
    \         (char=? (first s) #\\o)\n             (char=? (first s) #\\u))\n   \
    \      (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first s) #\\y)\n\
    \              (empty? (rest s)))\n         1]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y)\n              (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_vowel_at_end? c)\n    (and (is_vowel?\
    \ c)\n         (equal? c (string-ref s (- (string-length s) 1)))))\n  (define\
    \ (count_vowels i)\n    (if (equal? i (string-length s))\n        0\n        (+\
    \ (if (or (is_vowel? (string-ref s i))\n                  (is_vowel_at_end? (string-ref\
    \ s i)))\n               1\n               0)\n           (count_vowels (+ i 1)))))\n\
    \  (count_vowels 0))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first\
    \ s) #\\a)\n             (char=? (first s) #\\e)\n             (char=? (first\
    \ s) #\\i)\n             (char=? (first s) #\\o)\n             (char=? (first\
    \ s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first\
    \ s) #\\y)\n              (empty? (rest s)))\n         1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond [(empty? s) 0]\n \
    \       [(member (first s) '(a e i o u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (if (empty? (rest s))\n                     \
    \             1\n                                  (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s count)\n\
    \    (cond\n      [(empty? s) count]\n      [(or (char=? (first s) #\\a)\n   \
    \        (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n       \
    \    (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count_helper\
    \ (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\y) (empty? (rest s)))\n\
    \       (vowels_count_helper (rest s) (+ count 1))]\n      [else (vowels_count_helper\
    \ (rest s) count)]))\n  (vowels_count_helper s 0))\n", "  (cond [(empty? s) 0]\n\
    \        [(or (char=? (first s) #\\a)\n             (char=? (first s) #\\e)\n\
    \             (char=? (first s) #\\i)\n             (char=? (first s) #\\o)\n\
    \             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (char=? (first s) #\\y)\n              (empty? (rest s)))\n   \
    \      1]\n        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (length (filter (lambda (c) (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))) s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count_vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel_y (first s)) (+ 1 (count_vowels\
    \ (rest s)))]\n      [else (count_vowels (rest s))]))\n  (cond\n    [(empty? s)\
    \ 0]\n    [(is_vowel (last s)) (+ 1 (count_vowels (butlast s)))]\n    [else (count_vowels\
    \ (butlast s))]))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first s)\
    \ #\\a)\n             (char=? (first s) #\\e)\n             (char=? (first s)\
    \ #\\i)\n             (char=? (first s) #\\o)\n             (char=? (first s)\
    \ #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first\
    \ s) #\\y)\n              (empty? (rest s)))\n         1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is_last_char c)\n    (equal? (string-length s) (add1 (string-index\
    \ c s))))\n  (define (is_y c)\n    (and (equal? c #\\y) (is_last_char c)))\n \
    \ (define (count_vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel (car\
    \ s)) (add1 (count_vowels (cdr s))))\n          ((is_y (car s)) (add1 (count_vowels\
    \ (cdr s))))\n          (else (count_vowels (cdr s)))))\n  (count_vowels (string->list\
    \ s)))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is_last_y s)\n    (and (string=? (substring s (- (string-length s)\
    \ 1)) \"y\")\n         (not (string=? (substring s (- (string-length s) 2)) \"\
    ay\"))))\n  (define (is_vowel_or_last_y c s)\n    (or (is_vowel c)\n        (is_last_y\
    \ s)))\n  (define (vowels_count_iter s i)\n    (if (= i (string-length s))\n \
    \       0\n        (+ (if (is_vowel_or_last_y (string-ref s i) s)\n          \
    \     1\n               0)\n           (vowels_count_iter s (+ i 1)))))\n  (vowels_count_iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1\
    \ (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_vowel_y c)\n    (or (is_vowel\
    \ c)\n        (and (equal? c #\\y)\n             (equal? (substring s (add1 (string-length\
    \ s)) (string-length s)) \"\"))))\n  (define (count_vowels s)\n    (cond ((equal?\
    \ (string-length s) 0) 0)\n          ((is_vowel_y (string-ref s 0)) (add1 (count_vowels\
    \ (substring s 1 (string-length s)))))\n          (else (count_vowels (substring\
    \ s 1 (string-length s))))))\n  (count_vowels s))\n", "  (cond [(empty? s) 0]\n\
    \        [(member (first s) '(a e i o u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest\
    \ s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(a e i o u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))", " \
    \ (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=?\
    \ (first s) #\\e)\n             (char=? (first s) #\\i)\n             (char=?\
    \ (first s) #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [(and (char=? (first s) #\\y)\n              (empty? (rest\
    \ s)))\n         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_last_y? s)\n    (and (equal?\
    \ (string-length s) 1)\n         (equal? (string-ref s 0) #\\y)))\n  (define (is_vowel?\
    \ c)\n    (or (is_vowel c)\n        (and (is_last_y? s)\n             (equal?\
    \ c #\\y))))\n  (define (count_vowels s)\n    (cond ((string-empty? s) 0)\n  \
    \        ((is_vowel? (string-ref s 0))\n           (+ 1 (count_vowels (substring\
    \ s 1))))\n          (else (count_vowels (substring s 1)))))\n  (count_vowels\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n   \
    \      (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_last_y c)\n    (and (equal?\
    \ c #\\y)\n         (equal? (string-length s) (add1 (string-index s c)))))\n \
    \ (define (count-vowels s)\n    (if (string-empty? s)\n        0\n        (if\
    \ (or (is_vowel (string-ref s 0))\n                (is_last_y (string-ref s 0)))\n\
    \            (add1 (count-vowels (substring s 1)))\n            (count-vowels\
    \ (substring s 1)))))\n  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y)\n              (empty? (rest s)))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond [(empty? s) 0]\n        [(or (equal? (first s) #\\a)\n \
    \            (equal? (first s) #\\e)\n             (equal? (first s) #\\i)\n \
    \            (equal? (first s) #\\o)\n             (equal? (first s) #\\u))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(and (equal? (first s) #\\\
    y)\n              (empty? (rest s)))\n         1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count_vowels\
    \ s)\n    (if (string-empty? s)\n        0\n        (+ (if (is_vowel (string-ref\
    \ s 0)) 1 0)\n           (count_vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is_vowel_y (string-ref s (- (string-length s) 1)))\n\
    \          (count_vowels s)\n          (count_vowels (substring s 0 (- (string-length\
    \ s) 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n\
    \         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\\
    a)\n         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n     \
    \    (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) \"y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) '(a e i o u))\n         (+ 1\
    \ (vowels_count (rest s)))]\n        [(and (equal? (first s) 'y) (empty? (rest\
    \ s))) 1]\n        [else (vowels_count (rest s))]))\n", "  (define (vowels-count-iter\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(char-ci=? (first s) #\\\
    a) (vowels-count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    e) (vowels-count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    i) (vowels-count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    o) (vowels-count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    u) (vowels-count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    y) (vowels-count-iter (rest s) (+ count 1))]\n      [else (vowels-count-iter (rest\
    \ s) count)]))\n  (vowels-count-iter s 0))\n", "  (let loop ([s s] [count 0])\n\
    \    (cond [(empty? s) count]\n          [(or (char=? (first s) #\\a)\n      \
    \         (char=? (first s) #\\e)\n               (char=? (first s) #\\i)\n  \
    \             (char=? (first s) #\\o)\n               (char=? (first s) #\\u))\n\
    \           (loop (rest s) (+ count 1))]\n          [(and (char=? (first s) #\\\
    y) (empty? (rest s)))\n           (loop (rest s) (+ count 1))]\n          [else\
    \ (loop (rest s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest\
    \ s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) '(a e i o u))\n         (+ 1\
    \ (vowels_count (rest s)))]\n        [(and (equal? (first s) 'y) (empty? (rest\
    \ s))) 1]\n        [else (vowels_count (rest s))]))\n", "  (define (is_vowel?\
    \ c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\\
    i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_last_char?\
    \ c)\n    (equal? (substring s (- (string-length s) 1)) c))\n  (define (is_y_vowel?\
    \ c)\n    (and (equal? c #\\y)\n         (is_last_char? c)))\n  (define (count_vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((or (is_vowel? (car s))\n          \
    \     (is_y_vowel? (car s)))\n           (+ 1 (count_vowels (cdr s))))\n     \
    \     (else (count_vowels (cdr s)))))\n  (count_vowels (string->list s)))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (if (empty? s)\n       \
    \ 0\n        (if (member (first s) vowels)\n            (+ 1 (vowels_count (rest\
    \ s)))\n            (vowels_count (rest s))))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n       \
    \  (equal? (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first\
    \ s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(equal? (first s) 'a)\
    \ (vowels_count_helper (rest s) (+ count 1))]\n      [(equal? (first s) 'e) (vowels_count_helper\
    \ (rest s) (+ count 1))]\n      [(equal? (first s) 'i) (vowels_count_helper (rest\
    \ s) (+ count 1))]\n      [(equal? (first s) 'o) (vowels_count_helper (rest s)\
    \ (+ count 1))]\n      [(equal? (first s) 'u) (vowels_count_helper (rest s) (+\
    \ count 1))]\n      [(equal? (first s) 'y) (vowels_count_helper (rest s) (+ count\
    \ 1))]\n      [else (vowels_count_helper (rest s) count)]))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) \"y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u)\n         (and (equal? (first s) 'y)\n          \
    \    (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count-iter s i)\n    (cond\n      [(= i\
    \ (string-length s)) 0]\n      [(or (char=? (string-ref s i) #\\a)\n         \
    \  (char=? (string-ref s i) #\\e)\n           (char=? (string-ref s i) #\\i)\n\
    \           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref s i)\
    \ #\\u)\n           (and (char=? (string-ref s i) #\\y)\n                (= i\
    \ (- (string-length s) 1))))\n       (+ 1 (vowels_count-iter s (+ i 1)))]\n  \
    \    [else (vowels_count-iter s (+ i 1))]))\n  (vowels_count-iter s 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\\
    u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n\
    \         (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n        \
    \ (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_helper s acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\\
    e)\n           (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n \
    \          (char=? (first s) #\\u))\n       (vowels_count_helper (rest s) (+ acc\
    \ 1))]\n      [(and (char=? (first s) #\\y)\n            (empty? (rest s)))\n\
    \       (vowels_count_helper (rest s) (+ acc 1))]\n      [else (vowels_count_helper\
    \ (rest s) acc)]))\n  (vowels_count_helper s 0))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(string=? s\
    \ \"\") 0]\n    [(string-contains \"aeiouy\" (string-ref s (- (string-length s)\
    \ 1)))\n     (+ 1 (vowels_count (substring s 0 (- (string-length s) 1))))]\n \
    \   [else (vowels_count (substring s 0 (- (string-length s) 1)))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (is_y c)\n    (member\
    \ c '(#\\y)))\n  (define (is_vowel_or_y c)\n    (or (is_vowel c) (is_y c)))\n\
    \  (define (is_last_char c)\n    (equal? (substring s (- (string-length s) 1))\
    \ (string c)))\n  (define (is_vowel_or_y_last_char c)\n    (and (is_y c) (is_last_char\
    \ c)))\n  (define (is_vowel_or_y_not_last_char c)\n    (and (is_vowel_or_y c)\
    \ (not (is_last_char c))))\n  (define (is_vowel_or_y_last_char_or_not_last_char\
    \ c)\n    (or (is_vowel_or_y_last_char c) (is_vowel_or_y_not_last_char c)))\n\
    \  (length (filter is_vowel_or_y_last_char_or_not_last_char (string->list s))))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count_vowels\
    \ s)\n    (if (string-empty? s)\n        0\n        (+ (if (is_vowel (string-ref\
    \ s 0)) 1 0)\n           (count_vowels (substring s 1)))))\n  (define (count_vowels_y\
    \ s)\n    (if (string-empty? s)\n        0\n        (+ (if (is_vowel_y (string-ref\
    \ s 0)) 1 0)\n           (count_vowels_y (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (char=? (string-ref s (sub1 (string-length s))) #\\y)\n\
    \          (count_vowels_y s)\n          (count_vowels s))))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest s))))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) \"y\") (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal?\
    \ (first s) 'a)\n         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n\
    \         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n         (and\
    \ (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (if (empty? (rest s))\n                                  (add1\
    \ (vowels_count (rest s)))\n                                  (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s)\
    \ #\\y)\n     (if (empty? (rest s))\n         1\n         (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n        \
    \ (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s)\
    \ #\\y)\n     (if (empty? (rest s))\n         1\n         (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (length (regexp-match #rx\"[aeiouy]*y?$\" s)))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_y\
    \ c)\n    (char=? c #\\y))\n  (define (is_vowel_or_y c)\n    (or (is_vowel c)\n\
    \        (is_y c)))\n  (define (is_last_char_y s)\n    (is_y (string-ref s (-\
    \ (string-length s) 1))))\n  (define (is_vowel_or_y_at_end s)\n    (and (is_vowel_or_y\
    \ (string-ref s (- (string-length s) 1)))\n         (not (is_vowel (string-ref\
    \ s (- (string-length s) 1))))))\n  (define (vowels_count_helper s)\n    (cond\
    \ ((string=? s \"\") 0)\n          ((is_vowel_or_y (string-ref s 0))\n       \
    \    (+ 1 (vowels_count_helper (substring s 1))))\n          (else (vowels_count_helper\
    \ (substring s 1)))))\n  (cond ((is_last_char_y s)\n         (+ (vowels_count_helper\
    \ (substring s 0 (- (string-length s) 1)))\n            (is_vowel_or_y_at_end\
    \ s)))\n        (else (vowels_count_helper s))))\n", "  (cond [(empty? s) 0]\n\
    \        [(or (equal? (first s) 'a)\n             (equal? (first s) 'e)\n    \
    \         (equal? (first s) 'i)\n             (equal? (first s) 'o)\n        \
    \     (equal? (first s) 'u))\n         (+ 1 (vowels_count (rest s)))]\n      \
    \  [(and (equal? (first s) 'y)\n              (empty? (rest s)))\n         1]\n\
    \        [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end? c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels\
    \ s)\n    (if (string-empty? s)\n        0\n        (if (is-vowel? (string-ref\
    \ s 0))\n            (+ 1 (count-vowels (substring s 1)))\n            (count-vowels\
    \ (substring s 1)))))\n  (if (string-empty? s)\n      0\n      (if (is-vowel-at-end?\
    \ (string-ref s (- (string-length s) 1)))\n          (+ 1 (count-vowels (substring\
    \ s 0 (- (string-length s) 1))))\n          (count-vowels s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(a e\
    \ i o u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) 'y)\
    \ (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest s))))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n\
    \         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u)\n         (and (equal? (first\
    \ s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n       \
    \ (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal?\
    \ c #\\u)))\n  (define (is_y? c)\n    (equal? c #\\y))\n  (define (is_last_y?\
    \ s)\n    (and (is_y? (string-ref s (- (string-length s) 1)))\n         (not (is_y?\
    \ (string-ref s (- (string-length s) 2))))))\n  (define (count-vowels s)\n   \
    \ (cond ((string-empty? s) 0)\n          ((is_vowel? (string-ref s 0)) (+ 1 (count-vowels\
    \ (substring s 1))))\n          ((is_y? (string-ref s 0)) (count-vowels (substring\
    \ s 1)))\n          (else (count-vowels (substring s 1)))))\n  (if (is_last_y?\
    \ s)\n      (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n   \
    \   (count-vowels s)))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s)\
    \ '(a e i o u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) 'y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) 'a) (+ 1 (vowels_count (rest s)))]\n\
    \    [(equal? (first s) 'e) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first\
    \ s) 'i) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) 'u) (+ 1 (vowels_count (rest s)))]\n   \
    \ [(equal? (first s) 'y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_iter s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char-ci=? (first s) #\\a) (vowels_count_iter (rest s) (+ n 1))]\n\
    \      [(char-ci=? (first s) #\\e) (vowels_count_iter (rest s) (+ n 1))]\n   \
    \   [(char-ci=? (first s) #\\i) (vowels_count_iter (rest s) (+ n 1))]\n      [(char-ci=?\
    \ (first s) #\\o) (vowels_count_iter (rest s) (+ n 1))]\n      [(char-ci=? (first\
    \ s) #\\u) (vowels_count_iter (rest s) (+ n 1))]\n      [(char-ci=? (first s)\
    \ #\\y) (vowels_count_iter (rest s) (+ n 1))]\n      [else (vowels_count_iter\
    \ (rest s) n)]))\n  (vowels_count_iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal?\
    \ (first s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u)\n\
    \         (and (equal? (first s) 'y) (empty? (rest s))))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n\
    \           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n    \
    \       (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count-iter\
    \ (rest s) (+ n 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count-iter (rest s) (+ n 1))]\n      [else (vowels_count-iter\
    \ (rest s) n)]))\n  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) \"\
    y\") (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n    \
    \     (equal? (first s) 'i)\n         (equal? (first s) 'o)\n         (equal?\
    \ (first s) 'u)\n         (and (equal? (first s) 'y) (empty? (rest s))))\n   \
    \  (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_at_end c)\n    (and (is_vowel\
    \ c)\n         (or (null? (cdr s))\n             (not (is_vowel (car (cdr s)))))))\n\
    \  (define (count_vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel_at_end\
    \ (car s)) 1)\n          ((is_vowel (car s)) 1)\n          (else 0)))\n  (count_vowels\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n   \
    \      (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n          \
    \ [is-vowel (lambda (c) (member c vowels))]\n           [is-vowel-at-end (lambda\
    \ (c) (and (is-vowel c) (= (string-length s) (add1 (string-index c s)))))])\n\
    \    (length (filter (lambda (c) (or (is-vowel c) (is-vowel-at-end c))) (string->list\
    \ s)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
