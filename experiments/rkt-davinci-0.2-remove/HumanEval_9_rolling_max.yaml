name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n(define (rolling_max\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n   \
    \     (cons max-so-far (iter (cdr numbers) (max max-so-far (car numbers))))))\n\
    \  (iter numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (> (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n  \
    \         (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max)\n    (if (null? numbers)\n        '()\n\
    \        (cons max (rolling_max_iter (cdr numbers) (max max (car numbers))))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_helper\
    \ numbers max)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max) (cons (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n\
    \      [else (cons max (rolling_max_helper (rest numbers) max))]))\n  (rolling_max_helper\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max)\n  \
    \  (if (null? numbers)\n        '()\n        (cons max (rolling_max_iter (cdr\
    \ numbers) (max max (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (cond [(empty? numbers)\
    \ (reverse acc)]\n          [else (loop (rest numbers)\n                     \
    \ (cons (max (first numbers) (or (first acc) 0)) acc))])))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far 0]\n             [result '()])\n    (cond\n\
    \      [(empty? numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n\
    \       (loop (rest numbers)\n             (first numbers)\n             (cons\
    \ (first numbers) result))]\n      [else\n       (loop (rest numbers)\n      \
    \       max-so-far\n             (cons max-so-far result))])))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max_iter (cdr numbers)\n                          (cons\
    \ (if (&gt; (car numbers) (car maxes))\n                                    (car\
    \ numbers)\n                                    (car maxes))\n               \
    \                 maxes))))\n  (rolling_max_iter numbers (list (car numbers))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far 0]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [else (let ([max-so-far\
    \ (max (first numbers) max-so-far)])\n                  (loop (rest numbers) max-so-far\
    \ (cons max-so-far result)))])))\n", "  (define (rolling_max_iter numbers max)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max) (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\
    \ (cons max (rolling_max_iter (rest numbers) max))]))\n  (rolling_max_iter numbers\
    \ (first numbers)))\n", "  (define (rolling_max_iter numbers max)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max) (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter\
    \ (rest numbers) max))]))\n  (rolling_max_iter numbers (first numbers)))\n", " \
    \ (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max_iter (cdr numbers)\n                          (cons\
    \ (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter (cdr numbers)\
    \ (list (car numbers))))\n", "  (let loop ([numbers numbers]\n             [acc\
    \ '()])\n    (cond [(empty? numbers) (reverse acc)]\n          [else (loop (rest\
    \ numbers)\n                      (cons (apply max (cons (first numbers) acc))\
    \ acc))])))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max_so_far)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max_so_far)\n\
    \           (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max_so_far (rolling_max_iter (cdr numbers) max_so_far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (if\
    \ (&gt; (car numbers) max-so-far)\n                  (car numbers)\n         \
    \         max-so-far)\n              (rolling_max_iter (cdr numbers)\n       \
    \                         (if (&gt; (car numbers) max-so-far)\n              \
    \                      (car numbers)\n                                    max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (if\
    \ (&gt; (car numbers) max-so-far)\n                  (car numbers)\n         \
    \         max-so-far)\n              (rolling_max_helper (cdr numbers) (if (&gt;\
    \ (car numbers) max-so-far)\n                                                \
    \    (car numbers)\n                                                    max-so-far)))))\n\
    \  (rolling_max_helper numbers (car numbers)))\n", "  (define (rolling_max_helper\
    \ numbers max_so_far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max_so_far)\n       (cons (first numbers) (rolling_max_helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max_so_far (rolling_max_helper\
    \ (rest numbers) max_so_far))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (letrec ([max-so-far\
    \ (first numbers)]\n           [max-so-far-list (list max-so-far)]\n         \
    \  [max-so-far-list-so-far max-so-far-list]\n           [rolling-max (lambda (numbers)\n\
    \                          (if (null? numbers)\n                             \
    \ max-so-far-list-so-far\n                              (let ([current-number\
    \ (first numbers)])\n                                (if (&gt; current-number\
    \ max-so-far)\n                                    (begin\n                  \
    \                    (set! max-so-far current-number)\n                      \
    \                (set! max-so-far-list-so-far (append max-so-far-list-so-far (list\
    \ max-so-far)))\n                                      (rolling-max (rest numbers)))\n\
    \                                    (begin\n                                \
    \      (set! max-so-far-list-so-far (append max-so-far-list-so-far (list max-so-far)))\n\
    \                                      (rolling-max (rest numbers)))))))]))\n\
    \    (rolling-max numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (let ([next-max (if (&gt; (car\
    \ numbers) max-so-far)\n                            (car numbers)\n          \
    \                  max-so-far)])\n          (cons next-max (rolling_max_iter (cdr\
    \ numbers) next-max)))))\n  (rolling_max_iter numbers -1))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [accumulator\
    \ (list max-so-far)])\n    (if (null? numbers)\n        accumulator\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ accumulator)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (cdr numbers))\n        result\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ result)))))\n", "  (define (rolling_max_iter numbers max_so_far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max_so_far)\n     \
    \  (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max_so_far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max_so_far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far -inf.0])\n    (if (null? numbers)\n        '()\n        (cons max-so-far\n\
    \              (loop (cdr numbers)\n                    (max max-so-far (car numbers)))))))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (if (null? numbers)\n\
    \        (reverse acc)\n        (loop (cdr numbers)\n              (cons (apply\
    \ max (cons (car numbers) acc)) acc)))))\n", "  (define (rolling_max_iter numbers\
    \ max)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max)\
    \ (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else (cons max (rolling_max_iter (rest numbers) max))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (car numbers)]\n             [result (list max-so-far)])\n    (if\
    \ (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n       \
    \       (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (let ([n (car numbers)])\n          (rolling_max_iter (cdr numbers)\
    \ (cons (if (null? maxes) n (max n (car maxes))) maxes)))))\n  (rolling_max_iter\
    \ numbers '()))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter (cdr\
    \ numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers (car\
    \ numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null?\
    \ numbers)\n        '()\n        (cons max-so-far (rolling_max_iter (cdr numbers)\
    \ (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max) (cons (first numbers) (rolling_max_iter (rest\
    \ numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter (rest numbers)\
    \ max))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (if\
    \ (&gt; (car numbers) max-so-far)\n                  (car numbers)\n         \
    \         max-so-far)\n              (rolling_max_helper (cdr numbers) (if (&gt;\
    \ (car numbers) max-so-far)\n                                                \
    \    (car numbers)\n                                                    max-so-far)))))\n\
    \  (rolling_max_helper numbers -1))\n", "  (define (rolling_max_iter numbers max_so_far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max_so_far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far -1]\n             [acc '()])\n    (cond [(empty? numbers)\
    \ (reverse acc)]\n          [(> (first numbers) max-so-far)\n           (loop\
    \ (rest numbers) (first numbers) (cons (first numbers) acc))]\n          [else\
    \ (loop (rest numbers) max-so-far (cons max-so-far acc))])))\n", "  (define (rolling_max_iter\
    \ numbers max)\n    (if (null? numbers)\n        '()\n        (cons max (rolling_max_iter\
    \ (cdr numbers) (max max (car numbers))))))\n  (rolling_max_iter numbers (car\
    \ numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null?\
    \ numbers)\n        '()\n        (cons max-so-far (rolling_max_iter (cdr numbers)\
    \ (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n \
    \       (let ([n (car numbers)])\n          (rolling_max_iter (cdr numbers) (cons\
    \ (if (null? maxes) n (max n (car maxes))) maxes)))))\n  (rolling_max_iter numbers\
    \ '()))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [(empty?\
    \ maxes) (rolling_max_iter (rest numbers) (list (first numbers)))]\n      [else\
    \ (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter numbers '()))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far 0]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [else\n    \
    \       (let ([current (first numbers)])\n             (loop (rest numbers)\n\
    \                   (if (&gt; current max-so-far) current max-so-far)\n      \
    \             (cons max-so-far result)))])))\n", "  (if (null? numbers)\n    \
    \  '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max)\n    (if (null? numbers)\n        '()\n\
    \        (cons max (rolling_max_iter (cdr numbers) (max max (car numbers))))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_helper numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result '()])\n\
    \    (cond\n      [(null? numbers) (reverse result)]\n      [(> (car numbers)\
    \ max-so-far)\n       (loop (cdr numbers) (car numbers) (cons (car numbers) result))]\n\
    \      [else\n       (loop (cdr numbers) max-so-far (cons max-so-far result))])))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n       \
    \      [acc '()])\n    (cond\n      [(empty? numbers) (reverse acc)]\n      [(empty?\
    \ acc) (loop (rest numbers) (list (first numbers)))]\n      [else (loop (rest\
    \ numbers) (cons (max (first numbers) (first acc)) acc))])))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond [(empty? numbers) (reverse maxes)]\n          [(empty?\
    \ maxes) (rolling_max_iter (rest numbers) (list (first numbers)))]\n         \
    \ [else (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes))\
    \ maxes))]))\n  (rolling_max_iter numbers '()))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [accumulator (list max-so-far)])\n    (if (null? numbers)\n        accumulator\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far accumulator)))))\n", "  (let loop ([numbers numbers]\n   \
    \          [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max_so_far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max_so_far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (rolling_max_iter (cdr numbers)\n\
    \                                (if (&gt; (car numbers) max-so-far)\n       \
    \                             (car numbers)\n                                \
    \    max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result '()])\n    (if (null? numbers)\n      \
    \  (reverse result)\n        (loop (cdr numbers)\n              (if (&gt; (car\
    \ numbers) max-so-far)\n                  (car numbers)\n                  max-so-far)\n\
    \              (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result '()])\n    (if\
    \ (null? numbers)\n        (reverse result)\n        (loop (cdr numbers)\n   \
    \           (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_helper numbers max)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max) (cons (first numbers) (rolling_max_helper\
    \ (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_helper\
    \ (rest numbers) max))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (define (rolling_max_helper numbers max)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max) (cons (first numbers) (rolling_max_helper\
    \ (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_helper\
    \ (rest numbers) max))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_helper numbers max)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max) (cons\
    \ (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n    \
    \  [else (cons max (rolling_max_helper (rest numbers) max))]))\n  (rolling_max_helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (car numbers)]\n             [result (list max-so-far)])\n    (if\
    \ (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n       \
    \       (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ 0]\n             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n  \
    \        [(> (first numbers) max-so-far)\n           (loop (rest numbers) (first\
    \ numbers) (cons (first numbers) acc))]\n          [else (loop (rest numbers)\
    \ max-so-far (cons max-so-far acc))])))\n", "  (if (null? numbers)\n      '()\n\
    \      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [accumulator (list max-so-far)])\n    (if (null? numbers)\n        accumulator\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far accumulator)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result '()])\n    (if (null? numbers)\n        (reverse result)\n  \
    \      (let ([next-max (max max-so-far (car numbers))])\n          (loop (cdr\
    \ numbers)\n                next-max\n                (cons next-max result))))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result '()])\n    (if (null? numbers)\n        (reverse result)\n  \
    \      (loop (cdr numbers)\n              (max max-so-far (car numbers))\n   \
    \           (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (iter numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n\
    \      [(empty? maxes) (iter (rest numbers) (list (first numbers)))]\n      [else\
    \ (iter (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (iter numbers (list)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (define (rolling_max_iter\
    \ numbers max_so_far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max_so_far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max_so_far (rolling_max_iter (rest\
    \ numbers) max_so_far))]))\n  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [(empty?\
    \ maxes) (rolling_max_iter (rest numbers) (list (first numbers)))]\n      [else\
    \ (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter numbers '()))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far -1]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [(> (first numbers)\
    \ max-so-far)\n           (loop (rest numbers)\n                 (first numbers)\n\
    \                 (cons (first numbers) result))]\n          [else\n         \
    \  (loop (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ result))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null?\
    \ numbers)\n        '()\n        (cons (if (&gt; (car numbers) max-so-far)\n \
    \                 (car numbers)\n                  max-so-far)\n             \
    \ (rolling_max_iter (cdr numbers) (car numbers)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max_so_far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max_so_far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max) (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter\
    \ (rest numbers) max))]))\n  (rolling_max_iter numbers (first numbers)))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n    \
    \         [result (list max-so-far)])\n    (if (null? (cdr numbers))\n       \
    \ result\n        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (car numbers)]\n             [result (list max-so-far)])\n \
    \   (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n \
    \             (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [(empty? maxes) (rolling_max_iter (rest numbers) (list\
    \ (first numbers)))]\n      [else (rolling_max_iter (rest numbers) (cons (max\
    \ (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter numbers '()))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (if (null? numbers)\n\
    \        (reverse acc)\n        (loop (cdr numbers)\n              (cons (apply\
    \ max (cons (car numbers) acc)) acc)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max_so_far '()])\n    (if (null? numbers)\n        max_so_far\n\
    \        (let ([current_max (if (null? max_so_far)\n                         \
    \      (car numbers)\n                               (max (car numbers) (car max_so_far)))])\n\
    \          (loop (cdr numbers)\n                (cons current_max max_so_far))))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons max-so-far result)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (let ([max-so-far\
    \ (if (&gt; (car numbers) max-so-far)\n                              (car numbers)\n\
    \                              max-so-far)])\n          (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (max max-so-far (first (rest numbers)))\n              (append\
    \ result (list (max max-so-far (first (rest numbers)))))))))\n", "  (define (rolling_max_iter\
    \ numbers max_so_far)\n    (if (null? numbers)\n        '()\n        (cons max_so_far\
    \ (rolling_max_iter (cdr numbers) (max max_so_far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (iter numbers max-so-far)\n    (if (null?\
    \ numbers)\n        '()\n        (cons max-so-far (iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (iter numbers (car numbers)))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far 0]\n             [result '()])\n    (cond\
    \ [(empty? numbers) (reverse result)]\n          [else (let ([n (first numbers)])\n\
    \                  (loop (rest numbers)\n                        (if (&gt; n max-so-far)\
    \ n max-so-far)\n                        (cons max-so-far result)))])))\n", " \
    \ (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (if (empty? numbers)\n      '()\n      (cons (apply max numbers)\n         \
    \   (rolling_max (rest numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (cdr numbers))\n        result\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ result)))))\n", "  (let loop ([numbers numbers]\n             [max_so_far (car\
    \ numbers)]\n             [result (list max_so_far)])\n    (if (null? (cdr numbers))\n\
    \        result\n        (let ([next_max (max max_so_far (cadr numbers))])\n \
    \         (loop (cdr numbers) next_max (cons next_max result))))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (let ([next-max (max (car numbers) max-so-far)])\n          (cons next-max\
    \ (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter numbers -inf.0))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n\
    \        (rolling_max_iter (cdr numbers)\n                          (cons (max\
    \ (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter numbers (list (car\
    \ numbers))))\n", "  (let loop ([numbers numbers]\n             [max-so-far (car\
    \ numbers)]\n             [result (list max-so-far)])\n    (cond [(empty? numbers)\
    \ (reverse result)]\n          [(> (car numbers) max-so-far)\n           (loop\
    \ (cdr numbers)\n                 (car numbers)\n                 (cons (car numbers)\
    \ result))]\n          [else\n           (loop (cdr numbers)\n               \
    \  max-so-far\n                 (cons max-so-far result))])))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (let\
    \ ([n (car numbers)])\n          (rolling_max_iter (cdr numbers) (cons (if (null?\
    \ maxes) n (max n (car maxes))) maxes)))))\n  (rolling_max_iter numbers '()))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [(empty? maxes) (rolling_max_iter (rest numbers) (list\
    \ (first numbers)))]\n      [else (rolling_max_iter (rest numbers) (cons (max\
    \ (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter numbers '()))\n",
  "  (define (roll_max numbers max)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [(> (first numbers) max) (cons (first numbers) (roll_max (rest numbers)\
    \ (first numbers)))]\n      [else (cons max (roll_max (rest numbers) max))]))\n\
    \  (roll_max numbers (first numbers)))\n", "  (define (rolling_max_helper numbers\
    \ max)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max)\
    \ (cons (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n\
    \      [else (cons max (rolling_max_helper (rest numbers) max))]))\n  (rolling_max_helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (car numbers)]\n             [result (list max-so-far)])\n    (if\
    \ (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n       \
    \       (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_iter numbers max)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max) (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\
    \ (cons max (rolling_max_iter (rest numbers) max))]))\n  (rolling_max_iter numbers\
    \ (first numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result '()])\n    (cond [(null? numbers) (reverse\
    \ result)]\n          [(> (car numbers) max-so-far)\n           (loop (cdr numbers)\
    \ (car numbers) (cons (car numbers) result))]\n          [else\n           (loop\
    \ (cdr numbers) max-so-far (cons max-so-far result))])))\n", "  (let loop ([numbers\
    \ numbers]\n             [acc '()])\n    (cond\n      [(empty? numbers) (reverse\
    \ acc)]\n      [(empty? acc) (loop (rest numbers) (list (max (first numbers) 0)))]\n\
    \      [else (loop (rest numbers) (cons (max (first numbers) (first acc)) acc))])))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far -1]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [(> (first numbers)\
    \ max-so-far)\n           (loop (rest numbers)\n                 (first numbers)\n\
    \                 (cons (first numbers) result))]\n          [else\n         \
    \  (loop (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ result))])))\n", "  (let loop ([numbers numbers]\n             [max-so-far (car\
    \ numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr numbers))\n\
    \        result\n        (loop (cdr numbers)\n              (if (&gt; (car numbers)\
    \ max-so-far)\n                  (car numbers)\n                  max-so-far)\n\
    \              (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ((current-max (if (> (car numbers) max-so-far)\n      \
    \                         (car numbers)\n                               max-so-far)))\n\
    \          (cons current-max (rolling_max_iter (cdr numbers) current-max)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max)\
    \ (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n     \
    \     (else (cons max (rolling_max_iter (cdr numbers) max)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result '()])\n\
    \    (if (null? numbers)\n        (reverse result)\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max) (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\
    \ (cons max (rolling_max_iter (rest numbers) max))]))\n  (rolling_max_iter numbers\
    \ (first numbers)))\n", "  (define (rolling_max_iter numbers max)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max) (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter\
    \ (rest numbers) max))]))\n  (rolling_max_iter numbers (first numbers)))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n    \
    \         [result (list max-so-far)])\n    (if (null? (cdr numbers))\n       \
    \ result\n        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (first numbers)]\n             [result '()])\n    (if (null?\
    \ numbers)\n        (reverse result)\n        (loop (rest numbers)\n         \
    \     (if (&gt; (first numbers) max-so-far)\n                  (first numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result '()])\n    (if (null? numbers)\n        (reverse result)\n  \
    \      (let ([next-max (max max-so-far (car numbers))])\n          (loop (cdr\
    \ numbers)\n                next-max\n                (cons next-max result))))))\n",
  "  (let loop ([numbers numbers]\n             [accumulator '()])\n    (if (null?\
    \ numbers)\n        accumulator\n        (loop (cdr numbers)\n              (cons\
    \ (apply max (cons (car numbers) accumulator))\n                    accumulator)))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n\
    \        (rolling_max_iter (cdr numbers)\n                          (cons (max\
    \ (car numbers) (car maxes)) maxes))))\n  (reverse (rolling_max_iter numbers (list\
    \ (car numbers)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (first numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (rest numbers))\n        result\n        (loop\
    \ (rest numbers)\n              (if (&gt; (first numbers) max-so-far)\n      \
    \            (first numbers)\n                  max-so-far)\n              (cons\
    \ max-so-far result)))))\n", "  (let loop ([numbers numbers]\n             [maxes\
    \ '()])\n    (cond [(empty? numbers) (reverse maxes)]\n          [else\n     \
    \      (let ([max (apply max numbers)])\n             (loop (rest numbers) (cons\
    \ max maxes)))])))\n", "  (if (empty? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (rest numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max_so_far (car numbers)]\n     \
    \        [result (list max_so_far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max_so_far)\n\
    \                  (car numbers)\n                  max_so_far)\n            \
    \  (cons max_so_far result)))))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers)\n                          (cons (max (car numbers) (car maxes)) maxes))))\n\
    \  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(empty? (rest numbers)) (list (first numbers))]\n    [else\
    \ (cons (max (first numbers) (first (rolling_max (rest numbers))))\n         \
    \       (rolling_max (rest numbers)))]))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([next-max (if (&gt; (car numbers) max-so-far)\n      \
    \                      (car numbers)\n                            max-so-far)])\n\
    \          (cons next-max (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter maxes numbers)\n    (if (null?\
    \ numbers)\n        maxes\n        (rolling_max_iter (cons (max (car numbers)\
    \ (car maxes)) maxes) (cdr numbers))))\n  (reverse (rolling_max_iter (list (car\
    \ numbers)) (cdr numbers))))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result '()])\n    (cond [(null? numbers) (reverse result)]\n          [(>\
    \ (car numbers) max-so-far)\n           (loop (cdr numbers) (car numbers) (cons\
    \ (car numbers) result))]\n          [else\n           (loop (cdr numbers) max-so-far\
    \ (cons max-so-far result))])))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (car numbers)]\n             [result '()])\n    (cond\n    \
    \  [(null? numbers) (reverse result)]\n      [(> (car numbers) max-so-far)\n \
    \      (loop (cdr numbers) (car numbers) (cons (car numbers) result))]\n     \
    \ [else\n       (loop (cdr numbers) max-so-far (cons max-so-far result))])))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers)\n                          (cons (max (car numbers) (car maxes)) maxes))))\n\
    \  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (cdr numbers))\n        result\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ result)))))\n", "  (let loop ([numbers numbers]\n             [acc '()])\n \
    \   (if (null? numbers)\n        (reverse acc)\n        (loop (cdr numbers)\n\
    \              (cons (apply max (cons (car numbers) acc)) acc)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max_so_far)\n   \
    \ (if (null? numbers)\n        '()\n        (let ((next_max (if (&gt; (car numbers)\
    \ max_so_far)\n                            (car numbers)\n                   \
    \         max_so_far)))\n          (cons next_max (rolling_max_iter (cdr numbers)\
    \ next_max)))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (roll_max numbers max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(> (first numbers) max) (cons (first numbers) (roll_max\
    \ (rest numbers) (first numbers)))]\n      [else (cons max (roll_max (rest numbers)\
    \ max))]))\n  (roll_max numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max)\n    (if\
    \ (null? numbers)\n        '()\n        (cons max (rolling_max_iter (cdr numbers)\
    \ (max max (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([next-max (max (car numbers) max-so-far)])\n         \
    \ (cons next-max (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter\
    \ numbers -inf.0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond [(empty? numbers) (reverse maxes)]\n          [(empty?\
    \ maxes) (rolling_max_iter (rest numbers) (list (first numbers)))]\n         \
    \ [else (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes))\
    \ maxes))]))\n  (rolling_max_iter numbers '()))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (let\
    \ ([n (car numbers)])\n          (rolling_max_iter (cdr numbers) (cons (if (null?\
    \ maxes) n (max n (car maxes))) maxes)))))\n  (rolling_max_iter numbers '()))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max_so_far)\n    (if (null? numbers)\n        '()\n\
    \        (cons max_so_far (rolling_max_iter (cdr numbers) (max max_so_far (car\
    \ numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far 0]\n             [result '()])\n\
    \    (cond [(empty? numbers) (reverse result)]\n          [else\n           (let\
    \ ([current (first numbers)])\n             (loop (rest numbers)\n           \
    \        (if (&gt; current max-so-far) current max-so-far)\n                 \
    \  (cons max-so-far result)))])))\n", "  (let loop ([numbers numbers]\n      \
    \       [acc '()])\n    (if (null? numbers)\n        (reverse acc)\n        (loop\
    \ (cdr numbers)\n              (cons (apply max numbers)\n                   \
    \ acc)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far -1]\n             [result '()])\n    (cond [(empty?\
    \ numbers) (reverse result)]\n          [(> (first numbers) max-so-far)\n    \
    \       (loop (rest numbers)\n                 (first numbers)\n             \
    \    (cons (first numbers) result))]\n          [else\n           (loop (rest\
    \ numbers)\n                 max-so-far\n                 (cons max-so-far result))])))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_helper numbers max)\n    (if (null? numbers)\n        '()\n\
    \        (cons max (rolling_max_helper (cdr numbers) (max max (car numbers))))))\n\
    \  (rolling_max_helper numbers (car numbers)))\n", "  (define (iter numbers maxes)\n\
    \    (if (null? numbers)\n        maxes\n        (let ((max (if (null? maxes)\
    \ (car numbers) (max (car numbers) (car maxes)))))\n          (iter (cdr numbers)\
    \ (cons max maxes)))))\n  (reverse (iter numbers '())))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result '()])\n\
    \    (if (null? numbers)\n        (reverse result)\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (if (&gt; (car numbers) max-so-far)\n              \
    \    (car numbers)\n                  max-so-far)\n              (rolling_max_helper\
    \ (cdr numbers)\n                                  (if (&gt; (car numbers) max-so-far)\n\
    \                                      (car numbers)\n                       \
    \               max-so-far)))))\n  (rolling_max_helper numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (if (null? numbers)\n\
    \        (reverse acc)\n        (loop (cdr numbers)\n              (cons (apply\
    \ max numbers)\n                    acc)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
