name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (define (factorize-helper n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-helper (/ n 2) (cons 2 factors))]\n \
    \     [(= (remainder n 3) 0) (factorize-helper (/ n 3) (cons 3 factors))]\n  \
    \    [(= (remainder n 5) 0) (factorize-helper (/ n 5) (cons 5 factors))]\n   \
    \   [(= (remainder n 7) 0) (factorize-helper (/ n 7) (cons 7 factors))]\n    \
    \  [else (factorize-helper (/ n 7) (cons 7 factors))]))\n  (factorize-helper n\
    \ '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n   \
    \   [else (factorize-iter (/ (- n 1) 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (factorize-iter (quotient n (first factors)) (append factors\
    \ (list (first factors))))))\n  (factorize-iter n (list 2)))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (define (find-next-factor\
    \ n factors)\n              (cond\n                [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n                [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n                [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n                [else (define (find-next-factor-iter\
    \ n factors)\n                        (cond\n                          [(= (remainder\
    \ n (+ (car factors) 2)) 0) (factorize-iter (/ n (+ (car factors) 2)) (cons (+\
    \ (car factors) 2) factors))]\n                          [else (find-next-factor-iter\
    \ n (cdr factors))]))\n                       (find-next-factor-iter n factors)]))\n\
    \             (find-next-factor n factors)])\n      )\n    (factorize-iter n '()))\n\
    </code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) (reverse acc)]\n  \
    \    [(prime? n) (factorize-iter (/ n n) (cons n acc))]\n      [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors)))\n          (else (factorize-iter (/ n 11) (cons 11 factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n\
    \      [(= n 1) acc]\n      [(prime? n) (cons n acc)]\n      [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n      [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ((factor (find-factor n)))\n        \
    \  (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter n\
    \ '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(prime? n) (cons n acc)]\n      [else (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let* ([factor (find-factor n)]\n               [factors (cons factor factors)]\n\
    \               [n (/ n factor)])\n          (factorize-iter n factors))))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors)))\n          (else (factorize-iter (/ n 7) (cons n factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n\
    \      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons\
    \ 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n\
    \      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ ((= n 1) factors)\n          ((prime? n) (cons n factors))\n          (else\
    \ (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i acc)\n    (cond\n      [(= n 1) (reverse\
    \ acc)]\n      [(= (modulo n i) 0) (factorize-iter (/ n i) i (cons i acc))]\n\
    \      [else (factorize-iter n (+ i 1) acc)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n          ((prime?\
    \ n) (cons n factors))\n          (else (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) factors)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let* ([factor (find-factor n)]\n               [factors (cons factor factors)]\n\
    \               [n (/ n factor)])\n          (factorize-iter n factors))))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if (=\
    \ n 1)\n        factors\n        (let* ([factor (find-factor n)]\n           \
    \    [factors (cons factor factors)]\n               [n (/ n factor)])\n     \
    \     (factorize-iter n factors))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-helper n factors)\n    (cond\n      [(= n 1) factors]\n      [(=\
    \ (remainder n 2) 0) (factorize-helper (/ n 2) (cons 2 factors))]\n      [(= (remainder\
    \ n 3) 0) (factorize-helper (/ n 3) (cons 3 factors))]\n      [(= (remainder n\
    \ 5) 0) (factorize-helper (/ n 5) (cons 5 factors))]\n      [(= (remainder n 7)\
    \ 0) (factorize-helper (/ n 7) (cons 7 factors))]\n      [else (factorize-helper\
    \ (/ n 7) (cons 7 factors))]))\n  (factorize-helper n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (= n 1)\n        factors\n        (let ([f (find-factor\
    \ n)])\n          (factorize-iter (/ n f) (cons f factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter n (cons (find-next-prime n) factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n      [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0)\
    \ (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter (/ n 7)\
    \ (cons n acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5\
    \ acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \      [else (factorize-iter (/ n (first acc)) (cons (first acc) acc))]))\n  (factorize-iter\
    \ n (list n)))\n", "  (define (factorize-iter n divisor factors)\n    (cond [(=\
    \ n 1) factors]\n          [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n          [else (factorize-iter n (+ divisor\
    \ 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n\
    \      [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let ([f (find-factor n)])\n\
    \          (factorize-iter (/ n f) (cons f factors)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond ((= n 1) factors)\n          ((= (remainder n divisor) 0)\
    \ (factorize-iter (/ n divisor) divisor (cons divisor factors)))\n          (else\
    \ (factorize-iter n (+ divisor 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n          ((=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors)))\n          ((=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors)))\n          ((=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors)))\n          ((=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors)))\n          (else\
    \ (factorize-iter (/ n (car factors)) (cons (car factors) factors)))))\n  (factorize-iter\
    \ n (list n)))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n (car factors)) (cons (car factors) factors))]))\n\
    \  (factorize-iter n (list)))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let* ([factor (find-next-factor n)]\n   \
    \            [new-factors (append factors (list factor))])\n          (factorize-iter\
    \ (/ n factor) new-factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n primes)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n (car primes))\
    \ 0) (cons (car primes) (factorize-iter (/ n (car primes)) primes))]\n      [else\
    \ (factorize-iter n (cdr primes))]))\n  (factorize-iter n (list 2 3 5 7 11 13\
    \ 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond ((= n 1) factors)\n          ((prime? n) (cons n factors))\n\
    \          (else (factorize-iter (/ n (first (prime-factors n))) (cons (first\
    \ (prime-factors n)) factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (= n 1)\n        factors\n        (let* ([factor (find-factor\
    \ n)]\n               [factors (cons factor factors)]\n               [n (/ n\
    \ factor)])\n          (factorize-iter n factors))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (- n 1) factors)]))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (let* ([divisor\
    \ (find-divisor n)]\n               [factor (exact-integer-sqrt divisor)])\n \
    \         (factorize-iter (/ n factor) (cons factor acc)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let* ([factor (find-factor n)]\n               [factors (cons\
    \ factor factors)]\n               [n (/ n factor)])\n          (factorize-iter\
    \ n factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n\
    \    (cond\n      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5\
    \ acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \      [else (factorize-iter (/ n (car acc)) (cons (car acc) acc))]))\n  (factorize-iter\
    \ n (list)))\n", "  (define (factorize-iter n curr-factor factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (modulo n curr-factor) 0) (factorize-iter\
    \ (/ n curr-factor) curr-factor (cons curr-factor factors))]\n      [else (factorize-iter\
    \ n (+ curr-factor 1) factors)]))\n  (factorize-iter n 2 '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (prime? n)\n        (append factors (list\
    \ n))\n        (let* ([factor (find-factor n)]\n               [new-factors (append\
    \ factors (list factor))])\n          (factorize-iter (/ n factor) new-factors))))\n\
    \  (factorize-iter n '()))\n", "  (define (prime? n)\n    (define (prime? n i)\n\
    \      (if (= i 1)\n          #t\n          (if (= (remainder n i) 0)\n      \
    \        #f\n              (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (define\
    \ (factorize n i)\n    (if (= n 1)\n        '()\n        (if (prime? i)\n    \
    \        (if (= (remainder n i) 0)\n                (cons i (factorize (/ n i)\
    \ i))\n                (factorize n (+ i 1)))\n            (factorize n (+ i 1)))))\n\
    \  (factorize n 2))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n\
    \        factors\n        (let* ([factor (find-factor n)]\n               [factors\
    \ (cons factor factors)]\n               [n (/ n factor)])\n          (factorize-iter\
    \ n factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [else (factorize-iter (sub1 n) (cons n factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n a)\n    (if (= n 1)\n\
    \        '()\n        (let ((f (find-factor n a)))\n          (cons f (factorize-iter\
    \ (/ n f) f)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [else (factorize-iter n (cons (find-next-prime\
    \ n) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n\
    \      [else (factorize-iter (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor\
    \ n) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (cond\n    [(= n 1) '()]\n    [(prime? n) (list n)]\n    [else\
    \ (cons (first (prime-factors n)) (factorize (quotient n (first (prime-factors\
    \ n)))))]))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (prime? n)\n    \
    \    (append factors (list n))\n        (factorize-iter (quotient n (first (prime-factors\
    \ n))) (append factors (list (first (prime-factors n)))))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ((factor (smallest-prime-factor n)))\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (prime? n)\n    (define (prime-helper n i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (prime-helper n (- i 1))]))\n\
    \    (prime-helper n (- n 1)))\n  (define (factorize-helper n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-helper (/ n\
    \ i) i))]\n      [else (factorize-helper n (+ i 1))]))\n  (factorize-helper n\
    \ 2))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n\
    \          ((prime? n) (cons n factors))\n          (else (factorize-iter (/ n\
    \ (smallest-factor n)) (cons (smallest-factor n) factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-helper n factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(= (remainder n 2) 0) (factorize-helper (/ n 2) (cons 2\
    \ factors))]\n      [(= (remainder n 3) 0) (factorize-helper (/ n 3) (cons 3 factors))]\n\
    \      [(= (remainder n 5) 0) (factorize-helper (/ n 5) (cons 5 factors))]\n \
    \     [(= (remainder n 7) 0) (factorize-helper (/ n 7) (cons 7 factors))]\n  \
    \    [else (factorize-helper (/ n 7) (cons 7 factors))]))\n  (factorize-helper\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(prime? n) (append factors (list n))]\n          [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (append factors (prime-factors n)))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(prime? n) (append factors (list n))]\n      [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (append factors (prime-factors n)))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let* ([factor (find-factor n)]\n               [factors (append\
    \ factors (list factor))])\n          (factorize-iter (/ n factor) factors))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let* ([factor (find-factor n)]\n        \
    \       [factors (cons factor factors)]\n               [n (/ n factor)])\n  \
    \        (factorize-iter n factors))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (= n 1)\n        factors\n        (let ([factor\
    \ (find-factor n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ([factor (find-next-factor n)])\n   \
    \       (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n   \
    \       [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      \
    \    [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n         \
    \ [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n          [else (factorize-iter\
    \ (/ n (first acc)) (cons (first acc) acc))]))\n  (factorize-iter n (list n)))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let ([f (find-factor n)])\n          (factorize-iter (/ n f) (cons f factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors)))\n          (else (factorize-iter (/ n 7) (cons n factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond ((=\
    \ n 1) acc)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2\
    \ acc)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc)))\n\
    \          ((= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc)))\n   \
    \       ((= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc)))\n      \
    \    (else (factorize-iter (/ n 11) (cons 11 acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1) factors)\n   \
    \       ((= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors)))\n          (else (factorize-iter n (+ divisor 1) factors))))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ([f (first (prime-factors n))])\n   \
    \       (factorize-iter (/ n f) (cons f factors)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons\
    \ 1 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond ((= n 1) factors)\n          ((prime? n) (cons n factors))\n      \
    \    (else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n\
    \ factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n (first factors))\
    \ (cons (first factors) factors))]))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter\
    \ (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n acc)\n    (if (= n 1)\n        acc\n        (let* ([factor\
    \ (find-factor n)]\n               [new-acc (if (member factor acc)\n        \
    \                    (cons (cons factor (add1 (cdr (assoc factor acc)))) (remove\
    \ (assoc factor acc) acc))\n                            (cons (cons factor 1)\
    \ acc))])\n          (factorize-iter (/ n factor) new-acc))))\n  (factorize-iter\
    \ n '()))\n", "  (cond\n    [(= n 1) '()]\n    [(= n 2) '(2)]\n    [(= n 3) '(3)]\n\
    \    [(= n 4) '(2 2)]\n    [(= n 5) '(5)]\n    [(= n 6) '(2 3)]\n    [(= n 7)\
    \ '(7)]\n    [(= n 8) '(2 2 2)]\n    [(= n 9) '(3 3)]\n    [(= n 10) '(2 5)]\n\
    \    [(= n 11) '(11)]\n    [(= n 12) '(2 2 3)]\n    [(= n 13) '(13)]\n    [(=\
    \ n 14) '(2 7)]\n    [(= n 15) '(3 5)]\n    [(= n 16) '(2 2 2 2)]\n    [(= n 17)\
    \ '(17)]\n    [(= n 18) '(2 3 3)]\n    [(= n 19) '(19)]\n    [(= n 20) '(2 2 5)]\n\
    \    [(= n 21) '(3 7)]\n    [(= n 22) '(2 11)]\n    [(= n 23) '(23)]\n    [(=\
    \ n 24) '(2 2 2 3)]\n    [(= n 25) '(5 5)]\n    [(= n 26) '(2 13)]\n    [(= n\
    \ 27) '(3 3 3)]\n    [(= n 28) '(2 2 7)]\n    [(= n 29) '(29)]\n    [(= n 30)\
    \ '(2 3 5)]\n    [(= n 31) '(31)]\n    [(= n 32) '(2 2 2 2 2)]\n    [(= n 33)\
    \ '(3 11)]\n    [(= n 34) '(2 17)]\n    [(= n 35) '(5 7)]\n    [(= n 36) '(2 2\
    \ 3 3)]\n    [(= n 37) '(37)]\n    [(= n 38) '(2 19)]\n    [(= n 39) '(3 13)]\n\
    \    [(= n 40) '(2 2 2 5)]\n    [(= n 41) '(41)]\n    [(= n 42) '(2 3 7)]\n  \
    \  [(= n 43) '(43)]\n    [(= n 44) '(2 2 11)]\n    [(= n 45) '(3 3 5)]\n    [(=\
    \ n 46)", "  (define (factorize-inner n acc)\n    (cond\n      [(= n 1) acc]\n\
    \      [(= (remainder n 2) 0) (factorize-inner (/ n 2) (cons 2 acc))]\n      [(=\
    \ (remainder n 3) 0) (factorize-inner (/ n 3) (cons 3 acc))]\n      [(= (remainder\
    \ n 5) 0) (factorize-inner (/ n 5) (cons 5 acc))]\n      [(= (remainder n 7) 0)\
    \ (factorize-inner (/ n 7) (cons 7 acc))]\n      [else (factorize-inner (/ n 7)\
    \ (cons 7 acc))]))\n  (factorize-inner n '()))\n", "  (cond\n    [(= n 1) empty]\n\
    \    [(prime? n) (list n)]\n    [else (cons (first (prime-factors n)) (factorize\
    \ (quotient n (first (prime-factors n)))))]))\n", "  (define (factorize-iter n\
    \ factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let* ([factor (find-factor n)]\n               [factors (cons\
    \ factor factors)]\n               [n (/ n factor)])\n          (factorize-iter\
    \ n factors))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons\
    \ 1 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (append factors (list n))]\n\
    \      [else (factorize-iter (/ n (first (prime-factors n))) (append factors (prime-factors\
    \ n)))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (let* ([factor (find-factor n)]\n \
    \              [factors (cons factor factors)]\n               [n (/ n factor)])\n\
    \          (factorize-iter n factors))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n acc)\n    (cond ((= n 1) acc)\n          ((prime? n) (cons\
    \ n acc))\n          (else (factorize-iter (/ n (smallest-prime-factor n)) (cons\
    \ (smallest-prime-factor n) acc)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(prime?\
    \ n) (cons n factors)]\n      [else (factorize-iter (/ n (smallest-prime-factor\
    \ n)) (cons (smallest-prime-factor n) factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let ((factor (find-factor n)))\n          (factorize-iter (/ n factor) (cons\
    \ factor factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (= n 1)\n        factors\n        (let ((factor (find-factor\
    \ n)))\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (prime? n)\n    \
    \    (append factors (list n))\n        (factorize-iter (quotient n (first (prime-factors\
    \ n))) (append factors (list (first (prime-factors n)))))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([f (first (filter (lambda (x) (= (modulo n x) 0)) (range\
    \ 2 n)))]\n              [n (quotient n f)])\n          (factorize-iter n (cons\
    \ f factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n      [else (factorize-iter n (cons 3 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n\
    \      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons\
    \ 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n\
    \      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter\
    \ (/ n 2) (cons 2 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n divisor factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n divisor) 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n\
    \      [else (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter n (cons (find-next-prime n) factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(prime? n) (cons n factors)]\n      [else (factorize-iter (/\
    \ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ([factor (find-next-factor n)])\n   \
    \       (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(prime? n) (append factors (list n))]\n      [else (factorize-iter\
    \ (/ n (first (prime-factors n))) (append factors (prime-factors n)))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n\
    \          ((= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors)))\n\
    \          ((= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors)))\n\
    \          ((= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors)))\n\
    \          ((= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors)))\n\
    \          (else (factorize-iter (/ n (first factors)) (cons (first factors) factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n i acc)\n    (cond\n\
    \      [(= n 1) acc]\n      [(= (modulo n i) 0) (factorize-iter (/ n i) i (cons\
    \ i acc))]\n      [else (factorize-iter n (+ i 1) acc)]))\n  (factorize-iter n\
    \ 2 '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (factorize-iter (/ n (car factors)) (cons (car factors) factors))))\n\
    \  (factorize-iter n (prime-factors n)))\n", "  (define (factorize-iter n factors)\n\
    \    (if (prime? n)\n        (append factors (list n))\n        (factorize-iter\
    \ (quotient n (first (filter (lambda (x) (zero? (remainder n x))) (range 2 n))))\
    \ (append factors (list (first (filter (lambda (x) (zero? (remainder n x))) (range\
    \ 2 n))))))))\n  (factorize-iter n '()))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((zero? (modulo n i))\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n i)\n\
    \    (cond ((< i n) (if (zero? (modulo n i)) (cons i (iter (quotient n i) i))\
    \ (iter n (+ i 1))))\n          ((is-prime? n) (list n))\n          (else '())))\n\
    \  (iter n 2))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2\
    \ factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (prime-factors n)\n    (define (divisors\
    \ n)\n      (for/list ([i (in-range 2 (ceiling (sqrt n)))])\n        (if (zero?\
    \ (modulo n i))\n            (list i (quotient n i)))))\n    (define (prime? n)\n\
    \      (equal? (divisors n) '()))\n    (define (prime-factors-iter n l)\n    \
    \  (if (prime? n)\n          (append l (list n))\n          (apply append (map\
    \ prime-factors-iter (divisors n) l))))\n    (prime-factors-iter n '()))\n  (define\
    \ (count-factors l)\n    (for/list ([i (in-range (length l))])\n      (count (lambda\
    \ (x) (equal? x (list-ref l i))) l)))\n  (for/list ([i (in-range (length (prime-factors\
    \ n)))])\n    (list (list-ref (prime-factors n) i) (list-ref (count-factors (prime-factors\
    \ n)) i))))\n</code>\nI'm new to Racket and I'm not sure if this is a good way\
    \ to do this. I'm also not sure if there is a better way to count how many times\
    \ each factor appears in the list.\n\n\nA:\n\nI think your code is pretty good.\
    \  I would just make a couple of changes:\n\nI would use <code>for/list</code>\
    \ instead of <code>map</code> in <code>prime-factors-iter</code>.  I think it's\
    \ a bit more readable.\nI would use <code>for/fold</code> instead of <code>apply\
    \ append</code> in <code>prime-factors-iter</code>.  This is more efficient, and\
    \ it's a bit more readable.\nI would use <code>for/list</code> instead of <code>map</code>\
    \ in <code>count-factors</code>.  I think it's a bit more readable.\n\nHere's\
    \ the code with those changes:\n<code>(define (factorize n)\n  (define (prime-factors\
    \ n)\n    (define", "  (define (factorize-iter n factors)\n    (cond [(= n 1)\
    \ factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons n factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) (reverse\
    \ acc)]\n      [(integer? (sqrt n)) (factorize-iter (/ n (sqrt n)) (cons (sqrt\
    \ n) acc))]\n      [(integer? (sqrt (sqrt n))) (factorize-iter (/ n (sqrt (sqrt\
    \ n))) (cons (sqrt (sqrt n)) acc))]\n      [(integer? (sqrt (sqrt (sqrt n))))\
    \ (factorize-iter (/ n (sqrt (sqrt (sqrt n)))) (cons (sqrt (sqrt (sqrt n))) acc))]\n\
    \      [(integer? (sqrt (sqrt (sqrt (sqrt n))))) (factorize-iter (/ n (sqrt (sqrt\
    \ (sqrt (sqrt n))))) (cons (sqrt (sqrt (sqrt (sqrt n)))) acc))]\n      [(integer?\
    \ (sqrt (sqrt (sqrt (sqrt (sqrt n)))))) (factorize-iter (/ n (sqrt (sqrt (sqrt\
    \ (sqrt (sqrt n)))))) (cons (sqrt (sqrt (sqrt (sqrt (sqrt n))))) acc))]\n    \
    \  [(integer? (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))) (factorize-iter (/\
    \ n (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))) (cons (sqrt (sqrt (sqrt (sqrt\
    \ (sqrt (sqrt n)))))) acc))]\n      [(integer? (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt\
    \ (sqrt n)))))))) (factorize-iter (/ n (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt\
    \ n)))))))) (cons (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))) acc))]\n\
    \      [(integer? (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt n))))))))) (factorize-iter\
    \ (/ n (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt (sqrt", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7\
    \ factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (let ([factor (find-factor n)])\n \
    \         (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ((factor (find-factor n)))\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (= n 1)\n        factors\n        (let ((factor\
    \ (find-factor n)))\n          (factorize-iter (/ n factor) (cons factor factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n (first factors)) (cons\
    \ (first factors) factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (cond ((= n 1) '())\n          ((= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i)))\n          (else (factorize-iter n (+ i 1)))))\n  (factorize-iter\
    \ n 2))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n\
    \        (let ([f (find-factor n)])\n          (factorize-iter (/ n f) (cons f\
    \ factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (if (= n 1)\n        factors\n        (let ([factor (find-factor n)])\n \
    \         (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (if (= 1 n) factors\n        (let* ([factor\
    \ (find-factor n)]\n               [factors (cons factor factors)]\n         \
    \      [n (/ n factor)])\n          (factorize-iter n factors))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter\
    \ (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n i)\n    (if (= n 1)\n        '()\n        (if (= (remainder n i) 0)\n    \
    \        (cons i (factorize-iter (/ n i) i))\n            (factorize-iter n (+\
    \ i 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n\
    \    (cond ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors)))\n          (else (factorize-iter n (cons n factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n i)\n      (if (= i 1)\n          #t\n          (if (= (modulo n i) 0)\n  \
    \            #f\n              (prime-helper n (- i 1)))))\n    (prime-helper\
    \ n (- n 1)))\n  (define (factorize-helper n i)\n    (if (= i 1)\n        '()\n\
    \        (if (and (= (modulo n i) 0) (prime? i))\n            (cons i (factorize-helper\
    \ n (- i 1)))\n            (factorize-helper n (- i 1)))))\n  (factorize-helper\
    \ n n))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n   \
    \   [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ((factor (find-factor n)))\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter\
    \ (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n", "  (define (prime?\
    \ n)\n    (define (prime-helper n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (prime-helper n (+ i 1)))))\n    (prime-helper\
    \ n 2))\n  (define (factorize-helper n i)\n    (cond ((= n 1) '())\n         \
    \ ((= (remainder n i) 0) (cons i (factorize-helper (/ n i) i)))\n          (else\
    \ (factorize-helper n (+ i 1)))))\n  (factorize-helper n 2))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter n (cons\
    \ (find-next-prime-factor n factors) factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n          ((=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors)))\n          ((=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors)))\n          ((=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors)))\n          ((=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors)))\n          (else\
    \ (factorize-iter (/ n 11) (cons 11 factors)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(prime? n) (cons n factors)]\n      [else (factorize-iter (/ n (first (prime-factors\
    \ n))) (cons (first (prime-factors n)) factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n i factors)\n    (cond ((= n 1) factors)\n         \
    \ ((= (modulo n i) 0) (factorize-iter (/ n i) i (cons i factors)))\n         \
    \ (else (factorize-iter n (+ i 1) factors))))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n          ((=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors)))\n          ((=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors)))\n          ((=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors)))\n          ((=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors)))\n          (else\
    \ (factorize-iter (/ n (car factors)) (cons (car factors) factors)))))\n  (factorize-iter\
    \ n (list)))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n\
    \ 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond ((= n 1) factors)\n\
    \          ((prime? n) (cons n factors))\n          (else (factorize-iter (/ n\
    \ (first (prime-factors n))) (cons (first (prime-factors n)) factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([f (first (prime-factors n))])\n          (factorize-iter\
    \ (/ n f) (cons f factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors))]\n          [else (factorize-iter (/ n (car factors))\
    \ (cons (car factors) factors))]))\n  (factorize-iter n (list)))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter\
    \ (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n primes)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n (car primes)) 0) (cons (car primes) (factorize-iter (/ n (car primes)) primes))]\n\
    \      [else (factorize-iter n (cdr primes))]))\n  (factorize-iter n (prime-numbers)))\n",
  "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n    \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else\
    \ (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n          [(=\
    \ (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n          [(=\
    \ (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n          [else\
    \ (factorize-iter (/ n (first factors)) (cons (first factors) factors))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (sub1 n) (cons n factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= n (find-divisor n 2)))\n  (define (factorize-iter n divisor)\n    (cond\
    \ ((prime? n) (list n))\n          ((divisible? n divisor) (cons divisor (factorize-iter\
    \ (/ n divisor) divisor)))\n          (else (factorize-iter n (+ divisor 1)))))\n\
    \  (factorize-iter n 2))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors)))\n          (else (factorize-iter (/ n 7) (cons n factors)))))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (if\
    \ (= n 1)\n        factors\n        (let ((factor (first (prime-factors n))))\n\
    \          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter\
    \ (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n 2) 0)\
    \ (factorize-iter (/ n 2) (cons 2 factors))]\n      [else (factorize-iter (/ (-\
    \ n 1) 2) (cons 1 factors))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(prime? n) (cons n factors)]\n      [else (factorize-iter (quotient\
    \ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 2 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n\
    \      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons\
    \ 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n\
    \      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n      [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n      [else (factorize-iter\
    \ (/ n (car acc)) (cons (car acc) acc))]))\n  (factorize-iter n (list)))\n", " \
    \ (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n          [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(= (remainder n 3)\
    \ 0) (factorize-iter (/ n 3) (cons 3 acc))]\n          [(= (remainder n 5) 0)\
    \ (factorize-iter (/ n 5) (cons 5 acc))]\n          [(= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 acc))]\n          [else (factorize-iter (/ n 7) (cons 7 acc))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond\n\
    \      [(= n 1) (reverse acc)]\n      [(= (remainder n 2) 0) (factorize-iter (/\
    \ n 2) (cons 2 acc))]\n      [else (define (find-factor n acc)\n             \
    \ (cond\n                [(= (remainder n acc) 0) (find-factor (/ n acc) acc)]\n\
    \                [else (find-factor n (+ acc 1))]))\n            (factorize-iter\
    \ (/ n (find-factor n 3)) (cons (find-factor n 3) acc))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n i factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n i) 0) (factorize-iter (/ n i) i (cons i factors))]\n\
    \          [else (factorize-iter n (+ i 1) factors)]))\n  (factorize-iter n 2\
    \ '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n   \
    \   [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond [(= n 1) factors]\n\
    \          [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \          [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 factors))]\n\
    \          [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 factors))]\n\
    \          [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 factors))]\n\
    \          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (/ (- n 1) 2) (cons 2 factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1)\
    \ factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n\
    \      [else (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n factors)\n    (if (= n 1)\n       \
    \ factors\n        (let ([factor (find-factor n)])\n          (factorize-iter\
    \ (/ n factor) (cons factor factors)))))\n  (factorize-iter n '()))\n", "  (define\
    \ (factorize-iter n primes)\n    (cond\n      [(= n 1) '()]\n      [(= (remainder\
    \ n (car primes)) 0) (cons (car primes) (factorize-iter (/ n (car primes)) primes))]\n\
    \      [else (factorize-iter n (cdr primes))]))\n  (factorize-iter n (list 2 3\
    \ 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)))\n", " \
    \ (define (factorize-iter n acc)\n    (cond [(= n 1) (reverse acc)]\n        \
    \  [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n          [(=\
    \ (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n          [(= (remainder\
    \ n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n          [(= (remainder n 7)\
    \ 0) (factorize-iter (/ n 7) (cons 7 acc))]\n          [else (factorize-iter (/\
    \ n 7) (cons 7 acc))]))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (if (= n 1)\n        factors\n        (let ([factor (find-factor\
    \ n)])\n          (factorize-iter (/ n factor) (cons factor factors)))))\n  (factorize-iter\
    \ n '()))\n", "  (define (factorize-iter n acc)\n    (cond [(= n 1) acc]\n   \
    \       [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      \
    \    [(= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc))]\n         \
    \ [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc))]\n          [(=\
    \ (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n          [else (factorize-iter\
    \ (/ n (smallest-prime-factor n)) (cons (smallest-prime-factor n) acc))]))\n \
    \ (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\
    \ [(= n 1) factors]\n          [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n          [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 factors))]\n          [(= (remainder n 5) 0) (factorize-iter (/ n 5)\
    \ (cons 5 factors))]\n          [(= (remainder n 7) 0) (factorize-iter (/ n 7)\
    \ (cons 7 factors))]\n          [else (factorize-iter (/ n 7) (cons 7 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (sub1 n) (cons n factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n    (cond\n\
    \      [(= n 1) factors]\n      [(= (remainder n 2) 0) (factorize-iter (/ n 2)\
    \ (cons 2 factors))]\n      [else (factorize-iter (/ (- n 1) 2) (cons 1 factors))]))\n\
    \  (factorize-iter n '()))\n", "  (define (factorize-iter n acc)\n    (cond ((=\
    \ n 1) acc)\n          ((= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2\
    \ acc)))\n          ((= (remainder n 3) 0) (factorize-iter (/ n 3) (cons 3 acc)))\n\
    \          ((= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5 acc)))\n   \
    \       ((= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc)))\n      \
    \    (else (factorize-iter (/ n 11) (cons 11 acc)))))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n primes)\n    (cond [(= n 1) '()]\n          [(= (remainder\
    \ n (car primes)) 0)\n           (cons (car primes) (factorize-iter (/ n (car\
    \ primes)) primes))]\n          [else (factorize-iter n (cdr primes))]))\n  (factorize-iter\
    \ n (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89\
    \ 97)))\n", "  (define (factorize-iter n factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n 2) 0) (factorize-iter (/ n 2) (cons 2 factors))]\n   \
    \   [else (factorize-iter (sub1 n) (cons n factors))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n factors)\n    (if (= n 1)\n        factors\n      \
    \  (let ([factor (find-factor n)])\n          (factorize-iter (/ n factor) (cons\
    \ factor factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond ((= n 1) factors)\n          ((prime? n) (cons n factors))\n\
    \          (else (factorize-iter (/ n (first (prime-factors n))) (cons (first\
    \ (prime-factors n)) factors)))))\n  (factorize-iter n '()))\n", "  (cond\n  \
    \  [(= n 1) (list 1)]\n    [(= n 2) (list 2)]\n    [(= n 3) (list 3)]\n    [(=\
    \ n 4) (list 2 2)]\n    [(= n 5) (list 5)]\n    [(= n 6) (list 2 3)]\n    [(=\
    \ n 7) (list 7)]\n    [(= n 8) (list 2 2 2)]\n    [(= n 9) (list 3 3)]\n    [(=\
    \ n 10) (list 2 5)]\n    [(= n 11) (list 11)]\n    [(= n 12) (list 2 2 3)]\n \
    \   [(= n 13) (list 13)]\n    [(= n 14) (list 2 7)]\n    [(= n 15) (list 3 5)]\n\
    \    [(= n 16) (list 2 2 2 2)]\n    [(= n 17) (list 17)]\n    [(= n 18) (list\
    \ 2 3 3)]\n    [(= n 19) (list 19)]\n    [(= n 20) (list 2 2 5)]\n    [(= n 21)\
    \ (list 3 7)]\n    [(= n 22) (list 2 11)]\n    [(= n 23) (list 23)]\n    [(= n\
    \ 24) (list 2 2 2 3)]\n    [(= n 25) (list 5 5)]\n    [(= n 26) (list 2 13)]\n\
    \    [(= n 27) (list 3 3 3)]\n    [(= n 28) (list 2 2 7)]\n    [(= n 29) (list\
    \ 29)]\n    [(= n 30) (list 2 3 5)]\n    [(= n 31) (list 31)]\n    [(= n 32) (list\
    \ 2 2 2 2 2)]\n    [(= n 33) (list 3 11)]\n    [(= n 34) (list 2 17)]\n    [(=\
    \ n 35) (list 5 7)]\n    [(= n 36) (list 2 2 3 3)]\n    [(= n 37) (list 37)]\n\
    \    [(= n 38) (list 2 19)]\n    [(= n 39) (list 3 13)]\n    [(= n 40) (list 2\
    \ 2 2 5)]\n    [(= n 41) (list 41)]\n    [(= n 42) (list 2 3 7", "  (define (factorize-iter\
    \ n factors)\n    (cond ((= n 1) factors)\n          ((prime? n) (cons n factors))\n\
    \          (else (factorize-iter (/ n (first (prime-factors n))) (cons (first\
    \ (prime-factors n)) factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter\
    \ n factors)\n    (cond ((= n 1) factors)\n          ((= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 factors)))\n          ((= (remainder n 3) 0) (factorize-iter\
    \ (/ n 3) (cons 3 factors)))\n          ((= (remainder n 5) 0) (factorize-iter\
    \ (/ n 5) (cons 5 factors)))\n          ((= (remainder n 7) 0) (factorize-iter\
    \ (/ n 7) (cons 7 factors)))\n          (else (factorize-iter (/ n 7) (cons n\
    \ factors)))))\n  (factorize-iter n '()))\n", "  (define (factorize-iter n factors)\n\
    \    (cond\n      [(= n 1) factors]\n      [(prime? n) (cons n factors)]\n   \
    \   [else (factorize-iter (/ n (first (prime-factors n))) (cons (first (prime-factors\
    \ n)) factors))]))\n  (factorize-iter n '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
