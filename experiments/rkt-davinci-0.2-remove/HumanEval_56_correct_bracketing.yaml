name: HumanEval_56_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n      [else (error\
    \ \"Invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ counter)\n    (cond\n      [(empty? brackets) (= counter 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ counter 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= counter 0)) (helper (rest brackets) (- counter\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"Invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n    [(string=? (first\
    \ brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n         (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))\n         false)]\n \
    \   [else false]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets counter)\n    (cond\n      [(empty? brackets) (= counter\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ counter\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= counter 0)) (helper\
    \ (rest brackets) (- counter 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(string=? (first brackets) \">\") #f]\n    [(string=? (first brackets)\
    \ \"<\")\n     (if (string=? (last brackets) \">\")\n         (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))\n         #f)]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets counter)\n\
    \    (cond\n      [(empty? brackets) (= counter 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ counter 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (zero? counter)) (helper (rest brackets) (- counter 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper\
    \ (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid bracket\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ #f]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error\
    \ \"invalid character\")]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) true]\n    [(equal? (first brackets) \">\") false]\n    [(equal? (first\
    \ brackets) \"<\") (correct_bracketing (rest brackets))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]\n          [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(equal? (first brackets) \">\") false]\n    [(equal? (first brackets)\
    \ \"<\")\n     (cond\n       [(empty? (rest brackets)) false]\n       [(equal?\
    \ (first (rest brackets)) \">\")\n        (correct_bracketing (rest (rest brackets)))]\n\
    \       [else false])]))\n", "  (cond\n    [(empty? brackets) true]\n    [(equal?\
    \ (first brackets) \">\") false]\n    [(equal? (first brackets) \"<\")\n     (if\
    \ (equal? (first (rest brackets)) \">\")\n         (correct_bracketing (rest (rest\
    \ brackets)))\n         false)]))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(string=? (first brackets) \">\") #f]\n    [(string=? (first brackets) \"\
    <\")\n     (if (string=? (last brackets) \">\")\n         (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))\n         #f)]))\n",
  "  (cond [(empty? brackets) true]\n        [(char=? (first brackets) #\\<)\n   \
    \      (cond [(empty? (rest brackets)) false]\n               [(char=? (first\
    \ (rest brackets)) #\\>)\n                (correct_bracketing (rest (rest brackets)))]\n\
    \               [else false])]\n        [else false]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid input\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character in brackets\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]\n          [else (error \"Invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n      [else (helper\
    \ (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"bad input\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n      [else (error\
    \ \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid input\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n    [(and\
    \ (char=? (first brackets) #\\<)\n          (char=? (last brackets) #\\>))\n \
    \    (correct_bracketing (rest (butlast brackets)))]\n    [else false]))\n", " \
    \ (define (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n\
    \          [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \          [(char=? (first brackets) #\\>) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]\n          [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"Invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(equal? (first brackets) \"<\")\n     (if (equal? (last brackets)\
    \ \">\")\n         (correct_bracketing (rest (butlast brackets)))\n         false)]\n\
    \    [else false]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets open-count)\n    (cond\n      [(empty? brackets) (zero? open-count)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ open-count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (positive? open-count) (helper (rest\
    \ brackets) (- open-count 1)))]\n      [else (helper (rest brackets) open-count)]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"Invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"Invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"Invalid\
    \ character in brackets\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<)\n        \
    \   (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\\
    >)\n           (and (not (= count 0))\n                (loop (rest brackets) (-\
    \ count 1)))]\n          [else (error \"invalid character in brackets\")])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      \
    \    [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(eq?\
    \ (first brackets) #\\<)\n     (if (find-closing-bracket (rest brackets) 0)\n\
    \         #t\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(string=? (first brackets) \"<\")\n     (cond\n       [(string=? (last\
    \ brackets) \">\") (correct_bracketing (rest (butlast brackets)))]\n       [else\
    \ #f])]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n \
    \     [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \"<\")\n     (cond\n       [(empty? (rest brackets)) #f]\n       [(equal? (first\
    \ (rest brackets)) \">\")\n        (correct_bracketing (rest (rest brackets)))]\n\
    \       [else #f])]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (cond\n   \
    \ [(empty? brackets) true]\n    [(string=? (first brackets) \"<\")\n     (if (string=?\
    \ (last brackets) \">\")\n         (correct_bracketing (substring brackets 1 (-\
    \ (string-length brackets) 1)))\n         false)]\n    [else false]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper\
    \ (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid bracket\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(string=? (first brackets) \"<\"\
    )\n           (helper (rest brackets) (+ count 1))]\n          [(string=? (first\
    \ brackets) \">\")\n           (and (> count 0) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (correct_bracketing_iter brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (correct_bracketing_iter\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (correct_bracketing_iter (rest brackets) (- count 1)))]\n     \
    \ [else (correct_bracketing_iter (rest brackets) count)]))\n  (correct_bracketing_iter\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ counter)\n    (cond\n      [(empty? brackets) (= counter 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ counter 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= counter 0)) (helper (rest brackets) (- counter\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\\
    <) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n          [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n  \
    \        [else (error \"invalid character\")]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character in brackets\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"Invalid character in brackets\")]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (>\
    \ count 0) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n\
    \    [(equal? (first brackets) \"<\")\n     (if (equal? (last brackets) \">\"\
    )\n         (correct_bracketing (rest (butlast brackets)))\n         #f)]\n  \
    \  [else #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error\
    \ \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"unknown character\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"not a bracket\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n     \
    \ [else (error \"invalid bracket\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid bracket\")]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) true]\n    [(equal? (first brackets)\
    \ \"<\")\n     (correct_bracketing (rest brackets))]\n    [(equal? (first brackets)\
    \ \">\")\n     (if (empty? (rest brackets))\n         false\n         (correct_bracketing\
    \ (rest brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (cond\n       [(string=?\
    \ (last brackets) \">\") (correct_bracketing (rest (butlast brackets)))]\n   \
    \    [else #f])]\n    [else #f]))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets counter)\n    (cond\n      [(empty? brackets) (= counter 0)]\n    \
    \  [(char=? (first brackets) #\\<) (helper (rest brackets) (+ counter 1))]\n \
    \     [(char=? (first brackets) #\\>) (and (not (= counter 0)) (helper (rest brackets)\
    \ (- counter 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets 0))\n",
  "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets) (= count\
    \ 0)]\n          [(char=? (first brackets) #\\<)\n           (loop (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>)\n           (loop (rest\
    \ brackets) (- count 1))]\n          [else (loop (rest brackets) count)])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]\n      [else #f]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"Invalid character in brackets\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (and\
    \ (not (= count 0)) (helper (rest brackets) (- count 1)))]\n          [else (error\
    \ \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"bad input\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"Invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"bad input\")]))\n\
    \  (helper brackets 0))\n", "  (define (match-brackets brackets)\n    (cond\n\
    \      [(empty? brackets) #t]\n      [(empty? (rest brackets)) #f]\n      [(equal?\
    \ (first brackets) \"<\")\n       (and (equal? (first (rest brackets)) \">\")\n\
    \            (match-brackets (rest (rest brackets))))]\n      [else #f]))\n  (match-brackets\
    \ brackets))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets)\
    \ (zero? count))\n          ((equal? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1)))\n          ((equal? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1))))\n          (else (error \"invalid character\"\
    ))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid bracket\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (error \"invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond [(empty? brackets) (= count 0)]\n          [(equal? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(equal? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets stack)\n    (cond\n      [(empty?\
    \ brackets) (empty? stack)]\n      [(char=? (first brackets) #\\<)\n       (helper\
    \ (rest brackets) (cons (first brackets) stack))]\n      [(char=? (first brackets)\
    \ #\\>)\n       (and (not (empty? stack))\n            (helper (rest brackets)\
    \ (rest stack)))]))\n  (helper brackets '()))\n", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(empty? (rest brackets)) false]\n    [(equal? (first brackets) \"\
    <\")\n     (cond\n       [(equal? (first (rest brackets)) \">\")\n        (correct_bracketing\
    \ (rest (rest brackets)))]\n       [else false])]\n    [else false]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid\
    \ character\")]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"Invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets)\
    \ \"<\")\n     (cond\n       [(string=? (last brackets) \">\") (correct_bracketing\
    \ (rest (butlast brackets)))]\n       [else #f])]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else #f]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid bracket\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\
    \ [(empty? brackets) (= count 0)]\n          [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n          [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n     \
    \     [else (error \"invalid bracket\")]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (positive? count) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets counter)\n    (cond\n      [(empty? brackets) (= counter\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ counter\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= counter 0)) (helper\
    \ (rest brackets) (- counter 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]\n      [else (helper (rest\
    \ brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n\
    \      [else (error \"invalid character in brackets\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (helper (rest brackets)\
    \ count)]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n \
    \   (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"bad input\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]\n  \
    \    [else (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) true]\n    [(string=? (first brackets) \"<\")\n     (if\
    \ (string=? (last brackets) \">\")\n         (correct_bracketing (substring brackets\
    \ 1 (- (string-length brackets) 1)))\n         false)]\n    [else false]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper\
    \ brackets 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
