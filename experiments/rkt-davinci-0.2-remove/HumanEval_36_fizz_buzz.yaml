name: HumanEval_36_fizz_buzz
language: rkt
prompt: "#lang racket\n\n;; Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n(define (fizz_buzz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n\
  \    (check-equal? (candidate 50) 0)\n    (check-equal? (candidate 78) 2)\n    (check-equal?\
  \ (candidate 79) 3)\n    (check-equal? (candidate 100) 3)\n    (check-equal? (candidate\
  \ 200) 6)\n    (check-equal? (candidate 4000) 192)\n    (check-equal? (candidate\
  \ 10000) 639)\n    (check-equal? (candidate 100000) 8026)\n))\n\n(test-humaneval)"
completions: ["  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-multiples-of-11-or-13 n)\n    (cond\n    \
    \  [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7s\
    \ n) (count-7s-in-multiples-of-11-or-13 (- n 1)))]\n      [else (count-7s-in-multiples-of-11-or-13\
    \ (- n 1))]))\n  (count-7s-in-multiples-of-11-or-13 n))\n", "  (define (count-7s\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s\
    \ (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13))) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count_sevens n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop\
    \ ([i 1] [count 0])\n    (cond [(= i n) count]\n          [(or (= (modulo i 11)\
    \ 0) (= (modulo i 13) 0))\n           (loop (+ i 1) (+ count (count-7 (number->string\
    \ i))))]\n          [else (loop (+ i 1) count)])))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i n) count]\n      [(or (zero? (modulo i 11)) (zero?\
    \ (modulo i 13)))\n       (loop (+ i 1) (+ count (count-7 i)))]\n      [else (loop\
    \ (+ i 1) count)])))\n", "  (let loop ([i 1] [count 0])\n    (cond\n      [(=\
    \ i n) count]\n      [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n     \
    \  (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n     \
    \ [(= n 0) count]\n      [(= (modulo n 11) 0) (fizz_buzz_helper (- n 1) (+ count\
    \ (count-sevens n)))]\n      [(= (modulo n 13) 0) (fizz_buzz_helper (- n 1) (+\
    \ count (count-sevens n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7 n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7 (quotient n 10)))]\n      [else\
    \ (count-7 (quotient n 10))]))\n  (define (fizz-buzz-helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (zero? (modulo n 11)) (zero? (modulo n 13)))\
    \ (not (zero? (modulo n 7))))\n       (fizz-buzz-helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n  (fizz-buzz-helper n\
    \ 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n  (fizz-buzz-helper\
    \ n 0))\n</code>\n", "  (cond\n    [(= n 0) 0]\n    [(or (zero? (modulo n 11))\
    \ (zero? (modulo n 13)))\n     (+ (if (zero? (modulo n 10)) 1 0) (fizz_buzz (-\
    \ n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13))) (fizz_buzz_helper (- n 1) (+ acc (count_sevens n)))]\n     \
    \ [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-sevens n)\n    (cond ((= n 0) 0)\n          ((= (modulo n 10) 7) (+ 1\
    \ (count-sevens (quotient n 10))))\n          (else (count-sevens (quotient n\
    \ 10)))))\n  (define (fizz-buzz-helper n count)\n    (cond ((&gt; n 0) (cond ((or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+ count\
    \ (count-sevens n))))\n                          (else (fizz-buzz-helper (- n\
    \ 1) count))))\n          (else count)))\n  (fizz-buzz-helper n 0))\n</code>\n",
  "  (for/sum ([i (in-range n)])\n    (if (or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n        (count 7 (number->string i))\n        0)))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (= (modulo i\
    \ 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+ count (count-7 i)))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (cond\n    [(= n 0) 0]\n    [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n     (+ (if (zero? (modulo n 7))\
    \ 1 0) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (count-7s n)\n    (cond ((= n 0) 0)\n          ((= (modulo n 10) 7) (+ 1 (count-7s\
    \ (quotient n 10))))\n          (else (count-7s (quotient n 10)))))\n  (define\
    \ (count-7s-divisible-by-11-or-13 n)\n    (cond ((= n 0) 0)\n          ((or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7s n) (count-7s-divisible-by-11-or-13\
    \ (- n 1))))\n          (else (count-7s-divisible-by-11-or-13 (- n 1)))))\n  (count-7s-divisible-by-11-or-13\
    \ n))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13))) (fizz_buzz_iter (- n\
    \ 1) (+ count (count-sevens n)))]\n      [else (fizz_buzz_iter (- n 1) count)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n\
    \ 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond [(= n 0) count]\n          [(= (modulo n 11) 0) (fizz_buzz_helper (-\
    \ n 1) (+ count (count_sevens n)))]\n          [(= (modulo n 13) 0) (fizz_buzz_helper\
    \ (- n 1) (+ count (count_sevens n)))]\n          [else (fizz_buzz_helper (- n\
    \ 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (for/sum ([i (in-range 1\
    \ n)])\n    (if (or (zero? (modulo i 11)) (zero? (modulo i 13)))\n        (count-matches\
    \ #\\7 (number->string i))\n        0)))\n", "  (define (fizz_buzz_helper n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (modulo n 11) 0) (+ 1 (fizz_buzz_helper\
    \ (- n 1)))]\n      [(= (modulo n 13) 0) (+ 1 (fizz_buzz_helper (- n 1)))]\n \
    \     [else (fizz_buzz_helper (- n 1))]))\n  (fizz_buzz_helper n))\n", "  (for/sum\
    \ ([i (in-range n)]\n            #:when (or (zero? (modulo i 11))\n          \
    \             (zero? (modulo i 13))))\n    (count-matches #\\7 (number->string\
    \ i))))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7 n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7 (quotient n 10)))]\n      [else\
    \ (count-7 (quotient n 10))]))\n  (define (fizz-buzz-helper n count)\n    (cond\n\
    \      [(zero? n) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\
    \ (fizz-buzz-helper (- n 1) (+ count (count-7 n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n", "  (define (count-sevens n)\n\
    \    (cond\n      [(zero? n) 0]\n      [(= 7 (remainder n 10)) (+ 1 (count-sevens\
    \ (quotient n 10)))]\n      [else (count-sevens (quotient n 10))]))\n  (define\
    \ (count-divisible-by-11-or-13 n)\n    (cond\n      [(zero? n) 0]\n      [(or\
    \ (= 0 (remainder n 11)) (= 0 (remainder n 13))) (+ 1 (count-divisible-by-11-or-13\
    \ (- n 1)))]\n      [else (count-divisible-by-11-or-13 (- n 1))]))\n  (define\
    \ (count-divisible-by-11-or-13-and-contains-7 n)\n    (cond\n      [(zero? n)\
    \ 0]\n      [(and (= 0 (remainder n 11)) (= 0 (remainder n 13)) (> (count-sevens\
    \ n) 0)) (+ 1 (count-divisible-by-11-or-13-and-contains-7 (- n 1)))]\n      [else\
    \ (count-divisible-by-11-or-13-and-contains-7 (- n 1))]))\n  (define (count-divisible-by-11-or-13-and-does-not-contain-7\
    \ n)\n    (- (count-divisible-by-11-or-13 n) (count-divisible-by-11-or-13-and-contains-7\
    \ n)))\n  (define (count-divisible-by-11-or-13-and-contains-7-exactly-once n)\n\
    \    (cond\n      [(zero? n) 0]\n      [(and (= 0 (remainder n 11)) (= 0 (remainder\
    \ n 13)) (= 1 (count-sevens n))) (+ 1 (count-divisible-by-11-or-13-and-contains-7-exactly-once\
    \ (- n 1)))]\n      [else (count-divisible-by-11-or-13-and-contains-7-exactly-once\
    \ (- n 1))]))\n  (define (count", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count_7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond [(= i n) count]\n          [(or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n           (loop (+ i 1) (+ count (count-7 i)))]\n          [else (loop\
    \ (+ i 1) count)])))\n", "  (let loop ([i 1] [count 0])\n    (cond\n      [(=\
    \ i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop\
    \ (+ i 1) (+ count (count-7 i)))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (let loop ([i 1] [count 0])\n    (cond\n      [(> i n) count]\n      [(or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1) (+ count (count-7\
    \ (number->string i))))]\n      [else (loop (+ i 1) count)])))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-sevens\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n     (+ (if (string-contains? (number->string n) \"7\") 1 0)\n  \
    \      (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7)\
    \ (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens (quotient n\
    \ 10))]))\n  (define (count-sevens-in-range n)\n    (cond\n      [(= n 0) 0]\n\
    \      [(or (zero? (remainder n 11)) (zero? (remainder n 13))) (+ (count-sevens\
    \ n) (count-sevens-in-range (- n 1)))]\n      [else (count-sevens-in-range (-\
    \ n 1))]))\n  (count-sevens-in-range n))\n", "  (cond\n    [(= n 0) 0]\n    [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (if (member 7 (string->list\
    \ (number->string n))) 1 0)\n        (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(=\
    \ n 0) count]\n      [(and (or (zero? (modulo n 11)) (zero? (modulo n 13))) (zero?\
    \ (modulo n 7))) (fizz_buzz_helper (- n 1) (+ count 1))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-digit-7 n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-digit-7\
    \ (quotient n 10)))]\n      [else (count-digit-7 (quotient n 10))]))\n  (define\
    \ (count-digit-7-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13))) (+ (count-digit-7 n) (count-digit-7-in-range\
    \ (- n 1)))]\n      [else (count-digit-7-in-range (- n 1))]))\n  (count-digit-7-in-range\
    \ n))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (+ (count-7s n) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count\
    \ (count_sevens n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ (sevens n) acc))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count_7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count_7s (quotient n 10)))]\n      [else (count_7s (quotient\
    \ n 10))]))\n  (define (count_7s_in_range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count_7s n) (count_7s_in_range\
    \ (- n 1)))]\n      [else (count_7s_in_range (- n 1))]))\n  (count_7s_in_range\
    \ n))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 0]\n    [(=\
    \ n 3) 0]\n    [(= n 4) 0]\n    [(= n 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 1]\n\
    \    [(= n 8) 1]\n    [(= n 9) 1]\n    [(= n 10) 1]\n    [(= n 11) 2]\n    [(=\
    \ n 12) 2]\n    [(= n 13) 2]\n    [(= n 14) 2]\n    [(= n 15) 2]\n    [(= n 16)\
    \ 2]\n    [(= n 17) 3]\n    [(= n 18) 3]\n    [(= n 19) 3]\n    [(= n 20) 3]\n\
    \    [(= n 21) 3]\n    [(= n 22) 3]\n    [(= n 23) 3]\n    [(= n 24) 3]\n    [(=\
    \ n 25) 3]\n    [(= n 26) 3]\n    [(= n 27) 3]\n    [(= n 28) 3]\n    [(= n 29)\
    \ 3]\n    [(= n 30) 3]\n    [(= n 31) 3]\n    [(= n 32) 3]\n    [(= n 33) 3]\n\
    \    [(= n 34) 3]\n    [(= n 35) 3]\n    [(= n 36) 3]\n    [(= n 37) 3]\n    [(=\
    \ n 38) 3]\n    [(= n 39) 3]\n    [(= n 40) 3]\n    [(= n 41) 3]\n    [(= n 42)\
    \ 3]\n    [(= n 43) 3]\n    [(= n 44) 3]\n    [(= n 45) 3]\n    [(= n 46) 3]\n\
    \    [(= n 47) 3]\n    [(= n 48) 3]\n    [(= n 49) 3]\n    [(= n 50) 3]\n    [(=\
    \ n 51) 3]\n    [(= n 52) 3]\n    [(= n 53) 3]\n    [(= n 54) 3]\n    [(= n 55)\
    \ 3]\n    [(=", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0)\
    \ acc]\n      [(or (divisible-by? n 11) (divisible-by? n 13)) (fizz_buzz_helper\
    \ (- n 1) (+ (count-sevens n) acc))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (cond [(= n 0) 0]\n        [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n        [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n        [else (fizz_buzz (- n 1))]))\n", "  (define (count-7s n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13)))\n       (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1\
    \ (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define\
    \ (fizz-buzz-helper n count)\n    (cond\n      [(= n 0) count]\n      [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s\
    \ n)))]\n      [else (fizz-buzz-helper (- n 1) count)]))\n  (fizz-buzz-helper\
    \ n 0))\n</code>\n", "  (for/sum ([i (in-range 1 n)])\n    (if (or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n        (count-matches #\\7 (number->string i))\n\
    \        0)))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (let loop ([i 1] [count 0])\n    (cond [(= i n) count]\n\
    \          [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n           (loop (+\
    \ i 1) (+ count (count-7 (number->string i))))]\n          [else (loop (+ i 1)\
    \ count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n\
    \      [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1)\
    \ (if (zero? (modulo i 7)) (+ count 1) count))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (count-7s n)\n    (if (zero? n)\n        0\n        (+ (if (equal? (modulo\
    \ n 10) 7) 1 0)\n           (count-7s (quotient n 10)))))\n  (define (count-7s-in-range\
    \ n)\n    (if (zero? n)\n        0\n        (+ (if (or (equal? (modulo n 11) 0)\n\
    \                  (equal? (modulo n 13) 0))\n               (count-7s n)\n  \
    \             0)\n           (count-7s-in-range (- n 1)))))\n  (count-7s-in-range\
    \ n))\n", "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(=\
    \ (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens\
    \ (quotient n 10))]))\n  (define (count-sevens-in-range n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens\
    \ n) (count-sevens-in-range (- n 1)))]\n      [else (count-sevens-in-range (-\
    \ n 1))]))\n  (count-sevens-in-range n))\n</code>\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (if (string-contains?\
    \ (number->string n) \"7\") 1 0)\n        (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_helper n)\n    (cond\n      [(= n 0) 0]\n\
    \      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7))\
    \ (+ 1 (fizz_buzz_helper (- n 1)))]\n      [else (fizz_buzz_helper (- n 1))]))\n\
    \  (fizz_buzz_helper n))\n", "  (let loop ([i 1] [count 0])\n    (cond\n     \
    \ [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n     \
    \  (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (count-matches (lambda (x) (= (modulo x 11) 0))\n   \
    \              (lambda (x) (= (modulo x 13) 0))\n                 (lambda (x)\
    \ (contains-digit 7 x))\n                 (range n)))\n</code>\nI'm not sure if\
    \ this is the best way to do it, but it works.\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13)))\n       (fizz_buzz_helper (- n 1) (+ acc (count_sevens n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n    \
    \  [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s\
    \ (quotient n 10))]))\n  (define (fizz-buzz-helper n count)\n    (cond\n     \
    \ [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz-buzz-helper (- n 1) count)]))\n\
    \  (fizz-buzz-helper n 0))\n", "  (let loop ([i 0] [count 0])\n    (cond [(= i\
    \ n) count]\n          [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n   \
    \        (loop (+ i 1) (if (zero? (modulo i 7)) (+ count 1) count))]\n       \
    \   [else (loop (+ i 1) count)])))\n", "  (define (count-7s n)\n    (cond ((<\
    \ n 10) (if (= n 7) 1 0))\n          ((= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10))))\n          (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper\
    \ n acc)\n    (cond ((< n 1) acc)\n          ((or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s n))))\n          (else\
    \ (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", "  (for/sum\
    \ ([i (in-range n)])\n    (if (or (zero? (modulo i 11)) (zero? (modulo i 13)))\n\
    \        (count (lambda (c) (= c #\\7)) (number->string i))\n        0)))\n",
  "  (define (count-sevens n)\n    (cond ((= n 0) 0)\n          ((= (modulo n 10)\
    \ 7) 1)\n          (else (count-sevens (quotient n 10)))))\n  (define (fizz-buzz-helper\
    \ n acc)\n    (cond ((&gt; n 0) (fizz-buzz-helper (- n 1) (+ acc (count-sevens\
    \ n))))\n          (else acc)))\n  (fizz-buzz-helper n 0))\n</code>\n", "  (for/sum\
    \ ([i (in-range n)])\n    (if (or (zero? (modulo i 11)) (zero? (modulo i 13)))\n\
    \        (count 7 (number->string i))\n        0)))\n", "  (cond\n    [(= n 0)\
    \ 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (fizz_buzz_helper n)\n    (cond ((= n 0) 0)\n          ((= (modulo n 11) 0)\
    \ (+ (if (string-contains? (number->string n) \"7\") 1 0) (fizz_buzz_helper (-\
    \ n 1))))\n          ((= (modulo n 13) 0) (+ (if (string-contains? (number->string\
    \ n) \"7\") 1 0) (fizz_buzz_helper (- n 1))))\n          (else (fizz_buzz_helper\
    \ (- n 1)))))\n  (fizz_buzz_helper n))\n", "  (define (count-7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) acc)]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 11) 0) (+ 1 (fizz_buzz_helper\
    \ (- n 1)))]\n      [(= (modulo n 13) 0) (+ 1 (fizz_buzz_helper (- n 1)))]\n \
    \     [else (fizz_buzz_helper (- n 1))]))\n  (fizz_buzz_helper n))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (for/sum ([i (in-range n)])\n    (if (or (zero? (modulo i 11))\
    \ (zero? (modulo i 13)))\n        (count 7 (number->string i))\n        0)))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (and\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n               (and (zero? (modulo\
    \ n 13)) (zero? (modulo n 11))))\n           (fizz_buzz_helper (- n 1) (+ acc\
    \ (count_7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ count (count-7 (number->string n))))]\n      [else (fizz_buzz_helper (- n\
    \ 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (for/sum ([i (in-range n)])\n\
    \    (if (or (zero? (modulo i 11)) (zero? (modulo i 13)))\n        (count 7 (number->string\
    \ i))\n        0)))\n", "  (cond [(= n 0) 0]\n        [(or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0))\n         (+ (if (string-contains? (number->string n) \"\
    7\") 1 0)\n            (fizz_buzz (- n 1)))]\n        [else (fizz_buzz (- n 1))]))\n",
  "  (define (fizz_buzz_helper n count)\n    (if (&lt; n 0)\n        count\n     \
    \   (if (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n            (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7 n)))\n            (fizz_buzz_helper (- n 1) count))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n\
    \ 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13))) (fizz_buzz_helper (- n 1) (+ count (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n \
    \   (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s n)))]\n     \
    \ [else (fizz-buzz-helper (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n", " \
    \ (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10)\
    \ 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (fizz-buzz-helper n count)\n    (cond\n      [(= n 0) count]\n    \
    \  [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+\
    \ count (count-7s n)))]\n      [else (fizz-buzz-helper (- n 1) count)]))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n     (+ (if (string-contains? (number->string n) \"7\") 1 0)\n  \
    \      (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (is_divisible? x y)\n    (= (modulo x y) 0))\n  (define (count_7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count_7s (quotient n 10)))]\n\
    \      [else (count_7s (quotient n 10))]))\n  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (is_divisible? n 11) (is_divisible?\
    \ n 13)) (fizz_buzz_helper (- n 1) (+ count (count_7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 11) 0) (+ 1 (fizz_buzz_helper\
    \ (- n 1)))]\n      [(= (modulo n 13) 0) (+ 1 (fizz_buzz_helper (- n 1)))]\n \
    \     [else (fizz_buzz_helper (- n 1))]))\n  (fizz_buzz_helper n))\n", "  (let\
    \ loop ([i 1] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (= (modulo\
    \ i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+ count (count-7 i)))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo\
    \ n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(or (zero? (modulo n 11)) (zero? (modulo n 13))) (+ (fizz_buzz (- n 1))\
    \ (count-7s n))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (count-sevens\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-sevens\
    \ (quotient n 10)))]\n      [else (count-sevens (quotient n 10))]))\n  (define\
    \ (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens n) (fizz-buzz-helper (- n\
    \ 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n",
  "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7)\
    \ (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13))) (+ (count-7s n) (count-7s-in-range (-\
    \ n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n",
  "  (let loop ([i 0] [count 0])\n    (cond [(= i n) count]\n          [(or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (+ count (count-7\
    \ (number->string i))))]\n          [else (loop (+ i 1) count)])))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7)\
    \ (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (+ (count-7s n) (fizz-buzz-helper (- n 1)))]\n\
    \      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n\
    \ 4) 0]\n    [(= n 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 1]\n    [(= n 8) 1]\n\
    \    [(= n 9) 1]\n    [(= n 10) 1]\n    [(= n 11) 1]\n    [(= n 12) 1]\n    [(=\
    \ n 13) 1]\n    [(= n 14) 1]\n    [(= n 15) 1]\n    [(= n 16) 1]\n    [(= n 17)\
    \ 1]\n    [(= n 18) 1]\n    [(= n 19) 1]\n    [(= n 20) 1]\n    [(= n 21) 1]\n\
    \    [(= n 22) 1]\n    [(= n 23) 1]\n    [(= n 24) 1]\n    [(= n 25) 1]\n    [(=\
    \ n 26) 1]\n    [(= n 27) 1]\n    [(= n 28) 1]\n    [(= n 29) 1]\n    [(= n 30)\
    \ 1]\n    [(= n 31) 1]\n    [(= n 32) 1]\n    [(= n 33) 1]\n    [(= n 34) 1]\n\
    \    [(= n 35) 1]\n    [(= n 36) 1]\n    [(= n 37) 1]\n    [(= n 38) 1]\n    [(=\
    \ n 39) 1]\n    [(= n 40) 1]\n    [(= n 41) 1]\n    [(= n 42) 1]\n    [(= n 43)\
    \ 1]\n    [(= n 44) 1]\n    [(= n 45) 1]\n    [(= n 46) 1]\n    [(= n 47) 1]\n\
    \    [(= n 48) 1]\n    [(= n 49) 1]\n    [(= n 50) 1]\n    [(= n 51) 1]\n    [(=\
    \ n 52) 1]\n    [(= n 53) 1]\n    [(= n 54) 1]\n    [(= n 55) 1]\n    [(=", " \
    \ (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (=\
    \ (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+ count (count-7\
    \ i)))]\n      [else (loop (+ i 1) count)])))\n", "  (count-digits 7 (filter (lambda\
    \ (x) (or (divisible? x 11) (divisible? x 13))) (range 1 n))))\n", "  (define\
    \ (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(and (or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13))) (zero? (modulo n 7))) (fizz_buzz_helper\
    \ (- n 1) (+ count 1))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(=\
    \ n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (for/sum ([i (in-range n)])\n    (if (or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n        (count 7 (number->string i))\n\
    \        0)))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n    \
    \  [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s\
    \ (quotient n 10))]))\n  (define (fizz-buzz-helper n acc)\n    (cond\n      [(=\
    \ n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n\
    \          ((= (modulo n 10) 7) 1)\n          (else (count-7s (quotient n 10)))))\n\
    \  (define (fizz-buzz-helper n acc)\n    (cond ((= n 0) acc)\n          ((or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s\
    \ n))))\n          (else (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (let loop ([i 0] [count 0])\n    (cond [(= i n) count]\n      \
    \    [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n           (loop (+ i\
    \ 1) (if (zero? (modulo i 7)) (+ count 1) count))]\n          [else (loop (+ i\
    \ 1) count)])))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (+ (if (string-contains? (number->string n) \"7\") 1 0) (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (count-sevens n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-sevens\
    \ (quotient n 10)))]\n      [else (count-sevens (quotient n 10))]))\n  (define\
    \ (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens n) (fizz-buzz-helper (- n\
    \ 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n\
    </code>\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (zero? (modulo n 11)) (zero? (modulo n 13))) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (helper n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 11) 0) (+ (if (string-contains? (number->string n) \"7\") 1 0) (helper (-\
    \ n 1)))]\n      [(= (modulo n 13) 0) (+ (if (string-contains? (number->string\
    \ n) \"7\") 1 0) (helper (- n 1)))]\n      [else (helper (- n 1))]))\n  (helper\
    \ n))\n", "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(=\
    \ (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens\
    \ (quotient n 10))]))\n  (define (count-sevens-in-range n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens\
    \ n) (count-sevens-in-range (- n 1)))]\n      [else (count-sevens-in-range (-\
    \ n 1))]))\n  (count-sevens-in-range n))\n", "  (cond\n    [(= n 0) 0]\n    [(or\
    \ (divisible? n 11) (divisible? n 13)) (+ (count-7s n) (fizz_buzz (- n 1)))]\n\
    \    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13)))\n       (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1) (if (zero? (modulo\
    \ i 7)) (+ count 1) count))]\n      [else (loop (+ i 1) count)])))\n</code>\n",
  "  (for/sum ([i (in-range n)])\n    (if (or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n        (count 7 (number->string i))\n        0)))\n", "  (let loop\
    \ ([i n] [count 0])\n    (cond [(= i 0) count]\n          [(or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (- i 1) (+ count (count-7 i)))]\n\
    \          [else (loop (- i 1) count)])))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= (modulo n 11) 0) (+ (if (string-contains? (number->string n) \"7\") 1\
    \ 0) (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ (if (string-contains?\
    \ (number->string n) \"7\") 1 0) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (define (divisible? n x)\n    (= (remainder n x) 0))\n  (define\
    \ (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) 1]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(or (divisible? n 11) (divisible? n 13))\
    \ (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (let loop ([i n] [count 0])\n \
    \   (cond\n      [(= i 0) count]\n      [(or (= (modulo i 11) 0) (= (modulo i\
    \ 13) 0))\n       (loop (- i 1) (+ count (count-7 i)))]\n      [else (loop (-\
    \ i 1) count)])))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n       \
    \   ((= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10))))\n          (else (count-7s\
    \ (quotient n 10)))))\n  (define (count-7s-in-range n)\n    (cond ((= n 0) 0)\n\
    \          ((or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1))))\n          (else (count-7s-in-range (- n 1)))))\n  (count-7s-in-range\
    \ n))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n\
    \      [(= (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else\
    \ (count-sevens (quotient n 10))]))\n  (define (count-divisible-by-11-or-13 n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ 1 (count-divisible-by-11-or-13 (- n 1)))]\n      [else (count-divisible-by-11-or-13\
    \ (- n 1))]))\n  (define (count-divisible-by-11-or-13-with-sevens n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(and (or (= (remainder n 11) 0) (= (remainder n 13)\
    \ 0))\n            (not (= (count-sevens n) 0)))\n       (+ 1 (count-divisible-by-11-or-13-with-sevens\
    \ (- n 1)))]\n      [else (count-divisible-by-11-or-13-with-sevens (- n 1))]))\n\
    \  (count-divisible-by-11-or-13-with-sevens n))\n", "  (define (helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(and (or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13))) (zero? (modulo n 7))) (helper (- n 1) (+ acc 1))]\n      [else\
    \ (helper (- n 1) acc)]))\n  (helper n 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i\
    \ 13) 0))\n       (loop (+ i 1) (+ count (count-7 (number->string i))))]\n   \
    \   [else (loop (+ i 1) count)])))\n", "  (let loop ([i 1] [count 0])\n    (cond\n\
    \      [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n\
    \       (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop\
    \ (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i n) count]\n      [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n     \
    \  (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (define (count-sevens n)\n    (cond ((= n 0) 0)\n   \
    \       ((= (modulo n 10) 7) (+ 1 (count-sevens (quotient n 10))))\n         \
    \ (else (count-sevens (quotient n 10)))))\n  (define (count-sevens-divisible-by-11-or-13\
    \ n)\n    (cond ((= n 0) 0)\n          ((and (or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (not (= (modulo n 7) 0)))\n           (+ (count-sevens n) (count-sevens-divisible-by-11-or-13\
    \ (- n 1))))\n          (else (count-sevens-divisible-by-11-or-13 (- n 1)))))\n\
    \  (count-sevens-divisible-by-11-or-13 n))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i n) count]\n      [(or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n       (loop (+ i 1) (if (zero? (modulo i 7)) (+ count 1) count))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (count-7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) acc)]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(= (modulo n 11) 0) (fizz_buzz_helper\
    \ (- n 1) (+ count (count_7 n)))]\n      [(= (modulo n 13) 0) (fizz_buzz_helper\
    \ (- n 1) (+ count (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (let loop ([i 1] [count 0])\n    (cond\n   \
    \   [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n   \
    \    (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop\
    \ (+ i 1) count)])))\n", "  (let loop ([i n] [count 0])\n    (cond\n      [(=\
    \ i 0) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop\
    \ (- i 1) (+ count (count-7 (number->string i))))]\n      [else (loop (- i 1)\
    \ count)])))\n", "  (define (count-sevens n)\n    (if (zero? n)\n        0\n \
    \       (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-sevens (quotient\
    \ n 10)))))\n  (define (loop i acc)\n    (if (&gt; i n)\n        acc\n       \
    \ (loop (+ i 1)\n              (+ acc\n                 (if (or (zero? (modulo\
    \ i 11))\n                         (zero? (modulo i 13)))\n                  \
    \   (count-sevens i)\n                     0)))))\n  (loop 1 0))\n</code>\n",
  "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7)\
    \ (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s\
    \ n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n  (fizz-buzz-helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ count (count_7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (divisible? a b)\n    (= (modulo a b)\
    \ 0))\n  (define (contains? a b)\n    (cond ((= a 0) #f)\n          ((= a b) #t)\n\
    \          (else (contains? (quotient a 10) b))))\n  (define (count-7s n)\n  \
    \  (cond ((= n 0) 0)\n          ((contains? n 7) (+ 1 (count-7s (quotient n 10))))\n\
    \          (else (count-7s (quotient n 10)))))\n  (define (count-7s-in-range n)\n\
    \    (cond ((= n 0) 0)\n          ((or (divisible? n 11) (divisible? n 13)) (+\
    \ (count-7s n) (count-7s-in-range (- n 1))))\n          (else (count-7s-in-range\
    \ (- n 1)))))\n  (count-7s-in-range n))\n</code>\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i n) count]\n      [(or (zero? (modulo i 11)) (zero?\
    \ (modulo i 13)))\n       (loop (+ i 1) (if (zero? (modulo i 7)) (+ count 1) count))]\n\
    \      [else (loop (+ i 1) count)])))\n</code>\n", "  (let loop ([i 1] [count\
    \ 0])\n    (cond\n      [(> i n) count]\n      [(or (zero? (modulo i 11)) (zero?\
    \ (modulo i 13)))\n       (loop (+ i 1) (+ count (count-7s i)))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (define (count-7s n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else\
    \ (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n)\n    (cond\n \
    \     [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7s\
    \ n) (fizz-buzz-helper (- n 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n\
    \  (fizz-buzz-helper n))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n\
    \          ((= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10))))\n          (else\
    \ (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (cond\
    \ ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz-buzz-helper\
    \ (- n 1) (+ acc (count-7s n))))\n          (else (fizz-buzz-helper (- n 1) acc))))\n\
    \  (fizz-buzz-helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n\
    \ 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond ((= n 0) count)\n          ((and (or (zero? (modulo n 11))\
    \ (zero? (modulo n 13)))\n                (zero? (modulo n 7)))\n           (fizz_buzz_helper\
    \ (- n 1) (+ count 1)))\n          (else (fizz_buzz_helper (- n 1) count))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (let loop ([i 1] [count 0])\n    (cond\n   \
    \   [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n   \
    \    (loop (+ i 1) (+ count (count-7 (number->string i))))]\n      [else (loop\
    \ (+ i 1) count)])))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n  \
    \    [(= n 0) count]\n      [(and (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \            (zero? (modulo n 7)))\n       (fizz_buzz_helper (- n 1) (+ count\
    \ 1))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (count-7 n)\n    (cond ((= n 0) 0)\n          ((=\
    \ (modulo n 10) 7) 1)\n          (else 0)))\n  (define (fizz-buzz-helper n acc)\n\
    \    (cond ((&gt; n 0) (fizz-buzz-helper (- n 1) (+ acc (count-7 n))))\n     \
    \     (else acc)))\n  (fizz-buzz-helper n 0))\n</code>\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(and (or (zero? (modulo n\
    \ 11)) (zero? (modulo n 13))) (zero? (modulo n 7))) (fizz_buzz_helper (- n 1)\
    \ (+ count 1))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (let loop ([i 1] [count 0])\n    (cond\n      [(= i n) count]\n\
    \      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+\
    \ count (count-7 i)))]\n      [else (loop (+ i 1) count)])))\n", "  (cond\n  \
    \  [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo\
    \ n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", " \
    \ (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper (- n\
    \ 1) (+ acc (count_sevens n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-sevens n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n\
    \      [else (count-sevens (quotient n 10))]))\n  (define (fizz-buzz-helper n\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (remainder n 11)) (zero?\
    \ (remainder n 13))) (fizz-buzz-helper (- n 1) (+ acc (count-sevens n)))]\n  \
    \    [else (fizz-buzz-helper (- n 1) acc)]))\n  (fizz-buzz-helper n 0))\n", " \
    \ (count-matches n '(11 13) 7))\n", "  (define (count-7s n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-multiples-of-11-or-13\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-multiples-of-11-or-13 (- n 1)))]\n  \
    \    [else (count-7s-in-multiples-of-11-or-13 (- n 1))]))\n  (count-7s-in-multiples-of-11-or-13\
    \ n))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n \
    \     [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+ count\
    \ (count-7 (number->string i))))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (cond [(= n 0) 0]\n        [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \        [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n        [else (fizz_buzz\
    \ (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n     (+ (if (string-contains? (number->string n) \"7\") 1 0)\n  \
    \      (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond [(= n 0) 0]\n        [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (fizz_buzz\
    \ (- n 1)) (count-7s n))]\n        [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (count-7 n)\n    (cond ((= n 0) 0)\n          ((= (modulo n 10) 7) 1)\n    \
    \      (else 0)))\n  (define (fizz-buzz-helper n acc)\n    (cond ((= n 0) acc)\n\
    \          ((and (zero? (modulo n 11)) (zero? (modulo n 13)))\n           (fizz-buzz-helper\
    \ (- n 1) (+ acc (count-7 n))))\n          (else (fizz-buzz-helper (- n 1) acc))))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count_sevens n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count_7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1\
    \ (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define\
    \ (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo n\
    \ 11) 0) (= (modulo n 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n\
    \      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1) (+ count (count-7\
    \ (number->string i))))]\n      [else (loop (+ i 1) count)])))\n", "  (for/sum\
    \ ([i (in-range 1 n)]\n            #:when (or (zero? (modulo i 11))\n        \
    \               (zero? (modulo i 13))))\n    (count-matches #\\7 (number->string\
    \ i))))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n\
    \      [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1)\
    \ (if (zero? (modulo i 7)) (+ count 1) count))]\n      [else (loop (+ i 1) count)])))\n\
    </code>\n", "  (for/sum ([i (in-range 1 n)])\n    (if (or (zero? (modulo i 11))\
    \ (zero? (modulo i 13)))\n        (count 7 (number->string i))\n        0)))\n",
  "  (let loop ([i 1] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (=\
    \ (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+ count (count-7\
    \ i)))]\n      [else (loop (+ i 1) count)])))\n", "  (define (count-sevens n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-sevens\
    \ (quotient n 10)))]\n      [else (count-sevens (quotient n 10))]))\n  (define\
    \ (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-sevens\
    \ n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n  (fizz-buzz-helper n\
    \ 0))\n</code>\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(=\
    \ n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count_sevens n)))]\n      [else (fizz_buzz_helper (- n 1)\
    \ count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n</code>\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-sevens n)\n\
    \    (if (zero? n)\n        0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n\
    \           (count-sevens (quotient n 10)))))\n  (define (fizz_buzz_iter n count)\n\
    \    (if (zero? n)\n        count\n        (fizz_buzz_iter (- n 1)\n         \
    \               (+ count\n                           (if (or (zero? (modulo n\
    \ 11))\n                                   (zero? (modulo n 13)))\n          \
    \                     (count-sevens n)\n                               0)))))\n\
    \  (fizz_buzz_iter n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else\
    \ (count-7s (quotient n 10))]))\n  (define (count-7s-in-multiples-of-11-or-13\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-multiples-of-11-or-13 (- n 1)))]\n  \
    \    [else (count-7s-in-multiples-of-11-or-13 (- n 1))]))\n  (count-7s-in-multiples-of-11-or-13\
    \ n))\n", "  (for/sum ([i (in-range n)])\n    (if (or (zero? (modulo i 11)) (zero?\
    \ (modulo i 13)))\n        (count (lambda (x) (= x #\\7)) (number->string i))\n\
    \        0)))\n```\n\n## Problem 2\n\n```#lang racket\n", "  (cond\n    [(= n\
    \ 0) 0]\n    [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n     (+ (if (zero?\
    \ (modulo n 7)) 1 0) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(and (or (zero? (modulo n 11))\
    \ (zero? (modulo n 13))) (zero? (modulo n 7))) (+ 1 (fizz_buzz (- n 1)))]\n  \
    \  [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \       (fizz_buzz_iter (- n 1) (+ count (count_sevens n)))]\n      [else (fizz_buzz_iter\
    \ (- n 1) count)]))\n  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0)\
    \ (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n</code>\n", " \
    \ (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count_7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (count-7 n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7 (quotient n 10)))]\n      [else (count-7 (quotient n\
    \ 10))]))\n  (define (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n    \
    \  [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7 n) (fizz-buzz-helper\
    \ (- n 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n",
  "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens (quotient\
    \ n 10))]))\n  (define (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper (-\
    \ n 1) (+ acc (count-sevens n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n\
    \  (fizz-buzz-helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n\
    \ 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (count-7 n)\n    (cond\n\
    \      [(zero? n) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7 (quotient n 10)))]\n\
    \      [else (count-7 (quotient n 10))]))\n  (define (count-7-in-range n)\n  \
    \  (cond\n      [(zero? n) 0]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13))) (+ (count-7 n) (count-7-in-range (- n 1)))]\n      [else (count-7-in-range\
    \ (- n 1))]))\n  (count-7-in-range n))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7 n)\n  \
    \  (cond\n      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7 (quotient\
    \ n 10)))]\n      [else (count-7 (quotient n 10))]))\n  (define (fizz-buzz-helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) acc)]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond ((&gt; n 0)\n           (cond ((or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0))\n                  (fizz_buzz_helper (- n 1) (+ acc (count_seven\
    \ n))))\n                 (else (fizz_buzz_helper (- n 1) acc))))\n          (else\
    \ acc)))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count_sevens n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count_7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(= (modulo n 11) 0) (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n\
    \      [(= (modulo n 13) 0) (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13))) (fizz_buzz_helper (- n 1) (+ count\
    \ (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13))) (fizz_buzz_helper (-\
    \ n 1) (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11)\
    \ 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n\
    \ 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (count-7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-multiples-of-11-or-13\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-multiples-of-11-or-13 (- n 1)))]\n  \
    \    [else (count-7s-in-multiples-of-11-or-13 (- n 1))]))\n  (count-7s-in-multiples-of-11-or-13\
    \ n))\n", "  (define (fizz_buzz_iter n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_iter (-\
    \ n 1) (+ acc (count-digit 7 n)))]\n      [else (fizz_buzz_iter (- n 1) acc)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (for/sum ([i (in-range n)])\n    (cond [(or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n           (count 7 (number->string i))]\n\
    \          [else 0])))\n", "  (define (fizz_buzz_helper n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(= (modulo n 11) 0) (+ (if (equal? (modulo n 10) 7) 1 0) (fizz_buzz_helper\
    \ (- n 1)))]\n      [(= (modulo n 13) 0) (+ (if (equal? (modulo n 10) 7) 1 0)\
    \ (fizz_buzz_helper (- n 1)))]\n      [else (fizz_buzz_helper (- n 1))]))\n  (fizz_buzz_helper\
    \ n))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (modulo\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n  \
    \    [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7s n) (fizz-buzz-helper\
    \ (- n 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n\
    </code>\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i n) count]\n\
    \      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+\
    \ count (count-7 (number->string i))))]\n      [else (loop (+ i 1) count)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
