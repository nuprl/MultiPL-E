name: HumanEval_68_pluck
language: rkt
prompt: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
  \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
  \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
  ;; If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n;; The plucked node should be returned in a list, [\
  \ smalest_value, its index ],\n;; If there are no even values or the given array\
  \ is empty, return [].\n;; Constraints:\n;; * 1 <= nodes.length <= 10000\n;; * 0\
  \ <= node.value\n(define (pluck arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
  \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
  \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n  \
  \  (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8))\
  \ (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
  \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n       \
    \ [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 0 (pluck (rest arr)) ))]\n        [else (cons (first arr) (cons 1 (pluck (rest\
    \ arr)) ))]))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter\
    \ even? arr)]\n             [smallest-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            '()\n            (list smallest-even (index arr smallest-even))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (let ([val (first plucked)])\n\
    \                      (if (even? val)\n                          (list val (+\
    \ 1 (second plucked)))\n                          plucked))))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index min-even arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index arr min-even)))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (let ([plucked (pluck (rest arr))])\n            (cond\n          \
    \    [(empty? plucked) '()]\n              [(even? (first plucked)) (list (first\
    \ plucked) (+ 1 (second plucked)))]\n              [else (list (first plucked)\
    \ (+ 1 (second plucked))))]))]))\n", "  (let loop ([arr arr] [evens '()])\n  \
    \  (cond [(empty? arr) (list (min evens) (index-of (min evens) arr))]\n      \
    \    [(even? (first arr)) (loop (rest arr) (cons (first arr) evens))]\n      \
    \    [else (loop (rest arr) evens)])))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr smallest-value\
    \ smallest-index)\n    (cond\n      [(empty? arr) (list smallest-value smallest-index)]\n\
    \      [(and (even? (first arr)) (< (first arr) smallest-value))\n       (pluck-helper\
    \ (rest arr) (first arr) 0)]\n      [(and (even? (first arr)) (= (first arr) smallest-value))\n\
    \       (pluck-helper (rest arr) smallest-value (+ 1 smallest-index))]\n     \
    \ [else (pluck-helper (rest arr) smallest-value (+ 1 smallest-index))]))\n  (pluck-helper\
    \ arr 100000 0))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n \
    \               (if (empty? plucked)\n                    '()\n              \
    \      (if (and (even? (first plucked))\n                             (< (first\
    \ plucked) (first arr)))\n                        plucked\n                  \
    \      (list (first arr) 1))))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (find-smallest-even arr)]\n        [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n  \
    \      [else (pluck (cdr arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest (first\
    \ arr)])\n       (for/fold ([smallest-index 0]\n                  [smallest-value\
    \ smallest])\n                 ([i (in-range (length arr))]\n                \
    \  [v (in-list arr)])\n           (cond\n             [(even? v)\n           \
    \   (cond\n                [(< v smallest-value)\n                 (values v i)]\n\
    \                [(= v smallest-value)\n                 (cond\n             \
    \      [(< i smallest-index)\n                    (values v i)]\n            \
    \       [else\n                    (values smallest-value smallest-index)])]\n\
    \                [else\n                 (values smallest-value smallest-index)])]\n\
    \             [else\n              (values smallest-value smallest-index)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (list (apply min evens) (index-of (apply min evens) arr))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 0 arr))]\n        [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr\
    \ min-even-index min-even-value)\n    (cond\n      [(empty? arr) (list min-even-value\
    \ min-even-index)]\n      [(and (even? (first arr))\n            (or (zero? min-even-value)\n\
    \                (< (first arr) min-even-value)))\n       (pluck-helper (rest\
    \ arr) 0 (first arr))]\n      [else (pluck-helper (rest arr) (+ min-even-index\
    \ 1) min-even-value)]))\n  (pluck-helper arr 0 0))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (cons (first arr) (cons 0 (pluck (rest arr))\
    \ ))]\n        [else (cons (first arr) (cons 1 (pluck (rest arr)) ))]))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr))\n     (let ([smallest-even\
    \ (car arr)])\n       (for/fold ([smallest-even-index 0])\n                 ([i\
    \ (in-naturals)])\n         (if (and (even? (list-ref arr i))\n              \
    \    (< (list-ref arr i) smallest-even))\n             (values (list-ref arr i)\
    \ i)\n             (values smallest-even smallest-even-index)))]\n       (list\
    \ smallest-even smallest-even-index))]\n    [else (pluck (cdr arr))]))\n", " \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(even? (first arr))\n           (cond [(<\
    \ (first arr) min-value)\n                  (pluck-helper (rest arr) 0 (first\
    \ arr))]\n                 [(= (first arr) min-value)\n                  (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value)]\n                 [else (pluck-helper\
    \ (rest arr) min-index min-value)])]\n          [else (pluck-helper (rest arr)\
    \ min-index min-value)]))\n  (pluck-helper arr 0 100000))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (cons (first arr) (cons\
    \ 0 (pluck (rest arr))))]\n    [else (cons (first (pluck (rest arr))) (cons 1\
    \ (rest (pluck (rest arr)))))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (list (apply min evens) (index-of (apply min evens) arr))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (if (empty? plucked)\n                    '()\n   \
    \                 (if (and (even? (first plucked))\n                         \
    \    (< (first plucked) (first arr)))\n                        plucked\n     \
    \                   (list (first arr) 1))))]))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n       \
    \         (cond [(empty? plucked) '()]\n                      [(even? (first plucked))\n\
    \                       (if (< (first plucked) (first arr))\n                \
    \           plucked\n                           (list (first arr) 0))]\n     \
    \                 [else (list (first plucked) (+ 1 (second plucked)))]))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (min evens)])\n        (if (empty? evens)\n            '()\n\
    \            (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (let\
    \ ([plucked (pluck (rest arr))])\n                (cond [(empty? plucked) '()]\n\
    \                      [(even? (first plucked)) (if (< (first plucked) (first\
    \ arr))\n                                                   plucked\n        \
    \                                           (list (first arr) 0))]\n         \
    \             [else (list (first arr) 0)]))]))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (cons (first arr) (cons 0 (pluck (rest arr)) ))]\n\
    \        [else (cons (first arr) (cons 1 (pluck (rest arr)) ))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (car\
    \ arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr))\n         (let ([smallest\
    \ (first arr)])\n           (for/fold ([smallest-index 0]\n                  \
    \    [smallest-value smallest])\n               ([i (in-list (rest arr))])\n \
    \            (cond [(even? i)\n                    (cond [(< i smallest-value)\n\
    \                           (values i 0)]\n                          [(= i smallest-value)\n\
    \                           (values i (add1 smallest-index))])]\n            \
    \       [else (values smallest-value smallest-index)])))]\n        [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n       \
    \         (if (empty? plucked)\n                    '()\n                    (if\
    \ (< (first plucked) (first arr))\n                        plucked\n         \
    \               (list (first arr) 1))))]))\n", "  (cond [(empty? arr) '()]\n \
    \       [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (list-ref (pluck (rest arr)) 0)]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n         \
    \    [min-even (apply min evens)])\n        (if (empty? evens)\n            '()\n\
    \            (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (let ([res (pluck (rest arr))])\n     \
    \           (if (empty? res)\n                    '()\n                    (list\
    \ (first res) (+ 1 (second res)))))]))\n", "  (cond [(empty? arr) '()]\n     \
    \   [(zero? (remainder (first arr) 2))\n         (let ([min-even (first arr)])\n\
    \           (for/fold ([min-even-index 0]) ([(index val) (in-indexed arr)])\n\
    \             (cond [(zero? (remainder val 2))\n                    (cond [(<\
    \ val min-even)\n                           (values val index)]\n            \
    \               [else\n                            (values min-even min-even-index)])]\n\
    \                   [else\n                    (values min-even min-even-index)])))]\n\
    \        [else\n         (pluck (rest arr))]))\n", "  (define (pluck-helper arr\
    \ index min-index min-value)\n    (cond\n      [(empty? arr) (if (zero? min-value)\
    \ '() (list min-value min-index))]\n      [(even? (first arr))\n       (if (zero?\
    \ min-value)\n           (pluck-helper (rest arr) (add1 index) index (first arr))\n\
    \           (if (< (first arr) min-value)\n               (pluck-helper (rest\
    \ arr) (add1 index) index (first arr))\n               (pluck-helper (rest arr)\
    \ (add1 index) min-index min-value)))]\n      [else (pluck-helper (rest arr) (add1\
    \ index) min-index min-value)]))\n  (pluck-helper arr 0 0 0))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index arr min-even)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (let loop ([arr\
    \ arr] [evens '()])\n    (if (null? arr)\n        (if (null? evens)\n        \
    \    '()\n            (let ([min (apply min evens)])\n              (list min\
    \ (index-of min arr))))\n        (if (even? (car arr))\n            (loop (cdr\
    \ arr) (cons (car arr) evens))\n            (loop (cdr arr) evens)))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index-of min-even arr))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            '()\n         \
    \   (list min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (pluck-even arr)]\n        [else (pluck (rest arr))]))\n",
  "  (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(= (remainder (first arr) 2) 0)\n        \
    \   (cond [(< (first arr) min-value)\n                  (pluck-helper (rest arr)\
    \ 0 (first arr))]\n                 [(= (first arr) min-value)\n             \
    \     (pluck-helper (rest arr) (+ min-index 1) min-value)]\n                 [else\
    \ (pluck-helper (rest arr) (+ min-index 1) min-value)])]\n          [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (cond [(empty? arr) '()]\n     \
    \   [(= (remainder (first arr) 2) 0) (pluck-helper (rest arr) 0 (first arr))]\n\
    \        [else (pluck-helper (rest arr) 1 (first arr))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [evens-sorted\
    \ (sort < evens)]\n             [smallest-even (first evens-sorted)])\n      \
    \  (if (empty? evens-sorted)\n            '()\n            (list smallest-even\
    \ (index-of smallest-even arr))))))\n", "  (if (empty? arr)\n      '()\n     \
    \ (let ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (car arr)) (list (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n\
    \                (if (empty? plucked)\n                    '()\n             \
    \       (if (< (car plucked) (car arr))\n                        plucked\n   \
    \                     (list (car arr) 1))))]))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (list (first plucked)\
    \ (+ 1 (second plucked)))))]))\n```\n\n```racket\n#lang racket\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index-of min-even arr)))))))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [smallest (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list smallest (index arr smallest))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index-of min-even arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (cons (first arr) (cons 0 '()))]\n \
    \       [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min (apply min evens)])\n              (list min (index arr min)))))))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (index-of min-even arr)])\n            (list min-even min-even-index))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min (first\
    \ arr)])\n       (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n  \
    \       (if (and (even? i) (< i min))\n             i\n             min)))]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n  \
    \      [else (let ([plucked (pluck (cdr arr))])\n                (if (empty? plucked)\n\
    \                    '()\n                    (let ([plucked-value (car plucked)])\n\
    \                      (if (and (even? plucked-value)\n                      \
    \         (< plucked-value (car arr)))\n                          plucked\n  \
    \                        (list (car arr) 0)))))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (let ([res\
    \ (pluck (rest arr))])\n            (if (empty? res)\n                (list (first\
    \ arr) 1)\n                (if (< (first res) (first arr))\n                 \
    \   res\n                    (list (first arr) 1))))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (cons (first arr) 0)]\n    [else (cons (first\
    \ arr) 1)]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (let ([evens (filter even? arr)])\n    (if (null? evens)\n        '()\n     \
    \   (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n  \
    \      [else (let ([res (pluck (cdr arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (car res) (+ 1 (cadr res)))))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-value\
    \ min-even])\n         ([(index value) (in-indexed arr)])\n         (cond\n  \
    \         [(and (even? value) (< value min-even-value))\n            (values value\
    \ index)]\n           [else\n            (values min-even-value min-even-index)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n     \
    \   [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (define (pluck-helper arr smallest-even-value smallest-even-index)\n    (cond\
    \ [(empty? arr) (list smallest-even-value smallest-even-index)]\n          [(even?\
    \ (first arr))\n           (cond [(< (first arr) smallest-even-value)\n      \
    \            (pluck-helper (rest arr) (first arr) 0)]\n                 [(= (first\
    \ arr) smallest-even-value)\n                  (pluck-helper (rest arr) smallest-even-value\
    \ (+ 1 smallest-even-index))]\n                 [else (pluck-helper (rest arr)\
    \ smallest-even-value smallest-even-index)])]\n          [else (pluck-helper (rest\
    \ arr) smallest-even-value (+ 1 smallest-even-index))]))\n  (pluck-helper arr\
    \ +inf.0 -1))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (cons (car\
    \ arr) (cons 0 '()))]\n        [else (pluck (cdr arr))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (define (pluck-helper arr min-index min-value)\n    (cond\
    \ [(empty? arr) (list min-value min-index)]\n          [(and (even? (first arr))\n\
    \                (or (zero? min-value)\n                    (< (first arr) min-value)))\n\
    \           (pluck-helper (rest arr) 0 (first arr))]\n          [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 0))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n   \
    \     [else (let* ([rest (pluck (rest arr))]\n                     [rest-value\
    \ (first rest)])\n                (if (and (not (empty? rest))\n             \
    \            (or (empty? rest-value)\n                             (< (first arr)\
    \ (first rest-value))))\n                    (list (first arr) (add1 (second rest)))\n\
    \                    rest))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (if (empty? plucked)\n                    (list (first\
    \ arr) 1)\n                    (let ([plucked-value (first plucked)\n        \
    \                   [plucked-index (second plucked)]]\n                      (if\
    \ (< (first arr) plucked-value)\n                          (list (first arr) 1)\n\
    \                          (list plucked-value (+ 1 plucked-index))))))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let* ([rest (pluck (rest arr))]\n                     [rest-val\
    \ (first rest)])\n                (if (or (empty? rest)\n                    \
    \    (< (first arr) rest-val))\n                    (list (first arr) (+ 1 (second\
    \ rest)))\n                    rest))]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 0 arr))]\n        [else (let ([res (pluck (rest arr))])\n                (if\
    \ (empty? res)\n                    '()\n                    (cons (first res)\
    \ (cons (+ 1 (second res)) (rest res)))))]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(empty? (filter even? arr)) '()]\n    [else (list (apply min (filter even?\
    \ arr)) (index-of (apply min (filter even? arr)) arr))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (cons\
    \ (first arr) (cons 0 '()))]\n    [else (pluck (rest arr))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index-of min-even arr)))))))\n```\n\n## Solution\
    \ 2\n\n```racket\n#lang racket\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond\n   \
    \ [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (let ([plucked (pluck (rest arr))])\n            (if (empty? plucked)\n    \
    \            '()\n                (let ([even-value (first plucked)])\n      \
    \            (if (even? (first arr))\n                      (if (< even-value\
    \ (first arr))\n                          plucked\n                          (list\
    \ (first arr) 0))\n                      plucked))))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (define (pluck-helper\
    \ arr min-even-index min-even-value)\n    (cond [(empty? arr) (list min-even-value\
    \ min-even-index)]\n          [(even? (first arr))\n           (cond [(= min-even-value\
    \ -1)\n                  (pluck-helper (rest arr) 0 (first arr))]\n          \
    \       [(< (first arr) min-even-value)\n                  (pluck-helper (rest\
    \ arr) 0 (first arr))]\n                 [else (pluck-helper (rest arr) min-even-index\
    \ min-even-value)])]\n          [else (pluck-helper (rest arr) min-even-index\
    \ min-even-value)]))\n  (pluck-helper arr -1 -1))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([plucked\
    \ (pluck (rest arr))])\n                (cond [(empty? plucked) '()]\n       \
    \               [(even? (first plucked))\n                       (if (< (first\
    \ plucked) (first arr))\n                           plucked\n                \
    \           (list (first arr) 0))]\n                      [else (list (first plucked)\
    \ (+ 1 (second plucked)))]))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (cons (first arr) (cons 0 (pluck (rest arr)) ))]\n        [else\
    \ (cons (first arr) (cons 1 (pluck (rest arr)) ))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index arr min-even))))))\n", "  (if (empty? arr)\n      '()\n    \
    \  (let ([evens (filter even? arr)])\n        (if (empty? evens)\n           \
    \ '()\n            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (let ([evens (filter even? arr)])\n   \
    \ (if (empty? evens)\n        '()\n        (let ([min (apply min evens)])\n  \
    \        (list min (index-of min arr))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n   \
    \     [(even? (car arr)) (list (car arr) 0)]\n        [else (pluck (cdr arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(empty? (filter even? arr)) '()]\n       \
    \ [else (list (apply min (filter even? arr))\n                    (list-index\
    \ (apply min (filter even? arr)) arr))]))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (let ([plucked (pluck (rest arr))])\n            (cond\n          \
    \    [(empty? plucked) '()]\n              [(even? (first plucked)) (list (first\
    \ plucked) (+ 1 (second plucked)))]\n              [else (list (first plucked)\
    \ (+ 1 (second plucked))))]))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n \
    \       [else (let* ([plucked (pluck (cdr arr))]\n                     [plucked-val\
    \ (car plucked)]\n                     [plucked-idx (cadr plucked)])\n       \
    \         (cond [(empty? plucked) (list (car arr) 0)]\n                      [(even?\
    \ (car arr)) (list (min (car arr) plucked-val) 0)]\n                      [else\
    \ (list plucked-val (+ plucked-idx 1))]))]))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([rec\
    \ (pluck (rest arr))])\n                (cond [(empty? rec) '()]\n           \
    \           [(even? (first rec))\n                       (if (< (first rec) (first\
    \ arr))\n                           rec\n                           (list (first\
    \ arr) 0))]\n                      [else (list (first arr) 0)]))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(and (even? (first arr)) (empty? (rest arr))) (list\
    \ (first arr) 0)]\n    [(even? (first arr)) (cons (first arr) (pluck (rest arr)))]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (car arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n", "  (define\
    \ (pluck-helper arr smallest-even smallest-even-index)\n    (cond\n      [(empty?\
    \ arr) (if (zero? smallest-even) empty (list smallest-even smallest-even-index))]\n\
    \      [(even? (first arr)) (if (< (first arr) smallest-even)\n              \
    \                 (pluck-helper (rest arr) (first arr) 0)\n                  \
    \             (pluck-helper (rest arr) smallest-even smallest-even-index))]\n\
    \      [else (pluck-helper (rest arr) smallest-even (+ 1 smallest-even-index))]))\n\
    \  (pluck-helper arr 10000 0))\n", "  (if (empty? arr)\n      '()\n      (let*\
    \ ([evens (filter even? arr)]\n             [min (apply min evens)])\n       \
    \ (if (empty? evens)\n            '()\n            (list min (index-of min arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index arr min-even)))))))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else\
    \ (pluck (cdr arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr))\
    \ (list (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n    \
    \            (if (empty? plucked)\n                    '()\n                 \
    \   (list (car plucked) (+ 1 (cadr plucked)))))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (cons (first arr) (cons 0 (pluck (rest arr))))]\n\
    \    [else (cons (first (pluck (rest arr))) (cons 1 (rest (pluck (rest arr)))))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index-of min-even arr))))))\n", "  (let loop\
    \ ([arr arr] [min-even #f] [min-even-index #f])\n    (if (empty? arr)\n      \
    \  (if min-even\n            (list min-even min-even-index)\n            '())\n\
    \        (let ([e (first arr)])\n          (if (even? e)\n              (if (or\
    \ (not min-even) (< e min-even))\n                  (loop (rest arr) e (add1 (length\
    \ arr)))\n                  (loop (rest arr) min-even min-even-index))\n     \
    \         (loop (rest arr) min-even min-even-index))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (define (pluck-helper arr min-index min-value)\n\
    \    (cond\n      [(empty? arr) (list min-value min-index)]\n      [(and (even?\
    \ (first arr))\n            (or (zero? min-value)\n                (< (first arr)\
    \ min-value)))\n       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr))\n            (= (first arr) min-value))\n       (pluck-helper (rest\
    \ arr) (+ min-index 1) min-value)]\n      [else (pluck-helper (rest arr) (+ min-index\
    \ 1) min-value)]))\n  (pluck-helper arr 0 0))\n", "  (let loop ([arr arr] [evens\
    \ '()])\n    (cond [(empty? arr) (if (empty? evens) '() (list (apply min evens)\
    \ (index-of (apply min evens) arr)))]\n          [(even? (first arr)) (loop (rest\
    \ arr) (cons (first arr) evens))]\n          [else (loop (rest arr) evens)])))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even?\
    \ arr)]\n             [min-even (apply min evens)])\n        (if (empty? evens)\n\
    \            '()\n            (list min-even (index-of min-even arr))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond\n   \
    \ [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else (pluck\
    \ (cdr arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(empty? (filter even?\
    \ arr)) '()]\n    [else (list (apply min (filter even? arr)) (index-of (apply\
    \ min (filter even? arr)) arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr))\n     (let ([min-even (first arr)])\n       (for/fold ([min-even-index\
    \ 0]\n                  [min-even-value min-even])\n         ([i (in-list (rest\
    \ arr))])\n         (cond\n           [(even? i)\n            (cond\n        \
    \      [(< i min-even-value)\n               (values i i)]\n              [else\n\
    \               (values min-even-index min-even-value)])]\n           [else\n\
    \            (values min-even-index min-even-value)])))]\n    [else\n     (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list\
    \ (car arr) 0)]\n    [else (pluck (cdr arr))]))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([sub\
    \ (pluck (rest arr))])\n                (cond [(empty? sub) '()]\n           \
    \           [(even? (first sub)) (list (first sub) (+ 1 (second sub)))]\n    \
    \                  [else (list (first sub) (second sub))]))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (list (apply min evens) (index (apply min\
    \ evens) arr))))))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (let ([result (pluck (rest arr))])\n  \
    \              (if (empty? result)\n                    '()\n                \
    \    (list (first result) (+ 1 (second result)))))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [smallest-even\
    \ (if (empty? evens)\n                                -1\n                   \
    \             (apply min evens))])\n        (if (= smallest-even -1)\n       \
    \     '()\n            (list smallest-even (index arr smallest-even))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            '()\n         \
    \   (list min-even (index arr min-even))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min (apply min evens)])\n              (list min\
    \ (index min arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (if\
    \ (empty? evens)\n            '()\n            (list min-even (index-of min-even\
    \ arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (list (apply\
    \ min evens) (index-of (apply min evens) arr))))))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(and (even? (first arr)) (empty? (rest arr))) (list (first arr)\
    \ 0)]\n        [(and (even? (first arr)) (not (empty? (rest arr)))) (list (first\
    \ arr) 0)]\n        [(and (odd? (first arr)) (empty? (rest arr))) '()]\n     \
    \   [(and (odd? (first arr)) (not (empty? (rest arr)))) (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let*\
    \ ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n  \
    \      (if (empty? evens)\n            '()\n            (list min-even (index-of\
    \ min-even arr))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index-of min-even arr))))))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even (first\
    \ arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-value\
    \ min-even])\n         ([i (in-list (rest arr))])\n         (cond\n          \
    \ [(even? i)\n            (if (< i min-even)\n                (values i i)\n \
    \               (values min-even-index min-even-value))]\n           [else (values\
    \ min-even-index min-even-value)])))]\n    [else (pluck (rest arr))]))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (cons (first arr) (cons\
    \ 0 (pluck (rest arr))))]\n    [else (cons (first (pluck (rest arr))) (cons (add1\
    \ (second (pluck (rest arr)))) '()))]))\n", "  (cond [(empty? arr) '()]\n    \
    \    [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (let ([plucked-value\
    \ (first plucked)])\n                      (if (and (even? plucked-value)\n  \
    \                             (< plucked-value (first arr)))\n               \
    \           plucked\n                          (list (first arr) 0)))))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n    \
    \  (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n\
    \        (if (empty? evens)\n            '()\n            (list min-even (index-of\
    \ min-even arr))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else\
    \ (pluck (cdr arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr))\
    \ (list (car arr) 0)]\n        [else (pluck (cdr arr))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([plucked\
    \ (pluck (rest arr))])\n                (if (empty? plucked)\n               \
    \     '()\n                    (if (and (even? (first plucked))\n            \
    \                 (< (first plucked) (first arr)))\n                        plucked\n\
    \                        (list (first arr) 1))))]))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (let*\
    \ ([rest (pluck (rest arr))]\n                     [rest-val (first rest)])\n\
    \                (if (or (empty? rest)\n                        (< (first arr)\
    \ rest-val))\n                    (list (first arr) (add1 (second rest)))\n  \
    \                  rest))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond\n   \
    \ [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
