name: HumanEval_68_pluck
language: rkt
prompt: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
  \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
  \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
  ;; If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n;; The plucked node should be returned in a list, [\
  \ smalest_value, its index ],\n;; If there are no even values or the given array\
  \ is empty, return [].\n;; Example 1:\n;; Explanation: 2 has the smallest even value,\
  \ and 2 has the smallest index.\n;; Example 2:\n;; Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n;; Example 3:\n;; Example 4:\n;; Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n;; so we will choose the first\
  \ zero, which has the smallest index.\n;; Constraints:\n;; * 1 <= nodes.length <=\
  \ 10000\n;; * 0 <= node.value\n(define (pluck arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
  \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
  \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n  \
  \  (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8))\
  \ (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
  \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n     \
    \   '()\n        (let ([min-even (apply min evens)])\n          (list min-even\
    \ (index-of min-even arr))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index min-even arr)))))))\n", "  (define (pluck-helper arr min-index min-value)\n\
    \    (cond\n      [(empty? arr) (if (zero? min-value) '() (list min-value min-index))]\n\
    \      [(zero? (modulo (first arr) 2))\n       (if (zero? min-value)\n       \
    \    (pluck-helper (rest arr) 0 (first arr))\n           (if (< (first arr) min-value)\n\
    \               (pluck-helper (rest arr) 0 (first arr))\n               (pluck-helper\
    \ (rest arr) min-index min-value)))]\n      [else (pluck-helper (rest arr) (add1\
    \ min-index) min-value)]))\n  (pluck-helper arr 0 0))\n", "  (define (pluck-helper\
    \ arr smallest-even-value smallest-even-index)\n    (if (empty? arr)\n       \
    \ (if (zero? smallest-even-value)\n            '()\n            (list smallest-even-value\
    \ smallest-even-index))\n        (let* ([first (first arr)]\n               [rest\
    \ (rest arr)])\n          (if (and (even? first)\n                   (or (zero?\
    \ smallest-even-value)\n                       (< first smallest-even-value)))\n\
    \              (pluck-helper rest first 0)\n              (pluck-helper rest smallest-even-value\
    \ (+ smallest-even-index 1))))))\n  (pluck-helper arr 0 0))\n", "  (let loop ([arr\
    \ arr] [min-even #f] [min-even-index #f])\n    (if (empty? arr)\n        (if min-even\n\
    \            (list min-even min-even-index)\n            '())\n        (let ([val\
    \ (first arr)])\n          (if (and (even? val) (or (not min-even) (< val min-even)))\n\
    \              (loop (rest arr) val (add1 min-even-index))\n              (loop\
    \ (rest arr) min-even (add1 min-even-index)))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (define (pluck-helper\
    \ arr smallest-even-value smallest-even-index)\n    (cond [(empty? arr) (list\
    \ smallest-even-value smallest-even-index)]\n          [(and (even? (first arr))\n\
    \                (or (= smallest-even-value -1)\n                    (< (first\
    \ arr) smallest-even-value)))\n           (pluck-helper (rest arr) (first arr)\
    \ (add1 (length arr)))\n           ]\n          [else (pluck-helper (rest arr)\
    \ smallest-even-value smallest-even-index)]))\n  (pluck-helper arr -1 -1))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (if (empty? plucked)\n                    '()\n   \
    \                 (if (and (even? (first plucked))\n                         \
    \    (< (first plucked) (first arr)))\n                        plucked\n     \
    \                   (list (first arr) 0))))]))\n", "  (let ([evens (filter even?\
    \ arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n         \
    \    [min-even (apply min evens)])\n        (if (empty? evens)\n            '()\n\
    \            (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr) '()]\n    \
    \    [(even? (car arr)) (list (car arr) 0)]\n        [else (let ([plucked (pluck\
    \ (cdr arr))])\n                (if (empty? plucked)\n                    '()\n\
    \                    (list (car plucked) (+ 1 (cadr plucked)))))]))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n   \
    \     [else (let ([plucked (pluck (rest arr))])\n                (if (empty? plucked)\n\
    \                    '()\n                    (let ([plucked-val (first plucked)\n\
    \                           [plucked-idx (second plucked)]]\n                \
    \      (if (and (even? plucked-val)\n                               (< plucked-val\
    \ (first arr)))\n                          plucked\n                         \
    \ (list (first arr) 1))))))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index min-even arr))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else\
    \ (pluck (cdr arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (let ([res (pluck (rest arr))])\n   \
    \         (if (empty? res)\n                '()\n                (list (first\
    \ res) (+ 1 (second res)))))]))\n", "  (define (pluck-helper arr min-even-val\
    \ min-even-idx)\n    (cond [(empty? arr) (list min-even-val min-even-idx)]\n \
    \         [(and (even? (first arr))\n                (or (zero? min-even-val)\n\
    \                    (< (first arr) min-even-val)))\n           (pluck-helper\
    \ (rest arr) (first arr) (first arr))]\n          [else (pluck-helper (rest arr)\
    \ min-even-val min-even-idx)]))\n  (pluck-helper arr 0 0))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr))\n     (let ([min-even-index (find-min-even-index\
    \ arr)])\n       (list (list (list-ref arr min-even-index) min-even-index)))]\n\
    \    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min (apply min evens)])\n              (list min (index-of\
    \ min arr)))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(empty? (filter even?\
    \ arr)) '()]\n    [else (list (apply min (filter even? arr)) (index (apply min\
    \ (filter even? arr)) arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else (let* ([sub-arr\
    \ (pluck (cdr arr))])\n             (if (empty? sub-arr)\n                 (list\
    \ (car arr) 1)\n                 (if (< (car sub-arr) (car arr))\n           \
    \          (list (car sub-arr) (+ 1 (cadr sub-arr)))\n                     (list\
    \ (car arr) 1))))]))\n", "  (let* ([evens (filter even? arr)]\n         [min-even\
    \ (apply min evens)])\n    (if (empty? evens)\n        '()\n        (list min-even\
    \ (index-of min-even arr)))))\n", "  (define (pluck-helper arr smallest-index\
    \ smallest-value)\n    (cond [(empty? arr) (list smallest-value smallest-index)]\n\
    \          [(and (even? (first arr))\n                (or (zero? smallest-value)\n\
    \                    (< (first arr) smallest-value)))\n           (pluck-helper\
    \ (rest arr) 0 (first arr))]\n          [(and (even? (first arr))\n          \
    \      (= (first arr) smallest-value))\n           (pluck-helper (rest arr) (+\
    \ 1 smallest-index) smallest-value)]\n          [else (pluck-helper (rest arr)\
    \ (+ 1 smallest-index) smallest-value)]))\n  (pluck-helper arr 0 0))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond\n   \
    \ [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list (apply\
    \ min (filter even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n",
  "  (define (pluck-helper arr evens)\n    (cond [(empty? arr) evens]\n          [(even?\
    \ (first arr)) (pluck-helper (rest arr) (cons (first arr) evens))]\n         \
    \ [else (pluck-helper (rest arr) evens)]))\n  (define (min-index-helper arr min-index)\n\
    \    (cond [(empty? arr) min-index]\n          [(< (first arr) (first min-index))\
    \ (min-index-helper (rest arr) (cons (first arr) (cons (first min-index) (rest\
    \ min-index))))]\n          [else (min-index-helper (rest arr) min-index)]))\n\
    \  (define (min-index arr)\n    (min-index-helper arr (cons (first arr) (cons\
    \ (first arr) (rest arr)))))\n  (if (empty? arr) '()\n      (if (empty? (pluck-helper\
    \ arr '())) '()\n          (cons (first (min-index (pluck-helper arr '()))) (cons\
    \ (first (rest (min-index (pluck-helper arr '())))) '())))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            '()\n         \
    \   (let* ([min-even-index (index arr min-even)]\n                   [min-even-index-evens\
    \ (filter (lambda (x) (= x min-even)) evens)]\n                   [min-even-index-evens-index\
    \ (index min-even-index-evens min-even)])\n              (list min-even min-even-index-evens-index))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr))\n         (let ([min-even\
    \ (first arr)])\n           (for/fold ([min-even-index 0]\n                  \
    \    [min-even-value min-even])\n               ([i (in-naturals)])\n        \
    \       (cond [(even? (list-ref arr i))\n                      (cond [(< min-even\
    \ (list-ref arr i))\n                             [min-even-index min-even-value]]\n\
    \                            [else\n                             [i (list-ref\
    \ arr i)]])]\n                     [else\n                      [min-even-index\
    \ min-even-value]])))]\n        [else\n         (pluck (rest arr))]))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n   \
    \     [else (let ([plucked (pluck (rest arr))])\n                (if (empty? plucked)\n\
    \                    '()\n                    (list (first plucked) (+ 1 (second\
    \ plucked)))))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n \
    \               (if (empty? plucked)\n                    '()\n              \
    \      (list (first plucked) (+ 1 (second plucked)))))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr) '()]\n    \
    \    [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (let loop ([arr arr] [evens '()])\n    (cond [(empty? arr) (if (empty? evens)\
    \ '() (list (apply min evens) (index-of (apply min evens) arr)))]\n          [(even?\
    \ (first arr)) (loop (rest arr) (cons (first arr) evens))]\n          [else (loop\
    \ (rest arr) evens)])))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (min evens)])\n        (if (empty?\
    \ evens)\n            '()\n            (list min-even (index-of min-even arr))))))\n",
  "  (match arr\n    [(list) (list)]\n    [(list x xs)\n     (let ([evens (filter\
    \ even? arr)])\n       (if (empty? evens)\n           (list)\n           (let\
    \ ([min-even (apply min evens)])\n             (list min-even (index-of min-even\
    \ arr))\n             )\n           )\n       )\n     ]\n    )\n  )\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) '()]\n   \
    \     [(even? (car arr)) (list (car arr) 0)]\n        [else (let ([plucked (pluck\
    \ (cdr arr))])\n                (if (empty? plucked)\n                    '()\n\
    \                    (list (car plucked) (+ 1 (cadr plucked)))))]))\n", "  (define\
    \ (even? n) (= (remainder n 2) 0))\n  (define (find-smallest-even arr)\n    (cond\
    \ [(empty? arr) #f]\n          [(even? (first arr)) (first arr)]\n          [else\
    \ (find-smallest-even (rest arr))]))\n  (define (find-index arr n)\n    (cond\
    \ [(empty? arr) #f]\n          [(= (first arr) n) 0]\n          [else (+ 1 (find-index\
    \ (rest arr) n))]))\n  (define (find-smallest-even-index arr)\n    (let ([n (find-smallest-even\
    \ arr)])\n      (if n (find-index arr n) #f)))\n  (cond [(empty? arr) '()]\n \
    \       [else (list (find-smallest-even arr) (find-smallest-even-index arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (let ([plucked-value\
    \ (first plucked)])\n                      (if (even? plucked-value)\n       \
    \                   (list plucked-value (add1 (second plucked)))\n           \
    \               '()))))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            '()\n        \
    \    (let ([min-even (apply min evens)])\n              (list min-even (index-of\
    \ min-even arr)))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min (apply min evens)])\n          (list\
    \ min (index arr min))))))\n", "  (cond [(empty? arr) '()]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (let ([result (pluck (rest arr))])\n\
    \                (if (empty? result)\n                    '()\n              \
    \      (list (first result) (+ 1 (second result)))))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (define (pluck-helper arr min-even\
    \ min-index)\n    (cond [(empty? arr) (list min-even min-index)]\n          [(even?\
    \ (first arr))\n           (if (or (zero? min-even) (< (first arr) min-even))\n\
    \               (pluck-helper (rest arr) (first arr) 0)\n               (pluck-helper\
    \ (rest arr) min-even (+ 1 min-index)))]\n          [else (pluck-helper (rest\
    \ arr) min-even (+ 1 min-index))]))\n  (pluck-helper arr 0 0))\n", "  (define\
    \ (pluck-helper arr min-even-index min-even-value)\n    (cond\n      [(empty?\
    \ arr) (list min-even-value min-even-index)]\n      [(and (even? (first arr))\
    \ (or (zero? min-even-value) (< (first arr) min-even-value)))\n       (pluck-helper\
    \ (rest arr) 0 (first arr))]\n      [(and (even? (first arr)) (= (first arr) min-even-value))\n\
    \       (pluck-helper (rest arr) (+ min-even-index 1) min-even-value)]\n     \
    \ [else (pluck-helper (rest arr) (+ min-even-index 1) min-even-value)]))\n  (pluck-helper\
    \ arr 0 0))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(null? arr)\
    \ '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else (let ([plucked (pluck\
    \ (cdr arr))])\n            (if (null? plucked)\n                '()\n       \
    \         (let ([plucked-value (car plucked)])\n                  (if (and (even?\
    \ plucked-value)\n                           (< plucked-value (car arr)))\n  \
    \                    plucked\n                      (list (car arr) 0)))))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (define (pluck-helper\
    \ arr min-even-val min-even-index)\n    (cond\n      [(empty? arr) (list min-even-val\
    \ min-even-index)]\n      [(and (even? (first arr))\n            (or (zero? min-even-val)\n\
    \                (< (first arr) min-even-val)))\n       (pluck-helper (rest arr)\
    \ (first arr) (add1 min-even-index))]\n      [else (pluck-helper (rest arr) min-even-val\
    \ (add1 min-even-index))]))\n  (pluck-helper arr 0 0))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (car arr)) (list (car arr) 0)]\n        [else (let ([plucked\
    \ (pluck (cdr arr))])\n                (if (empty? plucked)\n                \
    \    '()\n                    (list (car plucked) (+ 1 (cadr plucked)))))]))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index-of min-even arr))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n        [else (let*\
    \ ([plucked (pluck (cdr arr))]\n                     [index (if (empty? plucked)\
    \ 0 (add1 (cadr plucked)))]\n                     [value (if (empty? plucked)\
    \ (car arr) (car plucked))])\n                (if (and (even? (car arr)) (< (car\
    \ arr) value))\n                    (list (car arr) 0)\n                    (list\
    \ value index)))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (list min-even (index-of min-even arr))))))\n", "  (define (pluck-helper arr)\n\
    \    (cond [(empty? arr) (list 0 0)]\n          [(even? (first arr)) (list (first\
    \ arr) 0)]\n          [else (let* ([plucked (pluck-helper (rest arr))]\n     \
    \                  [value (first plucked)]\n                       [index (second\
    \ plucked)])\n                  (if (and (even? value)\n                     \
    \      (even? (first arr))\n                           (< value (first arr)))\n\
    \                      (list value (+ index 1))\n                      (list (first\
    \ arr) (+ index 1))))]))\n  (pluck-helper arr))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (car arr)) (list (car arr) 0)]\n        [else (let ([plucked\
    \ (pluck (cdr arr))])\n                (if (empty? plucked)\n                \
    \    '()\n                    (let ([plucked-val (car plucked)])\n           \
    \           (if (even? plucked-val)\n                          (list plucked-val\
    \ (+ 1 (cadr plucked)))\n                          '()))))]))\n", "  (cond\n \
    \   [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list\
    \ (apply min (filter even? arr)) (index (apply min (filter even? arr)) arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (let ([min-even-index (index-of min-even arr)])\n  \
    \              (list min-even min-even-index)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (find-index min-even arr))))))\n", "  (cond [(empty? arr) '()]\n  \
    \      [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (define (pluck-helper arr min-even-value min-even-index)\n \
    \   (cond\n      [(empty? arr) (list min-even-value min-even-index)]\n      [(and\
    \ (even? (first arr)) (< (first arr) min-even-value))\n       (pluck-helper (rest\
    \ arr) (first arr) 0)]\n      [(and (even? (first arr)) (= (first arr) min-even-value))\n\
    \       (pluck-helper (rest arr) min-even-value (+ min-even-index 1))]\n     \
    \ [else (pluck-helper (rest arr) min-even-value (+ min-even-index 1))]))\n  (pluck-helper\
    \ arr 100000 -1))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr))\
    \ (list (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n    \
    \            (if (empty? plucked)\n                    '()\n                 \
    \   (list (car plucked) (+ 1 (cadr plucked)))))]))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (define\
    \ (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr) (list\
    \ min-value min-index)]\n      [(and (even? (first arr))\n            (or (zero?\
    \ min-value)\n                (< (first arr) min-value)))\n       (pluck-helper\
    \ (rest arr) 0 (first arr))]\n      [(and (even? (first arr))\n            (not\
    \ (zero? min-value))\n            (= (first arr) min-value))\n       (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr)\
    \ (+ 1 min-index) min-value)]))\n  (pluck-helper arr 0 0))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([smallest\
    \ (apply min evens)])\n          (list smallest (index arr smallest))))))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else\
    \ (list (min (filter even? arr)) (index-of (min (filter even? arr)) arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index-of min-even arr))))))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n       \
    \ [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck\
    \ (rest arr))])\n                (if (empty? plucked)\n                    '()\n\
    \                    (list (first plucked) (+ 1 (second plucked)))))]))\n", " \
    \ (let loop ((arr arr) (min-even #f) (min-even-index #f))\n    (cond\n      [(empty?\
    \ arr) (if min-even (list min-even min-even-index) '())]\n      [(and (even? (first\
    \ arr)) (or (not min-even) (< (first arr) min-even)))\n       (loop (rest arr)\
    \ (first arr) (add1 (length arr)))]\n      [else (loop (rest arr) min-even min-even-index)])))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min (apply min evens)])\n\
    \              (list min (index-of min arr)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n      '()\n \
    \     (let ([evens (filter even? arr)])\n        (if (empty? evens)\n        \
    \    '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (define (pluck-helper arr min-even\
    \ min-even-index)\n    (cond [(empty? arr) (list min-even min-even-index)]\n \
    \         [(even? (first arr))\n           (if (or (zero? min-even) (< (first\
    \ arr) min-even))\n               (pluck-helper (rest arr) (first arr) 0)\n  \
    \             (pluck-helper (rest arr) min-even (+ 1 min-even-index)))]\n    \
    \      [else (pluck-helper (rest arr) min-even min-even-index)]))\n  (pluck-helper\
    \ arr 0 0))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n       \
    \         (if (empty? plucked)\n                    '()\n                    (list\
    \ (first plucked) (+ 1 (second plucked)))))]))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let ([plucked\
    \ (pluck (rest arr))])\n                (if (empty? plucked)\n               \
    \     '()\n                    (list (first plucked) (+ 1 (second plucked)))))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest-even\
    \ (first arr)])\n       (for/fold ([smallest-even-index 0])\n                \
    \ ([i (in-range (length arr))])\n         (if (and (even? (list-ref arr i))\n\
    \                  (< (list-ref arr i) smallest-even))\n             (values (list-ref\
    \ arr i) i)\n             (values smallest-even smallest-even-index)))]\n    \
    \   (list smallest-even smallest-even-index))]\n    [else (pluck (rest arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list\
    \ (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n          \
    \      (if (empty? plucked) '()\n                    (let ([smallest (car plucked)])\n\
    \                      (if (and (even? smallest) (< (car arr) smallest))\n   \
    \                       (list (car arr) 0)\n                          (list smallest\
    \ (+ 1 (cadr plucked)))))))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (if (empty? plucked)\n                    '()\n   \
    \                 (list (first plucked) (+ 1 (second plucked)))))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            '()\n         \
    \   (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (let* ([rest\
    \ (pluck (rest arr))]\n                     [rest-val (first rest)])\n       \
    \         (if (and (not (empty? rest))\n                         (or (empty? (first\
    \ rest))\n                             (< (first rest) (first arr))))\n      \
    \              (list (first rest) (+ 1 (second rest)))\n                    (list\
    \ (first arr) 0)))])\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            '()\n        \
    \    (let ([min-even (apply min evens)])\n              (let ([min-even-index\
    \ (index-of min-even arr)])\n                (list min-even min-even-index)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([evens (filter even? arr)])\n       \
    \ (if (null? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty?\
    \ evens)\n        '()\n        (let ([min-even (apply min evens)])\n         \
    \ (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (if (null? arr)\n      '()\n \
    \     (let ([evens (filter even? arr)])\n        (if (null? evens)\n         \
    \   '()\n            (let ([smallest (apply min evens)])\n              (list\
    \ smallest (index arr smallest)))))))\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([evens (filter even? arr)])\n        (if (empty? evens)\n          \
    \  '()\n            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            '()\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (let ([evens (filter even? arr)])\n   \
    \ (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            '()\n            (list\
    \ min-even (index arr min-even))))))\n", "  (cond [(empty? arr) '()]\n       \
    \ [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n \
    \   (if (empty? evens)\n        '()\n        (list min-even (index-of min-even\
    \ arr)))))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([plucked (pluck (rest arr))])\n       \
    \         (if (empty? plucked)\n                    '()\n                    (list\
    \ (first plucked) (+ 1 (second plucked)))))]))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (if (empty? evens)\n                           '()\n       \
    \                    (apply min evens))]\n             [min-even-index (if (empty?\
    \ min-even)\n                                 '()\n                          \
    \       (index-of min-even arr))])\n        (if (empty? min-even-index)\n    \
    \        '()\n            (list min-even min-even-index)))))\n", "  (cond\n  \
    \  [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list\
    \ (min (filter even? arr)) (index (min (filter even? arr)) arr))]))\n", "  (define\
    \ (pluck-helper arr acc)\n    (cond [(empty? arr) acc]\n          [(even? (first\
    \ arr))\n           (pluck-helper (rest arr) (cons (first arr) acc))]\n      \
    \    [else (pluck-helper (rest arr) acc)]))\n  (let ([evens (pluck-helper arr\
    \ '())]\n        [min-even (apply min evens)])\n    (if (empty? evens)\n     \
    \   '()\n        (list min-even (index-of min-even arr)))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (let ([plucked (pluck (rest arr))])\n                (cond [(empty? plucked)\
    \ '()]\n                      [(and (even? (first plucked)) (< (first plucked)\
    \ (first arr))) plucked]\n                      [else (list (first arr) (+ 1 (second\
    \ plucked)))]))]))\n", "  (let* ([evens (filter even? arr)]\n         [smallest-even\
    \ (apply min evens)])\n    (if (null? evens)\n        '()\n        (list smallest-even\
    \ (index arr smallest-even)))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (if (empty? plucked)\n                    '()\n   \
    \                 (list (first plucked) (+ 1 (second plucked)))))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index-of min-even arr)))))))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (let ([result (pluck (rest arr))])\n                (if (empty? result)\n  \
    \                  '()\n                    (list (first result) (+ 1 (second\
    \ result)))))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (cons (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n  \
    \  [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr))\n     (let ([min-even (first arr)])\n       (for/fold ([min-even-index\
    \ 0]) ([i (in-naturals)])\n         (if (and (even? (list-ref arr i))\n      \
    \            (< (list-ref arr i) min-even))\n             (values (list-ref arr\
    \ i) i)\n             (values min-even min-even-index)))]\n       (list min-even\
    \ min-even-index))]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr)\
    \ '()]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (let\
    \ ([plucked (pluck (rest arr))])\n                (cond [(empty? plucked) '()]\n\
    \                      [(and (even? (first plucked))\n                       \
    \     (< (first plucked) (first arr))) plucked]\n                      [else (list\
    \ (first arr) 0)]))]))\n", "  (let ([evens (filter even? arr)])\n    (if (null?\
    \ evens)\n        '()\n        (let ([min (apply min evens)])\n          (list\
    \ min (index-of min arr))))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (car arr)) (list (car arr) 0)]\n        [else (pluck (cdr arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (define evens (filter even? arr))\n      (if\
    \ (empty? evens)\n          '()\n          (define min-even (apply min evens))\n\
    \          (define min-even-index (index-of min-even arr))\n          (list min-even\
    \ min-even-index))))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            '()\n            (let ([min-even (apply min evens)])\n \
    \             (list min-even (index min-even arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list (apply min\
    \ (filter even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n", " \
    \ (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n \
    \       [else (pluck (cdr arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (car arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (list (first plucked)\
    \ (+ 1 (second plucked)))))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (cond [(empty? plucked) '()]\n                    \
    \  [(even? (first plucked)) (list (first plucked) (+ 1 (second plucked)))]\n \
    \                     [else (list (first plucked) (+ 1 (second plucked))))]))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (list min-even\
    \ (index-of min-even arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if\
    \ (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n \
    \         (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (car arr)) (list (car arr) 0)]\n    [else (let ([plucked (pluck\
    \ (cdr arr))])\n            (if (empty? plucked)\n                '()\n      \
    \          (if (and (even? (car plucked))\n                         (< (car plucked)\
    \ (car arr)))\n                    plucked\n                    (list (car arr)\
    \ 0))))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([res (pluck (rest arr))])\n           \
    \     (if (empty? res) '()\n                    (list (first res) (+ 1 (second\
    \ res)))))]))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            '()\n            (list min-even (index arr min-even))))))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n  \
    \      [else (let ([plucked (pluck (cdr arr))])\n                (if (empty? plucked)\n\
    \                    '()\n                    (list (car plucked) (+ 1 (cadr plucked)))))]))\n",
  "  (define (helper arr min-index min-value)\n    (cond [(empty? arr) (list min-value\
    \ min-index)]\n          [(and (even? (first arr))\n                (or (zero?\
    \ min-value)\n                    (< (first arr) min-value)))\n           (helper\
    \ (rest arr) 0 (first arr))]\n          [(and (even? (first arr))\n          \
    \      (= (first arr) min-value))\n           (helper (rest arr) (+ 1 min-index)\
    \ min-value)]\n          [else (helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (helper arr 0 0))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            '()\n            (list min-even (index-of min-even arr))))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([evens (filter\
    \ even? arr)])\n       (if (empty? evens)\n           '()\n           (let ([min-even\
    \ (apply min evens)])\n             (list min-even (index-of min-even arr))\n\
    \             )\n           )\n       )\n     ]\n    [else (pluck (rest arr))]\n\
    \    )\n  )\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even?\
    \ arr)]\n             [min-even (apply min evens)])\n        (if (empty? evens)\n\
    \            '()\n            (list min-even (index arr min-even))))))\n", " \
    \ (define (pluck-helper arr min-even-val min-even-idx)\n    (cond [(empty? arr)\
    \ (list min-even-val min-even-idx)]\n          [(= (remainder (first arr) 2) 0)\n\
    \           (cond [(= (first arr) min-even-val)\n                  (pluck-helper\
    \ (rest arr) min-even-val (+ min-even-idx 1))]\n                 [(< (first arr)\
    \ min-even-val)\n                  (pluck-helper (rest arr) (first arr) (+ min-even-idx\
    \ 1))]\n                 [else (pluck-helper (rest arr) min-even-val (+ min-even-idx\
    \ 1))])]\n          [else (pluck-helper (rest arr) min-even-val (+ min-even-idx\
    \ 1))]))\n  (pluck-helper arr 1000000 -1))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        '()\n        (let ([min-even (apply min evens)])\n          (list min-even\
    \ (index-of min-even arr))))))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (car arr)) (list (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n\
    \                (if (empty? plucked) '()\n                    (let ([plucked-val\
    \ (car plucked)])\n                      (if (even? plucked-val) (list plucked-val\
    \ (+ 1 (cadr plucked)))\n                          (list (car arr) 0))))))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even?\
    \ arr)]\n             [min-even (apply min evens)])\n        (if (empty? evens)\n\
    \            '()\n            (list min-even (index-of min-even arr))))))\n",
  "  (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(and (even? (first arr))\n               \
    \ (or (zero? min-value)\n                    (< (first arr) min-value)))\n   \
    \        (pluck-helper (rest arr) 0 (first arr))]\n          [(and (even? (first\
    \ arr))\n                (= (first arr) min-value))\n           (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value)]\n          [else (pluck-helper (rest\
    \ arr) (+ 1 min-index) min-value)]))\n  (pluck-helper arr 0 0))\n", "  (cond [(empty?\
    \ arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n        [else (let\
    \ ([plucked (pluck (cdr arr))])\n                (if (empty? plucked)\n      \
    \              '()\n                    (list (car plucked) (+ 1 (cadr plucked)))))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(and (even? (first arr)) (empty? (rest arr))) (list\
    \ (first arr) 0)]\n        [(even? (first arr)) (list (first arr) 0)]\n      \
    \  [else (let ([rest-pluck (pluck (rest arr))])\n                (if (empty? rest-pluck)\n\
    \                    '()\n                    (list (first rest-pluck) (+ 1 (second\
    \ rest-pluck)))))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr))\n     (let ([evens (filter even? arr)])\n       (if (empty? evens)\n \
    \          '()\n           (let ([min-even (apply min evens)])\n             (list\
    \ min-even (index-of min-even arr))\n             )\n           )\n       )\n\
    \     ]\n    [else (pluck (rest arr))]\n    )\n  )\n", "  (define (pluck-helper\
    \ arr min-index min-value)\n    (cond [(empty? arr) (list min-value min-index)]\n\
    \          [(even? (first arr))\n           (if (and (zero? min-value) (zero?\
    \ min-index))\n               (pluck-helper (rest arr) 0 (first arr))\n      \
    \         (if (< (first arr) min-value)\n                   (pluck-helper (rest\
    \ arr) 0 (first arr))\n                   (pluck-helper (rest arr) min-index min-value)))]\n\
    \          [else (pluck-helper (rest arr) min-index min-value)]))\n  (pluck-helper\
    \ arr -1 -1))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list\
    \ (car arr) 0)]\n        [else (let ([plucked (pluck (cdr arr))])\n          \
    \      (if (empty? plucked) '()\n                    (let ([plucked-value (car\
    \ plucked)])\n                      (if (even? plucked-value)\n              \
    \            (list plucked-value (+ 1 (cadr plucked)))\n                     \
    \     (list (car arr) 0))))))]))\n", "  (define (pluck-helper arr acc)\n    (if\
    \ (null? arr)\n        acc\n        (let ([x (car arr)])\n          (if (and (even?\
    \ x) (or (null? acc) (< x (car acc))))\n              (pluck-helper (cdr arr)\
    \ (list x (length acc)))\n              (pluck-helper (cdr arr) acc)))))\n  (pluck-helper\
    \ arr '()))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (let ([res (pluck (rest arr))])\n           \
    \     (if (empty? res)\n                    '()\n                    (list (first\
    \ res) (+ 1 (second res)))))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([res (pluck (rest arr))])\n\
    \                (cond [(empty? res) '()]\n                      [(even? (first\
    \ res)) (list (first res) (+ 1 (second res)))]\n                      [else (list\
    \ (first res) (+ 1 (second res)))]))]))\n", "  (if (empty? arr)\n      '()\n \
    \     (let ([evens (filter even? arr)])\n        (if (empty? evens)\n        \
    \    '()\n            (let ([min-even (apply min evens)])\n              (let\
    \ ([min-even-index (index-of min-even arr)])\n                (list min-even min-even-index)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index arr min-even))))))\n", "  (define (pluck-helper\
    \ arr min-even-index min-even-value)\n    (cond [(empty? arr) (list min-even-value\
    \ min-even-index)]\n          [(and (even? (first arr))\n                (or (zero?\
    \ min-even-value)\n                    (< (first arr) min-even-value)))\n    \
    \       (pluck-helper (rest arr) 0 (first arr))]\n          [else (pluck-helper\
    \ (rest arr) (+ min-even-index 1) min-even-value)]))\n  (pluck-helper arr 0 0))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr))\n         (let ([min-even\
    \ (first arr)])\n           (for/fold ([min-even-index 0]\n                  \
    \    [min-even-value min-even])\n               ([i (in-list (rest arr))])\n \
    \            (if (and (even? i) (< i min-even))\n                 (values i i)\n\
    \                 (values min-even-index min-even-value)))))\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list\
    \ (car arr) 0)]\n        [else (let ([res (pluck (cdr arr))])\n              \
    \  (if (empty? res)\n                    '()\n                    (list (car res)\
    \ (+ 1 (cadr res)))))]))\n", "  (cond\n    [(empty? arr) '()]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min\
    \ (apply min evens)])\n          (list min (index-of min arr))))))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n       \
    \ [else (let ([plucked (pluck (cdr arr))])\n                (if (empty? plucked)\n\
    \                    '()\n                    (let ([plucked-value (car plucked)])\n\
    \                      (if (even? plucked-value)\n                          (list\
    \ plucked-value (add1 (cadr plucked)))\n                          '()))))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (car arr)) (list (car arr) 0)]\n  \
    \      [else (let ([plucked (pluck (cdr arr))])\n                (cond [(empty?\
    \ plucked) '()]\n                      [(even? (car plucked)) (if (< (car plucked)\
    \ (car arr))\n                                                 plucked\n     \
    \                                            (list (car arr) 0))]\n          \
    \            [else (list (car plucked) (+ 1 (cadr plucked)))]))]))\n", "  (cond\n\
    \    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else (list\
    \ (apply min (filter even? arr)) (index (apply min (filter even? arr)) arr))]))\n",
  "  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked) '()\n                    (let ([plucked-val (first plucked)\n     \
    \                      [plucked-idx (second plucked)]]\n                     \
    \ (if (and (even? plucked-val)\n                               (< plucked-val\
    \ (first arr)))\n                          plucked\n                         \
    \ (list (first arr) (add1 plucked-idx))))))]))\n", "  (let* ([evens (filter even?\
    \ arr)]\n         [min-even (apply min evens)])\n    (if (empty? evens)\n    \
    \    '()\n        (list min-even (index-of min-even arr)))))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-index\
    \ (find-min-index arr)])\n       (list (list (first arr) min-index)))]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (car\
    \ arr)) (list (car arr) 0)]\n        [else\n         (let* ([plucked (pluck (cdr\
    \ arr))]\n                [plucked-value (car plucked)]\n                [plucked-index\
    \ (cadr plucked)])\n           (cond [(empty? plucked) (list (car arr) 0)]\n \
    \                [(> (car arr) plucked-value) (list plucked-value (+ plucked-index\
    \ 1))]\n                 [else (list (car arr) 0)]))]))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (let loop ([arr arr] [min-even #f] [min-even-index #f])\n\
    \    (cond [(empty? arr) (if min-even (list min-even min-even-index) '())]\n \
    \         [(even? (first arr))\n           (if (or (not min-even) (< (first arr)\
    \ min-even))\n               (loop (rest arr) (first arr) 0)\n               (loop\
    \ (rest arr) min-even (+ min-even-index 1)))]\n          [else (loop (rest arr)\
    \ min-even (+ min-even-index 1))])))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        '()\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            '()\n            (let ([min-even (apply min evens)])\n          \
    \    (list min-even (index-of min-even arr)))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        '()\n        (let ([min-even (apply\
    \ min evens)])\n          (list min-even (index-of min-even arr))))))\n", "  (cond\
    \ [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n   \
    \     [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr min-val min-idx)\n\
    \    (if (empty? arr)\n        (if (zero? min-val)\n            '()\n        \
    \    (list min-val min-idx))\n        (let ([val (first arr)])\n          (if\
    \ (even? val)\n              (if (zero? min-val)\n                  (pluck-helper\
    \ (rest arr) val 0)\n                  (if (< val min-val)\n                 \
    \     (pluck-helper (rest arr) val 0)\n                      (pluck-helper (rest\
    \ arr) min-val (+ min-idx 1))))\n              (pluck-helper (rest arr) min-val\
    \ (+ min-idx 1))))))\n  (pluck-helper arr 0 0))\n", "  (cond [(empty? arr) '()]\n\
    \        [(even? (car arr)) (list (car arr) 0)]\n        [else (pluck (cdr arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n \
    \   [else (pluck (cdr arr))]))\n", "  (cond [(empty? arr) '()]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([plucked (pluck (rest\
    \ arr))])\n                (cond [(empty? plucked) '()]\n                    \
    \  [(even? (first plucked)) (list (first plucked) (+ 1 (second plucked)))]\n \
    \                     [else (list (first plucked) (+ 1 (second plucked))))]))]))\n",
  "  (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n \
    \   (if (empty? evens)\n        '()\n        (list min-even (index arr min-even)))))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (let ([res (pluck (rest arr))])\n            (if (empty? res)\n   \
    \             '()\n                (list (first res) (+ 1 (second res)))))]))\n",
  "  (match arr\n    [(list) (list)]\n    [(list x) (if (even? x) (list x 0) (list))]\n\
    \    [(list x xs ...)\n     (let ([evens (filter even? arr)])\n       (if (empty?\
    \ evens)\n           (list)\n           (let ([min-even (apply min evens)])\n\
    \             (let ([index (index-of min-even arr)])\n               (list min-even\
    \ index)))))]))\n", "  (cond [(empty? arr) '()]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (let* ([plucked (pluck (rest arr))]\n \
    \                    [plucked-val (first plucked)]\n                     [plucked-idx\
    \ (second plucked)])\n                (if (and (not (empty? plucked))\n      \
    \                   (< (first arr) plucked-val))\n                    (list (first\
    \ arr) 0)\n                    (list plucked-val (+ 1 plucked-idx))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
