name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; Examples:\n(define (search lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) max-freq))\n\
    \          (return x))))\n    -1))\n", "  (define (helper lst)\n    (cond\n  \
    \    [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (let ([max-val (apply max lst)])\n    (define (search-helper\
    \ lst)\n      (cond [(empty? lst) -1]\n            [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n            [else (search-helper (rest lst))]))\n\
    \    (search-helper (range 1 (add1 max-val)))))\n", "  (cond [(empty? lst) -1]\n\
    \        [(>= (count (first lst) lst) (first lst)) (first lst)]\n        [else\
    \ (search (rest lst))]))\n", "  (let ([max (apply max lst)])\n    (for/first ([i\
    \ (in-range 1 (add1 max))])\n      (let ([count (count i lst)])\n        (when\
    \ (and (>= count i) (> i 0))\n          i)))))\n", "  (let ([freq (map (lambda\
    \ (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n   \
    \             #:when (and (not (equal? (car x) 0))\n                         \
    \   (or (equal? (car x) (cadr x))\n                                (equal? (car\
    \ x) (cadr x) 1))))\n      (car x))))\n", "  (let ([lst (sort lst <)])\n    (for/fold\
    \ ([res -1]) ([x lst])\n      (if (>= (count x lst) x)\n          (max res x)\n\
    \          res))))\n", "  (let ([freq (map (\u03BB (x) (list x (count x lst)))\
    \ (remove-duplicates lst))])\n    (for/first ([f freq] #:when (and (> (car f)\
    \ 0) (>= (car f) (cadr f))))\n      (car f))))\n", "  (define (greatest-freq lst)\n\
    \    (define (greatest-freq-helper lst)\n      (cond\n        [(empty? lst) -1]\n\
    \        [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n        [else (greatest-freq-helper (rest lst))]))\n    (greatest-freq-helper\
    \ (sort lst <)))\n  (greatest-freq lst))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\
    \ i -1))))\n", "  (let ([lst (sort lst <)])\n    (let loop ([lst lst] [i 1])\n\
    \      (cond [(empty? lst) -1]\n            [(= i (length lst)) -1]\n        \
    \    [(= i (car lst)) i]\n            [else (loop (cdr lst) (+ i 1))]))))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst (lambda\
    \ (x y) (> x y)))))\n", "  (define (greatest-frequency lst)\n    (let loop ((lst\
    \ lst) (max-freq 0) (max-freq-num 0))\n      (cond ((null? lst) max-freq-num)\n\
    \            ((> (length (filter (lambda (x) (= x (car lst))) lst)) max-freq)\n\
    \             (loop (cdr lst) (length (filter (lambda (x) (= x (car lst))) lst))\
    \ (car lst)))\n            (else (loop (cdr lst) max-freq max-freq-num)))))\n\
    \  (let loop ((lst lst) (max-num 0))\n    (cond ((null? lst) max-num)\n      \
    \    ((> (car lst) max-num) (loop (cdr lst) (car lst)))\n          (else (loop\
    \ (cdr lst) max-num)))))", "  (let* ([freq (make-hash)]\n         [max-freq (for/max\
    \ ([x lst])\n                     (hash-ref freq x (\u03BB () 0))\n          \
    \           (hash-set! freq x (+ 1 (hash-ref freq x (\u03BB () 0))))\n       \
    \              (hash-ref freq x))]\n         [max-val (for/max ([x lst])\n   \
    \                 (hash-ref freq x)\n                    x)])\n    (if (and (not\
    \ (zero? max-freq))\n             (not (zero? max-val))\n             (>= max-freq\
    \ max-val))\n        max-val\n        -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (= (hash-ref\
    \ freq x 0) max-freq)\n          (return x))))\n    -1))\n", "  (if (null? lst)\n\
    \      -1\n      (let ([max (apply max lst)])\n        (if (>= (count max lst)\
    \ max)\n            max\n            (search (remove max lst))))))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (for ([x lst])\n      (when (and (hash-ref freq x 0)\n                 (&gt;=\
    \ (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (>= (hash-ref freq i 0) i) (> i max-freq))\n          (set! max-freq i)))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (let ([freq (make-hash)])\n \
    \   (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply\
    \ max (hash-values freq))])\n      (for ([x lst])\n        (when (and (> x 0)\
    \ (= (hash-ref freq x 0) max-freq))\n          (return x))))\n    -1))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (let* ([freq (map (lambda (x) (list x (count\
    \ x lst))) lst)]\n         [freq-sorted (sort freq (lambda (x y) (&gt; (cadr x)\
    \ (cadr y))))])\n    (for/first ([x freq-sorted] #:when (&gt;= (cadr x) (car x)))\n\
    \      (car x))))\n", "  (define (search-helper lst max)\n    (cond\n      [(empty?\
    \ lst) max]\n      [(>= (count (first lst) lst) (first lst)) (search-helper (rest\
    \ lst) (first lst))]\n      [else (search-helper (rest lst) max)]))\n  (if (empty?\
    \ lst) -1 (search-helper lst -1)))\n", "  (let ([freq-table (make-hash)])\n  \
    \  (for ([x lst])\n      (hash-update! freq-table x add1 0))\n    (for ([x lst])\n\
    \      (when (and (> x 0) (>= x (hash-ref freq-table x 0)))\n        (return x)))\n\
    \    -1))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) (remove-duplicates\
    \ lst))])\n    (cond [(empty? freq) -1]\n          [(>= (second (first freq))\
    \ (first (first freq))) (first (first freq))]\n          [else (search (rest freq))])))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst)))\n", "  (define (helper lst)\n    (cond\
    \ ((null? lst) -1)\n          ((>= (length (filter (lambda (x) (= x (car lst)))\
    \ lst)) (car lst)) (car lst))\n          (else (helper (cdr lst)))))\n  (helper\
    \ (sort lst <)))\n", "  (if (null? lst)\n      -1\n      (let ([max (apply max\
    \ lst)])\n        (if (and (> max 0)\n                 (>= (count max lst) max))\n\
    \            max\n            (search (remove max lst))))))\n", "  (let loop ([lst\
    \ lst] [max 0])\n    (cond [(null? lst) max]\n          [(>= (count (car lst)\
    \ lst) (car lst)) (loop (cdr lst) (car lst))]\n          [else (loop (cdr lst)\
    \ max)])))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 1))\n    (for ([x lst])\n      (let ([f (hash-ref freq x 0)])\n\
    \        (when (>= f x)\n          (return x))))\n    -1))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n     \
    \   (return i)))\n    -1))\n", "  (define (search-helper lst max-freq max-val)\n\
    \    (if (null? lst)\n        max-val\n        (let* ([val (car lst)]\n      \
    \         [freq (count val lst)])\n          (if (and (> val 0) (>= freq val)\
    \ (> freq max-freq))\n              (search-helper (cdr lst) freq val)\n     \
    \         (search-helper (cdr lst) max-freq max-val)))))\n  (search-helper lst\
    \ 0 0))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (define (greatest-freq\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (greatest-freq (rest lst))]))\n  (greatest-freq\
    \ (sort lst >)))\n", "  (define (search-helper lst max)\n    (cond\n      [(empty?\
    \ lst) max]\n      [(>= (count (first lst) lst) (first lst)) (search-helper (rest\
    \ lst) (first lst))]\n      [else (search-helper (rest lst) max)]))\n  (search-helper\
    \ lst -1))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1\
    \ (add1 max))])\n      (and (>= (count i lst) i) i))))\n", "  (define (helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (helper (rest lst))]))\n  (helper (sort\
    \ lst >)))\n", "  (define (helper lst)\n    (cond [(empty? lst) -1]\n        \
    \  [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first\
    \ lst)]\n          [else (helper (rest lst))]))\n  (helper (sort lst #&gt;)))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (not (zero? (count i lst)))\n           (>= i (count i lst))\n   \
    \        i))))\n", "  (define (search-helper lst max)\n    (cond ((null? lst)\
    \ max)\n          ((>= (count (car lst) lst) (car lst)) (search-helper (cdr lst)\
    \ (car lst)))\n          (else (search-helper (cdr lst) max))))\n  (search-helper\
    \ lst -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (hash-ref freq x 0)\n\
    \                 (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0) (= (hash-ref freq x 0) max-freq))\n          (return\
    \ x))))\n    -1))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst\
    \ <)))\n", "  (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n\
    \    (cond [(> max-freq 0) (apply max (filter (lambda (x) (= (count x lst) max-freq))\
    \ lst))]\n          [else -1])))\n", "  (let ([freq (make-hash)])\n    (for ([e\
    \ lst])\n      (hash-update! freq e add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([e lst])\n        (when (= (hash-ref freq e 0) max-freq)\n\
    \          (return e))))\n    -1))\n", "  (define (helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst))\
    \ (first lst)) (first lst)]\n          [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst >)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 1))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n    (for ([x lst])\n\
    \      (when (and (> (hash-ref freq x 0) x) (> x (hash-ref freq 0 0)))\n     \
    \   (hash-set! freq 0 x)))\n    (hash-ref freq 0 -1)))\n", "  (define (search-helper\
    \ lst freq-lst)\n    (cond [(empty? lst) -1]\n          [(>= (car lst) (length\
    \ freq-lst))\n           (search-helper (cdr lst) (append freq-lst (list (car\
    \ lst))))]\n          [(>= (list-ref freq-lst (car lst)) (car lst))\n        \
    \   (car lst)]\n          [else\n           (search-helper (cdr lst) (append (take\
    \ (car lst) freq-lst) (list (+ 1 (list-ref freq-lst (car lst)))) (drop (+ 1 (car\
    \ lst)) freq-lst)))]))\n  (search-helper lst (list 0)))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([i lst]\n                #:when (>= (count i lst)\
    \ i))\n      i)))\n", "  (cond\n    [(empty? lst) -1]\n    [(> (count (first lst)\
    \ lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (let\
    \ ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n    \
    \  (if (>= (count i lst) i) i -1))))\n", "  (cond\n    [(empty? lst) -1]\n   \
    \ [(> (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest\
    \ lst))]))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (+ 1 (hash-ref freq i 0))))\n    (let ([max -1])\n      (for ([i lst])\n\
    \        (when (and (>= (hash-ref freq i 0) i)\n                   (> i max))\n\
    \          (set! max i)))\n      max)))\n", "  (define (search-helper lst)\n \
    \   (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n\
    \      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n\
    \    -1))\n", "  (let loop ([lst lst] [max -1])\n    (cond [(empty? lst) max]\n\
    \          [(>= (count (first lst) lst) (first lst)) (loop (rest lst) (first lst))]\n\
    \          [else (loop (rest lst) max)])))\n", "  (let ([lst (sort lst #&gt;)])\n\
    \    (for/first ([i (in-list lst)]\n                #:when (and (&gt; i 0)\n \
    \                           (&gt;= i (count (in-list lst) i))))\n      i)))\n",
  "  (let ((max-value -1)\n        (max-frequency 0))\n    (for ([i lst])\n      (let\
    \ ((frequency (count i lst)))\n        (when (and (&gt; i 0)\n               \
    \    (&gt;= frequency i)\n                   (&gt; frequency max-frequency))\n\
    \          (set! max-value i)\n          (set! max-frequency frequency))))\n \
    \   max-value))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i) i -1))))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (for ([i lst])\n      (when (and (hash-ref freq i 0)\n                 (&gt;=\
    \ (hash-ref freq i 0) i))\n        (return i)))\n    -1))\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count\
    \ i lst) i) i))))\n", "  (cond\n    [(empty? lst) -1]\n    [(> (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n    [else (search\
    \ (rest lst))]))\n", "  (cond [(empty? lst) -1]\n        [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n        [else (search (rest lst))]))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (count i lst)\n           (>= i (count i lst))\n           i))))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i\
    \ lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n      (if (and\
    \ (> i 0) (>= i (hash-ref freq i 0)))\n          (return i)))\n    -1))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i) i -1))))\n", "  (let loop ([lst lst] [freq (make-hash)]\
    \ [max-freq 0])\n    (cond [(empty? lst) (if (>= max-freq max-freq) max-freq -1)]\n\
    \          [else (let ([x (car lst)])\n                  (hash-set! freq x (+\
    \ 1 (hash-ref freq x 0)))\n                  (if (> (hash-ref freq x) max-freq)\n\
    \                      (loop (cdr lst) freq (hash-ref freq x))\n             \
    \         (loop (cdr lst) freq max-freq)))])))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n\
    \      (when (and (> x 0)\n                 (>= (hash-ref freq x 0) x))\n    \
    \    (return x)))\n    -1))\n", "  (let ([max-freq (apply max (map (lambda (x)\
    \ (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 0)\n\
    \        -1\n        (apply max (filter (lambda (x) (and (> x 0) (>= (length (filter\
    \ (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([lst (sort lst >)])\n\
    \    (for/first ([x lst]\n                #:when (and (> x 0)\n              \
    \              (>= x (count x lst))))\n      x)))\n", "  (let loop ([lst lst]\
    \ [max 0])\n    (cond [(empty? lst) max]\n          [(>= (count (first lst) lst)\
    \ (first lst))\n           (loop (rest lst) (first lst))]\n          [else (loop\
    \ (rest lst) max)])))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n \
    \     (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n\
    \          (return x))))\n    -1))\n", "  (define (helper lst)\n    (cond\n  \
    \    [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst >)))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (let loop ([lst lst])\n      (cond [(null? lst) -1]\n            [(>= (hash-ref\
    \ freq (car lst) 0) (car lst)) (car lst)]\n            [else (loop (cdr lst))]))))\n",
  "  (let loop ([lst lst] [max 0])\n    (cond [(empty? lst) max]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (loop (rest lst) (first lst))]\n          [else\
    \ (loop (rest lst) max)])))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (and (count i lst)\n           (>= i (count\
    \ i lst))\n           i))))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst max-val)\n    (cond [(empty? lst) max-val]\n     \
    \     [(>= (count (first lst) lst) (first lst))\n           (search-helper (rest\
    \ lst) (first lst))]\n          [else (search-helper (rest lst) max-val)]))\n\
    \  (if (empty? lst) -1 (search-helper lst 0)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) max-freq))\n          (return x))))\n    -1))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (when (and (> x 0)\n                 (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (cond\n    [(empty? lst)\
    \ -1]\n    [(> (count (first lst) lst) (first lst)) (first lst)]\n    [else (search\
    \ (rest lst))]))\n", "  (cond [(empty? lst) -1]\n        [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n        [else (search (rest lst))]))\n", " \
    \ (let loop ([lst lst] [max -1])\n    (cond [(empty? lst) max]\n          [(>=\
    \ (count (first lst) lst) (first lst)) (loop (rest lst) (first lst))]\n      \
    \    [else (loop (rest lst) max)])))\n", "  (let ([max (apply max lst)])\n   \
    \ (for/first ([n (in-range 1 max)])\n      (and (>= (count n lst) n) n))))\n",
  "  (let loop ([lst lst] [max 0])\n    (cond [(null? lst) max]\n          [(>= (count\
    \ (car lst) lst) (car lst)) (loop (cdr lst) (car lst))]\n          [else (loop\
    \ (cdr lst) max)])))\n", "  (define (search-helper lst max)\n    (cond\n     \
    \ [(empty? lst) max]\n      [(>= (count (first lst) lst) (first lst)) (search-helper\
    \ (rest lst) (first lst))]\n      [else (search-helper (rest lst) max)]))\n  (search-helper\
    \ lst -1))\n", "  (let ([freq (make-hash)])\n    (for ([e lst])\n      (hash-update!\
    \ freq e add1 0))\n    (for ([e lst])\n      (when (and (hash-ref freq e 0)\n\
    \                 (>= (hash-ref freq e 0) e))\n        (return e)))\n    -1))\n",
  "  (cond\n    [(empty? lst) -1]\n    [(> (length (filter (lambda (x) (= x (first\
    \ lst))) lst)) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n              \
    \  [y (in-list lst)]\n                #:when (and (not (= x y))\n            \
    \                (= x (count y lst))))\n      y)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (= (hash-ref freq i 0) max-freq))\n          (return i))))\n    -1))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (define (search-helper lst)\n  \
    \  (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n\
    \          (return i))))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for\
    \ ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when\
    \ (and (> x 0)\n                 (>= x (hash-ref freq x 0)))\n        (return\
    \ x)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let loop ([lst lst])\n      (cond [(empty? lst) -1]\n\
    \            [(>= (hash-ref freq (first lst) 0) (first lst)) (first lst)]\n  \
    \          [else (loop (rest lst))]))))\n", "  (let ([max-freq (apply max (map\
    \ (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (=\
    \ max-freq 0)\n        -1\n        (apply max (filter (lambda (x) (= (length (filter\
    \ (lambda (y) (= x y)) lst)) x)) lst)))))\n", "  (define (search-helper lst)\n\
    \    (if (null? lst)\n        -1\n        (let* ([x (car lst)]\n             \
    \  [xs (cdr lst)]\n               [count (length (filter (lambda (y) (= x y))\
    \ xs))])\n          (if (and (> x 0) (>= x (+ count 1)))\n              x\n  \
    \            (search-helper xs)))))\n  (search-helper lst))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n   \
    \ (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n     \
    \   (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-set! freq i (+ 1 (hash-ref freq i 0))))\n    (let ([max-freq (apply\
    \ max (hash-values freq))])\n      (for ([i lst])\n        (when (and (> i 0)\
    \ (= max-freq (hash-ref freq i)))\n          (return i))))\n    -1))\n", "  (let\
    \ loop ([lst lst] [max 0])\n    (cond [(empty? lst) max]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (loop (rest lst) (first lst))]\n          [else\
    \ (loop (rest lst) max)])))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n\
    \    (for ([i lst])\n      (when (and (hash-ref freq i 0) (>= (hash-ref freq i\
    \ 0) i))\n        (return i)))\n    -1))\n", "  (let ([lst (sort lst <)])\n  \
    \  (for/first ([i lst]\n                #:when (and (> i 0)\n                \
    \            (>= i (count (filter (lambda (x) (= x i)) lst)))))\n      i)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0)\n                   (= (hash-ref freq i 0) max-freq))\n\
    \          (return i))))\n    -1))\n", "  (define (greatest-freq lst)\n    (define\
    \ (greatest-freq-helper lst)\n      (cond ((null? lst) '())\n            ((member\
    \ (car lst) (cdr lst)) (cons (car lst) (greatest-freq-helper (cdr lst))))\n  \
    \          (else (greatest-freq-helper (cdr lst)))))\n    (define (count-freq\
    \ lst)\n      (cond ((null? lst) '())\n            (else (cons (cons (car lst)\
    \ (count (car lst) lst)) (count-freq (remove (car lst) lst))))))\n    (define\
    \ (count x lst)\n      (cond ((null? lst) 0)\n            ((equal? x (car lst))\
    \ (+ 1 (count x (cdr lst))))\n            (else (count x (cdr lst)))))\n    (define\
    \ (remove x lst)\n      (cond ((null? lst) '())\n            ((equal? x (car lst))\
    \ (remove x (cdr lst)))\n            (else (cons (car lst) (remove x (cdr lst))))))\n\
    \    (define (greatest-freq-helper2 lst)\n      (cond ((null? lst) '())\n    \
    \        ((>= (cdr (car lst)) (car (car lst))) (cons (car (car lst)) (greatest-freq-helper2\
    \ (cdr lst))))\n            (else (greatest-freq-helper2 (cdr lst)))))\n    (cond\
    \ ((null? (greatest-freq-helper lst)) -1)\n          ((null? (greatest-freq-helper2\
    \ (count-freq (greatest-freq-helper lst)))) -1)\n          (else (car (greatest-freq-helper2\
    \ (count-freq (greatest-freq-helper lst)))))))\n  (greatest-freq lst))\n", " \
    \ (cond [(empty? lst) -1]\n        [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n        [else (search (rest lst))]))\n", "  (cond [(empty? lst) -1]\n\
    \        [(>= (count (first lst) lst) (first lst)) (first lst)]\n        [else\
    \ (search (rest lst))]))\n", "  (let ([freq (list->set (map (lambda (x) (count\
    \ x lst)) lst))])\n    (for/first ([x lst]\n                #:when (and (> x 0)\n\
    \                            (member x freq)))\n      x)))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n     \
    \   (return i)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (for ([i lst])\n      (when (and (>\
    \ i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n    -1))\n", "  (let\
    \ loop ([lst lst] [max -1])\n    (cond [(null? lst) max]\n          [(>= (count\
    \ (car lst) lst) (car lst)) (loop (cdr lst) (car lst))]\n          [else (loop\
    \ (cdr lst) max)])))\n", "  (let ([max-freq (apply max (map (\u03BB (x) (length\
    \ (filter (\u03BB (y) (= x y)) lst))) lst))])\n    (cond [(> max-freq 0) (apply\
    \ max (filter (\u03BB (x) (= (length (filter (\u03BB (y) (= x y)) lst)) max-freq))\
    \ lst))]\n          [else -1])))\n", "  (cond [(empty? lst) -1]\n        [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n        [else (search (rest\
    \ lst))]))\n", "  (let loop ([lst lst] [max 0])\n    (cond [(empty? lst) max]\n\
    \          [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\n\
    \           (loop (rest lst) (first lst))]\n          [else (loop (rest lst) max)])))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set! freq i (+ 1 (hash-ref\
    \ freq i 0))))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for\
    \ ([i lst])\n        (when (and (> i 0) (= max-freq (hash-ref freq i)))\n    \
    \      (return i))))\n    -1))\n", "  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n   \
    \   [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (for ([i lst])\n      (if (and (> i 0) (>= i (hash-ref freq i 0)))\n       \
    \   (return i)))\n    -1))\n", "  (define (freq x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n      [else (freq\
    \ x (rest lst))]))\n  (cond\n    [(empty? lst) -1]\n    [(>= (freq (first lst)\
    \ lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst >)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (+ max 1))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (letrec ([freq (lambda (x lst)\n                   (cond [(empty? lst) 0]\n \
    \                        [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n     \
    \                    [else (freq x (rest lst))]))]\n           [max (lambda (lst)\n\
    \                  (cond [(empty? lst) 0]\n                        [(> (first\
    \ lst) (max (rest lst))) (first lst)]\n                        [else (max (rest\
    \ lst))]))])\n    (let ([m (max lst)])\n      (cond [(>= (freq m lst) m) m]\n\
    \            [else -1]))))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x\
    \ (in-list lst)]\n                [n (in-naturals)])\n      (if (= (count x lst)\
    \ x)\n          x\n          -1))))\n", "  (let ([freq (make-hash)])\n    (for\
    \ ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when\
    \ (and (> x 0)\n                 (>= (hash-ref freq x 0) x))\n        (return\
    \ x)))\n    -1))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i (in-list lst)])\n        (when\
    \ (= (hash-ref freq i 0) max-freq)\n          (return i))))\n    -1))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n                [n\
    \ (in-naturals)])\n      (if (= x (count x lst))\n          x\n          -1))))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda (y) (= x\
    \ y)) lst))) lst))])\n    (if (= max-freq 0) -1\n        (apply max (filter (lambda\
    \ (x) (= (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n", "  (let loop\
    \ ([lst lst] [max 0])\n    (cond [(null? lst) max]\n          [(>= (count (car\
    \ lst) lst) (car lst)) (loop (cdr lst) (car lst))]\n          [else (loop (cdr\
    \ lst) max)])))\n", "  (let ([max (apply max lst)])\n    (for/first ([x (in-range\
    \ 1 (+ max 1))])\n      (and (>= (count x lst) x) x))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) max-freq))\n          (return x))))\n    -1))\n",
  "  (define (search-helper lst max)\n    (cond [(empty? lst) max]\n          [(>=\
    \ (count (first lst) lst) (first lst)) (search-helper (rest lst) (first lst))]\n\
    \          [else (search-helper (rest lst) max)]))\n  (search-helper lst -1))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (+ max 1))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= x (hash-ref freq x 0)))\n\
    \        (return x)))\n    -1))\n", "  (let loop ([lst lst] [max 0])\n    (if\
    \ (null? lst)\n        (if (&gt;= max (count max lst)) max -1)\n        (loop\
    \ (cdr lst) (max (car lst))))))\n", "  (let ([freq (make-hash)])\n    (for ([i\
    \ lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n      (let ([f\
    \ (hash-ref freq i 0)])\n        (when (and (> i 0) (>= f i))\n          (return\
    \ i))))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n     \
    \ (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0)\
    \ (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (define (search-helper\
    \ lst max-freq max-val)\n    (cond [(empty? lst) max-val]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst))\n           (search-helper\
    \ (rest lst) (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))]\n\
    \          [else (search-helper (rest lst) max-freq max-val)]))\n  (if (empty?\
    \ lst) -1\n      (search-helper lst 0 0)))\n", "  (let ([max-val (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max-val))])\n      (and (>= (count i lst)\
    \ i) i))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n          (return\
    \ x))))\n    -1))\n", "  (for/first ([x (in-list lst)]\n              [y (in-list\
    \ lst)]\n              #:when (and (equal? x y)\n                          (>\
    \ x (count y lst))))\n    x))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i) i -1))))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (cond [(empty? lst) -1]\n\
    \        [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n        [else (search (rest lst))]))\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count\
    \ i lst) i) i -1))))\n", "  (define (greatest-freq lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (greatest-freq (rest lst))]))\n  (greatest-freq\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0)\n            \
    \     (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let\
    \ loop ([lst lst] [max 0])\n    (cond [(empty? lst) max]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (loop (rest lst) (first lst))]\n          [else\
    \ (loop (rest lst) max)])))\n", "  (cond\n    [(empty? lst) -1]\n    [(> (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \ [else (search (rest lst))]))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i) i -1))))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i)\
    \ i))))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) (remove-duplicates\
    \ lst))])\n    (for/first ([x (in-list freq)]\n                #:when (and (>\
    \ (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([x (in-list lst)]\n                [y (in-list lst)]\n\
    \                #:when (and (equal? x y)\n                            (>= x (count\
    \ y lst))))\n      y)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq\
    \ x 0) x))\n          (return x)))\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x))\n          (return x)))\n      -1)))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i) i -1))))\n", "  (define (search-inner lst max)\n\
    \    (cond [(empty? lst) max]\n          [(>= (count (first lst) lst) (first lst))\
    \ (search-inner (rest lst) (first lst))]\n          [else (search-inner (rest\
    \ lst) max)]))\n  (if (empty? lst) -1 (search-inner lst -1)))\n", "  (letrec ([freq\
    \ (lambda (lst n)\n                   (cond [(empty? lst) 0]\n               \
    \          [(= (first lst) n) (+ 1 (freq (rest lst) n))]\n                   \
    \      [else (freq (rest lst) n)]))]\n           [greatest (lambda (lst)\n   \
    \                    (cond [(empty? lst) 0]\n                             [(>\
    \ (first lst) (greatest (rest lst))) (first lst)]\n                          \
    \   [else (greatest (rest lst))]))])\n    (let ([g (greatest lst)])\n      (cond\
    \ [(= (freq lst g) g) g]\n            [else -1]))))\n", "  (let loop ([lst lst]\
    \ [max-freq 0] [max-val 0])\n    (cond [(empty? lst) (if (>= max-freq max-val)\
    \ max-val -1)]\n          [(>= (count (first lst) lst) (first lst))\n        \
    \   (loop (rest lst) (count (first lst) lst) (first lst))]\n          [else (loop\
    \ (rest lst) max-freq max-val)])))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (define (greatest-frequency lst)\n    (define (frequency n lst)\n\
    \      (cond [(empty? lst) 0]\n            [(= n (first lst)) (+ 1 (frequency\
    \ n (rest lst)))]\n            [else (frequency n (rest lst))]))\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (frequency (first lst) lst) (first lst)) (first lst)]\n\
    \          [else (greatest-frequency (rest lst))]))\n  (greatest-frequency lst))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (helper (rest lst))]))\n  (helper (sort lst #>)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (car lst))) lst)) (car lst)) (car lst)]\n          [else (search-helper\
    \ (cdr lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", "  (define (helper\
    \ lst)\n    (define (freq x lst)\n      (cond\n        [(empty? lst) 0]\n    \
    \    [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n        [else (freq x (rest\
    \ lst))]))\n    (cond\n      [(empty? lst) -1]\n      [(>= (freq (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper lst))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (let ([freq (map (lambda (x) (list\
    \ x (count x lst))) lst)])\n    (for/first ([f freq]\n                #:when (and\
    \ (equal? (cadr f) (car f))\n                            (not (equal? (car f)\
    \ 0))))\n      (car f))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n\
    \          (return x))))\n    -1))\n", "  (define (helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst))\
    \ (first lst)) (first lst)]\n          [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (define (greatest-freq lst)\n    (let loop ((lst lst)\
    \ (freq (list)))\n      (cond ((null? lst) freq)\n            ((assoc (car lst)\
    \ freq)\n             (loop (cdr lst) (cons (cons (car lst) (+ 1 (cdr (assoc (car\
    \ lst) freq)))) (remove (assoc (car lst) freq) freq))))\n            (else (loop\
    \ (cdr lst) (cons (cons (car lst) 1) freq))))))\n  (let loop ((lst (greatest-freq\
    \ lst)) (max -1))\n    (cond ((null? lst) max)\n          ((and (>= (cdr (car\
    \ lst)) (car (car lst))) (> (cdr (car lst)) max))\n           (loop (cdr lst)\
    \ (cdr (car lst))))\n          (else (loop (cdr lst) max)))))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst (lambda (x y) (> x y)))))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (when (and (> x 0)\n                 (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (= (hash-ref\
    \ freq x 0) max-freq)\n          (return x))))\n    -1))\n", "  (let ((freq (make-hash)))\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let loop ([lst\
    \ lst])\n      (cond [(empty? lst) -1]\n            [(>= (hash-ref freq (first\
    \ lst) 0) (first lst)) (first lst)]\n            [else (loop (rest lst))]))))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (let ([max (apply max lst)])\n \
    \   (for/first ([i (in-range 1 (+ max 1))])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (let ([max-val (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max-val))])\n      (and (>= (count i lst) i) i))))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i) i -1))))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst #&gt;)))\n", "  (define (search-helper lst max-freq max-val)\n   \
    \ (cond\n      [(empty? lst) max-val]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (search-helper (rest lst) (count (first lst) lst) (first lst))]\n    \
    \  [else (search-helper (rest lst) max-freq max-val)]))\n  (search-helper lst\
    \ 0 0))\n", "  (let ([max (apply max lst)])\n    (for/or ([i (in-range 1 (add1\
    \ max))])\n      (and (count i lst)\n           (>= i (count i lst))\n       \
    \    i))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i) i -1))))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (for ([i lst])\n      (when (and (> (hash-ref freq i 0) i) (> i 0))\n      \
    \  (return i)))\n    -1))\n", "  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \          [else (search-helper (rest lst))]))\n  (search-helper (sort lst)))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort > lst)))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i) i -1))))\n", "  (let ([max-freq\
    \ (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n\
    \    (if (= max-freq 0)\n        -1\n        (apply max (filter (lambda (x) (and\
    \ (> x 0) (= (length (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (let ([max (apply max lst)])\n \
    \   (for/first ([i (in-range 1 (+ max 1))])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ #:key (lambda (x) (- x (count x lst))))))\n", "  (define (greatest-freq lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (greatest-freq (rest lst))]))\n  (greatest-freq\
    \ (sort > lst)))\n", "  (let loop ([lst lst] [max 0])\n    (cond [(empty? lst)\
    \ max]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst))\n           (loop (rest lst) (first lst))]\n          [else (loop (rest\
    \ lst) max)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
