name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n(define (search lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((= x\
    \ (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper lst))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max-key (hash-ref freq (max-key\
    \ freq))])\n      (if (and (> max-key 0) (>= max-key (max-key freq)))\n      \
    \    (max-key freq)\n          -1))))\n", "  (let ([freq-lst (map (lambda (x)\
    \ (list x (count x lst))) lst)])\n    (for/first ([x freq-lst]\n             \
    \   #:when (and (equal? (car x) (cadr x))\n                            (not (equal?\
    \ (car x) 1))))\n      (car x))))\n", "  (define (count n lst)\n    (cond ((null?\
    \ lst) 0)\n          ((= n (car lst)) (+ 1 (count n (cdr lst))))\n          (else\
    \ (count n (cdr lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst)\
    \ -1)\n          ((>= (count (car lst) lst) (car lst)) (car lst))\n          (else\
    \ (search-helper (cdr lst)))))\n  (search-helper lst))\n", "  (define (count x\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count\
    \ x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (let ([f (hash-ref freq x 0)])\n\
    \        (when (and (> f 0) (>= f x))\n          (return x))))\n    -1))\n", " \
    \ (let ([freq (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst)])\n\
    \    (cond [(>= (length (filter (lambda (x) (= x (length lst))) freq)) 1) (-1)]\n\
    \          [else (apply max (filter (lambda (x) (>= (list-ref freq x) x)) lst))])))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (if (and (> x 0) (>= x (hash-ref freq x 0)))\n\
    \          (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i\
    \ lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0)\n               \
    \    (= (hash-ref freq i 0) max-freq))\n          (return i))))\n    -1))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count n lst)\n   \
    \ (cond [(empty? lst) 0]\n          [(= n (first lst)) (+ 1 (count n (rest lst)))]\n\
    \          [else (count n (rest lst))]))\n  (define (search-aux lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-aux (rest lst))]))\n  (search-aux (sort lst <)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (if (and (> x 0)\n                 (= (hash-ref freq x 0) x)\n      \
    \           (>= x max-freq))\n            (return x)))\n      -1)))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (let ([max (apply max lst)])\n      (for ([x (in-range 1 max)])\n       \
    \ (when (and (hash-ref freq x 0)\n                   (>= (hash-ref freq x 0) x))\n\
    \          (return x)))\n      -1)))\n", "  (cond\n    [(empty? lst) -1]\n   \
    \ [(>= (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest\
    \ lst))]))\n", "  (define (search-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (let* ([curr (car lst)]\n               [new-acc (if (and (>\
    \ curr 0) (>= curr (length (filter (lambda (x) (= x curr)) lst))))\n         \
    \                   (max acc curr)\n                            acc)])\n     \
    \     (search-helper (cdr lst) new-acc))))\n  (search-helper lst -1))\n", "  (define\
    \ (count n lst)\n    (cond\n      [(empty? lst) 0]\n      [(= n (first lst)) (+\
    \ 1 (count n (rest lst)))]\n      [else (count n (rest lst))]))\n  (cond\n   \
    \ [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \    [else (search (rest lst))]))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 1))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0)\n               \
    \    (= (hash-ref freq x 0) x)\n                   (<= x max-freq))\n        \
    \  (return x))))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max (apply max lst)])\n     \
    \ (for ([i (in-range 1 max)])\n        (when (and (hash-ref freq i 0)\n      \
    \             (>= (hash-ref freq i 0) i))\n          (return i)))\n      -1)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n          (return\
    \ i))))\n    -1))\n</code>\n", "  (define (search-helper lst)\n    (cond\n   \
    \   [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (= max-freq\
    \ (hash-ref freq x 0))\n          (return x))))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n      (for ([x lst])\n\
    \        (when (and (> x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n     \
    \     (set! max-freq x)))\n      (if (= max-freq 0) -1 max-freq))))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n\
    \    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n  \
    \      (return i)))\n    -1))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([i lst]\n                #:when (>= (count i lst) i))\n      i)))\n", "  (let\
    \ ([counts (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x\
    \ counts]\n                #:when (and (> (car x) 0)\n                       \
    \     (>= (car x) (cadr x))))\n      (car x))))\n", "  (define (count x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (define (helper lst)\n    (if (null? lst)\n        -1\n       \
    \ (let* ([n (car lst)]\n               [freq (length (filter (lambda (x) (= x\
    \ n)) lst))])\n          (if (and (> n 0) (>= n freq))\n              n\n    \
    \          (helper (cdr lst))))))\n  (helper lst))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max (apply\
    \ max (hash-keys freq))])\n      (if (and (> max 0) (>= (hash-ref freq max 0)\
    \ max))\n          max\n          -1))))\n", "  (define (count x lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n\
    \      [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper lst))\n",
  "  (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (find-max lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (find-max (rest lst))]))\n\
    \  (find-max lst))\n", "  (define (count x lst)\n    (cond [(empty? lst) 0]\n\
    \          [(= x (first lst)) (+ 1 (count x (rest lst)))]\n          [else (count\
    \ x (rest lst))]))\n  (define (max-freq lst)\n    (cond [(empty? lst) -1]\n  \
    \        [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (max-freq (rest lst))]))\n  (max-freq lst))\n", "  (define (count x lst)\n \
    \   (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (max-freq lst)\n   \
    \ (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n      [else (max-freq (rest lst))]))\n  (max-freq lst))\n", " \
    \ (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper lst))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (if (and (> i 0) (= (hash-ref freq i\
    \ 0) i))\n            (return i)))\n      -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let loop ([lst\
    \ lst])\n      (cond [(empty? lst) -1]\n            [(>= (hash-ref freq (first\
    \ lst) 0) (first lst)) (first lst)]\n            [else (loop (rest lst))]))))\n",
  "  (define (helper lst)\n    (cond [(empty? lst) empty]\n          [(member (first\
    \ lst) (rest lst)) (cons (first lst) (helper (rest lst)))]\n          [else (helper\
    \ (rest lst))]))\n  (define (frequency lst)\n    (cond [(empty? lst) empty]\n\
    \          [(member (first lst) (rest lst)) (cons (first lst) (frequency (rest\
    \ lst)))]\n          [else (frequency (rest lst))]))\n  (define (max-freq lst)\n\
    \    (cond [(empty? lst) empty]\n          [(> (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (cons (first lst) (max-freq (rest lst)))]\n\
    \          [else (max-freq (rest lst))]))\n  (cond [(empty? lst) -1]\n       \
    \ [(empty? (max-freq (frequency (helper lst)))) -1]\n        [else (first (max-freq\
    \ (frequency (helper lst))))]))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max (apply max (hash-keys\
    \ freq))])\n      (for ([x (in-range 1 max)])\n        (if (and (hash-ref freq\
    \ x 0) (&gt;= x (hash-ref freq x 0)))\n            (return x)))\n      -1)))\n\
    </code>\n", "  (let loop ([lst lst] [max 0])\n    (cond [(null? lst) max]\n  \
    \        [(>= (count (car lst) lst) (car lst)) (loop (cdr lst) (car lst))]\n \
    \         [else (loop (cdr lst) max)])))\n", "  (let ([freq (make-hash)])\n  \
    \  (for ([i lst])\n      (hash-set! freq i (+ 1 (hash-ref freq i 0))))\n    (let\
    \ ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n        (when\
    \ (and (> i 0) (= max-freq (hash-ref freq i)))\n          (return i))))\n    -1))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n\
    \          (return i))))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for\
    \ ([i lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n      (when\
    \ (and (> i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n    -1))\n",
  "  (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper lst))\n", "  (define (search-helper lst)\n    (define (count-occurrences\
    \ lst n)\n      (cond\n        [(empty? lst) 0]\n        [(= (first lst) n) (+\
    \ 1 (count-occurrences (rest lst) n))]\n        [else (count-occurrences (rest\
    \ lst) n)]))\n    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences\
    \ lst (first lst)) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([counts (count-list lst)])\n\
    \    (for/first ([(n . c) counts] #:when (and (> n 0) (>= n c)))\n      n)))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (> x 0) (= (hash-ref freq x 0) max-freq))\n          (return\
    \ x))))\n    -1))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (cond\n    [(empty?\
    \ lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n    [else\
    \ (search (rest lst))]))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq\
    \ i 0) max-freq))\n          (return i))))\n    -1))\n", "  (define (search-helper\
    \ lst)\n    (define (count-occurrences lst x)\n      (cond\n        [(empty? lst)\
    \ 0]\n        [(= (first lst) x) (+ 1 (count-occurrences (rest lst) x))]\n   \
    \     [else (count-occurrences (rest lst) x)]))\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count-occurrences lst (first lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst))\
    \ (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define\
    \ (helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car lst) lst)\
    \ (car lst)) (car lst))\n          (else (helper (cdr lst)))))\n  (helper (sort\
    \ lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max (apply max lst)])\n      (for ([x (in-range\
    \ 1 max)])\n        (when (and (hash-ref freq x 0) (>= (hash-ref freq x 0) x))\n\
    \          (return x)))\n      -1)))\n", "  (let ([freq (make-hash)])\n    (for\
    \ ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (if\
    \ (and (> x 0)\n               (= (hash-ref freq x 0) x))\n          (return x)))\n\
    \    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x)))\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n  \
    \    (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (> x\
    \ 0)\n                 (>= (hash-ref freq x 0) x))\n        (return x)))\n   \
    \ -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n\
    \          (return i))))\n    -1))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([x (in-list lst)]\n                #:when (>= (count x lst) x))\n      x)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n          (return\
    \ i))))\n    -1))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([x (in-list lst)]\n                #:when (>= (count\
    \ x lst) x))\n      x)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (>\
    \ x 0) (>= x (hash-ref freq x 0)))\n        (return x)))\n    -1))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n  \
    \      (return x)))\n    -1))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([x (in-list lst)]\n                #:when (>= (count x lst) x))\n      x)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n\
    \        (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq\
    \ x 0) x))\n          (return x))))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n\
    \      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n\
    \    -1))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((=\
    \ x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper lst))\n", "  (cond [(empty? lst) -1]\n        [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n        [else (search (rest lst))]))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list\
    \ lst)]\n                #:when (>= (count x lst) x))\n      x)))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n                #:when\
    \ (>= (count x lst) x))\n      x)))\n", "  (define (helper lst)\n    (cond\n \
    \     [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst #:key (lambda (x) (length (filter (lambda (y) (= x y)) lst))))))\n",
  "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst))\
    \ (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define\
    \ (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car\
    \ lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper lst))\n", "  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst\
    \ <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0)\n            \
    \     (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let\
    \ ([counts (count-list lst)])\n    (for/first ([(n . cnt) counts] #:when (>= cnt\
    \ n))\n      n)))\n", "  (define (helper lst)\n    (cond [(empty? lst) -1]\n \
    \         [(>= (length (filter (lambda (x) (= x (car lst))) lst)) (car lst)) (car\
    \ lst)]\n          [else (helper (cdr lst))]))\n  (helper (sort lst (lambda (x\
    \ y) (< x y)))))\n", "  (define (count n lst)\n    (cond [(empty? lst) 0]\n  \
    \        [(= n (first lst)) (+ 1 (count n (rest lst)))]\n          [else (count\
    \ n (rest lst))]))\n  (cond [(empty? lst) -1]\n        [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n        [else (search (rest lst))]))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 0)\n        -1\n        (apply max (filter (lambda (x) (= (length (filter (lambda\
    \ (y) (= x y)) lst)) x)) lst)))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (define (helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort\
    \ lst <)))\n", "  (let ([counts (count-list lst)])\n    (for/first ([(n . c) counts]\n\
    \                #:when (and (> n 0)\n                            (>= n c)))\n\
    \      n)))\n", "  (define (search-helper lst acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (search-helper (rest lst) (first lst))]\n      [else (search-helper (rest\
    \ lst) acc)]))\n  (search-helper lst -1))\n", "  (define (helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (car lst)))\
    \ lst)) (car lst)) (car lst)]\n          [else (helper (cdr lst))]))\n  (helper\
    \ (sort lst >)))\n", "  (define (count-occurrences lst n)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= (first lst) n) (+ 1 (count-occurrences (rest lst) n))]\n\
    \      [else (count-occurrences (rest lst) n)]))\n  (define (search-aux lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences lst (first\
    \ lst)) (first lst)) (first lst)]\n      [else (search-aux (rest lst))]))\n  (search-aux\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (>= (hash-ref freq i 0) i))\n  \
    \        (return i))))\n    -1))\n", "  (let ([max-val (apply max lst)])\n   \
    \ (for/first ([val (in-range 1 (add1 max-val))])\n      (and (>= (count val lst)\
    \ val) val))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x) (> x\
    \ max-freq))\n          (set! max-freq x)))\n      (if (= max-freq 0) -1 max-freq))))\n\
    </code>\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n    \
    \  [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (helper\
    \ (rest lst))]))\n  (helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max (apply\
    \ max lst)])\n      (for ([i (in-range 1 max)])\n        (when (and (hash-ref\
    \ freq i 0)\n                   (>= (hash-ref freq i 0) i))\n          (return\
    \ i)))\n      -1)))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst\
    \ <)))\n", "  (define (count x lst)\n    (if (null? lst)\n        0\n        (+\
    \ (if (= x (car lst)) 1 0) (count x (cdr lst)))))\n  (define (greatest lst)\n\
    \    (if (null? lst)\n        -1\n        (if (>= (count (car lst) lst) (car lst))\n\
    \            (car lst)\n            (greatest (cdr lst)))))\n  (greatest (sort\
    \ lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x)))\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list\
    \ lst)]\n                #:when (>= (count x lst) x))\n      x)))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (define (search-helper lst count)\n    (cond\n      [(empty?\
    \ lst) count]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst))\
    \ (first lst)) (search-helper (rest lst) (first lst))]\n      [else (search-helper\
    \ (rest lst) count)]))\n  (search-helper lst -1))\n", "  (define (count x lst)\n\
    \    (cond ((null? lst) 0)\n          ((= x (car lst)) (+ 1 (count x (cdr lst))))\n\
    \          (else (count x (cdr lst)))))\n  (define (search-helper lst)\n    (cond\
    \ ((null? lst) -1)\n          ((>= (count (car lst) lst) (car lst)) (car lst))\n\
    \          (else (search-helper (cdr lst)))))\n  (search-helper lst))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (for ([x lst])\n      (if (and (> x 0) (>= x (hash-ref freq x 0)))\n    \
    \      (return x)))\n    -1))\n", "  (define (count x lst)\n    (cond ((null?\
    \ lst) 0)\n          ((= x (car lst)) (+ 1 (count x (cdr lst))))\n          (else\
    \ (count x (cdr lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst)\
    \ -1)\n          ((>= (count (car lst) lst) (car lst)) (car lst))\n          (else\
    \ (search-helper (cdr lst)))))\n  (search-helper lst))\n", "  (define (search-helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (search-helper (rest lst) (first lst))]\n\
    \      [else (search-helper (rest lst) acc)]))\n  (search-helper lst -1))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (define (count\
    \ x lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? x (first lst)) (+\
    \ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count-occurences lst n)\n    (cond ((null? lst)\
    \ 0)\n          ((= (car lst) n) (+ 1 (count-occurences (cdr lst) n)))\n     \
    \     (else (count-occurences (cdr lst) n))))\n  (define (find-max lst)\n    (cond\
    \ ((null? lst) -1)\n          ((and (> (car lst) 0)\n                (>= (count-occurences\
    \ lst (car lst)) (car lst)))\n           (car lst))\n          (else (find-max\
    \ (cdr lst)))))\n  (find-max lst))\n", "  (define (freq x lst)\n    (cond ((null?\
    \ lst) 0)\n          ((= x (car lst)) (+ 1 (freq x (cdr lst))))\n          (else\
    \ (freq x (cdr lst)))))\n  (define (search-aux lst)\n    (cond ((null? lst) -1)\n\
    \          ((>= (freq (car lst) lst) (car lst)) (car lst))\n          (else (search-aux\
    \ (cdr lst)))))\n  (search-aux (sort lst <)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (= (hash-ref freq i 0) max-freq))\n          (return i))))\n    -1))\n",
  "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n              \
    \  #:when (>= (count x lst) x))\n      x)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n\
    \      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n\
    \    -1))\n", "  (let loop ([lst lst] [max -1])\n    (cond [(empty? lst) max]\n\
    \          [(>= (count (first lst) lst) (first lst))\n           (loop (rest lst)\
    \ (first lst))]\n          [else (loop (rest lst) max)])))\n", "  (let ([freq\
    \ (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst)])\n    (let\
    \ ([max (apply max freq)])\n      (if (= max 0)\n          -1\n          (let\
    \ ([pos (position max freq)])\n            (list-ref lst pos))))))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([e (in-list lst)]\n                #:when\
    \ (and (> e 0)\n                            (>= e (count (in-list lst) e))))\n\
    \      e)))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n        \
    \  ((= x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr\
    \ lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst) -1)\n      \
    \    ((>= (count (car lst) lst) (car lst)) (car lst))\n          (else (search-helper\
    \ (cdr lst)))))\n  (search-helper lst))\n", "  (define (helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (>= (hash-ref freq i 0) i))\n  \
    \        (return i)))\n      -1)))\n", "  (define (count-occurrences lst n)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= (first lst) n) (+ 1 (count-occurrences\
    \ (rest lst) n))]\n      [else (count-occurrences (rest lst) n)]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences\
    \ lst (first lst)) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper lst))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(null? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (car lst)))\
    \ lst)) (car lst)) (car lst)]\n      [else (search-helper (cdr lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([n lst]\n \
    \               #:when (>= (count n lst) n))\n      n)))\n", "  (define (helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (helper\
    \ (rest lst))]))\n  (helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (hash-ref\
    \ freq i)\n                   (&gt;= (hash-ref freq i) i)\n                  \
    \ (&gt; (hash-ref freq i) max-freq))\n          (set! max-freq (hash-ref freq\
    \ i))))\n      (if (= max-freq 0)\n          -1\n          max-freq))))\n</code>\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (helper (rest lst))]))\n  (helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x)))\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (define (count n)\n    (let loop ([lst lst] [count\
    \ 0])\n      (cond [(empty? lst) count]\n            [(= n (first lst)) (loop\
    \ (rest lst) (+ count 1))]\n            [else (loop (rest lst) count)])))\n  (let\
    \ loop ([lst lst])\n    (cond [(empty? lst) -1]\n          [(>= (count (first\
    \ lst)) (first lst)) (first lst)]\n          [else (loop (rest lst))])))\n", " \
    \ (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper lst))\n", "  (define (count x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (let ([counts (count-list lst)])\n\
    \    (for/first ([(n . c) counts]\n                #:when (and (> n 0)\n     \
    \                       (>= n c)))\n      n)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n\
    \      (if (and (> x 0) (>= x (hash-ref freq x 0)))\n          (return x)))\n\
    \    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (let ([frequencies (list->frequency-list\
    \ lst)])\n    (for/first ([(n . f) frequencies]\n                #:when (and (>\
    \ n 0) (>= n f)))\n      n)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (= max-freq (hash-ref freq x 0))\n\
    \          (return x))))\n    -1))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([x (in-list lst)]\n                #:when (and (> x 0)\n                  \
    \          (>= x (count (in-list lst) x))))\n      x)))\n", "  (define (helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (helper\
    \ (rest lst))]))\n  (helper (sort lst <)))\n", "  (define (count-occurrences n\
    \ lst)\n    (cond ((null? lst) 0)\n          ((= n (car lst)) (+ 1 (count-occurrences\
    \ n (cdr lst))))\n          (else (count-occurrences n (cdr lst)))))\n  (define\
    \ (search-helper lst max)\n    (cond ((null? lst) max)\n          ((>= (count-occurrences\
    \ (car lst) lst) (car lst)) (search-helper (cdr lst) (car lst)))\n          (else\
    \ (search-helper (cdr lst) max))))\n  (search-helper lst -1))\n", "  (let ([lst\
    \ (sort lst <)])\n    (for/first ([n lst]\n                #:when (and (> n 0)\n\
    \                            (>= n (count (filter (\u03BB (x) (= x n)) lst))))\n\
    \                #:break n)\n      -1)))\n", "  (let ([lst (sort lst <)])\n  \
    \  (for/first ([x (in-list lst)]\n                #:when (>= (count x lst) x))\n\
    \      x)))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst <)))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (define (count\
    \ x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst)) (+ 1 (count x\
    \ (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define (search-helper\
    \ lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car lst) lst) (car\
    \ lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n  (search-helper\
    \ lst))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (helper lst)\n\
    \    (cond\n      [(null? lst) -1]\n      [(>= (count (car lst) lst) (car lst))\
    \ (car lst)]\n      [else (helper (cdr lst))]))\n  (helper (sort lst <)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0) (>= (hash-ref freq i 0) i))\n          (return i)))\n\
    \      -1)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n\
    \                #:when (and (> x 0)\n                            (>= x (count\
    \ (in-list lst) x))))\n      x)))\n", "  (define (helper lst)\n    (cond\n   \
    \   [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (let ([freq (for/fold ([freq-lst '()]) ([x lst])\n                (let ([x-freq\
    \ (for/fold ([count 0]) ([y lst])\n                                (if (= x y)\n\
    \                                    (add1 count)\n                          \
    \          count))])\n                  (cons (cons x x-freq) freq-lst)))])\n\
    \    (for/fold ([max -1]) ([x lst])\n      (let ([x-freq (assoc x freq)])\n  \
    \      (if (and (> x-freq x) (> x-freq max))\n            x-freq\n           \
    \ max)))))\n</code>\n", "  (let ([lst (sort lst <)])\n    (for/first ([i lst]\n\
    \                #:when (>= (count i lst) i))\n      i)))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([x (in-list lst)]\n                #:when (>= (count\
    \ x lst) x))\n      x)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([e lst])\n      (hash-update! freq e add1 0))\n\
    \    (for ([e lst])\n      (when (and (> e 0) (>= e (hash-ref freq e 0)))\n  \
    \      (return e)))\n    -1))\n", "  (define (count x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (define (count\
    \ x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst)) (+ 1 (count x\
    \ (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define (search-helper\
    \ lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car lst) lst) (car\
    \ lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n  (search-helper\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (>= (hash-ref freq x 0) x)\n          (return\
    \ x))))\n    -1))\n", "  (let ([max-val (apply max lst)])\n    (for/first ([i\
    \ (in-range 1 (add1 max-val))])\n      (and (>= (count i lst) i) i))))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (for ([x lst])\n      (when (and (> (hash-ref freq x 0) x)\n      \
    \           (> x 0))\n        (return x)))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max (apply\
    \ max lst)])\n      (for ([i (in-range 1 max)])\n        (when (and (hash-ref\
    \ freq i 0) (>= i (hash-ref freq i 0)))\n          (return i)))\n      -1)))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count x lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n\
    \                #:when (>= (count x lst) x))\n      x)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (>= (hash-ref freq i 0) i))\n          (return i)))\n      -1)))\n", " \
    \ (define (count-occurrences n lst)\n    (cond\n      [(empty? lst) 0]\n     \
    \ [(= n (first lst)) (+ 1 (count-occurrences n (rest lst)))]\n      [else (count-occurrences\
    \ n (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count-occurrences (first lst) lst) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n\
    \    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n          (return\
    \ i))))\n    -1))\n", "  (define (count-occurrences lst x)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= (first lst) x) (+ 1 (count-occurrences (rest lst) x))]\n\
    \      [else (count-occurrences (rest lst) x)]))\n  (define (find-max lst)\n \
    \   (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences lst (first lst))\
    \ (first lst)) (first lst)]\n      [else (find-max (rest lst))]))\n  (find-max\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x))\n  \
    \        (return x)))\n      -1)))\n", "  (define (helper lst)\n    (cond\n  \
    \    [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (helper (rest lst))]))\n  (helper (sort lst <)))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([x (in-list lst)]\n                #:when\
    \ (and (> x 0)\n                            (>= x (count (in-list lst) x))))\n\
    \      x)))\n", "  (define (count-occurrences lst n)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= (first lst) n) (+ 1 (count-occurrences (rest lst) n))]\n\
    \      [else (count-occurrences (rest lst) n)]))\n  (define (search-aux lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences lst (first\
    \ lst)) (first lst)) (first lst)]\n      [else (search-aux (rest lst))]))\n  (search-aux\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x))\n        (return x)))\n    -1))\n", "  (let ([freq (count-frequency\
    \ lst)])\n    (for/first ([i (in-list lst)]\n                #:when (>= (hash-ref\
    \ freq i 0) i))\n      i)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x\
    \ (in-list lst)]\n                #:when (>= (count x lst) x))\n      x)))\n",
  "  (define (get-freq lst n)\n    (cond\n      [(empty? lst) 0]\n      [(= (first\
    \ lst) n) (+ 1 (get-freq (rest lst) n))]\n      [else (get-freq (rest lst) n)]))\n\
    \  (define (get-max lst)\n    (cond\n      [(empty? lst) -1]\n      [(> (get-freq\
    \ lst (first lst)) (first lst)) (first lst)]\n      [else (get-max (rest lst))]))\n\
    \  (get-max lst))\n", "  (define (count n lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= n (first lst)) (+ 1 (count n (rest lst)))]\n      [else (count\
    \ n (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define\
    \ (search-helper lst)\n    (if (null? lst)\n        -1\n        (let ([x (car\
    \ lst)])\n          (if (>= (count x lst) x)\n              x\n              (search-helper\
    \ (cdr lst))))))\n  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n\
    \      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n\
    \    -1))\n", "  (let ([lst (sort lst <)])\n    (let loop ([lst lst] [i 0])\n\
    \      (if (null? lst)\n          -1\n          (if (= (length (filter (lambda\
    \ (x) (= x (car lst))) lst)) (car lst))\n              (car lst)\n           \
    \   (loop (cdr lst) (+ i 1)))))))\n", "  (define (count x lst)\n    (cond ((null?\
    \ lst) 0)\n          ((= x (car lst)) (+ 1 (count x (cdr lst))))\n          (else\
    \ (count x (cdr lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst)\
    \ -1)\n          ((>= (count (car lst) lst) (car lst)) (car lst))\n          (else\
    \ (search-helper (cdr lst)))))\n  (search-helper lst))\n", "  (define (count x\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count\
    \ x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define (max-freq lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (max-freq (rest lst))]))\n  (max-freq lst))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([lst (sort lst\
    \ <)])\n    (for/fold ([res -1]) ([i lst])\n      (if (>= (count i lst) i)\n \
    \         (max res i)))))\n", "  (define (count x lst)\n    (cond [(empty? lst)\
    \ 0]\n          [(= x (first lst)) (+ 1 (count x (rest lst)))]\n          [else\
    \ (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond [(empty? lst)\
    \ -1]\n          [(>= (count (first lst) lst) (first lst)) (first lst)]\n    \
    \      [else (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (= (hash-ref freq x 0) max-freq)\n          (return x))))\n   \
    \ -1))\n", "  (let ([lst (sort lst <)])\n    (for/first ([i lst]\n           \
    \     #:when (>= (count i lst) i))\n      i)))\n", "  (define (count x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((=\
    \ x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper lst))\n", "  (define (count x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper lst))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([x (in-list lst)]\n                #:when (>= (count\
    \ x lst) x))\n      x)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x\
    \ (in-list lst)]\n                #:when (>= (count x lst) x))\n      x)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n\
    \        (return i)))\n    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq\
    \ x 0) x))\n          (return x)))\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n\
    \      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n\
    \    -1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
