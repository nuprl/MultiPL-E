name: HumanEval_108_count_nums
language: rkt
prompt: "#lang racket\n\n;; Write a function count_nums which takes an array of integers\
  \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a\
  \ number is negative, then its first signed digit will be negative:\n;; e.g. -123\
  \ has signed digits -1, 2, and 3.\n(define (count_nums arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1\
  \ -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
  \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
  \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
  \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
  \ 1)) 1)\n))\n\n(test-humaneval)"
completions: ["  (define (sum-digits n)\n    (define (abs n)\n      (if (< n 0) (-\
    \ n) n))\n    (define (sum-digits-iter n acc)\n      (if (= n 0)\n          acc\n\
    \          (sum-digits-iter (quotient n 10) (+ acc (remainder n 10)))))\n    (sum-digits-iter\
    \ (abs n) 0))\n  (define (count-nums-iter arr acc)\n    (if (null? arr)\n    \
    \    acc\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-iter\
    \ (cdr arr) (+ acc 1))\n            (count-nums-iter (cdr arr) acc))))\n  (count-nums-iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter\
    \ arr n)\n    (cond\n      [(empty? arr) n]\n      [(> (sum_digits (first arr))\
    \ 0) (count_nums_iter (rest arr) (+ n 1))]\n      [else (count_nums_iter (rest\
    \ arr) n)]))\n  (count_nums_iter arr 0))\n", "  (define (sum_digits n)\n    (define\
    \ (sum_digits_helper n acc)\n      (if (zero? n)\n          acc\n          (sum_digits_helper\
    \ (quotient n 10) (+ acc (remainder n 10)))))\n    (if (negative? n)\n       \
    \ (sum_digits_helper (- n) 0)\n        (sum_digits_helper n 0)))\n  (define (count_nums_helper\
    \ arr acc)\n    (if (null? arr)\n        acc\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums_helper (cdr arr) (+ acc 1))\n            (count_nums_helper\
    \ (cdr arr) acc))))\n  (count_nums_helper arr 0))\n", "  (define (sum-digits n)\n\
    \    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n \
    \     [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (helper arr count)\n    (cond\n      [(empty? arr) count]\n      [(>\
    \ (sum-digits (first arr)) 0) (helper (rest arr) (+ count 1))]\n      [else (helper\
    \ (rest arr) count)]))\n  (helper arr 0))\n", "  (let loop ([arr arr] [count 0])\n\
    \    (cond [(empty? arr) count]\n          [(> (sum_digits (first arr)) 0) (loop\
    \ (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n", " \
    \ (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n  (define\
    \ (count_nums_iter arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum_digits (car arr)) 0)\n            (count_nums_iter (cdr arr) (+ count\
    \ 1))\n            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter arr\
    \ 0))\n", "  (define (sum-digits n)\n    (cond [(< n 0) (- n)]\n          [(=\
    \ n 0) 0]\n          [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond [(empty? arr) count]\n   \
    \       [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n          [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums-iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter\
    \ (cdr arr) (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n \
    \ (count_nums-iter arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n    \
    \     (count_nums (rest arr)))]))\n", "  (define (sum_digits n)\n    (if (zero?\
    \ n)\n        0\n        (+ (abs (remainder n 10))\n           (sum_digits (quotient\
    \ n 10)))))\n  (define (sum_signed_digits n)\n    (if (zero? n)\n        0\n \
    \       (+ (remainder n 10)\n           (sum_signed_digits (quotient n 10)))))\n\
    \  (define (sum_signed_digits_array arr)\n    (if (null? arr)\n        0\n   \
    \     (+ (sum_signed_digits (car arr))\n           (sum_signed_digits_array (cdr\
    \ arr)))))\n  (define (sum_digits_array arr)\n    (if (null? arr)\n        0\n\
    \        (+ (sum_digits (car arr))\n           (sum_digits_array (cdr arr)))))\n\
    \  (define (count_nums_helper arr)\n    (if (null? arr)\n        0\n        (+\
    \ (if (> (sum_digits (car arr)) (sum_signed_digits (car arr)))\n             \
    \  1\n               0)\n           (count_nums_helper (cdr arr)))))\n  (count_nums_helper\
    \ arr))\n", "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n\
    \          [(> (sum-digits (first arr)) 0) (loop (rest arr) (+ count 1))]\n  \
    \        [else (loop (rest arr) count)])))\n", "  (define (sum-digits n)\n   \
    \ (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n    \
    \  [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(null? arr) count]\n\
    \      [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n\
    \      [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper arr\
    \ 0))\n", "  (define (sum-digits n)\n    (cond\n      [(> n 0) (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]\n      [else 0]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(null? arr) count]\n      [(> (sum-digits (car\
    \ arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (cdr arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum-digits\
    \ (quotient n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (negative?\
    \ n)\n        (sum_digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (modulo n 10) (sum_digits (quotient n 10))))))\n  (define (iter i count)\n\
    \    (if (= i (length arr))\n        count\n        (if (> (sum_digits (vector-ref\
    \ arr i)) 0)\n            (iter (+ i 1) (+ count 1))\n            (iter (+ i 1)\
    \ count))))\n  (iter 0 0))\n", "  (define (sum_digits n)\n    (cond [(= n 0) 0]\n\
    \          [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define\
    \ (count_nums_helper arr acc)\n    (cond [(empty? arr) acc]\n          [(> (sum_digits\
    \ (first arr)) 0) (count_nums_helper (rest arr) (+ acc 1))]\n          [else (count_nums_helper\
    \ (rest arr) acc)]))\n  (count_nums_helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (sum_digits_gt_0? n)\n    (> (sum_digits n) 0))\n  (length (filter\
    \ sum_digits_gt_0? arr)))\n", "  (define (sum_digits n)\n    (if (zero? n)\n \
    \       0\n        (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n\
    \  (define (count_nums_iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter (cdr arr)\
    \ (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum_digits (quotient n 10))))))\n  (define (count_nums_helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n\
    \            (count_nums_helper (cdr arr) (+ count 1))\n            (count_nums_helper\
    \ (cdr arr) count))))\n  (count_nums_helper arr 0))\n", "  (let loop ([arr arr]\
    \ [count 0])\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first\
    \ arr)) 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums_helper arr acc)\n    (if (null?\
    \ arr)\n        acc\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums_helper\
    \ (cdr arr) (+ acc 1))\n            (count_nums_helper (cdr arr) acc))))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (add1\
    \ (sum_digits (abs n)))\n        (if (zero? n)\n            0\n            (add1\
    \ (sum_digits (quotient n 10))))))\n  (define (sum_digits_of_arr arr)\n    (if\
    \ (null? arr)\n        0\n        (add1 (sum_digits_of_arr (cdr arr)))))\n  (sum_digits_of_arr\
    \ arr))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums-iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter\
    \ (cdr arr) (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n \
    \ (count_nums-iter arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n\
    \        (sum-digits (- n))\n        (if (zero? n)\n            0\n          \
    \  (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-array\
    \ arr)\n    (if (null? arr)\n        0\n        (+ (sum-digits (car arr)) (sum-digits-array\
    \ (cdr arr)))))\n  (sum-digits-array arr))\n", "  (define (sum_digits n)\n   \
    \ (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n    \
    \  [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_iter arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_iter (rest arr) (+ count 1))]\n\
    \      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter arr 0))\n",
  "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (sum_digits_gt_0? n)\n    (> (sum_digits n)\
    \ 0))\n  (length (filter sum_digits_gt_0? arr)))\n", "  (define (sum_digits n)\n\
    \    (cond\n      [(< n 0) (- n)]\n      [(< n 10) n]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_digits_arr arr)\n   \
    \ (cond\n      [(empty? arr) 0]\n      [else (+ (sum_digits (first arr)) (sum_digits_arr\
    \ (rest arr)))]))\n  (define (count_nums_helper arr)\n    (cond\n      [(empty?\
    \ arr) 0]\n      [(> (sum_digits (first arr)) 0) (+ 1 (count_nums_helper (rest\
    \ arr)))]\n      [else (count_nums_helper (rest arr))]))\n  (count_nums_helper\
    \ arr))\n", "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n\
    \        (if (positive? (sum-digits (abs (car arr))))\n            (loop (cdr\
    \ arr) (+ count 1))\n            (loop (cdr arr) count)))))\n", "  (let loop ([arr\
    \ arr] [count 0])\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first\
    \ arr)) 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits n)\n  \
    \  (cond\n      [(zero? n) 0]\n      [(negative? n) (- (remainder n 10) (sum-signed-digits\
    \ (quotient n 10)))]\n      [else (+ (remainder n 10) (sum-signed-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest\
    \ arr) (+ count 1))]\n      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum-digits (quotient n 10))))))\n  (define (count-nums-helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-helper (cdr arr) (+ count 1))\n            (count-nums-helper\
    \ (cdr arr) count))))\n  (count-nums-helper arr 0))\n", "  (let loop ([arr arr]\
    \ [count 0])\n    (cond [(empty? arr) count]\n          [(> (sum_digits (first\
    \ arr)) 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (signed-digits n)\n    (cond\n\
    \      [(negative? n) (cons (quotient n 10) (signed-digits (quotient n 10)))]\n\
    \      [else (cons (remainder n 10) (signed-digits (quotient n 10)))]))\n  (define\
    \ (sum-signed-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (car n)\
    \ (sum-signed-digits (cdr n)))]))\n  (define (count-nums arr)\n    (cond\n   \
    \   [(null? arr) 0]\n      [(> (sum-signed-digits (signed-digits (car arr))) 0)\n\
    \       (+ 1 (count-nums (cdr arr)))]\n      [else (count-nums (cdr arr))]))\n\
    \  (count-nums arr))\n", "  (define (sum_digits n)\n    (if (negative? n)\n  \
    \      (sum_digits (- n))\n        (if (zero? n)\n            0\n            (+\
    \ (modulo n 10) (sum_digits (quotient n 10))))))\n  (define (count_nums_iter arr\
    \ count)\n    (if (null? arr)\n        count\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums_iter (cdr arr) (+ count 1))\n            (count_nums_iter\
    \ (cdr arr) count))))\n  (count_nums_iter arr 0))\n", "  (define (sum_digits n)\n\
    \    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n \
    \     [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_iter arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_iter (rest arr) (+ count 1))]\n\
    \      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter arr 0))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits n)\n  \
    \  (cond\n      [(negative? n) (- (sum-digits n))]\n      [else (sum-digits n)]))\n\
    \  (define (sum-signed-digits-array arr)\n    (cond\n      [(zero? (length arr))\
    \ 0]\n      [else (+ (sum-signed-digits (car arr)) (sum-signed-digits-array (cdr\
    \ arr)))]))\n  (sum-signed-digits-array arr))\n", "  (define (sum_digits n)\n\
    \    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n \
    \     [(> n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n      [else 0]))\n\
    \  (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter arr acc)\n\
    \    (cond\n      [(empty? arr) acc]\n      [(> (sum_digits (first arr)) 0) (count_nums_iter\
    \ (rest arr) (+ acc 1))]\n      [else (count_nums_iter (rest arr) acc)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (if\
    \ (null? arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n     \
    \       (loop (cdr arr) (+ count 1))\n            (loop (cdr arr) count)))))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-aux arr n)\n    (if (zero? n)\n\
    \        0\n        (if (&gt; (sum-digits (array-ref arr (- n 1))) 0)\n      \
    \      (+ 1 (count-nums-aux arr (- n 1)))\n            (count-nums-aux arr (-\
    \ n 1)))))\n  (count-nums-aux arr (array-length arr)))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n\
    \          [(> (sum-digits (first arr)) 0) (loop (rest arr) (+ count 1))]\n  \
    \        [else (loop (rest arr) count)])))\n", "  (define (sum-digits n)\n   \
    \ (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n    \
    \  [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums-iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter\
    \ (cdr arr) (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n \
    \ (count_nums-iter arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(<\
    \ n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n  \
    \    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_helper\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first\
    \ arr)) 0) (count_nums_helper (rest arr) (+ count 1))]\n      [else (count_nums_helper\
    \ (rest arr) count)]))\n  (count_nums_helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_iter (rest arr) (+ count 1))]\n      [else (count_nums_iter (rest\
    \ arr) count)]))\n  (count_nums_iter arr 0))\n", "  (define (sum_digits n)\n \
    \   (cond\n      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (sum_signed_digits n)\n    (cond\n      [(zero? n) 0]\n\
    \      [(negative? n) (+ (remainder n 10) (sum_signed_digits (quotient n 10)))]\n\
    \      [else (+ (remainder n 10) (sum_signed_digits (quotient n 10)))]))\n  (define\
    \ (count_nums_helper arr)\n    (cond\n      [(empty? arr) 0]\n      [(> (sum_signed_digits\
    \ (first arr)) 0) (+ 1 (count_nums_helper (rest arr)))]\n      [else (count_nums_helper\
    \ (rest arr))]))\n  (count_nums_helper arr))\n", "  (let loop ([arr arr] [count\
    \ 0])\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first arr))\
    \ 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-array arr)\n    (if (null? arr)\n\
    \        0\n        (+ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n\
    \  (sum-digits-array arr))\n", "  (define (sum_digits n)\n    (cond [(< n 0) (-\
    \ n)]\n          [(< n 10) n]\n          [else (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (count_nums_iter arr count)\n    (cond [(empty? arr) count]\n\
    \          [(> (sum_digits (first arr)) 0) (count_nums_iter (rest arr) (+ count\
    \ 1))]\n          [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (- 0 (sum_digits\
    \ (- n))) ]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (sum_digits_arr arr)\n    (cond\n      [(empty? arr) 0]\n\
    \      [else (+ (sum_digits (first arr)) (sum_digits_arr (rest arr)))]))\n  (define\
    \ (count_nums_helper arr)\n    (cond\n      [(empty? arr) 0]\n      [(> (sum_digits\
    \ (first arr)) 0) (+ 1 (count_nums_helper (rest arr)))]\n      [else (count_nums_helper\
    \ (rest arr))]))\n  (count_nums_helper arr))\n", "  (define (sum-digits n)\n \
    \   (cond\n      [(negative? n)\n       (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]\n      [(zero? n) 0]\n      [else\n       (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (sum-digits-greater-than-zero? n)\n    (if (>\
    \ (sum-digits n) 0)\n        #t\n        #f))\n  (define (count-sum-digits-greater-than-zero\
    \ arr)\n    (cond\n      [(empty? arr) 0]\n      [else\n       (+ (if (sum-digits-greater-than-zero?\
    \ (first arr)) 1 0)\n          (count-sum-digits-greater-than-zero (rest arr)))]))\n\
    \  (count-sum-digits-greater-than-zero arr))\n", "  (let loop ([arr arr] [count\
    \ 0])\n    (cond [(null? arr) count]\n          [(> (sum-digits (car arr)) 0)\
    \ (loop (cdr arr) (+ count 1))]\n          [else (loop (cdr arr) count)])))\n",
  "  (define (sum_digits n)\n    (cond\n      [(< n 0) (- n)]\n      [(< n 10) n]\n\
    \      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first\
    \ arr)) 0) (count_nums_iter (rest arr) (+ count 1))]\n      [else (count_nums_iter\
    \ (rest arr) count)]))\n  (count_nums_iter arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits\
    \ n)\n    (cond\n      [(< n 0) (- (sum-digits n))]\n      [else (sum-digits n)]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper (rest arr) (+\
    \ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (- n)]\n  \
    \    [(< n 10) n]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(null? arr) count]\n\
    \      [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n\
    \      [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper arr\
    \ 0))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n      [else\
    \ (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_signed_digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n) (+ (remainder n 10)\
    \ (sum_signed_digits (quotient n 10)))]\n      [else (+ (remainder n 10) (sum_signed_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum_signed_digits (first arr)) 0) (count_nums_helper\
    \ (rest arr) (+ count 1))]\n      [else (count_nums_helper (rest arr) count)]))\n\
    \  (count_nums_helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n\
    \     (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n \
    \        (count_nums (rest arr)))]))\n", "  (define (sum-digits n)\n    (if (zero?\
    \ n)\n        0\n        (+ (remainder n 10)\n           (sum-digits (quotient\
    \ n 10)))))\n  (define (sum-signed-digits n)\n    (if (zero? n)\n        0\n \
    \       (+ (abs (remainder n 10))\n           (sum-signed-digits (quotient n 10)))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-signed-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (cond\n     \
    \ [(zero? n) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (cond\
    \ [(empty? arr) count]\n          [(> (sum-digits (first arr)) 0) (loop (rest\
    \ arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n", "  (define\
    \ (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (count_nums_helper arr count)\n    (cond\n      [(null?\
    \ arr) count]\n      [(> (sum_digits (car arr)) 0) (count_nums_helper (cdr arr)\
    \ (+ count 1))]\n      [else (count_nums_helper (cdr arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n    \
    \  [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter\
    \ arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(> (sum_digits (abs\
    \ (vector-ref arr i))) 0)\n       (+ 1 (count_nums_iter arr (+ i 1)))]\n     \
    \ [else (count_nums_iter arr (+ i 1))]))\n  (count_nums_iter arr 0))\n", "  (define\
    \ (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if\
    \ (zero? n)\n            0\n            (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-rec arr)\n    (if (null? arr)\n        0\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (+ 1 (count-nums-rec (cdr\
    \ arr)))\n            (count-nums-rec (cdr arr)))))\n  (count-nums-rec arr))\n",
  "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n    (cond\n   \
    \   [(null? arr) count]\n      [(> (sum_digits (car arr)) 0) (count_nums_iter\
    \ (cdr arr) (+ count 1))]\n      [else (count_nums_iter (cdr arr) count)]))\n\
    \  (count_nums_iter arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [else (+ (abs (% n 10)) (sum_digits (/ n 10)))]))\n  (define\
    \ (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n     \
    \ [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count 1))]\n\
    \      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper arr\
    \ 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum_digits (first\
    \ arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest arr)))]))\n",
  "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0) (count_nums_helper\
    \ (rest arr) (+ count 1))]\n      [else (count_nums_helper (rest arr) count)]))\n\
    \  (count_nums_helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n     \
    \ [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (sum-signed-digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative?\
    \ n) (+ (remainder n 10) (sum-signed-digits (quotient n 10)))]\n      [else (+\
    \ (remainder n 10) (sum-signed-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum-signed-digits\
    \ (first arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [else\n     (if (sum_digits (first arr))\n         (+ 1 (count_nums\
    \ (rest arr)))\n         (count_nums (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [else\n     (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums\
    \ (rest arr)))\n         (count_nums (rest arr)))]))\n", "  (define (sum_digits\
    \ n)\n    (cond\n      [(< n 0) (- n)]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_helper (rest arr) (+ count 1))]\n      [else (count_nums_helper\
    \ (rest arr) count)]))\n  (count_nums_helper arr 0))\n", "  (let loop ([arr arr]\
    \ [count 0])\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first\
    \ arr)) 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (sum_digits_gt_0? n)\n    (> (sum_digits n)\
    \ 0))\n  (length (filter sum_digits_gt_0? arr)))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n  \
    \          0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n  (define\
    \ (sum-signed-digits n)\n    (if (zero? n)\n        0\n        (+ (abs (remainder\
    \ n 10))\n           (sum-signed-digits (quotient n 10)))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-signed-digits\
    \ (car arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n     \
    \       (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (if\
    \ (null? arr)\n        count\n        (let ([n (car arr)])\n          (if (< n\
    \ 0)\n              (loop (cdr arr)\n                    (if (or (> (abs (remainder\
    \ n 10)) 0)\n                            (> (abs (remainder (quotient n 10) 10))\
    \ 0)\n                            (> (abs (remainder (quotient n 100) 10)) 0))\n\
    \                        (+ count 1)\n                        count))\n      \
    \        (loop (cdr arr)\n                    (if (or (> (remainder n 10) 0)\n\
    \                            (> (remainder (quotient n 10) 10) 0)\n          \
    \                  (> (remainder (quotient n 100) 10) 0))\n                  \
    \      (+ count 1)\n                        count)))))))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (count_nums-iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter (cdr arr)\
    \ (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n  (count_nums-iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [(> n 0) (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]\n      [else 0]))\n  (define (count_nums_iter arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_iter (rest arr) (+ count 1))]\n      [else (count_nums_iter (rest\
    \ arr) count)]))\n  (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n \
    \   (if (negative? n)\n        (add1 (sum-digits (abs n)))\n        (if (zero?\
    \ n)\n            0\n            (add1 (sum-digits (quotient n 10))))))\n  (define\
    \ (sum-digits-arr arr)\n    (if (null? arr)\n        0\n        (add1 (sum-digits-arr\
    \ (cdr arr)))))\n  (sum-digits-arr arr))\n", "  (define (sum_digits n)\n    (if\
    \ (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n         \
    \   0\n            (+ (remainder n 10) (sum_digits (quotient n 10))))))\n  (define\
    \ (count_nums-iter arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum_digits (car arr)) 0)\n            (count_nums-iter (cdr arr) (+ count\
    \ 1))\n            (count_nums-iter (cdr arr) count))))\n  (count_nums-iter arr\
    \ 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-gt-0?\
    \ n)\n    (if (zero? n)\n        #f\n        #t))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (sum-digits-gt-0?\
    \ (sum-digits (car arr)))\n            (count-nums-helper (cdr arr) (+ count 1))\n\
    \            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr\
    \ 0))\n", "  (define (sum_digits n)\n    (cond [(< n 0) (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]\n          [(= n 0) 0]\n          [else (+ (modulo n 10)\
    \ (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n  \
    \  (cond [(null? arr) count]\n          [(> (sum_digits (car arr)) 0) (count_nums_iter\
    \ (cdr arr) (+ count 1))]\n          [else (count_nums_iter (cdr arr) count)]))\n\
    \  (count_nums_iter arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n  \
    \   (if (> (sum-digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n\
    \ 10)))]))\n  (define (sum-signed-digits n)\n    (cond\n      [(negative? n) (-\
    \ (sum-digits n))]\n      [else (sum-digits n)]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum-signed-digits\
    \ (first arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (cond\n      [(negative? n) (+ (modulo n 10) (sum_digits (quotient n\
    \ 10)))]\n      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (count_nums_helper arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest\
    \ arr) (+ count 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(negative? n) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(zero? n) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (abs (car arr))) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n\
    \  (define (count_nums-helper arr acc)\n    (if (null? arr)\n        acc\n   \
    \     (if (> (sum_digits (car arr)) 0)\n            (count_nums-helper (cdr arr)\
    \ (+ acc 1))\n            (count_nums-helper (cdr arr) acc))))\n  (count_nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n    \
    \  [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_signed_digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n) (+ (modulo n 10) (sum_signed_digits\
    \ (quotient n 10)))]\n      [else (+ (modulo n 10) (sum_signed_digits (quotient\
    \ n 10)))]))\n  (define (count_nums_iter arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum_signed_digits (first arr)) 0) (count_nums_iter (rest\
    \ arr) (+ count 1))]\n      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (length (filter (lambda (x)\n                    (if (positive?\
    \ x)\n                        (sum_digits x)\n                        (sum_digits\
    \ (- x))))\n                  arr)))\n", "  (define (sum_digits n)\n    (if (zero?\
    \ n)\n        0\n        (+ (remainder n 10)\n           (sum_digits (quotient\
    \ n 10)))))\n  (define (count_nums_helper arr)\n    (if (null? arr)\n        0\n\
    \        (if (> (sum_digits (car arr)) 0)\n            (+ 1 (count_nums_helper\
    \ (cdr arr)))\n            (count_nums_helper (cdr arr)))))\n  (count_nums_helper\
    \ arr))\n", "  (define (sum_digits n)\n    (cond\n      [(negative? n) (- n)]\n\
    \      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (negative?\
    \ n)\n        (sum_digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum_digits (quotient n 10))))))\n  (define (sum_digits_gt_0?\
    \ n)\n    (if (zero? n)\n        #f\n        #t))\n  (define (count_nums_iter\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (sum_digits_gt_0?\
    \ (sum_digits (car arr)))\n            (count_nums_iter (cdr arr) (+ count 1))\n\
    \            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter arr 0))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits n)\n  \
    \  (cond\n      [(zero? n) 0]\n      [(negative? n) (- (sum-digits (abs n)))]\n\
    \      [else (sum-digits n)]))\n  (define (count-nums-helper arr count)\n    (cond\n\
    \      [(empty? arr) count]\n      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (negative?\
    \ n)\n        (sum_digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum_digits (quotient n 10))))))\n  (define (count_nums-iter\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums-iter (cdr arr) (+ count 1))\n            (count_nums-iter\
    \ (cdr arr) count))))\n  (count_nums-iter arr 0))\n", "  (length (filter (lambda\
    \ (x)\n                    (if (negative? x)\n                        (not (zero?\
    \ (abs x)))\n                        (not (zero? x))))\n                  arr)))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr acc)\n\
    \    (cond\n      [(null? arr) acc]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ acc 1))]\n      [else (count-nums-helper (cdr arr) acc)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (define (sum-digits-iter n acc)\n\
    \      (if (zero? n)\n          acc\n          (sum-digits-iter (quotient n 10)\
    \ (+ acc (remainder n 10)))))\n    (sum-digits-iter (abs n) 0))\n  (define (count-nums-iter\
    \ arr acc)\n    (if (null? arr)\n        acc\n        (count-nums-iter (cdr arr)\n\
    \                         (if (> (sum-digits (car arr)) 0)\n                 \
    \            (+ acc 1)\n                             acc))))\n  (count-nums-iter\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum-digits (quotient n 10))))))\n  (define (count-nums-helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-helper (cdr arr) (+ count 1))\n            (count-nums-helper\
    \ (cdr arr) count))))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (+\
    \ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (define (count-nums-array\
    \ arr)\n    (if (null? arr)\n        0\n        (if (&gt; (sum-digits (car arr))\
    \ 0)\n            (+ 1 (count-nums-array (cdr arr)))\n            (count-nums-array\
    \ (cdr arr)))))\n  (count-nums-array arr))\n</code>\nI'm not sure if I'm doing\
    \ this right. I'm not sure if I'm using the right functions. I'm not sure if I'm\
    \ using the right syntax. I'm not sure if I'm using the right logic. I'm not sure\
    \ if I'm using the right indentation. I'm not sure if I'm using the right anything.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm doing this right.\n\
    I'm not sure if I'm doing this right.\nI'm not sure if I'm", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n  \
    \      count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond [(= n 0)\
    \ 0]\n          [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n \
    \ (define (sum-signed-digits n)\n    (cond [(= n 0) 0]\n          [(< n 0) (+\
    \ (remainder n 10) (sum-signed-digits (quotient n 10)))]\n          [else (+ (remainder\
    \ n 10) (sum-signed-digits (quotient n 10)))]))\n  (define (sum-digits-or-signed-digits\
    \ n)\n    (cond [(= n 0) 0]\n          [(< n 0) (+ (remainder n 10) (sum-signed-digits\
    \ (quotient n 10)))]\n          [else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond [(empty? arr)\
    \ count]\n          [(> (sum-digits-or-signed-digits (first arr)) 0)\n       \
    \    (count-nums-helper (rest arr) (+ count 1))]\n          [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (sum_digits_gt_0? n)\n    (if (zero? n)\n        #f\n        #t))\n\
    \  (length (filter sum_digits_gt_0? (map sum_digits arr))))\n", "  (define (sum_digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (abs (remainder n 10)) (sum_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_iter arr acc)\n    (cond\n     \
    \ [(empty? arr) acc]\n      [(> (sum_digits (first arr)) 0) (count_nums_iter (rest\
    \ arr) (+ acc 1))]\n      [else (count_nums_iter (rest arr) acc)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (let loop ([i 0] [count 0])\n    (if (= i (array-length arr))\n\
    \        count\n        (if (> (sum-digits (array-ref arr i)) 0)\n           \
    \ (loop (+ i 1) (+ count 1))\n            (loop (+ i 1) count)))))\n", "  (define\
    \ (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (count_nums_iter arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum_digits (first arr)) 0) (count_nums_iter (rest arr)\
    \ (+ count 1))]\n      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n    \
    \  [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_signed_digits\
    \ n)\n    (cond\n      [(negative? n) (- (sum_digits (abs n)))]\n      [else (sum_digits\
    \ n)]))\n  (define (count_nums_iter arr count)\n    (cond\n      [(empty? arr)\
    \ count]\n      [(> (sum_signed_digits (first arr)) 0) (count_nums_iter (rest\
    \ arr) (+ count 1))]\n      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n      \
    \  count\n        (let ([num (car arr)])\n          (if (and (< 0 num) (< num\
    \ 10))\n              (loop (cdr arr) (+ count 1))\n              (loop (cdr arr)\
    \ count))))))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n\
    \      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_signed_digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n) (- (sum_digits (abs\
    \ n)))]\n      [else (sum_digits n)]))\n  (define (count_nums_helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_signed_digits (first arr))\
    \ 0) (count_nums_helper (rest arr) (+ count 1))]\n      [else (count_nums_helper\
    \ (rest arr) count)]))\n  (count_nums_helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]))\n  (define (sum_signed_digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(negative? n) (- (sum_digits n))]\n      [else (sum_digits n)]))\n\
    \  (define (count_nums_iter arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_signed_digits (first arr)) 0) (count_nums_iter (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n    \
    \  [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n  (define (sum_signed_digits\
    \ n)\n    (cond\n      [(negative? n) (- (sum_digits n))]\n      [else (sum_digits\
    \ n)]))\n  (define (count_nums_helper arr count)\n    (cond\n      [(null? arr)\
    \ count]\n      [(> (sum_signed_digits (car arr)) 0) (count_nums_helper (cdr arr)\
    \ (+ count 1))]\n      [else (count_nums_helper (cdr arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n  (define\
    \ (count_nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum_digits (car arr)) 0)\n            (count_nums-helper (cdr arr) (+ count\
    \ 1))\n            (count_nums-helper (cdr arr) count))))\n  (count_nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum_digits (quotient n 10))))))\n  (define (count_nums-iter arr count)\n  \
    \  (if (null? arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n\
    \            (count_nums-iter (cdr arr) (+ count 1))\n            (count_nums-iter\
    \ (cdr arr) count))))\n  (count_nums-iter arr 0))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n  \
    \          0\n            (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n      \
    \  count\n        (if (> (sum-digits (car arr)) 0)\n            (loop (cdr arr)\
    \ (+ count 1))\n            (loop (cdr arr) count)))))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [else\n     (let ([num (first arr)])\n       (if (positive? num)\n\
    \           (+ (count_nums (rest arr))\n              (if (positive? (sum_digits\
    \ num)) 1 0))\n         (+ (count_nums (rest arr))\n            (if (negative?\
    \ (sum_digits num)) 1 0))))]))\n", "  (define (sum_digits n)\n    (cond\n    \
    \  [(= n 0) 0]\n      [else (+ (abs (% n 10)) (sum_digits (/ n 10)))]))\n  (define\
    \ (sum_signed_digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (if (< n\
    \ 0) (- (% n 10)) (% n 10)) (sum_signed_digits (/ n 10)))]))\n  (define (count_nums_helper\
    \ arr sum)\n    (cond\n      [(empty? arr) sum]\n      [(> (sum_signed_digits\
    \ (first arr)) 0) (count_nums_helper (rest arr) (+ sum 1))]\n      [else (count_nums_helper\
    \ (rest arr) sum)]))\n  (count_nums_helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (count_nums_iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter (cdr arr)\
    \ (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter\
    \ arr 0))\n", "  (let loop ([i 0] [n 0])\n    (if (= i (array-length arr))\n \
    \       n\n        (if (not (zero? (sum-digits (array-ref arr i))))\n        \
    \    (loop (+ i 1) (+ n 1))\n            (loop (+ i 1) n)))))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum_digits (quotient n 10))))))\n  (define (sum_digits_gt_0? n)\n    (if (zero?\
    \ n)\n        #f\n        (if (negative? n)\n            #f\n            #t)))\n\
    \  (for/fold ([count 0]) ([x arr])\n    (if (sum_digits_gt_0? x)\n        (+ count\
    \ 1)\n        count)))\n", "  (define (sum_digits n)\n    (if (zero? n)\n    \
    \    0\n        (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n\
    \  (define (count_nums_iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter (cdr arr)\
    \ (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n  (define\
    \ (count_nums_helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum_digits (car arr)) 0)\n            (count_nums_helper (cdr arr) (+ count\
    \ 1))\n            (count_nums_helper (cdr arr) count))))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr arr) (+ count\
    \ 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (length (filter (lambda (x)\n                    (if (negative?\
    \ x)\n                        (if (zero? (modulo x 10))\n                    \
    \        #f\n                            #t)\n                        (if (zero?\
    \ (modulo x 10))\n                            #f\n                           \
    \ #t)))\n                  arr)))\n", "  (define (sum_digits n)\n    (if (negative?\
    \ n)\n        (sum_digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum_digits (quotient n 10))))))\n  (define (count_nums_helper\
    \ arr count)\n    (if (empty? arr)\n        count\n        (if (> (sum_digits\
    \ (first arr)) 0)\n            (count_nums_helper (rest arr) (+ count 1))\n  \
    \          (count_nums_helper (rest arr) count))))\n  (count_nums_helper arr 0))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (abs (remainder n 10))\n           (sum-digits (quotient\
    \ n 10)))))\n  (define (count-nums-helper arr)\n    (if (null? arr)\n        0\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (+ 1 (count-nums-helper\
    \ (cdr arr)))\n            (count-nums-helper (cdr arr)))))\n  (count-nums-helper\
    \ arr))\n", "  (define (sum_digits n)\n    (cond [(< n 0) (+ (modulo n 10) (sum_digits\
    \ (quotient n 10)))]\n          [(= n 0) 0]\n          [else (+ (modulo n 10)\
    \ (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n  \
    \  (cond [(empty? arr) count]\n          [(> (sum_digits (first arr)) 0) (count_nums_iter\
    \ (rest arr) (+ count 1))]\n          [else (count_nums_iter (rest arr) count)]))\n\
    \  (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-array\
    \ arr)\n    (if (null? arr)\n        0\n        (+ (sum-digits (car arr)) (sum-digits-array\
    \ (cdr arr)))))\n  (define (count-nums-array arr)\n    (if (null? arr)\n     \
    \   0\n        (if (> (sum-digits (car arr)) 0)\n            (+ 1 (count-nums-array\
    \ (cdr arr)))\n            (count-nums-array (cdr arr)))))\n  (count-nums-array\
    \ arr))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n\
    \ 10) (sum-digits (quotient n -10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-digits-in-arr arr)\n\
    \    (cond\n      [(empty? arr) 0]\n      [else (+ (sum-digits (first arr)) (sum-digits-in-arr\
    \ (rest arr)))]))\n  (define (count-nums-in-arr arr)\n    (cond\n      [(empty?\
    \ arr) 0]\n      [(> (sum-digits (first arr)) 0) (+ 1 (count-nums-in-arr (rest\
    \ arr)))]\n      [else (count-nums-in-arr (rest arr))]))\n  (count-nums-in-arr\
    \ arr))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum-digits (quotient n 10))))))\n  (define (count-nums-iter arr count)\n  \
    \  (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-iter (cdr arr) (+ count 1))\n            (count-nums-iter\
    \ (cdr arr) count))))\n  (count-nums-iter arr 0))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n  \
    \          0\n            (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (+\
    \ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum-digits (quotient n 10))))))\n  (define (count-nums-helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-helper (cdr arr) (+ count 1))\n            (count-nums-helper\
    \ (cdr arr) count))))\n  (count-nums-helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum_digits\
    \ (quotient n 10)))))\n  (define (count_nums_helper arr acc)\n    (if (null? arr)\n\
    \        acc\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums_helper\
    \ (cdr arr) (+ acc 1))\n            (count_nums_helper (cdr arr) acc))))\n  (count_nums_helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_iter (rest arr) (+ count 1))]\n      [else (count_nums_iter (rest\
    \ arr) count)]))\n  (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n \
    \   (cond [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n         \
    \ [(= n 0) 0]\n          [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond [(empty? arr) count]\n   \
    \       [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n          [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (modulo n 10) (sum_digits (quotient n 10)))))\n  (define (count_nums-iter\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums-iter (cdr arr) (+ count 1))\n            (count_nums-iter\
    \ (cdr arr) count))))\n  (count_nums-iter arr 0))\n", "  (define (sum_digits n)\n\
    \    (cond\n      [(< n 0) (+ (modulo n 10) (sum_digits (quotient n 10)))]\n \
    \     [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_iter arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_iter (rest arr) (+ count 1))]\n\
    \      [else (count_nums_iter (rest arr) count)]))\n  (count_nums_iter arr 0))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (add1 (sum-digits (abs\
    \ n)))\n        (if (zero? n)\n            0\n            (add1 (sum-digits (quotient\
    \ n 10))))))\n  (define (sum-digits-arr arr)\n    (if (null? arr)\n        0\n\
    \        (add1 (sum-digits-arr (cdr arr)))))\n  (define (count-nums arr)\n   \
    \ (if (null? arr)\n        0\n        (if (> (sum-digits (car arr)) 0)\n     \
    \       (add1 (count-nums (cdr arr)))\n            (count-nums (cdr arr)))))\n\
    \  (count-nums arr))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum_digits\
    \ (first arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest\
    \ arr)))]))\n", "  (define (sum-digits n)\n    (if (= n 0)\n        0\n      \
    \  (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (length (filter (lambda\
    \ (n) (> (sum-digits n) 0)) arr)))\n", "  (define (sum_digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum_digits (quotient n\
    \ 10)))]))\n  (define (signed-digits n)\n    (cond\n      [(zero? n) 0]\n    \
    \  [(negative? n) (- (remainder n 10))]\n      [else (+ (remainder n 10) (signed-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [(< (signed-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (remainder n 10)\n           (sum_digits (quotient n 10)))))\n\
    \  (define (count_nums_iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter (cdr arr)\
    \ (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n  (count_nums_iter\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum_digits (quotient n 10))))))\n  (define (sum_digits_gt_0? n)\n    (if (zero?\
    \ n)\n        #f\n        #t))\n  (length (filter sum_digits_gt_0? (map sum_digits\
    \ arr))))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_helper (rest arr) (+ count 1))]\n      [else (count_nums_helper\
    \ (rest arr) count)]))\n  (count_nums_helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (signed-digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(negative? n) (+ (remainder n 10) (signed-digits (quotient n 10)))]\n\
    \      [else (+ (remainder n 10) (signed-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr count)\n    (cond\n      [(null? arr) count]\n      [(>\
    \ (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n     \
    \ [(> (signed-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n\
    \      [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper arr\
    \ 0))\n", "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (loop (cdr arr) (+ count\
    \ 1))\n            (loop (cdr arr) count)))))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n  \
    \          0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (count_nums_helper arr count)\n    (if (empty? arr)\n        count\n\
    \        (if (> (sum_digits (first arr)) 0)\n            (count_nums_helper (rest\
    \ arr) (+ count 1))\n            (count_nums_helper (rest arr) count))))\n  (count_nums_helper\
    \ arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n      \
    \  count\n        (if (> (abs (car arr)) 0)\n            (loop (cdr arr) (+ count\
    \ 1))\n            (loop (cdr arr) count)))))\n", "  (define (sum-digits n)\n\
    \    (cond [(= n 0) 0]\n          [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond [(empty? arr)\
    \ count]\n          [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr)\
    \ (+ count 1))]\n          [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (remainder n 10)\
    \ (sum_digits (quotient n 10))))))\n  (define (count_nums_helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n\
    \            (count_nums_helper (cdr arr) (+ count 1))\n            (count_nums_helper\
    \ (cdr arr) count))))\n  (count_nums_helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n      \
    \  (+ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (zero? (vector-length arr))\n       \
    \ count\n        (if (> (sum-digits (vector-ref arr 0)) 0)\n            (count-nums-helper\
    \ (vector-copy (vector-tail arr)) (+ count 1))\n            (count-nums-helper\
    \ (vector-copy (vector-tail arr)) count))))\n  (count-nums-helper arr 0))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum_digits n)\n    (if (negative?\
    \ n)\n        (sum_digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum_digits (quotient n 10))))))\n  (define (count_nums_iter\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum_digits (car\
    \ arr)) 0)\n            (count_nums_iter (cdr arr) (+ count 1))\n            (count_nums_iter\
    \ (cdr arr) count))))\n  (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n\
    \    (if (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum-digits\
    \ (quotient n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (length (filter (lambda (x)\n           \
    \         (apply + (map abs (string->list (number->string x)))))\n           \
    \       arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum-digits\
    \ (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums\
    \ (rest arr)))]))\n", "  (define (sum_digits n)\n    (if (negative? n)\n     \
    \   (sum_digits (- n))\n        (if (zero? n)\n            0\n            (+ (remainder\
    \ n 10) (sum_digits (quotient n 10))))))\n  (define (count_nums_iter arr count)\n\
    \    (if (empty? arr)\n        count\n        (if (> (sum_digits (first arr))\
    \ 0)\n            (count_nums_iter (rest arr) (+ count 1))\n            (count_nums_iter\
    \ (rest arr) count))))\n  (count_nums_iter arr 0))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (if (= i (array-length arr))\n        count\n        (let ([n (array-ref\
    \ arr i)])\n          (if (> (sum-digits n) 0)\n              (loop (+ i 1) (+\
    \ count 1))\n              (loop (+ i 1) count))))))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (add1 (sum-digits (add1 (abs n))))\n    \
    \    (if (zero? n)\n            0\n            (add1 (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-arr arr)\n    (if (null? arr)\n        0\n        (add1\
    \ (sum-digits-arr (cdr arr)))))\n  (sum-digits-arr arr))\n", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (count-nums-helper arr)\n    (if (null? arr)\n        0\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (+ 1 (count-nums-helper\
    \ (cdr arr)))\n            (count-nums-helper (cdr arr)))))\n  (count-nums-helper\
    \ arr))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+\
    \ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum_digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first arr)) 0)\
    \ (count_nums_helper (rest arr) (+ count 1))]\n      [else (count_nums_helper\
    \ (rest arr) count)]))\n  (count_nums_helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (- n)]\n  \
    \    [(< n 10) n]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ acc 1))]\n\
    \      [else (count_nums_helper (rest arr) acc)]))\n  (count_nums_helper arr 0))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))))\n  (define (sum-signed-digits n)\n    (if (zero?\
    \ n)\n        0\n        (+ (abs (modulo n 10)) (sum-signed-digits (quotient n\
    \ 10)))))\n  (define (count-nums-helper arr)\n    (if (null? arr)\n        0\n\
    \        (if (> (sum-signed-digits (car arr)) 0)\n            (+ 1 (count-nums-helper\
    \ (cdr arr)))\n            (count-nums-helper (cdr arr)))))\n  (count-nums-helper\
    \ arr))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum_digits (first\
    \ arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest arr)))]))\n",
  "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums_iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter\
    \ (cdr arr) (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n \
    \ (count_nums_iter arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr)\n    (if (null? arr)\n        0\n        (if (> (sum-digits (car arr))\
    \ 0)\n            (+ 1 (count-nums-helper (cdr arr)))\n            (count-nums-helper\
    \ (cdr arr)))))\n  (count-nums-helper arr))\n", "  (define (sum-digits n)\n  \
    \  (if (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum-digits\
    \ (quotient n 10)))))\n  (define (sum-signed-digits n)\n    (if (zero? n)\n  \
    \      0\n        (+ (abs (remainder n 10))\n           (sum-signed-digits (quotient\
    \ n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n  \
    \      count\n        (if (> (sum-signed-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond [(< n 0)\
    \ (+ (modulo (- n) 10) (sum-digits (quotient (- n) 10)))]\n          [(= n 0)\
    \ 0]\n          [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (count-helper arr acc)\n    (cond [(empty? arr) acc]\n          [(> (sum-digits\
    \ (first arr)) 0) (count-helper (rest arr) (+ acc 1))]\n          [else (count-helper\
    \ (rest arr) acc)]))\n  (count-helper arr 0))\n", "  (define (sum_digits n)\n\
    \    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n  \
    \          0\n            (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (count_nums-iter arr count)\n    (if (null? arr)\n        count\n \
    \       (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter (cdr arr)\
    \ (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n  (count_nums-iter\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-helper (rest arr) (+ count 1))]\n      [else (count-helper (rest arr)\
    \ count)]))\n  (count-helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [(= n 0)\
    \ 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr)\n    (cond\n      [(null? arr) 0]\n      [(> (sum-digits\
    \ (car arr)) 0) (+ 1 (count-nums-helper (cdr arr)))]\n      [else (count-nums-helper\
    \ (cdr arr))]))\n  (count-nums-helper arr))\n", "  (cond\n    [(empty? arr) 0]\n\
    \    [else\n     (if (sum-digits (first arr))\n         (+ 1 (count_nums (rest\
    \ arr)))\n         (count_nums (rest arr)))]))\n", "  (let loop ([arr arr] [count\
    \ 0])\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first arr))\
    \ 0) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
  "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n \
    \       (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums-iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums-iter\
    \ (cdr arr) (+ count 1))\n            (count_nums-iter (cdr arr) count))))\n \
    \ (count_nums-iter arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(<\
    \ n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n  \
    \    [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-iter\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first\
    \ arr)) 0) (count-nums-iter (rest arr) (+ count 1))]\n      [else (count-nums-iter\
    \ (rest arr) count)]))\n  (count-nums-iter arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (remainder n 10)\n           (sum-digits\
    \ (quotient n 10)))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n        (if (zero? n)\n            0\n     \
    \       (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n\
    \        (if (zero? n)\n            0\n            (+ (remainder n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums_iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter\
    \ (cdr arr) (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n \
    \ (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (remainder n 10)\n           (sum-digits (quotient n 10)))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum_digits n)\n    (if (negative? n)\n        (sum_digits\
    \ (- n))\n        (if (zero? n)\n            0\n            (+ (modulo n 10) (sum_digits\
    \ (quotient n 10))))))\n  (define (count_nums_iter arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum_digits (car arr)) 0)\n            (count_nums_iter\
    \ (cdr arr) (+ count 1))\n            (count_nums_iter (cdr arr) count))))\n \
    \ (count_nums_iter arr 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
