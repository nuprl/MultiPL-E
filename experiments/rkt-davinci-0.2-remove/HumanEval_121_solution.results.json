{
  "language": "rkt",
  "name": "HumanEval_121_solution",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-pos lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (length lst)) (sum-odd-even-pos (rest lst))]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-pos (rest lst)))]\n      [else (sum-odd-even-pos (rest lst))]))\n  (sum-odd-even-pos lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z1bk9cq.rkt:23:4\nactual:     1\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z1bk9cq.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z1bk9cq.rkt:26:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z1bk9cq.rkt:28:4\nactual:     13\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z1bk9cq.rkt:29:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (first lst))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp3vqqxgny.rkt:15:27: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp3vqqxgny.rkt:15:27\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-pos lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-pos (rest lst)))]\n      [else (sum-odd-even-pos (rest lst))]))\n  (sum-odd-even-pos (rest (rest lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:24:4\nactual:     321\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:28:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (sum-odd-even-positions (rest lst))]\n      [(even? (first lst)) (first lst) + (sum-odd-even-positions (rest lst))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbvjov_s.rkt:23:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbvjov_s.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbvjov_s.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbvjov_s.rkt:28:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbvjov_s.rkt:29:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:26:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:27:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp3vqqxgny.rkt:15:27: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp3vqqxgny.rkt:15:27\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:26:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:27:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (define (even-positions lst)\n    (cond\n      [(empty? lst) empty]\n      [(odd? (first lst)) (cons (first lst) (even-positions (rest lst)))]\n      [else (even-positions (rest lst))]))\n  (sum-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:27:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:28:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:29:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:30:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:32:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:33:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (car lst)) (helper (cdr lst) (+ acc (car lst)))]\n      [else (helper (cdr lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv4l8v3a.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (remainder (length lst) 2)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-of-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-of-odds (rest lst)))]\n      [else (sum-of-odds (rest lst))]))\n  (sum-of-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpj9de_xb_.rkt:15:30: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmpj9de_xb_.rkt:15:30\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (cdr lst))]\n    [else (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:23:4\nactual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:27:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:28:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:29:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:23:4\nactual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:27:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:28:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:29:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (cdr lst))]\n    [else (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph42vl0nx.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:26:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:27:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:20:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:21:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:22:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:23:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:24:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:25:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:26:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond [(empty? lst) acc]\n          [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n          [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmltdg34i.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmltdg34i.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmltdg34i.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmltdg34i.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmltdg34i.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (odd? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper (cdr lst) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:24:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:26:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:28:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:29:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (define (even-positions lst)\n    (cond\n      [(empty? lst) empty]\n      [(even? (first lst)) (cons (first lst) (even-positions (rest lst)))]\n      [else (even-positions (rest lst))]))\n  (sum-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4g4u1vtl.rkt:27:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4g4u1vtl.rkt:28:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4g4u1vtl.rkt:30:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4g4u1vtl.rkt:32:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4g4u1vtl.rkt:33:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (car lst)) (+ (car lst) (sum-odds (cdr lst)))]\n      [else (sum-odds (cdr lst))]))\n  (sum-odds (filter even? (range 1 (add1 (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtm2m7jf.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtm2m7jf.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtm2m7jf.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtm2m7jf.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtm2m7jf.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds-in-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (length lst)) (sum-odds-in-even-positions (rest lst))]\n      [(odd? (first lst)) (+ (first lst) (sum-odds-in-even-positions (rest lst)))]\n      [else (sum-odds-in-even-positions (rest lst))]))\n  (sum-odds-in-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a_z44k8.rkt:23:4\nactual:     1\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a_z44k8.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a_z44k8.rkt:26:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a_z44k8.rkt:28:4\nactual:     13\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5a_z44k8.rkt:29:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (odd? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper (cdr lst) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:24:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:26:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:28:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:29:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (if (odd? (first lst)) (first lst) 0)\n        (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0ylmded.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (define (even-positions lst)\n    (cond [(empty? lst) empty]\n          [(odd? (first lst)) (even-positions (rest lst))]\n          [else (cons (first lst) (even-positions (rest lst)))]))\n  (sum-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30bf0mz2.rkt:25:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30bf0mz2.rkt:26:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30bf0mz2.rkt:28:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30bf0mz2.rkt:30:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30bf0mz2.rkt:31:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-pos lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (remainder (length lst) 2))\n       (+ (first lst) (sum-odd-even-pos (rest lst)))]\n      [else (sum-odd-even-pos (rest lst))]))\n  (sum-odd-even-pos lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauiytaab.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauiytaab.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauiytaab.rkt:27:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauiytaab.rkt:28:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauiytaab.rkt:29:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (empty? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (first lst))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:21:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:22:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:24:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:25:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:26:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:20:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:21:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:22:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:23:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:24:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:25:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl6vxy08u.rkt:26:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:26:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:27:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:28:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (car lst)) (+ (car lst) (sum-odds (cdr lst)))]\n      [else (sum-odds (cdr lst))]))\n  (define (even-positions lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (cdr lst)) empty]\n      [else (cons (cadr lst) (even-positions (cddr lst)))]))\n  (sum-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:27:4\nactual:     1\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:28:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:29:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:30:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:32:4\nactual:     13\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8k31vaf.rkt:33:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (empty? lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:23:4\nactual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:27:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:28:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntk9xip0.rkt:29:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-pos lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (sum-odd-even-pos (cdr lst) (+ acc (car lst)))\n            (sum-odd-even-pos (cdr lst) acc))))\n  (sum-odd-even-pos lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9i1qg61i.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (first lst))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptm4v_i9d.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (car lst)) (+ (car lst) (sum-odd-even-positions (cdr lst)))]\n      [else (sum-odd-even-positions (cdr lst))]))\n  (sum-odd-even-positions (cdr lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gnt_lfo.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter even? (filter odd? (range 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2fg9hr5.rkt:17:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2fg9hr5.rkt:18:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2fg9hr5.rkt:20:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2fg9hr5.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2fg9hr5.rkt:23:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (car lst) (solution (cdr lst)))]\n    [else\n     (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond ((null? lst) 0)\n          ((even? (car lst)) (+ (car lst) (sum-odd-even-positions (cdr lst))))\n          (else (sum-odd-even-positions (cdr lst)))))\n  (sum-odd-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:21:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:25:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:26:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgppm90u1.rkt:27:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (rest (rest lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:21:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:23:4\nactual:     321\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:27:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:23:4\nactual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:27:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:28:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:29:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-of-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-of-odds (rest lst)))]\n      [else (sum-of-odds (rest lst))]))\n  (sum-of-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpj9de_xb_.rkt:15:30: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmpj9de_xb_.rkt:15:30\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else\n     (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:22:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:26:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:27:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifa1b2cc.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp3vqqxgny.rkt:15:27: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp3vqqxgny.rkt:15:27\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (empty? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse09jxge.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (sum-odd-even-positions (rest lst) (+ acc (first lst)))]\n      [else (sum-odd-even-positions (rest lst) acc)]))\n  (sum-odd-even-positions lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpca6x5788.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (if (null? lst)\n        0\n        (+ (if (and (odd? (car lst)) (even? (length lst)))\n               (car lst)\n               0)\n           (sum-odd-even-positions (cdr lst)))))\n  (sum-odd-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbc_lpmf.rkt:25:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_v2oym0.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiay29bvk.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:21:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:22:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:24:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:25:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwxo_53g.rkt:26:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst acc)\n    (cond [(empty? lst) acc]\n          [(odd? (first lst)) (sum-odds (rest lst) (+ acc (first lst)))]\n          [else (sum-odds (rest lst) acc)]))\n  (sum-odds (rest lst) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:21:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:22:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:26:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8o50i70w.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (odd? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper (cdr lst) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:24:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:26:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:28:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_ghvi1r.rkt:29:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6coaxw_.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum (rest lst)))]\n      [else (sum (rest lst))]))\n  (sum (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp9m9l3qe7.rkt:15:22: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp9m9l3qe7.rkt:15:22\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (empty? lst)\n        acc\n        (if (even? (length lst))\n            (helper (rest lst) (+ acc (first lst)))\n            (helper (rest lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdzdqz2it.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdzdqz2it.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdzdqz2it.rkt:27:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdzdqz2it.rkt:28:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdzdqz2it.rkt:29:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:20:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:21:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:22:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:23:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:24:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:25:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ev6wgsw.rkt:26:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (sum-odd-even-positions (rest lst))]\n      [(even? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7100tyz.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-in-even-positions lst)\n    (cond\n      [(empty? lst) empty]\n      [(odd? (first lst)) (cons (first lst) (odd-in-even-positions (rest lst)))]\n      [else (odd-in-even-positions (rest lst))]))\n  (apply + (odd-in-even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2n_yekr.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-in-even lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) empty]\n      [(odd? (first lst)) (cons (first lst) (odd-in-even (rest (rest lst))))]\n      [else (odd-in-even (rest (rest lst)))]))\n  (apply + (odd-in-even lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdpz46w65.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (car lst)) (+ (sum-odd-even-positions (cdr lst)) (car lst))]\n      [else (sum-odd-even-positions (cdr lst))]))\n  (sum-odd-even-positions (filter odd? (range 1 (add1 (length lst)) 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid0izmvo.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid0izmvo.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid0izmvo.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid0izmvo.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpid0izmvo.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:26:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:27:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:28:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (sum (filter (lambda (x) (odd? x)) (filter-odd lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpx6xgutj0.rkt:14:38: filter-odd: unbound identifier\n  in: filter-odd\n  location...:\n   /tmp/tmpx6xgutj0.rkt:14:38\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (iter lst sum)\n    (cond\n      [(empty? lst) sum]\n      [(odd? (first lst)) (iter (rest lst) (+ sum (first lst)))]\n      [else (iter (rest lst) sum)]))\n  (iter lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (length lst)) (+ (sum-odd-even-positions (rest lst)) (first lst))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmcsufh2.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmcsufh2.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmcsufh2.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmcsufh2.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmcsufh2.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum (rest lst)))]\n      [else (sum (rest lst))]))\n  (sum (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp9m9l3qe7.rkt:15:22: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp9m9l3qe7.rkt:15:22\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (solution (rest lst))]\n        [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:19:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:20:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:21:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:22:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:23:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:24:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptno7lfv5.rkt:25:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp50ucff7r.rkt:10:48: if: missing an \"else\" expression\n  in: (if (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp50ucff7r.rkt:10:48\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (car lst)) (helper (cdr lst) (+ acc (car lst)))]\n      [else (helper (cdr lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:26:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:27:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_znfg3e7.rkt:28:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (define (sum-evens lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (first lst)) (+ (first lst) (sum-evens (rest lst)))]\n      [else (sum-evens (rest lst))]))\n  (+ (sum-odds (rest lst)) (sum-evens (rest (rest lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:27:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:28:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:29:4\nactual:     358\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:30:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:31:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:32:4\nactual:     68\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0qiqp53.rkt:33:4\nactual:     24\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:20:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:21:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:23:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:25:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpno9ysji2.rkt:26:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (define (sum-evens lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (first lst)) (+ (first lst) (sum-evens (rest lst)))]\n      [else (sum-evens (rest lst))]))\n  (+ (sum-odds (filter even? (range 1 (add1 (length lst)))))\n     (sum-evens (filter odd? (range 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xwvbple.rkt:28:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xwvbple.rkt:29:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xwvbple.rkt:31:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xwvbple.rkt:33:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xwvbple.rkt:34:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (remainder (length lst) 2)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnpol9ol.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (define (even-positions lst)\n    (cond\n      [(empty? lst) empty]\n      [(odd? (first lst)) (cons (first lst) (even-positions (rest lst)))]\n      [else (even-positions (rest lst))]))\n  (sum-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:27:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:28:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:29:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:30:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:32:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60yipsj8.rkt:33:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:26:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vpsp3sa.rkt:27:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc pos)\n    (cond\n      [(empty? lst) acc]\n      [(even? pos) (helper (rest lst) (+ acc (first lst)) (+ pos 1))]\n      [else (helper (rest lst) acc (+ pos 1))]))\n  (helper lst 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4pf6twy.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4pf6twy.rkt:26:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4pf6twy.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4pf6twy.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (iter lst sum)\n    (cond\n      [(empty? lst) sum]\n      [(odd? (first lst)) (iter (rest lst) (+ sum (first lst)))]\n      [else (iter (rest lst) sum)]))\n  (iter lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdbarj72.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) 0]\n      [(and (odd? (first lst)) (even? count)) (+ (first lst) (helper (rest lst) (+ count 1)))]\n      [else (helper (rest lst) (+ count 1))]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (enumerate lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp3vqqxgny.rkt:15:27: enumerate: unbound identifier\n  in: enumerate\n  location...:\n   /tmp/tmp3vqqxgny.rkt:15:27\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:23:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:25:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:26:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4lbvq6b.rkt:27:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (sum-odds (rest lst) (+ acc (first lst)))]\n      [else (sum-odds (rest lst) acc)]))\n  (sum-odds (rest lst) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0_qofh6.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (if (null? lst)\n        0\n        (if (odd? (car lst))\n            (+ (car lst) (sum-odds (cdr lst)))\n            (sum-odds (cdr lst)))))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyss1iarj.rkt:23:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyss1iarj.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyss1iarj.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyss1iarj.rkt:28:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyss1iarj.rkt:29:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(even? (first lst)) (+ (odd-even-sum (rest lst)) (first lst))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (filter odd? (filter even? (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyyq0run.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyyq0run.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyyq0run.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyyq0run.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyyq0run.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst)) (solution (rest lst))]\n    [else (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:20:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:22:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:23:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:24:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:25:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpto83tbxf.rkt:26:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (list-ref lst 1))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:21:4\nactual:     9\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:22:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:25:4\nactual:     8\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:26:4\nactual:     45\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjkbane8f.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(odd? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:22:4\nactual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:23:4\nactual:     15\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxq90ith.rkt:28:4\nactual:     25\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (solution (rest lst)) (if (odd? (first lst)) (first lst) 0))]\n    [else\n     (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnzkc7ve2.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:23:4\nactual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:25:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:27:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:28:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa4escs8g.rkt:29:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(null? lst) 0]\n      [(odd? (car lst)) (+ (car lst) (sum-odds (cdr lst)))]\n      [else (sum-odds (cdr lst))]))\n  (sum-odds (filter even? (range 1 (add1 (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ocm0grg.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ocm0grg.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ocm0grg.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ocm0grg.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ocm0grg.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n      [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8iyqjip.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (odd-even-sum lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (odd-even-sum (rest lst)))]\n          [else (odd-even-sum (rest lst))]))\n  (odd-even-sum (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:21:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:22:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:23:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:24:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:26:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp82bp89b.rkt:27:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range 1 (add1 (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dn1cpf_.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dn1cpf_.rkt:22:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dn1cpf_.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dn1cpf_.rkt:26:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dn1cpf_.rkt:27:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-positions lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-positions (rest lst)))]\n      [else (sum-odd-even-positions (rest lst))]))\n  (sum-odd-even-positions (rest lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:23:4\nactual:     12\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:24:4\nactual:     334\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:25:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:27:4\nactual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv18ln030.rkt:28:4\nactual:     22\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:26:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:27:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzgn_viwr.rkt:28:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (length lst))\n     (+ (car lst) (solution (cdr lst)))]\n    [else\n     (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppbjw8yon.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odd-even-pos lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odd-even-pos (rest lst)))]\n      [else (sum-odd-even-pos (rest lst))]))\n  (sum-odd-even-pos (rest (rest lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:22:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:24:4\nactual:     321\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdh4k3ra.rkt:28:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n          [else (sum-odds (rest lst))]))\n  (sum-odds (rest (rest lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:21:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:23:4\nactual:     321\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:24:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0_ivtp2.rkt:27:4\nactual:     9\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-odds lst)\n    (cond\n      [(empty? lst) 0]\n      [(odd? (first lst)) (+ (first lst) (sum-odds (rest lst)))]\n      [else (sum-odds (rest lst))]))\n  (sum-odds (filter even? (range (length lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:22:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:23:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:27:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgceru01g.rkt:28:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (even? (car lst))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:23:4\nactual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:24:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:25:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:27:4\nactual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:28:4\nactual:     62\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj48dcz_t.rkt:29:4\nactual:     2\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039814
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest lst))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp932wu_2v.rkt:14:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp932wu_2v.rkt:14:0\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:17:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:18:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:19:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:20:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:21:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:22:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpco43wpdi.rkt:23:4\n\nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(even? (length lst)) (helper (rest lst) (+ acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:23:4\nactual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:24:4\nactual:     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:26:4\nactual:     4\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:27:4\nactual:     53\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1awavupu.rkt:28:4\nactual:     5\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (sum-of-odds lst)\n    (cond [(empty? lst) 0]\n          [(odd? (first lst)) (+ (first lst) (sum-of-odds (rest lst)))]\n          [else (sum-of-odds (rest lst))]))\n  (define (even-positions lst)\n    (cond [(empty? lst) empty]\n          [(even? (first lst)) (cons (first lst) (even-positions (rest lst)))]\n          [else (even-positions (rest lst))]))\n  (sum-of-odds (even-positions lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhyu8441.rkt:25:4\nactual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhyu8441.rkt:26:4\nactual:     0\nexpected:   9\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhyu8441.rkt:28:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhyu8441.rkt:30:4\nactual:     0\nexpected:   23\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhyu8441.rkt:31:4\nactual:     0\nexpected:   3\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039815
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> solution([5, 8, 7, 1]) \n;; 12\n;; >>> solution([3, 3, 3, 3, 3]) \n;; 9\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and (odd? (car lst)) (even? (length lst)))\n            (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ts8allo.rkt:24:4\nactual:     6\nexpected:   9\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039813
    }
  ]
}