language: rkt
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:14:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:16:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:17:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:18:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:19:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:20:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:21:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:22:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:23:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:24:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnbmk4cw6.rkt:25:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (\u03BB (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo16xsoo3.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd_xde51.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) lst)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n\
    \    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n\
    \    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal?\
    \ (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate\
    \ (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9\
    \ 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:18:4

    actual:     19.6

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:19:4

    actual:     7.76

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:22:4

    actual:     62.809999999999995

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:23:4

    actual:     1075.59

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4kuzw29c.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp01reaul1.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
- exit_code: 0
  program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal?\
    \ (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4\
    \ 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n\
    \    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal?\
    \ (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4\
    \ 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal?\
    \ (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0))\
    \ 2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:15:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:16:4

    actual:     14.0

    expected:   14

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:17:4

    actual:     84.0

    expected:   84

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:18:4

    actual:     29.0

    expected:   29

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:19:4

    actual:     6.0

    expected:   6

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:20:4

    actual:     10230.0

    expected:   10230

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:21:4

    actual:     200000000.0

    expected:   200000000

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:22:4

    actual:     75.0

    expected:   75

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:23:4

    actual:     1086.0

    expected:   1086

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:24:4

    actual:     0.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:25:4

    actual:     1.0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mkzf_oe.rkt:26:4

    actual:     2.0

    expected:   2

    --------------------

    '
  stdout: ''
  timestamp: 1660040097
