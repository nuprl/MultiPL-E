name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n(define (mean_absolute_deviation\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x)\
    \ (abs (- x mean))) numbers)])\n    (mean deviations)))\n", "  (define mean (mean\
    \ numbers))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean\
    \ diffs))\n", "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum\
    \ lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (absolute_deviations lst)\n    (if (null? lst)\n        '()\n        (cons (abs\
    \ (- (car lst) (mean lst))) (absolute_deviations (cdr lst)))))\n  (/ (sum (absolute_deviations\
    \ numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ absolute_deviations (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_deviations))\n",
  "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum_of_absolute_differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers)\
    \ (mean numbers)))\n           (sum_of_absolute_differences (cdr numbers)))))\n\
    \  (/ (sum_of_absolute_differences numbers) (length numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference\
    \ numbers)) (length numbers)))\n", "  (let* ([numbers-mean (mean numbers)]\n \
    \        [numbers-deviations (map (lambda (x) (abs (- x numbers-mean))) numbers)])\n\
    \    (mean numbers-deviations)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute_difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (/ (apply + (map absolute_difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n\
    \  (define (absolute_differences numbers)\n    (map (lambda (x) (absolute_difference\
    \ (- x (mean numbers)))) numbers))\n  (/ (apply + (absolute_differences numbers))\
    \ (length numbers)))\n", "  (let* ([mean (mean numbers)]\n         [deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", " \
    \ (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (abs-diff x)\n    (if (&lt; x 0)\n        (- x)\n \
    \       x))\n  (define (average lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (diff-from-mean x)\n    (abs-diff (- x (average numbers))))\n  (average (map\
    \ diff-from-mean numbers)))\n", "  (define (average numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute_difference x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (absolute_differences numbers)\n    (map (lambda (x)\
    \ (absolute_difference (- x (average numbers)))) numbers))\n  (average (absolute_differences\
    \ numbers)))\n", "  (define (sum_of_absolute_differences numbers)\n    (if (null?\
    \ numbers)\n        0\n        (+ (abs (- (car numbers) (mean numbers)))\n   \
    \        (sum_of_absolute_differences (cdr numbers)))))\n  (/ (sum_of_absolute_differences\
    \ numbers)\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (-\
    \ x) x))\n  (define (deviation x)\n    (absolute (- x (mean numbers))))\n  (/\
    \ (apply + (map deviation numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference_from_mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference_from_mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n\
    \        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (absolute x)\n    (if (&lt; x 0)\n        (- x)\n\
    \        x))\n  (define (average lst)\n    (define (sum lst)\n      (if (null?\
    \ lst)\n          0\n          (+ (car lst) (sum (cdr lst)))))\n    (/ (sum lst)\
    \ (length lst)))\n  (define (absolute_difference x y)\n    (absolute (- x y)))\n\
    \  (define (absolute_differences lst)\n    (if (null? lst)\n        '()\n    \
    \    (cons (absolute_difference (car lst) (mean numbers))\n              (absolute_differences\
    \ (cdr lst)))))\n  (average (absolute_differences numbers)))\n</code>\nI'm not\
    \ sure if this is the most efficient way to do this, but it seems to work.\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (define mean (mean numbers))\n\
    \  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n",
  "  (define (mean_absolute_deviation_helper numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_helper (cdr numbers)\
    \ (+ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_helper\
    \ numbers 0 0))\n", "  (let* ([mean (mean numbers)]\n         [deviations (map\
    \ (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x)\
    \ x))\n  (define (deviation x)\n    (absolute (- x (mean numbers))))\n  (/ (apply\
    \ + (map deviation numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n",
  "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum_absolute_differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers)\
    \ (mean numbers)))\n           (sum_absolute_differences (cdr numbers)))))\n \
    \ (/ (sum_absolute_differences numbers) (length numbers)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers) (+ sum (abs (- (car numbers) (/\
    \ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_iter numbers 0 0))\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (let* ([mean (mean numbers)]\n\
    \         [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean\
    \ deviations)))\n", "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (average lst)\n    (/ (sum lst) (length lst)))\n  (define (difference\
    \ lst)\n    (map (lambda (x) (abs (- x (average lst)))) lst))\n  (average (difference\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (average-absolute-difference\
    \ numbers)\n    (define (difference-from-mean x)\n      (absolute-difference (-\
    \ x (mean numbers))))\n    (/ (apply + (map difference-from-mean numbers)) (length\
    \ numbers)))\n  (average-absolute-difference numbers))\n</code>\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_differences))\n", "  (define (absolute\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum_absolute_differences numbers)\n\
    \    (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers) (mean\
    \ numbers)))\n           (sum_absolute_differences (cdr numbers)))))\n  (/ (sum_absolute_differences\
    \ numbers) (length numbers)))\n", "  (define (mean_absolute_deviation_iter numbers\
    \ sum count)\n    (if (null? numbers)\n        (/ sum count)\n        (mean_absolute_deviation_iter\
    \ (cdr numbers) (+ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n\
    \  (mean_absolute_deviation_iter numbers 0 0))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers) (+ sum (abs (- (car numbers) (/\
    \ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_iter numbers 0 0))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences\
    \ numbers)\n    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (let*\
    \ ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x mean)))\
    \ numbers)])\n    (mean deviations)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ absolute_differences (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_differences))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (mean_absolute_deviation_helper\
    \ numbers mean)\n    (if (null? numbers)\n        0\n        (+ (absolute (- (car\
    \ numbers) mean))\n           (mean_absolute_deviation_helper (cdr numbers) mean))))\n\
    \  (define (mean_absolute_deviation_helper2 numbers mean)\n    (/ (mean_absolute_deviation_helper\
    \ numbers mean) (length numbers)))\n  (mean_absolute_deviation_helper2 numbers\
    \ (mean numbers)))\n</code>\nI'm not sure if this is the best way to do it, but\
    \ it works.\n", "  (define (deviation x)\n    (abs (- x (mean numbers))))\n  (mean\
    \ (map deviation numbers)))\n", "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n\
    \  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (absolute_difference_from_mean x)\n    (abs (- x (mean numbers))))\n  (define\
    \ (absolute_differences_from_mean lst)\n    (if (null? lst)\n        '()\n   \
    \     (cons (absolute_difference_from_mean (car lst))\n              (absolute_differences_from_mean\
    \ (cdr lst)))))\n  (/ (sum (absolute_differences_from_mean numbers))\n     (length\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define absolute_differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_differences))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-difference x)\n\
    \    (absolute (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x)\
    \ x))\n  (define (deviation x)\n    (absolute (- x (mean numbers))))\n  (/ (apply\
    \ + (map deviation numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n",
  "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null?\
    \ lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n\
    \    (/ (sum lst) (length lst)))\n  (define (deviation lst)\n    (map (lambda\
    \ (x) (abs (- x (mean lst)))) lst))\n  (mean (deviation numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean diffs))\n", "  (define (sum_of_absolute_differences numbers)\n    (if\
    \ (null? numbers)\n        0\n        (+ (abs (- (car numbers) (mean numbers)))\n\
    \           (sum_of_absolute_differences (cdr numbers)))))\n  (/ (sum_of_absolute_differences\
    \ numbers)\n     (length numbers)))\n", "  (define (abs_diff x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (abs_diff_from_mean x)\n    (abs_diff (- x (mean numbers))))\n\
    \  (mean (map abs_diff_from_mean numbers)))\n", "  (define (mean numbers)\n  \
    \  (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (absolute-differences numbers)\n    (map (lambda (x)\
    \ (absolute-difference (- x (mean numbers)))) numbers))\n  (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ deviations (map (lambda (x) (abs (- x mean))) numbers))\n  (mean deviations))\n",
  "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (deviation numbers)\n\
    \    (map (lambda (x) (absolute (- x (mean numbers)))) numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (deviation\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences\
    \ numbers)\n    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (abs_diff x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum_abs_diff x)\n   \
    \ (apply + (map abs_diff x)))\n  (define (mean_abs_diff x)\n    (/ (sum_abs_diff\
    \ x) (length x)))\n  (define (centerpoint x)\n    (/ (apply + x) (length x)))\n\
    \  (define (abs_diff_from_centerpoint x)\n    (map (lambda (y) (abs_diff (- y\
    \ (centerpoint x)))) x))\n  (mean_abs_diff (abs_diff_from_centerpoint numbers)))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (average\
    \ lst)\n    (define (sum lst)\n      (if (null? lst)\n          0\n          (+\
    \ (car lst) (sum (cdr lst)))))\n    (/ (sum lst) (length lst)))\n  (define (absolute_difference\
    \ x)\n    (absolute (- x (mean numbers))))\n  (average (map absolute_difference\
    \ numbers)))\n</code>\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs\
    \ (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (-\
    \ x) x))\n  (define (average_absolute_differences numbers)\n    (define (absolute_differences\
    \ numbers)\n      (map (lambda (x) (absolute (- x (mean numbers)))) numbers))\n\
    \    (/ (apply + (absolute_differences numbers)) (length numbers)))\n  (average_absolute_differences\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences\
    \ numbers)\n    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (deviations numbers)\n    (map (lambda\
    \ (x) (abs (- x (average numbers)))) numbers))\n  (average (deviations numbers)))\n",
  "  (define mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean diffs))\n", "  (define mean (mean numbers))\n  (define deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean deviations))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_differences))\n", "  (define mean (mean\
    \ numbers))\n  (define deviations (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean deviations))\n", "  (define (mean_absolute_deviation_helper numbers sum\
    \ count)\n    (if (null? numbers)\n        (/ sum count)\n        (mean_absolute_deviation_helper\
    \ (cdr numbers) (+ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n\
    \  (mean_absolute_deviation_helper numbers 0 0))\n", "  (define (average numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (average numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (average-absolute-differences numbers))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_deviations (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_deviations))\n", "  (define (absolute-difference\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (mean-absolute-deviation-helper\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean-absolute-deviation-helper (cdr numbers)\n                            \
    \            (+ sum (absolute-difference (- (car numbers) (mean numbers))))\n\
    \                                        (+ count 1))))\n  (mean-absolute-deviation-helper\
    \ numbers 0 0))\n", "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (average xs)\n    (/ (apply + xs) (length xs)))\n  (define (deviation x)\n \
    \   (absolute (- x (average numbers))))\n  (define (deviations xs)\n    (map deviation\
    \ xs))\n  (define (average_deviations xs)\n    (average (deviations xs)))\n  (average_deviations\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (/ (apply + (map absolute-difference-from-mean numbers))\n     (length numbers)))\n",
  "  (let* ([mean (mean numbers)]\n         [absolute-deviations (map (lambda (x)\
    \ (abs (- x mean))) numbers)])\n    (mean absolute-deviations)))\n", "  (let*\
    \ ([numbers-mean (mean numbers)]\n         [numbers-deviations (map (lambda (x)\
    \ (abs (- x numbers-mean))) numbers)])\n    (mean numbers-deviations)))\n", " \
    \ (define mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean diffs))\n", "  (define (sum_of_absolute_differences numbers)\n\
    \    (define (sum_of_absolute_differences_iter numbers sum)\n      (if (null?\
    \ numbers)\n          sum\n          (sum_of_absolute_differences_iter (cdr numbers)\n\
    \                                            (+ sum (abs (- (car numbers)\n  \
    \                                                         (mean numbers)))))))\n\
    \    (sum_of_absolute_differences_iter numbers 0))\n  (/ (sum_of_absolute_differences\
    \ numbers)\n     (length numbers)))\n", "  (define (mean_absolute_deviation_helper\
    \ numbers mean)\n    (if (null? numbers)\n        0\n        (+ (/ (abs (- (car\
    \ numbers) mean)) (length numbers))\n           (mean_absolute_deviation_helper\
    \ (cdr numbers) mean))))\n  (mean_absolute_deviation_helper numbers (mean numbers)))\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0)\n  \
    \      (- x)\n        x))\n  (define (absolute_difference x)\n    (absolute (-\
    \ x (mean numbers))))\n  (define (absolute_differences numbers)\n    (map absolute_difference\
    \ numbers))\n  (/ (apply + (absolute_differences numbers)) (length numbers)))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (average_absolute_difference_from_mean\
    \ numbers)\n    (average (map (lambda (x) (absolute (- x (average numbers))))\
    \ numbers)))\n  (average_absolute_difference_from_mean numbers))\n", "  (define\
    \ (mean_absolute_deviation_iter numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_iter (cdr numbers) (+\
    \ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (abs-diff x)\n\
    \    (abs (- x (mean numbers))))\n  (define (abs-diff-list lst)\n    (map abs-diff\
    \ lst))\n  (/ (sum (abs-diff-list numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_differences))\n", "  (let* ([mean (mean\
    \ numbers)]\n         [absolute-differences (map (lambda (x) (abs (- x mean)))\
    \ numbers)])\n    (mean absolute-differences)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers) (+ sum (abs (- (car numbers) (/\
    \ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_iter numbers 0 0))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (mean-absolute-difference\
    \ numbers)\n    (mean (map (lambda (x) (absolute-difference (- x (mean numbers))))\
    \ numbers)))\n  (mean-absolute-difference numbers))\n", "  (define (sum lst)\n\
    \    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define\
    \ (abs x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (average\
    \ lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation lst)\n    (map (lambda\
    \ (x) (abs (- x (average lst)))) lst))\n  (average (deviation numbers)))\n", " \
    \ (define mean (mean numbers))\n  (define absolute_differences (map (lambda (x)\
    \ (abs (- x mean))) numbers))\n  (mean absolute_differences))\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference\
    \ x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (absolute_differences\
    \ numbers)\n    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_differences))\n", "  (define (absolute\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n\
    \        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n  \
    \  (/ (sum lst) (length lst)))\n  (define (absolute_difference x)\n    (absolute\
    \ (- x (mean numbers))))\n  (define (absolute_differences lst)\n    (if (null?\
    \ lst)\n        '()\n        (cons (absolute_difference (car lst)) (absolute_differences\
    \ (cdr lst)))))\n  (/ (sum (absolute_differences numbers)) (length numbers)))\n",
  "  (define (mean_absolute_deviation_iter numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_iter (cdr numbers) (+\
    \ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (define (abs_difference x)\n    (abs (- x (mean numbers))))\n\
    \  (mean (map abs_difference numbers)))\n", "  (define (mean numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (abs x)\n    (if (&lt; x 0)\
    \ (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car\
    \ lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n     \
    \   0\n        (+ 1 (length (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (deviation lst)\n    (map (lambda (x) (abs (- x (mean\
    \ lst)))) lst))\n  (/ (sum (deviation numbers)) (length numbers)))\n</code>\n\
    I'm not sure if this is the best way to do it, but it works.\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (deviation-from-mean x)\n    (absolute\
    \ (- x (mean numbers))))\n  (/ (apply + (map deviation-from-mean numbers)) (length\
    \ numbers)))\n", "  (define (average numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs (- number\
    \ (average numbers))))\n  (define (absolute-differences-from-mean numbers)\n \
    \   (map absolute-difference-from-mean numbers))\n  (define (average-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (average-absolute-differences numbers))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_differences))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference_from_mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference_from_mean\
    \ numbers))\n     (length numbers)))\n", "  (define (absolute x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n      \
    \  (+ (car lst) (sum (cdr lst)))))\n  (define (average lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (deviations lst)\n    (map (lambda (x) (absolute (-\
    \ x (average lst)))) lst))\n  (average (deviations numbers)))\n", "  (define mean\
    \ (mean numbers))\n  (define absolute_differences (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean absolute_differences))\n", "  (define (abs x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n      \
    \  (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n\
    \        0\n        (+ 1 (length (cdr lst)))))\n  (define (average lst)\n    (/\
    \ (sum lst) (length lst)))\n  (define (mean_absolute_deviation_helper lst)\n \
    \   (if (null? lst)\n        0\n        (+ (abs (- (car lst) (average numbers)))\n\
    \           (mean_absolute_deviation_helper (cdr lst)))))\n  (/ (mean_absolute_deviation_helper\
    \ numbers) (length numbers)))\n", "  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute_difference number)\n    (abs\
    \ (- number (average numbers))))\n  (define (absolute_differences numbers)\n \
    \   (map absolute_difference numbers))\n  (/ (apply + (absolute_differences numbers))\
    \ (length numbers)))\n", "  (let* ([mean (mean numbers)]\n         [absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean absolute-differences)))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference number)\n    (abs (- number (average numbers))))\n  (define\
    \ (absolute_differences numbers)\n    (map absolute_difference numbers))\n  (/\
    \ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (absolute-difference-from-mean x)\n \
    \   (absolute (- x (average numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (average-absolute-differences numbers))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute_difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (/ (apply + (map absolute_difference numbers))\
    \ (length numbers)))\n", "  (let* ([mean (mean numbers)]\n         [deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", " \
    \ (define mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean diffs))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference x)\n    (if (&lt; x 0) (-\
    \ x) x))\n  (define (absolute-differences numbers)\n    (map (lambda (x) (absolute-difference\
    \ (- x (mean numbers)))) numbers))\n  (/ (apply + (absolute-differences numbers))\
    \ (length numbers)))\n", "  (define mean (mean numbers))\n  (define absolute_differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_differences))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference x)\n    (abs (- x (average numbers))))\n  (define (absolute_differences\
    \ numbers)\n    (map absolute_difference numbers))\n  (define (average_absolute_differences\
    \ numbers)\n    (/ (apply + (absolute_differences numbers)) (length numbers)))\n\
    \  (average_absolute_differences numbers))\n", "  (define (mean numbers)\n   \
    \ (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute_difference_from_mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute_difference_from_mean\
    \ numbers))\n     (length numbers)))\n", "  (let* ([mean (mean numbers)]\n   \
    \      [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-difference x)\n\
    \    (absolute (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x)\
    \ x))\n  (define (absolute-difference x)\n    (absolute (- x (mean numbers))))\n\
    \  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define deviations (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean deviations))\n", "  (define (average lst)\n    (/ (apply\
    \ + lst) (length lst)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n\
    \  (define (difference x)\n    (absolute (- x (average numbers))))\n  (define\
    \ (differences lst)\n    (map difference lst))\n  (define (mean_absolute_deviation_helper\
    \ lst)\n    (average (differences lst)))\n  (mean_absolute_deviation_helper numbers))\n\
    </code>\nI'm not sure if this is the most efficient way to do this, but it works.\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (average_absolute_difference\
    \ numbers)\n    (define (absolute_difference x)\n      (absolute (- x (mean numbers))))\n\
    \    (/ (apply + (map absolute_difference numbers)) (length numbers)))\n  (average_absolute_difference\
    \ numbers))\n", "  (define (abs_diff x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (sum_abs_diff x)\n    (apply + (map abs_diff x)))\n  (define (mean_abs_diff\
    \ x)\n    (/ (sum_abs_diff x) (length x)))\n  (mean_abs_diff (map (lambda (x)\
    \ (- x (mean numbers))) numbers)))\n</code>\n", "  (define (average numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (average numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define diffs (map (lambda\
    \ (x) (abs (- x mean))) numbers))\n  (mean diffs))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (mean-absolute-difference x)\n    (absolute-difference\
    \ (- x (mean numbers))))\n  (define (mean-absolute-differences numbers)\n    (map\
    \ mean-absolute-difference numbers))\n  (define (mean-absolute-deviation numbers)\n\
    \    (/ (apply + (mean-absolute-differences numbers)) (length numbers)))\n  (mean-absolute-deviation\
    \ numbers))\n", "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum\
    \ lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation x)\n\
    \    (abs (- x (mean numbers))))\n  (define (deviations lst)\n    (if (null? lst)\n\
    \        '()\n        (cons (deviation (car lst)) (deviations (cdr lst)))))\n\
    \  (/ (sum (deviations numbers)) (length numbers)))\n", "  (let* ([mean (mean\
    \ numbers)]\n         [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n\
    \    (mean deviations)))\n", "  (let* ([mean (mean numbers)]\n         [deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", " \
    \ (define (abs-diff x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum-abs-diffs\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (abs-diff (- (car numbers)\
    \ (mean numbers)))\n           (sum-abs-diffs (cdr numbers)))))\n  (/ (sum-abs-diffs\
    \ numbers) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference number)\n    (abs (- number\
    \ (mean numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-difference-from-mean\
    \ x)\n    (absolute (- x (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (absolute x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (sum_of_absolute_differences numbers)\n    (if (null?\
    \ numbers)\n        0\n        (+ (absolute (- (car numbers) (mean numbers)))\n\
    \           (sum_of_absolute_differences (cdr numbers)))))\n  (/ (sum_of_absolute_differences\
    \ numbers) (length numbers)))\n", "  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (average numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (average-absolute-differences numbers))\n", "  (define\
    \ (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n\
    \        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n\
    \    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (define\
    \ (average lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation lst)\n\
    \    (map (lambda (x) (abs (- x (average lst)))) lst))\n  (average (deviation\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences\
    \ numbers)\n    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum-of-absolute-differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers)\
    \ (mean numbers)))\n           (sum-of-absolute-differences (cdr numbers)))))\n\
    \  (/ (sum-of-absolute-differences numbers) (length numbers)))\n", "  (define\
    \ (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (abs x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define\
    \ (average lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation lst)\n\
    \    (map (lambda (x) (abs (- x (average lst)))) lst))\n  (average (deviation\
    \ numbers)))\n", "  (define (abs-diff x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (sum-abs-diff x)\n    (apply + (map abs-diff x)))\n  (define (mean-abs-diff\
    \ x)\n    (/ (sum-abs-diff x) (length x)))\n  (define (mean x)\n    (/ (apply\
    \ + x) (length x)))\n  (define (centerpoint x)\n    (mean x))\n  (define (diff-from-centerpoint\
    \ x)\n    (map (lambda (y) (- y (centerpoint x))) x))\n  (mean-abs-diff (diff-from-centerpoint\
    \ numbers)))\n", "  (define (average numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute_difference x)\n    (if (&lt; x 0) (- x) x))\n\
    \  (define (absolute_differences numbers)\n    (map (lambda (x) (absolute_difference\
    \ (- x (average numbers)))) numbers))\n  (define (average_absolute_differences\
    \ numbers)\n    (/ (apply + (absolute_differences numbers)) (length numbers)))\n\
    \  (average_absolute_differences numbers))\n", "  (define (mean numbers)\n   \
    \ (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences numbers)\n    (map\
    \ (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n  (/ (apply\
    \ + (absolute_differences numbers)) (length numbers)))\n", "  (define (abs x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n    \
    \    0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if\
    \ (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (define (average\
    \ lst)\n    (/ (sum lst) (length lst)))\n  (define (average_absolute_difference\
    \ lst)\n    (define (absolute_difference x)\n      (abs (- x (average lst))))\n\
    \    (define (sum_absolute_differences lst)\n      (if (null? lst)\n         \
    \ 0\n          (+ (absolute_difference (car lst))\n             (sum_absolute_differences\
    \ (cdr lst)))))\n    (/ (sum_absolute_differences lst) (length lst)))\n  (average_absolute_difference\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference_from_mean number)\n    (abs (- number (mean numbers))))\n\
    \  (/ (apply + (map absolute_difference_from_mean numbers))\n     (length numbers)))\n",
  "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n   \
    \ (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define\
    \ (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation x)\n    (absolute\
    \ (- x (mean numbers))))\n  (define (deviations lst)\n    (if (null? lst)\n  \
    \      '()\n        (cons (deviation (car lst)) (deviations (cdr lst)))))\n  (/\
    \ (sum (deviations numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n",
  "  (define mean (mean numbers))\n  (define deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers))\n  (mean deviations))\n", "  (define (mean_absolute_deviation_helper\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_helper (cdr numbers) (+ sum (abs (- (car numbers) (/\
    \ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_helper numbers 0 0))\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ absolute_differences (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_differences))\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (define (absolute x)\n  \
    \  (if (&lt; x 0) (- x) x))\n  (define (sum_absolute_differences numbers)\n  \
    \  (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers) (mean\
    \ numbers)))\n           (sum_absolute_differences (cdr numbers)))))\n  (/ (sum_absolute_differences\
    \ numbers) (length numbers)))\n", "  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute_difference x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (absolute_differences numbers)\n    (map (lambda (x)\
    \ (absolute_difference (- x (average numbers)))) numbers))\n  (average (absolute_differences\
    \ numbers)))\n", "  (define (average numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference x)\n    (if (&lt; x 0) (- x) x))\n\
    \  (define (average-absolute-difference numbers)\n    (define (average-absolute-difference-iter\
    \ numbers sum count)\n      (if (null? numbers)\n          (/ sum count)\n   \
    \       (average-absolute-difference-iter (cdr numbers)\n                    \
    \                        (+ sum (absolute-difference (- (car numbers) (average\
    \ numbers))))\n                                            (+ count 1))))\n  \
    \  (average-absolute-difference-iter numbers 0 0))\n  (average-absolute-difference\
    \ numbers))\n", "  (define (abs_difference a b)\n    (if (&lt; a b) (- b a) (-\
    \ a b)))\n  (define (sum_abs_differences numbers)\n    (if (null? numbers)\n \
    \       0\n        (+ (abs_difference (car numbers) (mean numbers))\n        \
    \   (sum_abs_differences (cdr numbers)))))\n  (/ (sum_abs_differences numbers)\
    \ (length numbers)))\n", "  (define mean (mean numbers))\n  (define diffs (map\
    \ (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n", "  (let* ((mean\
    \ (mean numbers))\n         (absolute_deviations (map (lambda (x) (abs (- x mean)))\
    \ numbers)))\n    (mean absolute_deviations)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (absolute-differences numbers)\n    (map\
    \ (lambda (x) (absolute-difference (- x (mean numbers)))) numbers))\n  (/ (apply\
    \ + (absolute-differences numbers)) (length numbers)))\n", "  (define (abs x)\n\
    \    (if (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n    \
    \    0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/\
    \ (sum lst) (length lst)))\n  (define (absolute_deviations lst)\n    (map (lambda\
    \ (x) (abs (- x (mean lst)))) lst))\n  (define (average lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (average (absolute_deviations numbers)))\n", "  (define (absolute\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum_of_absolute_differences numbers)\n\
    \    (if (null? numbers)\n        0\n        (+ (absolute (- (car numbers) (mean\
    \ numbers)))\n           (sum_of_absolute_differences (cdr numbers)))))\n  (/\
    \ (sum_of_absolute_differences numbers) (length numbers)))\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute_differences numbers)\n\
    \    (map (lambda (x) (absolute_difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (mean_absolute_deviation-helper numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation-helper (cdr numbers)\
    \ (+ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n  (mean_absolute_deviation-helper\
    \ numbers 0 0))\n", "  (let* ([mean (mean numbers)]\n         [deviations (map\
    \ (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-differences numbers)\n\
    \    (map (lambda (x) (absolute-difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean diffs))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (deviation x)\n    (absolute (- x (mean numbers))))\n  (/ (apply + (map deviation\
    \ numbers)) (length numbers)))\n", "  (define (mean_absolute_deviation_helper\
    \ numbers sum)\n    (if (null? numbers)\n        (/ sum (length numbers))\n  \
    \      (mean_absolute_deviation_helper (cdr numbers) (+ sum (abs (- (car numbers)\
    \ (/ sum (length numbers))))))))\n  (mean_absolute_deviation_helper numbers 0))\n",
  "  (define (abs-diff x)\n    (if (&lt; x 0) (- x) x))\n  (define (mean-abs-diff\
    \ x)\n    (abs-diff (- x (mean numbers))))\n  (define (mean-abs-diffs numbers)\n\
    \    (map mean-abs-diff numbers))\n  (mean (mean-abs-diffs numbers)))\n", "  (let*\
    \ ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x mean)))\
    \ numbers)])\n    (mean deviations)))\n", "  (let* ([mean (mean numbers)]\n  \
    \       [absolute-deviations (map (lambda (x) (abs (- x mean))) numbers)])\n \
    \   (mean absolute-deviations)))\n", "  (let* ([mean (mean numbers)]\n       \
    \  [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference number)\n    (abs (- number (mean numbers))))\n  (/ (apply\
    \ + (map absolute_difference numbers)) (length numbers)))\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-differences numbers)\n\
    \    (map (lambda (x) (absolute-difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute_deviations (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute_deviations))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (sum lst)\n    (if (null? lst)\n\
    \        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n  \
    \  (/ (sum lst) (length lst)))\n  (define (absolute x)\n    (if (< x 0)\n    \
    \    (- x)\n        x))\n  (define (average_absolute_difference_from_mean lst)\n\
    \    (define (average_absolute_difference_from_mean_helper lst mean)\n      (if\
    \ (null? lst)\n          0\n          (+ (/ (absolute (- (car lst) mean)) (length\
    \ lst))\n             (average_absolute_difference_from_mean_helper (cdr lst)\
    \ mean))))\n    (average_absolute_difference_from_mean_helper lst (mean lst)))\n\
    \  (average_absolute_difference_from_mean numbers))\n", "  (define (mean_absolute_deviation_helper\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_helper (cdr numbers) (+ sum (abs (- (car numbers) (/\
    \ sum count)))) (+ count 1))))\n  (mean_absolute_deviation_helper numbers 0 0))\n",
  "  (define (absolute_difference x)\n    (abs (- x (mean numbers))))\n  (mean (map\
    \ absolute_difference numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (-\
    \ x) x))\n  (define (deviation x)\n    (absolute (- x (mean numbers))))\n  (/\
    \ (apply + (map deviation numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n    (if\
    \ (&lt; x 0) (- x) x))\n  (define (absolute-difference x)\n    (absolute (- x\
    \ (mean numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length\
    \ numbers)))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n      \
    \  (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length\
    \ lst)))\n  (define (absolute x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n\
    \  (define (average lst)\n    (define (helper lst acc)\n      (if (null? lst)\n\
    \          (/ acc (length lst))\n          (helper (cdr lst) (+ acc (absolute\
    \ (- (car lst) (mean lst)))))))\n    (helper lst 0))\n  (average numbers))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (average_absolute_difference\
    \ lst)\n    (define (average_absolute_difference_helper lst)\n      (if (null?\
    \ lst)\n          0\n          (+ (absolute (- (car lst) (mean lst)))\n      \
    \       (average_absolute_difference_helper (cdr lst)))))\n    (/ (average_absolute_difference_helper\
    \ lst) (length lst)))\n  (average_absolute_difference numbers))\n</code>\n", " \
    \ (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference_from_mean number)\n    (abs (- number (mean numbers))))\n\
    \  (/ (apply + (map absolute_difference_from_mean numbers))\n     (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (deviation-from-mean x)\n\
    \    (absolute (- x (mean numbers))))\n  (define (deviations numbers)\n    (map\
    \ (lambda (x) (deviation-from-mean x)) numbers))\n  (/ (apply + (deviations numbers))\
    \ (length numbers)))\n", "  (define (abs_diff x)\n    (abs (- x (mean numbers))))\n\
    \  (mean (map abs_diff numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ absolute_differences (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute_differences))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (&lt; x 0) (- x) x))\n  (define (absolute-differences\
    \ numbers)\n    (map (lambda (x) (absolute-difference (- x (mean numbers)))) numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (let*\
    \ ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x mean)))\
    \ numbers)])\n    (mean deviations)))\n", "  (define (abs x)\n    (if (&lt; x\
    \ 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+\
    \ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n\
    \        0\n        (+ 1 (length (cdr lst)))))\n  (define (average lst)\n    (/\
    \ (sum lst) (length lst)))\n  (define (absolute_deviation_from_mean x)\n    (abs\
    \ (- x (average numbers))))\n  (define (absolute_deviations_from_mean lst)\n \
    \   (if (null? lst)\n        '()\n        (cons (absolute_deviation_from_mean\
    \ (car lst))\n              (absolute_deviations_from_mean (cdr lst)))))\n  (define\
    \ (mean_absolute_deviation lst)\n    (average (absolute_deviations_from_mean lst)))\n\
    \  (mean_absolute_deviation numbers))\n</code>\nI'm not sure if this is the best\
    \ way to do this, but it seems to work.\n", "  (define (mean numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-difference number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute_difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (/ (apply + (map absolute_difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (absolute-difference-from-mean x)\n    (absolute (- x (mean numbers))))\n  (/\
    \ (apply + (map absolute-difference-from-mean numbers))\n     (length numbers)))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference number)\n    (abs (- number (average numbers))))\n  (define\
    \ (absolute_differences numbers)\n    (map absolute_difference numbers))\n  (/\
    \ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define mean\
    \ (mean numbers))\n  (define deviations (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean deviations))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n\
    \        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (abs-diff x y)\n    (if (&lt; x y)\n        (- y x)\n\
    \        (- x y)))\n  (define (abs-diff-from-mean x)\n    (abs-diff x (mean numbers)))\n\
    \  (define (sum-abs-diffs lst)\n    (if (null? lst)\n        0\n        (+ (abs-diff-from-mean\
    \ (car lst)) (sum-abs-diffs (cdr lst)))))\n  (/ (sum-abs-diffs numbers) (length\
    \ numbers)))\n", "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define\
    \ (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (abs-diff-from-mean\
    \ lst)\n    (map (lambda (x) (absolute (- x (mean lst)))) lst))\n  (define (average\
    \ lst)\n    (/ (sum lst) (length lst)))\n  (average (abs-diff-from-mean numbers)))\n\
    </code>\nThe above code works as expected, but I'm wondering if there is a more\
    \ elegant way to write it.\nI'm particularly interested in the <code>abs-diff-from-mean</code>\
    \ function. It seems like there should be a way to do this without having to pass\
    \ <code>lst</code> as a parameter.\nI'm also interested in any other ways to improve\
    \ the code.\n\n\nA:\n\nI would use <code>apply</code> to avoid repeating the list:\n\
    <code>(define (mean_absolute_deviation numbers)\n  (define (absolute x)\n    (if\
    \ (&lt; x 0) (- x) x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n\
    \        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (abs-diff-from-mean lst)\n    (map (lambda (x) (absolute\
    \ (- x (apply mean lst)))) lst))\n  (define (average lst)\n    (/ (sum lst) (length\
    \ lst)))\n  (average (abs-diff-from-mean numbers)))\n</code>\n", "  (let* ([mean\
    \ (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n\
    \    (mean deviations)))\n", "  (define (mean_absolute_deviation_iter numbers\
    \ sum count)\n    (if (null? numbers)\n        (/ sum count)\n        (mean_absolute_deviation_iter\
    \ (cdr numbers) (+ sum (abs (- (car numbers) (/ sum count)))) (+ count 1))))\n\
    \  (mean_absolute_deviation_iter numbers 0 0))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n    (if\
    \ (&lt; x 0) (- x) x))\n  (define (absolute-difference x)\n    (absolute (- x\
    \ (mean numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length\
    \ numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
