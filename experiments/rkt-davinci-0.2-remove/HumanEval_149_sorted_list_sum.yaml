name: HumanEval_149_sorted_list_sum
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings as a parameter,\n\
  ;; deletes the strings that have odd lengths from it,\n;; and returns the resulted\
  \ list with a sorted order,\n;; The list is always a list of strings and never an\
  \ array of numbers,\n;; and it may contain duplicates.\n;; The order of the list\
  \ should be ascending by length of each word, and you\n;; should return the list\
  \ sorted by that rule.\n;; If two words have the same length, sort the list alphabetically.\n\
  ;; The function should return a list of strings in sorted order.\n;; You may assume\
  \ that all words will have the same length.\n;; For example:\n(define (sorted_list_sum\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sorted_list_sum))\n\
  \    (check-equal? (candidate (list \"aa\" \"a\" \"aaa\")) (list \"aa\"))\n    (check-equal?\
  \ (candidate (list \"school\" \"AI\" \"asdf\" \"b\")) (list \"AI\" \"asdf\" \"school\"\
  ))\n    (check-equal? (candidate (list \"d\" \"b\" \"c\" \"a\")) (list ))\n    (check-equal?\
  \ (candidate (list \"d\" \"dcba\" \"abcd\" \"a\")) (list \"abcd\" \"dcba\"))\n \
  \   (check-equal? (candidate (list \"AI\" \"ai\" \"au\")) (list \"AI\" \"ai\" \"\
  au\"))\n    (check-equal? (candidate (list \"a\" \"b\" \"b\" \"c\" \"c\" \"a\"))\
  \ (list ))\n    (check-equal? (candidate (list \"aaaa\" \"bbbb\" \"dd\" \"cc\"))\
  \ (list \"cc\" \"dd\" \"aaaa\" \"bbbb\"))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [else (+ (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string<? a b)\n                  (< (string-length a)\
    \ (string-length b))))))\n", "  (define (sum_helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (sum_helper (cdr lst) (+ acc (car lst)))))\n  (sum_helper\
    \ lst 0))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n", "  (apply\
    \ + (sort lst <)))\n", "  (sort lst (lambda (x y) (string<? x y))))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else (cons (first lst) (sorted_list_sum (rest\
    \ lst)))]))\n", "  (apply + (sort lst <)))\n", "  (sort lst string<?))\n", " \
    \ (sort lst (lambda (x y) (string<? x y))))\n", "  (sort lst string<?))\n", " \
    \ (sort lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst (lambda (a\
    \ b)\n              (cond\n                [(string<? a b) #t]\n             \
    \   [(string=? a b) #f]\n                [else #f]))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (let ([first (first lst)]\n           [rest (rest\
    \ lst)])\n       (cond\n         [(empty? rest) first]\n         [else\n     \
    \     (let ([second (first rest)])\n            (cond\n              [(< first\
    \ second) (cons first (sorted_list_sum rest))]\n              [else (cons second\
    \ (sorted_list_sum (cons first (rest rest))))]))]))]))\n", "  (sort lst (lambda\
    \ (x y)\n              (if (= (string-length x) (string-length y))\n         \
    \         (string<? x y)\n                  (< (string-length x) (string-length\
    \ y))))))\n", "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (x y)\n              (cond\n  \
    \              [(< (string-length x) (string-length y)) #t]\n                [(>\
    \ (string-length x) (string-length y)) #f]\n                [else (string<? x\
    \ y)]))))\n", "  (sort lst string<?))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst string<?))\n",
  "  (sort lst\n        (lambda (x y)\n          (if (= (string-length x) (string-length\
    \ y))\n              (string&lt;? x y)\n              (&lt; (string-length x)\
    \ (string-length y))))))\n", "  (sort lst string<?))\n", "  (sort lst (lambda\
    \ (x y)\n              (if (= (string-length x) (string-length y))\n         \
    \         (string&lt;? x y)\n                  (&lt; (string-length x) (string-length\
    \ y))))))\n", "  (sort lst string<?))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (sort lst\n        (lambda (x y)\n          (if (=\
    \ (string-length x) (string-length y))\n              (string&lt;? x y)\n    \
    \          (&lt; (string-length x) (string-length y))))))\n</code>\n", "  (cond\
    \ [(empty? lst) 0]\n        [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n",
  "  (sort lst (lambda (a b) (string<? a b))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda\
    \ (a b)\n              (if (= (string-length a) (string-length b))\n         \
    \         (string<? a b)\n                  (< (string-length a) (string-length\
    \ b))))))\n", "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (first\
    \ lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda (a b)\n     \
    \         (cond\n                [(< (string-length a) (string-length b)) #t]\n\
    \                [(> (string-length a) (string-length b)) #f]\n              \
    \  [else (string<? a b)]))))\n", "  (sort lst string<?))\n", "  (sort lst\n  \
    \      (lambda (x y)\n          (cond\n            [(= (string-length x) (string-length\
    \ y))\n             (string&lt;? x y)]\n            [else\n             (&lt;\
    \ (string-length x) (string-length y))]))))\n", "  (sort lst string<?))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [else\n     (cons (car lst)\n         \
    \  (sorted_list_sum (cdr lst)))]))\n", "  (sort lst (lambda (x y)\n          \
    \    (if (= (string-length x) (string-length y))\n                  (string<?\
    \ x y)\n                  (< (string-length x) (string-length y))))))\n", "  (sort\
    \ lst (lambda (a b)\n              (cond\n                [(string<? a b) #t]\n\
    \                [(string=? a b) #f]\n                [else #f]))))\n", "  (sort\
    \ lst (lambda (x y)\n              (if (= (string-length x) (string-length y))\n\
    \                  (string&lt;? x y)\n                  (&lt; (string-length x)\
    \ (string-length y))))))\n</code>\n", "  (sort lst (lambda (a b)\n           \
    \   (cond\n                [(string<? a b) #t]\n                [(string=? a b)\
    \ #f]\n                [else #f]))))\n", "  (cond [(empty? lst) 0]\n        [else\
    \ (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst\
    \ (lambda (a b)\n              (string<? a b))))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string&lt;? a b)\n                  (&lt; (string-length\
    \ a) (string-length b))))))\n</code>\n", "  (sort lst string<?))\n", "  (sort\
    \ lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n", " \
    \ (sort lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst (lambda (x\
    \ y)\n              (if (= (string-length x) (string-length y))\n            \
    \      (string&lt;? x y)\n                  (&lt; (string-length x) (string-length\
    \ y))))))\n</code>\n", "  (sort lst (lambda (x y)\n              (if (= (string-length\
    \ x) (string-length y))\n                  (string&lt;? x y)\n               \
    \   (&lt; (string-length x) (string-length y))))))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (x y)\n              (if (= (string-length x) (string-length\
    \ y))\n                  (string&lt;? x y)\n                  (&lt; (string-length\
    \ x) (string-length y))))))\n", "  (sort lst (lambda (x y)\n              (cond\n\
    \                [(> (string-length x) (string-length y)) #t]\n              \
    \  [(< (string-length x) (string-length y)) #f]\n                [else (string<?\
    \ x y)]))))\n", "  (sort lst (lambda (x y)\n              (if (= (string-length\
    \ x) (string-length y))\n                  (string<? x y)\n                  (<\
    \ (string-length x) (string-length y))))))\n", "  (sort lst (lambda (a b)\n  \
    \            (if (= (string-length a) (string-length b))\n                  (string<?\
    \ a b)\n                  (< (string-length a) (string-length b))))))\n", "  (sort\
    \ lst (lambda (x y) (string<? x y))))\n", "  (cond\n    [(empty? lst) 0]\n   \
    \ [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda\
    \ (x y)\n              (if (= (string-length x) (string-length y))\n         \
    \         (string<? x y)\n                  (< (string-length x) (string-length\
    \ y))))))\n", "  (sort lst (lambda (a b)\n              (if (= (string-length\
    \ a) (string-length b))\n                  (string<? a b)\n                  (<\
    \ (string-length a) (string-length b))))))\n", "  (cond [(empty? lst) 0]\n   \
    \     [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst string<?))\n",
  "  (apply + (sort lst <)))\n", "  (sort lst (lambda (a b)\n              (cond\n\
    \                [(string<? a b) #t]\n                [(string=? a b) #f]\n  \
    \              [else #f]))))\n", "  (sort lst (lambda (x y) (string<? x y))))\n",
  "  (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string<? a b)\n                  (< (string-length a)\
    \ (string-length b))))))\n", "  (cond [(empty? lst) empty]\n        [else (cons\
    \ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda (x y)\n\
    \              (if (= (string-length x) (string-length y))\n                 \
    \ (string<? x y)\n                  (< (string-length x) (string-length y))))))\n",
  "  (sort lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (x y)\n              (if (= (string-length\
    \ x) (string-length y))\n                  (string&lt;? x y)\n               \
    \   (&lt; (string-length x) (string-length y))))))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (apply + (sort lst <)))\n", "  (cond [(empty? lst)\
    \ empty]\n        [else (cons (car lst) (sorted_list_sum (cdr lst)))]))\n", " \
    \ (sort lst string&lt;?))\n", "  (sort lst string<?))\n", "  (sort lst (lambda\
    \ (a b) (string<? a b))))\n", "  (sort lst (lambda (x y) (string<? x y))))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (a b)\n              (cond\n  \
    \              [(= (string-length a) (string-length b))\n                 (string<?\
    \ a b)]\n                [else\n                 (< (string-length a) (string-length\
    \ b))]))))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (x y)\n              (if (= (string-length\
    \ x) (string-length y))\n                  (string<? x y)\n                  (<\
    \ (string-length x) (string-length y))))))\n", "  (sort lst string<?))\n", " \
    \ (sort lst string<?))\n", "  (sort lst string<?))\n", "  (apply + (sort lst <)))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (a b)\n              (if (= (string-length\
    \ a) (string-length b))\n                  (string&lt;? a b)\n               \
    \   (&lt; (string-length a) (string-length b))))))\n</code>\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (define (sum lst)\n    (if (null? lst)\n        0\n\
    \        (+ (car lst) (sum (cdr lst)))))\n  (define (sorted? lst)\n    (if (null?\
    \ lst)\n        #t\n        (if (null? (cdr lst))\n            #t\n          \
    \  (if (< (car lst) (cadr lst))\n                (sorted? (cdr lst))\n       \
    \         #f))))\n  (if (sorted? lst)\n      (sum lst)\n      (sorted_list_sum\
    \ (sort lst <))))\n", "  (cond\n    [(empty? lst) empty]\n    [else (cons (first\
    \ lst) (sorted_list_sum (rest lst)))]))\n", "  (apply + (sort lst <)))\n", " \
    \ (cond [(empty? lst) 0]\n        [else (+ (first lst) (sorted_list_sum (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [else (sort (remove-odd-lengths\
    \ lst)\n                (\u03BB (x y)\n                  (cond\n             \
    \       [(= (string-length x) (string-length y))\n                     (string&lt;?\
    \ x y)]\n                    [else\n                     (&lt; (string-length\
    \ x) (string-length y))])))]))\n", "  (sort lst string<?))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort\
    \ lst string<?))\n", "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort\
    \ lst string<?))\n", "  (cond [(empty? lst) 0]\n        [else (+ (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (apply + (sort lst <)))\n", "  (sort lst (lambda (x y)\n\
    \              (if (= (string-length x) (string-length y))\n                 \
    \ (string<? x y)\n                  (< (string-length x) (string-length y))))))\n",
  "  (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string&lt;? a b)\n                  (&lt; (string-length\
    \ a) (string-length b))))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n\
    \     (define (sum_helper lst acc)\n       (cond\n         [(empty? lst) acc]\n\
    \         [else (sum_helper (rest lst) (+ (first lst) acc))]))\n     (sum_helper\
    \ lst 0)]))\n", "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort lst\n\
    \        (lambda (a b)\n          (cond\n            [(= (string-length a) (string-length\
    \ b))\n             (string<? a b)]\n            [else\n             (< (string-length\
    \ a) (string-length b))]))))\n", "  (sort lst string<?))\n", "  (sort lst (lambda\
    \ (x y) (string<? x y))))\n", "  (cond [(empty? lst) 0]\n        [else (+ (first\
    \ lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst string<?))\n", "  (define\
    \ (sorted_list_sum_helper lst acc)\n    (if (null? lst)\n        acc\n       \
    \ (sorted_list_sum_helper (cdr lst) (+ (car lst) acc))))\n  (sorted_list_sum_helper\
    \ lst 0))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort lst string<?))\n", " \
    \ (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string<? a b)\n                  (< (string-length a)\
    \ (string-length b))))))\n", "  (define (sorted_list_sum_helper lst acc)\n   \
    \ (if (null? lst)\n        acc\n        (sorted_list_sum_helper (cdr lst) (+ (car\
    \ lst) acc))))\n  (sorted_list_sum_helper lst 0))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (a b) (string<? a b))))\n", "  (sort lst string<?))\n", " \
    \ (sort lst string&lt;=?))\n", "  (sort lst string<?))\n", "  (sort lst (lambda\
    \ (x y)\n              (if (= (string-length x) (string-length y))\n         \
    \         (string<? x y)\n                  (< (string-length x) (string-length\
    \ y))))))\n", "  (sort lst string<?))\n", "  (apply + (sort lst <)))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else\n     (define (sum_helper lst acc)\n    \
    \   (cond\n         [(empty? lst) acc]\n         [else (sum_helper (rest lst)\
    \ (+ (first lst) acc))]))\n     (sum_helper lst 0)]))\n", "  (sort lst (lambda\
    \ (x y)\n              (< (string-length x) (string-length y)))))\n", "  (sort\
    \ lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n", " \
    \ (sort lst (lambda (x y)\n              (if (= (string-length x) (string-length\
    \ y))\n                  (string<? x y)\n                  (< (string-length x)\
    \ (string-length y))))))\n", "  (sort lst (lambda (a b)\n              (if (=\
    \ (string-length a) (string-length b))\n                  (string<? a b)\n   \
    \               (< (string-length a) (string-length b))))))\n", "  (cond\n   \
    \ [(empty? lst) 0]\n    [else (+ (first lst) (sorted_list_sum (rest lst)))]))\n",
  "  (sort lst (lambda (x y) (string<? x y))))\n", "  (sort (filter even? (map string-length\
    \ lst)) <))\n", "  (sort lst string<?))\n", "  (sort lst (lambda (x y)\n     \
    \         (cond\n                [(< (string-length x) (string-length y)) #t]\n\
    \                [(> (string-length x) (string-length y)) #f]\n              \
    \  [else (string<? x y)]))))\n", "  (cond [(empty? lst) 0]\n        [else (+ (first\
    \ lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda (a b) (string<?\
    \ a b))))\n", "  (sort (filter odd? lst) <))\n", "  (sort lst string<?))\n", " \
    \ (sort lst (lambda (a b)\n              (< (string-length a) (string-length b)))))\n",
  "  (sort lst string<?))\n", "  (sort lst (lambda (a b)\n              (if (= (string-length\
    \ a) (string-length b))\n                  (string&lt;? a b)\n               \
    \   (&lt; (string-length a) (string-length b))))))\n", "  (sort lst string&lt;=?))\n",
  "  (sort lst (lambda (a b)\n              (if (= (string-length a) (string-length\
    \ b))\n                  (string<? a b)\n                  (< (string-length a)\
    \ (string-length b))))))\n", "  (cond [(empty? lst) 0]\n        [else (+ (first\
    \ lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda (a b)\n     \
    \         (if (= (string-length a) (string-length b))\n                  (string<?\
    \ a b)\n                  (< (string-length a) (string-length b))))))\n", "  (sort\
    \ lst\n        (lambda (a b)\n          (cond\n            [(string<? a b) #t]\n\
    \            [(string=? a b) #f]\n            [else #f]))))\n", "  (sort lst (lambda\
    \ (a b)\n              (if (= (string-length a) (string-length b))\n         \
    \         (string<? a b)\n                  (< (string-length a) (string-length\
    \ b))))))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+ (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort lst (lambda (x y)\n              (cond\n      \
    \          [(< (string-length x) (string-length y)) #t]\n                [(> (string-length\
    \ x) (string-length y)) #f]\n                [else (string<? x y)]))))\n", " \
    \ (sort lst string<?))\n", "  (sort lst (lambda (a b)\n              (if (= (string-length\
    \ a) (string-length b))\n                  (string<? a b)\n                  (<\
    \ (string-length a) (string-length b))))))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else\n     (define (sum_of_list lst)\n       (cond\n         [(empty? lst)\
    \ 0]\n         [else (+ (first lst) (sum_of_list (rest lst)))]))\n     (cons (sum_of_list\
    \ (first lst)) (sorted_list_sum (rest lst)))]))\n", "  (sort lst (lambda (x y)\
    \ (string<? x y))))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort lst string<?))\n", "  (sort lst string<?))\n", "  (sort lst string<?))\n",
  "  (sort (filter odd? lst) <))\n", "  (sort lst (lambda (x y)\n              (cond\n\
    \                [(string<? x y) #t]\n                [(string=? x y) #f]\n  \
    \              [else #f]))))\n", "  (cond\n    [(empty? lst) 0]\n    [else (+\
    \ (first lst) (sorted_list_sum (rest lst)))]))\n", "  (sort lst string<?))\n",
  "  (cond [(empty? lst) empty]\n        [else (cons (car lst) (sorted_list_sum (cdr\
    \ lst)))]))\n", "  (sort lst string&lt;=?))\n", "  (sort lst string<?))\n", " \
    \ (sort lst (lambda (x y) (string<? x y))))\n", "  (sort lst (lambda (x y) (string<?\
    \ x y))))\n", "  (cond [(empty? lst) empty]\n        [else (cons (first lst) (sorted_list_sum\
    \ (rest lst)))]))\n", "  (sort lst string<?))\n", "  (sort lst (lambda (a b)\n\
    \              (cond\n                [(string<? a b) #t]\n                [(string=?\
    \ a b) #f]\n                [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else (cons (car lst) (sorted_list_sum (cdr lst)))]))\n", "  (sort lst string<?))\n",
  "  (sort lst (lambda (x y)\n              (if (= (string-length x) (string-length\
    \ y))\n                  (string&lt;? x y)\n                  (&lt; (string-length\
    \ x) (string-length y))))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n\
    \     (cons (car lst)\n           (sorted_list_sum (cdr lst)))]))\n", "  (sort\
    \ lst string<?))\n", "  (sort lst string<?))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
