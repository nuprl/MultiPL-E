name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (define (rotate n)\n    (if (= n 0)\n        \"\"\n        (string-append\
    \ (string-append (substring s n (+ n 1))\n                                   \
    \   (substring s 0 n))\n                      (rotate (- n 2)))))\n  (rotate (-\
    \ (string-length s) 2)))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let* ([a (char-downcase c)]\n                     \
    \      [b (modulo (+ a 2) 26)])\n                      (if (char-upper-case? c)\n\
    \                          (char-upcase (integer->char b))\n                 \
    \         (integer->char b)))\n                    c))\n              s))\n",
  "  (string-append (string-append (substring s 2) (substring s 0 2))\n          \
    \       (string-append (substring s 4) (substring s 2 4))))\n", "  (define (rotate-char\
    \ c)\n    (if (char-alphabetic? c)\n        (let* ([a (char-upcase c)]\n     \
    \          [n (- a #\\A)]\n               [m (+ n (* 2 2))])\n          (integer->char\
    \ (+ m (% m 26))))\n        c))\n  (string-map rotate-char s))\n", "  (string-append\n\
    \   (string-append\n    (substring s 0 2)\n    (substring s 4 6))\n   (string-append\n\
    \    (substring s 2 4)\n    (substring s 6))))\n", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n    \
    \        ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n        \
    \    ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n            ((char=?\
    \ c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=? c #\\\
    h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\j) #\\\
    l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\n)\n \
    \           ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n     \
    \       ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n         \
    \   ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n            ((char=?\
    \ c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=? c #\\\
    u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\w) #\\\
    y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\a)\n \
    \           ((char=? c #\\z) #\\b)\n            (else c)))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond ((string=? s \"\") \"\")\n     \
    \     (else (string-append (string (rotate-char (string-ref s 0)))\n         \
    \                      (rotate-string (substring s 1))))))\n  (rotate-string s))\n",
  "  (for/list ([c (in-string s)])\n    (cond\n      [(char=? c #\\a) #\\c]\n    \
    \  [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\\
    d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=?\
    \ c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n\
    \      [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c\
    \ #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n  \
    \    [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\\
    q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=?\
    \ c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n\
    \      [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c\
    \ #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c])))\n", "  (for/list\
    \ ([c (in-string s)])\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=?\
    \ c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n\
    \      [(char=? c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c\
    \ #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n  \
    \    [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\\
    l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=?\
    \ c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n\
    \      [(char=? c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c\
    \ #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n  \
    \    [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\\
    y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c])))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (for/list ([c\
    \ (in-string s)])\n    (let ([c (string-&gt;char c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([c (char-downcase c)])\n            (if (char&lt;=? #\\\
    a c)\n                (char-&gt;integer c)\n                (char-&gt;integer\
    \ c)\n                )\n            )\n          (char-&gt;integer c)\n     \
    \     )\n      )\n    )\n  )\n</code>\nI am trying to get the function to return\
    \ the integer value of the character. \nI am getting the following error:\n<code>application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: #\\a\n  arguments...: [none]\n</code>\nI am not sure what I am doing\
    \ wrong.\n\n\nA:\n\nYou have a few problems.\n\nYou're using <code>for/list</code>\
    \ to iterate over the string, but you're not actually building a list.\nYou're\
    \ using <code>char-&gt;integer</code> to convert the character to an integer,\
    \ but you're not actually doing anything with the integer.\nYou're using <code>char&lt;=?</code>\
    \ to compare the character to <code>#\\a</code>, but you're not actually doing\
    \ anything with the result.\n\nHere's a fixed version:\n<code>(define (encrypt\
    \ s)\n  (for/list ([c (in-string s)])\n    (let ([c (string-&gt;char c)])\n  \
    \    (if (char-alphabetic? c)\n          (let ([c (char-downcase c)])\n      \
    \      (if (char&lt;=? #\\a c)\n                (char-&gt;integer c)\n       \
    \         (char-&gt;integer c)\n                )\n            )\n          (char-&gt;integer\
    \ c)\n          )\n      )\n    )\n  )\n</code>\n", "  (define (rotate-char c)\n\
    \    (let ([c (char-downcase c)])\n      (cond [(char=? c #\\a) #\\c]\n      \
    \      [(char=? c #\\b) #\\d]\n            [(char=? c #\\c) #\\e]\n          \
    \  [(char=? c #\\d) #\\f]\n            [(char=? c #\\e) #\\g]\n            [(char=?\
    \ c #\\f) #\\h]\n            [(char=? c #\\g) #\\i]\n            [(char=? c #\\\
    h) #\\j]\n            [(char=? c #\\i) #\\k]\n            [(char=? c #\\j) #\\\
    l]\n            [(char=? c #\\k) #\\m]\n            [(char=? c #\\l) #\\n]\n \
    \           [(char=? c #\\m) #\\o]\n            [(char=? c #\\n) #\\p]\n     \
    \       [(char=? c #\\o) #\\q]\n            [(char=? c #\\p) #\\r]\n         \
    \   [(char=? c #\\q) #\\s]\n            [(char=? c #\\r) #\\t]\n            [(char=?\
    \ c #\\s) #\\u]\n            [(char=? c #\\t) #\\v]\n            [(char=? c #\\\
    u) #\\w]\n            [(char=? c #\\v) #\\x]\n            [(char=? c #\\w) #\\\
    y]\n            [(char=? c #\\x) #\\z]\n            [(char=? c #\\y) #\\a]\n \
    \           [(char=? c #\\z) #\\b]\n            [else c])))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (string-map rotate-char s))\n", "  (map (lambda (c)\n        \
    \ (if (char-alphabetic? c)\n             (let* ([a (char-downcase c)]\n      \
    \              [i (- (char-&gt;integer a) (char-&gt;integer #\\a))]\n        \
    \            [j (+ i (* 2 2))])\n               (integer-&gt;char (+ (char-&gt;integer\
    \ #\\a) (% j 26))))\n             c))\n       s))\n", "  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda\
    \ (c)\n        (if (char-alphabetic? c)\n            (list-ref alphabet (+ 2 (*\
    \ 2 (char-&gt;integer c))))\n            c))\n      (string-&gt;list s)))))\n",
  "  (cond [(empty? s) empty]\n        [else (cons (rotate-char (first s)) (encrypt\
    \ (rest s)))]))\n", "  (string-append (string-append (substring s 2) (substring\
    \ s 0 2))\n                 (string-append (substring s 4) (substring s 2 4))))\n",
  "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list\
    \ s)))\n</code>\nI'm not sure how to proceed from here. I'm not sure how to shift\
    \ the letters down by two and then multiply that by two.\n\n\nA:\n\nYou can use\
    \ <code>string-ref</code> and <code>string-set!</code> to access and modify the\
    \ characters in a string.\n<code>(define (encrypt s)\n  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (let ([s (string-copy s)])\n      (for\
    \ ([i (in-range (string-length s))])\n        (let ([c (string-ref s i)])\n  \
    \        (string-set! s i (string-ref alphabet (+ (* 2 (- (string-index alphabet\
    \ c) 2)) 2)))))\n      s)))\n</code>\n", "  (define (rotate n)\n    (cond\n  \
    \    [(= n 0) #\\a]\n      [(= n 1) #\\b]\n      [(= n 2) #\\c]\n      [(= n 3)\
    \ #\\d]\n      [(= n 4) #\\e]\n      [(= n 5) #\\f]\n      [(= n 6) #\\g]\n  \
    \    [(= n 7) #\\h]\n      [(= n 8) #\\i]\n      [(= n 9) #\\j]\n      [(= n 10)\
    \ #\\k]\n      [(= n 11) #\\l]\n      [(= n 12) #\\m]\n      [(= n 13) #\\n]\n\
    \      [(= n 14) #\\o]\n      [(= n 15) #\\p]\n      [(= n 16) #\\q]\n      [(=\
    \ n 17) #\\r]\n      [(= n 18) #\\s]\n      [(= n 19) #\\t]\n      [(= n 20) #\\\
    u]\n      [(= n 21) #\\v]\n      [(= n 22) #\\w]\n      [(= n 23) #\\x]\n    \
    \  [(= n 24) #\\y]\n      [(= n 25) #\\z]\n      [else #\\a]))\n  (define (encrypt-char\
    \ c)\n    (cond\n      [(char=? c #\\a) (rotate 0)]\n      [(char=? c #\\b) (rotate\
    \ 1)]\n      [(char=? c #\\c) (rotate 2)]\n      [(char=? c #\\d) (rotate 3)]\n\
    \      [(char=? c #\\e) (rotate 4)]\n      [(char=? c #\\f) (rotate 5)]\n    \
    \  [(char=? c #\\g) (rotate 6)]\n      [(char=? c #\\h) (rotate 7)]\n      [(char=?\
    \ c #\\i) (rotate 8)]\n      [(char=? c #\\j) (rotate 9)]\n      [(char=? c #\\\
    k) (rotate 10)]\n      [(char=? c #\\l) (rot", "  (for/list ([c (in-string s)])\n\
    \    (if (char-alphabetic? c)\n        (let ([d (char-downcase c)])\n        \
    \  (if (char-numeric? (char-downcase c))\n              (char-upcase c)\n    \
    \          (if (char-numeric? (char-upcase c))\n                  (char-downcase\
    \ c)\n                  (if (char-alphabetic? (char-upcase c))\n             \
    \         (char-upcase (char-rotate c 2))\n                      (char-rotate\
    \ c 2)))))\n        c)))\n", "  (string-map\n   (lambda (c)\n     (if (char-alphabetic?\
    \ c)\n         (let ([x (char-downcase c)])\n           (if (char&lt;= #\\a x\
    \ #\\z)\n               (char-&gt;integer\n                (integer-&gt;char (+\
    \ (char-&gt;integer x) 2)))\n               (char-&gt;integer\n              \
    \  (integer-&gt;char (+ (char-&gt;integer x) -24)))))\n         c))\n   s))\n\
    </code>\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let* ([a (char-downcase c)]\n                     \
    \      [b (if (char=? a #\\a) #\\z\n                                 (if (char=?\
    \ a #\\b) #\\y\n                                   (char-downcase (char-downcase\
    \ (char-downcase c)))))]\n                           [c (if (char=? a #\\a) #\\\
    z\n                                 (if (char=? a #\\b) #\\y\n               \
    \                    (char-downcase (char-downcase c))))])\n                 \
    \     (if (char-upper-case? c)\n                          (char-upcase b)\n  \
    \                        b))\n                    c))\n              s))\n", " \
    \ (define (shift-char c)\n    (integer->char (+ c (* 2 2))))\n  (map shift-char\
    \ (string->list s)))\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join\n     (map\n      (lambda (c)\n        (if (char-alphabetic?\
    \ c)\n            (list-ref alphabet (+ (char-&gt;integer c) (* 2 2)))\n     \
    \       c))\n      (string-&gt;list s)))))\n", "  (string-map (lambda (c)\n  \
    \              (if (char-alphabetic? c)\n                    (let ([n (char-&gt;integer\
    \ c)])\n                      (integer-&gt;char (+ n (* 2 2))))\n            \
    \        c))\n              s))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (rotate-string (rest s)))]))\n  (rotate-string s))\n", "  (string-append\
    \ (string-append (substring s 2) (substring s 0 2))\n                 (string-append\
    \ (substring s 4) (substring s 2 4))))\n", "  (for/list ([c (in-string s)])\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n     \
    \ [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=? c #\\e)\
    \ #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=?\
    \ c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n\
    \      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=? c\
    \ #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n  \
    \    [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=? c #\\\
    r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=?\
    \ c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n\
    \      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=? c\
    \ #\\z) #\\b]\n      [else c])))\n", "  (string-map (lambda (c)\n            \
    \    (if (char-alphabetic? c)\n                    (let* ([a (char-upcase c)]\n\
    \                           [i (- a #\\A)]\n                           [j (+ i\
    \ (* 2 2))])\n                      (char (+ #\\A (modulo j 26))))\n         \
    \           c))\n              s))", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (if (char=?\
    \ c #\\a)\n        #\\c\n        (if (char=? c #\\b)\n            #\\d\n     \
    \       (if (char=? c #\\c)\n                #\\e\n                (if (char=?\
    \ c #\\d)\n                    #\\f\n                    (if (char=? c #\\e)\n\
    \                        #\\g\n                        (if (char=? c #\\f)\n \
    \                           #\\h\n                            (if (char=? c #\\\
    g)\n                                #\\i\n                                (if\
    \ (char=? c #\\h)\n                                    #\\j\n                \
    \                    (if (char=? c #\\i)\n                                   \
    \     #\\k\n                                        (if (char=? c #\\j)\n    \
    \                                        #\\l\n                              \
    \              (if (char=? c #\\k)\n                                         \
    \       #\\m\n                                                (if (char=? c #\\\
    l)\n                                                    #\\n\n               \
    \                                     (if (char=? c #\\m)\n                  \
    \                                      #\\o\n                                \
    \                        (if (char=? c #\\n)\n                               \
    \                             #\\p\n                                         \
    \                   (if (char=? c #\\o)\n                                    \
    \                            #\\q\n                                          \
    \                      (if (char=? c #\\p)\n                                 \
    \                                   #\\r\n                                   \
    \                                 (if (char=? c #\\q)\n                      \
    \                                                  #\\s\n                    \
    \                                                    (if (char=? c #\\r)\n   \
    \                                                                         #\\\
    t\n                                                                          \
    \  (if (char=? c #\\s)\n                                                     \
    \                           #\\u\n                                           \
    \                                     (if (char=? c #\\t)\n                  \
    \                                                                  #\\v\n    \
    \                                                                            \
    \    (if (char=? c #\\u)\n                                                   \
    \                                     #\\w\n                                 \
    \                                                       (if (char=? c #\\v)\n\
    \                                                                            \
    \                #\\x\n                                                      \
    \                                      (if (char=? c #\\w)\n                ",
  "  (map (lambda (c)\n         (if (char-alphabetic? c)\n             (let* ([a (char-downcase\
    \ c)]\n                    [i (- (char-&gt;integer a) 97)]\n                 \
    \   [j (+ i (* 2 2))])\n               (integer-&gt;char (+ 97 (modulo j 26))))\n\
    \             c))\n       s))\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)\n    (map (lambda (x) (list-ref alphabet (+ x 2)))\
    \ alphabet)))\n</code>\nI am getting the following error:\n<code>map: expects\
    \ type &lt;procedure&gt; as 2nd argument, given: #&lt;procedure:encrypt&gt;; other\
    \ arguments were: #&lt;procedure:encrypt&gt;\n</code>\nI am not sure what I am\
    \ doing wrong.\n\n\nA:\n\nYou're calling <code>map</code> with the wrong arguments.\
    \ The first argument to <code>map</code> is the procedure to apply to each element\
    \ of the list, the second argument is the list itself.\nIn your case, you want\
    \ to apply the procedure to each character in the string, so you need to pass\
    \ the string as the second argument to <code>map</code>.\n<code>(define (encrypt\
    \ s)\n  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n \
    \   (map (lambda (x) (list-ref alphabet (+ x 2))) (string-&gt;list s))))\n</code>\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (shift\
    \ c)\n    (if (char-alphabetic? c)\n        (let* ([a (char-upcase c)]\n     \
    \          [n (- a #\\A)]\n               [m (+ n (* 2 2))])\n          (integer->char\
    \ (+ m (% m 26))))\n        c))\n  (string-map shift s))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate c)\n    (if (char=? c #\\a) #\\c\n        (if (char=?\
    \ c #\\b) #\\d\n            (if (char=? c #\\c) #\\e\n                (if (char=?\
    \ c #\\d) #\\f\n                    (if (char=? c #\\e) #\\g\n               \
    \         (if (char=? c #\\f) #\\h\n                            (if (char=? c\
    \ #\\g) #\\i\n                                (if (char=? c #\\h) #\\j\n     \
    \                               (if (char=? c #\\i) #\\k\n                   \
    \                     (if (char=? c #\\j) #\\l\n                             \
    \               (if (char=? c #\\k) #\\m\n                                   \
    \             (if (char=? c #\\l) #\\n\n                                     \
    \               (if (char=? c #\\m) #\\o\n                                   \
    \                     (if (char=? c #\\n) #\\p\n                             \
    \                               (if (char=? c #\\o) #\\q\n                   \
    \                                             (if (char=? c #\\p) #\\r\n     \
    \                                                               (if (char=? c\
    \ #\\q) #\\s\n                                                               \
    \         (if (char=? c #\\r) #\\t\n                                         \
    \                                   (if (char=? c #\\s) #\\u\n               \
    \                                                                 (if (char=?\
    \ c #\\t) #\\v\n                                                             \
    \                       (if (char=? c #\\u) #\\w\n                           \
    \                                                             (if (char=? c #\\\
    v) #\\x\n                                                                    \
    \                        (if (char=? c #\\w) #\\y\n                          \
    \                                                                      (if (char=?\
    \ c #\\x) #\\z\n                                                             \
    \                                       (if (char=? c #\\y) #\\a\n           \
    \                                                                            \
    \                 (if (char=? c #\\z) #\\b\n                                 \
    \                                                                           c)))))))))))))))))))))))))))))))\n\
    \  (string-map rotate s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (rotate-char-helper\
    \ (char-downcase (char-downcase c)))))\n    (if (char-alphabetic? c)\n       \
    \ (rotate-char-helper c)\n        c))\n  (define (encrypt-helper s)\n    (if (empty?\
    \ s)\n        empty\n        (cons (rotate-char (first s))\n              (encrypt-helper\
    \ (rest s)))))\n  (encrypt-helper s))\n", "  (string-map\n   (lambda (c)\n   \
    \  (if (char-alphabetic? c)\n         (let* ([a (char-downcase c)]\n         \
    \       [b (char-upcase c)]\n                [n (- (char-&gt;integer a) 97)]\n\
    \                [m (- (char-&gt;integer b) 65)])\n           (if (char-lower-case?\
    \ c)\n               (integer-&gt;char (+ 97 (modulo (+ n 2) 26)))\n         \
    \      (integer-&gt;char (+ 65 (modulo (+ m 2) 26)))))\n         c))\n   s))\n",
  "  (define (rotate n s)\n    (if (empty? s)\n        empty\n        (cons (list-ref\
    \ s n) (rotate (modulo (+ n 2) (length s)) s))))\n  (string-append (rotate 0 s)\
    \ (rotate 1 s)))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (string-map rotate-char s))\n", "  (define (rotate-char c)\n\
    \    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n",
  "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet\n                     \
    \ (+ (modulo (- (list-index c alphabet) 2) 26) 2)))\n          (string-&gt;list\
    \ s)))))\n", "  (string-append (string-append (substring s 2) (substring s 0 2))\n\
    \                 (string-append (substring s 4) (substring s 2 4))))\n", "  (define\
    \ (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map\
    \ rotate-char s))\n", "  (let ([a (string->list s)])\n    (map (lambda (x)\n \
    \          (if (char-alphabetic? x)\n               (let ([n (char-downcase x)])\n\
    \                 (if (and (>= n #\\a) (<= n #\\z))\n                     (let\
    \ ([m (- n #\\a)])\n                       (if (>= (+ m (* 2 2)) 26)\n       \
    \                    (char-upcase (+ #\\a (- m 26)))\n                       \
    \    (char-upcase (+ #\\a (+ m (* 2 2))))))\n                     (let ([m (-\
    \ n #\\A)])\n                       (if (>= (+ m (* 2 2)) 26)\n              \
    \             (+ #\\A (- m 26))\n                           (+ #\\A (+ m (* 2\
    \ 2)))))))\n               x))\n         a)))\n", "  (string-append (substring\
    \ s 2) (substring s 0 2)))\n", "  (let ((alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    ))\n        (new-alphabet (string->list \"cdefghijklmnopqrstuvwxyzab\")))\n  \
    \  (list->string (map (lambda (c)\n                         (if (char-alphabetic?\
    \ c)\n                             (list-ref new-alphabet (list-index c alphabet))\n\
    \                             c))\n                       (string->list s)))))\n",
  "  (for/list ([c (in-string s)])\n    (let ([c (char-downcase c)])\n      (cond\n\
    \        [(char-alphabetic? c)\n         (let ([n (char-&gt;integer c)])\n   \
    \        (integer-&gt;char (+ n (* 2 2))))]\n        [else c]))))\n", "  (string-append\
    \ (string-append (substring s 2) (substring s 0 2))\n                 (string-append\
    \ (substring s 4) (substring s 2 4))))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char\
    \ s))\n", "  (for/list ([c (in-string s)])\n    (cond\n      [(char=? c #\\a)\
    \ #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=?\
    \ c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n\
    \      [(char=? c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=? c\
    \ #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n  \
    \    [(char=? c #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c #\\\
    n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=?\
    \ c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n\
    \      [(char=? c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=? c\
    \ #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n  \
    \    [(char=? c #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c])))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (shift\
    \ c)\n    (let ([c (char-downcase c)])\n      (cond\n        [(char=? c #\\a)\
    \ #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n    \
    \    [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c])))\n  (string-map shift s))\n", "  (map (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (let* ([a (char-downcase\
    \ c)]\n                    [n (char-&gt;integer a)]\n                    [n (+\
    \ n (* 2 2))])\n               (integer-&gt;char (if (&gt;= n 26) (- n 26) n)))\n\
    \             c))\n       s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ (rotate-char-helper c)))\n  (define (rotate-string s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n\
    \  (rotate-string s))\n", "  (define (rotate c)\n    (if (char-alphabetic? c)\n\
    \        (let ([a (char-upcase c)])\n          (if (&lt; a #\\C)\n           \
    \   (integer-&gt;char (+ a 26 2))\n              (integer-&gt;char (+ a 2))))\n\
    \        c))\n  (string-&gt;list s))\n</code>\nI'm getting an error:\n<code>application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: #\\C\n  arguments...:\n   #\\A\n</code>\nI'm not sure what I'm doing\
    \ wrong.\n\n\nA:\n\nThe problem is that you're using <code>&lt;</code> instead\
    \ of <code>&lt;=</code>.\n<code>#\\A</code> is less than <code>#\\C</code>, so\
    \ the first branch of the <code>if</code> is taken. But then you add 26 and 2\
    \ to <code>#\\A</code>, which gives you <code>#\\C</code>. Then you try to call\
    \ <code>#\\C</code> as a function, which is what the error message is complaining\
    \ about.\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)\n    (map (lambda (x)\n           (if (member x alphabet)\n\
    \               (list-ref alphabet (+ 2 (* 2 (list-index x alphabet))))\n    \
    \           x))\n         (string-&gt;list s))))", "  (for/list ([c (in-string\
    \ s)])\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n\
    \      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=? c\
    \ #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n  \
    \    [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\\
    j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=?\
    \ c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n\
    \      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=? c\
    \ #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n  \
    \    [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c #\\\
    w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=?\
    \ c #\\z) #\\b]\n      [else c])))\n", "  (for/list ([c (in-string s)])\n    (let\
    \ ([n (string-&gt;number (string c) 16)])\n      (number-&gt;string (+ n (* 2\
    \ 2)) 16))))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n \
    \       (string-append (rotate (string-ref s 0))\n                       (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n\
    \    (integer->char (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n       \
    \     ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n           \
    \ ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n            ((char=?\
    \ c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=? c #\\\
    i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\\
    m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n \
    \           ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n     \
    \       ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n         \
    \   ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n            ((char=?\
    \ c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=? c #\\\
    v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\\
    z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)\n \
    \           (else c)))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond ((string=? s \"\") \"\")\n          (else (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                               (rotate-string\
    \ (substring s 1))))))\n  (rotate-string s))\n", "  (string-map (lambda (c)\n\
    \                (if (char-alphabetic? c)\n                    (let ([n (char-&gt;integer\
    \ c)])\n                      (integer-&gt;char (+ n (* 2 2))))\n            \
    \        c))\n              s))\n", "  (map (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (let* ([a (char-downcase c)]\n                    [i (char-&gt;integer\
    \ a)]\n                    [j (+ i (* 2 2))])\n               (integer-&gt;char\
    \ (modulo j 26)))\n             c))\n       s))\n", "  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list s)\n    (map (lambda\
    \ (x)\n           (list-ref alphabet (- (string-ci-&gt;index (string x) alphabet)\
    \ 2)))\n         s)))\n</code>\nI am getting the following error:\n<code>string-ci-&gt;index:\
    \ expects argument of type &lt;string-ci&gt;; given \"a\"\n</code>\nI am not sure\
    \ how to fix this.\n\n\nA:\n\nThe problem is that <code>string-ci-&gt;index</code>\
    \ expects a <code>string-ci</code> as its first argument, but you're passing it\
    \ a <code>string</code>. You can fix this by using <code>string-&gt;symbol</code>\
    \ to convert the <code>string</code> to a <code>symbol</code>, and then using\
    \ <code>symbol-&gt;string-ci</code> to convert the <code>symbol</code> to a <code>string-ci</code>:\n\
    <code>(define (encrypt s)\n  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)\n    (map (lambda (x)\n           (list-ref alphabet\
    \ (- (string-ci-&gt;index (symbol-&gt;string-ci (string-&gt;symbol (string x)))\
    \ alphabet) 2)))\n         s)))\n</code>\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate s)\n  \
    \  (string-append (substring s 2) (substring s 0 2)))\n  (define (rotate-n s n)\n\
    \    (if (= n 0)\n        s\n        (rotate-n (rotate s) (- n 1))))\n  (rotate-n\
    \ s 2))\n", "  (define (rotate-char c)\n    (if (char-alphabetic? c)\n       \
    \ (let* ([base (if (char-upper-case? c) #\\A #\\a)]\n               [offset (-\
    \ c base)])\n          (+ base (modulo (+ offset (* 2 2)) 26)))\n        c))\n\
    \  (string-map rotate-char s))\n", "  (string-append (string-append (substring\
    \ s 2) (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 2 4))))\n", "  (define (shift-char c)\n    (define (shift-char-helper c)\n\
    \      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n  \
    \            #\\d\n              (if (char=? c #\\c)\n                  #\\e\n\
    \                  (if (char=? c #\\d)\n                      #\\f\n         \
    \             (if (char=? c #\\e)\n                          #\\g\n          \
    \                (if (char=? c #\\f)\n                              #\\h\n   \
    \                           (if (char=? c #\\g)\n                            \
    \      #\\i\n                                  (if (char=? c #\\h)\n         \
    \                             #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                               #", "  (string-map (lambda (c)\n\
    \                (if (char-alphabetic? c)\n                    (let* ([c (char-downcase\
    \ c)]\n                           [c (+ c (* 2 2))])\n                      (if\
    \ (> c #\\z)\n                          (- c 26)\n                          c))\n\
    \                    c))\n              s))\n", "  (string-map\n   (lambda (c)\n\
    \     (if (char-alphabetic? c)\n         (let* ([a (char-upcase c)]\n        \
    \        [n (char-&gt;integer a)]\n                [m (+ n (* 2 2))])\n      \
    \     (integer-&gt;char (modulo m 26)))\n         c))\n   s))\n", "  (define (rotate-char\
    \ c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n   \
    \         #\\a\n            (integer->char (+ (char->integer c) 2)))))\n  (string-map\
    \ rotate-char s))\n", "  (let ([l (string->list s)])\n    (list->string (map (lambda\
    \ (c)\n                         (let ([n (char->integer c)])\n               \
    \            (integer->char (+ n (* 2 2)))))\n                       l))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (let ([s (string-&gt;list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-&gt;integer c)])\n   \
    \          (integer-&gt;char (+ c (* 2 2)))))\n         s)))\n</code>\n", "  (string-append\
    \ (string-append (substring s 2) (substring s 0 2))\n                 (string-append\
    \ (substring s 4) (substring s 2 4))))\n", "  (string-append\n   (string-append\n\
    \    (substring s 0 2)\n    (substring s 4 6))\n   (string-append\n    (substring\
    \ s 2 4)\n    (substring s 6))))\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)\n    (map (lambda (x)\n           (if (member x alphabet)\n\
    \               (list-ref alphabet (+ (list-index x alphabet) (* 2 2)))\n    \
    \           x))\n         (string-&gt;list s))))\n</code>\nI get the following\
    \ error:\n<code>map: expects argument of type &lt;procedure&gt;; given: #&lt;procedure:encrypt&gt;\n\
    </code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not using <code>map</code>\
    \ correctly. It should be:\n<code>(map (lambda (x)\n       (if (member x alphabet)\n\
    \           (list-ref alphabet (+ (list-index x alphabet) (* 2 2)))\n        \
    \   x))\n     (string-&gt;list s))\n</code>\n", "  (define (rotate-char c)\n \
    \   (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=?\
    \ c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n\
    \      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=? c\
    \ #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n  \
    \    [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=? c #\\\
    m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n\
    \      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=? c\
    \ #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n  \
    \    [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=? c #\\\
    z) #\\b]\n      [else c]))\n  (define (rotate-string s)\n    (if (string-empty?\
    \ s)\n        \"\"\n        (string-append (string (rotate-char (string-ref s\
    \ 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (map (lambda (c)\n         (if (char-alphabetic? c)\n           \
    \  (let ([n (char-&gt;integer c)])\n               (integer-&gt;char (+ n (* 2\
    \ 2))))\n             c))\n       s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n    \
    \        ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n        \
    \    ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n            ((char=?\
    \ c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=? c #\\\
    h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\j) #\\\
    l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\n)\n \
    \           ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n     \
    \       ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n         \
    \   ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n            ((char=?\
    \ c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=? c #\\\
    u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\w) #\\\
    y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\a)\n \
    \           ((char=? c #\\z) #\\b)\n            (else c)))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n       \
    \     ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n           \
    \ ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n            ((char=?\
    \ c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=? c #\\\
    i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\\
    m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n \
    \           ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n     \
    \       ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n         \
    \   ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n            ((char=?\
    \ c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=? c #\\\
    v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\\
    z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)\n \
    \           (else c)))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (string-map (lambda (c)\n            \
    \    (if (char-alphabetic? c)\n                    (let* ([a (char-downcase c)]\n\
    \                           [n (- a #\\a)]\n                           [m (+ n\
    \ (* 2 2))])\n                      (char (+ m (if (char-upper-case? c) #\\A #\\\
    a))))\n                    c))\n              s))\n", "  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list s)))\n</code>\nI'm not\
    \ sure how to proceed from here. I'm not sure how to shift the letters down by\
    \ two. I'm also not sure how to multiply the shift by two.\n\n\nA:\n\nHere's a\
    \ solution that uses the <code>string-map</code> procedure to map each character\
    \ in the string to its encrypted counterpart. The <code>string-map</code> procedure\
    \ takes a procedure as its first argument, and applies it to each character in\
    \ the string, returning a new string with the results.\n<code>(define (encrypt\
    \ s)\n  (string-map (lambda (c)\n                (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n                  (list-ref alphabet (+ 2\
    \ (* 2 (string-index \"abcdefghijklmnopqrstuvwxyz\" c)))))\n                s))\n\
    </code>\n", "  (define (rotate n s)\n    (if (= n 0)\n        s\n        (rotate\
    \ (- n 1) (string-append (substring s -1) (substring s 0 -1)))))\n  (define (encrypt-char\
    \ c)\n    (if (char-alphabetic? c)\n        (rotate (* 2 2) (string c))\n    \
    \    (string c)))\n  (apply string-append (map encrypt-char (string->list s))))\n",
  "  (string-append\n   (string-append\n    (substring s 0 2)\n    (substring s 2))\n\
    \   (substring s 0 2)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (cons (rotate-char (first s) (* 2 2))\n           (encrypt (rest s)))]))\n",
  "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n         \
    \           (let ([n (char-&gt;integer c)])\n                      (integer-&gt;char\
    \ (+ n (* 2 2))))\n                    c))\n              s))\n", "  (string-append\
    \ (string-append (substring s 2) (substring s 0 2))\n                 (string-append\
    \ (substring s 4) (substring s 2 4))))\n", "  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list s)\n    (map (lambda\
    \ (x) (if (member x alphabet)\n                         (list-ref alphabet (+\
    \ 2 (* 2 (list-index x alphabet))))\n                         x))\n         (string-&gt;list\
    \ s))))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:4:0&gt;\n\
    \  arguments...:\n   #&lt;syntax:eval:4:0&gt;\n</code>\nI'm not sure what I'm\
    \ doing wrong.\n\n\nA:\n\nThe problem is that you're using <code>map</code> in\
    \ the wrong way. You're calling it with two arguments, but it expects only one.\n\
    <code>(map (lambda (x) (if (member x alphabet)\n                     (list-ref\
    \ alphabet (+ 2 (* 2 (list-index x alphabet))))\n                     x))\n  \
    \   (string-&gt;list s))\n</code>\nThe above is equivalent to:\n<code>(map (lambda\
    \ (x) (if (member x alphabet)\n                     (list-ref alphabet (+ 2 (*\
    \ 2 (list-index x alphabet))))\n                     x))\n     (string-&gt;list\
    \ s)\n     (string-&gt;list s))\n</code>\nBut <code>map</code> expects only one\
    \ argument, and the second argument is not a procedure, so you get the error.\n\
    What you want is to call <code>map</code> with only one argument, and then call\
    \ <code>string-&gt;list</code> on the result:\n<code>(string-&gt;list (map (lambda\
    \ (x) (if (member x alphabet)\n                                   (list-ref alphabet\
    \ (+ 2 (* 2 (list-index x alphabet))))\n                                   x))\n\
    \                   (string-&gt;list s)))\n</code>\n", "  (for/list ([c (in-string\
    \ s)])\n    (if (char-alphabetic? c)\n        (integer->char (+ (char-&gt;integer\
    \ c) (* 2 2)))\n        c)))\n", "  (string-map\n   (lambda (c)\n     (let ((c\
    \ (string-downcase c)))\n       (if (char-alphabetic? c)\n           (let ((c\
    \ (+ c (* 2 2))))\n             (if (&gt; c #\\z)\n                 (char-&gt;integer\
    \ (char-&gt;integer c)\n                                 (- (char-&gt;integer\
    \ #\\z)\n                                    (char-&gt;integer #\\a)\n       \
    \                             1))\n                 c))\n           c)))\n   s))\n\
    </code>\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n \
    \     (if (char=? c #\\z)\n          #\\a\n          (if (char=? c #\\y)\n   \
    \           #\\z\n              (char-downcase (char+ c 2)))))\n    (if (char-upper-case?\
    \ c)\n        (char-upcase (rotate-char-helper c))\n        (rotate-char-helper\
    \ c)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        empty\n    \
    \    (cons (rotate-char (first s)) (encrypt-helper (rest s)))))\n  (list->string\
    \ (encrypt-helper (string->list s))))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (map (lambda (c)\n    \
    \     (if (char-alphabetic? c)\n             (let* ([a (char-downcase c)]\n  \
    \                  [i (- (char-&gt;integer a) (char-&gt;integer #\\a))]\n    \
    \                [j (+ i (* 2 2))])\n               (integer-&gt;char (+ (char-&gt;integer\
    \ #\\a) (modulo j 26))))\n             c))\n       s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (encrypt-helper (rest s)))]))\n  (encrypt-helper s))\n", "  (let ([a (string->list\
    \ s)])\n    (map (lambda (c)\n           (if (char-alphabetic? c)\n          \
    \     (let ([d (char-downcase c)])\n                 (if (char-numeric? (char-downcase\
    \ (char-next (char-next d))))\n                     (char-upcase (char-next (char-next\
    \ d)))\n                     (char-next (char-next d))))\n               c))\n\
    \         a)))\n", "  (define (rotate n)\n    (if (= n 0)\n        '()\n     \
    \   (cons (string-ref s (- n 1)) (rotate (- n 1)))))\n  (string-append (rotate\
    \ (- (string-length s) 2)) (rotate (- (string-length s) 1)) s))\n", "  (define\
    \ (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (string-join\
    \ (map rotate (string-split s #\\space)) #\\space))\n", "  (string-map (lambda\
    \ (c)\n                (if (char-alphabetic? c)\n                    (let* ([a\
    \ (char-upcase c)]\n                           [b (+ a (* 2 2))])\n          \
    \            (if (&gt; b 90)\n                          (- b 26)\n           \
    \               b))\n                    c))\n              s))\n", "  (define\
    \ (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (string-map\
    \ rotate-char s))\n", "  (for/list ([c (in-string s)])\n    (cond\n      [(char=?\
    \ c #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n\
    \      [(char=? c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c\
    \ #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n  \
    \    [(char=? c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n      [(char=? c #\\\
    k) #\\m]\n      [(char=? c #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=?\
    \ c #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n\
    \      [(char=? c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c\
    \ #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n  \
    \    [(char=? c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n      [(char=? c #\\\
    x) #\\z]\n      [(char=? c #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else\
    \ c])))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-char c)\n    (if (char-alphabetic? c)\n       \
    \ (rotate (string c))\n        (string c)))\n  (apply string-append (map encrypt-char\
    \ (string->list s))))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=?\
    \ c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n            ((char=? c #\\\
    d) #\\f)\n            ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\\
    h)\n            ((char=? c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n \
    \           ((char=? c #\\i) #\\k)\n            ((char=? c #\\j) #\\l)\n     \
    \       ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\n)\n         \
    \   ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n            ((char=?\
    \ c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n            ((char=? c #\\\
    q) #\\s)\n            ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\\
    u)\n            ((char=? c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n \
    \           ((char=? c #\\v) #\\x)\n            ((char=? c #\\w) #\\y)\n     \
    \       ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\a)\n         \
    \   ((char=? c #\\z) #\\b)\n            (else c)))\n    (rotate-char-helper c))\n\
    \  (define (rotate-string s)\n    (cond ((null? s) '())\n          (else (cons\
    \ (rotate-char (car s)) (rotate-string (cdr s))))))\n  (rotate-string s))\n",
  "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (if (char-alphabetic? c)\n            (list-ref\
    \ alphabet (+ (char-&gt;integer c) (* 2 2)))\n            c))\n      (string-&gt;list\
    \ s)))))\n", "  (string-append (string-append (substring s 2) (substring s 0 2))\n\
    \                 (string-append (substring s 4) (substring s 2 4))))\n", "  (define\
    \ (rotate-char c)\n    (let ([c (char-downcase c)])\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c])))\n  (string-map rotate-char s))\n", "  (for/list\
    \ ([c (in-string s)])\n    (cond\n      [(char-alphabetic? c)\n       (let ([n\
    \ (char-&gt;integer c)])\n         (integer-&gt;char (+ n (* 2 2))))]\n      [else\
    \ c])))\n", "  (string-map (lambda (x)\n                (if (char-alphabetic?\
    \ x)\n                    (let* ([a (char-downcase x)]\n                     \
    \      [b (char-upcase x)]\n                           [c (if (char-lower-case?\
    \ x) a b)])\n                      (if (char=? c #\\z)\n                     \
    \     (if (char-lower-case? x) #\\b #\\B)\n                          (if (char=?\
    \ c #\\y)\n                              (if (char-lower-case? x) #\\a #\\A)\n\
    \                              (if (char-lower-case? x)\n                    \
    \              (char-downcase (integer->char (+ (char->integer c) 2)))\n     \
    \                             (char-upcase (integer->char (+ (char->integer c)\
    \ 2)))))))\n                    x))\n              s))\n", "  (define (rotate\
    \ c)\n    (let ([c (char-downcase c)])\n      (cond\n        [(char=? c #\\a)\
    \ #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n    \
    \    [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c])))\n  (string-map rotate s))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond ((char=? c\
    \ #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n            ((char=? c #\\\
    c) #\\e)\n            ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\\
    g)\n            ((char=? c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n \
    \           ((char=? c #\\h) #\\j)\n            ((char=? c #\\i) #\\k)\n     \
    \       ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\m)\n         \
    \   ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n            ((char=?\
    \ c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n            ((char=? c #\\\
    p) #\\r)\n            ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\\
    t)\n            ((char=? c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n \
    \           ((char=? c #\\u) #\\w)\n            ((char=? c #\\v) #\\x)\n     \
    \       ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\z)\n         \
    \   ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)\n            (else\
    \ c)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (cond ((string=?\
    \ s \"\") \"\")\n          (else (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                               (rotate-string (substring s 1))))))\n\
    \  (rotate-string s))\n", "  (define (shift-char c)\n    (integer->char (+ c (*\
    \ 2 2))))\n  (string-map shift-char s))\n", "  (string-append (string-append (substring\
    \ s 2) (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 2 4))))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let ([n (char-downcase c)])\n                     \
    \ (if (char-numeric? n)\n                          (char-upcase (char-add n 2))\n\
    \                          (char-add n 2)))\n                    c))\n       \
    \       s))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n \
    \       (string-append (rotate (string-ref s 0))\n                       (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\\
    c\n          (if (char=? c #\\b)\n              #\\d\n              (if (char=?\
    \ c #\\c)\n                  #\\e\n                  (if (char=? c #\\d)\n   \
    \                   #\\f\n                      (if (char=? c #\\e)\n        \
    \                  #\\g\n                          (if (char=? c #\\f)\n     \
    \                         #\\h\n                              (if (char=? c #\\\
    g)\n                                  #\\i\n                                 \
    \ (if (char=? c #\\h)\n                                      #\\j\n          \
    \                            (if (char=? c #\\i)\n                           \
    \               #\\k\n                                          (if (char=? c\
    \ #\\j)\n                                              #\\l\n                \
    \                              (if (char=? c #\\k)\n                         \
    \                         #\\m\n                                             \
    \     (if (char=? c #\\l)\n                                                  \
    \    #\\n\n                                                      (if (char=? c\
    \ #\\m)\n                                                          #\\o\n    \
    \                                                      (if (char=? c #\\n)\n \
    \                                                             #\\p\n         \
    \                                                     (if (char=? c #\\o)\n  \
    \                                                                #\\q\n      \
    \                                                            (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (rotate-alphabet s)\n    (string-append (rotate (substring\
    \ s 0 26)) (rotate (substring s 26))))\n  (define (encrypt-char c)\n    (string-ref\
    \ (rotate-alphabet (string-append \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n                (string-index (string-append \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) c)))\n  (define (encrypt-string s)\n    (if (string=? s \"\")\n        \"\"\n\
    \        (string-append (encrypt-char (string-ref s 0)) (encrypt-string (substring\
    \ s 1)))))\n  (encrypt-string s))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-char c)\n    (define\
    \ (rotate-char c)\n      (integer->char (+ (char->integer c) 2)))\n    (cond\n\
    \      [(char=? c #\\a) (rotate-char #\\y)]\n      [(char=? c #\\b) (rotate-char\
    \ #\\z)]\n      [(char=? c #\\c) (rotate-char #\\a)]\n      [(char=? c #\\d) (rotate-char\
    \ #\\b)]\n      [(char=? c #\\e) (rotate-char #\\c)]\n      [(char=? c #\\f) (rotate-char\
    \ #\\d)]\n      [(char=? c #\\g) (rotate-char #\\e)]\n      [(char=? c #\\h) (rotate-char\
    \ #\\f)]\n      [(char=? c #\\i) (rotate-char #\\g)]\n      [(char=? c #\\j) (rotate-char\
    \ #\\h)]\n      [(char=? c #\\k) (rotate-char #\\i)]\n      [(char=? c #\\l) (rotate-char\
    \ #\\j)]\n      [(char=? c #\\m) (rotate-char #\\k)]\n      [(char=? c #\\n) (rotate-char\
    \ #\\l)]\n      [(char=? c #\\o) (rotate-char #\\m)]\n      [(char=? c #\\p) (rotate-char\
    \ #\\n)]\n      [(char=? c #\\q) (rotate-char #\\o)]\n      [(char=? c #\\r) (rotate-char\
    \ #\\p)]\n      [(char=? c #\\s) (rotate-char #\\q)]\n      [(char=? c #\\t) (rotate-char\
    \ #\\r)]\n      [(char=? c #\\u) (rotate-char #\\s)]\n      [(char=? c #\\v) (rotate-char\
    \ #\\t)]\n      [(", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char s))\n", "  (string-append\n   (string-append\n\
    \    (substring s 0 2)\n    (substring s 4 6))\n   (string-append\n    (substring\
    \ s 2 4)\n    (substring s 6))))\n", "  (define (rotate n s)\n    (if (empty?\
    \ s)\n        s\n        (rotate n (append (rest s) (list (first s))))))\n  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        s\n        (append (list (char-downcase\
    \ (rotate 2 (char->integer (first s)))))\n                (encrypt-helper (rest\
    \ s)))))\n  (encrypt-helper s))\n", "  (string-append (string-append (substring\
    \ s 2) (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 2 4))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ (rotate-char-helper c)))\n  (define (rotate-string s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n\
    \  (rotate-string s))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b)\
    \ #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n    \
    \    [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=?\
    \ c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\\
    k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=?\
    \ c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\\
    p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=?\
    \ c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\\
    u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=?\
    \ c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\\
    z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else\
    \ c])))\n  (string-join (map rotate-char (string-&gt;list s))))\n", "  (define\
    \ (rotate-char c)\n    (let ([c (string-&gt;char c)])\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c])))\n  (string-join (map rotate-char (string-&gt;list\
    \ s))))\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)))\n</code>\nI'm not sure how to proceed from here.\
    \ I'm not sure how to rotate the alphabet by two places.\n\n\nA:\n\nYou can use\
    \ <code>string-map</code> to apply a function to each character in a string. \
    \ You can use <code>string-ref</code> to get the character at a given position\
    \ in a string.  You can use <code>string-length</code> to get the length of a\
    \ string.  You can use <code>modulo</code> to get the remainder of a division.\n",
  "  (define (rotate-char c)\n    (if (char=? c #\\z)\n        #\\a\n        (if (char=?\
    \ c #\\y)\n            #\\b\n            (integer->char (+ (char->integer c) 2)))))\n\
    \  (string-map rotate-char s))\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)))\n</code>\nI'm not sure how to rotate the alphabet.\
    \ \n\n\nA:\n\nYou can use <code>string-map</code> to map a function over a string.\n\
    <code>(define (encrypt s)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic?\
    \ c)\n         (let* ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )]\n                [i (string-index alphabet (char-downcase c))]\n          \
    \      [j (modulo (+ i (* 2 2)) (length alphabet))])\n           (list-ref alphabet\
    \ j))\n         c))\n   s))\n</code>\n", "  (map (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (let* ([a (char-downcase c)]\n                    [n (- a #\\\
    a)]\n                    [m (+ n (* 2 2))])\n               (char (+ #\\a (modulo\
    \ m 26))))\n             c))\n       s))\n", "  (string-append (string-append\
    \ (substring s 2) (substring s 0 2))\n                 (string-append (substring\
    \ s 4) (substring s 2 4))))\n", "  (map (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (let* ([a (char-downcase c)]\n                    [i (char-&gt;integer\
    \ a)]\n                    [j (+ (* 2 2) i)])\n               (integer-&gt;char\
    \ (modulo j 26)))\n             c))\n       s))\n", "  (define (rotate n)\n  \
    \  (if (= n 0)\n        \"\"\n        (string-append (string-append (substring\
    \ s n (+ n 1))\n                                      (substring s 0 n))\n   \
    \                   (rotate (- n 2)))))\n  (rotate (- (string-length s) 2)))\n",
  "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n         \
    \           (let* ([a (char-upcase c)]\n                           [i (- a #\\\
    A)]\n                           [j (+ i (* 2 2))])\n                      (char-upcase\
    \ (+ #\\A (modulo j 26))))\n                    c))\n              s))\n", " \
    \ (string-map (lambda (c)\n                (if (char-alphabetic? c)\n        \
    \            (let* ([a (char-downcase c)]\n                           [b (char-upcase\
    \ c)]\n                           [n (char-&gt;integer a)]\n                 \
    \          [m (char-&gt;integer b)])\n                      (if (char=? c a)\n\
    \                          (integer-&gt;char (+ n (* 2 2)))\n                \
    \          (integer-&gt;char (+ m (* 2 2)))))\n                    c))\n     \
    \         s))\n", "  (map (lambda (c)\n         (if (char-alphabetic? c)\n   \
    \          (let* ([a (char-downcase c)]\n                    [i (- (char-&gt;integer\
    \ a) (char-&gt;integer #\\a))]\n                    [j (+ i (* 2 2))])\n     \
    \          (integer-&gt;char (+ (char-&gt;integer #\\a) (modulo j 26))))\n   \
    \          c))\n       s))\n", "  (define (encrypt-helper s i)\n    (cond\n  \
    \    [(empty? s) empty]\n      [(= i 2) (cons (integer->char (+ (char->integer\
    \ (first s)) 2))\n                     (encrypt-helper (rest s) 0))]\n      [else\
    \ (cons (first s)\n                  (encrypt-helper (rest s) (+ i 1)))]))\n \
    \ (encrypt-helper s 0))\n", "  (string-append (string-append (substring s 2) (substring\
    \ s 0 2))\n                 (string-append (substring s 4) (substring s 2 4))))\n",
  "  (define (shift c)\n    (define (rotate c)\n      (if (char=? c #\\a)\n      \
    \    #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                                       #\\x\n\
    \                                                ", "  (map (lambda (x)\n    \
    \     (if (char-alphabetic? x)\n             (let ([n (char-downcase x)])\n  \
    \             (if (and (&lt;= #\\a n) (&lt;= n #\\z))\n                   (let\
    \ ([n (+ n (* 2 2))])\n                     (if (&gt; n #\\z)\n              \
    \           (char-&gt;integer (char-&gt;integer #\\a) (+ n (- #\\z #\\a 1)))\n\
    \                         n))\n                   x))\n             x))\n    \
    \   s))\n</code>\nI am not sure if this is the best way to do this. I am also\
    \ not sure if I should use <code>char-&gt;integer</code> or <code>integer-&gt;char</code>.\
    \ I am also not sure if I should use <code>char-alphabetic?</code> or <code>char-numeric?</code>.\n\
    I am also not sure if I should use <code>char-downcase</code> or <code>char-upcase</code>.\n\
    I am also not sure if I should use <code>char-&gt;integer</code> or <code>integer-&gt;char</code>.\n\
    I am also not sure if I should use <code>char-alphabetic?</code> or <code>char-numeric?</code>.\n\
    I am also not sure if I should use <code>char-downcase</code> or <code>char-upcase</code>.\n\
    I am also not sure if I should use <code>char-&gt;integer</code> or <code>integer-&gt;char</code>.\n\
    I am also not sure if I should use <code>char-alphabetic?</code> or <code>char-numeric?</code>.\n\
    I am also not sure if I should use <code>char-downcase</code> or <code>char-upcase</code>.\n\
    I am also not sure if I should use <code>char-&gt;integer</code> or <code>integer-&gt;char</code>.\n\
    I am also not sure if I should use <code>char-alphabetic?</code> or <code>char-numeric?</code",
  "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n         \
    \           (let* ([a (char-downcase c)]\n                           [i (- (char-&gt;integer\
    \ a) 97)]\n                           [j (+ i (* 2 2))])\n                   \
    \   (integer-&gt;char (+ 97 (modulo j 26))))\n                    c))\n      \
    \        s))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let ([n (char-&gt;integer c)])\n                  \
    \    (integer-&gt;char (+ n (* 2 2))))\n                    c))\n            \
    \  s))\n</code>\n", "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-&gt;list s)))\n", "  (for/list ([c (in-string s)])\n    (if (char-alphabetic?\
    \ c)\n        (let* ([n (char-&gt;integer c)]\n               [n (+ n (* 2 2))])\n\
    \          (integer-&gt;char n))\n        c)))\n", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\\
    c\n          (if (char=? c #\\b)\n              #\\d\n              (if (char=?\
    \ c #\\c)\n                  #\\e\n                  (if (char=? c #\\d)\n   \
    \                   #\\f\n                      (if (char=? c #\\e)\n        \
    \                  #\\g\n                          (if (char=? c #\\f)\n     \
    \                         #\\h\n                              (if (char=? c #\\\
    g)\n                                  #\\i\n                                 \
    \ (if (char=? c #\\h)\n                                      #\\j\n          \
    \                            (if (char=? c #\\i)\n                           \
    \               #\\k\n                                          (if (char=? c\
    \ #\\j)\n                                              #\\l\n                \
    \                              (if (char=? c #\\k)\n                         \
    \                         #\\m\n                                             \
    \     (if (char=? c #\\l)\n                                                  \
    \    #\\n\n                                                      (if (char=? c\
    \ #\\m)\n                                                          #\\o\n    \
    \                                                      (if (char=? c #\\n)\n \
    \                                                             #\\p\n         \
    \                                                     (if (char=? c #\\o)\n  \
    \                                                                #\\q\n      \
    \                                                            (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (for/list ([c\
    \ (in-string s)])\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\\
    b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=?\
    \ c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n\
    \      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c\
    \ #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n  \
    \    [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\\
    o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=?\
    \ c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n\
    \      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c\
    \ #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n  \
    \    [(char=? c #\\z) #\\b]\n      [else c])))\n", "  (let ([s (string-&gt;list\
    \ s)])\n    (map (lambda (x)\n           (let ([x (char-&gt;integer x)])\n   \
    \          (integer-&gt;char (+ x (* 2 2)))))\n         s)))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (let ([c (char-downcase c)])\n      (cond [(char=? c #\\a) #\\c]\n \
    \           [(char=? c #\\b) #\\d]\n            [(char=? c #\\c) #\\e]\n     \
    \       [(char=? c #\\d) #\\f]\n            [(char=? c #\\e) #\\g]\n         \
    \   [(char=? c #\\f) #\\h]\n            [(char=? c #\\g) #\\i]\n            [(char=?\
    \ c #\\h) #\\j]\n            [(char=? c #\\i) #\\k]\n            [(char=? c #\\\
    j) #\\l]\n            [(char=? c #\\k) #\\m]\n            [(char=? c #\\l) #\\\
    n]\n            [(char=? c #\\m) #\\o]\n            [(char=? c #\\n) #\\p]\n \
    \           [(char=? c #\\o) #\\q]\n            [(char=? c #\\p) #\\r]\n     \
    \       [(char=? c #\\q) #\\s]\n            [(char=? c #\\r) #\\t]\n         \
    \   [(char=? c #\\s) #\\u]\n            [(char=? c #\\t) #\\v]\n            [(char=?\
    \ c #\\u) #\\w]\n            [(char=? c #\\v) #\\x]\n            [(char=? c #\\\
    w) #\\y]\n            [(char=? c #\\x) #\\z]\n            [(char=? c #\\y) #\\\
    a]\n            [(char=? c #\\z) #\\b]\n            [else c])))\n  (string-map\
    \ rotate-char s))\n", "  (string-map\n   (lambda (c)\n     (let ((n (string-ci-&gt;number\
    \ c)))\n       (if (and (&gt;= n #\\a) (&lt;= n #\\z))\n           (number-&gt;string\
    \ (+ n (* 2 2)))\n           c)))\n   s))\n", "  (string-append (string-append\
    \ (substring s 2) (substring s 0 2))\n                 (string-append (substring\
    \ s 4) (substring s 2 4))))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n", "  (string-append\
    \ (string-append (substring s 2) (substring s 0 2))\n                 (string-append\
    \ (substring s 4) (substring s 2 4))))\n", "  (string-map (lambda (c)\n      \
    \          (if (char-alphabetic? c)\n                    (let ([n (char-&gt;integer\
    \ c)])\n                      (integer-&gt;char (+ n (* 2 2))))\n            \
    \        c))\n              s))\n", "  (string-map (lambda (c)\n             \
    \   (if (char-alphabetic? c)\n                    (let* ([a (char-downcase c)]\n\
    \                           [b (if (char&lt;=? #\\a a #\\z)\n                \
    \                  (char-&gt;integer a)\n                                  (+\
    \ (char-&gt;integer a) 26))]\n                           [c (+ b (* 2 2))])\n\
    \                      (integer-&gt;char (if (&lt; c 26) c (- c 26))))\n     \
    \               c))\n              s))\n", "  (define (shift c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (string-map shift s))\n", "  (string-map\
    \ (lambda (c)\n                (if (char-alphabetic? c)\n                    (let*\
    \ ([a (char-downcase c)]\n                           [b (if (char-lower-case?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c))]\n                           [n (char-&gt;integer\
    \ a)]\n                           [m (char-&gt;integer b)])\n                \
    \      (integer-&gt;char (+ m (* 2 (modulo (- n 97) 26)))))\n                \
    \    c))\n              s))\n</code>\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n", "  (map (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (let ([n (char-&gt;integer\
    \ c)])\n               (integer-&gt;char (+ n (* 2 2))))\n             c))\n \
    \      s))\n", "  (define (rotate-alphabet n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet (- n 1)) (list (string-ref \"abcdefghijklmnopqrstuvwxyz\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-2 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-2 (- n 1)) (list (string-ref \"cdefghijklmnopqrstuvwxyzab\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-4 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-4 (- n 1)) (list (string-ref \"efghijklmnopqrstuvwxyzabcde\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-8 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-8 (- n 1)) (list (string-ref \"hijklmnopqrstuvwxyzabcdefghi\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-16 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-16 (- n 1)) (list (string-ref \"klmnopqrstuvwxyzabcdefghijklm\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-32 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-32 (- n 1)) (list (string-ref \"opqrstuvwxyzabcdefghijklmnopqr\"\
    \ (- n 1))))]))\n  (define (rotate-alphabet-64 n)\n    (cond\n      [(= n 0) '()]\n\
    \      [else (append (rotate-alphabet-64 (- n 1)) (list (string-ref \"stuvwxyzabcdefghijkl",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a) #\\c\n          (if (char=? c #\\b) #\\d\n              (if (char=?\
    \ c #\\c) #\\e\n                  (if (char=? c #\\d) #\\f\n                 \
    \     (if (char=? c #\\e) #\\g\n                          (if (char=? c #\\f)\
    \ #\\h\n                              (if (char=? c #\\g) #\\i\n             \
    \                     (if (char=? c #\\h) #\\j\n                             \
    \         (if (char=? c #\\i) #\\k\n                                         \
    \ (if (char=? c #\\j) #\\l\n                                              (if\
    \ (char=? c #\\k) #\\m\n                                                  (if\
    \ (char=? c #\\l) #\\n\n                                                     \
    \ (if (char=? c #\\m) #\\o\n                                                 \
    \         (if (char=? c #\\n) #\\p\n                                         \
    \                     (if (char=? c #\\o) #\\q\n                             \
    \                                     (if (char=? c #\\p) #\\r\n             \
    \                                                         (if (char=? c #\\q)\
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r) #\\t\n                                             \
    \                                 (if (char=? c #\\s) #\\u\n                 \
    \                                                                 (if (char=?\
    \ c #\\t) #\\v\n                                                             \
    \                         (if (char=? c #\\u) #\\w\n                         \
    \                                                                 (if (char=?\
    \ c #\\v) #\\x\n                                                             \
    \                                 (if (char=? c #\\w) #\\y\n                 \
    \                                                                            \
    \     (if (char=? c #\\x) #\\z\n                                             \
    \                                                         (if (char=? c #\\y)\
    \ #\\a\n                                                                     \
    \                                     (if (char=? c #\\z) #\\b\n             \
    \                                                   ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n\
    \            ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n    \
    \        ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n        \
    \    ((char=? c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=?\
    \ c #\\h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\\
    j) #\\l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\\
    n)\n            ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n \
    \           ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n     \
    \       ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n         \
    \   ((char=? c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=?\
    \ c #\\u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\\
    w) #\\y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\\
    a)\n            ((char=? c #\\z) #\\b)\n            (else c)))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond ((null? s) '())\n          (else\
    \ (cons (rotate-char (car s))\n                      (rotate-string (cdr s))))))\n\
    \  (rotate-string s))\n", "  (map (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (let* ([a (char-downcase c)]\n                    [i (- (char-&gt;integer\
    \ a) (char-&gt;integer #\\a))]\n                    [j (+ i (* 2 2))])\n     \
    \          (integer-&gt;char (+ (char-&gt;integer #\\a) (modulo j 26))))\n   \
    \          c))\n       s))\n", "  (string-append\n   (string-append (substring\
    \ s 2) (substring s 0 2))\n   (string-append (substring s 4) (substring s 0 4))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ (rotate-char-helper c)))\n  (define (rotate-string s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n\
    \  (rotate-string s))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char s))\n", "  (string-append (string-append (substring\
    \ s 2) (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 2 4))))\n", "  (string-append (substring s 2) (substring s 0 2)))\n", "  (map\
    \ (lambda (c)\n         (if (char-alphabetic? c)\n             (let ([n (char-&gt;integer\
    \ c)])\n               (integer-&gt;char (+ n (* 2 2))))\n             c))\n \
    \      s))\n", "  (map (lambda (c)\n         (if (char-alphabetic? c)\n      \
    \       (let* ([a (char-downcase c)]\n                    [b (char-upcase c)]\n\
    \                    [n (char-&gt;integer a)]\n                    [m (char-&gt;integer\
    \ b)])\n               (if (char=? c a)\n                   (integer-&gt;char\
    \ (+ n (* 2 2)))\n                   (integer-&gt;char (+ m (* 2 2)))))\n    \
    \         c))\n       s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (string-append\n   (string-append\n  \
    \  (substring s 2)\n    (substring s 0 2))\n   (string-append\n    (substring\
    \ s 4)\n    (substring s 2 4))))\n", "  (string-map\n   (lambda (c)\n     (if\
    \ (char-alphabetic? c)\n         (let* ([a (char-downcase c)]\n              \
    \  [i (- (char-&gt;integer a) (char-&gt;integer #\\a))]\n                [j (+\
    \ i (* 2 2))])\n           (integer-&gt;char (+ (char-&gt;integer #\\a) (modulo\
    \ j 26))))\n         c))\n   s))\n", "  (map (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (let* ([a (char-downcase c)]\n                    [n (- (char-&gt;integer\
    \ a) (char-&gt;integer #\\a))]\n                    [m (+ n (* 2 2))])\n     \
    \          (integer-&gt;char (+ (char-&gt;integer #\\a) (modulo m 26))))\n   \
    \          c))\n       s))\n", "  (string-append (string-append (substring s 2)\
    \ (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 2 4))))\n", "  (let ([alphabet '(\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\
    \ \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"\
    \ \"u\" \"v\" \"w\" \"x\" \"y\" \"z\")])\n    (for/list ([c (in-string s)])\n\
    \      (let ([i (string-index c alphabet)])\n        (if (not i)\n           \
    \ c\n            (list-ref alphabet (+ i (* 2 2))))))))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char s))\n",
  "  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list\
    \ s)))\n</code>\nI am trying to create a function that takes a string as an argument\
    \ and returns a string encrypted with the alphabet being rotated. The alphabet\
    \ should be rotated in a manner such that the letters shift down by two multiplied\
    \ to two places.\nFor example:\n<code>(encrypt \"hello\")\n=&gt; \"jgnnq\"\n</code>\n\
    I am trying to use the string-list function to convert the string into a list\
    \ of characters, but I am not sure how to go about rotating the alphabet.\n\n\n\
    A:\n\nThe <code>string-&gt;list</code> function is not what you want. It returns\
    \ a list of characters, not a list of strings.\nInstead, you want to use <code>string-split</code>\
    \ to split the string into a list of strings.\n<code>(string-split \"hello\")\n\
    =&gt; '(\"h\" \"e\" \"l\" \"l\" \"o\")\n</code>\n", "  (let ([alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list s)\n    (map (lambda\
    \ (c)\n           (if (char-alphabetic? c)\n               (list-ref alphabet\
    \ (+ (char-&gt;integer c) (* 2 2)))\n               c))\n         (string-&gt;list\
    \ s))))\n</code>\nThe error I get is:\n<code>string-&gt;list: expects argument\
    \ of type &lt;string&gt;; given #&lt;procedure:encrypt&gt;\n</code>\nI'm not sure\
    \ how to fix this.\n\n\nA:\n\nYou're calling <code>string-&gt;list</code> twice,\
    \ and the second time you're passing the procedure itself as the argument.\n<code>(define\
    \ (encrypt s)\n  (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (map (lambda (c)\n           (if (char-alphabetic? c)\n             \
    \  (list-ref alphabet (+ (char-&gt;integer c) (* 2 2)))\n               c))\n\
    \         (string-&gt;list s))))\n</code>\n", "  (string-map\n   (lambda (c)\n\
    \     (let ([n (- (char-downcase c) #\\a)])\n       (if (and (>= n 0) (< n 26))\n\
    \           (char (+ #\\a (modulo (+ n 2) 26)))\n           c)))\n   s))\n", " \
    \ (let ([alphabet (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (if (char-alphabetic? c)\n            (list-ref\
    \ alphabet (+ (char-&gt;integer c) (* 2 2)))\n            c))\n      (string-&gt;list\
    \ s)))))\n", "  (define (rotate n)\n    (if (= n 0)\n        '()\n        (cons\
    \ (string-ref s (- n 1)) (rotate (- n 1)))))\n  (string-append (rotate (- (string-length\
    \ s) 2))\n                 (string-append (string-ref s (- (string-length s) 1))\n\
    \                                (string-ref s 0))))\n", "  (define (rotate c)\n\
    \    (if (char-alphabetic? c)\n        (let* ([a (char-downcase c)]\n        \
    \       [n (- a #\\a)]\n               [m (- n (* 2 2))])\n          (if (< m\
    \ 0)\n              (char (+ #\\a (+ m 26)))\n              (char (+ #\\a m))))\n\
    \        c))\n  (string-map rotate s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\\
    c\n          (if (char=? c #\\b)\n              #\\d\n              (if (char=?\
    \ c #\\c)\n                  #\\e\n                  (if (char=? c #\\d)\n   \
    \                   #\\f\n                      (if (char=? c #\\e)\n        \
    \                  #\\g\n                          (if (char=? c #\\f)\n     \
    \                         #\\h\n                              (if (char=? c #\\\
    g)\n                                  #\\i\n                                 \
    \ (if (char=? c #\\h)\n                                      #\\j\n          \
    \                            (if (char=? c #\\i)\n                           \
    \               #\\k\n                                          (if (char=? c\
    \ #\\j)\n                                              #\\l\n                \
    \                              (if (char=? c #\\k)\n                         \
    \                         #\\m\n                                             \
    \     (if (char=? c #\\l)\n                                                  \
    \    #\\n\n                                                      (if (char=? c\
    \ #\\m)\n                                                          #\\o\n    \
    \                                                      (if (char=? c #\\n)\n \
    \                                                             #\\p\n         \
    \                                                     (if (char=? c #\\o)\n  \
    \                                                                #\\q\n      \
    \                                                            (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (let ([alphabet\
    \ (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-&gt;list s)))\n",
  "  (define (rotate-char c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=?\
    \ c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n\
    \      [(char=? c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c\
    \ #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n  \
    \    [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\\
    l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=?\
    \ c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n\
    \      [(char=? c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c\
    \ #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n  \
    \    [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\\
    y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c]))\n  (string-map rotate-char\
    \ s))\n", "  (string-map (lambda (x)\n                (if (char-alphabetic? x)\n\
    \                    (let ([y (char-downcase x)])\n                      (if (char-numeric?\
    \ (char-downcase y))\n                          (char-upcase (char-add y 2))\n\
    \                          (char-add y 2)))\n                    x))\n       \
    \       s))\n", "  (string-append (string-take s 2)\n                 (string-drop\
    \ s 2)))\n", "  (for/list ([c (in-string s)])\n    (cond\n      [(char=? c #\\\
    a) #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=?\
    \ c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n\
    \      [(char=? c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=? c\
    \ #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n  \
    \    [(char=? c #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c #\\\
    n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=?\
    \ c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n\
    \      [(char=? c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=? c\
    \ #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n  \
    \    [(char=? c #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c])))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
