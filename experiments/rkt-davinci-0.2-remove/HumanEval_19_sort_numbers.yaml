name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (define (numeral->number numeral)\n    (cond\n      [(string=? numeral\
    \ \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral\
    \ \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral\
    \ \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral\
    \ \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral\
    \ \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (let* ([min-numeral (apply min (map numeral->number\
    \ numbers))]\n              [min-numeral-index (find-index (lambda (numeral) (=\
    \ min-numeral (numeral->number numeral))) numbers)]\n              [min-numeral-string\
    \ (number->numeral min-numeral)])\n         (cons min-numeral-string (sort-numbers-helper\
    \ (remove-at min-numeral-index numbers))))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let ([min (apply min (map numeral-&gt;number numbers))])\n\
    \         (cons (number-&gt;numeral min)\n               (sort-numbers-helper\
    \ (filter (lambda (x) (not (= (numeral-&gt;number x) min))) numbers))))]))\n \
    \ (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n\
    </code>\n", "  (define (numeral-to-number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-to-numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (append (sort-numbers-helper (filter (lambda (x) (< x (car\
    \ numbers))) (cdr numbers)))\n                (list (car numbers))\n         \
    \       (sort-numbers-helper (filter (lambda (x) (>= x (car numbers))) (cdr numbers))))))\n\
    \  (string-join (map number-to-numeral (sort-numbers-helper (map numeral-to-number\
    \ (string-split numbers)))) \" \"))\n```\n\n## Tests\n\n```racket", "  (let ([numbers\
    \ (string-split numbers #\\space)])\n    (string-join (sort (map string->number\
    \ numbers) <) #\\space)))\n", "  (sort (string-&gt;list numbers) string&lt;?))\n\
    </code>\n", "  (define (number-to-int num)\n    (cond\n      [(equal? num \"zero\"\
    ) 0]\n      [(equal? num \"one\") 1]\n      [(equal? num \"two\") 2]\n      [(equal?\
    \ num \"three\") 3]\n      [(equal? num \"four\") 4]\n      [(equal? num \"five\"\
    ) 5]\n      [(equal? num \"six\") 6]\n      [(equal? num \"seven\") 7]\n     \
    \ [(equal? num \"eight\") 8]\n      [(equal? num \"nine\") 9]))\n  (define (int-to-number\
    \ num)\n    (cond\n      [(equal? num 0) \"zero\"]\n      [(equal? num 1) \"one\"\
    ]\n      [(equal? num 2) \"two\"]\n      [(equal? num 3) \"three\"]\n      [(equal?\
    \ num 4) \"four\"]\n      [(equal? num 5) \"five\"]\n      [(equal? num 6) \"\
    six\"]\n      [(equal? num 7) \"seven\"]\n      [(equal? num 8) \"eight\"]\n \
    \     [(equal? num 9) \"nine\"]))\n  (define (sort-numbers-helper nums)\n    (if\
    \ (null? nums)\n        '()\n        (append (sort-numbers-helper (filter (lambda\
    \ (x) (< x (car nums))) (cdr nums)))\n                (list (car nums))\n    \
    \            (sort-numbers-helper (filter (lambda (x) (>= x (car nums))) (cdr\
    \ nums))))))\n  (string-join (map int-to-number (sort-numbers-helper (map number-to-int\
    \ (string-split numbers #\\space)))) \" \"))\n", "  (sort (string-&gt;list numbers)\n\
    \        (lambda (a b)\n          (string&lt;? (number-&gt;string a) (number-&gt;string\
    \ b)))))\n", "  (string-join (sort (string-split numbers #\\space)\n         \
    \            (lambda (a b)\n                       (< (number-from-string a)\n\
    \                          (number-from-string b))))\n               #\\space))\n",
  "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\nI'm not sure if I'm supposed\
    \ to use <code>string-&gt;list</code> or <code>string-split</code> or something\
    \ else. I'm not sure how to convert the string to a list of numbers.\n\n\nA:\n\
    \n<code>string-&gt;list</code> is the right tool for the job. It will give you\
    \ a list of characters, which you can then sort.\n", "  (string-join\n   (sort\n\
    \    (map string->number\n         (string-split numbers #\\space))\n    <)\n\
    \   #\\space))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numeral-list-&gt;number-list numeral-list)\n    (map\
    \ numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list number-list)\n\
    \    (map number-&gt;numeral number-list))\n  (define (number-list-&gt;string\
    \ number-list)\n    (string-join (number-list-&gt;numeral-list number-list) \"\
    \ \"))\n  (number-list-&gt;string (sort (numeral-list-&gt;number-list (string-split\
    \ numbers #\\space)) &lt;)))\n</code>\nI'm not sure if this is the best way to\
    \ do it, but it works.\n", "  (string-join (sort (string-split numbers) <) \"\
    \ \"))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number numbers)\n\
    \         (cond\n           [(empty? numbers) (cons number empty)]\n         \
    \  [(&lt; number (car numbers)) (cons number numbers)]\n           [else (cons\
    \ (car numbers) (insert-number number (cdr numbers)))]))\n       (insert-number\
    \ (car numbers) (sort-numbers-helper (cdr numbers)))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else (string-append\
    \ (number-&gt;numeral (car numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n\
    \  (numbers-&gt;string (sort-numbers-helper (map numeral-&gt;number (string-split\
    \ numbers #\\space)))))\n</code>\n", "  (define (numeral->number numeral)\n  \
    \  (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\"\
    ) 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numbers->numerals\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons (number->numeral\
    \ (car numbers)) (numbers->numerals (cdr numbers)))]))\n  (define (numerals->numbers\
    \ numerals)\n    (cond\n      [(empty? numerals) empty]\n      [else (cons (numeral->number\
    \ (car numerals)) (numerals->numbers (cdr numerals)))]))\n  (define (sort-numerals\
    \ numerals)\n    (numbers->numerals (sort (numerals->numbers numerals) <)))\n\
    \  (sort-numerals (string-split numbers)))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (define (insert-number number numbers)\n       \
    \  (cond\n           [(empty? numbers) (cons number empty)]\n           [(&lt;\
    \ number (car numbers)) (cons number numbers)]\n           [else (cons (car numbers)\
    \ (insert-number number (cdr numbers)))]))\n       (insert-number (numeral-&gt;number\
    \ (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else (string-append\
    \ (number-&gt;numeral (car numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n\
    \  (numbers-&gt;string (sort-numbers-helper numbers)))\n</code>\n", "  (define\
    \ (to-numeral numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n     \
    \ [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n      [(equal?\
    \ numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n      [(equal? numeral\
    \ \"five\") 5]\n      [(equal? numeral \"six\") 6]\n      [(equal? numeral \"\
    seven\") 7]\n      [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\"\
    ) 9]))\n  (define (to-numeral-list numeral-list)\n    (map to-numeral numeral-list))\n\
    \  (define (to-numeral-string numeral-list)\n    (string-join (map number->string\
    \ numeral-list)))\n  (define (to-numeral-string-list numeral-list)\n    (map to-numeral-string\
    \ numeral-list))\n  (define (sort-numeral-list numeral-list)\n    (sort (to-numeral-list\
    \ numeral-list) <))\n  (define (sort-numeral-string-list numeral-list)\n    (to-numeral-string-list\
    \ (sort-numeral-list numeral-list)))\n  (define (sort-numeral-string numeral-string)\n\
    \    (string-join (sort-numeral-string-list (string-split numeral-string #\\space))))\n\
    \  (sort-numeral-string numbers))\n", "  (define (numeral-&gt;number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numeral-&gt;numbers\
    \ numeral)\n    (map numeral-&gt;number (string-&gt;list numeral)))\n  (define\
    \ (numbers-&gt;numeral numbers)\n    (list-&gt;string (map number-&gt;numeral\
    \ numbers)))\n  (numbers-&gt;numeral (sort &lt; (numeral-&gt;numbers numbers))))\n\
    </code>\n", "  (define (numeral->number numeral)\n    (cond\n      [(equal? numeral\
    \ \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"\
    two\") 2]\n      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\"\
    ) 4]\n      [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n\
    \      [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n\
    \      [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n \
    \   (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(< number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (numeral->number (car numbers)) (sort-numbers-helper (cdr\
    \ numbers)))]))\n  (define (numbers->string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else (string-append (number->numeral (car numbers)) \"\
    \ \" (numbers->string (cdr numbers)))]))\n  (numbers->string (sort-numbers-helper\
    \ (string-split numbers))))\n", "  (define (number-to-int number)\n    (cond\n\
    \      [(equal? number \"zero\") 0]\n      [(equal? number \"one\") 1]\n     \
    \ [(equal? number \"two\") 2]\n      [(equal? number \"three\") 3]\n      [(equal?\
    \ number \"four\") 4]\n      [(equal? number \"five\") 5]\n      [(equal? number\
    \ \"six\") 6]\n      [(equal? number \"seven\") 7]\n      [(equal? number \"eight\"\
    ) 8]\n      [(equal? number \"nine\") 9]))\n  (define (int-to-number number)\n\
    \    (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(< number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (number-to-int (car numbers)) (sort-numbers-helper (cdr\
    \ numbers)))]))\n  (define (sort-numbers-helper2 numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (int-to-number (car numbers)) (sort-numbers-helper2\
    \ (cdr numbers)))]))\n  (sort-numbers-helper2 (sort-numbers-helper (string-split\
    \ numbers))))\n", "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\n\
    I'm not sure how to go about this. I'm not sure if I should use <code>string-&gt;list</code>\
    \ or <code>string-split</code> to get the numbers into a list. I'm also not sure\
    \ how to go about sorting the list. \nI'm not sure if I should use <code>sort</code>\
    \ or <code>sort!</code> or <code>sort-list</code> or <code>sort-list!</code>.\
    \ I'm not sure if I should use <code>string&lt;?</code> or <code>string-ci&lt;?</code>\
    \ or <code>string-locale&lt;?</code> or <code>string-locale-ci&lt;?</code>.\n\
    I'm not sure if I should use <code>list-&gt;string</code> or <code>string-join</code>\
    \ to get the list back into a string.\nI'm not sure if I should use <code>string-&gt;list</code>\
    \ or <code>string-split</code> to get the numbers into a list.\nI'm not sure if\
    \ I should use <code>sort</code> or <code>sort!</code> or <code>sort-list</code>\
    \ or <code>sort-list!</code>.\nI'm not sure if I should use <code>string&lt;?</code>\
    \ or <code>string-ci&lt;?</code> or <code>string-locale&lt;?</code> or <code>string-locale-ci&lt;?</code>.\n\
    I'm not sure if I should use <code>list-&gt;string</code> or <code>string-join</code>\
    \ to get the list back into a string.\nI'm not sure if I should use <code>string-&gt;list</code>\
    \ or <code>string-split</code> to get the numbers into a list.\nI'm not sure if\
    \ I should use <code>sort</code> or <code>sort!</code> or <code>sort-list</code>\
    \ or <code>sort-list!</code", "  (string-join\n   (sort\n    (string-split numbers\
    \ #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number b))))\n\
    \   #\\space))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal?\
    \ numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two)\
    \ 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n  \
    \    [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal?\
    \ numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral\
    \ 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(equal?\
    \ number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n\
    \      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal?\
    \ number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n\
    \      [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers) '()]\n    \
    \  [else\n       (let* ([numbers-as-numbers (map numeral-&gt;number numbers)]\n\
    \              [sorted-numbers-as-numbers (sort numbers-as-numbers &lt;)]\n  \
    \            [sorted-numbers (map number-&gt;numeral sorted-numbers-as-numbers)])\n\
    \         sorted-numbers)]))\n  (string-join (sort-numbers-helper numbers) \"\
    \ \"))\n</code>\n", "  (string-join\n   (sort\n    (string-split numbers #\\space)\n\
    \    (lambda (a b)\n      (< (string->number a) (string->number b))))\n   #\\\
    space))\n", "  (define (number-to-int number)\n    (cond\n      [(string=? number\
    \ \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"\
    two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number \"four\"\
    ) 4]\n      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n\
    \      [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n      \
    \  '()\n        (let* ([first (car numbers)]\n               [rest (cdr numbers)]\n\
    \               [sorted-rest (sort-numbers-helper rest)]\n               [sorted-rest-with-first\
    \ (cons first sorted-rest)]\n               [sorted-rest-without-first (remove\
    \ first sorted-rest)]\n               [sorted-rest-without-first-with-first (cons\
    \ first sorted-rest-without-first)])\n          (if (null? sorted-rest)\n    \
    \          sorted-rest-with-first\n              (if (< (number-to-int first)\
    \ (number-to-int (car sorted-rest)))\n                  sorted-rest-with-first\n\
    \                  sorted-rest-without-first-with-first)))))\n  (define (remove\
    \ item list)\n    (if (null? list)\n        '()\n        (if (equal? item (car\
    \ list))\n            (cdr list)\n            (cons (car list) (remove item (cdr\
    \ list))))))\n  (define", "  (sort (string-&gt;list numbers) string-ci&lt;?))\n",
  "  (define (numeral->number numeral)\n    (cond\n      ((equal? numeral \"zero\"\
    ) 0)\n      ((equal? numeral \"one\") 1)\n      ((equal? numeral \"two\") 2)\n\
    \      ((equal? numeral \"three\") 3)\n      ((equal? numeral \"four\") 4)\n \
    \     ((equal? numeral \"five\") 5)\n      ((equal? numeral \"six\") 6)\n    \
    \  ((equal? numeral \"seven\") 7)\n      ((equal? numeral \"eight\") 8)\n    \
    \  ((equal? numeral \"nine\") 9)))\n  (define (number->numeral number)\n    (cond\n\
    \      ((equal? number 0) \"zero\")\n      ((equal? number 1) \"one\")\n     \
    \ ((equal? number 2) \"two\")\n      ((equal? number 3) \"three\")\n      ((equal?\
    \ number 4) \"four\")\n      ((equal? number 5) \"five\")\n      ((equal? number\
    \ 6) \"six\")\n      ((equal? number 7) \"seven\")\n      ((equal? number 8) \"\
    eight\")\n      ((equal? number 9) \"nine\")))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      ((null? numbers) '())\n      (else\n       (let*\
    \ ((smallest (apply min (map numeral->number numbers)))\n              (smallest-numeral\
    \ (number->numeral smallest))\n              (rest (remove smallest-numeral numbers)))\n\
    \         (cons smallest-numeral (sort-numbers-helper rest))))))\n  (string-join\
    \ (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n", "  (define\
    \ (number-to-int number)\n    (cond\n      [(string=? number \"zero\") 0]\n  \
    \    [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n    \
    \  [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n   \
    \   [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n    \
    \  [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n  \
    \    [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond\n\
    \      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n      \
    \  '()\n        (cons (int-to-number (apply min (map number-to-int numbers)))\n\
    \              (sort-numbers-helper (remove (int-to-number (apply min (map number-to-int\
    \ numbers))) numbers)))))\n  (apply string-append (sort-numbers-helper (string-split\
    \ numbers))))\n", "  (define (numeral-to-number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-to-numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number numbers)\n\
    \         (cond\n           [(empty? numbers) (cons number empty)]\n         \
    \  [(< number (car numbers)) (cons number numbers)]\n           [else (cons (car\
    \ numbers) (insert-number number (cdr numbers)))]))\n       (insert-number (numeral-to-number\
    \ (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n  (define (sort-numbers-helper-2\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons (number-to-numeral\
    \ (car numbers)) (sort-numbers-helper-2 (cdr numbers)))]))\n  (sort-numbers-helper-2\
    \ (sort-numbers-helper (string-split numbers))))\n", "  (sort (string-&gt;list\
    \ numbers)\n        (lambda (a b)\n          (string&lt;? (number-&gt;string a)\
    \ (number-&gt;string b)))))\n", "  (define (number-to-int num)\n    (cond\n  \
    \    [(string=? num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=?\
    \ num \"two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"\
    four\") 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n\
    \      [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n    \
    \  [(string=? num \"nine\") 9]))\n  (define (int-to-number num)\n    (cond\n \
    \     [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"\
    ]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"]\n      [(= num 5) \"\
    five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"]\n      [(= num\
    \ 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let\
    \ ([min (apply min (map number-to-int numbers))])\n         (cons (int-to-number\
    \ min) (sort-numbers-helper (remove (int-to-number min) numbers))))]))\n  (string-join\
    \ (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n</code>\n", " \
    \ (sort (string-&gt;list numbers) string&lt;?))\n</code>\nI'm not sure how to\
    \ do this without using <code>string-&gt;list</code> and <code>list-&gt;string</code>\
    \ to convert the string to a list and back. Is there a way to do this without\
    \ converting the string to a list?\n\n\nA:\n\nYou can use <code>string-split</code>\
    \ to split the string into a list of strings, and then sort the list of strings.\n\
    <code>(define (sort-numbers numbers)\n  (string-join\n   (sort (string-split numbers\
    \ #\\space) string&lt;?)\n   \" \"))\n</code>\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral\
    \ \"one\") 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\"\
    ) 3]\n      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n\
    \      [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n  \
    \    [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n \
    \ (define (number->numeral number)\n    (cond\n      [(equal? number 0) \"zero\"\
    ]\n      [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n    \
    \  [(equal? number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal?\
    \ number 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number\
    \ 7) \"seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9)\
    \ \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else (append (sort-numbers-helper (filter (lambda (x)\
    \ (< x (car numbers))) (cdr numbers)))\n                    (list (car numbers)))]))\n\
    \  (define (numeral-list->string numeral-list)\n    (cond\n      [(null? numeral-list)\
    \ \"\"]\n      [else (string-append (car numeral-list) \" \" (numeral-list->string\
    \ (cdr numeral-list)))]))\n  (numeral-list->string (map number->numeral (sort-numbers-helper\
    \ (map numeral->number (string-split numbers #\\space))))))\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers) '()]\n\
    \      [else (cons (number->numeral (car (sort (map numeral->number numbers))))\n\
    \                  (sort-numbers-helper (cdr numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n      \
    \  '()\n        (let ([sorted-numbers (sort-numbers-helper (cdr numbers))])\n\
    \          (cons (car numbers)\n                (if (null? sorted-numbers)\n \
    \                   '()\n                    (if (&lt; (numeral-&gt;number (car\
    \ numbers))\n                            (numeral-&gt;number (car sorted-numbers)))\n\
    \                        sorted-numbers\n                        (cons (car sorted-numbers)\n\
    \                              (cdr sorted-numbers))))))))\n  (string-join (map\
    \ number-&gt;numeral (sort-numbers-helper (string-split numbers #\\space)))\n\
    \               \" \"))\n</code>\n", "  (define (numeral-&gt;number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else\n       (let*\
    \ ([numbers-as-numbers (map numeral-&gt;number numbers)]\n              [sorted-numbers-as-numbers\
    \ (sort &lt; numbers-as-numbers)]\n              [sorted-numbers (map number-&gt;numeral\
    \ sorted-numbers-as-numbers)])\n         sorted-numbers)]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n</code>\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-numeral\
    \ numeral numbers)\n         (cond\n           [(empty? numbers) (cons numeral\
    \ empty)]\n           [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else\n \
    \           (cons (first numbers) (insert-numeral numeral (rest numbers)))])\n\
    \         )\n       (insert-numeral (first numbers) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (numeral-list-&gt;string numeral-list)\n    (cond\n\
    \      [(empty? numeral-list) empty]\n      [else\n       (string-append (symbol-&gt;string\
    \ (first numeral-list)) \" \" (numeral-list-&gt;string (rest numeral-list)))]))\n\
    \  (numeral-list-&gt;string", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-numeral numeral numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons numeral empty)]\n           [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else\n \
    \           (cons (first numbers) (insert-numeral numeral (rest numbers)))])\n\
    \         )\n       (insert-numeral (first numbers) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else\n       (string-append (first numbers) \" \" (numbers-&gt;string\
    \ (rest numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper (map numeral-&gt;number\
    \ (string-split numbers #\\space))", "  (define (number->numeral n)\n    (cond\
    \ ((= n 0) \"zero\")\n          ((= n 1) \"one\")\n          ((= n 2) \"two\"\
    )\n          ((= n 3) \"three\")\n          ((= n 4) \"four\")\n          ((=\
    \ n 5) \"five\")\n          ((= n 6) \"six\")\n          ((= n 7) \"seven\")\n\
    \          ((= n 8) \"eight\")\n          ((= n 9) \"nine\")))\n  (define (numeral->number\
    \ n)\n    (cond ((string=? n \"zero\") 0)\n          ((string=? n \"one\") 1)\n\
    \          ((string=? n \"two\") 2)\n          ((string=? n \"three\") 3)\n  \
    \        ((string=? n \"four\") 4)\n          ((string=? n \"five\") 5)\n    \
    \      ((string=? n \"six\") 6)\n          ((string=? n \"seven\") 7)\n      \
    \    ((string=? n \"eight\") 8)\n          ((string=? n \"nine\") 9)))\n  (define\
    \ (sort-numbers-helper numbers)\n    (if (null? numbers)\n        '()\n      \
    \  (cons (car numbers) (sort-numbers-helper (cdr numbers)))))\n  (define (sort-numbers-helper2\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (number->numeral\
    \ (car numbers)) (sort-numbers-helper2 (cdr numbers)))))\n  (define (sort-numbers-helper3\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (numeral->number\
    \ (car numbers)) (sort-numbers-helper3 (cdr numbers)))))\n  (define (sort-numbers-helper4\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (car numbers)\
    \ (sort-numbers-helper4 (cdr numbers)))))\n  (define (sort-numbers-helper5 numbers)\n\
    \    (if (null? numbers)\n        '()\n        (cons (number->numeral (car numbers))\
    \ (sort-numbers-helper5 (cdr", "  (string-join (sort (string-split numbers #\\\
    space)\n                     (lambda (a b)\n                       (< (number-of-words\
    \ a) (number-of-words b))))\n               #\\space))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper nums)\n    (cond\n      [(null? nums) '()]\n\
    \      [else (append (sort-numbers-helper (filter (lambda (x) (&lt; x (car nums)))\
    \ (cdr nums)))\n                    (list (car nums)))]))\n  (string-join (map\
    \ number-&gt;numeral (sort-numbers-helper (map numeral-&gt;number (string-split\
    \ numbers)))) \" \"))\n</code>\nI'm not sure if this is the best way to do it,\
    \ but it works.\n", "  (sort (string-&gt;list numbers) string-ci&lt;?))\n", " \
    \ (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (number->string (string->number a))\n     \
    \                     (number->string (string->number b)))))\n               #\\\
    space))\n", "  (define (numerals->numbers numeral-list)\n    (map (lambda (numeral)\n\
    \           (cond ((equal? numeral 'zero) 0)\n                 ((equal? numeral\
    \ 'one) 1)\n                 ((equal? numeral 'two) 2)\n                 ((equal?\
    \ numeral 'three) 3)\n                 ((equal? numeral 'four) 4)\n          \
    \       ((equal? numeral 'five) 5)\n                 ((equal? numeral 'six) 6)\n\
    \                 ((equal? numeral 'seven) 7)\n                 ((equal? numeral\
    \ 'eight) 8)\n                 ((equal? numeral 'nine) 9)))\n         numeral-list))\n\
    \  (define (numbers->numerals number-list)\n    (map (lambda (number)\n      \
    \     (cond ((= number 0) 'zero)\n                 ((= number 1) 'one)\n     \
    \            ((= number 2) 'two)\n                 ((= number 3) 'three)\n   \
    \              ((= number 4) 'four)\n                 ((= number 5) 'five)\n \
    \                ((= number 6) 'six)\n                 ((= number 7) 'seven)\n\
    \                 ((= number 8) 'eight)\n                 ((= number 9) 'nine)))\n\
    \         number-list))\n  (define (numeral-list->string numeral-list)\n    (string-join\
    \ (map symbol->string numeral-list) \" \"))\n  (define (string->numeral-list string)\n\
    \    (map string->symbol (string-split string #\\space)))\n  (define (sort-numerals\
    \ numeral-list)\n    (numbers->numerals (sort (numerals->numbers numeral-list)\
    \ <)))\n  (numeral-list->string (sort-numerals (string->numeral-list numbers))))\n",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"\
    zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"\
    two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"\
    four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"\
    six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"\
    eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-numeral numeral numbers)\n\
    \         (cond\n           [(empty? numbers) (cons numeral empty)]\n        \
    \   [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number (first numbers)))\n\
    \            (cons numeral numbers)]\n           [else\n            (cons (first\
    \ numbers) (insert-numeral numeral (rest numbers)))])\n         )\n       (insert-numeral\
    \ (first numbers) (sort-numbers-helper (rest numbers)))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else\n       (string-append\
    \ (first numbers) \" \" (numbers-&gt;string (rest numbers)))]))\n  (numbers-&gt;string\
    \ (sort-numbers-helper (map numeral-&gt;number (string-split numbers #\\space))",
  "  (sort (string-&gt;list numbers)\n        (lambda (a b)\n          (string&lt;?\
    \ (number-&gt;string a) (number-&gt;string b)))))\n", "  (sort (string-&gt;list\
    \ numbers)\n        (lambda (a b)\n          (string-ci&lt;? a b))))\n</code>\n",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"\
    zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"\
    two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"\
    four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"\
    six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"\
    eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numeral-&gt;numbers numeral)\n    (map numeral-&gt;number\
    \ (string-split numeral #\\space)))\n  (define (numbers-&gt;numeral numbers)\n\
    \    (string-join (map number-&gt;numeral numbers) \" \"))\n  (numbers-&gt;numeral\
    \ (sort &lt; (numeral-&gt;numbers numbers))))\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (number-of-a a) (number-of-a b))))\n               #\\space))\n", "  (define\
    \ (numeral->number numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n\
    \      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n\
    \      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n\
    \      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n\
    \      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n\
    \      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) '()]\n      [else (cons (number->numeral (apply min (map numeral->number\
    \ numbers)))\n                  (sort-numbers-helper (remove (number->numeral\
    \ (apply min (map numeral->number numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (let ([min (apply min\
    \ (map numeral->number numbers))])\n          (cons (number->numeral min) (sort-numbers-helper\
    \ (remove (number->numeral min) numbers))))))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (numeral-list-&gt;number-list numeral-list)\n    (map numeral-&gt;number\
    \ numeral-list))\n  (define (number-list-&gt;numeral-list number-list)\n    (map\
    \ number-&gt;numeral number-list))\n  (define (sort-numeral-list numeral-list)\n\
    \    (number-list-&gt;numeral-list (sort (numeral-list-&gt;number-list numeral-list)\
    \ &lt;)))\n  (string-join (sort-numeral-list (string-split numbers #\\space))\
    \ \" \"))\n</code>\n", "  (define (numeral->number numeral)\n    (cond\n     \
    \ [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n    \
    \  [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n  \
    \    [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number->numeral number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numbers->numerals\
    \ numbers)\n    (map number->numeral numbers))\n  (define (numerals->numbers numerals)\n\
    \    (map numeral->number numerals))\n  (define (sort-numerals numerals)\n   \
    \ (sort < numerals))\n  (define (sort-numbers numbers)\n    (sort-numerals (numbers->numerals\
    \ numbers)))\n  (define (sort-numerals-to-numbers numerals)\n    (numerals->numbers\
    \ (sort-numerals numerals)))\n  (define (sort-numbers-to-numerals numbers)\n \
    \   (numbers->numerals (sort-numbers numbers)))\n  (define (sort-numerals-to-numerals\
    \ numerals)\n    (numbers->numerals (sort-numerals (numerals->numbers numerals))))\n\
    \  (define (sort-numbers-to-numbers numbers)\n    (numerals->numbers (sort-numerals\
    \ (numbers->numerals numbers", "  (sort (string-&gt;list numbers) string&lt;?))\n\
    </code>\nI'm getting the following error:\n<code>sort: expects type &lt;listof\
    \ number&gt; as 1st argument, given: '(\"zero\" \"one\" \"two\" \"three\" \"four\"\
    \ \"five\" \"six\" \"seven\" \"eight\" \"nine\")\n</code>\nI'm not sure what I'm\
    \ doing wrong. I'm trying to sort a list of strings, not numbers.\n\n\nA:\n\n\
    You're trying to sort a list of strings, but the <code>sort</code> procedure expects\
    \ a list of numbers. You can use <code>string-&gt;number</code> to convert the\
    \ strings to numbers, and then sort the list of numbers.\n", "  (define (numerals-&gt;numbers\
    \ str)\n    (cond\n      [(string=? str \"zero\") 0]\n      [(string=? str \"\
    one\") 1]\n      [(string=? str \"two\") 2]\n      [(string=? str \"three\") 3]\n\
    \      [(string=? str \"four\") 4]\n      [(string=? str \"five\") 5]\n      [(string=?\
    \ str \"six\") 6]\n      [(string=? str \"seven\") 7]\n      [(string=? str \"\
    eight\") 8]\n      [(string=? str \"nine\") 9]))\n  (define (numbers-&gt;numerals\
    \ num)\n    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n   \
    \   [(= num 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"\
    ]\n      [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"\
    seven\"]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers) '()]\n    \
    \  [else\n       (let* ([numbers-list (map numerals-&gt;numbers (string-split\
    \ numbers #\\space))]\n              [sorted-numbers-list (sort &lt; numbers-list)]\n\
    \              [sorted-numerals-list (map numbers-&gt;numerals sorted-numbers-list)])\n\
    \         (string-join sorted-numerals-list #\\space))]))\n  (sort-numbers-helper\
    \ numbers))\n</code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numeral-list-&gt;number-list\
    \ numeral-list)\n    (map numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list\
    \ number-list)\n    (map number-&gt;numeral number-list))\n  (define (number-list-&gt;string\
    \ number-list)\n    (string-join (number-list-&gt;numeral-list number-list) \"\
    \ \"))\n  (number-list-&gt;string (sort (numeral-list-&gt;number-list (string-split\
    \ numbers #\\space)) &lt;)))\n</code>\nI'm not sure if this is the best way to\
    \ do it, but it works.\n", "  (define (number-to-int number)\n    (cond\n    \
    \  [(equal? number \"zero\") 0]\n      [(equal? number \"one\") 1]\n      [(equal?\
    \ number \"two\") 2]\n      [(equal? number \"three\") 3]\n      [(equal? number\
    \ \"four\") 4]\n      [(equal? number \"five\") 5]\n      [(equal? number \"six\"\
    ) 6]\n      [(equal? number \"seven\") 7]\n      [(equal? number \"eight\") 8]\n\
    \      [(equal? number \"nine\") 9]))\n  (define (int-to-number number)\n    (cond\n\
    \      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n     \
    \ [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal?\
    \ number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number\
    \ 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"\
    eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) '()]\n      [else (cons (int-to-number\
    \ (apply min (map number-to-int numbers)))\n                  (sort-numbers-helper\
    \ (remove (int-to-number (apply min (map number-to-int numbers))) numbers)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (define (numeral->number numeral)\n    (cond\n      [(string=? numeral \"zero\"\
    ) 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-number number numbers)\n\
    \         (cond\n           [(empty? numbers) (cons number empty)]\n         \
    \  [(< number (car numbers)) (cons number numbers)]\n           [else (cons (car\
    \ numbers) (insert-number number (cdr numbers)))]))\n       (insert-number (numeral->number\
    \ (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n  (define (numbers->string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else (string-append\
    \ (number->numeral (car numbers)) \" \" (numbers->string (cdr numbers)))]))\n\
    \  (numbers->string (sort-numbers-helper (string-split numbers))))\n", "  (define\
    \ (numeral->number numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n\
    \      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n    \
    \  [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n     \
    \ [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n      [(equal?\
    \ numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n      [(equal?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n      [(equal?\
    \ number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal? number\
    \ 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number 6) \"\
    six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"eight\"\
    ]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-number\
    \ number sorted-numbers)\n         (cond\n           [(empty? sorted-numbers)\
    \ (cons number empty)]\n           [(< number (car sorted-numbers)) (cons number\
    \ sorted-numbers)]\n           [else (cons (car sorted-numbers) (insert-number\
    \ number (cdr sorted-numbers)))]))\n       (define (sort-numbers-helper-helper\
    \ numbers sorted-numbers)\n         (cond\n           [(empty? numbers) sorted-numbers]\n\
    \           [else (sort-numbers-helper-helper (cdr numbers) (insert-number (car\
    \ numbers) sorted-numbers))]))\n       (sort-numbers-helper-helper (cdr numbers)\
    \ (cons (car numbers) empty))]))\n  (define (numbers->string numbers)\n    (cond\n\
    \      [(empty? numbers) \"\"]\n      [else (string-append (number->numeral",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"\
    zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"\
    two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"\
    four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"\
    six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"\
    eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (let ([first (first numbers)]\n       \
    \      [rest (rest numbers)])\n         (append (sort-numbers-helper (filter (lambda\
    \ (x) (&lt; (numeral-&gt;number x) (numeral-&gt;number first))) rest))\n     \
    \            (list first)\n                 (sort-numbers-helper (filter (lambda\
    \ (x) (&gt;= (numeral-&gt;number x) (numeral-&gt;number first))) rest))))]))\n\
    \  (string-join (map number-&gt;numeral (sort-numbers-helper (string-split numbers\
    \ #\\space))) \" \"))\n</code>\n", "  (define (numeral->number numeral)\n    (cond\n\
    \      [(equal? numeral \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n   \
    \   [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\") 3]\n     \
    \ [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n      [(equal?\
    \ numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n      [(equal? numeral\
    \ \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n  (define (number->numeral\
    \ number)\n    (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number\
    \ 1) \"one\"]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"\
    three\"]\n      [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"\
    ]\n      [(equal? number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n  \
    \    [(equal? number 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (let* ([numbers-list (string-&gt;list numbers)]\n        \
    \      [first-numeral (first numbers-list)]\n              [rest-numerals (rest\
    \ numbers-list)]\n              [first-number (numeral->number first-numeral)]\n\
    \              [rest-numbers (map numeral->number rest-numerals)]\n          \
    \    [sorted-numbers (sort rest-numbers &lt;)]\n              [sorted-numerals\
    \ (map number->numeral sorted-numbers)])\n         (cons first-numeral sorted-numerals))]))\n\
    \  (apply string-append (sort-numbers-helper numbers)))\n</code>\n", "  (define\
    \ (numeral-to-number numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n\
    \      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n    \
    \  [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n     \
    \ [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n      [(equal?\
    \ numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n      [(equal?\
    \ numeral \"nine\") 9]))\n  (define (number-to-numeral number)\n    (cond\n  \
    \    [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n      [(equal?\
    \ number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal? number\
    \ 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number 6) \"\
    six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"eight\"\
    ]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-number\
    \ number numbers)\n         (cond\n           [(empty? numbers) (cons number empty)]\n\
    \           [(< number (car numbers)) (cons number numbers)]\n           [else\
    \ (cons (car numbers) (insert-number number (cdr numbers)))]))\n       (insert-number\
    \ (numeral-to-number (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n\
    \  (define (numbers-to-string numbers)\n    (cond\n      [(empty? numbers) \"\"\
    ]\n      [else (string-append (number-to-numeral (car numbers)) \" \" (numbers-to-string\
    \ (cdr numbers)))]))\n  (numbers-to-string (sort-numbers-helper (string-split\
    \ numbers))))\n", "  (string-join (sort (string-split numbers #\\space)\n    \
    \                 (lambda (a b)\n                       (string<? a b)))\n   \
    \            #\\space))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(equal? numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal?\
    \ numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral\
    \ 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n\
    \      [(equal? numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal?\
    \ numeral 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n    \
    \  [(equal? number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number\
    \ 2) 'two]\n      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n\
    \      [(equal? number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal?\
    \ number 7) 'seven]\n      [(equal? number 8) 'eight]\n      [(equal? number 9)\
    \ 'nine]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (sort-numbers-helper-helper numbers)\n\
    \         (cond\n           [(empty? numbers) empty]\n           [else\n     \
    \       (cons (min (first numbers) (first (rest numbers)))\n                 \
    \ (sort-numbers-helper-helper (rest numbers)))]))\n       (cons (min (first numbers)\
    \ (first (rest numbers)))\n             (sort-numbers-helper (sort-numbers-helper-helper\
    \ (rest numbers))))]))\n  (define (numeral-list-&gt;string numeral-list)\n   \
    \ (cond\n      [(empty? numeral-list) empty]\n      [else\n       (string-append\
    \ (symbol-&gt;string (first numeral-list))\n                      \" \"\n    \
    \                  (numeral-list-&gt;string (rest numeral-list)))]))\n  (numeral-list-&gt;string\
    \ (sort-", "  (sort (string-&gt;list numbers) (lambda (a b) (&lt; (number-&gt;string\
    \ a) (number-&gt;string b)))))\n", "  (define (numeral-&gt;number numeral)\n \
    \   (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n\
    \      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n      [(equal?\
    \ numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal? numeral\
    \ 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral 'eight)\
    \ 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral number)\n\
    \    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1) 'one]\n\
    \      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n      [(equal?\
    \ number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal? number 6)\
    \ 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8) 'eight]\n\
    \      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-number\
    \ number numbers)\n         (cond\n           [(empty? numbers) (cons number empty)]\n\
    \           [(&lt; number (car numbers)) (cons number numbers)]\n           [else\
    \ (cons (car numbers) (insert-number number (cdr numbers)))]))\n       (insert-number\
    \ (numeral-&gt;number (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n\
    \  (define (numbers-&gt;string numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else (string-append (number-&gt;numeral (car numbers)) \" \" (numbers-&gt;string\
    \ (cdr numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper numbers)))\n\
    </code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal?\
    \ numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two)\
    \ 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n  \
    \    [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal?\
    \ numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral\
    \ 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(equal?\
    \ number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n\
    \      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal?\
    \ number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n\
    \      [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (let* ([numeral (first numbers)]\n              [number (numeral-&gt;number\
    \ numeral)]\n              [rest (sort-numbers-helper (rest numbers))]\n     \
    \         [rest-number (numeral-&gt;number (first rest))])\n         (cond\n \
    \          [(&lt; number rest-number) (cons numeral rest)]\n           [else (cons\
    \ (first rest) (cons numeral (rest rest))))]))]))\n  (string-join (map number-&gt;numeral\
    \ (sort-numbers-helper (string-&gt;list numbers))) \" \"))\n</code>\n", "  (define\
    \ (number-&gt;int number)\n    (cond\n      [(string=? number \"zero\") 0]\n \
    \     [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n   \
    \   [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n  \
    \    [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n   \
    \   [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n \
    \     [(string=? number \"nine\") 9]))\n  (define (int-&gt;number int)\n    (cond\n\
    \      [(= int 0) \"zero\"]\n      [(= int 1) \"one\"]\n      [(= int 2) \"two\"\
    ]\n      [(= int 3) \"three\"]\n      [(= int 4) \"four\"]\n      [(= int 5) \"\
    five\"]\n      [(= int 6) \"six\"]\n      [(= int 7) \"seven\"]\n      [(= int\
    \ 8) \"eight\"]\n      [(= int 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (list number)]\n           [(&lt; (number-&gt;int number) (number-&gt;int (first\
    \ numbers))) (cons number numbers)]\n           [else (cons (first numbers) (insert-number\
    \ number (rest numbers)))]))\n       (insert-number (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (define (int-list-&gt;string int-list)\n    (cond\n \
    \     [(empty? int-list) empty]\n      [else (string-append (int-&gt;number (first\
    \ int-list)) \" \" (int-list-&gt;string (rest int-list)))]))\n  (int-list-&gt;string\
    \ (sort-numbers-helper (string-&gt;list numbers))))\n</code>\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n        '()\n\
    \        (append (sort-numbers-helper (filter (lambda (x) (< x (car numbers)))\
    \ (cdr numbers)))\n                (list (car numbers))\n                (sort-numbers-helper\
    \ (filter (lambda (x) (>= x (car numbers))) (cdr numbers))))))\n  (string-join\
    \ (map number->numeral (sort-numbers-helper (map numeral->number (string-split\
    \ numbers)))) \" \"))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(&lt; number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (numeral-&gt;number (car numbers)) (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n    \
    \  [(empty? numbers) \"\"]\n      [else (string-append (number-&gt;numeral (car\
    \ numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n  (numbers-&gt;string\
    \ (sort-numbers-helper numbers)))\n</code>\n", "  (define (number-to-int number)\n\
    \    (cond\n      ((string=? number \"zero\") 0)\n      ((string=? number \"one\"\
    ) 1)\n      ((string=? number \"two\") 2)\n      ((string=? number \"three\")\
    \ 3)\n      ((string=? number \"four\") 4)\n      ((string=? number \"five\")\
    \ 5)\n      ((string=? number \"six\") 6)\n      ((string=? number \"seven\")\
    \ 7)\n      ((string=? number \"eight\") 8)\n      ((string=? number \"nine\"\
    ) 9)))\n  (define (int-to-number number)\n    (cond\n      ((= number 0) \"zero\"\
    )\n      ((= number 1) \"one\")\n      ((= number 2) \"two\")\n      ((= number\
    \ 3) \"three\")\n      ((= number 4) \"four\")\n      ((= number 5) \"five\")\n\
    \      ((= number 6) \"six\")\n      ((= number 7) \"seven\")\n      ((= number\
    \ 8) \"eight\")\n      ((= number 9) \"nine\")))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (let ((sorted-numbers\
    \ (sort-numbers-helper (cdr numbers))))\n          (if (null? sorted-numbers)\n\
    \              (list (car numbers))\n              (let ((sorted-numbers-cdr (cdr\
    \ sorted-numbers)))\n                (if (&lt; (number-to-int (car numbers)) (number-to-int\
    \ (car sorted-numbers)))\n                    (cons (car numbers) sorted-numbers)\n\
    \                    (cons (car sorted-numbers) (cons (car numbers) sorted-numbers-cdr))))))))\n\
    \  (string-join (map int-to-number (sort-numbers-helper (string-split numbers)))\
    \ \" \"))\n</code>\n", "  (define (numeral-to-number numeral)\n    (cond\n   \
    \   [(equal? numeral \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n      [(equal?\
    \ numeral \"two\") 2]\n      [(equal? numeral \"three\") 3]\n      [(equal? numeral\
    \ \"four\") 4]\n      [(equal? numeral \"five\") 5]\n      [(equal? numeral \"\
    six\") 6]\n      [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\"\
    ) 8]\n      [(equal? numeral \"nine\") 9]))\n  (define (number-to-numeral number)\n\
    \    (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let\
    \ ([first (first numbers)]\n             [rest (rest numbers)])\n         (append\
    \ (sort-numbers-helper (filter (lambda (x) (< x first)) rest))\n             \
    \    (list first)\n                 (sort-numbers-helper (filter (lambda (x) (>=\
    \ x first)) rest))))]))\n  (string-join (map number-to-numeral (sort-numbers-helper\
    \ (map numeral-to-number (string-split numbers)))) \" \"))\n", "  (sort (string-&gt;list\
    \ numbers)\n        (lambda (a b)\n          (string&lt;? (number-&gt;string a)\
    \ (number-&gt;string b)))))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numbers-&gt;numerals\
    \ numbers)\n    (map number-&gt;numeral numbers))\n  (define (numerals-&gt;numbers\
    \ numerals)\n    (map numeral-&gt;number numerals))\n  (define (sort-numerals\
    \ numerals)\n    (sort &lt; numerals))\n  (define (sort-numbers numbers)\n   \
    \ (sort-numerals (numbers-&gt;numerals numbers)))\n  (define (sort-numerals numerals)\n\
    \    (numerals-&gt;numbers (sort-numerals numerals)))\n  (define (sort-numbers\
    \ numbers)\n    (sort-numerals (numerals-&gt;numbers numbers)))\n  (define (sort-numerals\
    \ numerals)\n    (sort-numbers (numerals-&gt;numbers numerals)))\n  (define (sort-numbers\
    \ numbers)\n    (sort-numerals (numbers-&gt;numerals numbers)))", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (numeral-list-&gt;number-list\
    \ numeral-list)\n    (map numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list\
    \ number-list)\n    (map number-&gt;numeral number-list))\n  (define (sort-numbers-helper\
    \ numeral-list)\n    (number-list-&gt;numeral-list (sort (numeral-list-&gt;number-list\
    \ numeral-list) &lt;)))\n  (sort-numbers-helper (string-&gt;list numbers)))\n\
    </code>\nI'm not sure if I'm over-complicating things or if this is the best way\
    \ to do it. I'm also not sure if I'm using the <code>map</code> function correctly.\n\
    \n\nA:\n\nYou can simplify the code by using a <code>hash</code> to map the numerals\
    \ to numbers, and then sort the list of numbers.\n<code>(define numerals-&gt;numbers",
  "  (define (sort-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n  \
    \    [(empty? (rest numbers)) (list (first numbers))]\n      [else\n       (let\
    \ ([first-number (first numbers)]\n             [rest-numbers (rest numbers)])\n\
    \         (append (sort-helper (filter (lambda (x) (< x first-number)) rest-numbers))\n\
    \                 (list first-number)\n                 (sort-helper (filter (lambda\
    \ (x) (= x first-number)) rest-numbers))\n                 (sort-helper (filter\
    \ (lambda (x) (> x first-number)) rest-numbers))))]))\n  (string-join (sort-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (sort (string-&gt;list numbers)\
    \ &lt;))\n</code>\nI'm not sure how to go about this. I'm thinking I need to use\
    \ a hash table to map the words to the numbers, but I'm not sure how to do that.\n\
    \n\nA:\n\nYou can use a hash table to map the words to the numbers, but you don't\
    \ need to.  You can just use a list of pairs.  The list of pairs is a little easier\
    \ to read and understand.\n<code>#lang racket\n", "  (define (sort-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(= (first numbers) 'zero) (cons\
    \ 'zero (sort-helper (rest numbers)))]\n      [(= (first numbers) 'one) (cons\
    \ 'one (sort-helper (rest numbers)))]\n      [(= (first numbers) 'two) (cons 'two\
    \ (sort-helper (rest numbers)))]\n      [(= (first numbers) 'three) (cons 'three\
    \ (sort-helper (rest numbers)))]\n      [(= (first numbers) 'four) (cons 'four\
    \ (sort-helper (rest numbers)))]\n      [(= (first numbers) 'five) (cons 'five\
    \ (sort-helper (rest numbers)))]\n      [(= (first numbers) 'six) (cons 'six (sort-helper\
    \ (rest numbers)))]\n      [(= (first numbers) 'seven) (cons 'seven (sort-helper\
    \ (rest numbers)))]\n      [(= (first numbers) 'eight) (cons 'eight (sort-helper\
    \ (rest numbers)))]\n      [(= (first numbers) 'nine) (cons 'nine (sort-helper\
    \ (rest numbers)))]))\n  (apply string-append (sort-helper numbers)))\n", "  (string-join\
    \ (sort (string-split numbers #\\space)\n                     (lambda (a b)\n\
    \                       (< (number-of-a a) (number-of-a b))))\n              \
    \ #\\space))\n", "  (define (number-to-int number)\n    (cond\n      [(string=?\
    \ number \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number\
    \ \"two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number\
    \ \"four\") 4]\n      [(string=? number \"five\") 5]\n      [(string=? number\
    \ \"six\") 6]\n      [(string=? number \"seven\") 7]\n      [(string=? number\
    \ \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n  (define (int-to-number\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else (cons (int-to-number (apply min (map number-to-int\
    \ numbers)))\n                  (sort-numbers-helper (remove (int-to-number (apply\
    \ min (map number-to-int numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (number-from-string a)\n                          (number-from-string b))))\n\
    \               #\\space))\n", "  (define (number-to-int number)\n    (cond\n\
    \      [(equal? number \"zero\") 0]\n      [(equal? number \"one\") 1]\n     \
    \ [(equal? number \"two\") 2]\n      [(equal? number \"three\") 3]\n      [(equal?\
    \ number \"four\") 4]\n      [(equal? number \"five\") 5]\n      [(equal? number\
    \ \"six\") 6]\n      [(equal? number \"seven\") 7]\n      [(equal? number \"eight\"\
    ) 8]\n      [(equal? number \"nine\") 9]))\n  (define (int-to-number number)\n\
    \    (cond\n      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"\
    ]\n      [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n  \
    \    [(equal? number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal?\
    \ number 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number\
    \ 8) \"eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (int-to-number (car (sort (map number-to-int numbers) <)))\n             (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (string-join (sort-numbers-helper (string-split numbers\
    \ #\\space)) \" \"))\n", "  (string-join (sort (string-split numbers #\\space)\
    \ string<?)))\n", "  (define (numeral-&gt;num numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (num-&gt;numeral\
    \ num)\n    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n   \
    \   [(= num 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"\
    ]\n      [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"\
    seven\"]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define\
    \ (numeral-list-&gt;num-list numeral-list)\n    (map numeral-&gt;num numeral-list))\n\
    \  (define (num-list-&gt;numeral-list num-list)\n    (map num-&gt;numeral num-list))\n\
    \  (define (numeral-list-&gt;string numeral-list)\n    (string-join numeral-list\
    \ \" \"))\n  (define (num-list-&gt;string num-list)\n    (string-join num-list\
    \ \" \"))\n  (define (sort-numbers-helper numeral-list)\n    (num-list-&gt;string\
    \ (sort &lt; (numeral-list-&gt;num-list numeral-list))))\n  (sort-numbers-helper\
    \ (string-split numbers #\\space)))\n</code>\nI'm not sure if this is the best\
    \ way to do this, but it works.\n\n\nA:\n\nYour code is pretty good. I would suggest\
    \ a few things", "  (define (number-to-int number)\n    (cond\n      [(string=?\
    \ number \"zero\") 0]\n      [(string=? number \"one\") 1]\n      [(string=? number\
    \ \"two\") 2]\n      [(string=? number \"three\") 3]\n      [(string=? number\
    \ \"four\") 4]\n      [(string=? number \"five\") 5]\n      [(string=? number\
    \ \"six\") 6]\n      [(string=? number \"seven\") 7]\n      [(string=? number\
    \ \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n  (define (int-to-number\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else (append (sort-numbers-helper (filter (lambda (x)\
    \ (< x (car numbers))) (cdr numbers)))\n                    (list (car numbers)))]))\n\
    \  (string-join (map int-to-number (sort-numbers-helper (map number-to-int (string-split\
    \ numbers)))) \" \"))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (number-list-&gt;numeral-list\
    \ number-list)\n    (map number-&gt;numeral number-list))\n  (define (numeral-list-&gt;number-list\
    \ numeral-list)\n    (map numeral-&gt;number numeral-list))\n  (define (sort-number-list\
    \ number-list)\n    (sort &lt; number-list))\n  (define (sort-numeral-list numeral-list)\n\
    \    (number-list-&gt;numeral-list (sort-number-list (numeral-list-&gt;number-list\
    \ numeral-list))))\n  (sort-numeral-list (string-&gt;list numbers)))\n</code>\n\
    I'm not sure if this is the best way to do it, but it's the best I could come\
    \ up with.  I'm not sure if there's a better way to do the conversion between\
    \ numberals and numbers.  I'm also not sure if there's a better way to sort the\
    \ list of numberals.  I'm also", "  (define (sort-helper numbers)\n    (cond\n\
    \      [(null? numbers) '()]\n      [(null? (cdr numbers)) numbers]\n      [else\
    \ (append (sort-helper (filter (lambda (x) (&lt; x (cadr numbers))) numbers))\n\
    \                    (list (cadr numbers))\n                    (sort-helper (filter\
    \ (lambda (x) (&gt; x (cadr numbers))) numbers)))]))\n  (string-join (sort-helper\
    \ (string-&gt;list numbers)) \" \"))\n</code>\nI'm not sure if this is the best\
    \ way to do it, but it works.\n", "  (sort (string-&gt;list numbers)\n       \
    \ (lambda (a b)\n          (string-&lt;? (number-&gt;string a) (number-&gt;string\
    \ b)))))\n", "  (sort (string-&gt;list numbers)\n        (lambda (a b)\n     \
    \     (string&lt;? (number-&gt;string a) (number-&gt;string b)))))\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"zero\")\
    \ 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numeral-list-&gt;number-list numeral-list)\n    (map\
    \ numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list number-list)\n\
    \    (map number-&gt;numeral number-list))\n  (define (number-list-&gt;string\
    \ number-list)\n    (string-join (number-list-&gt;numeral-list number-list) \"\
    \ \"))\n  (number-list-&gt;string (sort (numeral-list-&gt;number-list (string-split\
    \ numbers #\\space)) &lt;)))\n</code>\n", "  (sort (string-&gt;list numbers)\n\
    \        (lambda (x y)\n          (string&lt;? (number-&gt;string x) (number-&gt;string\
    \ y)))))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal?\
    \ numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two)\
    \ 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n  \
    \    [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal?\
    \ numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral\
    \ 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(equal?\
    \ number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n\
    \      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal?\
    \ number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n\
    \      [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (define (insert-numeral numeral numbers)\n         (cond\n\
    \           [(empty? numbers) (cons numeral empty)]\n           [(&lt; (numeral-&gt;number\
    \ numeral) (numeral-&gt;number (first numbers)))\n            (cons numeral numbers)]\n\
    \           [else\n            (cons (first numbers) (insert-numeral numeral (rest\
    \ numbers)))])\n         )\n       (insert-numeral (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (define (numeral-list-&gt;string numeral-list)\n    (cond\n\
    \      [(empty? numeral-list) \"\"]\n      [else\n       (string-append (symbol-&gt;string\
    \ (first numeral-list)) \" \" (numeral-list-&gt;string (rest numeral-list)))]))\n\
    \  (numeral-list-&gt;string", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(equal? numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal?\
    \ numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral\
    \ 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n\
    \      [(equal? numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal?\
    \ numeral 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n    \
    \  [(equal? number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number\
    \ 2) 'two]\n      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n\
    \      [(equal? number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal?\
    \ number 7) 'seven]\n      [(equal? number 8) 'eight]\n      [(equal? number 9)\
    \ 'nine]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else\n       (let* ([numeral (car numbers)]\n        \
    \      [number (numeral-&gt;number numeral)]\n              [rest (sort-numbers-helper\
    \ (cdr numbers))]\n              [rest-number (numeral-&gt;number (car rest))])\n\
    \         (cond\n           [(equal? number rest-number) (cons numeral rest)]\n\
    \           [(&lt; number rest-number) (cons numeral rest)]\n           [else\
    \ (cons (car rest) (cons numeral (cdr rest)))]))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(null? numbers) \"\"]\n      [else (string-append\
    \ (number-&gt;numeral (car numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n\
    \  (numbers-&gt;string (sort-numbers-helper numbers)))\n</code", "  (define (numeral->number\
    \ numeral)\n    (cond [(string=? numeral \"zero\") 0]\n          [(string=? numeral\
    \ \"one\") 1]\n          [(string=? numeral \"two\") 2]\n          [(string=?\
    \ numeral \"three\") 3]\n          [(string=? numeral \"four\") 4]\n         \
    \ [(string=? numeral \"five\") 5]\n          [(string=? numeral \"six\") 6]\n\
    \          [(string=? numeral \"seven\") 7]\n          [(string=? numeral \"eight\"\
    ) 8]\n          [(string=? numeral \"nine\") 9]))\n  (define (number->numeral\
    \ number)\n    (cond [(= number 0) \"zero\"]\n          [(= number 1) \"one\"\
    ]\n          [(= number 2) \"two\"]\n          [(= number 3) \"three\"]\n    \
    \      [(= number 4) \"four\"]\n          [(= number 5) \"five\"]\n          [(=\
    \ number 6) \"six\"]\n          [(= number 7) \"seven\"]\n          [(= number\
    \ 8) \"eight\"]\n          [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (number->numeral\
    \ (apply min (map numeral->number numbers)))\n              (sort-numbers-helper\
    \ (remove (number->numeral (apply min (map numeral->number numbers))) numbers)))))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (define (number->numeral n)\n    (cond\n      [(= n 0) \"zero\"]\n      [(= n\
    \ 1) \"one\"]\n      [(= n 2) \"two\"]\n      [(= n 3) \"three\"]\n      [(= n\
    \ 4) \"four\"]\n      [(= n 5) \"five\"]\n      [(= n 6) \"six\"]\n      [(= n\
    \ 7) \"seven\"]\n      [(= n 8) \"eight\"]\n      [(= n 9) \"nine\"]))\n  (define\
    \ (numeral->number n)\n    (cond\n      [(\"zero\" n) 0]\n      [(\"one\" n) 1]\n\
    \      [(\"two\" n) 2]\n      [(\"three\" n) 3]\n      [(\"four\" n) 4]\n    \
    \  [(\"five\" n) 5]\n      [(\"six\" n) 6]\n      [(\"seven\" n) 7]\n      [(\"\
    eight\" n) 8]\n      [(\"nine\" n) 9]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-number\
    \ number numbers)\n         (cond\n           [(empty? numbers) (cons number empty)]\n\
    \           [(< number (car numbers)) (cons number numbers)]\n           [else\
    \ (cons (car numbers) (insert-number number (cdr numbers)))]))\n       (insert-number\
    \ (car numbers) (sort-numbers-helper (cdr numbers)))]))\n  (define (numeral-list->string\
    \ numeral-list)\n    (cond\n      [(empty? numeral-list) \"\"]\n      [else (string-append\
    \ (car numeral-list) \" \" (numeral-list->string (cdr numeral-list)))]))\n  (numeral-list->string\
    \ (map number->numeral (sort-numbers-helper (map numeral->number (string-split\
    \ numbers #\\space))))))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(&lt; number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (numeral-&gt;number (car numbers)) (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n    \
    \  [(empty? numbers) \"\"]\n      [else (string-append (number-&gt;numeral (car\
    \ numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n  (numbers-&gt;string\
    \ (sort-numbers-helper numbers)))\n</code>\n", "  (string-join (sort (string-split\
    \ numbers #\\space) string<?)))\n", "  (sort (string-&gt;list numbers)\n     \
    \   (lambda (a b)\n          (string&lt;? (number-&gt;string a) (number-&gt;string\
    \ b)))))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-in-order number numbers)\n\
    \         (cond\n           [(empty? numbers) (cons number empty)]\n         \
    \  [(&lt; number (car numbers)) (cons number numbers)]\n           [else (cons\
    \ (car numbers) (insert-in-order number (cdr numbers)))]))\n       (insert-in-order\
    \ (car numbers) (sort-numbers-helper (cdr numbers)))]))\n  (string-join (map number-&gt;numeral\
    \ (sort-numbers-helper (map numeral-&gt;number (string-split numbers)))) \" \"\
    ))\n</code>\n", "  (sort string<? (string-split numbers #\\space)))\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"zero\")\
    \ 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (let ([min (apply min (map numeral-&gt;number numbers))])\n\
    \          (cons (number-&gt;numeral min)\n                (sort-numbers-helper\
    \ (remove (number-&gt;numeral min) numbers))))))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n</code>\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [else\n       (let ([sorted-numbers\
    \ (sort-numbers-helper (rest numbers))])\n         (if (&lt; (numeral-&gt;number\
    \ (first numbers)) (numeral-&gt;number (first sorted-numbers)))\n            \
    \ (cons (first numbers) sorted-numbers)\n             (cons (first sorted-numbers)\
    \ (cons (first numbers) (rest sorted-numbers)))))]))\n  (string-join (map number-&gt;numeral\
    \ (sort-numbers-helper (string-&gt;list numbers))) \" \"))\n</code>\n", "  (sort\
    \ (string-&gt;list numbers) string&lt;?))\n</code>\nI'm not sure how to use the\
    \ <code>string&lt;?</code> function. I tried <code>(sort (string-&gt;list numbers)\
    \ string&lt;?)</code> but it doesn't work.\n\n\nA:\n\nThe <code>string&lt;?</code>\
    \ function is a predicate that returns <code>#t</code> if the first string is\
    \ lexicographically less than the second string, and <code>#f</code> otherwise.\n\
    The <code>sort</code> function takes a list and a predicate, and returns a new\
    \ list with the same elements as the original list, but sorted according to the\
    \ predicate.\nSo, for example, if you have a list of strings <code>'(\"one\" \"\
    two\" \"three\")</code>, and you want to sort them in ascending order, you can\
    \ call <code>(sort '(\"one\" \"two\" \"three\") string&lt;?)</code> and it will\
    \ return <code>'(\"one\" \"three\" \"two\")</code>.\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (numeral-list-&gt;number-list\
    \ numeral-list)\n    (map numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list\
    \ number-list)\n    (map number-&gt;numeral number-list))\n  (define (numeral-list-&gt;string\
    \ numeral-list)\n    (string-join (map symbol-&gt;string numeral-list) \" \"))\n\
    \  (define (string-&gt;numeral-list string)\n    (map string-&gt;symbol (string-split\
    \ string #\\space)))\n  (define (sort-numeral-list numeral-list)\n    (number-list-&gt;numeral-list\
    \ (sort (numeral-list-&gt;number-list numeral-list) &lt;)))\n  (numeral-list-&gt;string\
    \ (sort-numeral-list (string-&gt;numeral-list numbers))))\n</code>\n", "  (define\
    \ (numbers-&gt;numbers numbers)\n    (map (lambda (n) (string-&gt;number n))\n\
    \         (string-split numbers #\\space)))\n  (define (numbers-&gt;numerals numbers)\n\
    \    (map number-&gt;string numbers))\n  (define (numerals-&gt;string numerals)\n\
    \    (string-join numerals #\\space))\n  (numerals-&gt;string\n   (numbers-&gt;numerals\n\
    \    (sort numbers-&gt;numbers numbers))))\n</code>\nI'm not sure if I'm using\
    \ the right terms, but I'm trying to use the \"composition\" pattern.\nIs this\
    \ a good way to do it?\n\n\nA:\n\nI think your code is fine.  I would make a few\
    \ changes, though.\n\nI would use <code>string-split</code> instead of <code>string-tokenize</code>.\
    \  <code>string-tokenize</code> is deprecated.\nI would use <code>string-&gt;number</code>\
    \ instead of <code>string-&gt;number/locale</code>.  The latter is deprecated.\n\
    I would use <code>sort</code> instead of <code>sort!</code>.  The latter is deprecated.\n\
    I would use <code>string-join</code> instead of <code>string-append</code>.  The\
    \ latter is deprecated.\nI would use <code>string-&gt;number</code> instead of\
    \ <code>string-&gt;number/locale</code>.  The latter is deprecated.\nI would use\
    \ <code>number-&gt;string</code> instead of <code>number-&gt;string/locale</code>.\
    \  The latter is deprecated.\nI would use <code>string-join</code> instead of\
    \ <code>string-append</code>.  The latter is deprecated.\nI would use <code>string-split</code>\
    \ instead of <code>string-tokenize</code>.  The latter is deprecated.\nI would\
    \ use <code>string-&gt;number</code> instead of <code>string-&gt;number/locale</code>.\
    \  The latter is deprecated", "  (sort (string-&gt;list numbers)\n        (lambda\
    \ (a b)\n          (string-ci&lt;? a b))))\n</code>\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (numeral-list-&gt;number-list numeral-list)\n    (map numeral-&gt;number\
    \ numeral-list))\n  (define (number-list-&gt;numeral-list number-list)\n    (map\
    \ number-&gt;numeral number-list))\n  (define (number-list-&gt;string number-list)\n\
    \    (string-join (number-list-&gt;numeral-list number-list) \" \"))\n  (number-list-&gt;string\
    \ (sort &lt; (numeral-list-&gt;number-list (string-split numbers #\\space)))))\n\
    </code>\nI have a few questions about this code:\n\nIs there a better way to convert\
    \ between numerals and numbers?\nIs there a better way to convert between number\
    \ lists and numeral lists?\nIs there a better way to convert between number lists\
    \ and strings?\nIs there a better way to sort the number list?\nIs there a better\
    \ way to convert between strings and number lists?\nIs there a better way", " \
    \ (let ([numbers (string-split numbers #\\space)])\n    (string-join (sort (map\
    \ string->number numbers) <) #\\space)))\n", "  (define (numeral-&gt;number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-numeral numeral numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons numeral empty)]\n           [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else\n \
    \           (cons (first numbers) (insert-numeral numeral (rest numbers)))])\n\
    \         )\n       (insert-numeral (first numbers) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else\n       (string-append (first numbers) \" \" (numbers-&gt;string\
    \ (rest numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper (map numeral-&gt;number\
    \ (string-split numbers #\\space))", "  (sort (string-&gt;list numbers)\n    \
    \    (lambda (a b)\n          (string&lt;? (number-&gt;string a) (number-&gt;string\
    \ b)))))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numeral-list-&gt;number-list numeral-list)\n    (map\
    \ numeral-&gt;number numeral-list))\n  (define (number-list-&gt;numeral-list number-list)\n\
    \    (map number-&gt;numeral number-list))\n  (define (sort-number-list number-list)\n\
    \    (sort &lt; number-list))\n  (define (sort-numeral-list numeral-list)\n  \
    \  (number-list-&gt;numeral-list (sort-number-list (numeral-list-&gt;number-list\
    \ numeral-list))))\n  (define (string-&gt;numeral-list string)\n    (string-split\
    \ string #\\space))\n  (define (numeral-list-&gt;string numeral-list)\n    (string-join\
    \ numeral-list #\\space))\n  (numeral-list-&gt;string (sort-numeral-list (string-&gt;numeral-list\
    \ numbers))))\n</", "  (define (numeral-&gt;number numeral)\n    (cond\n     \
    \ [(equal? numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal?\
    \ numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral\
    \ 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n\
    \      [(equal? numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal?\
    \ numeral 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n    \
    \  [(equal? number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number\
    \ 2) 'two]\n      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n\
    \      [(equal? number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal?\
    \ number 7) 'seven]\n      [(equal? number 8) 'eight]\n      [(equal? number 9)\
    \ 'nine]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-numeral numeral numbers)\n\
    \         (cond\n           [(empty? numbers) (cons numeral empty)]\n        \
    \   [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number (first numbers)))\n\
    \            (cons numeral numbers)]\n           [else\n            (cons (first\
    \ numbers) (insert-numeral numeral (rest numbers)))])\n         )\n       (insert-numeral\
    \ (first numbers) (sort-numbers-helper (rest numbers)))]))\n  (string-join (map\
    \ number-&gt;numeral (sort-numbers-helper (map numeral-&gt;number (string-split\
    \ numbers #\\space)))) #\\space))\n</code>\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (numeral-&gt;numeral numeral)\n    (number-&gt;numeral (numeral-&gt;number\
    \ numeral)))\n  (define (numeral-list-&gt;numeral-list numeral-list)\n    (map\
    \ numeral-&gt;numeral numeral-list))\n  (define (numeral-list-&gt;numeral-string\
    \ numeral-list)\n    (string-join (map number-&gt;numeral numeral-list) \" \"\
    ))\n  (define (numeral-string-&gt;numeral-list numeral-string)\n    (string-split\
    \ numeral-string #\\space))\n  (define (numeral-string-&gt;numeral-string numeral-string)\n\
    \    (numeral-list-&gt;numeral-string (numeral-string-&gt;numeral-list numeral-string)))\n\
    \  (define (numeral-string-&gt;sorted-numeral-string numeral-string)\n    (numeral-",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero)\
    \ 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n     \
    \ [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal?\
    \ numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven)\
    \ 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n\
    \      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (numeral-&gt;string numeral)\n    (cond\n      [(equal? numeral 'zero) \"zero\"\
    ]\n      [(equal? numeral 'one) \"one\"]\n      [(equal? numeral 'two) \"two\"\
    ]\n      [(equal? numeral 'three) \"three\"]\n      [(equal? numeral 'four) \"\
    four\"]\n      [(equal? numeral 'five) \"five\"]\n      [(equal? numeral 'six)\
    \ \"six\"]\n      [(equal? numeral 'seven) \"seven\"]\n      [(equal? numeral\
    \ 'eight) \"eight\"]\n      [(equal? numeral 'nine) \"nine\"]))\n  (define (string-&gt;numeral\
    \ string)\n    (cond\n      [(equal? string \"zero\") 'zero]\n      [(equal? string\
    \ \"one\") 'one]\n      [(equal? string \"two\") 'two]\n      [(equal? string\
    \ \"three\") 'three]\n      [(equal? string \"four\") 'four]\n      [(equal? string\
    \ \"five\") 'five]\n      [(", "  (sort (string-&gt;list numbers) string&lt;?))\n\
    </code>\nI'm not sure how to make this work. I'm not sure how to convert the string\
    \ to a list of numbers. I'm not sure how to sort the list of numbers. I'm not\
    \ sure how to convert the list of numbers back to a string.\nI'm not sure how\
    \ to make this work. I'm not sure how to convert the string to a list of numbers.\
    \ I'm not sure how to sort the list of numbers. I'm not sure how to convert the\
    \ list of numbers back to a string.\nI'm not sure how to make this work. I'm not\
    \ sure how to convert the string to a list of numbers. I'm not sure how to sort\
    \ the list of numbers. I'm not sure how to convert the list of numbers back to\
    \ a string.\nI'm not sure how to make this work. I'm not sure how to convert the\
    \ string to a list of numbers. I'm not sure how to sort the list of numbers. I'm\
    \ not sure how to convert the list of numbers back to a string.\nI'm not sure\
    \ how to make this work. I'm not sure how to convert the string to a list of numbers.\
    \ I'm not sure how to sort the list of numbers. I'm not sure how to convert the\
    \ list of numbers back to a string.\nI'm not sure how to make this work. I'm not\
    \ sure how to convert the string to a list of numbers. I'm not sure how to sort\
    \ the list of numbers. I'm not sure how to convert the list of numbers back to\
    \ a string.\nI'm not sure how to make this work. I'm not sure how to convert the\
    \ string to a list of numbers. I'm not sure how to sort the list of numbers. I'm\
    \ not sure how to convert the list of numbers back to a string.\nI'm not sure\
    \ how to make this work. I'm not sure how to convert the string to a list of numbers.\
    \ I'm not sure how to sort the list of numbers. I'm not sure how to convert the\
    \ list of numbers back to a string.\nI'm not sure how to make this work. I'm not\
    \ sure how to convert the string to a list of numbers. I'm not sure how to sort\
    \ the list of numbers. I'm not sure how to convert the list of numbers back to\
    \ a string.\nI'm", "  (define (number->int number)\n    (cond\n      [(equal?\
    \ number \"zero\") 0]\n      [(equal? number \"one\") 1]\n      [(equal? number\
    \ \"two\") 2]\n      [(equal? number \"three\") 3]\n      [(equal? number \"four\"\
    ) 4]\n      [(equal? number \"five\") 5]\n      [(equal? number \"six\") 6]\n\
    \      [(equal? number \"seven\") 7]\n      [(equal? number \"eight\") 8]\n  \
    \    [(equal? number \"nine\") 9]))\n  (define (int->number number)\n    (cond\n\
    \      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n     \
    \ [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal?\
    \ number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number\
    \ 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"\
    eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (define (sort-numbers-helper-helper numbers)\n      (cond\n  \
    \      [(empty? numbers) empty]\n        [(empty? (rest numbers)) (list (first\
    \ numbers))]\n        [else (cons (first numbers) (sort-numbers-helper-helper\
    \ (rest numbers)))]))\n    (define (sort-numbers-helper-helper-helper numbers)\n\
    \      (cond\n        [(empty? numbers) empty]\n        [(empty? (rest numbers))\
    \ (list (first numbers))]\n        [(< (number->int (first numbers)) (number->int\
    \ (first (rest numbers))))\n         (cons (first numbers) (sort-numbers-helper-helper-helper\
    \ (rest numbers)))]\n        [else (cons (first (rest numbers)) (sort-numbers-helper-helper-helper\
    \ (cons (first numbers) (rest (rest numbers)))))]))\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(empty? (rest numbers)) (list (first numbers))]\n  \
    \    [else (sort-n", "  (sort (string-&gt;list numbers)\n        string&lt;?))\n\
    </code>\nI'm not sure if I should be using <code>string-&gt;list</code> or <code>string-split</code>\
    \ or something else. I'm also not sure if I should be using <code>string&lt;?</code>\
    \ or <code>string-ci&lt;?</code> or something else.\nI'm not sure how to test\
    \ this function, but I'm guessing it should return <code>\"zero one two three\
    \ four five six seven eight nine\"</code> when given <code>\"nine eight seven\
    \ six five four three two one zero\"</code>.\n\n\nA:\n\n<code>string-split</code>\
    \ is the right tool for the job, but you need to use it with a regexp that matches\
    \ a single space.\n<code>(define (sort-numbers numbers)\n  (sort (string-split\
    \ numbers #rx\" \")\n        string&lt;?))\n</code>\n", "  (define (string-&gt;number\
    \ str)\n    (cond\n      [(string=? str \"zero\") 0]\n      [(string=? str \"\
    one\") 1]\n      [(string=? str \"two\") 2]\n      [(string=? str \"three\") 3]\n\
    \      [(string=? str \"four\") 4]\n      [(string=? str \"five\") 5]\n      [(string=?\
    \ str \"six\") 6]\n      [(string=? str \"seven\") 7]\n      [(string=? str \"\
    eight\") 8]\n      [(string=? str \"nine\") 9]))\n  (define (number-&gt;string\
    \ num)\n    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n   \
    \   [(= num 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"\
    ]\n      [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"\
    seven\"]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define\
    \ (sort-numbers-helper lst)\n    (cond\n      [(null? lst) '()]\n      [else (append\
    \ (sort-numbers-helper (filter (lambda (x) (&lt; x (car lst))) (cdr lst)))\n \
    \                   (list (car lst))\n                    (sort-numbers-helper\
    \ (filter (lambda (x) (&gt;= x (car lst))) (cdr lst))))]))\n  (string-join (map\
    \ number-&gt;string (sort-numbers-helper (map string-&gt;number (string-split\
    \ numbers)))) \" \"))\n</code>\n", "  (sort (string-&gt;list numbers) string&lt;?))\n\
    </code>\n", "  (string-join (sort (string-split numbers #\\space)\n          \
    \           (lambda (x y)\n                       (< (number-&gt;string (string-&gt;number\
    \ x))\n                          (number-&gt;string (string-&gt;number y)))))\n\
    \               #\\space))\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(equal? numeral 'zero) 0]\n      [(equal? numeral 'one) 1]\n      [(equal?\
    \ numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n      [(equal? numeral\
    \ 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n\
    \      [(equal? numeral 'seven) 7]\n      [(equal? numeral 'eight) 8]\n      [(equal?\
    \ numeral 'nine) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n    \
    \  [(equal? number 0) 'zero]\n      [(equal? number 1) 'one]\n      [(equal? number\
    \ 2) 'two]\n      [(equal? number 3) 'three]\n      [(equal? number 4) 'four]\n\
    \      [(equal? number 5) 'five]\n      [(equal? number 6) 'six]\n      [(equal?\
    \ number 7) 'seven]\n      [(equal? number 8) 'eight]\n      [(equal? number 9)\
    \ 'nine]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else\n       (let* ([numbers-as-numbers (map numeral-&gt;number\
    \ numbers)]\n              [sorted-numbers-as-numbers (sort &lt; numbers-as-numbers)]\n\
    \              [sorted-numbers (map number-&gt;numeral sorted-numbers-as-numbers)])\n\
    \         sorted-numbers)]))\n  (string-join (sort-numbers-helper numbers) \"\
    \ \"))\n</code>\n", "  (sort (string-&gt;list numbers)\n        (lambda (a b)\n\
    \          (cond\n            [(string=? a \"zero\") #t]\n            [(string=?\
    \ a \"one\") (string=? b \"zero\")]\n            [(string=? a \"two\") (or (string=?\
    \ b \"zero\") (string=? b \"one\"))]\n            [(string=? a \"three\") (or\
    \ (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\"))]\n        \
    \    [(string=? a \"four\") (or (string=? b \"zero\") (string=? b \"one\") (string=?\
    \ b \"two\") (string=? b \"three\"))]\n            [(string=? a \"five\") (or\
    \ (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\") (string=? b\
    \ \"three\") (string=? b \"four\"))]\n            [(string=? a \"six\") (or (string=?\
    \ b \"zero\") (string=? b \"one\") (string=? b \"two\") (string=? b \"three\"\
    ) (string=? b \"four\") (string=? b \"five\"))]\n            [(string=? a \"seven\"\
    ) (or (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\") (string=?\
    \ b \"three\") (string=? b \"four\") (string=? b \"five\") (string=? b \"six\"\
    ))]\n            [(string=? a \"eight\") (or (string=? b \"zero\") (string=? b\
    \ \"one\") (string=? b \"two\") (string=? b \"three\") (string=? b \"four\") (string=?\
    \ b \"five\") (string=? b \"six\") (string=? b \"seven\"))]\n            [(string=?\
    \ a \"nine\") (or (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\"\
    ) (string=? b \"three\") (string=? b \"four\") (string=? b \"five\") (string=?\
    \ b \"six\") (string=? b \"seven\") (string=? b \"eight\"))", "  (sort (string-&gt;list\
    \ numbers) (lambda (a b) (string&lt;? a b))))\n</code>\nI'm not sure how to go\
    \ about this. I'm not sure if I should use <code>string-&gt;list</code> or <code>string-split</code>.\
    \ I'm also not sure how to go about sorting the list.\n\n\nA:\n\nYou can use <code>string-split</code>\
    \ to split the string into a list of words, then <code>sort</code> the list of\
    \ words.\n<code>(define (sort-numbers numbers)\n  (sort (string-split numbers)\
    \ string&lt;?))\n</code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons number empty)]\n           [(&lt; number (car numbers)) (cons number numbers)]\n\
    \           [else (cons (car numbers) (insert-number number (cdr numbers)))]))\n\
    \       (insert-number (numeral-&gt;number (car numbers)) (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n    \
    \  [(empty? numbers) \"\"]\n      [else (string-append (number-&gt;numeral (car\
    \ numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n  (numbers-&gt;string\
    \ (sort-numbers-helper numbers)))\n</code>\n", "  (define (number-to-numeral numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (numeral-to-number number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (car numbers)\n             (sort-numbers-helper (cdr numbers)))]))\n  (string-join\
    \ (map numeral-to-number (sort-numbers-helper (map number-to-numeral (string-split\
    \ numbers #\\space)))) \" \"))\n", "  (string-join (sort (string-split numbers\
    \ #\\space)\n                     (lambda (a b) (< (number-of a) (number-of b))))\n\
    \               #\\space))\n", "  (sort (string-&gt;list numbers) string&lt;?))\n\
    </code>\n", "  (define (number-to-numberal number)\n    (cond [(= number 0) \"\
    zero\"]\n          [(= number 1) \"one\"]\n          [(= number 2) \"two\"]\n\
    \          [(= number 3) \"three\"]\n          [(= number 4) \"four\"]\n     \
    \     [(= number 5) \"five\"]\n          [(= number 6) \"six\"]\n          [(=\
    \ number 7) \"seven\"]\n          [(= number 8) \"eight\"]\n          [(= number\
    \ 9) \"nine\"]))\n  (define (numberal-to-number numberal)\n    (cond [(\"zero\"\
    \ = numberal) 0]\n          [(\"one\" = numberal) 1]\n          [(\"two\" = numberal)\
    \ 2]\n          [(\"three\" = numberal) 3]\n          [(\"four\" = numberal) 4]\n\
    \          [(\"five\" = numberal) 5]\n          [(\"six\" = numberal) 6]\n   \
    \       [(\"seven\" = numberal) 7]\n          [(\"eight\" = numberal) 8]\n   \
    \       [(\"nine\" = numberal) 9]))\n  (define (sort-numberals numberals)\n  \
    \  (define (sort-numberals-helper numberals sorted-numberals)\n      (if (null?\
    \ numberals)\n          sorted-numberals\n          (let ([smallest-numberal (apply\
    \ min (map numberal-to-number numberals))])\n            (sort-numberals-helper\
    \ (remove (number-to-numberal smallest-numberal) numberals)\n                \
    \                   (append sorted-numberals (list (number-to-numberal smallest-numberal)))))))\n\
    \    (sort-numberals-helper numberals '()))\n  (string-join (sort-numberals (string-split\
    \ numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number numeral)\n   \
    \ (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\"\
    ) 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numbers-&gt;numerals\
    \ numbers)\n    (map number-&gt;numeral numbers))\n  (define (numerals-&gt;numbers\
    \ numerals)\n    (map numeral-&gt;number numerals))\n  (define (sort-numerals\
    \ numerals)\n    (sort &lt; numerals))\n  (define (sort-numbers numbers)\n   \
    \ (sort-numerals (numbers-&gt;numerals numbers)))\n  (define (sort-numerals numerals)\n\
    \    (sort &lt; numerals))\n  (define (sort-numbers numbers)\n    (sort-numerals\
    \ (numbers-&gt;numerals numbers)))\n  (define (sort-numerals numerals)\n    (sort\
    \ &lt; numerals))\n  (define (sort-numbers numbers)\n    (sort-numerals (numbers-&gt;numerals\
    \ numbers)))\n  (define (sort-numerals numerals)\n    (sort &lt; numer", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n\
    \      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal?\
    \ numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal? numeral\
    \ 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n\
    \      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define\
    \ (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n  \
    \    [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers) '()]\n    \
    \  [else\n       (let* ([numbers-as-numbers (map numeral-&gt;number numbers)]\n\
    \              [sorted-numbers-as-numbers (sort numbers-as-numbers &lt;)]\n  \
    \            [sorted-numbers (map number-&gt;numeral sorted-numbers-as-numbers)])\n\
    \         sorted-numbers)]))\n  (string-join (sort-numbers-helper numbers) \"\
    \ \"))\n</code>\n", "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\n\
    The test cases are:\n<code>(check-expect (sort_numbers \"nine eight seven six\
    \ five four three two one zero\") \"zero one two three four five six seven eight\
    \ nine\")", "  (string-join (sort (string-split numbers) string<?)))\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"zero\")\
    \ 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (cons (number-&gt;numeral (apply min (map numeral-&gt;number\
    \ numbers)))\n              (sort-numbers-helper (remove (number-&gt;numeral (apply\
    \ min (map numeral-&gt;number numbers))) numbers)))))\n  (apply string-append\
    \ (sort-numbers-helper (string-split numbers))))\n</code>\nI'm not sure if this\
    \ is the best way to do it, but it works.\n\n\nA:\n\nI would use a <code>cond</code>\
    \ to convert the string to a number, and then use <code>sort</code> to sort the\
    \ list of numbers.\n<code>(define (numeral-&gt;number numeral)\n  (cond\n    [(string=?\
    \ numeral \"zero\") 0]\n    [(string=? numeral \"one\") 1]\n    [(string=? numeral\
    \ \"two\") 2]\n    [(string=? numeral", "  (define (numeral-&gt;number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (car numbers)\n             (sort-numbers-helper (cdr numbers)))]))\n  (define\
    \ (sort-numbers-helper2 numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (cons (number-&gt;numeral (car numbers))\n             (sort-numbers-helper2\
    \ (cdr numbers)))]))\n  (sort-numbers-helper2 (sort-numbers-helper (map numeral-&gt;number\
    \ (string-&gt;list numbers)))))\n</code>\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numeral-list->number-list\
    \ numeral-list)\n    (map numeral->number numeral-list))\n  (define (number-list->numeral-list\
    \ number-list)\n    (map number->numeral number-list))\n  (define (sort-numeral-list\
    \ numeral-list)\n    (number-list->numeral-list (sort (numeral-list->number-list\
    \ numeral-list) <)))\n  (sort-numeral-list (string-split numbers #\\space)))\n",
  "  (define (numeral->number numeral)\n    (cond\n      [(equal? numeral \"zero\"\
    ) 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n\
    \      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n \
    \     [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n    \
    \  [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n    \
    \  [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n\
    \      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n     \
    \ [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal?\
    \ number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number\
    \ 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"\
    eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (let*\
    \ ([first (first numbers)]\n              [rest (rest numbers)]\n            \
    \  [sorted-rest (sort-numbers-helper rest)]\n              [sorted-first (sort-numbers-helper\
    \ (cons first empty))])\n         (cond\n           [(empty? sorted-rest) sorted-first]\n\
    \           [(< (numeral->number first) (numeral->number (first sorted-rest)))\n\
    \            (cons first sorted-rest)]\n           [else\n            (cons (first\
    \ sorted-rest) (sort-numbers-helper (cons first (rest sorted-rest))))]))]))\n\
    \  (define (sort-numbers-helper-2 numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let* ([first (first numbers)]\n              [rest\
    \ (rest numbers)]\n              [sorted-rest (sort-numbers-helper-2 rest)]\n\
    \              [sorted-first", "  (define (numeral-&gt;num numeral)\n    (cond\n\
    \      [(equal? numeral \"zero\") 0]\n      [(equal? numeral \"one\") 1]\n   \
    \   [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\") 3]\n     \
    \ [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n      [(equal?\
    \ numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n      [(equal? numeral\
    \ \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n  (define (num-&gt;numeral\
    \ num)\n    (cond\n      [(equal? num 0) \"zero\"]\n      [(equal? num 1) \"one\"\
    ]\n      [(equal? num 2) \"two\"]\n      [(equal? num 3) \"three\"]\n      [(equal?\
    \ num 4) \"four\"]\n      [(equal? num 5) \"five\"]\n      [(equal? num 6) \"\
    six\"]\n      [(equal? num 7) \"seven\"]\n      [(equal? num 8) \"eight\"]\n \
    \     [(equal? num 9) \"nine\"]))\n  (define (sort-nums nums)\n    (cond\n   \
    \   [(empty? nums) empty]\n      [else (cons (first nums) (sort-nums (rest nums)))]))\n\
    \  (define (sort-numeral-nums nums)\n    (map num-&gt;numeral (sort-nums (map\
    \ numeral-&gt;num nums))))\n  (string-join (sort-numeral-nums (string-split numbers\
    \ #\\space))))\n</code>\nI'm not sure if this is the best way to do this, but\
    \ it works.\n", "  (sort (string-&gt;list numbers)\n        (lambda (a b)\n  \
    \        (string&lt;? (number-&gt;string a) (number-&gt;string b)))))\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond ((equal? numeral 'zero) 0)\n       \
    \   ((equal? numeral 'one) 1)\n          ((equal? numeral 'two) 2)\n         \
    \ ((equal? numeral 'three) 3)\n          ((equal? numeral 'four) 4)\n        \
    \  ((equal? numeral 'five) 5)\n          ((equal? numeral 'six) 6)\n         \
    \ ((equal? numeral 'seven) 7)\n          ((equal? numeral 'eight) 8)\n       \
    \   ((equal? numeral 'nine) 9)))\n  (define (number-&gt;numeral number)\n    (cond\
    \ ((equal? number 0) 'zero)\n          ((equal? number 1) 'one)\n          ((equal?\
    \ number 2) 'two)\n          ((equal? number 3) 'three)\n          ((equal? number\
    \ 4) 'four)\n          ((equal? number 5) 'five)\n          ((equal? number 6)\
    \ 'six)\n          ((equal? number 7) 'seven)\n          ((equal? number 8) 'eight)\n\
    \          ((equal? number 9) 'nine)))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond ((null? numbers) '())\n          ((null? (cdr numbers)) numbers)\n\
    \          (else (let* ((first (car numbers))\n                       (second\
    \ (cadr numbers))\n                       (rest (cddr numbers)))\n           \
    \       (if (&lt; (numeral-&gt;number first) (numeral-&gt;number second))\n  \
    \                    (cons first (sort-numbers-helper (cons second rest)))\n \
    \                     (cons second (sort-numbers-helper (cons first rest))))))))\n\
    \  (define (numeral-list-&gt;string numeral-list)\n    (cond ((null? numeral-list)\
    \ \"\")\n          ((null? (cdr numeral-list)) (symbol-&gt;string (car numeral-list)))\n\
    \          (else (string-append (symbol-&gt;string (car numeral-list)) \" \" (numeral-list-&gt;string\
    \ (cdr numeral-list))))))\n  (numeral-list-&gt;", "  (sort (string-&gt;list numbers)\n\
    \        (lambda (x y)\n          (string&lt;? (number-&gt;string x) (number-&gt;string\
    \ y)))))\n", "  (string-join (sort (string-split numbers #\\space) string<?)))\n",
  "  (define (numeral->number numeral)\n    (cond\n      [(string=? numeral \"zero\"\
    ) 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (let ([sorted-numbers (sort-numbers-helper\
    \ (rest numbers))])\n         (cons (first numbers) sorted-numbers))]))\n  (define\
    \ (sort-numbers-helper2 numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (let ([sorted-numbers (sort-numbers-helper2 (rest numbers))])\n\
    \         (cons (numeral->number (first numbers)) sorted-numbers))]))\n  (define\
    \ (sort-numbers-helper3 numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (let ([sorted-numbers (sort-numbers-helper3 (rest numbers))])\n\
    \         (cons (number->numeral (first numbers)) sorted-numbers))]))\n  (define\
    \ (sort-numbers-helper4 numbers)\n    (cond\n      [(empty? numbers) empty]",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero)\
    \ 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n     \
    \ [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal?\
    \ numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven)\
    \ 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n\
    \      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (define (insert-numeral numeral numbers)\n         (cond\n\
    \           [(empty? numbers) (cons numeral empty)]\n           [(&lt; numeral\
    \ (car numbers)) (cons numeral numbers)]\n           [else (cons (car numbers)\
    \ (insert-numeral numeral (cdr numbers)))]))\n       (insert-numeral (car numbers)\
    \ (sort-numbers-helper (cdr numbers)))]))\n  (define (numeral-list-&gt;string\
    \ numeral-list)\n    (cond\n      [(empty? numeral-list) \"\"]\n      [else (string-append\
    \ (symbol-&gt;string (car numeral-list)) \" \" (numeral-list-&gt;string (cdr numeral-list)))]))\n\
    \  (numeral-list-&gt;string (sort-numbers-helper (map numeral-&gt;number (string-&gt",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero)\
    \ 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n     \
    \ [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal?\
    \ numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven)\
    \ 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n\
    \      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (if (null? numbers)\n        '()\n      \
    \  (cons (number-&gt;numeral (apply min (map numeral-&gt;number numbers)))\n \
    \             (sort-numbers-helper (remove (number-&gt;numeral (apply min (map\
    \ numeral-&gt;number numbers))) numbers)))))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n</code>\nI'm not sure if this is the\
    \ most efficient way to do it, but it works.\n\n\nA:\n\nI think you can simplify\
    \ the code a lot by using <code>symbol-&gt;string</code> and <code>string-&gt;symbol</code>\
    \ to convert between the number words and their numeric values.\n<code>(define\
    \ (sort-numbers numbers)\n  (define (numeral-&gt;number numeral)\n    (string-&gt;number\
    \ (symbol-&gt;string numeral)))\n", "  (string-join (sort (string-split numbers\
    \ #\\space)\n                     (lambda (a b)\n                       (< (number-of-a\
    \ a) (number-of-a b))))\n               #\\space))\n", "  (define (convert-to-number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (convert-to-numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (define (insert-number number numbers)\n       \
    \  (cond\n           [(empty? numbers) (cons number empty)]\n           [(< number\
    \ (car numbers)) (cons number numbers)]\n           [else (cons (car numbers)\
    \ (insert-number number (cdr numbers)))]))\n       (insert-number (car numbers)\
    \ (sort-numbers-helper (cdr numbers)))]))\n  (define (convert-to-numerals numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else (cons (convert-to-numeral\
    \ (car numbers)) (convert-to-numerals (cdr numbers)))]))\n  (convert-to-numerals\
    \ (sort-numbers-helper (map convert-to-number (string-split numbers #\\space)))))\n",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero)\
    \ 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n     \
    \ [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal?\
    \ numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven)\
    \ 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n\
    \      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (define (insert-numeral numeral numbers)\n         (cond\n\
    \           [(empty? numbers) (cons numeral empty)]\n           [(&lt; (numeral-&gt;number\
    \ numeral) (numeral-&gt;number (first numbers)))\n            (cons numeral numbers)]\n\
    \           [else\n            (cons (first numbers) (insert-numeral numeral (rest\
    \ numbers)))])\n         )\n       (insert-numeral (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (define (numeral-list-&gt;string numeral-list)\n    (cond\n\
    \      [(empty? numeral-list) \"\"]\n      [else\n       (string-append (symbol-&gt;string\
    \ (first numeral-list)) \" \" (numeral-list-&gt;string (rest numeral-list)))]))\n\
    \  (define (string-&gt;numeral", "  (string-join (sort (string-split numbers #\\\
    space)\n                     (lambda (a b)\n                       (string<? a\
    \ b)))\n               #\\space))\n", "  (define (numeral->number numeral)\n \
    \   (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (if (null? numbers)\n        '()\n        (cons (number->numeral\
    \ (apply min (map numeral->number numbers)))\n              (sort-numbers-helper\
    \ (remove (number->numeral (apply min (map numeral->number numbers))) numbers)))))\n\
    \  (apply string-append (sort-numbers-helper (string-split numbers))))\n", " \
    \ (define (numeral->number numeral)\n    (cond\n      [(equal? numeral \"zero\"\
    ) 0]\n      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n\
    \      [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n \
    \     [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n    \
    \  [(equal? numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n    \
    \  [(equal? numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n\
    \      [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n     \
    \ [(equal? number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal?\
    \ number 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number\
    \ 6) \"six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"\
    eight\"]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-numeral numeral numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons numeral empty)]\n           [(< numeral (first numbers)) (cons numeral\
    \ numbers)]\n           [else (cons (first numbers) (insert-numeral numeral (rest\
    \ numbers)))])\n         )\n       (insert-numeral (first numbers) (sort-numbers-helper\
    \ (rest numbers)))]))\n  (define (numbers->string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else (string-append (first numbers) \" \" (numbers->string\
    \ (rest numbers)))]))\n  (numbers->string (sort-numbers-helper (map numeral->number\
    \ (string-split numbers #\\space)))))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral \"one\"\
    ) 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\") 3]\n\
    \      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n  \
    \    [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n    \
    \  [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n  (define\
    \ (number->numeral number)\n    (cond\n      [(equal? number 0) \"zero\"]\n  \
    \    [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n      [(equal?\
    \ number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal? number\
    \ 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number 7) \"\
    seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9) \"nine\"\
    ]))\n  (define (numbers->numerals numbers)\n    (map number->numeral numbers))\n\
    \  (define (numerals->numbers numerals)\n    (map numeral->number numerals))\n\
    \  (define (sort-numbers-helper numbers)\n    (sort < numbers))\n  (define (join-numbers\
    \ numbers)\n    (string-join numbers \" \"))\n  (join-numbers (numbers->numerals\
    \ (sort-numbers-helper (numerals->numbers (string-split numbers #\\space))))))\n",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"\
    zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"\
    two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"\
    four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"\
    six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"\
    eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-numeral numeral numbers)\n\
    \         (cond\n           [(empty? numbers) (cons numeral empty)]\n        \
    \   [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number (first numbers)))\n\
    \            (cons numeral numbers)]\n           [else\n            (cons (first\
    \ numbers) (insert-numeral numeral (rest numbers)))])\n         )\n       (insert-numeral\
    \ (first numbers) (sort-numbers-helper (rest numbers)))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else\n       (string-append\
    \ (first numbers) \" \" (numbers-&gt;string (rest numbers)))]))\n  (numbers-&gt;string\
    \ (sort-numbers-helper (map numeral-&gt;number (string-split numbers #\\space))",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero)\
    \ 0]\n      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n     \
    \ [(equal? numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal?\
    \ numeral 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven)\
    \ 7]\n      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n\
    \      [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (let* ([numbers (sort numbers &lt;)]\n              [smallest\
    \ (first numbers)]\n              [rest (rest numbers)])\n         (cons smallest\
    \ (sort-numbers-helper rest)))]))\n  (string-join (map number-&gt;numeral (sort-numbers-helper\
    \ (map numeral-&gt;number (string-split numbers)))) \" \"))\n</code>\n", "  (define\
    \ (numeral->number numeral)\n    (cond\n      [(equal? numeral \"zero\") 0]\n\
    \      [(equal? numeral \"one\") 1]\n      [(equal? numeral \"two\") 2]\n    \
    \  [(equal? numeral \"three\") 3]\n      [(equal? numeral \"four\") 4]\n     \
    \ [(equal? numeral \"five\") 5]\n      [(equal? numeral \"six\") 6]\n      [(equal?\
    \ numeral \"seven\") 7]\n      [(equal? numeral \"eight\") 8]\n      [(equal?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(equal? number 0) \"zero\"]\n      [(equal? number 1) \"one\"]\n      [(equal?\
    \ number 2) \"two\"]\n      [(equal? number 3) \"three\"]\n      [(equal? number\
    \ 4) \"four\"]\n      [(equal? number 5) \"five\"]\n      [(equal? number 6) \"\
    six\"]\n      [(equal? number 7) \"seven\"]\n      [(equal? number 8) \"eight\"\
    ]\n      [(equal? number 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons (number->numeral\
    \ (car (sort (map numeral->number numbers) <)))\n             (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (string-join (sort-numbers-helper (string-split numbers\
    \ #\\space)) \" \"))\n", "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\n",
  "  (sort (string-&gt;list numbers)\n        (lambda (x y)\n          (string&lt;?\
    \ (number-&gt;string x) (number-&gt;string y)))))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (numbers-&gt;numerals\
    \ numbers)\n    (map number-&gt;numeral numbers))\n  (define (numerals-&gt;numbers\
    \ numerals)\n    (map numeral-&gt;number numerals))\n  (define (sort-numerals\
    \ numerals)\n    (sort &lt; numerals))\n  (define (sort-numbers numbers)\n   \
    \ (sort-numerals (numbers-&gt;numerals numbers)))\n  (define (sort-numerals numerals)\n\
    \    (sort &lt; numerals))\n  (define (sort-numbers numbers)\n    (sort-numerals\
    \ (numbers-&gt;numerals numbers)))\n  (define (sort-numerals numerals)\n    (sort\
    \ &lt; numerals))\n  (define (sort-numbers numbers)\n    (sort-numerals (numbers-&gt;numerals\
    \ numbers)))\n  (define (sort-numerals numerals)\n    (sort &lt; numer", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n\
    \      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal?\
    \ numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal? numeral\
    \ 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n\
    \      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define\
    \ (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n  \
    \    [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (numeral-&gt;string numeral)\n    (cond\n      [(equal? numeral 'zero) \"zero\"\
    ]\n      [(equal? numeral 'one) \"one\"]\n      [(equal? numeral 'two) \"two\"\
    ]\n      [(equal? numeral 'three) \"three\"]\n      [(equal? numeral 'four) \"\
    four\"]\n      [(equal? numeral 'five) \"five\"]\n      [(equal? numeral 'six)\
    \ \"six\"]\n      [(equal? numeral 'seven) \"seven\"]\n      [(equal? numeral\
    \ 'eight) \"eight\"]\n      [(equal? numeral 'nine) \"nine\"]))\n  (define (string-&gt;numeral\
    \ string)\n    (cond\n      [(equal? string \"zero\") 'zero]\n      [(equal? string\
    \ \"one\") 'one]\n      [(equal? string \"two\") 'two]\n      [(equal? string\
    \ \"three\") 'three]\n      [(equal? string \"four\") 'four]\n      [(equal? string\
    \ \"five\") 'five]\n      [(", "  (define (numerals-&gt;numbers numerals)\n  \
    \  (map (lambda (numeral)\n           (cond\n             [(equal? numeral 'zero)\
    \ 0]\n             [(equal? numeral 'one) 1]\n             [(equal? numeral 'two)\
    \ 2]\n             [(equal? numeral 'three) 3]\n             [(equal? numeral\
    \ 'four) 4]\n             [(equal? numeral 'five) 5]\n             [(equal? numeral\
    \ 'six) 6]\n             [(equal? numeral 'seven) 7]\n             [(equal? numeral\
    \ 'eight) 8]\n             [(equal? numeral 'nine) 9]))\n         numerals))\n\
    \  (define (numbers-&gt;numerals numbers)\n    (map (lambda (number)\n       \
    \    (cond\n             [(equal? number 0) 'zero]\n             [(equal? number\
    \ 1) 'one]\n             [(equal? number 2) 'two]\n             [(equal? number\
    \ 3) 'three]\n             [(equal? number 4) 'four]\n             [(equal? number\
    \ 5) 'five]\n             [(equal? number 6) 'six]\n             [(equal? number\
    \ 7) 'seven]\n             [(equal? number 8) 'eight]\n             [(equal? number\
    \ 9) 'nine]))\n         numbers))\n  (string-join (numbers-&gt;numerals (sort\
    \ (numerals-&gt;numbers (string-&gt;list numbers)))) \" \"))\n</code>\nI'm not\
    \ sure if this is the best way to do it, but it works.\n", "  (sort (string-&gt;list\
    \ numbers)\n        (lambda (a b)\n          (cond\n            [(string=? a \"\
    zero\") #t]\n            [(string=? a \"one\") (string=? b \"zero\")]\n      \
    \      [(string=? a \"two\") (or (string=? b \"zero\") (string=? b \"one\"))]\n\
    \            [(string=? a \"three\") (or (string=? b \"zero\") (string=? b \"\
    one\") (string=? b \"two\"))]\n            [(string=? a \"four\") (or (string=?\
    \ b \"zero\") (string=? b \"one\") (string=? b \"two\") (string=? b \"three\"\
    ))]\n            [(string=? a \"five\") (or (string=? b \"zero\") (string=? b\
    \ \"one\") (string=? b \"two\") (string=? b \"three\") (string=? b \"four\"))]\n\
    \            [(string=? a \"six\") (or (string=? b \"zero\") (string=? b \"one\"\
    ) (string=? b \"two\") (string=? b \"three\") (string=? b \"four\") (string=?\
    \ b \"five\"))]\n            [(string=? a \"seven\") (or (string=? b \"zero\"\
    ) (string=? b \"one\") (string=? b \"two\") (string=? b \"three\") (string=? b\
    \ \"four\") (string=? b \"five\") (string=? b \"six\"))]\n            [(string=?\
    \ a \"eight\") (or (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\"\
    ) (string=? b \"three\") (string=? b \"four\") (string=? b \"five\") (string=?\
    \ b \"six\") (string=? b \"seven\"))]\n            [(string=? a \"nine\") (or\
    \ (string=? b \"zero\") (string=? b \"one\") (string=? b \"two\") (string=? b\
    \ \"three\") (string=? b \"four\") (string=? b \"five\") (string=? b \"six\")\
    \ (string=? b \"seven\") (string=? b \"eight\"))", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (if (null? numbers)\n        '()\n        (cons (number-&gt;numeral (apply\
    \ min (map numeral-&gt;number numbers)))\n              (sort-numbers-helper (remove\
    \ (number-&gt;numeral (apply min (map numeral-&gt;number numbers))) numbers)))))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n\
    </code>\n", "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\n", "  (string-join\
    \ (sort (string-split numbers #\\space)\n                     (lambda (a b)\n\
    \                       (< (string->number a) (string->number b))))\n        \
    \       #\\space))\n", "  (define (number-to-int num)\n    (cond\n      [(equal?\
    \ num \"zero\") 0]\n      [(equal? num \"one\") 1]\n      [(equal? num \"two\"\
    ) 2]\n      [(equal? num \"three\") 3]\n      [(equal? num \"four\") 4]\n    \
    \  [(equal? num \"five\") 5]\n      [(equal? num \"six\") 6]\n      [(equal? num\
    \ \"seven\") 7]\n      [(equal? num \"eight\") 8]\n      [(equal? num \"nine\"\
    ) 9]))\n  (define (int-to-number num)\n    (cond\n      [(= num 0) \"zero\"]\n\
    \      [(= num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(= num 3) \"three\"\
    ]\n      [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n      [(= num 6) \"\
    six\"]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"]\n      [(= num\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper nums)\n    (cond\n      [(null?\
    \ nums) '()]\n      [else (append (sort-numbers-helper (filter (lambda (x) (<\
    \ x (car nums))) (cdr nums)))\n                    (list (car nums)))]))\n  (string-join\
    \ (map int-to-number (sort-numbers-helper (map number-to-int (string-split numbers\
    \ #\\space)))) \" \"))\n", "  (define (number-to-int num)\n    (cond\n      [(string=?\
    \ num \"zero\") 0]\n      [(string=? num \"one\") 1]\n      [(string=? num \"\
    two\") 2]\n      [(string=? num \"three\") 3]\n      [(string=? num \"four\")\
    \ 4]\n      [(string=? num \"five\") 5]\n      [(string=? num \"six\") 6]\n  \
    \    [(string=? num \"seven\") 7]\n      [(string=? num \"eight\") 8]\n      [(string=?\
    \ num \"nine\") 9]))\n  (define (int-to-number num)\n    (cond\n      [(= num\
    \ 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(=\
    \ num 3) \"three\"]\n      [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n\
    \      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"\
    ]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper nums)\n    (cond\n\
    \      [(empty? nums) empty]\n      [else (cons (int-to-number (car (sort (map\
    \ number-to-int nums) <)))\n                  (sort-numbers-helper (cdr nums)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (number->string (string->number a))\n     \
    \                     (number->string (string->number b)))))\n               #\\\
    space))\n", "  (string-join (sort (string-split numbers) string<?)))\n", "  (sort\
    \ (string-&gt;list numbers) string&lt;?))\n</code>\n", "  (sort (string-&gt;list\
    \ numbers) (lambda (a b) (string&lt;? a b))))\n</code>\n", "  (string-join (sort\
    \ (string-split numbers #\\space) string<?)))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (if (null? numbers)\n        '()\n        (cons (number-&gt;numeral (apply\
    \ min (map numeral-&gt;number numbers)))\n              (sort-numbers-helper (remove\
    \ (number-&gt;numeral (apply min (map numeral-&gt;number numbers))) numbers)))))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n\
    </code>\nI'm not sure if I'm doing this in a very inefficient way, but I'm not\
    \ sure how to improve it.\n\n\nA:\n\nI think you're overcomplicating things. You\
    \ can use <code>string-&gt;list</code> to split the string into a list of characters,\
    \ then use <code>sort</code> to sort the characters, and finally <code>list-&gt;string</code>\
    \ to convert the list back to a string.\n<code>(define (sort-numbers numbers)\n\
    \  (list-&gt;", "  (define (numeral-&gt;num numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (num-&gt;numeral\
    \ num)\n    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n   \
    \   [(= num 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"\
    ]\n      [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"\
    seven\"]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n \
    \     [else\n       (let ([min-num (apply min (map numeral-&gt;num numbers))])\n\
    \         (cons (num-&gt;numeral min-num)\n               (sort-numbers-helper\
    \ (remove (num-&gt;numeral min-num) numbers))))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n</code>\n", "  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (let ([sorted-numbers (sort-numbers-helper (rest numbers))])\n\
    \         (cons (numeral->number (first numbers)) sorted-numbers))]))\n  (define\
    \ (sort-numbers-helper2 numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (let ([sorted-numbers (sort-numbers-helper2 (rest numbers))])\n\
    \         (cons (number->numeral (first numbers)) sorted-numbers))]))\n  (sort-numbers-helper2\
    \ (sort-numbers-helper (string-split numbers))))\n", "  (sort (string-&gt;list\
    \ numbers)\n        (lambda (a b)\n          (string&lt;? (number-&gt;string a)\
    \ (number-&gt;string b)))))\n", "  (define (number-to-int number)\n    (cond\n\
    \      [(string=? number \"zero\") 0]\n      [(string=? number \"one\") 1]\n \
    \     [(string=? number \"two\") 2]\n      [(string=? number \"three\") 3]\n \
    \     [(string=? number \"four\") 4]\n      [(string=? number \"five\") 5]\n \
    \     [(string=? number \"six\") 6]\n      [(string=? number \"seven\") 7]\n \
    \     [(string=? number \"eight\") 8]\n      [(string=? number \"nine\") 9]))\n\
    \  (define (int-to-number number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (int-to-number\
    \ (apply min (map number-to-int numbers)))\n                  (sort-numbers-helper\
    \ (remove (int-to-number (apply min (map number-to-int numbers))) numbers)))]))\n\
    \  (apply string-append (sort-numbers-helper (string-split numbers #\\space))))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (string<? a b)))\n               #\\space))\n",
  "  (define (number-to-int number)\n    (cond\n      [(string=? number \"zero\")\
    \ 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n\
    \      [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n\
    \      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n \
    \     [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers)\
    \ '()]\n      [else (cons (int-to-number (apply min (map number-to-int numbers)))\n\
    \                  (sort-numbers-helper (remove (int-to-number (apply min (map\
    \ number-to-int numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n    (cond\n \
    \     [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number\
    \ 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n\
    \      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (define (insert-number number numbers)\n       \
    \  (cond\n           [(empty? numbers) (cons number empty)]\n           [(&lt;\
    \ number (car numbers)) (cons number numbers)]\n           [else (cons (car numbers)\
    \ (insert-number number (cdr numbers)))]))\n       (insert-number (numeral-&gt;number\
    \ (car numbers)) (sort-numbers-helper (cdr numbers)))]))\n  (define (numbers-&gt;string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else (string-append\
    \ (number-&gt;numeral (car numbers)) \" \" (numbers-&gt;string (cdr numbers)))]))\n\
    \  (numbers-&gt;string (sort-numbers-helper numbers)))\n</code>\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n\
    \      [(equal? numeral 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal?\
    \ numeral 'three) 3]\n      [(equal? numeral 'four) 4]\n      [(equal? numeral\
    \ 'five) 5]\n      [(equal? numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n\
    \      [(equal? numeral 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define\
    \ (number-&gt;numeral number)\n    (cond\n      [(equal? number 0) 'zero]\n  \
    \    [(equal? number 1) 'one]\n      [(equal? number 2) 'two]\n      [(equal?\
    \ number 3) 'three]\n      [(equal? number 4) 'four]\n      [(equal? number 5)\
    \ 'five]\n      [(equal? number 6) 'six]\n      [(equal? number 7) 'seven]\n \
    \     [(equal? number 8) 'eight]\n      [(equal? number 9) 'nine]))\n  (define\
    \ (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers) '()]\n    \
    \  [else\n       (let* ([numbers-as-numbers (map numeral-&gt;number numbers)]\n\
    \              [sorted-numbers (sort numbers-as-numbers &lt;)]\n             \
    \ [sorted-numerals (map number-&gt;numeral sorted-numbers)])\n         sorted-numerals)]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n\
    </code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else\n       (let ([first (car numbers)]\n           \
    \  [rest (cdr numbers)])\n         (append (sort-numbers-helper (filter (lambda\
    \ (x) (&lt; (numeral-&gt;number x) (numeral-&gt;number first))) rest))\n     \
    \            (list first)\n                 (sort-numbers-helper (filter (lambda\
    \ (x) (&gt;= (numeral-&gt;number x) (numeral-&gt;number first))) rest))))]))\n\
    \  (string-join (map number-&gt;numeral (sort-numbers-helper (string-split numbers\
    \ #\\space))) \" \"))\n</code>\n", "  (define (numeral-&gt;number numeral)\n \
    \   (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else\n       (let*\
    \ ([numeral (car numbers)]\n              [number (numeral-&gt;number numeral)]\n\
    \              [rest (sort-numbers-helper (cdr numbers))]\n              [rest-number\
    \ (numeral-&gt;number (car rest))])\n         (cond\n           [(&lt; number\
    \ rest-number) (cons numeral rest)]\n           [else (cons (car rest) (cons numeral\
    \ (cdr rest)))]))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n    \
    \  [(null? numbers) \"\"]\n      [else (string-append (car numbers) \" \" (numbers-&gt;string\
    \ (cdr numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper (string-split\
    \ numbers))))\n</code>\n", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (cons\
    \ (first numbers)\n             (sort-numbers-helper (rest numbers)))]))\n  (define\
    \ (sort-numbers-helper2 numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (cons (number-&gt;numeral (first numbers))\n            \
    \ (sort-numbers-helper2 (rest numbers)))]))\n  (sort-numbers-helper2 (sort-numbers-helper\
    \ (map numeral-&gt;number (string-&gt;list numbers)))))\n", "  (define (number-&gt;int\
    \ num)\n    (cond\n      [(string=? num \"zero\") 0]\n      [(string=? num \"\
    one\") 1]\n      [(string=? num \"two\") 2]\n      [(string=? num \"three\") 3]\n\
    \      [(string=? num \"four\") 4]\n      [(string=? num \"five\") 5]\n      [(string=?\
    \ num \"six\") 6]\n      [(string=? num \"seven\") 7]\n      [(string=? num \"\
    eight\") 8]\n      [(string=? num \"nine\") 9]))\n  (define (int-&gt;number num)\n\
    \    (cond\n      [(= num 0) \"zero\"]\n      [(= num 1) \"one\"]\n      [(= num\
    \ 2) \"two\"]\n      [(= num 3) \"three\"]\n      [(= num 4) \"four\"]\n     \
    \ [(= num 5) \"five\"]\n      [(= num 6) \"six\"]\n      [(= num 7) \"seven\"\
    ]\n      [(= num 8) \"eight\"]\n      [(= num 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (int-&gt;number\
    \ (apply min (map number-&gt;int numbers)))\n                  (sort-numbers-helper\
    \ (remove (int-&gt;number (apply min (map number-&gt;int numbers))) numbers)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n\
    </code>\n", "  (define (numeral->number numeral)\n    (cond\n      [(string=?\
    \ numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=?\
    \ numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=?\
    \ numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=?\
    \ numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=?\
    \ numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (let* ([numbers-as-numbers (map numeral->number numbers)]\n\
    \               [sorted-numbers-as-numbers (sort numbers-as-numbers <)]\n    \
    \           [sorted-numbers (map number->numeral sorted-numbers-as-numbers)])\n\
    \          sorted-numbers)))\n  (string-join (sort-numbers-helper (string-split\
    \ numbers #\\space)) \" \"))\n", "  (define (numeral-to-number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-to-numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (numeral-list-to-number-list\
    \ numeral-list)\n    (map numeral-to-number numeral-list))\n  (define (number-list-to-numeral-list\
    \ number-list)\n    (map number-to-numeral number-list))\n  (define (sort-numbers-helper\
    \ numbers)\n    (number-list-to-numeral-list (sort (numeral-list-to-number-list\
    \ numbers) <)))\n  (sort-numbers-helper (string-split numbers #\\space)))\n",
  "  (define (number-to-int num)\n    (cond\n      [(string=? num \"zero\") 0]\n \
    \     [(string=? num \"one\") 1]\n      [(string=? num \"two\") 2]\n      [(string=?\
    \ num \"three\") 3]\n      [(string=? num \"four\") 4]\n      [(string=? num \"\
    five\") 5]\n      [(string=? num \"six\") 6]\n      [(string=? num \"seven\")\
    \ 7]\n      [(string=? num \"eight\") 8]\n      [(string=? num \"nine\") 9]))\n\
    \  (define (int-to-number num)\n    (cond\n      [(= num 0) \"zero\"]\n      [(=\
    \ num 1) \"one\"]\n      [(= num 2) \"two\"]\n      [(= num 3) \"three\"]\n  \
    \    [(= num 4) \"four\"]\n      [(= num 5) \"five\"]\n      [(= num 6) \"six\"\
    ]\n      [(= num 7) \"seven\"]\n      [(= num 8) \"eight\"]\n      [(= num 9)\
    \ \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (sort-numbers-helper-2 numbers)\n\
    \         (cond\n           [(empty? numbers) empty]\n           [else\n     \
    \       (cons (car numbers) (sort-numbers-helper-2 (cdr numbers)))]))\n      \
    \ (cons (car numbers) (sort-numbers-helper (sort-numbers-helper-2 (cdr numbers))))]))\n\
    \  (define (sort-numbers-helper-3 numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (cons (int-to-number (car numbers)) (sort-numbers-helper-3\
    \ (cdr numbers)))]))\n  (sort-numbers-helper-3 (sort-numbers-helper (map number-to-int\
    \ (string-split numbers #\\space)))))\n</code>\nI'm not sure if this is the best\
    \ way to do this, but it works.\n", "  (sort (string-&gt;list numbers)\n     \
    \   (lambda (a b)\n          (string&lt;? (number-&gt;string a) (number-&gt;string\
    \ b)))))\n", "  (sort (string-&gt;list numbers) string&lt;?))\n</code>\nI'm not\
    \ sure how to get the string to be a list of numbers. I've tried <code>(string-&gt;number\
    \ numbers)</code> but that doesn't work.\n\n\nA:\n\nYou can use <code>string-split</code>\
    \ to split the string into a list of words, then <code>map</code> the list of\
    \ words to a list of numbers, then <code>sort</code> the list of numbers, then\
    \ <code>map</code> the list of numbers to a list of words, then <code>string-join</code>\
    \ the list of words into a string.\n<code>(define (sort-numbers numbers)\n  (string-join\n\
    \   (map number-&gt;string\n        (sort (map string-&gt;number\n           \
    \        (string-split numbers))\n              &lt;))))\n</code>\n", "  (sort\
    \ (string-&gt;list numbers) string&lt;?))\n</code>\nThis is the error I get:\n\
    <code>sort_numbers: expects argument of type &lt;string&gt;; given \"zero one\
    \ two three four five six seven eight nine\"\n</code>\nI'm not sure what I'm doing\
    \ wrong. I thought I was passing a string to the function.\n\n\nA:\n\nYou are\
    \ passing a string to the function, but the string contains spaces, so it's not\
    \ a valid argument. You need to split the string into a list of strings, and then\
    \ pass that list to the function.\n<code>(define (sort_numbers numbers)\n  (sort\
    \ (string-&gt;list numbers) string&lt;?))\n", "  (define (numeral-&gt;number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0)\
    \ \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n    \
    \  [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5)\
    \ \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n  \
    \    [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-numeral numeral numbers)\n         (cond\n           [(empty? numbers)\
    \ (cons numeral empty)]\n           [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else\n \
    \           (cons (first numbers) (insert-numeral numeral (rest numbers)))])\n\
    \         )\n       (insert-numeral (first numbers) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (numbers-&gt;string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else\n       (string-append (first numbers) \" \" (numbers-&gt;string\
    \ (rest numbers)))]))\n  (numbers-&gt;string (sort-numbers-helper (map numeral-&gt;number\
    \ (string-split numbers #\\space))", "  (let ([numbers (string-split numbers #\\\
    space)])\n    (string-join (sort (map number->numberal numbers) <) #\\space)))\n",
  "  (define (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"\
    zero\") 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"\
    two\") 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"\
    four\") 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"\
    six\") 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"\
    eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"\
    ]\n      [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number\
    \ 4) \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n\
    \      [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (numeral-&gt;numbers numeral)\n    (map numeral-&gt;number\
    \ (string-&gt;list numeral)))\n  (define (numbers-&gt;numeral numbers)\n    (list-&gt;string\
    \ (map number-&gt;numeral numbers)))\n  (numbers-&gt;numeral (sort &lt; (numeral-&gt;numbers\
    \ numbers))))\n</code>\nI'm not sure if this is the best way to do it, but it\
    \ works.\n\n\nA:\n\nI think you're overcomplicating things.\nYou can use <code>string-&gt;list</code>\
    \ to convert a string to a list of characters, and <code>list-&gt;string</code>\
    \ to convert a list of characters back to a string.\n<code>(list-&gt;string (sort\
    \ &lt; (string-&gt;list \"zero one two three four five six seven eight nine\"\
    )))\n</code>\n", "  (define (sort-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(= (first numbers) 'zero) (cons 'zero (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'one) (cons 'one (sort-helper (rest numbers)))]\n \
    \     [(= (first numbers) 'two) (cons 'two (sort-helper (rest numbers)))]\n  \
    \    [(= (first numbers) 'three) (cons 'three (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'four) (cons 'four (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'five) (cons 'five (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'six) (cons 'six (sort-helper (rest numbers)))]\n \
    \     [(= (first numbers) 'seven) (cons 'seven (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'eight) (cons 'eight (sort-helper (rest numbers)))]\n\
    \      [(= (first numbers) 'nine) (cons 'nine (sort-helper (rest numbers)))]))\n\
    \  (string-join (sort-helper numbers) \" \"))\n", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond ((equal? numeral 'zero) 0)\n          ((equal? numeral 'one)\
    \ 1)\n          ((equal? numeral 'two) 2)\n          ((equal? numeral 'three)\
    \ 3)\n          ((equal? numeral 'four) 4)\n          ((equal? numeral 'five)\
    \ 5)\n          ((equal? numeral 'six) 6)\n          ((equal? numeral 'seven)\
    \ 7)\n          ((equal? numeral 'eight) 8)\n          ((equal? numeral 'nine)\
    \ 9)))\n  (define (number-&gt;numeral number)\n    (cond ((equal? number 0) 'zero)\n\
    \          ((equal? number 1) 'one)\n          ((equal? number 2) 'two)\n    \
    \      ((equal? number 3) 'three)\n          ((equal? number 4) 'four)\n     \
    \     ((equal? number 5) 'five)\n          ((equal? number 6) 'six)\n        \
    \  ((equal? number 7) 'seven)\n          ((equal? number 8) 'eight)\n        \
    \  ((equal? number 9) 'nine)))\n  (define (sort-numbers-helper numbers)\n    (cond\
    \ ((null? numbers) '())\n          ((null? (cdr numbers)) numbers)\n         \
    \ (else (let* ((numeral (car numbers))\n                       (number (numeral-&gt;number\
    \ numeral))\n                       (rest (sort-numbers-helper (cdr numbers)))\n\
    \                       (rest-number (numeral-&gt;number (car rest))))\n     \
    \             (if (&lt; number rest-number)\n                      (cons numeral\
    \ rest)\n                      (cons (car rest) (sort-numbers-helper (cons numeral\
    \ (cdr rest)))))))))\n  (string-join (map number-&gt;numeral (sort-numbers-helper\
    \ (string-&gt;list numbers))) \" \"))\n</code>\n", "  (string-join (sort (string-split\
    \ numbers) string<?)))\n", "  (define (numeral->number numeral)\n    (cond\n \
    \     [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number->numeral number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (number->numeral\
    \ (apply min (map numeral->number numbers)))\n                  (sort-numbers-helper\
    \ (remove (number->numeral (apply min (map numeral->number numbers))) numbers)))]))\n\
    \  (string-join (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n",
  "  (define (number-to-int n)\n    (cond\n      [(equal? n \"zero\") 0]\n      [(equal?\
    \ n \"one\") 1]\n      [(equal? n \"two\") 2]\n      [(equal? n \"three\") 3]\n\
    \      [(equal? n \"four\") 4]\n      [(equal? n \"five\") 5]\n      [(equal?\
    \ n \"six\") 6]\n      [(equal? n \"seven\") 7]\n      [(equal? n \"eight\") 8]\n\
    \      [(equal? n \"nine\") 9]))\n  (define (int-to-number n)\n    (cond\n   \
    \   [(= n 0) \"zero\"]\n      [(= n 1) \"one\"]\n      [(= n 2) \"two\"]\n   \
    \   [(= n 3) \"three\"]\n      [(= n 4) \"four\"]\n      [(= n 5) \"five\"]\n\
    \      [(= n 6) \"six\"]\n      [(= n 7) \"seven\"]\n      [(= n 8) \"eight\"\
    ]\n      [(= n 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n\
    \      [(null? numbers) '()]\n      [else (cons (int-to-number (apply min (map\
    \ number-to-int numbers)))\n                  (sort-numbers-helper (remove (int-to-number\
    \ (apply min (map number-to-int numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n", "  (string-join (sort (string-split\
    \ numbers) string<?)))\n```\n\n## Example\n\n```racket", "  (define (numeral-&gt;number\
    \ numeral)\n    (cond\n      [(equal? numeral 'zero) 0]\n      [(equal? numeral\
    \ 'one) 1]\n      [(equal? numeral 'two) 2]\n      [(equal? numeral 'three) 3]\n\
    \      [(equal? numeral 'four) 4]\n      [(equal? numeral 'five) 5]\n      [(equal?\
    \ numeral 'six) 6]\n      [(equal? numeral 'seven) 7]\n      [(equal? numeral\
    \ 'eight) 8]\n      [(equal? numeral 'nine) 9]))\n  (define (number-&gt;numeral\
    \ number)\n    (cond\n      [(equal? number 0) 'zero]\n      [(equal? number 1)\
    \ 'one]\n      [(equal? number 2) 'two]\n      [(equal? number 3) 'three]\n  \
    \    [(equal? number 4) 'four]\n      [(equal? number 5) 'five]\n      [(equal?\
    \ number 6) 'six]\n      [(equal? number 7) 'seven]\n      [(equal? number 8)\
    \ 'eight]\n      [(equal? number 9) 'nine]))\n  (define (sort-numbers-helper numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [else\n       (define (insert-numeral\
    \ numeral numbers)\n         (cond\n           [(empty? numbers) (cons numeral\
    \ empty)]\n           [(&lt; (numeral-&gt;number numeral) (numeral-&gt;number\
    \ (first numbers)))\n            (cons numeral numbers)]\n           [else\n \
    \           (cons (first numbers) (insert-numeral numeral (rest numbers)))])\n\
    \         )\n       (insert-numeral (first numbers) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (convert-numbers-to-numerals numbers)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [else\n       (cons (number-&gt;numeral\
    \ (first numbers)) (convert-numbers-to-numerals (rest numbers)))]))\n  (convert-numbers-to-numerals\
    \ (sort-numbers-helper (map", "  (define (numeral-&gt;number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number-&gt;numeral number)\n    (cond\n      [(= number 0) \"zero\"\
    ]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(null? numbers) '()]\n      [else (cons (number-&gt;numeral\
    \ (apply min (map numeral-&gt;number numbers)))\n                  (sort-numbers-helper\
    \ (remove (number-&gt;numeral (apply min (map numeral-&gt;number numbers))) numbers)))]))\n\
    \  (apply string-append (sort-numbers-helper (string-split numbers))))\n</code>\n\
    I'm not sure if this is the most efficient way to do it, but it works.\n", " \
    \ (define (number-to-int number)\n    (cond\n      [(string=? number \"zero\"\
    ) 0]\n      [(string=? number \"one\") 1]\n      [(string=? number \"two\") 2]\n\
    \      [(string=? number \"three\") 3]\n      [(string=? number \"four\") 4]\n\
    \      [(string=? number \"five\") 5]\n      [(string=? number \"six\") 6]\n \
    \     [(string=? number \"seven\") 7]\n      [(string=? number \"eight\") 8]\n\
    \      [(string=? number \"nine\") 9]))\n  (define (int-to-number number)\n  \
    \  (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(=\
    \ number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"\
    ]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number\
    \ 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(null? numbers)\
    \ '()]\n      [else (cons (int-to-number (apply min (map number-to-int numbers)))\n\
    \                  (sort-numbers-helper (remove (int-to-number (apply min (map\
    \ number-to-int numbers))) numbers)))]))\n  (string-join (sort-numbers-helper\
    \ (string-split numbers #\\space)) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
