name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is-power? x n)\n    (cond\n      [(= x 1) #t]\n      [(=\
    \ x n) #t]\n      [(> x n) (is-power? (/ x n) n)]\n      [else #f]))\n  (is-power?\
    \ x n))\n", "  (if (= x (expt n (round (log x n))))\n      #t\n      #f))\n",
  "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n         (= (expt n\
    \ x) x))))\n", "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n  \
    \       (= (expt n x) x))))\n", "  (let* ([x-root (exact-integer-sqrt x)]\n  \
    \       [x-root-root (exact-integer-sqrt x-root)])\n    (and (integer? x-root)\n\
    \         (integer? x-root-root)\n         (= x-root-root n))))\n", "  (let ((r\
    \ (expt n (round (log x n)))))\n    (if (= x r)\n        #t\n        #f)))\n",
  "  (let ([root (exact-integer-sqrt x)])\n    (and (integer? root)\n         (= (expt\
    \ n root) x))))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and (= x (expt\
    \ n root))\n         (= (expt n (+ root 1)) (+ x (* x n))))))\n", "  (let ([x-root\
    \ (exact-integer-sqrt x)])\n    (and (integer? x-root)\n         (= (expt n x-root)\
    \ x))))\n", "  (define (is-power? x n)\n    (cond\n      [(= x 1) true]\n    \
    \  [(= x n) true]\n      [(< x n) false]\n      [else (is-power? (/ x n) n)]))\n\
    \  (is-power? x n))\n", "  (define (is-power? x n)\n    (cond\n      [(= x 1)\
    \ #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (is-power? (/ x n)\
    \ n)]))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (and (not (zero?\
    \ x))\n         (or (zero? (modulo x n))\n             (is-power? (quotient x\
    \ n) n))))\n  (is-power? x n))\n", "  (if (zero? x)\n      #f\n      (let ([log\
    \ (exact-integer-sqrt x)])\n        (if (and (integer? log)\n                \
    \ (= (expt n log) x))\n            #t\n            #f))))\n", "  (define (is-power?\
    \ x n)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n\
    \      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n", "  (let ((root (exact-integer-sqrt\
    \ x)))\n    (and (= root (expt n (log x n)))\n         (= x (expt n (log x n))))))\n",
  "  (let loop ([i 1])\n    (cond\n      [(= x (expt n i)) #t]\n      [(> x (expt\
    \ n i)) (loop (+ i 1))]\n      [else #f])))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x (expt n i)) #t]\n      [(> x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (if (= x 1)\n      #t\n\
    \      (if (= (modulo x n) 0)\n          (is-power? (/ x n) n)\n          #f)))\n",
  "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n         (= (expt n\
    \ x) x))))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and (= x (expt n\
    \ root))\n         (= root (exact-integer-sqrt x)))))\n", "  (let loop ([x x]\
    \ [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n\
    \          [else (loop (quotient x n) n)])))\n", "  (let ([root (exact-integer-sqrt\
    \ x)])\n    (and (= x (expt n root))\n         (= x (expt n (+ root 1))))))\n",
  "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(and (> x 1) (> n 1))\n     (let\
    \ loop ([x x] [n n])\n       (cond\n         [(= x 1) #t]\n         [(= x n) #t]\n\
    \         [(= (modulo x n) 0) (loop (/ x n) n)]\n         [else #f]))]\n    [else\
    \ #f]))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if\
    \ (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n \
    \ (is-power? x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n      \
    \  #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n\
    \            #f)))\n  (is-power-of? x n))\n", "  (let ([x (exact-floor (log x))])\n\
    \    (if (zero? (modulo x (log n)))\n        #t\n        #f)))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n",
  "  (let ((pow (expt n (round (log x n)))))\n    (= pow x)))\n", "  (define (is-power?\
    \ x n)\n    (cond ((= x n) #t)\n          ((< x n) #f)\n          (else (is-power?\
    \ (/ x n) n))))\n  (is-power? x n))\n", "  (define (is-power-of? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (let ([m (expt n\
    \ (floor (log x n)))]\n        [d (exact->inexact (expt n (ceiling (log x n))))])\n\
    \    (and (= m x)\n         (= d x))))\n", "  (let ([n-root (exact-integer-sqrt\
    \ n)])\n    (and (integer? n-root)\n         (= (expt n-root 2) n)\n         (integer?\
    \ (expt n-root x)))))\n", "  (define (is-power? x n)\n    (cond ((= x 1) #t)\n\
    \          ((= x n) #t)\n          ((> x n) (is-power? (- x n) n))\n         \
    \ (else #f)))\n  (is-power? x n))\n", "  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop\
    \ (/ x n) n)])))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n      \
    \      #f)))\n  (is-power-of? x n))\n", "  (let ([m (expt n (floor (log x n)))]\n\
    \        [d (exact->inexact (expt n (floor (log x n))))])\n    (and (= m x) (=\
    \ d x))))\n", "  (let ([x (exact-floor (log x))])\n    (if (zero? (modulo x (log\
    \ n)))\n        #t\n        #f)))\n", "  (let ([log (exact-integer-sqrt x)])\n\
    \    (and (integer? log)\n         (= (* log log) x)\n         (= (exact-integer-sqrt\
    \ log) n))))\n", "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n\
    \         (= (expt n x) x))))\n", "  (let ([x (exact-floor (log x))])\n    (and\
    \ (integer? x)\n         (= (expt n x) x))))\n", "  (let ([root (exact-integer-sqrt\
    \ x)])\n    (and (= x (expt n root))\n         (= root (log x n)))))\n", "  (define\
    \ (is_power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is_power? (/ x n) n)\n            #f)))\n  (is_power? x n))\n",
  "  (let ([x (exact-floor (log x))])\n    (if (zero? (modulo x (log n)))\n      \
    \  (expt n (quotient x (log n)))\n        #f)))\n", "  (let ([x (exact-floor (log\
    \ x))])\n    (equal? (exact-floor (log x)) (log n))))\n", "  (if (and (integer?\
    \ x) (integer? n))\n      (if (= x (expt n (round (log x n))))\n          #t\n\
    \          #f)\n      #f))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n\
    \        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n)\
    \ n)\n            #f)))\n  (is-power-of? x n))\n", "  (if (zero? x)\n      #f\n\
    \      (let loop ([x x] [n n])\n        (if (zero? (modulo x n))\n           \
    \ (if (zero? (modulo x (expt n 2)))\n                #f\n                (loop\
    \ (quotient x n) n))\n            #f))))\n", "  (cond\n    [(= x 1) #t]\n    [(=\
    \ x n) #t]\n    [(= x (* n n)) #t]\n    [(= x (* n n n)) #t]\n    [(= x (* n n\
    \ n n)) #t]\n    [(= x (* n n n n n)) #t]\n    [(= x (* n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n)) #t]\n    [(= x (* n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n)) #t]\n    [(=\
    \ x (* n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n\
    \ n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n\
    \ n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n\
    \ n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n\
    \ n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n\
    \ n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n",
  "  (let loop ([x x] [n n])\n    (cond [(zero? x) #t]\n          [(zero? (modulo\
    \ x n)) (loop (/ x n) n)]\n          [else #f])))\n", "  (let loop ([x x] [n n])\n\
    \    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n    \
    \      [else (loop (/ x n) n)])))\n", "  (define (is-power-of? x n)\n    (if (=\
    \ x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (let ([x (exact-floor\
    \ (log x))])\n    (and (integer? x)\n         (= (expt n x) x))))\n", "  (let*\
    \ ([log (log x n)]\n         [int (integer? log)])\n    (and int (= (expt n (floor\
    \ log)) x))))\n", "  (if (zero? x)\n      #f\n      (let loop ([x x] [n n])\n\
    \        (if (zero? (modulo x n))\n            (if (zero? (modulo (quotient x\
    \ n) n))\n                (loop (quotient x n) n)\n                #t)\n     \
    \       #f))))\n", "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (*\
    \ n n)) #t]\n    [(= x (* n n n)) #t]\n    [(= x (* n n n n)) #t]\n    [(= x (*\
    \ n n n n n)) #t]\n    [(= x (* n n n n n n)) #t]\n    [(= x (* n n n n n n n))\
    \ #t]\n    [(= x (* n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n))\
    \ #t]\n    [(= x (* n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n\
    \ n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n\
    \ n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n)) #t]\n    [(=\
    \ x (* n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n\
    \ n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n\
    \ n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (*\
    \ n n n n n n n n n n n n n n n n n n n n", "  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power? (/ x n) n)]))\n  (is-power? x n))\n", "  (define (is-power-of? x\
    \ n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n          \
    \  (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define\
    \ (is_power x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is_power (/ x n) n)\n            #f)))\n  (if (= x 1)\n      #t\n\
    \      (if (= (modulo x n) 0)\n          (is_power (/ x n) n)\n          #f)))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (if (is-power-of?\
    \ x n)\n      (if (= x n)\n          #f\n          #t)\n      #f))\n", "  (cond\n\
    \    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x (* n n\
    \ n)) #t]\n    [(= x (* n n n n)) #t]\n    [(= x (* n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n)) #t]\n    [(= x (* n n n n n n n)) #t]\n    [(= x (* n n n n\
    \ n n n n)) #t]\n    [(= x (* n n n n n n n n n)) #t]\n    [(= x (* n n n n n\
    \ n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n)) #t]\n    [(= x (* n n\
    \ n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n\
    \ n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n)) #t]\n    [(=\
    \ x (* n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n\
    \ n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n))\
    \ #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (*\
    \ n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n\
    \ n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n\
    \ n n n n n n n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n       \
    \   [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n) n)])))\n",
  "  (let ([root (exact-integer-sqrt x)])\n    (and (= x (expt n root))\n        \
    \ (= root (exact-integer-sqrt x)))))\n", "  (let ([n-root (exact-integer-sqrt\
    \ n)])\n    (and (integer? n-root)\n         (= (expt n-root 2) n)\n         (=\
    \ (expt n-root x) n))))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n \
    \       #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n)\
    \ n)\n            #f)))\n  (is-power-of? x n))\n", "  (let ([log_n (log x n)])\n\
    \    (and (integer? log_n)\n         (= (expt n (floor log_n)) x))))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n)\
    \ 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n",
  "  (let ([i (integer-sqrt x)])\n    (and (= (expt n i) x)\n         (= (expt n (+\
    \ i 1)) (+ x x)))))\n", "  (define (is_power? x n)\n    (if (= x n)\n        #t\n\
    \        (if (< x n)\n            #f\n            (is_power? (/ x n) n))))\n \
    \ (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (< x n)\n\
    \              #f\n              (is_power? x n)))))\n", "  (define (is-power-of-n?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of-n? (/ x n) n)\n            #f)))\n  (is-power-of-n? x n))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and (= x (expt n root))\n\
    \         (= x (expt root n)))))\n", "  (let ([x (exact-floor (log x))])\n   \
    \ (if (zero? (remainder x (log n)))\n        #t\n        #f)))\n", "  (define\
    \ (is_power? x n)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(>\
    \ x n) (is_power? (/ x n) n)]\n      [else #f]))\n  (is_power? x n))\n", "  (let\
    \ ([x (exact-floor (log x))])\n    (and (integer? x)\n         (= (expt n x) x))))\n",
  "  (if (zero? x)\n      #f\n      (let loop ([x x] [n n])\n        (if (zero? (modulo\
    \ x n))\n            (if (zero? (modulo x (expt n 2)))\n                #f\n \
    \               (loop (quotient x n) n))\n            #f))))\n", "  (let loop\
    \ ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(<\
    \ x n) #f]\n          [else (loop (/ x n) n)])))\n", "  (define (is-power-of?\
    \ x n)\n    (cond\n      [(= n 1) #t]\n      [(= x 1) #f]\n      [(= (modulo x\
    \ n) 0) (is-power-of? (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n",
  "  (let loop ([x x] [n n])\n    (cond\n      [(= x n) true]\n      [(= x 1) false]\n\
    \      [(< x n) false]\n      [else (loop (/ x n) n)])))\n", "  (let ([x (exact-floor\
    \ (log x n))])\n    (and (integer? x)\n         (= (expt n x) x))))\n", "  (cond\n\
    \    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x (* n (*\
    \ n n))) #t]\n    [(= x (* n (* n (* n n)))) #t]\n    [(= x (* n (* n (* n (*\
    \ n n))))) #t]\n    [(= x (* n (* n (* n (* n (* n n)))))) #t]\n    [(= x (* n\
    \ (* n (* n (* n (* n (* n n))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))) #t]\n    [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (let\
    \ ([x (exact-floor (log x))])\n    (and (integer? x)\n         (= (expt n x) x))))\n",
  "  (let ((root (exact-integer-sqrt x)))\n    (and (integer? root)\n         (= x\
    \ (expt n root)))))\n", "  (let ([root (exact-floor (sqrt x))])\n    (and (= (expt\
    \ n root) x)\n         (= (expt n (+ root 1)) x)\n         (= (expt n (- root\
    \ 1)) x))))\n", "  (let ([i (expt n 1)])\n    (cond\n      [(= i x) #t]\n    \
    \  [(> i x) #f]\n      [else (is_simple_power x (* n n))])))\n", "  (define (is_power\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is_power (/ x n) n)\n            #f)))\n  (is_power x n))\n", "  (define\
    \ (is_power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is_power? (/ x n) n)\n            #f)))\n  (if (= x 1)\n      #t\n\
    \      (if (= (modulo x n) 0)\n          (is_power? (/ x n) n)\n          #f)))\n",
  "  (let ((x-root (exact-integer-sqrt x)))\n    (and (integer? x-root)\n        \
    \ (= x (expt x-root n)))))\n", "  (define (is-power-of? n x)\n    (if (= n 1)\n\
    \        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n)\
    \ n)\n            #f)))\n  (is-power-of? x n))\n", "  (let ([x (exact-floor (log\
    \ x))])\n    (and (integer? x) (= (expt n x) x))))\n", "  (let ([x (exact-floor\
    \ (log x))])\n    (and (integer? x)\n         (= (expt n x) x))))\n", "  (let\
    \ ((pow (expt n (round (log x n)))))\n    (= pow x)))\n", "  (let ([i (expt n\
    \ 1)])\n    (cond\n      [(= x i) #t]\n      [(> x i) (is_simple_power x (* n\
    \ n))]\n      [else #f])))\n", "  (let ([y (expt n (round (log x n)))]\n     \
    \   [z (expt n (round (log x n) 1))])\n    (and (= x y)\n         (not (= x z)))))\n",
  "  (define (is_simple_power-helper x n acc)\n    (cond\n      [(= x acc) #t]\n \
    \     [(> x acc) (is_simple_power-helper x n (* acc n))]\n      [else #f]))\n\
    \  (is_simple_power-helper x n n))\n", "  (if (zero? x)\n      #f\n      (if (zero?\
    \ n)\n          #f\n          (if (zero? (modulo x n))\n              (if (zero?\
    \ (modulo x (expt n 2)))\n                  #f\n                  #t)\n      \
    \        #f))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n         \
    \   #f)))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (if (= x 1)\n\
    \        #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n\
    \            #f)))\n  (is-power? x n))\n", "  (let ([n-root (exact-integer-sqrt\
    \ n)])\n    (and (= (expt n-root n-root) n)\n         (= (expt n-root x) x))))\n",
  "  (let ([i (expt n 1)])\n    (cond\n      [(= i x) #t]\n      [(> i x) #f]\n  \
    \    [else (is_simple_power x (* n n))])))\n", "  (let ([root (exact-integer-sqrt\
    \ x)])\n    (and (= root (expt n (exact-integer-sqrt x)))\n         (= x (expt\
    \ root root)))))\n", "  (define (is_simple_power_iter x n i)\n    (cond [(= x\
    \ (expt n i)) #t]\n          [(> x (expt n i)) (is_simple_power_iter x n (+ i\
    \ 1))]\n          [else #f]))\n  (is_simple_power_iter x n 1))\n", "  (let ([root\
    \ (exact-integer-sqrt x)])\n    (and (= x (expt n root))\n         (= x (expt\
    \ root n)))))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n      \
    \      #f)))\n  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n        \
    \  (is-power-of? (/ x n) n)\n          #f)))\n", "  (if (zero? x)\n      #f\n\
    \      (if (zero? n)\n          #f\n          (if (zero? (modulo x n))\n     \
    \         (if (zero? (modulo n x))\n                  #t\n                  (is_simple_power\
    \ (quotient x n) n))\n              #f))))\n", "  (define (is-power? x n)\n  \
    \  (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define\
    \ (is_power x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is_power (/ x n) n)\n            #f)))\n  (is_power x n))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-iter x n i)\n  \
    \  (cond [(= x (expt n i)) #t]\n          [(> x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n          [else #f]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (let loop ([x x] [n n])\n    (cond [(zero? n) #f]\n          [(zero? x) #t]\n\
    \          [(= (modulo x n) 0) (loop (/ x n) n)]\n          [else #f])))\n", " \
    \ (define (is-power? x n)\n    (cond ((= n 1) #t)\n          ((= x 1) #f)\n  \
    \        ((= (modulo x n) 0) (is-power? (/ x n) n))\n          (else #f)))\n \
    \ (is-power? x n))\n", "  (let ((exp (expt n (round (log x n)))))\n    (if (=\
    \ exp x)\n        #t\n        #f)))\n", "  (define (is_power? x n)\n    (if (=\
    \ x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is_power?\
    \ (/ x n) n)\n            #f)))\n  (is_power? x n))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (let ([m (expt n (round (log x n)))]\n        [d (exact->inexact (gcd x m))])\n\
    \    (= d m)))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n      \
    \    [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n) n)])))\n",
  "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n   \
    \       [(< x n) #f]\n          [else (loop (/ x n) n)])))\n", "  (let ((x-sqrt\
    \ (sqrt x)))\n    (and (integer? x-sqrt)\n         (integer? (log x n)))))\n",
  "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x\
    \ (* n n n)) #t]\n    [(= x (* n n n n)) #t]\n    [(= x (* n n n n n)) #t]\n \
    \   [(= x (* n n n n n n)) #t]\n    [(= x (* n n n n n n n)) #t]\n    [(= x (*\
    \ n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n)) #t]\n    [(= x (* n\
    \ n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n\
    \ n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n\
    \ n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n\
    \ n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n\
    \ n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n\
    \ n n n n n n n n n n n n", "  (define (iter x n acc)\n    (cond\n      [(= x\
    \ acc) #t]\n      [(> x acc) (iter x n (* acc n))]\n      [else #f]))\n  (iter\
    \ x n n))\n", "  (define (is-power-of-n? x n)\n    (if (= x 1)\n        #t\n \
    \       (if (= (modulo x n) 0)\n            (is-power-of-n? (/ x n) n)\n     \
    \       #f)))\n  (is-power-of-n? x n))\n", "  (let ([x (exact-floor (log x))])\n\
    \    (and (integer? x)\n         (= (expt n x) x))))\n", "  (let ([x (exact-floor\
    \ (log x))])\n    (and (integer? x)\n         (= (expt n x) x))))\n", "  (define\
    \ (is_power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is_power? (/ x n) n)\n            #f)))\n  (is_power? x n))\n",
  "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x\
    \ (* n n n)) #t]\n    [(= x (* n n n n)) #t]\n    [(= x (* n n n n n)) #t]\n \
    \   [(= x (* n n n n n n)) #t]\n    [(= x (* n n n n n n n)) #t]\n    [(= x (*\
    \ n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n)) #t]\n    [(= x (* n\
    \ n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n)) #t]\n\
    \    [(= x (* n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n\
    \ n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n\
    \ n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n\
    \ n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n)) #t]\n  \
    \  [(= x (* n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n\
    \ n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n\
    \ n n n n n n n n n n n n", "  (define (is_power? x n)\n    (if (= n 1)\n    \
    \    #t\n        (if (= (modulo x n) 0)\n            (is_power? (/ x n) n)\n \
    \           #f)))\n  (if (= x 1)\n      #t\n      (is_power? x n)))\n", "  (define\
    \ (is-power? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n   \
    \   [(< x n) false]\n      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n",
  "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (let ([root (exact-floor (sqrt x))])\n  \
    \  (and (= (expt n root) x)\n         (= (expt n (+ root 1)) (+ x x)))))\n", " \
    \ (let* ((x-log (log x))\n         (n-log (log n)))\n    (and (integer? (/ x-log\
    \ n-log))\n         (= x (expt n (/ x-log n-log))))))\n", "  (let ([r (exact-integer-sqrt\
    \ x)])\n    (and (integer? r)\n         (= (expt n r) x))))\n", "  (let ([x (exact-floor\
    \ (log x))])\n    (if (zero? (modulo x (log n)))\n        (expt n (quotient x\
    \ (log n)))\n        #f)))\n", "  (let ([x (exact-floor (log x))])\n    (and (integer?\
    \ x) (= (expt n x) x))))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n\
    \        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n)\
    \ n)\n            #f)))\n  (is-power-of? x n))\n", "  (if (= x (expt n (round\
    \ (log x n))))\n      #t\n      #f))\n", "  (let ([log (exact-integer-sqrt x)])\n\
    \    (and (integer? log)\n         (= (expt n log) x))))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (let ([x (exact-floor (log x))])\n    (and (integer? x)\n         (= (expt n\
    \ x) x))))\n", "  (if (zero? x)\n      #f\n      (if (zero? n)\n          #f\n\
    \          (if (zero? (modulo x n))\n              (if (zero? (modulo n x))\n\
    \                  #t\n                  (is_simple_power (quotient x n) n))\n\
    \              #f))))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n\
    \          [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (quotient\
    \ x n) n)])))\n", "  (let ([n-root (exact-integer-sqrt n)])\n    (and (integer?\
    \ n-root)\n         (= (expt n-root 2) n)\n         (= (expt n-root x) n))))\n",
  "  (let loop ([x x] [n n])\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n\
    \      [(< x n) #f]\n      [else (loop (/ x n) n)])))\n", "  (let loop ([x x]\
    \ [n n])\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n\
    \      [else (loop (/ x n) n)])))\n", "  (define (is-power? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x\
    \ n) n)\n            #f)))\n  (is-power? x n))\n", "  (define (is-power-of? x\
    \ n)\n    (if (= x n)\n        #t\n        (if (< x n)\n            #f\n     \
    \       (is-power-of? (/ x n) n))))\n  (if (= x 1)\n      #t\n      (is-power-of?\
    \ x n)))\n", "  (let ([log (exact-integer-sqrt x)])\n    (and (integer? log)\n\
    \         (= (expt n log) x))))\n", "  (define (is-power? x n)\n    (cond\n  \
    \    [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (is-power?\
    \ (/ x n) n)]))\n  (is-power? x n))\n", "  (let ([x (exact-floor (log x))])\n\
    \    (and (integer? x)\n         (= (expt n x) x))))\n", "  (let ([i (expt n 1)])\n\
    \    (cond\n      [(= i x) true]\n      [(> i x) false]\n      [else (is_simple_power\
    \ x (+ n 1))])))\n", "  (and (integer? x) (integer? n)\n       (let loop ([x x]\
    \ [n n])\n         (cond [(= x 1) #t]\n               [(= x n) #t]\n         \
    \      [(> x n) (loop (- x n) n)]\n               [else #f]))))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n     \
    \    (= (expt n x) x))))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and\
    \ (= x (expt n root))\n         (= (expt n (add1 root)) (add1 x)))))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (let ([log (exact-integer-sqrt x)])\n    (and (= (expt n log) x)\n\
    \         (= (expt n (add1 log)) (add1 x)))))\n", "  (let ((pow (expt n (floor\
    \ (log x n)))))\n    (= pow x)))\n", "  (let ([log (exact-floor (log x n))])\n\
    \    (and (integer? log)\n         (= (expt n log) x))))\n", "  (let ([x (exact-floor\
    \ (log x))])\n    (if (zero? (modulo x (log n)))\n        (expt n (quotient x\
    \ (log n)))\n        false)))\n", "  (define (is_simple_power-iter x n i)\n  \
    \  (cond\n      [(= x (expt n i)) #t]\n      [(> x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (let\
    \ ([root (exact-integer-sqrt x)])\n    (and (= (expt n root) x)\n         (= (expt\
    \ n (+ root 1)) (+ x x)))))\n", "  (let ([x (exact-floor (log x))])\n    (and\
    \ (integer? x)\n         (= (expt n x) x))))\n", "  (define (is-power-of? x n)\n\
    \    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (let* ([x (exact->inexact\
    \ x)]\n         [n (exact->inexact n)]\n         [log (log x n)])\n    (and (integer?\
    \ log)\n         (= (expt n log) x))))\n", "  (let ([x (exact-floor (log x))])\n\
    \    (and (integer? x)\n         (= (expt n x) x))))\n", "  (let ([m (expt n (floor\
    \ (log x n)))]\n        [d (exact->inexact (/ x m))])\n    (and (= m x) (= d 1))))\n",
  "  (cond\n    [(= x (expt n (round (log x n)))) #t]\n    [else #f]))\n", "  (define\
    \ (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power-of?\
    \ (/ x n) n))\n          (else #f)))\n  (and (integer? x) (integer? n) (is-power-of?\
    \ x n)))\n", "  (if (zero? x)\n      #f\n      (if (zero? n)\n          #f\n \
    \         (if (zero? (modulo x n))\n              (if (zero? (modulo (sqrt x)\
    \ n))\n                  #t\n                  #f)\n              #f))))\n", " \
    \ (let loop ([x x] [n n])\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n\
    \      [(< x n) #f]\n      [else (loop (/ x n) n)])))\n", "  (let ([log (exact-integer-sqrt\
    \ x)])\n    (and (integer? log)\n         (= (expt n log) x))))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n)\
    \ 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (if (is-power? x\
    \ n)\n      (if (= x n)\n          #f\n          #t)\n      #f))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is_power? x n)\n    (cond\n      [(= x 1) #t]\n      [(=\
    \ x n) #t]\n      [(and (< x n) (= (modulo x n) 0)) (is_power? (/ x n) n)]\n \
    \     [else #f]))\n  (is_power? x n))\n", "  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop\
    \ (/ x n) n)])))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and (= x (expt\
    \ n root))\n         (= (expt n (add1 root)) (add1 x)))))\n", "  (define (is-power?\
    \ x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n)\
    \ (is-power? (/ x n) n)]\n      [else false]))\n  (is-power? x n))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (if (is-power? x n)\n\
    \      (if (= x n)\n          #f\n          #t)\n      #f))\n", "  (let ((root\
    \ (exact-integer-sqrt x)))\n    (and (= x (expt root n))\n         (= x (expt\
    \ n root)))))\n", "  (let ([x (exact-floor (log x))])\n    (and (integer? x)\n\
    \         (= (expt n x) x))))\n", "  (let ([x (exact-floor (log x))])\n    (if\
    \ (zero? (modulo x (log n)))\n        #t\n        #f)))\n", "  (define (is-power?\
    \ x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n)\
    \ (is-power? (/ x n) n)]\n      [else false]))\n  (is-power? x n))\n", "  (let\
    \ ([x (sqrt x)])\n    (if (and (integer? x) (= (expt n (round x)) x))\n      \
    \  #t\n        #f)))\n", "  (let ([x (exact-integer-sqrt x)])\n    (and (integer?\
    \ x)\n         (= (expt n (exact-integer-sqrt x)) x))))\n", "  (if (zero? x)\n\
    \      #f\n      (let loop ([x x] [n n])\n        (if (zero? (modulo x n))\n \
    \           (if (zero? (modulo x (expt n 2)))\n                #f\n          \
    \      (loop (quotient x n) n))\n            #f))))\n", "  (let loop ([x x] [n\
    \ n])\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(> x n) (loop\
    \ x (* n n))]\n      [else #f])))\n", "  (let ([r (exact-integer-sqrt x)])\n \
    \   (and (integer? r)\n         (= (expt n r) x))))\n", "  (let ([n-root (exact-integer-sqrt\
    \ n)])\n    (and (integer? n-root)\n         (= (expt n-root 2) n)\n         (=\
    \ (expt n-root x) n))))\n", "  (define (is_power x n)\n    (if (= x 1)\n     \
    \   #t\n        (if (= (modulo x n) 0)\n            (is_power (/ x n) n)\n   \
    \         #f)))\n  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n     \
    \     (is_power (/ x n) n)\n          #f)))\n", "  (if (zero? x)\n      #f\n \
    \     (let loop ([x x] [n n])\n        (if (zero? (modulo x n))\n            (if\
    \ (zero? (modulo x (expt n 2)))\n                #f\n                (loop (quotient\
    \ x n) n))\n            #f))))\n", "  (let loop ([x x] [n n])\n    (cond [(= x\
    \ 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else (loop\
    \ (/ x n) n)])))\n", "  (define (is_simple_power-helper x n i)\n    (cond\n  \
    \    [(= x (* n i)) #t]\n      [(> x (* n i)) (is_simple_power-helper x n (+ i\
    \ 1))]\n      [else #f]))\n  (is_simple_power-helper x n 1))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define\
    \ (is_power x n)\n    (cond [(= n 1) (= x 1)]\n          [(= x 1) #t]\n      \
    \    [(= x n) #t]\n          [(< x n) #f]\n          [else (is_power (/ x n) n)]))\n\
    \  (is_power x n))\n", "  (let ([root (exact-integer-sqrt x)])\n    (and (= x\
    \ (expt n root))\n         (not (zero? (modulo x n))))))\n", "  (let loop ([x\
    \ x] [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n)\
    \ #f]\n          [else (loop (quotient x n) n)])))\n", "  (let* ([x (sqrt x)]\n\
    \         [x (if (integer? x) x (round x))])\n    (if (and (integer? x) (integer?\
    \ n))\n        (if (= (expt n x) x)\n            #t\n            #f)\n       \
    \ #f)))\n", "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n\
    \    [(= x (* n n n)) #t]\n    [(= x (* n n n n)) #t]\n    [(= x (* n n n n n))\
    \ #t]\n    [(= x (* n n n n n n)) #t]\n    [(= x (* n n n n n n n)) #t]\n    [(=\
    \ x (* n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n)) #t]\n   \
    \ [(= x (* n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n\
    \ n)) #t]\n    [(= x (* n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n\
    \ n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n))\
    \ #t]\n    [(= x (* n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n\
    \ n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n\
    \ n n n n n n n)) #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n))\
    \ #t]\n    [(= x (* n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x\
    \ (* n n n n n n n n n n n n n n n n n n n n n n)) #t]\n    [(= x (* n n n n n\
    \ n n n n n n n n n n n n n n n", "  (let ((n-root (exact-integer-sqrt n)))\n\
    \    (and (integer? n-root)\n         (= (expt n-root 2) n)\n         (integer?\
    \ x)\n         (= (expt n-root x) n))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
