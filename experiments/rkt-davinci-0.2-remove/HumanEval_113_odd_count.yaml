name: HumanEval_113_odd_count
language: rkt
prompt: "#lang racket\n\n;; Given a list of strings, where each string consists of\
  \ only digits, return a list.\n;; Each element i of the output should be \"the number\
  \ of odd elements in the\n;; string i of the input.\" where all the i's should be\
  \ replaced by the number\n;; of odd digits in the i'th string of the input.\n(define\
  \ (odd_count lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_count))\n\
  \    (check-equal? (candidate (list \"1234567\")) (list \"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"))\n    (check-equal? (candidate (list \"3\" \"\
  11111111\")) (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  \ \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    (check-equal?\
  \ (candidate (list \"271\" \"137\" \"314\")) (list \"the number of odd elements\
  \ 2n the str2ng 2 of the 2nput.\" \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\" \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))\n\
  ))\n\n(test-humaneval)"
completions: ["  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n\
    \       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (x)\n         (count-odds (string->list\
    \ x)))\n       lst))\n", "  (map (\u03BB (s) (count (\u03BB (c) (odd? (string-&gt;number\
    \ (string c)))) s)) lst))\n</code>\nThis is the error I get:\n<code>odd_count.rkt:6:0:\
    \ Type Checker: type mismatch\n  expected: String\n  given: Number\n  in: the\
    \ number of odd elements in the string i of the input.\n  context...:\n   /home/joe/Documents/Programming/Racket/odd_count.rkt:6:0\n\
    </code>\nI'm not sure what I'm doing wrong. I'm using Racket 6.2.\n\n\nA:\n\n\
    The problem is that <code>count</code> returns a number, but you're trying to\
    \ use it in a string. You can use <code>number-&gt;string</code> to convert the\
    \ number to a string.\n<code>(define (odd_count lst)\n  (map (\u03BB (s) (number-&gt;string\
    \ (count (\u03BB (c) (odd? (string-&gt;number (string c)))) s))) lst))\n</code>\n",
  "  (map (lambda (str)\n         (string-&gt;number\n          (number-&gt;string\n\
    \           (length\n            (filter odd?\n                     (map string-&gt;number\n\
    \                          (string-&gt;list str)))))))\n       lst))\n</code>\n\
    This is a bit ugly, but it works.\n", "  (map (lambda (x) (count-odds x)) lst))\n",
  "  (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x) (count-odds x)) lst))\n", "  (map (\u03BB (s)\n         (length (filter\
    \ odd? (string-&gt;list s))))\n       lst))\n</code>\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (\u03BB (x) (count-odds x)) lst))\n", "  (map (lambda (s)\n\
    \         (length (filter odd? (string-&gt;list s))))\n       lst))\n", "  (map\
    \ (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list str))))\n\
    \       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (\u03BB (x) (count-odd x)) lst))\n", "  (map\
    \ (lambda (str)\n         (length (filter odd? (string-&gt;list str))))\n    \
    \   lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (str)\n         (apply + (map (lambda\
    \ (c)\n                         (if (odd? (string-&gt;number (string c))) 1 0))\n\
    \                       (string-&gt;list str))))\n       lst))\n</code>\n", " \
    \ (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (\u03BB\
    \ (s)\n         (length (filter odd? (string-&gt;list s))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list str))))\n\
    \       lst))\n", "  (map (lambda (s)\n         (string-&gt;number\n         \
    \ (number-&gt;string\n           (length\n            (filter odd?\n         \
    \            (string-&gt;list s))))))\n       lst))\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n\
    \       lst))\n", "  (map (lambda (str)\n         (count (lambda (c)\n       \
    \           (odd? (string-&gt;number (string c))))\n                str))\n  \
    \     lst))\n</code>\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (s)\n         (count\
    \ (lambda (c)\n                  (odd? (string->number (string c))))\n       \
    \         s))\n       lst))\n", "  (map (lambda (x)\n         (count (lambda (y)\n\
    \                  (odd? (string->number (string y))))\n                x))\n\
    \       lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string->list\
    \ str))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (s)\n         (length\
    \ (filter odd? (string-&gt;list s))))\n       lst))\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (str)\n         (length (filter odd? (string->list str))))\n  \
    \     lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (\u03BB (x) (count-odd x)) lst))\n", "  (map\
    \ (lambda (str)\n         (length (filter odd? (string->list str))))\n       lst))\n",
  "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list s))))\n    \
    \   lst))\n</code>\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (x) (count-odd x))\
    \ lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list\
    \ str))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n\
    \         (length (filter odd? (string-&gt;list str))))\n       lst))\n</code>\n",
  "  (map (lambda (x) (count-odd-digits x)) lst))\n", "  (map (lambda (str)\n    \
    \     (length (filter odd? (string-&gt;list str))))\n       lst))\n</code>\n",
  "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list s))))\n    \
    \   lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n</code>\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string-&gt;list str))))\n       lst))\n</code>\n", "  (map (lambda\
    \ (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda (x)\n      \
    \   (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (s)\n         (length (filter odd? (string-&gt;list s))))\n       lst))\n</code>\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (\u03BB (x) (length (filter odd? (string->list x)))) lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (s)\n         (count (lambda (c)\n               \
    \   (odd? (string->number (string c))))\n                s))\n       lst))\n",
  "  (map (lambda (str)\n         (length (filter odd? (string->list str))))\n   \
    \    lst))\n", "  (map (lambda (x)\n         (count-odds (string->list x)))\n\
    \       lst))\n", "  (map (lambda (str)\n         (count-odds (string->list str)))\n\
    \       lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list\
    \ str))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string->list str))))\n       lst))\n", "  (map (lambda (str)\n\
    \         (length (filter odd? (string->list str))))\n       lst))\n", "  (map\
    \ (lambda (str)\n         (length (filter odd? (string->list str))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (str)\n         (count-odds str))\n       lst))\n",
  "  (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n\
    \       lst))\n", "  (map (lambda (str)\n         (count (lambda (c) (odd? (string->number\
    \ (string c))))\n                str))\n       lst))\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list\
    \ str))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (x)\n         (length\
    \ (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda (x)\n   \
    \      (count-odds x))\n       lst))\n", "  (map (lambda (x)\n         (length\
    \ (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda (s)\n   \
    \      (length (filter odd? (string-&gt;list s))))\n       lst))\n</code>\n",
  "  (map (lambda (str)\n         (length (filter odd? (string->list str))))\n   \
    \    lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string->list\
    \ str))))\n       lst))\n", "  (map (lambda (x) (length (filter odd? (string->list\
    \ x)))) lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (x)\n         (count (lambda (y)\n \
    \                 (odd? (string->number (string y))))\n                x))\n \
    \      lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n        \
    \  (number-&gt;string\n           (length\n            (filter odd?\n        \
    \             (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter\
    \ odd? (string->list str))))\n       lst))\n", "  (map (lambda (x) (count-odd-digits\
    \ x)) lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n</code>\n", "  (map (lambda (s)\n  \
    \       (length (filter odd? (string-&gt;list s))))\n       lst))\n", "  (map\
    \ (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (count (lambda (y) (odd? y))\n                (string->list\
    \ x)))\n       lst))\n", "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list\
    \ s))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n</code>\n", "  (map (lambda (x)\n         (length\
    \ (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda (x)\n   \
    \      (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda (x)\n      \
    \   (count (lambda (y)\n                  (odd? (string->number (string y))))\n\
    \                x))\n       lst))\n", "  (map (lambda (x)\n         (length (filter\
    \ odd? (string->list x))))\n       lst))\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (count (lambda (y) (odd? y))\n                (string->list x)))\n\
    \       lst))\n</code>\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n         (apply\
    \ + (map (lambda (ch)\n                         (if (odd? (char->integer ch))\
    \ 1 0))\n                       (string->list str))))\n       lst))\n", "  (map\
    \ (lambda (x)\n         (count (lambda (y)\n                  (odd? (string->number\
    \ (string y))))\n                x))\n       lst))\n", "  (map (lambda (str)\n\
    \         (length (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map\
    \ (lambda (str)\n         (string-&gt;number\n          (number-&gt;string\n \
    \          (length\n            (filter odd?\n                     (map string-&gt;number\n\
    \                          (string-&gt;list str)))))))\n       lst))\n</code>\n",
  "  (map (\u03BB (x) (count-odd x)) lst))\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map (\u03BB (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (str)\n         (length (filter odd? (string-&gt;list str))))\n       lst))\n",
  "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list s))))\n    \
    \   lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list\
    \ str))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter\
    \ odd? (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n    \
    \     (length (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map\
    \ (lambda (x)\n         (string-&gt;number\n          (number-&gt;string\n   \
    \        (length\n            (filter odd?\n                     (string-&gt;list\
    \ x))))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (x)\n         (length\
    \ (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda (x)\n   \
    \      (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (s)\n         (length (filter odd? (string-&gt;list s))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (count (lambda (y) (odd? y))\n                (string->list\
    \ x)))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (x)\n         (length\
    \ (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda (x)\n   \
    \      (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (x)\n         (count-odds x))\n       lst))\n", " \
    \ (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda (x)\n      \
    \   (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (str)\n         (string-&gt;number\n          (number-&gt;string\n         \
    \  (length\n            (filter odd?\n                     (map string-&gt;number\n\
    \                          (string-&gt;list str)))))))\n       lst))\n</code>\n",
  "  (map (lambda (str)\n         (string-&gt;number\n          (number-&gt;string\n\
    \           (length\n            (filter odd?\n                     (map string-&gt;number\n\
    \                          (string-&gt;list str)))))))\n       lst))\n</code>\n",
  "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list s))))\n    \
    \   lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (s)\n         (count (lambda (c) (odd?\
    \ (string-&gt;number (string c)))) s))\n       lst))\n</code>\n", "  (map (\u03BB\
    \ (x) (length (filter odd? (string->list x)))) lst))\n", "  (map (lambda (x)\n\
    \         (length (filter odd? (string->list x))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (count-odds x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list\
    \ s))))\n       lst))\n</code>\n", "  (map (\u03BB (str)\n         (length (filter\
    \ odd? (string-&gt;list str))))\n       lst))\n</code>\n", "  (map (lambda (str)\n\
    \         (length (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map\
    \ (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (x)\n         (count-odd-digits x))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n\
    \       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd?\
    \ (string->list x))))\n       lst))\n", "  (map (lambda (s)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (string-&gt;list s))))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (string-&gt;number\n          (number-&gt;string\n           (length\n\
    \            (filter odd?\n                     (string-&gt;list x))))))\n   \
    \    lst))\n</code>\nI'm trying to figure out how to make this more idiomatic.\
    \ I'm not sure if I'm over-using <code>map</code>, <code>filter</code>, and <code>length</code>.\
    \ I'm also not sure if I'm using <code>string-&gt;number</code> and <code>number-&gt;string</code>\
    \ correctly. I'm also not sure if I'm using <code>lambda</code> correctly.\n\n\
    \nA:\n\nI think this is a bit more idiomatic:\n<code>(define (odd-count lst)\n\
    \  (map (lambda (s)\n         (length (filter odd? (string-&gt;list s))))\n  \
    \     lst))\n</code>\nThe <code>string-&gt;number</code> and <code>number-&gt;string</code>\
    \ calls are unnecessary, since you're only counting the number of odd digits in\
    \ each string.\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (s)\n         (length (filter odd? (string-&gt;list\
    \ s))))\n       lst))\n", "  (map (lambda (str)\n         (length (filter odd?\
    \ (string-&gt;list str))))\n       lst))\n", "  (map (lambda (str)\n         (length\
    \ (filter odd? (string-&gt;list str))))\n       lst))\n", "  (map (lambda (x)\n\
    \         (count-odd-digits x))\n       lst))\n", "  (map (lambda (x)\n      \
    \   (string-&gt;number\n          (number-&gt;string\n           (length\n   \
    \         (filter odd?\n                     (string-&gt;list x))))))\n      \
    \ lst))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
  "  (map (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n",
  "  (map (lambda (str)\n         (count (lambda (c)\n                  (odd? (string-&gt;number\
    \ (string c))))\n                str))\n       lst))\n</code>\n", "  (map (lambda\
    \ (str)\n         (let loop ((str str)\n                    (count 0))\n     \
    \      (cond ((null? str) count)\n                 ((odd? (string->number (string-ref\
    \ str 0)))\n                  (loop (substring str 1) (+ count 1)))\n        \
    \         (else (loop (substring str 1) count)))))\n       lst))\n", "  (map (lambda\
    \ (x)\n         (length (filter odd? (string->list x))))\n       lst))\n", " \
    \ (map (lambda (x)\n         (length (filter odd? (string->list x))))\n      \
    \ lst))\n", "  (map (lambda (str)\n         (length (filter odd? (string-&gt;list\
    \ str))))\n       lst))\n", "  (map (lambda (str)\n         (string-&gt;number\n\
    \          (number-&gt;string\n           (length\n            (filter odd?\n\
    \                     (map string-&gt;number\n                          (string-&gt;list\
    \ str)))))))\n       lst))\n</code>\n", "  (map (lambda (x)\n         (count-odds\
    \ x))\n       lst))\n", "  (map (lambda (x)\n         (length (filter odd? (string->list\
    \ x))))\n       lst))\n", "  (map (lambda (x) (count-odds x)) lst))\n", "  (map\
    \ (lambda (x)\n         (length (filter odd? (string->list x))))\n       lst))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
