name: HumanEval_62_derivative
language: rkt
prompt: "#lang racket\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] +\
  \ xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the\
  \ same form.\n(define (derivative xs)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) (list 1 4 12 20))\n    (check-equal?\
  \ (candidate (list 1 2 3)) (list 2 6))\n    (check-equal? (candidate (list 3 2 1))\
  \ (list 2 2))\n    (check-equal? (candidate (list 3 2 1 0 4)) (list 2 2 0 16))\n\
  \    (check-equal? (candidate (list 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (for/list ([i (in-range (length xs))]\n             #:when (not (=\
    \ i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range (length xs))]\n\
    \             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list\
    \ ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n    (*\
    \ i (list-ref xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n      \
    \       #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n             #:when\
    \ (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range\
    \ 1 (length xs))]\n             #:when (not (zero? (vector-ref xs i))))\n    (*\
    \ i (vector-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (not (zero?\
    \ x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range 1\
    \ (length xs))]\n             #:when (positive? i))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n         \
    \    #:when (not (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n", " \
    \ (for/list ([i (in-range (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (not\
    \ (zero? x))\n             #:index i)\n    (* (add1 i) x)))\n", "  (for/list ([i\
    \ (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([x xs]\n          \
    \   #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([x xs]\n             #:when (positive? (length xs))\n             #:index i)\n\
    \    (* x (add1 i))))\n", "  (for/list ([i (in-range (length xs))]\n         \
    \    #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range\
    \ 1 (length xs))]\n             #:when (not (zero? (list-ref xs i))))\n    (*\
    \ i (list-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (not (zero?\
    \ x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n     \
    \        #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", " \
    \ (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? (list-ref\
    \ xs i))))\n    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n           \
    \  #:when (not (zero? x))\n             #:index i)\n    (* (add1 i) x)))\n", " \
    \ (map (lambda (x i) (* x i))\n       (cdr xs)\n       (range 1 (length xs))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n         \
    \    #:when (not (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n", " \
    \ (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))]\n  \
    \           #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n     \
    \        #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n\
    \             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (define (derivative-iter xs i)\n    (if (null? xs)\n        '()\n\
    \        (cons (* i (car xs)) (derivative-iter (cdr xs) (+ i 1)))))\n  (derivative-iter\
    \ xs 1))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (for/list ([i (in-range (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))]\n  \
    \           #:when (> i 0))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n        \
    \     #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs\
    \ (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n     \
    \        #:when (not (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n         \
    \    #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([x\
    \ xs]\n             #:when (not (zero? x))\n             #:index i)\n    (* x\
    \ i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n       \
    \      #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([x\
    \ xs]\n             #:when (not (zero? x))\n             #:index i)\n    (* x\
    \ i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n       \
    \      #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range (length xs))]\n\
    \             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (map (\u03BB\
    \ (x i) (* x i)) (cdr xs) (range 1 (length xs))))\n", "  (for/list ([i (in-range\
    \ (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n",
  "  (let loop ([xs xs] [i 0])\n    (if (null? xs)\n        '()\n        (cons (*\
    \ i (car xs)) (loop (cdr xs) (+ i 1))))))\n", "  (let loop ([xs xs] [n 0])\n \
    \   (if (null? xs)\n        '()\n        (cons (* n (car xs)) (loop (cdr xs) (+\
    \ n 1))))))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n  \
    \           #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([x\
    \ xs]\n             #:when (not (zero? x))\n             #:index i)\n    (* x\
    \ i)))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? (vector-ref\
    \ xs i))))\n    (* i (vector-ref xs i))))\n", "  (for/list ([i (in-range (length\
    \ xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range\
    \ (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? (vector-ref\
    \ xs i))))\n    (* i (vector-ref xs i))))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? (list-ref\
    \ xs i))))\n    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n           \
    \  #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n     \
    \        #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([i (in-range (length xs))]\n             #:when\
    \ (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range\
    \ (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* (add1 i) x)))\n", "  (for/list ([i (in-range (length xs))]\n    \
    \         #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (map (lambda\
    \ (x i) (* x i))\n       (cdr xs)\n       (range 1 (length xs))))\n", "  (for/list\
    \ ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when (not (zero?\
    \ x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range 1\
    \ (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (not\
    \ (zero? x))\n             #:index i)\n    (* (add1 i) x)))\n", "  (for/list ([i\
    \ (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n   \
    \          #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([x xs]\n          \
    \   #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n    (*\
    \ i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))]\n        \
    \     #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref\
    \ xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n             #:when\
    \ (not (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (zero? i)))\n    (* i\
    \ (list-ref xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n        \
    \     #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n \
    \            #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (for/list ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n\
    \    (* (list-ref xs i) i)))\n", "  (for/list ([x xs]\n             #:when (positive?\
    \ (length xs))\n             #:index i)\n    (* (sub1 i) x)))\n", "  (for/list\
    \ ([i (in-range (length xs))])\n    (* (list-ref xs i) i)))\n", "  (for/list ([x\
    \ xs]\n             #:when (positive? (length xs))\n             #:index i)\n\
    \    (* (sub1 i) x)))\n", "  (for/list ([i (in-range 1 (length xs))]\n       \
    \      #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([i (in-range (length xs))]\n             #:when\
    \ (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range 1\
    \ (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))]\n  \
    \           #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n", "  (map (lambda\
    \ (x i) (* x i))\n       (cdr xs)\n       (range 1 (length xs))))\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (map (lambda (x i) (* x i))\n       (cdr xs)\n       (range 1\
    \ (length xs))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when\
    \ (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range 1\
    \ (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n \
    \   (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n \
    \            #:when (not (zero? (vector-ref xs i))))\n    (* i (vector-ref xs\
    \ i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not\
    \ (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n", "  (for/list ([x\
    \ xs]\n             #:when (not (zero? x))\n             #:index i)\n    (* x\
    \ i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n       \
    \      #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n\
    \             #:when (not (zero? (list-ref xs i))))\n    (* i (list-ref xs i))))\n",
  "  (map (lambda (x i) (* x i)) (cdr xs) (range 1 (length xs))))\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n     \
    \        #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range (length xs))]\n\
    \             #:when (not (= i 0)))\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length xs))]\n         \
    \    #:when (positive? i))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range\
    \ 1 (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs\
    \ i))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (zero? i)))\n    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n        \
    \     #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n \
    \            #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range 1 (length\
    \ xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n \
    \   (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range (length xs))]\n   \
    \          #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list\
    \ ([i (in-range 1 (length xs))]\n             #:when (not (zero? (list-ref xs\
    \ i))))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))]\n\
    \             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list\
    \ ([i (in-range 1 (length xs))]\n             #:when (not (zero? (vector-ref xs\
    \ i))))\n    (* i (vector-ref xs i))))\n", "  (for/list ([i (in-range 1 (length\
    \ xs))]\n             #:when (positive? i))\n    (* i (list-ref xs i))))\n", " \
    \ (map (lambda (x i) (* x i))\n       (rest xs)\n       (range 1 (length xs))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range (length xs))]\n           \
    \  #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([x xs]\n\
    \             #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? (list-ref\
    \ xs i))))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (for/list ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n\
    \    (* (list-ref xs i) i)))\n", "  (for/list ([x xs]\n             #:when (not\
    \ (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range\
    \ (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n",
  "  (for/list ([x xs] [i (in-range (length xs))])\n    (* (add1 i) x)))\n", "  (for/list\
    \ ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n    (*\
    \ i (list-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (not (zero?\
    \ x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([x xs]\n             #:when (positive?\
    \ (length xs))\n             #:index (in-naturals 1))\n    (* x (sub1 (length\
    \ xs)))))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n    \
    \         #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list ([i\
    \ (in-range 1 (length xs))]\n             #:when (not (zero? (list-ref xs i))))\n\
    \    (* i (list-ref xs i))))\n", "  (map (lambda (x i) (* x i))\n       (cdr xs)\n\
    \       (range 1 (length xs))))\n", "  (for/list ([x xs]\n             #:when\
    \ (not (zero? x))\n             #:index i)\n    (* x i)))\n</code>\n", "  (for/list\
    \ ([x xs]\n             #:when (not (zero? x))\n             #:index i)\n    (*\
    \ x i)))\n", "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1\
    \ i)) (add1 i))))\n", "  (for/list ([i (in-range (length xs))])\n    (* (list-ref\
    \ xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range (length xs))])\n   \
    \ (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range (length\
    \ xs))])\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range (length xs))])\n\
    \    (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range 1 (length\
    \ xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs i))))\n",
  "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range (length xs))])\n    (* (list-ref\
    \ xs (add1 i)) (add1 i))))\n", "  (map (lambda (x i) (* x i))\n       (cdr xs)\n\
    \       (range 1 (length xs))))\n", "  (for/list ([i (in-range (length xs))])\n\
    \    (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range 1 (length\
    \ xs))]\n             #:when (not (zero? (vector-ref xs i))))\n    (* i (vector-ref\
    \ xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n             #:when\
    \ (positive? i))\n    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length\
    \ xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([x xs]\n\
    \             #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n",
  "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([i (in-range 1 (length xs))]\n             #:when (not (zero? i)))\n\
    \    (* i (list-ref xs i))))\n", "  (for/list ([i (in-range (length xs))])\n \
    \   (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([i (in-range (length\
    \ xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n", "  (for/list ([x xs]\n\
    \             #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n",
  "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([i (in-range (length xs))])\n    (* (list-ref xs (add1 i)) (add1 i))))\n",
  "  (for/list ([x xs]\n             #:when (not (zero? x))\n             #:index\
    \ i)\n    (* x i)))\n", "  (for/list ([i (in-range (length xs))]\n           \
    \  #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (map (lambda (x i)\
    \ (* x i))\n       (cdr xs)\n       (range 1 (length xs))))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (positive? (length\
    \ xs))\n             #:index i)\n    (* (sub1 i) x)))\n", "  (for/list ([i (in-range\
    \ 1 (length xs))]\n             #:when (not (zero? (list-ref xs i))))\n    (*\
    \ i (list-ref xs i))))\n", "  (for/list ([i (in-range 1 (length xs))]\n      \
    \       #:when (positive? i))\n    (* i (list-ref xs i))))\n", "  (for/list ([i\
    \ (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n \
    \            #:index i)\n    (* x i)))\n", "  (for/list ([x xs]\n            \
    \ #:when (not (zero? x))\n             #:index i)\n    (* x i)))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (positive? (length\
    \ xs))\n             #:index i)\n    (* (sub1 i) (list-ref xs i))))\n", "  (for/list\
    \ ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n    (* (list-ref\
    \ xs i) i)))\n", "  (for/list ([x xs]\n             #:when (not (zero? x))\n \
    \            #:index i)\n    (* x i)))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (let loop ([xs xs] [i 0])\n    (cond [(empty? xs) empty]\n          [else (cons\
    \ (* i (first xs)) (loop (rest xs) (+ i 1)))])))\n", "  (for/list ([i (in-range\
    \ 1 (length xs))]\n             #:when (not (zero? i)))\n    (* i (list-ref xs\
    \ i))))\n", "  (for/list ([i (in-range (length xs))]\n             #:when (not\
    \ (= i 0)))\n    (* (list-ref xs i) i)))\n", "  (for/list ([i (in-range (length\
    \ xs))]\n             #:when (not (= i 0)))\n    (* (list-ref xs i) i)))\n", " \
    \ (for/list ([i (in-range (length xs))]\n             #:when (not (= i 0)))\n\
    \    (* (list-ref xs i) i)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
