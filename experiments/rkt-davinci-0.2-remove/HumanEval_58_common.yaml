name: HumanEval_58_common
language: rkt
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  (define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(member (first\
    \ l1) l2)\n     (cons (first l1) (common (rest l1) l2))]\n    [else (common (rest\
    \ l1) l2)]))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (set-intersect (set\
    \ l1) (set l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort\n   (remove-duplicates\n    (append l1 l2))\n\
    \   <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (let loop ([l1 l1] [l2 l2]\
    \ [acc '()])\n    (cond [(empty? l1) acc]\n          [(empty? l2) acc]\n     \
    \     [(member (first l1) l2)\n           (loop (rest l1) l2 (cons (first l1)\
    \ acc))]\n          [else (loop (rest l1) l2 acc)])))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (define (common-helper l1 l2)\n    (cond\n      [(empty? l1) empty]\n      [(empty?\
    \ l2) empty]\n      [(equal? (first l1) (first l2))\n       (cons (first l1) (common-helper\
    \ (rest l1) (rest l2)))]\n      [(< (first l1) (first l2)) (common-helper (rest\
    \ l1) l2)]\n      [else (common-helper l1 (rest l2))]))\n  (sort (common-helper\
    \ l1 l2) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (set-intersect (set l1) (set l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n\
    \    [(member (first l1) l2)\n     (cons (first l1) (common (rest l1) l2))]\n\
    \    [else (common (rest l1) l2)]))\n", "  (sort (remove-duplicates (append l1\
    \ l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n\
    \        [(member (first l1) l2) (cons (first l1) (common (rest l1) l2))]\n  \
    \      [else (common (rest l1) l2)]))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (set-intersect (set l1) (set l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) &lt;))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (set-intersect (set l1) (set l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates (append\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (let ([s1 (set l1)]\n   \
    \     [s2 (set l2)])\n    (sort (set-intersect s1 s2) <)))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) #&lt;))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (set-intersect (set l1) (set l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (set-intersect (set l1) (set l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (define (common-helper l1\
    \ l2 acc)\n    (cond [(empty? l1) acc]\n          [(empty? l2) acc]\n        \
    \  [(equal? (first l1) (first l2))\n           (common-helper (rest l1) (rest\
    \ l2) (cons (first l1) acc))]\n          [(< (first l1) (first l2))\n        \
    \   (common-helper (rest l1) l2 acc)]\n          [else (common-helper l1 (rest\
    \ l2) acc)]))\n  (reverse (common-helper (sort l1 <) (sort l2 <) '())))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
