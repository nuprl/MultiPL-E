name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;;\
  \ * sentence contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word) (is-prime?\
    \ (string-length word)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d)\
    \ 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n  \
    \    (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (string-ref\
    \ word 0))\n         (filter (lambda (word) (is-prime? (string-length word)))\n\
    \                 (string-split sentence #\\space))))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond\n    \
    \    [(> i (/ n 2)) #t]\n        [(is-divisible? n i) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (sentence-to-list sentence)\n    (string-split\
    \ sentence #\\space))\n  (define (filter-prime-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) sentence))\n  (define (list-to-string\
    \ lst)\n    (string-join lst #\\space))\n  (list-to-string (filter-prime-words\
    \ (sentence-to-list sentence))))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n      \
    \      (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (is-prime? (string-length word))) (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper? n i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper? n (- i 1))]))\n\
    \    (is-prime-helper? n (- n 1)))\n  (define (words-in-sentence-helper sentence\
    \ acc)\n    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ acc (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (string-trim (words-in-sentence-helper (string-split sentence #\\\
    space) \"\")))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i (sqrt n))\
    \ #t)\n            ((is-divisible? n i) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (prime-words words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (prime-words (cdr words))))\n          (else (prime-words (cdr words)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (is-divisible? n d)\n      \
    \   (cond\n           [(= d 1) #f]\n           [(= (modulo n d) 0) #t]\n     \
    \      [else (is-divisible? n (- d 1))]))\n       (is-divisible? n (- n 1))]))\n\
    \  (define (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n\
    \          (if (= (modulo n i) 0)\n              #f\n              (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter sentence result)\n    (if (null? sentence)\n\
    \        result\n        (let ((word (car sentence))\n              (rest (cdr\
    \ sentence)))\n          (if (is-prime? (string-length word))\n              (iter\
    \ rest (string-append result \" \" word))\n              (iter rest result)))))\n\
    \  (iter (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((<= divisor (sqrt n))\n             (cond ((is-divisible?\
    \ n divisor) #f)\n                   (else (is-prime-helper n (+ divisor 1)))))\n\
    \            (else #t)))\n    (is-prime-helper n 2))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\"))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper? n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n\
    \ d) 0) #f)\n            (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\
    \ ((null? sentence) result)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (words-in-sentence-helper (cdr sentence) (string-append result (car\
    \ sentence) \" \")))\n          (else (words-in-sentence-helper (cdr sentence)\
    \ result))))\n  (words-in-sentence-helper (string-split sentence) \"\"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-aux n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-aux n\
    \ (- i 1)))))\n    (is-prime-aux n (- n 1)))\n  (define (words-in-sentence-aux\
    \ sentence result)\n    (cond ((null? sentence) result)\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-aux (cdr sentence)\
    \ (string-append result (car sentence) \" \")))\n          (else (words-in-sentence-aux\
    \ (cdr sentence) result))))\n  (words-in-sentence-aux (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word)\n              (is-prime? (string-length word)))\n\
    \            (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (reverse acc)]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (string-join (words-in-sentence-helper (string-split sentence) '())\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (let loop ([i 3])\n    \
    \     (cond\n           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n\
    \           [else (loop (+ i 2))]))]))\n  (define (prime-words sentence)\n   \
    \ (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (+ i 1))]))\n    (is-prime-iter? n 2))\n  (define\
    \ (words-in-sentence-iter sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (append result (list (first sentence))))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) result)]))\n  (string-join (words-in-sentence-iter (string-split\
    \ sentence #\\space) '()) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n divisor)\n      (cond ((= divisor 1) #t)\n            ((=\
    \ (modulo n divisor) 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((empty? sentence) empty)\n          ((is-prime? (string-length (first\
    \ sentence)))\n           (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence))))\n          (else (prime-words-in-sentence (rest sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n\
    \        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (-\
    \ n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n     \
    \ [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(=\
    \ n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n     \
    \ [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n\
    \      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15)\
    \ #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(=\
    \ n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n \
    \     [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26)\
    \ #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(=\
    \ n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n \
    \     [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37)\
    \ #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(=\
    \ n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n \
    \     [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48)\
    \ #f]\n      [(= n 49) #f]\n      [(= n 50)", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n     \
    \ [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence acc)\n    (cond\n\
    \      [(empty? sentence) (reverse acc)]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-helper (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-helper (rest sentence) acc)]))\n  (string-join\
    \ (words-in-sentence-helper (string-split sentence #\\space) '()) #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (if (= divisor 1)\n          #t\n          (if (zero? (modulo\
    \ n divisor))\n              #f\n              (is-prime-helper n (- divisor 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((empty? sentence) empty)\n          ((is-prime? (string-length (first\
    \ sentence)))\n           (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence))))\n          (else (prime-words-in-sentence (rest sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (get-words sentence)\n    (regexp-match* #rx\"\
    \\w+\" sentence))\n  (define (get-lengths words)\n    (map string-length words))\n\
    \  (define (get-prime-lengths lengths)\n    (filter is-prime? lengths))\n  (define\
    \ (get-prime-words words lengths)\n    (filter (lambda (word) (member (string-length\
    \ word) lengths)) words))\n  (define (get-prime-sentence words)\n    (string-join\
    \ words \" \"))\n  (get-prime-sentence (get-prime-words (get-words sentence) (get-prime-lengths\
    \ (get-lengths (get-words sentence))))))\n", "  (define (is-prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (for/list ([word (in-list (string-split\
    \ sentence))])\n    (if (is-prime? (string-length word))\n        word\n     \
    \   \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (w)\
    \ (string-length w))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n\
    \         (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n\
    \      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence words)\n    (cond ((null? sentence) words)\n\
    \          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-helper\
    \ (cdr sentence) (cons (car sentence) words)))\n          (else (words-in-sentence-helper\
    \ (cdr sentence) words))))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (string-ref\
    \ word 0))\n         (filter (lambda (word) (is-prime? (string-length word)))\n\
    \                 (string-split sentence #\\space))))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(is-divisible? n i) #f]\n        [else (loop (+ i\
    \ 1))]))\n    (loop 2))\n  (define (loop sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (loop (rest sentence) (append result (list (first sentence))))]\n      [else\
    \ (loop (rest sentence) result)]))\n  (loop (string-split sentence #\\space) '()))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? n d)\n      (= (remainder n\
    \ d) 0))\n    (define (smallest-divisor n)\n      (define (find-divisor n test-divisor)\n\
    \        (cond ((> (square test-divisor) n) n)\n              ((is-divisible?\
    \ n test-divisor) test-divisor)\n              (else (find-divisor n (+ test-divisor\
    \ 1)))))\n      (find-divisor n 2))\n    (= (smallest-divisor n) n))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-iter\
    \ sentence result)\n      (cond ((null? sentence) result)\n            ((is-prime?\
    \ (string-length (car sentence)))\n             (prime-words-in-sentence-iter\
    \ (cdr sentence) (append result (list (car sentence)))))\n            (else (prime-words-in-sentence-iter\
    \ (cdr sentence) result))))\n    (prime-words-in-sentence-iter (string-split sentence)\
    \ '()))\n  (string-join (prime-words-in-sentence sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (define (iter words)\n      (cond ((null?\
    \ words) '())\n            ((is-prime? (string-length (car words)))\n        \
    \     (cons (car words) (iter (cdr words))))\n            (else (iter (cdr words)))))\n\
    \    (iter (string-split sentence #\\space)))\n  (string-join (prime-words-in-sentence\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (divisors n)\n\
    \      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero?\
    \ (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define (word-lengths sentence)\n\
    \    (for/list ([word (in-list (string-split sentence #\\space))])\n      (string-length\
    \ word)))\n  (define (prime-word-lengths sentence)\n    (for/list ([length (in-list\
    \ (word-lengths sentence))])\n      (if (is-prime? length) length)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([word (in-list (string-split sentence\
    \ #\\space))])\n      (if (member (string-length word) (prime-word-lengths sentence))\n\
    \          word)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words (cdr sentence))))\n\
    \          (else (prime-words (cdr sentence)))))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter\
    \ divisor)\n      (cond ((> divisor (/ n 2)) #t)\n            ((is-divisible?\
    \ n divisor) #f)\n            (else (iter (+ divisor 1)))))\n    (iter 2))\n \
    \ (define (prime-words sentence)\n    (cond ((null? sentence) '())\n         \
    \ ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (reverse acc)]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (string-join (words-in-sentence-helper (string-split sentence #\\\
    space) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-length-words words)\n   \
    \ (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (prime-length-words (rest words)))]\n \
    \     [else (prime-length-words (rest words))]))\n  (string-join (prime-length-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (divisors n)\n      (for/list ([i (in-range 1 (+ 1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (prime-words\
    \ sentence)\n    (cond\n      [(empty? sentence) '()]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n \
    \   (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (i) (list-ref (string-split\
    \ sentence #\\space) i))\n         (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter divisor)\n\
    \      (cond ((> divisor (/ n 2)) #t)\n            ((is-divisible? n divisor)\
    \ #f)\n            (else (iter (+ divisor 1)))))\n    (iter 2))\n  (define (iter\
    \ words result)\n    (cond ((null? words) result)\n          ((is-prime? (string-length\
    \ (car words)))\n           (iter (cdr words) (string-append result (car words)\
    \ \" \")))\n          (else (iter (cdr words) result))))\n  (iter (string-split\
    \ sentence #\\space) \"\"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i\
    \ (sqrt n)) #t)\n            ((is-divisible? n i) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (\u03BB (x) (list-ref (string-split sentence #\\space) x))\n       \
    \  (prime-word-lengths sentence)))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n\
    \            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n \
    \   (loop 2))\n  (define (loop lst acc)\n    (cond ((null? lst) (string-join (reverse\
    \ acc) \" \"))\n          ((is-prime? (string-length (car lst))) (loop (cdr lst)\
    \ (cons (car lst) acc)))\n          (else (loop (cdr lst) acc))))\n  (loop (string-split\
    \ sentence #\\space) '()))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (word)\n           (string-ref\
    \ word (sub1 (length word))))\n         (string-split sentence #\\space)))\n \
    \ (string-join (filter (lambda (word)\n                         (member (string-length\
    \ word)\n                                 (prime-word-lengths sentence)))\n  \
    \                     (string-split sentence #\\space))\n               #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter?\
    \ n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-iter (rest sentence) (string-append\
    \ acc (first sentence) \" \"))]\n      [else (words-in-sentence-iter (rest sentence)\
    \ acc)]))\n  (string-trim (words-in-sentence-iter (string-split sentence #\\space)\
    \ \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (prime-words-in-sentence sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor\
    \ n)\n      (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-length-words sentence)\n  \
    \  (cond ((null? sentence) '())\n          ((is-prime (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-length-words (cdr sentence))))\n     \
    \     (else (prime-length-words (cdr sentence)))))\n  (string-join (prime-length-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (modulo n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words (cdr sentence))))\n\
    \          (else (prime-words (cdr sentence)))))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(= i n) #t]\n          \
    \ [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n       (iter\
    \ 3)]))\n  (define (prime-words-in-sentence sentence)\n    (cond\n      [(empty?\
    \ sentence) '()]\n      [(is-prime? (string-length (first sentence)))\n      \
    \ (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n      [else\
    \ (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0)\
    \ #f]\n      [else\n       (define (is-prime-helper n i)\n         (cond\n   \
    \        [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (is-prime-helper n (+ i 1))]))\n       (is-prime-helper n 3)]))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (reverse acc)]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (string-join (words-in-sentence-helper (string-split sentence #\\\
    space) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond ((>\
    \ divisor (/ n 2)) #t)\n            ((is-divisible? n divisor) #f)\n         \
    \   (else (iter (+ divisor 1)))))\n    (iter 2))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n  \
    \         [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/\
    \ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((empty? sentence)\
    \ '())\n          ((is-prime-word? (first sentence))\n           (cons (first\
    \ sentence) (prime-words-in-sentence (rest sentence))))\n          (else (prime-words-in-sentence\
    \ (rest sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (reverse acc)]\n      [(is-prime? (string-length (first sentence)))\n      \
    \ (words-in-sentence-iter (rest sentence) (cons (first sentence) acc))]\n    \
    \  [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (word-at-index\
    \ sentence i)\n    (string-ref sentence i))\n  (define (word-at-index-in-sentence\
    \ sentence i)\n    (word-at-index sentence i))\n  (define (word-at-index-in-sentence-with-spaces\
    \ sentence i)\n    (string-append (word-at-index-in-sentence sentence i) \" \"\
    ))\n  (define (word-at-index-in-sentence-with-spaces-and-newline sentence i)\n\
    \    (string-append (word-at-index-in-sentence-with-spaces sentence i) \"\\n\"\
    ))\n  (define (word-at-index-in-sentence-with-spaces-and-newline-and-tabs sentence\
    \ i)\n    (string-append (word-at-index-in-sentence-with-spaces-and-newline sentence\
    \ i) \"\\t\"))\n  (define (word-at-index-in-sentence-with-spaces-and-newline-and-tabs-and-commas\
    \ sentence i)\n    (string-append (word-at-index-in-sentence-with-spaces-and-newline-and-tabs\
    \ sentence i) \",\"))\n  (define (word-at-index-in-sentence-with-spaces-and-newline-and-tabs-and-commas-and-dots\
    \ sentence i)\n    (string-append (word-at-index-in-sentence-with-spaces-and-newline-and-tabs-and-commas\
    \ sentence i) \".\"))\n  (define (word-at-index-in-", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (modulo\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (prime-words sentence)\n    (define (iter words)\n      (if (null?\
    \ words)\n          '()\n          (if (is-prime? (string-length (car words)))\n\
    \              (cons (car words) (iter (cdr words)))\n              (iter (cdr\
    \ words)))))\n    (iter (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (string-join\n   (filter is-prime?\n         \
    \  (map string-length\n                (string-split sentence #\\space)))\n  \
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (if (=\
    \ i n)\n          #t\n          (if (= (modulo n i) 0)\n              #f\n   \
    \           (helper (+ i 1)))))\n    (helper 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (w) (is-prime? (string-length w))) (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-aux? n i)\n      (cond ((= i 1) #t)\n \
    \           ((= (modulo n i) 0) #f)\n            (else (is-prime-aux? n (- i 1)))))\n\
    \    (is-prime-aux? n (- n 1)))\n  (define (prime-words lst)\n    (cond ((null?\
    \ lst) '())\n          ((is-prime? (string-length (car lst))) (cons (car lst)\
    \ (prime-words (cdr lst))))\n          (else (prime-words (cdr lst)))))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-length-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-length-words (cdr sentence))))\n\
    \          (else (prime-length-words (cdr sentence)))))\n  (string-join (prime-length-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (word-lengths-to-words sentence)\n    (define (word-length-to-word\
    \ sentence word-length)\n      (define (word-length-to-word-iter sentence word-length)\n\
    \        (cond ((= (string-length sentence) 0) \"\")\n              ((= (string-length\
    \ (first (string-split sentence #\\space))) word-length)\n               (first\
    \ (string-split sentence #\\space)))\n              (else (word-length-to-word-iter\
    \ (string-join (rest (string-split sentence #\\space)) #\\space) word-length))))\n\
    \      (word-length-to-word-iter sentence word-length))\n    (map (lambda (word-length)\
    \ (word-length-to-word sentence word-length)) (prime-word-lengths sentence)))\n\
    \  (string-join (word-lengths-to-words sentence) #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence\
    \ acc)\n    (cond\n      [(empty? sentence) (reverse acc)]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (cons (first sentence) acc))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (string-join (words-in-sentence-helper (string-split sentence #\\\
    space) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n      (define\
    \ (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n\
    \              ((is-divisible? n test-divisor) test-divisor)\n              (else\
    \ (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= (smallest-divisor\
    \ n) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence \" \")) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n    \
    \       [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n \
    \       [else (is-prime-helper? n (- d 1))]))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (prime-words (rest words)))]\n      [else\
    \ (prime-words (rest words))]))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (divisors n)\n\
    \      (for/list ([i (in-range 2 (add1 (quotient n 2)))])\n        (if (zero?\
    \ (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define (word-lengths sentence)\n\
    \    (for/list ([word (in-list (string-split sentence))])\n      (string-length\
    \ word)))\n  (define (prime-word-lengths sentence)\n    (for/list ([word-length\
    \ (in-list (word-lengths sentence))])\n      (if (is-prime? word-length) word-length)))\n\
    \  (define (prime-words sentence)\n    (for/list ([word (in-list (string-split\
    \ sentence))])\n      (if (is-prime? (string-length word)) word)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (string-join (prime-words sentence)\
    \ \" \"))\n  (prime-words-in-sentence sentence))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n      \
    \  [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n   \
    \ (is-prime-helper n (- n 1)))\n  (define (prime-words-helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (prime-words-helper (rest sentence) (string-append\
    \ result (first sentence) \" \"))]\n      [else (prime-words-helper (rest sentence)\
    \ result)]))\n  (string-trim (prime-words-helper (string-split sentence #\\space)\
    \ \"\")))\n", "  (define (is-prime? n)\n    (define (is-divisor? n d)\n      (=\
    \ (remainder n d) 0))\n    (define (loop d)\n      (cond ((> d n) #t)\n      \
    \      ((is-divisor? n d) #f)\n            (else (loop (+ d 1)))))\n    (loop\
    \ 2))\n  (define (loop sentence)\n    (cond ((null? sentence) '())\n         \
    \ ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (loop (cdr sentence))))\n          (else (loop (cdr sentence)))))\n  (string-join\
    \ (loop (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n divisor)\n      (cond ((= divisor 1) #t)\n   \
    \         ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper n\
    \ (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((< i n)\
    \ (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word)) (string-split sentence #\\space)))\n  (define (prime-length-words sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-length-words-in-sentence\
    \ sentence)\n    (map (lambda (word) (string-ref word 0)) (prime-length-words\
    \ sentence)))\n  (string-join (prime-length-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n  \
    \         [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (prime-words sentence)\n  \
    \  (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (+ i 1))]))\n    (helper 2))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (if (= i 1)\n\
    \          #t\n          (if (= (modulo n i) 0)\n              #f\n          \
    \    (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (if (null? sentence)\n        '()\n\
    \        (if (is-prime? (string-length (car sentence)))\n            (cons (car\
    \ sentence) (words-in-sentence-helper (cdr sentence)))\n            (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (prime-words-in-sentence sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words-in-sentence (cdr sentence))))\n          (else (prime-words-in-sentence\
    \ (cdr sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence words)\n    (cond\
    \ ((null? sentence) words)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (words-in-sentence-helper (cdr sentence) (append words (list (car\
    \ sentence)))))\n          (else (words-in-sentence-helper (cdr sentence) words))))\n\
    \  (words-in-sentence-helper (string-split sentence) '()))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define\
    \ (helper sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (helper (rest\
    \ sentence)))]\n      [else (helper (rest sentence))]))\n  (string-join (helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor\
    \ n)\n      (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter x)\n      (if (= x n) #t\n          (if (= (remainder n x) 0)\
    \ #f\n              (iter (+ x 1)))))\n    (iter 2))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (if (empty? sentence) empty\n        (let ((word (first sentence))\n\
    \              (rest (rest sentence)))\n          (if (is-prime? (string-length\
    \ word))\n              (cons word (words-in-sentence-helper rest))\n        \
    \      (words-in-sentence-helper rest)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n divisor)\n      (cond\n        [(= divisor 1) #t]\n\
    \        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper n (- divisor\
    \ 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (words-in-sentence-helper (rest sentence) result)]))\n  (words-in-sentence-helper\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (cond ((= n\
    \ 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n\
    \           (let loop ((i 3))\n             (cond ((= i n) #t)\n             \
    \      ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n\
    \         (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (is-prime? (string-length word)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(is-divisible?\
    \ n i) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (iter divisor)\n      (cond ((> divisor (/ n 2)) #t)\n\
    \            ((is-divisible? n divisor) #f)\n            (else (iter (+ divisor\
    \ 1)))))\n    (iter 2))\n  (define (prime-words sentence)\n    (define (prime-words-iter\
    \ sentence result)\n      (cond ((null? sentence) result)\n            ((is-prime?\
    \ (string-length (car sentence)))\n             (prime-words-iter (cdr sentence)\
    \ (append result (list (car sentence)))))\n            (else (prime-words-iter\
    \ (cdr sentence) result))))\n    (prime-words-iter sentence '()))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n divisor)\n      (if (= divisor 1)\n     \
    \     #t\n          (if (zero? (modulo n divisor))\n              #f\n       \
    \       (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence result)\n    (if (empty? sentence)\n\
    \        result\n        (if (is-prime? (string-length (first sentence)))\n  \
    \          (words-in-sentence-helper (rest sentence) (string-append result (first\
    \ sentence) \" \"))\n            (words-in-sentence-helper (rest sentence) result))))\n\
    \  (words-in-sentence-helper (string-split sentence #\\space) \"\"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (string-ref word 0))\n         (filter (lambda\
    \ (word) (is-prime? (string-length word)))\n                 (string-split sentence\
    \ #\\space))))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (prime-words sentence)\n    (cond\n      [(empty? sentence) '()]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (prime-words\
    \ (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n \
    \       [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (+\
    \ i 1))]))\n    (helper 2))\n  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) '()]\n      [(is-prime? (string-length (first lst)))\n       (cons (first\
    \ lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (get-words sentence)\n    (string-split\
    \ sentence #\\space))\n  (define (get-prime-words words)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) words))\n  (define (join-words words)\n\
    \    (string-join words #\\space))\n  (join-words (get-prime-words (get-words\
    \ sentence))))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (filter-prime-length-words words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (filter-prime-length-words (rest words)))]\n     \
    \ [else (filter-prime-length-words (rest words))]))\n  (string-join (filter-prime-length-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (define (iter words)\n      (cond\n        [(empty? words) empty]\n\
    \        [(is-prime? (string-length (first words)))\n         (cons (first words)\
    \ (iter (rest words)))]\n        [else (iter (rest words))]))\n    (iter (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words-in-sentence sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n    \
    \  (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else\
    \ (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence words)\n    (cond\n      [(empty? sentence)\
    \ words]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (append words (list (first sentence))))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) words)]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space) '()) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n  \
    \    (cond ((> i (sqrt n)) #t)\n            ((is-divisible? n i) #f)\n       \
    \     (else (loop (+ i 1)))))\n    (cond ((<= n 1) #f)\n          ((= n 2) #t)\n\
    \          (else (loop 2))))\n  (define (prime-words words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (prime-words (cdr words))))\n          (else (prime-words\
    \ (cdr words)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (iter words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime? (string-length (car words)))\n           (cons (car\
    \ words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter\
    \ i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible? n i) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-words-iter sentence word-lengths)\n      (cond\
    \ ((null? sentence) '())\n            ((= (string-length (car sentence)) (car\
    \ word-lengths))\n             (cons (car sentence) (prime-words-iter (cdr sentence)\
    \ (cdr word-lengths))))\n            (else (prime-words-iter (cdr sentence) word-lengths))))\n\
    \    (prime-words-iter (string-split sentence #\\space) (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n     \
    \ [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define\
    \ (prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (prime-helper n (- i 1))]))\n    (prime-helper n (-\
    \ n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(prime? (string-length (first sentence)))\n       (cons\
    \ (first sentence) (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime? n\
    \ i)\n      (if (= i n)\n          #t\n          (if (= (modulo n i) 0)\n    \
    \          #f\n              (is-prime? n (+ i 1)))))\n    (is-prime? n 2))\n\
    \  (define (prime-words sentence)\n    (define (prime-words sentence acc)\n  \
    \    (cond ((empty? sentence) acc)\n            ((is-prime? (string-length (first\
    \ sentence)))\n             (prime-words (rest sentence) (append acc (list (first\
    \ sentence)))))\n            (else (prime-words (rest sentence) acc))))\n    (prime-words\
    \ sentence '()))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (word) (string-ref word 0))\n\
    \         (filter (lambda (word) (is-prime? (string-length word)))\n         \
    \        (string-split sentence #\\space))))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper\
    \ (+ i 1)))))\n    (helper 2))\n  (define (helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (helper (cdr sentence))))\n          (else (helper\
    \ (cdr sentence)))))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (iter (rest sentence) (append result (list (first sentence))))]\n      [else\
    \ (iter (rest sentence) result)]))\n  (iter (string-split sentence #\\space) '()))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1)\
    \ #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (prime-word?\
    \ word)\n      (member (string-length word) (prime-word-lengths sentence)))\n\
    \    (filter prime-word? (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (get-prime-words sentence)\n   \
    \ (define (iter sentence acc)\n      (cond\n        [(empty? sentence) acc]\n\
    \        [(is-prime? (string-length (first sentence)))\n         (iter (rest sentence)\
    \ (append acc (list (first sentence))))]\n        [else (iter (rest sentence)\
    \ acc)]))\n    (iter sentence '()))\n  (string-join (get-prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n     \
    \ [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n \
    \     [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12)\
    \ #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(=\
    \ n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n \
    \     [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23)\
    \ #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(=\
    \ n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n \
    \     [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34)\
    \ #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(=\
    \ n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n \
    \     [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45)\
    \ #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(=\
    \ n 49) #f]\n      [(= n 50)", "  (define (is-prime? n)\n    (define (helper i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (+ i 1))]))\n    (helper 2))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1)\
    \ #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (divisible? n m)\n      (= (remainder\
    \ n m) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-iter? n (- divisor 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((empty?\
    \ sentence) '())\n          ((is-prime? (string-length (first sentence)))\n  \
    \         (cons (first sentence) (prime-words-in-sentence (rest sentence))))\n\
    \          (else (prime-words-in-sentence (rest sentence)))))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\n      \
    \  [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper\
    \ n (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (and (not (zero? n))\n         (not (or\
    \ (zero? (modulo n 2))\n                  (zero? (modulo n 3))\n             \
    \     (zero? (modulo n 5))\n                  (zero? (modulo n 7))))))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (is-prime? (string-length word)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n          \
    \  ((= (modulo n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (is-prime-word? word)\n    (is-prime?\
    \ (string-length word)))\n  (define (prime-words-in-sentence sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime-word? (car sentence))\n       \
    \    (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n       \
    \   (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((is-divisible? n i) #f)\n       \
    \     (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words result)\n\
    \    (cond ((null? words) result)\n          ((is-prime? (string-length (car words)))\n\
    \           (iter (cdr words) (string-append result (car words) \" \")))\n   \
    \       (else (iter (cdr words) result))))\n  (iter (string-split sentence #\\\
    space) \"\"))\n", "  (define (is-prime? n)\n    (define (divisible? a b)\n   \
    \   (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n\
    \                   ((= (remainder n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word) (prime-lengths sentence)))\n\
    \            (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n\
    \        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (-\
    \ n 1)))\n  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence acc)\n      (cond\n        [(empty? sentence) acc]\n        [(is-prime?\
    \ (string-length (first sentence)))\n         (prime-words-in-sentence-helper\
    \ (rest sentence) (string-append acc (first sentence) \" \"))]\n        [else\
    \ (prime-words-in-sentence-helper (rest sentence) acc)]))\n    (prime-words-in-sentence-helper\
    \ (string-split sentence #\\space) \"\"))\n  (prime-words-in-sentence (string-split\
    \ sentence #\\space)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= n divisor) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (+ divisor 1)))))\n    (is-prime-helper\
    \ n 2))\n  (define (prime-words-in-sentence sentence)\n    (cond ((empty? sentence)\
    \ empty)\n          ((is-prime? (string-length (first sentence)))\n          \
    \ (cons (first sentence) (prime-words-in-sentence (rest sentence))))\n       \
    \   (else (prime-words-in-sentence (rest sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (for/list ([word (in-list\
    \ (string-split sentence #\\space))]\n               #:when (member (string-length\
    \ word) (prime-word-lengths sentence)))\n      word))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-helper (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (words-in-sentence-helper (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\n      \
    \  [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper\
    \ n (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (define (prime-words-in-sentence-helper sentence words)\n   \
    \   (cond\n        [(empty? sentence) words]\n        [(is-prime? (string-length\
    \ (first sentence)))\n         (prime-words-in-sentence-helper (rest sentence)\
    \ (append words (list (first sentence))))]\n        [else (prime-words-in-sentence-helper\
    \ (rest sentence) words)]))\n    (prime-words-in-sentence-helper (string-split\
    \ sentence) '()))\n  (string-join (prime-words-in-sentence sentence) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (define (prime-word? word)\n      (member\
    \ (string-length word) (prime-word-lengths sentence)))\n    (filter prime-word?\
    \ (string-split sentence #\\space)))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (prime-words words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (prime-words (cdr words))))\n          (else (prime-words (cdr words)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-at-index sentence i)\n    (list-ref (string-split\
    \ sentence #\\space) i))\n  (define (word-at-index-with-length sentence i)\n \
    \   (list (word-at-index sentence i) (string-length (word-at-index sentence i))))\n\
    \  (define (prime-length-words sentence)\n    (filter (lambda (word-length) (is-prime?\
    \ (cadr word-length)))\n            (word-lengths-with-index sentence)))\n  (define\
    \ (word-lengths-with-index sentence)\n    (map (lambda (i) (word-at-index-with-length\
    \ sentence i))\n         (range (length (string-split sentence #\\space)))))\n\
    \  (define (word-at-index-with-length sentence i)\n    (list (word-at-index sentence\
    \ i) (string-length (word-at-index sentence i))))\n  (define (prime-length-words\
    \ sentence)\n    (filter (lambda (word-length) (is-prime? (cadr word-length)))\n\
    \            (word-lengths-with-index sentence)))\n  (define (word-lengths-with-index\
    \ sentence)\n    (map (lambda (i) (word-at-index-with-length sentence i))\n  \
    \       (range (length (string-split sentence #\\space)))))\n  (string-join (map\
    \ car (prime-length-words sentence)) #\\space))\n", "  (define (prime? n)\n  \
    \  (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n     \
    \ [else\n       (define (loop i)\n         (cond\n           [(= i n) #t]\n  \
    \         [(= (modulo n i) 0) #f]\n           [else (loop (+ i 1))]))\n      \
    \ (loop 3)]))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n           \
    \ ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n    (cond ((=\
    \ n 1) #f)\n          ((= n 2) #t)\n          (else (loop 2))))\n  (define (loop\
    \ sentence acc)\n    (cond ((null? sentence) (string-join (reverse acc) \" \"\
    ))\n          ((is-prime? (string-length (car sentence)))\n           (loop (cdr\
    \ sentence) (cons (car sentence) acc)))\n          (else (loop (cdr sentence)\
    \ acc))))\n  (loop (string-split sentence) '()))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-rec? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-rec? n (- i 1))]))\n    (is-prime-rec?\
    \ n (- n 1)))\n  (define (words-in-sentence-rec sentence acc)\n    (cond\n   \
    \   [(empty? sentence) (reverse acc)]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-rec (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-rec (rest sentence) acc)]))\n  (string-join\
    \ (words-in-sentence-rec (string-split sentence #\\space) '()) #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper?\
    \ n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ acc (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (words-in-sentence-helper (string-split sentence #\\space) \"\"))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(is-divisible?\
    \ n i) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (let loop ([i 2])\n      (cond\n    \
    \    [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (loop (+ i\
    \ 1))])))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-rec n i)\n      (cond\n        [(= i 1)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-rec n (- i 1))]))\n\
    \    (is-prime-rec n (- n 1)))\n  (define (words-in-sentence-rec sentence)\n \
    \   (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (words-in-sentence-rec (rest sentence)))]\n\
    \      [else (words-in-sentence-rec (rest sentence))]))\n  (string-join (words-in-sentence-rec\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (word-at-index sentence i)\n    (list-ref (string-split sentence #\\\
    space) i))\n  (define (prime-word-at-index sentence i)\n    (word-at-index sentence\
    \ i))\n  (define (prime-words sentence)\n    (for/list ([i (in-range (length (string-split\
    \ sentence #\\space)))])\n      (prime-word-at-index sentence i)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (prime? n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0)\
    \ #f]\n        [else (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define\
    \ (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (prime-words\
    \ (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (if (= i 1)\n          #t\n   \
    \       (if (= (modulo n i) 0)\n              #f\n              (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (helper sentence)\n\
    \    (if (empty? sentence)\n        '()\n        (let ((word (first sentence)))\n\
    \          (if (is-prime? (string-length word))\n              (cons word (helper\
    \ (rest sentence)))\n              (helper (rest sentence))))))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (sentence-helper sentence acc)\n\
    \    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (sentence-helper (rest sentence) (string-append acc (first\
    \ sentence) \" \"))]\n      [else (sentence-helper (rest sentence) acc)]))\n \
    \ (string-trim (sentence-helper (string-split sentence #\\space) \"\")))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\
    \ ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else\
    \ (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (cond ((null? sentence) '())\n     \
    \     ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words-in-sentence (cdr sentence))))\n          (else (prime-words-in-sentence\
    \ (cdr sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define\
    \ (words-in-sentence-helper sentence words)\n    (cond\n      [(empty? sentence)\
    \ words]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (append words (list (first sentence))))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) words)]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space) '()) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-helper (rest sentence) (string-append result (first\
    \ sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (words-in-sentence-helper (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond\
    \ ((> divisor (sqrt n)) #t)\n            ((is-divisible? n divisor) #f)\n    \
    \        (else (iter (+ divisor 1)))))\n    (iter 2))\n  (define (iter words result)\n\
    \    (cond ((null? words) result)\n          ((is-prime? (string-length (car words)))\n\
    \           (iter (cdr words) (string-append result (car words) \" \")))\n   \
    \       (else (iter (cdr words) result))))\n  (iter (string-split sentence #\\\
    space) \"\"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n      (define\
    \ (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n\
    \              ((is-divisible? n test-divisor) test-divisor)\n              (else\
    \ (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= (smallest-divisor\
    \ n) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (define (prime-word-at-index sentence i)\n\
    \      (string-ref (list-ref (string-split sentence #\\space) i) 0))\n    (map\
    \ (lambda (i) (prime-word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (-\
    \ i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ acc (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (words-in-sentence-helper (string-split sentence) \"\"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond ((= divisor\
    \ 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper\
    \ n (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n     \
    \ (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence acc)\n    (cond\n      [(empty?\
    \ sentence) (reverse acc)]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-helper (rest sentence) (cons (first sentence) acc))]\n\
    \      [else (words-in-sentence-helper (rest sentence) acc)]))\n  (string-join\
    \ (words-in-sentence-helper (string-split sentence) '()) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (-\
    \ i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (words-in-sentence-helper (string-split sentence\
    \ #\\space) \"\"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (prime-words-in-sentence sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words (cdr sentence))))\n\
    \          (else (prime-words (cdr sentence)))))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop\
    \ i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n \
    \           (else (loop (+ i 1)))))\n    (cond ((<= n 1) #f)\n          ((= n\
    \ 2) #t)\n          (else (loop 2))))\n  (define (loop sentence result)\n    (cond\
    \ ((null? sentence) result)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (loop (cdr sentence) (string-append result (car sentence) \" \")))\n\
    \          (else (loop (cdr sentence) result))))\n  (string-trim (loop (string-split\
    \ sentence) \"\")))\n", "  (define (is-prime? n)\n    (define (is-prime?-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime?-helper n (- i 1))]))\n    (is-prime?-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-iter (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (cond\n    \
    \  [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n\
    \      [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19)\
    \ #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(=\
    \ n 37) #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n \
    \     [(= n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67)\
    \ #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(=\
    \ n 83) #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (define\
    \ (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (prime-words\
    \ (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word)\n           (list-ref (string-split sentence #\\space) word))\n     \
    \    (prime-word-lengths sentence)))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i)\
    \ 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (prime-words\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n     \
    \ [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n\
    \      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37)\
    \ #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(=\
    \ n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n \
    \     [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83)\
    \ #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (define\
    \ (prime-words words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (prime-words (rest\
    \ words)))]\n      [else (prime-words (rest words))]))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n divisor)\n      (cond\n        [(= divisor 1) #t]\n\
    \        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper n (- divisor\
    \ 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n\
    \            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper n (-\
    \ d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (string-ref word 0))\n         (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n    \
    \   (define (is-divisible? n d)\n         (cond\n           [(= d 1) #f]\n   \
    \        [(= (modulo n d) 0) #t]\n           [else (is-divisible? n (- d 1))]))\n\
    \       (is-divisible? n (- n 1))]))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define\
    \ (prime-words sentence)\n    (cond ((null? sentence) '())\n          ((prime?\
    \ (string-length (car sentence)))\n           (cons (car sentence) (prime-words\
    \ (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (loop i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n\
    \            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths lst)\n\
    \    (map (lambda (word) (string-length word)) lst))\n  (define (prime-word-lengths\
    \ lst)\n    (filter is-prime? (word-lengths lst)))\n  (define (prime-words lst)\n\
    \    (filter (lambda (word) (is-prime? (string-length word))) lst))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (smallest-divisor n)\n      (define (find-divisor n test-divisor)\n        (cond\
    \ ((> (square test-divisor) n) n)\n              ((is-divisible? n test-divisor)\
    \ test-divisor)\n              (else (find-divisor n (+ test-divisor 1)))))\n\
    \      (find-divisor n 2))\n    (= (smallest-divisor n) n))\n  (define (prime-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words (cdr sentence))))\n\
    \          (else (prime-words (cdr sentence)))))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (helper i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (helper (+ i 1)))))\n    (helper 2))\n  (define (helper\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (helper (cdr words))))\n       \
    \   (else (helper (cdr words)))))\n  (string-join (helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n            (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (prime-words sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (prime-words-helper sentence acc)\n    (cond ((null? sentence) (string-join\
    \ (reverse acc) \" \"))\n          ((is-prime? (string-length (car sentence)))\n\
    \           (prime-words-helper (cdr sentence) (cons (car sentence) acc)))\n \
    \         (else (prime-words-helper (cdr sentence) acc))))\n  (prime-words-helper\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n \
    \      (define (loop i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (modulo n i) 0) #f]\n           [else (loop (+ i 1))]))\n       (loop 3)]))\n\
    \  (define (loop sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (loop (rest sentence)\
    \ (append result (list (first sentence))))]\n      [else (loop (rest sentence)\
    \ result)]))\n  (loop (string-split sentence #\\space) '()))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n \
    \       [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word)) (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-word-lengths-to-words sentence)\n    (map (lambda (length) (list-ref\
    \ (string-split sentence #\\space) length)) (prime-word-lengths sentence)))\n\
    \  (string-join (prime-word-lengths-to-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((is-divisible? n\
    \ i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (\u03BB (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (\u03BB\
    \ (word) (string-ref word 0))\n         (filter (\u03BB (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n \
    \       [else (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (prime-words-in-sentence sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (if (= i n) #t\n          (if (= (modulo n i) 0) #f\n              (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (\u03BB\
    \ (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (define (prime-word? word)\n\
    \      (member (string-length word) (prime-word-lengths sentence)))\n    (filter\
    \ prime-word? (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n      \
    \      (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence acc)\n    (cond ((null? sentence)\
    \ acc)\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-helper\
    \ (cdr sentence) (string-append acc (car sentence) \" \")))\n          (else (words-in-sentence-helper\
    \ (cdr sentence) acc))))\n  (words-in-sentence-helper (string-split sentence #\\\
    space) \"\"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n \
    \ (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) true]\n        [(= (modulo n i) 0) false]\n\
    \        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-iter (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) result)]))\n \
    \ (string-trim (words-in-sentence-iter (string-split sentence) \"\")))\n", " \
    \ (define (is-prime n)\n    (define (divisible? n divisor)\n      (if (= divisor\
    \ 1) #t\n          (if (= (modulo n divisor) 0) #f\n              (divisible?\
    \ n (- divisor 1)))))\n    (if (= n 1) #f\n        (divisible? n (- n 1))))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n\
    \         (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (member (string-length word) (prime-lengths sentence)))\n\
    \            (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n \
    \     (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond ((> divisor\
    \ (/ n 2)) #t)\n            ((is-divisible? n divisor) #f)\n            (else\
    \ (iter (+ divisor 1)))))\n    (iter 2))\n  (define (filter-words words)\n   \
    \ (cond ((null? words) '())\n          ((is-prime? (string-length (car words)))\n\
    \           (cons (car words) (filter-words (cdr words))))\n          (else (filter-words\
    \ (cdr words)))))\n  (string-join (filter-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n    \
    \  (= (remainder a b) 0))\n    (define (is-prime-aux n i)\n      (cond ((= i n)\
    \ #t)\n            ((is-divisible? n i) #f)\n            (else (is-prime-aux n\
    \ (+ i 1)))))\n    (is-prime-aux n 2))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (prime-words-in-sentence-aux sentence acc)\n      (cond ((null? sentence)\
    \ acc)\n            ((is-prime? (string-length (car sentence)))\n            \
    \ (prime-words-in-sentence-aux (cdr sentence) (string-append acc (car sentence)\
    \ \" \")))\n            (else (prime-words-in-sentence-aux (cdr sentence) acc))))\n\
    \    (prime-words-in-sentence-aux sentence \"\"))\n  (string-trim (prime-words-in-sentence\
    \ (string-split sentence #\\space))))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (helper sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (helper (cdr sentence))))\n          (else (helper\
    \ (cdr sentence)))))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (reverse acc)]\n      [(is-prime? (string-length (first sentence)))\n      \
    \ (words-in-sentence-helper (rest sentence) (cons (first sentence) acc))]\n  \
    \    [else (words-in-sentence-helper (rest sentence) acc)]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence) '()) \" \"))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter sentence acc)\n\
    \    (cond ((null? sentence) (string-join (reverse acc) \" \"))\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (iter (cdr sentence) (cons (car\
    \ sentence) acc)))\n          (else (iter (cdr sentence) acc))))\n  (iter (string-split\
    \ sentence) '()))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond ((> divisor\
    \ (/ n 2)) #t)\n            ((is-divisible? n divisor) #f)\n            (else\
    \ (iter (+ divisor 1)))))\n    (iter 2))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (prime-words-in-sentence-iter sentence words)\n      (cond ((null?\
    \ sentence) (reverse words))\n            ((is-prime? (string-length (car sentence)))\n\
    \             (prime-words-in-sentence-iter (cdr sentence) (cons (car sentence)\
    \ words)))\n            (else (prime-words-in-sentence-iter (cdr sentence) words))))\n\
    \    (string-join (prime-words-in-sentence-iter (string-split sentence #\\space)\
    \ '()) \" \"))\n  (prime-words-in-sentence sentence))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n   \
    \      (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word)\n           (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n \
    \       [else (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n \
    \   (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(is-divisible? n i) #f]\n  \
    \      [else (loop (+ i 1))]))\n    (loop 2))\n  (define (loop words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (loop (rest words)))]\n      [else (loop (rest words))]))\n\
    \  (string-join (loop (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i n) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper\
    \ 2))\n  (define (helper sentence)\n    (cond\n      [(empty? sentence) '()]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n\
    \    (is-prime-iter? n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
